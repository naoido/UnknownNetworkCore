com.mojang.math.Constants -> a -> com.mojang.math.Constants
    F:float PI -> a
    F:float RAD_TO_DEG -> b
    F:float DEG_TO_RAD -> c
    F:float EPSILON -> d
com.mojang.math.FieldsAreNonnullByDefault -> b -> com.mojang.math.FieldsAreNonnullByDefault
com.mojang.math.Matrix3f -> c -> com.mojang.math.Matrix3f
    F:int ORDER -> j
    F:float G -> k
    F:float CS -> l
    F:float SS -> m
    F:float SQ2 -> n
    F:float m00 -> a
    F:float m01 -> b
    F:float m02 -> c
    F:float m10 -> d
    F:float m11 -> e
    F:float m12 -> f
    F:float m20 -> g
    F:float m21 -> h
    F:float m22 -> i
    M:com.mojang.math.Matrix3f createScaleMatrix(float,float,float) -> a
    M:com.mojang.datafixers.util.Pair approxGivensQuat(float,float,float) -> b
    M:com.mojang.datafixers.util.Pair qrGivensQuat(float,float) -> a
    M:com.mojang.math.Quaternion stepJacobi(com.mojang.math.Matrix3f) -> e
    M:void sortSingularValues(com.mojang.math.Matrix3f,com.mojang.math.Quaternion) -> a
    M:void transpose() -> a
    M:org.apache.commons.lang3.tuple.Triple svdDecompose() -> b
    M:boolean equals(java.lang.Object) -> equals
    M:int bufferIndex(int,int) -> a
    M:void load(java.nio.FloatBuffer) -> a
    M:void loadTransposed(java.nio.FloatBuffer) -> b
    M:void load(java.nio.FloatBuffer,boolean) -> a
    M:void load(com.mojang.math.Matrix3f) -> a
    M:void store(java.nio.FloatBuffer) -> c
    M:void storeTransposed(java.nio.FloatBuffer) -> d
    M:void store(java.nio.FloatBuffer,boolean) -> b
    M:void setIdentity() -> c
    M:float adjugateAndDet() -> d
    M:float determinant() -> e
    M:boolean invert() -> f
    M:void set(int,int,float) -> a
    M:void mul(com.mojang.math.Matrix3f) -> b
    M:void mul(com.mojang.math.Quaternion) -> a
    M:void mul(float) -> a
    M:void add(com.mojang.math.Matrix3f) -> c
    M:void sub(com.mojang.math.Matrix3f) -> d
    M:float trace() -> g
    M:com.mojang.math.Matrix3f copy() -> h
com.mojang.math.Matrix4f -> d -> com.mojang.math.Matrix4f
    F:int ORDER -> q
    F:float m00 -> a
    F:float m01 -> b
    F:float m02 -> c
    F:float m03 -> d
    F:float m10 -> e
    F:float m11 -> f
    F:float m12 -> g
    F:float m13 -> h
    F:float m20 -> i
    F:float m21 -> j
    F:float m22 -> k
    F:float m23 -> l
    F:float m30 -> m
    F:float m31 -> n
    F:float m32 -> o
    F:float m33 -> p
    M:boolean isInteger() -> a
    M:boolean isInteger(float) -> b
    M:boolean equals(java.lang.Object) -> equals
    M:int bufferIndex(int,int) -> a
    M:void load(java.nio.FloatBuffer) -> a
    M:void loadTransposed(java.nio.FloatBuffer) -> b
    M:void load(java.nio.FloatBuffer,boolean) -> a
    M:void load(com.mojang.math.Matrix4f) -> a
    M:void store(java.nio.FloatBuffer) -> c
    M:void storeTransposed(java.nio.FloatBuffer) -> d
    M:void store(java.nio.FloatBuffer,boolean) -> b
    M:void setIdentity() -> b
    M:float adjugateAndDet() -> c
    M:float determinant() -> d
    M:void transpose() -> e
    M:boolean invert() -> f
    M:void multiply(com.mojang.math.Matrix4f) -> b
    M:void multiply(com.mojang.math.Quaternion) -> a
    M:void multiply(float) -> a
    M:void add(com.mojang.math.Matrix4f) -> c
    M:void subtract(com.mojang.math.Matrix4f) -> d
    M:float trace() -> g
    M:com.mojang.math.Matrix4f perspective(double,float,float,float) -> a
    M:com.mojang.math.Matrix4f orthographic(float,float,float,float) -> a
    M:com.mojang.math.Matrix4f orthographic(float,float,float,float,float,float) -> a
    M:void translate(com.mojang.math.Vector3fa) -> a
    M:com.mojang.math.Matrix4f copy() -> h
    M:void multiplyWithTranslation(float,float,float) -> a
    M:com.mojang.math.Matrix4f createScaleMatrix(float,float,float) -> b
    M:com.mojang.math.Matrix4f createTranslateMatrix(float,float,float) -> c
com.mojang.math.MethodsReturnNonnullByDefault -> e -> com.mojang.math.MethodsReturnNonnullByDefault
com.mojang.math.OctahedralGroup -> f -> com.mojang.math.PointGroupO
    F:com.mojang.math.PointGroupO IDENTITY -> a
    F:com.mojang.math.PointGroupO ROT_180_FACE_XY -> b
    F:com.mojang.math.PointGroupO ROT_180_FACE_XZ -> c
    F:com.mojang.math.PointGroupO ROT_180_FACE_YZ -> d
    F:com.mojang.math.PointGroupO ROT_120_NNN -> e
    F:com.mojang.math.PointGroupO ROT_120_NNP -> f
    F:com.mojang.math.PointGroupO ROT_120_NPN -> g
    F:com.mojang.math.PointGroupO ROT_120_NPP -> h
    F:com.mojang.math.PointGroupO ROT_120_PNN -> i
    F:com.mojang.math.PointGroupO ROT_120_PNP -> j
    F:com.mojang.math.PointGroupO ROT_120_PPN -> k
    F:com.mojang.math.PointGroupO ROT_120_PPP -> l
    F:com.mojang.math.PointGroupO ROT_180_EDGE_XY_NEG -> m
    F:com.mojang.math.PointGroupO ROT_180_EDGE_XY_POS -> n
    F:com.mojang.math.PointGroupO ROT_180_EDGE_XZ_NEG -> o
    F:com.mojang.math.PointGroupO ROT_180_EDGE_XZ_POS -> p
    F:com.mojang.math.PointGroupO ROT_180_EDGE_YZ_NEG -> q
    F:com.mojang.math.PointGroupO ROT_180_EDGE_YZ_POS -> r
    F:com.mojang.math.PointGroupO ROT_90_X_NEG -> s
    F:com.mojang.math.PointGroupO ROT_90_X_POS -> t
    F:com.mojang.math.PointGroupO ROT_90_Y_NEG -> u
    F:com.mojang.math.PointGroupO ROT_90_Y_POS -> v
    F:com.mojang.math.PointGroupO ROT_90_Z_NEG -> w
    F:com.mojang.math.PointGroupO ROT_90_Z_POS -> x
    F:com.mojang.math.PointGroupO INVERSION -> y
    F:com.mojang.math.PointGroupO INVERT_X -> z
    F:boolean invertX -> aa
    F:boolean invertY -> ab
    F:boolean invertZ -> ac
    F:com.mojang.math.PointGroupS permutation -> ad
    M:it.unimi.dsi.fastutil.booleans.BooleanList packInversions() -> d
    M:com.mojang.math.PointGroupO compose(com.mojang.math.PointGroupO) -> a
    M:com.mojang.math.PointGroupO inverse() -> a
    M:com.mojang.math.Matrix3f transformation() -> b
    M:java.lang.String getSerializedName() -> c
    M:net.minecraft.core.EnumDirection rotate(net.minecraft.core.EnumDirection) -> a
    M:boolean inverts(net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:net.minecraft.core.BlockPropertyJigsawOrientation rotate(net.minecraft.core.BlockPropertyJigsawOrientation) -> a
com.mojang.math.Quaternion -> g -> com.mojang.math.Quaternion
    F:com.mojang.math.Quaternion ONE -> a
    F:float i -> b
    F:float j -> c
    F:float k -> d
    F:float r -> e
    M:com.mojang.math.Quaternion fromYXZ(float,float,float) -> a
    M:com.mojang.math.Quaternion fromXYZDegrees(com.mojang.math.Vector3fa) -> a
    M:com.mojang.math.Quaternion fromXYZ(com.mojang.math.Vector3fa) -> b
    M:com.mojang.math.Quaternion fromXYZ(float,float,float) -> b
    M:com.mojang.math.Vector3fa toXYZ() -> a
    M:com.mojang.math.Vector3fa toXYZDegrees() -> b
    M:com.mojang.math.Vector3fa toYXZ() -> c
    M:com.mojang.math.Vector3fa toYXZDegrees() -> d
    M:boolean equals(java.lang.Object) -> equals
    M:float i() -> e
    M:float j() -> f
    M:float k() -> g
    M:float r() -> h
    M:void mul(com.mojang.math.Quaternion) -> a
    M:void mul(float) -> a
    M:void conj() -> i
    M:void set(float,float,float,float) -> a
    M:float cos(float) -> b
    M:float sin(float) -> c
    M:void normalize() -> j
    M:void slerp(com.mojang.math.Quaternion,float) -> a
    M:com.mojang.math.Quaternion copy() -> k
com.mojang.math.SymmetricGroup3 -> h -> com.mojang.math.PointGroupS
    F:com.mojang.math.PointGroupS P123 -> a
    F:com.mojang.math.PointGroupS P213 -> b
    F:com.mojang.math.PointGroupS P132 -> c
    F:com.mojang.math.PointGroupS P231 -> d
    F:com.mojang.math.PointGroupS P312 -> e
    F:com.mojang.math.PointGroupS P321 -> f
    F:com.mojang.math.Matrix3f transformation -> h
    F:int ORDER -> i
    M:com.mojang.math.PointGroupS compose(com.mojang.math.PointGroupS) -> a
    M:int permutation(int) -> a
    M:com.mojang.math.Matrix3f transformation() -> a
com.mojang.math.Transformation -> i -> com.mojang.math.Transformation
    F:com.mojang.math.Matrix4f matrix -> a
    F:boolean decomposed -> b
    F:com.mojang.math.Vector3fa translation -> c
    F:com.mojang.math.Quaternion leftRotation -> d
    F:com.mojang.math.Vector3fa scale -> e
    F:com.mojang.math.Quaternion rightRotation -> f
    F:com.mojang.math.Transformation IDENTITY -> g
    M:com.mojang.math.Transformation identity() -> a
    M:com.mojang.math.Transformation compose(com.mojang.math.Transformation) -> a
    M:com.mojang.math.Transformation inverse() -> b
    M:void ensureDecomposed() -> h
    M:com.mojang.math.Matrix4f compose(com.mojang.math.Vector3fa,com.mojang.math.Quaternion,com.mojang.math.Vector3fa,com.mojang.math.Quaternion) -> a
    M:com.mojang.datafixers.util.Pair toAffine(com.mojang.math.Matrix4f) -> a
    M:com.mojang.math.Matrix4f getMatrix() -> c
    M:com.mojang.math.Vector3fa getTranslation() -> d
    M:com.mojang.math.Quaternion getLeftRotation() -> e
    M:com.mojang.math.Vector3fa getScale() -> f
    M:com.mojang.math.Quaternion getRightRotation() -> g
    M:boolean equals(java.lang.Object) -> equals
    M:com.mojang.math.Transformation slerp(com.mojang.math.Transformation,float) -> a
com.mojang.math.Vector3d -> j -> com.mojang.math.Vector3d
    F:double x -> a
    F:double y -> b
    F:double z -> c
    M:void set(com.mojang.math.Vector3d) -> a
    M:void set(double,double,double) -> a
    M:void scale(double) -> a
    M:void add(com.mojang.math.Vector3d) -> b
com.mojang.math.Vector3f -> k -> com.mojang.math.Vector3fa
    F:com.mojang.serialization.Codec CODEC -> a
    F:com.mojang.math.Vector3fa XN -> b
    F:com.mojang.math.Vector3fa XP -> c
    F:com.mojang.math.Vector3fa YN -> d
    F:com.mojang.math.Vector3fa YP -> e
    F:com.mojang.math.Vector3fa ZN -> f
    F:com.mojang.math.Vector3fa ZP -> g
    F:com.mojang.math.Vector3fa ZERO -> h
    F:float x -> i
    F:float y -> j
    F:float z -> k
    M:boolean equals(java.lang.Object) -> equals
    M:float x() -> a
    M:float y() -> b
    M:float z() -> c
    M:void mul(float) -> a
    M:void mul(float,float,float) -> a
    M:void clamp(com.mojang.math.Vector3fa,com.mojang.math.Vector3fa) -> a
    M:void clamp(float,float) -> a
    M:void set(float,float,float) -> b
    M:void load(com.mojang.math.Vector3fa) -> a
    M:void add(float,float,float) -> c
    M:void add(com.mojang.math.Vector3fa) -> b
    M:void sub(com.mojang.math.Vector3fa) -> c
    M:float dot(com.mojang.math.Vector3fa) -> d
    M:boolean normalize() -> d
    M:void cross(com.mojang.math.Vector3fa) -> e
    M:void transform(com.mojang.math.Matrix3f) -> a
    M:void transform(com.mojang.math.Quaternion) -> a
    M:void lerp(com.mojang.math.Vector3fa,float) -> a
    M:com.mojang.math.Quaternion rotation(float) -> b
    M:com.mojang.math.Quaternion rotationDegrees(float) -> c
    M:com.mojang.math.Vector3fa copy() -> e
    M:void map(it.unimi.dsi.fastutil.floats.Float2FloatFunction) -> a
com.mojang.math.Vector4f -> l -> com.mojang.math.Vector4f
    F:float x -> a
    F:float y -> b
    F:float z -> c
    F:float w -> d
    M:boolean equals(java.lang.Object) -> equals
    M:float x() -> a
    M:float y() -> b
    M:float z() -> c
    M:float w() -> d
    M:void mul(float) -> a
    M:void mul(com.mojang.math.Vector3fa) -> a
    M:void set(float,float,float,float) -> a
    M:void add(float,float,float,float) -> b
    M:float dot(com.mojang.math.Vector4f) -> a
    M:boolean normalize() -> e
    M:void transform(com.mojang.math.Matrix4f) -> a
    M:void transform(com.mojang.math.Quaternion) -> a
    M:void perspectiveDivide() -> f
    M:void lerp(com.mojang.math.Vector4f,float) -> a
net.minecraft.BlockUtil -> n -> net.minecraft.BlockUtil
    M:net.minecraft.BlockUtil$Rectangle getLargestRectangleAround(net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection$EnumAxis,int,net.minecraft.core.EnumDirection$EnumAxis,int,java.util.function.Predicate) -> a
    M:int getLimit(java.util.function.Predicate,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.core.EnumDirection,int) -> a
    M:com.mojang.datafixers.util.Pair getMaxRectangleLocation(int[]) -> a
    M:java.util.Optional getTopConnectedBlock(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.Block) -> a
net.minecraft.BlockUtil$FoundRectangle -> n$a -> net.minecraft.BlockUtil$Rectangle
    F:net.minecraft.core.BlockPosition minCorner -> a
    F:int axis1Size -> b
    F:int axis2Size -> c
net.minecraft.BlockUtil$IntBounds -> n$b -> net.minecraft.BlockUtil$IntBounds
    F:int min -> a
    F:int max -> b
net.minecraft.CharPredicate -> o -> net.minecraft.CharPredicate
    M:net.minecraft.CharPredicate and(net.minecraft.CharPredicate) -> and
    M:net.minecraft.CharPredicate negate() -> negate
    M:net.minecraft.CharPredicate or(net.minecraft.CharPredicate) -> or
net.minecraft.ChatFormatting -> p -> net.minecraft.EnumChatFormat
    F:net.minecraft.EnumChatFormat BLACK -> a
    F:net.minecraft.EnumChatFormat DARK_BLUE -> b
    F:net.minecraft.EnumChatFormat DARK_GREEN -> c
    F:net.minecraft.EnumChatFormat DARK_AQUA -> d
    F:net.minecraft.EnumChatFormat DARK_RED -> e
    F:net.minecraft.EnumChatFormat DARK_PURPLE -> f
    F:net.minecraft.EnumChatFormat GOLD -> g
    F:net.minecraft.EnumChatFormat GRAY -> h
    F:net.minecraft.EnumChatFormat DARK_GRAY -> i
    F:net.minecraft.EnumChatFormat BLUE -> j
    F:net.minecraft.EnumChatFormat GREEN -> k
    F:net.minecraft.EnumChatFormat AQUA -> l
    F:net.minecraft.EnumChatFormat RED -> m
    F:net.minecraft.EnumChatFormat LIGHT_PURPLE -> n
    F:net.minecraft.EnumChatFormat YELLOW -> o
    F:net.minecraft.EnumChatFormat WHITE -> p
    F:net.minecraft.EnumChatFormat OBFUSCATED -> q
    F:net.minecraft.EnumChatFormat BOLD -> r
    F:net.minecraft.EnumChatFormat STRIKETHROUGH -> s
    F:net.minecraft.EnumChatFormat UNDERLINE -> t
    F:net.minecraft.EnumChatFormat ITALIC -> u
    F:net.minecraft.EnumChatFormat RESET -> v
    F:com.mojang.serialization.Codec CODEC -> w
    F:char PREFIX_CODE -> x
    F:java.util.Map FORMATTING_BY_NAME -> y
    F:java.util.regex.Pattern STRIP_FORMATTING_PATTERN -> z
    M:java.lang.String cleanName(java.lang.String) -> c
    M:char getChar() -> a
    M:int getId() -> b
    M:boolean isFormat() -> d
    M:boolean isColor() -> e
    M:java.lang.Integer getColor() -> f
    M:java.lang.String getName() -> g
    M:java.lang.String stripFormatting(java.lang.String) -> a
    M:net.minecraft.EnumChatFormat getByName(java.lang.String) -> b
    M:net.minecraft.EnumChatFormat getById(int) -> a
    M:net.minecraft.EnumChatFormat getByCode(char) -> a
    M:java.util.Collection getNames(boolean,boolean) -> a
    M:java.lang.String getSerializedName() -> c
net.minecraft.CrashReport -> q -> net.minecraft.CrashReport
    F:org.slf4j.Logger LOGGER -> a
    F:java.lang.String title -> b
    F:java.lang.Throwable exception -> c
    F:java.util.List details -> d
    F:java.io.File saveFile -> e
    F:boolean trackingStackTrace -> f
    F:net.minecraft.SystemReport systemReport -> h
    M:java.lang.String getTitle() -> a
    M:java.lang.Throwable getException() -> b
    M:java.lang.String getDetails() -> c
    M:void getDetails(java.lang.StringBuilder) -> a
    M:java.lang.String getExceptionMessage() -> d
    M:java.lang.String getFriendlyReport() -> e
    M:java.io.File getSaveFile() -> f
    M:boolean saveToFile(java.io.File) -> a
    M:net.minecraft.SystemReport getSystemReport() -> g
    M:net.minecraft.CrashReportSystemDetails addCategory(java.lang.String) -> a
    M:net.minecraft.CrashReportSystemDetails addCategory(java.lang.String,int) -> a
    M:java.lang.String getErrorComment() -> i
    M:net.minecraft.CrashReport forThrowable(java.lang.Throwable,java.lang.String) -> a
    M:void preload() -> h
net.minecraft.CrashReportCategory -> r -> net.minecraft.CrashReportSystemDetails
    F:java.lang.String title -> a
    F:java.util.List entries -> b
    M:java.lang.String formatLocation(net.minecraft.world.level.LevelHeightAccessor,double,double,double) -> a
    M:java.lang.String formatLocation(net.minecraft.world.level.LevelHeightAccessor,net.minecraft.core.BlockPosition) -> a
    M:java.lang.String formatLocation(net.minecraft.world.level.LevelHeightAccessor,int,int,int) -> a
    M:net.minecraft.CrashReportSystemDetails setDetail(java.lang.String,net.minecraft.CrashReportCallable) -> a
    M:net.minecraft.CrashReportSystemDetails setDetail(java.lang.String,java.lang.Object) -> a
    M:void setDetailError(java.lang.String,java.lang.Throwable) -> a
    M:int fillInStackTrace(int) -> a
    M:boolean validateStackTrace(java.lang.StackTraceElement,java.lang.StackTraceElement) -> a
    M:void trimStacktrace(int) -> b
    M:void getDetails(java.lang.StringBuilder) -> a
    M:void populateBlockDetails(net.minecraft.CrashReportSystemDetails,net.minecraft.world.level.LevelHeightAccessor,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.CrashReportCategory$Entry -> r$a -> net.minecraft.CrashReportSystemDetails$CrashReportDetail
    F:java.lang.String key -> a
    F:java.lang.String value -> b
    M:java.lang.String getKey() -> a
    M:java.lang.String getValue() -> b
net.minecraft.CrashReportDetail -> s -> net.minecraft.CrashReportCallable
net.minecraft.DefaultUncaughtExceptionHandler -> t -> net.minecraft.DefaultUncaughtExceptionHandler
    F:org.slf4j.Logger logger -> a
net.minecraft.DefaultUncaughtExceptionHandlerWithName -> u -> net.minecraft.ThreadNamedUncaughtExceptionHandler
    F:org.slf4j.Logger logger -> a
net.minecraft.DetectedVersion -> v -> net.minecraft.MinecraftVersion
    F:org.slf4j.Logger LOGGER -> b
    F:net.minecraft.WorldVersion BUILT_IN -> a
    F:java.lang.String id -> c
    F:java.lang.String name -> d
    F:boolean stable -> e
    F:net.minecraft.world.level.storage.DataVersion worldVersion -> f
    F:int protocolVersion -> g
    F:int resourcePackVersion -> h
    F:int dataPackVersion -> i
    F:java.util.Date buildTime -> j
    F:java.lang.String releaseTarget -> k
    M:net.minecraft.WorldVersion tryDetectVersion() -> a
    M:net.minecraft.world.level.storage.DataVersion getDataVersion() -> b
net.minecraft.FieldsAreNonnullByDefault -> w -> net.minecraft.FieldsAreNonnullByDefault
net.minecraft.FileUtil -> x -> net.minecraft.FileUtils
    F:java.util.regex.Pattern COPY_COUNTER_PATTERN -> a
    F:int MAX_FILE_NAME -> b
    F:java.util.regex.Pattern RESERVED_WINDOWS_FILENAMES -> c
    M:java.lang.String findAvailableName(java.nio.file.Path,java.lang.String,java.lang.String) -> a
    M:boolean isPathNormalized(java.nio.file.Path) -> a
    M:boolean isPathPortable(java.nio.file.Path) -> b
    M:java.nio.file.Path createPathToResource(java.nio.file.Path,java.lang.String,java.lang.String) -> b
    M:java.lang.String getFullResourcePath(java.lang.String) -> a
    M:java.lang.String normalizeResourcePath(java.lang.String) -> b
net.minecraft.MethodsReturnNonnullByDefault -> y -> net.minecraft.MethodsReturnNonnullByDefault
net.minecraft.ReportedException -> z -> net.minecraft.ReportedException
    F:net.minecraft.CrashReport report -> a
    M:net.minecraft.CrashReport getReport() -> a
net.minecraft.ResourceLocationException -> aa -> net.minecraft.ResourceKeyInvalidException
net.minecraft.SharedConstants -> ab -> net.minecraft.SharedConstants
    F:boolean SNAPSHOT -> a
    F:int WORLD_VERSION -> b
    F:java.lang.String SERIES -> c
    F:java.lang.String VERSION_STRING -> d
    F:java.lang.String RELEASE_TARGET -> e
    F:int RELEASE_NETWORK_PROTOCOL_VERSION -> f
    F:int SNAPSHOT_NETWORK_PROTOCOL_VERSION -> g
    F:int SNBT_NAG_VERSION -> h
    F:boolean THROW_ON_TASK_FAILURE -> i
    F:int RESOURCE_PACK_FORMAT -> j
    F:int DATA_PACK_FORMAT -> k
    F:java.lang.String DATA_VERSION_TAG -> l
    F:boolean CNC_PART_2_ITEMS_AND_BLOCKS -> m
    F:boolean USE_NEW_RENDERSYSTEM -> n
    F:boolean MULTITHREADED_RENDERING -> o
    F:boolean FIX_TNT_DUPE -> p
    F:boolean FIX_SAND_DUPE -> q
    F:boolean USE_DEBUG_FEATURES -> r
    F:boolean DEBUG_OPEN_INCOMPATIBLE_WORLDS -> s
    F:boolean DEBUG_ALLOW_LOW_SIM_DISTANCE -> t
    F:boolean DEBUG_HOTKEYS -> u
    F:boolean DEBUG_UI_NARRATION -> v
    F:boolean DEBUG_RENDER -> w
    F:boolean DEBUG_PATHFINDING -> x
    F:boolean DEBUG_WATER -> y
    F:boolean DEBUG_HEIGHTMAP -> z
    F:boolean DEBUG_LARGE_DRIPSTONE -> aa
    F:boolean DEBUG_PACKET_SERIALIZATION -> ab
    F:boolean DEBUG_CARVERS -> ac
    F:boolean DEBUG_ORE_VEINS -> ad
    F:boolean DEBUG_SCULK_CATALYST -> ae
    F:boolean DEBUG_BYPASS_REALMS_VERSION_CHECK -> af
    F:boolean DEBUG_IGNORE_LOCAL_MOB_CAP -> ag
    F:boolean DEBUG_SMALL_SPAWN -> ah
    F:boolean DEBUG_DISABLE_LIQUID_SPREADING -> ai
    F:boolean DEBUG_AQUIFERS -> aj
    F:boolean DEBUG_JFR_PROFILING_ENABLE_LEVEL_LOADING -> ak
    F:boolean debugGenerateSquareTerrainWithoutNoise -> al
    F:boolean debugGenerateStripedTerrainWithoutNoise -> am
    F:boolean DEBUG_ONLY_GENERATE_HALF_THE_WORLD -> an
    F:boolean DEBUG_DISABLE_FLUID_GENERATION -> ao
    F:boolean DEBUG_DISABLE_AQUIFERS -> ap
    F:boolean DEBUG_DISABLE_SURFACE -> aq
    F:boolean DEBUG_DISABLE_CARVERS -> ar
    F:boolean DEBUG_DISABLE_STRUCTURES -> as
    F:boolean DEBUG_DISABLE_FEATURES -> at
    F:boolean DEBUG_DISABLE_ORE_VEINS -> au
    F:boolean DEBUG_DISABLE_BLENDING -> av
    F:boolean DEBUG_DISABLE_BELOW_ZERO_RETROGENERATION -> aw
    F:int DEFAULT_MINECRAFT_PORT -> ax
    F:boolean INGAME_DEBUG_OUTPUT -> ay
    F:boolean DEBUG_SUBTITLES -> az
    M:boolean isAllowedChatCharacter(char) -> a
    M:java.lang.String filterText(java.lang.String) -> a
    M:void setVersion(net.minecraft.WorldVersion) -> a
    M:void tryDetectVersion() -> a
    M:net.minecraft.WorldVersion getCurrentVersion() -> b
    M:int getProtocolVersion() -> c
    M:boolean debugVoidTerrain(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:void enableDataFixerOptimizations() -> d
net.minecraft.SystemReport -> ac -> net.minecraft.SystemReport
    F:long BYTES_PER_MEBIBYTE -> a
    F:long ONE_GIGA -> b
    F:org.slf4j.Logger LOGGER -> c
    F:java.lang.String OPERATING_SYSTEM -> d
    F:java.lang.String JAVA_VERSION -> e
    F:java.lang.String JAVA_VM_VERSION -> f
    F:java.util.Map entries -> g
    M:void setDetail(java.lang.String,java.lang.String) -> a
    M:void setDetail(java.lang.String,java.util.function.Supplier) -> a
    M:void putHardware(oshi.SystemInfo) -> a
    M:void ignoreErrors(java.lang.String,java.lang.Runnable) -> a
    M:void putPhysicalMemory(java.util.List) -> a
    M:void putVirtualMemory(oshi.hardware.VirtualMemory) -> a
    M:void putMemory(oshi.hardware.GlobalMemory) -> a
    M:void putGraphics(java.util.List) -> b
    M:void putProcessor(oshi.hardware.CentralProcessor) -> a
    M:void appendToCrashReportString(java.lang.StringBuilder) -> a
    M:java.lang.String toLineSeparatedString() -> a
net.minecraft.Util -> ad -> net.minecraft.SystemUtils
    F:org.slf4j.Logger LOGGER -> e
    F:int DEFAULT_MAX_THREADS -> f
    F:java.lang.String MAX_THREADS_SYSTEM_PROPERTY -> g
    F:java.util.concurrent.atomic.AtomicInteger WORKER_COUNT -> h
    F:java.util.concurrent.ExecutorService BOOTSTRAP_EXECUTOR -> i
    F:java.util.concurrent.ExecutorService BACKGROUND_EXECUTOR -> j
    F:java.util.concurrent.ExecutorService IO_POOL -> k
    F:java.util.function.LongSupplier timeSource -> a
    F:com.google.common.base.Ticker TICKER -> b
    F:java.util.UUID NIL_UUID -> c
    F:java.nio.file.spi.FileSystemProvider ZIP_FILE_SYSTEM_PROVIDER -> d
    F:java.util.function.Consumer thePauser -> l
    F:java.util.Map cache -> b
    F:java.util.Map cache -> b
    M:java.util.stream.Collector toMap() -> a
    M:java.lang.String getPropertyName(net.minecraft.world.level.block.state.properties.IBlockState,java.lang.Object) -> a
    M:java.lang.String makeDescriptionId(java.lang.String,net.minecraft.resources.MinecraftKey) -> a
    M:long getMillis() -> b
    M:long getNanos() -> c
    M:long getEpochMillis() -> d
    M:java.util.concurrent.ExecutorService makeExecutor(java.lang.String) -> b
    M:int getMaxThreads() -> m
    M:java.util.concurrent.ExecutorService bootstrapExecutor() -> e
    M:java.util.concurrent.ExecutorService backgroundExecutor() -> f
    M:java.util.concurrent.ExecutorService ioPool() -> g
    M:void shutdownExecutors() -> h
    M:void shutdownExecutor(java.util.concurrent.ExecutorService) -> a
    M:java.util.concurrent.ExecutorService makeIoExecutor() -> n
    M:java.util.concurrent.CompletableFuture failedFuture(java.lang.Throwable) -> a
    M:void throwAsRuntime(java.lang.Throwable) -> b
    M:void onThreadException(java.lang.Thread,java.lang.Throwable) -> a
    M:com.mojang.datafixers.types.Type fetchChoiceType(com.mojang.datafixers.DSL$TypeReference,java.lang.String) -> a
    M:com.mojang.datafixers.types.Type doFetchChoiceType(com.mojang.datafixers.DSL$TypeReference,java.lang.String) -> b
    M:java.lang.Runnable wrapThreadWithTaskName(java.lang.String,java.lang.Runnable) -> a
    M:java.util.function.Supplier wrapThreadWithTaskName(java.lang.String,java.util.function.Supplier) -> a
    M:net.minecraft.SystemUtils$OS getPlatform() -> i
    M:java.util.stream.Stream getVmArguments() -> j
    M:java.lang.Object lastOf(java.util.List) -> a
    M:java.lang.Object findNextInIterable(java.lang.Iterable,java.lang.Object) -> a
    M:java.lang.Object findPreviousInIterable(java.lang.Iterable,java.lang.Object) -> b
    M:java.lang.Object make(java.util.function.Supplier) -> a
    M:java.lang.Object make(java.lang.Object,java.util.function.Consumer) -> a
    M:java.lang.Object mapNullable(java.lang.Object,java.util.function.Function) -> a
    M:java.lang.Object mapNullable(java.lang.Object,java.util.function.Function,java.lang.Object) -> a
    M:it.unimi.dsi.fastutil.Hash$Strategy identityStrategy() -> k
    M:java.util.concurrent.CompletableFuture sequence(java.util.List) -> b
    M:java.util.concurrent.CompletableFuture sequenceFailFast(java.util.List) -> c
    M:java.util.concurrent.CompletableFuture sequenceFailFastAndCancel(java.util.List) -> d
    M:java.util.concurrent.CompletableFuture fallibleSequence(java.util.List,java.util.function.Consumer) -> a
    M:java.util.Optional ifElse(java.util.Optional,java.util.function.Consumer,java.lang.Runnable) -> a
    M:java.util.function.Supplier name(java.util.function.Supplier,java.util.function.Supplier) -> a
    M:java.lang.Runnable name(java.lang.Runnable,java.util.function.Supplier) -> a
    M:void logAndPauseIfInIde(java.lang.String) -> a
    M:void logAndPauseIfInIde(java.lang.String,java.lang.Throwable) -> a
    M:java.lang.Throwable pauseInIde(java.lang.Throwable) -> c
    M:void setPause(java.util.function.Consumer) -> a
    M:void doPause(java.lang.String) -> c
    M:java.lang.String describeError(java.lang.Throwable) -> d
    M:java.lang.Object getRandom(java.lang.Object[],net.minecraft.util.RandomSource) -> a
    M:int getRandom(int[],net.minecraft.util.RandomSource) -> a
    M:java.lang.Object getRandom(java.util.List,net.minecraft.util.RandomSource) -> a
    M:java.util.Optional getRandomSafe(java.util.List,net.minecraft.util.RandomSource) -> b
    M:java.util.function.BooleanSupplier createRenamer(java.nio.file.Path,java.nio.file.Path) -> a
    M:java.util.function.BooleanSupplier createDeleter(java.nio.file.Path) -> a
    M:java.util.function.BooleanSupplier createFileDeletedCheck(java.nio.file.Path) -> b
    M:java.util.function.BooleanSupplier createFileCreatedCheck(java.nio.file.Path) -> c
    M:boolean executeInSequence(java.util.function.BooleanSupplier[]) -> a
    M:boolean runWithRetries(int,java.lang.String,java.util.function.BooleanSupplier[]) -> a
    M:void safeReplaceFile(java.io.File,java.io.File,java.io.File) -> a
    M:void safeReplaceFile(java.nio.file.Path,java.nio.file.Path,java.nio.file.Path) -> a
    M:void safeReplaceOrMoveFile(java.io.File,java.io.File,java.io.File,boolean) -> a
    M:void safeReplaceOrMoveFile(java.nio.file.Path,java.nio.file.Path,java.nio.file.Path,boolean) -> a
    M:int offsetByCodepoints(java.lang.String,int,int) -> a
    M:java.util.function.Consumer prefix(java.lang.String,java.util.function.Consumer) -> a
    M:com.mojang.serialization.DataResult fixedSize(java.util.stream.IntStream,int) -> a
    M:com.mojang.serialization.DataResult fixedSize(java.util.List,int) -> a
    M:void startTimerHackThread() -> l
    M:void copyBetweenDirs(java.nio.file.Path,java.nio.file.Path,java.nio.file.Path) -> b
    M:java.lang.String sanitizeName(java.lang.String,net.minecraft.CharPredicate) -> a
    M:java.util.function.Function memoize(java.util.function.Function) -> a
    M:java.util.function.BiFunction memoize(java.util.function.BiFunction) -> a
    M:java.util.List toShuffledList(java.util.stream.Stream,net.minecraft.util.RandomSource) -> a
    M:it.unimi.dsi.fastutil.ints.IntArrayList toShuffledList(java.util.stream.IntStream,net.minecraft.util.RandomSource) -> a
    M:java.util.List shuffledCopy(java.lang.Object[],net.minecraft.util.RandomSource) -> b
    M:java.util.List shuffledCopy(it.unimi.dsi.fastutil.objects.ObjectArrayList,net.minecraft.util.RandomSource) -> a
    M:void shuffle(it.unimi.dsi.fastutil.objects.ObjectArrayList,net.minecraft.util.RandomSource) -> b
    M:java.util.concurrent.CompletableFuture blockUntilDone(java.util.function.Function) -> b
    M:java.lang.Object blockUntilDone(java.util.function.Function,java.util.function.Predicate) -> a
    M:java.util.function.ToIntFunction createIndexLookup(java.util.List) -> e
    M:java.util.function.ToIntFunction createIndexLookup(java.util.List,java.util.function.IntFunction) -> a
    M:long read() -> read
    M:java.lang.Object apply(java.lang.Object) -> apply
    M:java.lang.Object apply(java.lang.Object,java.lang.Object) -> apply
    M:void run() -> run
net.minecraft.Util$IdentityStrategy -> ad$a -> net.minecraft.SystemUtils$IdentityHashingStrategy
    F:net.minecraft.SystemUtils$IdentityHashingStrategy INSTANCE -> a
    M:boolean equals(java.lang.Object,java.lang.Object) -> equals
net.minecraft.Util$OS -> ad$b -> net.minecraft.SystemUtils$OS
    F:net.minecraft.SystemUtils$OS LINUX -> a
    F:net.minecraft.SystemUtils$OS SOLARIS -> b
    F:net.minecraft.SystemUtils$OS WINDOWS -> c
    F:net.minecraft.SystemUtils$OS OSX -> d
    F:net.minecraft.SystemUtils$OS UNKNOWN -> e
    F:java.lang.String telemetryName -> f
    M:void openUrl(java.net.URL) -> a
    M:void openUri(java.net.URI) -> a
    M:void openFile(java.io.File) -> a
    M:void openUri(java.lang.String) -> a
    M:java.lang.String telemetryName() -> a
net.minecraft.WorldVersion -> ae -> net.minecraft.WorldVersion
net.minecraft.advancements.Advancement -> af -> net.minecraft.advancements.Advancement
    F:net.minecraft.advancements.Advancement parent -> a
    F:net.minecraft.advancements.AdvancementDisplay display -> b
    F:net.minecraft.advancements.AdvancementRewards rewards -> c
    F:net.minecraft.resources.MinecraftKey id -> d
    F:java.util.Map criteria -> e
    F:java.util.Set children -> g
    F:net.minecraft.network.chat.IChatBaseComponent chatComponent -> h
    M:net.minecraft.advancements.Advancement$SerializedAdvancement deconstruct() -> a
    M:net.minecraft.advancements.Advancement getParent() -> b
    M:net.minecraft.advancements.AdvancementDisplay getDisplay() -> c
    M:net.minecraft.advancements.AdvancementRewards getRewards() -> d
    M:java.lang.Iterable getChildren() -> e
    M:java.util.Map getCriteria() -> f
    M:int getMaxCriteraRequired() -> g
    M:void addChild(net.minecraft.advancements.Advancement) -> a
    M:net.minecraft.resources.MinecraftKey getId() -> h
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.network.chat.IChatBaseComponent getChatComponent() -> j
net.minecraft.advancements.Advancement$Builder -> af$a -> net.minecraft.advancements.Advancement$SerializedAdvancement
    F:net.minecraft.resources.MinecraftKey parentId -> a
    F:net.minecraft.advancements.Advancement parent -> b
    F:net.minecraft.advancements.AdvancementDisplay display -> c
    F:net.minecraft.advancements.AdvancementRewards rewards -> d
    F:java.util.Map criteria -> e
    F:net.minecraft.advancements.AdvancementRequirements requirementsStrategy -> g
    M:net.minecraft.advancements.Advancement$SerializedAdvancement advancement() -> a
    M:net.minecraft.advancements.Advancement$SerializedAdvancement parent(net.minecraft.advancements.Advancement) -> a
    M:net.minecraft.advancements.Advancement$SerializedAdvancement parent(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.advancements.Advancement$SerializedAdvancement display(net.minecraft.world.item.ItemStack,net.minecraft.network.chat.IChatBaseComponent,net.minecraft.network.chat.IChatBaseComponent,net.minecraft.resources.MinecraftKey,net.minecraft.advancements.AdvancementFrameType,boolean,boolean,boolean) -> a
    M:net.minecraft.advancements.Advancement$SerializedAdvancement display(net.minecraft.world.level.IMaterial,net.minecraft.network.chat.IChatBaseComponent,net.minecraft.network.chat.IChatBaseComponent,net.minecraft.resources.MinecraftKey,net.minecraft.advancements.AdvancementFrameType,boolean,boolean,boolean) -> a
    M:net.minecraft.advancements.Advancement$SerializedAdvancement display(net.minecraft.advancements.AdvancementDisplay) -> a
    M:net.minecraft.advancements.Advancement$SerializedAdvancement rewards(net.minecraft.advancements.AdvancementRewards$Builder) -> a
    M:net.minecraft.advancements.Advancement$SerializedAdvancement rewards(net.minecraft.advancements.AdvancementRewards) -> a
    M:net.minecraft.advancements.Advancement$SerializedAdvancement addCriterion(java.lang.String,net.minecraft.advancements.CriterionInstance) -> a
    M:net.minecraft.advancements.Advancement$SerializedAdvancement addCriterion(java.lang.String,net.minecraft.advancements.Criterion) -> a
    M:net.minecraft.advancements.Advancement$SerializedAdvancement requirements(net.minecraft.advancements.AdvancementRequirements) -> a
    M:net.minecraft.advancements.Advancement$SerializedAdvancement requirements(java.lang.String[][]) -> a
    M:boolean canBuild(java.util.function.Function) -> a
    M:net.minecraft.advancements.Advancement build(net.minecraft.resources.MinecraftKey) -> b
    M:net.minecraft.advancements.Advancement save(java.util.function.Consumer,java.lang.String) -> a
    M:com.google.gson.JsonObject serializeToJson() -> b
    M:void serializeToNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.advancements.Advancement$SerializedAdvancement fromJson(com.google.gson.JsonObject,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:net.minecraft.advancements.Advancement$SerializedAdvancement fromNetwork(net.minecraft.network.PacketDataSerializer) -> b
    M:java.util.Map getCriteria() -> c
net.minecraft.advancements.AdvancementList -> ag -> net.minecraft.advancements.Advancements
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.Map advancements -> b
    F:java.util.Set roots -> c
    F:java.util.Set tasks -> d
    F:net.minecraft.advancements.AdvancementList$Listener listener -> e
    M:void remove(net.minecraft.advancements.Advancement) -> a
    M:void remove(java.util.Set) -> a
    M:void add(java.util.Map) -> a
    M:void clear() -> a
    M:java.lang.Iterable getRoots() -> b
    M:java.util.Collection getAllAdvancements() -> c
    M:net.minecraft.advancements.Advancement get(net.minecraft.resources.MinecraftKey) -> a
    M:void setListener(net.minecraft.advancements.AdvancementList$Listener) -> a
net.minecraft.advancements.AdvancementList$Listener -> ag$a -> net.minecraft.advancements.Advancements$a
net.minecraft.advancements.AdvancementProgress -> ah -> net.minecraft.advancements.AdvancementProgress
    F:java.util.Map criteria -> a
    M:void update(java.util.Map,java.lang.String[][]) -> a
    M:boolean isDone() -> a
    M:boolean hasProgress() -> b
    M:boolean grantProgress(java.lang.String) -> a
    M:boolean revokeProgress(java.lang.String) -> b
    M:void serializeToNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.advancements.AdvancementProgress fromNetwork(net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.advancements.CriterionProgress getCriterion(java.lang.String) -> c
    M:float getPercent() -> c
    M:java.lang.String getProgressText() -> d
    M:int countCompletedRequirements() -> h
    M:java.lang.Iterable getRemainingCriteria() -> e
    M:java.lang.Iterable getCompletedCriteria() -> f
    M:java.util.Date getFirstProgressDate() -> g
    M:int compareTo(net.minecraft.advancements.AdvancementProgress) -> a
net.minecraft.advancements.AdvancementProgress$Serializer -> ah$a -> net.minecraft.advancements.AdvancementProgress$a
    M:com.google.gson.JsonElement serialize(net.minecraft.advancements.AdvancementProgress,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.advancements.AdvancementProgress deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    M:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
    M:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
net.minecraft.advancements.AdvancementRewards -> ai -> net.minecraft.advancements.AdvancementRewards
    F:net.minecraft.advancements.AdvancementRewards EMPTY -> a
    F:int experience -> b
    F:net.minecraft.commands.CommandFunction$CacheableFunction function -> e
    M:void grant(net.minecraft.server.level.EntityPlayer) -> a
    M:com.google.gson.JsonElement serializeToJson() -> b
    M:net.minecraft.advancements.AdvancementRewards deserialize(com.google.gson.JsonObject) -> a
net.minecraft.advancements.AdvancementRewards$Builder -> ai$a -> net.minecraft.advancements.AdvancementRewards$a
    F:int experience -> a
    F:java.util.List loot -> b
    F:java.util.List recipes -> c
    F:net.minecraft.resources.MinecraftKey function -> d
    M:net.minecraft.advancements.AdvancementRewards$Builder experience(int) -> a
    M:net.minecraft.advancements.AdvancementRewards$Builder addExperience(int) -> b
    M:net.minecraft.advancements.AdvancementRewards$Builder loot(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.advancements.AdvancementRewards$Builder addLootTable(net.minecraft.resources.MinecraftKey) -> b
    M:net.minecraft.advancements.AdvancementRewards$Builder recipe(net.minecraft.resources.MinecraftKey) -> c
    M:net.minecraft.advancements.AdvancementRewards$Builder addRecipe(net.minecraft.resources.MinecraftKey) -> d
    M:net.minecraft.advancements.AdvancementRewards$Builder function(net.minecraft.resources.MinecraftKey) -> e
    M:net.minecraft.advancements.AdvancementRewards$Builder runs(net.minecraft.resources.MinecraftKey) -> f
    M:net.minecraft.advancements.AdvancementRewards build() -> a
net.minecraft.advancements.CriteriaTriggers -> aj -> net.minecraft.advancements.CriterionTriggers
    F:net.minecraft.advancements.critereon.CriterionTriggerImpossible IMPOSSIBLE -> a
    F:net.minecraft.advancements.critereon.CriterionTriggerKilled PLAYER_KILLED_ENTITY -> b
    F:net.minecraft.advancements.critereon.CriterionTriggerKilled ENTITY_KILLED_PLAYER -> c
    F:net.minecraft.advancements.critereon.CriterionTriggerEnterBlock ENTER_BLOCK -> d
    F:net.minecraft.advancements.critereon.CriterionTriggerInventoryChanged INVENTORY_CHANGED -> e
    F:net.minecraft.advancements.critereon.CriterionTriggerRecipeUnlocked RECIPE_UNLOCKED -> f
    F:net.minecraft.advancements.critereon.CriterionTriggerPlayerHurtEntity PLAYER_HURT_ENTITY -> g
    F:net.minecraft.advancements.critereon.CriterionTriggerEntityHurtPlayer ENTITY_HURT_PLAYER -> h
    F:net.minecraft.advancements.critereon.CriterionTriggerEnchantedItem ENCHANTED_ITEM -> i
    F:net.minecraft.advancements.critereon.CriterionTriggerFilledBucket FILLED_BUCKET -> j
    F:net.minecraft.advancements.critereon.CriterionTriggerBrewedPotion BREWED_POTION -> k
    F:net.minecraft.advancements.critereon.CriterionTriggerConstructBeacon CONSTRUCT_BEACON -> l
    F:net.minecraft.advancements.critereon.CriterionTriggerUsedEnderEye USED_ENDER_EYE -> m
    F:net.minecraft.advancements.critereon.CriterionTriggerSummonedEntity SUMMONED_ENTITY -> n
    F:net.minecraft.advancements.critereon.CriterionTriggerBredAnimals BRED_ANIMALS -> o
    F:net.minecraft.advancements.critereon.PlayerTrigger LOCATION -> p
    F:net.minecraft.advancements.critereon.PlayerTrigger SLEPT_IN_BED -> q
    F:net.minecraft.advancements.critereon.CriterionTriggerCuredZombieVillager CURED_ZOMBIE_VILLAGER -> r
    F:net.minecraft.advancements.critereon.CriterionTriggerVillagerTrade TRADE -> s
    F:net.minecraft.advancements.critereon.CriterionTriggerItemDurabilityChanged ITEM_DURABILITY_CHANGED -> t
    F:net.minecraft.advancements.critereon.CriterionTriggerLevitation LEVITATION -> u
    F:net.minecraft.advancements.critereon.CriterionTriggerChangedDimension CHANGED_DIMENSION -> v
    F:net.minecraft.advancements.critereon.PlayerTrigger TICK -> w
    F:net.minecraft.advancements.critereon.CriterionTriggerTamedAnimal TAME_ANIMAL -> x
    F:net.minecraft.advancements.critereon.CriterionTriggerPlacedBlock PLACED_BLOCK -> y
    F:net.minecraft.advancements.critereon.CriterionTriggerConsumeItem CONSUME_ITEM -> z
    M:net.minecraft.advancements.CriterionTrigger register(net.minecraft.advancements.CriterionTrigger) -> a
    M:net.minecraft.advancements.CriterionTrigger getCriterion(net.minecraft.resources.MinecraftKey) -> a
    M:java.lang.Iterable all() -> a
net.minecraft.advancements.Criterion -> ak -> net.minecraft.advancements.Criterion
    F:net.minecraft.advancements.CriterionInstance trigger -> a
    M:void serializeToNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.advancements.Criterion criterionFromJson(com.google.gson.JsonObject,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:net.minecraft.advancements.Criterion criterionFromNetwork(net.minecraft.network.PacketDataSerializer) -> b
    M:java.util.Map criteriaFromJson(com.google.gson.JsonObject,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
    M:java.util.Map criteriaFromNetwork(net.minecraft.network.PacketDataSerializer) -> c
    M:void serializeToNetwork(java.util.Map,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.advancements.CriterionInstance getTrigger() -> a
    M:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.CriterionProgress -> al -> net.minecraft.advancements.CriterionProgress
    F:java.text.SimpleDateFormat DATE_FORMAT -> a
    F:java.util.Date obtained -> b
    M:boolean isDone() -> a
    M:void grant() -> b
    M:void revoke() -> c
    M:java.util.Date getObtained() -> d
    M:void serializeToNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:com.google.gson.JsonElement serializeToJson() -> e
    M:net.minecraft.advancements.CriterionProgress fromNetwork(net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.advancements.CriterionProgress fromJson(java.lang.String) -> a
net.minecraft.advancements.CriterionTrigger -> am -> net.minecraft.advancements.CriterionTrigger
net.minecraft.advancements.CriterionTrigger$Listener -> am$a -> net.minecraft.advancements.CriterionTrigger$a
    F:net.minecraft.advancements.CriterionInstance trigger -> a
    F:net.minecraft.advancements.Advancement advancement -> b
    F:java.lang.String criterion -> c
    M:net.minecraft.advancements.CriterionInstance getTriggerInstance() -> a
    M:void run(net.minecraft.server.AdvancementDataPlayer) -> a
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.advancements.CriterionTriggerInstance -> an -> net.minecraft.advancements.CriterionInstance
net.minecraft.advancements.DisplayInfo -> ao -> net.minecraft.advancements.AdvancementDisplay
    F:net.minecraft.network.chat.IChatBaseComponent title -> a
    F:net.minecraft.network.chat.IChatBaseComponent description -> b
    F:net.minecraft.world.item.ItemStack icon -> c
    F:net.minecraft.resources.MinecraftKey background -> d
    F:net.minecraft.advancements.AdvancementFrameType frame -> e
    F:boolean showToast -> f
    F:boolean announceChat -> g
    F:boolean hidden -> h
    F:float x -> i
    F:float y -> j
    M:void setLocation(float,float) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getTitle() -> a
    M:net.minecraft.network.chat.IChatBaseComponent getDescription() -> b
    M:net.minecraft.world.item.ItemStack getIcon() -> c
    M:net.minecraft.resources.MinecraftKey getBackground() -> d
    M:net.minecraft.advancements.AdvancementFrameType getFrame() -> e
    M:float getX() -> f
    M:float getY() -> g
    M:boolean shouldShowToast() -> h
    M:boolean shouldAnnounceChat() -> i
    M:boolean isHidden() -> j
    M:net.minecraft.advancements.AdvancementDisplay fromJson(com.google.gson.JsonObject) -> a
    M:net.minecraft.world.item.ItemStack getIcon(com.google.gson.JsonObject) -> b
    M:void serializeToNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.advancements.AdvancementDisplay fromNetwork(net.minecraft.network.PacketDataSerializer) -> b
    M:com.google.gson.JsonElement serializeToJson() -> k
    M:com.google.gson.JsonObject serializeIcon() -> l
net.minecraft.advancements.FrameType -> ap -> net.minecraft.advancements.AdvancementFrameType
    F:net.minecraft.advancements.AdvancementFrameType TASK -> a
    F:net.minecraft.advancements.AdvancementFrameType CHALLENGE -> b
    F:net.minecraft.advancements.AdvancementFrameType GOAL -> c
    F:java.lang.String name -> d
    F:int texture -> e
    F:net.minecraft.EnumChatFormat chatColor -> f
    F:net.minecraft.network.chat.IChatBaseComponent displayName -> g
    M:java.lang.String getName() -> a
    M:int getTexture() -> b
    M:net.minecraft.advancements.AdvancementFrameType byName(java.lang.String) -> a
    M:net.minecraft.EnumChatFormat getChatColor() -> c
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName() -> d
net.minecraft.advancements.RequirementsStrategy -> aq -> net.minecraft.advancements.AdvancementRequirements
    F:net.minecraft.advancements.AdvancementRequirements AND -> a
    F:net.minecraft.advancements.AdvancementRequirements OR -> b
net.minecraft.advancements.TreeNodePosition -> ar -> net.minecraft.advancements.AdvancementTree
    F:net.minecraft.advancements.Advancement advancement -> a
    F:net.minecraft.advancements.AdvancementTree parent -> b
    F:net.minecraft.advancements.AdvancementTree previousSibling -> c
    F:int childIndex -> d
    F:java.util.List children -> e
    F:net.minecraft.advancements.AdvancementTree ancestor -> f
    F:net.minecraft.advancements.AdvancementTree thread -> g
    F:int x -> h
    F:float y -> i
    F:float mod -> j
    F:float change -> k
    F:float shift -> l
    M:net.minecraft.advancements.AdvancementTree addChild(net.minecraft.advancements.Advancement,net.minecraft.advancements.AdvancementTree) -> a
    M:void firstWalk() -> a
    M:float secondWalk(float,int,float) -> a
    M:void thirdWalk(float) -> a
    M:void executeShifts() -> b
    M:net.minecraft.advancements.AdvancementTree previousOrThread() -> c
    M:net.minecraft.advancements.AdvancementTree nextOrThread() -> d
    M:net.minecraft.advancements.AdvancementTree apportion(net.minecraft.advancements.AdvancementTree) -> a
    M:void moveSubtree(net.minecraft.advancements.AdvancementTree,float) -> a
    M:net.minecraft.advancements.AdvancementTree getAncestor(net.minecraft.advancements.AdvancementTree,net.minecraft.advancements.AdvancementTree) -> a
    M:void finalizePosition() -> e
    M:void run(net.minecraft.advancements.Advancement) -> a
net.minecraft.advancements.critereon.AbstractCriterionTriggerInstance -> as -> net.minecraft.advancements.critereon.CriterionInstanceAbstract
    F:net.minecraft.resources.MinecraftKey criterion -> a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite player -> b
    M:net.minecraft.resources.MinecraftKey getCriterion() -> a
    M:net.minecraft.advancements.critereon.EntityPredicate$Composite getPlayerPredicate() -> b
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.BeeNestDestroyedTrigger -> at -> net.minecraft.advancements.critereon.CriterionTriggerBeeNestDestroyed
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.BeeNestDestroyedTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:net.minecraft.world.level.block.Block deserializeBlock(com.google.gson.JsonObject) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.ItemStack,int) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.BeeNestDestroyedTrigger$TriggerInstance -> at$a -> net.minecraft.advancements.critereon.CriterionTriggerBeeNestDestroyed$a
    F:net.minecraft.world.level.block.Block block -> a
    F:net.minecraft.advancements.critereon.CriterionConditionItem item -> b
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange numBees -> c
    M:net.minecraft.advancements.critereon.BeeNestDestroyedTrigger$TriggerInstance destroyedBeeNest(net.minecraft.world.level.block.Block,net.minecraft.advancements.critereon.ItemPredicate$Builder,net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange) -> a
    M:boolean matches(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.ItemStack,int) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.BlockPredicate -> au -> net.minecraft.advancements.critereon.CriterionConditionBlock
    F:net.minecraft.advancements.critereon.CriterionConditionBlock ANY -> a
    F:net.minecraft.tags.TagKey tag -> b
    F:java.util.Set blocks -> c
    F:net.minecraft.advancements.critereon.CriterionTriggerProperties properties -> d
    F:net.minecraft.advancements.critereon.CriterionConditionNBT nbt -> e
    M:boolean matches(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionBlock fromJson(com.google.gson.JsonElement) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
net.minecraft.advancements.critereon.BlockPredicate$Builder -> au$a -> net.minecraft.advancements.critereon.CriterionConditionBlock$a
    F:java.util.Set blocks -> a
    F:net.minecraft.tags.TagKey tag -> b
    F:net.minecraft.advancements.critereon.CriterionTriggerProperties properties -> c
    F:net.minecraft.advancements.critereon.CriterionConditionNBT nbt -> d
    M:net.minecraft.advancements.critereon.BlockPredicate$Builder block() -> a
    M:net.minecraft.advancements.critereon.BlockPredicate$Builder of(net.minecraft.world.level.block.Block[]) -> a
    M:net.minecraft.advancements.critereon.BlockPredicate$Builder of(java.lang.Iterable) -> a
    M:net.minecraft.advancements.critereon.BlockPredicate$Builder of(net.minecraft.tags.TagKey) -> a
    M:net.minecraft.advancements.critereon.BlockPredicate$Builder hasNbt(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.advancements.critereon.BlockPredicate$Builder setProperties(net.minecraft.advancements.critereon.CriterionTriggerProperties) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionBlock build() -> b
net.minecraft.advancements.critereon.BredAnimalsTrigger -> av -> net.minecraft.advancements.critereon.CriterionTriggerBredAnimals
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.BredAnimalsTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.entity.animal.EntityAnimal,net.minecraft.world.entity.animal.EntityAnimal,net.minecraft.world.entity.EntityAgeable) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.BredAnimalsTrigger$TriggerInstance -> av$a -> net.minecraft.advancements.critereon.CriterionTriggerBredAnimals$a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite parent -> a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite partner -> b
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite child -> c
    M:net.minecraft.advancements.critereon.BredAnimalsTrigger$TriggerInstance bredAnimals() -> c
    M:net.minecraft.advancements.critereon.BredAnimalsTrigger$TriggerInstance bredAnimals(net.minecraft.advancements.critereon.EntityPredicate$Builder) -> a
    M:net.minecraft.advancements.critereon.BredAnimalsTrigger$TriggerInstance bredAnimals(net.minecraft.advancements.critereon.CriterionConditionEntity,net.minecraft.advancements.critereon.CriterionConditionEntity,net.minecraft.advancements.critereon.CriterionConditionEntity) -> a
    M:boolean matches(net.minecraft.world.level.storage.loot.LootTableInfo,net.minecraft.world.level.storage.loot.LootTableInfo,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.BrewedPotionTrigger -> aw -> net.minecraft.advancements.critereon.CriterionTriggerBrewedPotion
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.BrewedPotionTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.item.alchemy.PotionRegistry) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.BrewedPotionTrigger$TriggerInstance -> aw$a -> net.minecraft.advancements.critereon.CriterionTriggerBrewedPotion$a
    F:net.minecraft.world.item.alchemy.PotionRegistry potion -> a
    M:net.minecraft.advancements.critereon.BrewedPotionTrigger$TriggerInstance brewedPotion() -> c
    M:boolean matches(net.minecraft.world.item.alchemy.PotionRegistry) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.ChangeDimensionTrigger -> ax -> net.minecraft.advancements.critereon.CriterionTriggerChangedDimension
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.ChangeDimensionTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.resources.ResourceKey,net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.ChangeDimensionTrigger$TriggerInstance -> ax$a -> net.minecraft.advancements.critereon.CriterionTriggerChangedDimension$a
    F:net.minecraft.resources.ResourceKey from -> a
    F:net.minecraft.resources.ResourceKey to -> b
    M:net.minecraft.advancements.critereon.ChangeDimensionTrigger$TriggerInstance changedDimension() -> c
    M:net.minecraft.advancements.critereon.ChangeDimensionTrigger$TriggerInstance changedDimension(net.minecraft.resources.ResourceKey,net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.advancements.critereon.ChangeDimensionTrigger$TriggerInstance changedDimensionTo(net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.advancements.critereon.ChangeDimensionTrigger$TriggerInstance changedDimensionFrom(net.minecraft.resources.ResourceKey) -> b
    M:boolean matches(net.minecraft.resources.ResourceKey,net.minecraft.resources.ResourceKey) -> b
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.ChanneledLightningTrigger -> ay -> net.minecraft.advancements.critereon.CriterionTriggerChanneledLightning
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.ChanneledLightningTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,java.util.Collection) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.ChanneledLightningTrigger$TriggerInstance -> ay$a -> net.minecraft.advancements.critereon.CriterionTriggerChanneledLightning$a
    M:net.minecraft.advancements.critereon.ChanneledLightningTrigger$TriggerInstance channeledLightning(net.minecraft.advancements.critereon.EntityPredicate[]) -> a
    M:boolean matches(java.util.Collection) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.ConstructBeaconTrigger -> az -> net.minecraft.advancements.critereon.CriterionTriggerConstructBeacon
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.ConstructBeaconTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,int) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.ConstructBeaconTrigger$TriggerInstance -> az$a -> net.minecraft.advancements.critereon.CriterionTriggerConstructBeacon$a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange level -> a
    M:net.minecraft.advancements.critereon.ConstructBeaconTrigger$TriggerInstance constructedBeacon() -> c
    M:net.minecraft.advancements.critereon.ConstructBeaconTrigger$TriggerInstance constructedBeacon(net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange) -> a
    M:boolean matches(int) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.ConsumeItemTrigger -> ba -> net.minecraft.advancements.critereon.CriterionTriggerConsumeItem
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.ConsumeItemTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.ConsumeItemTrigger$TriggerInstance -> ba$a -> net.minecraft.advancements.critereon.CriterionTriggerConsumeItem$a
    F:net.minecraft.advancements.critereon.CriterionConditionItem item -> a
    M:net.minecraft.advancements.critereon.ConsumeItemTrigger$TriggerInstance usedItem() -> c
    M:net.minecraft.advancements.critereon.ConsumeItemTrigger$TriggerInstance usedItem(net.minecraft.advancements.critereon.CriterionConditionItem) -> a
    M:net.minecraft.advancements.critereon.ConsumeItemTrigger$TriggerInstance usedItem(net.minecraft.world.level.IMaterial) -> a
    M:boolean matches(net.minecraft.world.item.ItemStack) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.CuredZombieVillagerTrigger -> bb -> net.minecraft.advancements.critereon.CriterionTriggerCuredZombieVillager
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.CuredZombieVillagerTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.entity.monster.EntityZombie,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.CuredZombieVillagerTrigger$TriggerInstance -> bb$a -> net.minecraft.advancements.critereon.CriterionTriggerCuredZombieVillager$a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite zombie -> a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite villager -> b
    M:net.minecraft.advancements.critereon.CuredZombieVillagerTrigger$TriggerInstance curedZombieVillager() -> c
    M:boolean matches(net.minecraft.world.level.storage.loot.LootTableInfo,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.DamagePredicate -> bc -> net.minecraft.advancements.critereon.CriterionConditionDamage
    F:net.minecraft.advancements.critereon.CriterionConditionDamage ANY -> a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange dealtDamage -> b
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange takenDamage -> c
    F:net.minecraft.advancements.critereon.CriterionConditionEntity sourceEntity -> d
    F:java.lang.Boolean blocked -> e
    F:net.minecraft.advancements.critereon.CriterionConditionDamageSource type -> f
    M:boolean matches(net.minecraft.server.level.EntityPlayer,net.minecraft.world.damagesource.DamageSource,float,float,boolean) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionDamage fromJson(com.google.gson.JsonElement) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
net.minecraft.advancements.critereon.DamagePredicate$Builder -> bc$a -> net.minecraft.advancements.critereon.CriterionConditionDamage$a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange dealtDamage -> a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange takenDamage -> b
    F:net.minecraft.advancements.critereon.CriterionConditionEntity sourceEntity -> c
    F:java.lang.Boolean blocked -> d
    F:net.minecraft.advancements.critereon.CriterionConditionDamageSource type -> e
    M:net.minecraft.advancements.critereon.DamagePredicate$Builder damageInstance() -> a
    M:net.minecraft.advancements.critereon.DamagePredicate$Builder dealtDamage(net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange) -> a
    M:net.minecraft.advancements.critereon.DamagePredicate$Builder takenDamage(net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange) -> b
    M:net.minecraft.advancements.critereon.DamagePredicate$Builder sourceEntity(net.minecraft.advancements.critereon.CriterionConditionEntity) -> a
    M:net.minecraft.advancements.critereon.DamagePredicate$Builder blocked(java.lang.Boolean) -> a
    M:net.minecraft.advancements.critereon.DamagePredicate$Builder type(net.minecraft.advancements.critereon.CriterionConditionDamageSource) -> a
    M:net.minecraft.advancements.critereon.DamagePredicate$Builder type(net.minecraft.advancements.critereon.DamageSourcePredicate$Builder) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionDamage build() -> b
net.minecraft.advancements.critereon.DamageSourcePredicate -> bd -> net.minecraft.advancements.critereon.CriterionConditionDamageSource
    F:net.minecraft.advancements.critereon.CriterionConditionDamageSource ANY -> a
    F:java.lang.Boolean isProjectile -> b
    F:java.lang.Boolean isExplosion -> c
    F:java.lang.Boolean bypassesArmor -> d
    F:java.lang.Boolean bypassesInvulnerability -> e
    F:java.lang.Boolean bypassesMagic -> f
    F:java.lang.Boolean isFire -> g
    F:java.lang.Boolean isMagic -> h
    F:java.lang.Boolean isLightning -> i
    F:net.minecraft.advancements.critereon.CriterionConditionEntity directEntity -> j
    F:net.minecraft.advancements.critereon.CriterionConditionEntity sourceEntity -> k
    M:boolean matches(net.minecraft.server.level.EntityPlayer,net.minecraft.world.damagesource.DamageSource) -> a
    M:boolean matches(net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D,net.minecraft.world.damagesource.DamageSource) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionDamageSource fromJson(com.google.gson.JsonElement) -> a
    M:java.lang.Boolean getOptionalBoolean(com.google.gson.JsonObject,java.lang.String) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
    M:void addOptionally(com.google.gson.JsonObject,java.lang.String,java.lang.Boolean) -> a
net.minecraft.advancements.critereon.DamageSourcePredicate$Builder -> bd$a -> net.minecraft.advancements.critereon.CriterionConditionDamageSource$a
    F:java.lang.Boolean isProjectile -> a
    F:java.lang.Boolean isExplosion -> b
    F:java.lang.Boolean bypassesArmor -> c
    F:java.lang.Boolean bypassesInvulnerability -> d
    F:java.lang.Boolean bypassesMagic -> e
    F:java.lang.Boolean isFire -> f
    F:java.lang.Boolean isMagic -> g
    F:java.lang.Boolean isLightning -> h
    F:net.minecraft.advancements.critereon.CriterionConditionEntity directEntity -> i
    F:net.minecraft.advancements.critereon.CriterionConditionEntity sourceEntity -> j
    M:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder damageType() -> a
    M:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder isProjectile(java.lang.Boolean) -> a
    M:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder isExplosion(java.lang.Boolean) -> b
    M:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder bypassesArmor(java.lang.Boolean) -> c
    M:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder bypassesInvulnerability(java.lang.Boolean) -> d
    M:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder bypassesMagic(java.lang.Boolean) -> e
    M:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder isFire(java.lang.Boolean) -> f
    M:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder isMagic(java.lang.Boolean) -> g
    M:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder isLightning(java.lang.Boolean) -> h
    M:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder direct(net.minecraft.advancements.critereon.CriterionConditionEntity) -> a
    M:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder direct(net.minecraft.advancements.critereon.EntityPredicate$Builder) -> a
    M:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder source(net.minecraft.advancements.critereon.CriterionConditionEntity) -> b
    M:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder source(net.minecraft.advancements.critereon.EntityPredicate$Builder) -> b
    M:net.minecraft.advancements.critereon.CriterionConditionDamageSource build() -> b
net.minecraft.advancements.critereon.DeserializationContext -> be -> net.minecraft.advancements.critereon.LootDeserializationContext
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.resources.MinecraftKey id -> b
    F:net.minecraft.world.level.storage.loot.LootPredicateManager predicateManager -> c
    F:com.google.gson.Gson predicateGson -> d
    M:net.minecraft.resources.MinecraftKey getAdvancementId() -> a
net.minecraft.advancements.critereon.DistancePredicate -> bf -> net.minecraft.advancements.critereon.CriterionConditionDistance
    F:net.minecraft.advancements.critereon.CriterionConditionDistance ANY -> a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange x -> b
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange y -> c
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange z -> d
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange horizontal -> e
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange absolute -> f
    M:net.minecraft.advancements.critereon.CriterionConditionDistance horizontal(net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionDistance vertical(net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange) -> b
    M:net.minecraft.advancements.critereon.CriterionConditionDistance absolute(net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange) -> c
    M:boolean matches(double,double,double,double,double,double) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionDistance fromJson(com.google.gson.JsonElement) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
net.minecraft.advancements.critereon.DistanceTrigger -> bg -> net.minecraft.advancements.critereon.DistanceTrigger
    F:net.minecraft.resources.MinecraftKey id -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.DistanceTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.DistanceTrigger$TriggerInstance -> bg$a -> net.minecraft.advancements.critereon.DistanceTrigger$a
    F:net.minecraft.advancements.critereon.CriterionConditionLocation startPosition -> a
    F:net.minecraft.advancements.critereon.CriterionConditionDistance distance -> b
    M:net.minecraft.advancements.critereon.DistanceTrigger$TriggerInstance fallFromHeight(net.minecraft.advancements.critereon.EntityPredicate$Builder,net.minecraft.advancements.critereon.CriterionConditionDistance,net.minecraft.advancements.critereon.CriterionConditionLocation) -> a
    M:net.minecraft.advancements.critereon.DistanceTrigger$TriggerInstance rideEntityInLava(net.minecraft.advancements.critereon.EntityPredicate$Builder,net.minecraft.advancements.critereon.CriterionConditionDistance) -> a
    M:net.minecraft.advancements.critereon.DistanceTrigger$TriggerInstance travelledThroughNether(net.minecraft.advancements.critereon.CriterionConditionDistance) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
    M:boolean matches(net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D) -> a
net.minecraft.advancements.critereon.EffectsChangedTrigger -> bh -> net.minecraft.advancements.critereon.CriterionTriggerEffectsChanged
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.EffectsChangedTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.EffectsChangedTrigger$TriggerInstance -> bh$a -> net.minecraft.advancements.critereon.CriterionTriggerEffectsChanged$a
    F:net.minecraft.advancements.critereon.CriterionConditionMobEffect effects -> a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite source -> b
    M:net.minecraft.advancements.critereon.EffectsChangedTrigger$TriggerInstance hasEffects(net.minecraft.advancements.critereon.CriterionConditionMobEffect) -> a
    M:net.minecraft.advancements.critereon.EffectsChangedTrigger$TriggerInstance gotEffectsFrom(net.minecraft.advancements.critereon.CriterionConditionEntity) -> a
    M:boolean matches(net.minecraft.server.level.EntityPlayer,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.EnchantedItemTrigger -> bi -> net.minecraft.advancements.critereon.CriterionTriggerEnchantedItem
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.EnchantedItemTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.item.ItemStack,int) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.EnchantedItemTrigger$TriggerInstance -> bi$a -> net.minecraft.advancements.critereon.CriterionTriggerEnchantedItem$a
    F:net.minecraft.advancements.critereon.CriterionConditionItem item -> a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange levels -> b
    M:net.minecraft.advancements.critereon.EnchantedItemTrigger$TriggerInstance enchantedItem() -> c
    M:boolean matches(net.minecraft.world.item.ItemStack,int) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.EnchantmentPredicate -> bj -> net.minecraft.advancements.critereon.CriterionConditionEnchantments
    F:net.minecraft.advancements.critereon.CriterionConditionEnchantments ANY -> a
    F:net.minecraft.world.item.enchantment.Enchantment enchantment -> c
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange level -> d
    M:boolean containedIn(java.util.Map) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
    M:net.minecraft.advancements.critereon.CriterionConditionEnchantments fromJson(com.google.gson.JsonElement) -> a
net.minecraft.advancements.critereon.EnterBlockTrigger -> bk -> net.minecraft.advancements.critereon.CriterionTriggerEnterBlock
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.EnterBlockTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:net.minecraft.world.level.block.Block deserializeBlock(com.google.gson.JsonObject) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.EnterBlockTrigger$TriggerInstance -> bk$a -> net.minecraft.advancements.critereon.CriterionTriggerEnterBlock$a
    F:net.minecraft.world.level.block.Block block -> a
    F:net.minecraft.advancements.critereon.CriterionTriggerProperties state -> b
    M:net.minecraft.advancements.critereon.EnterBlockTrigger$TriggerInstance entersBlock(net.minecraft.world.level.block.Block) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
    M:boolean matches(net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.advancements.critereon.EntityEquipmentPredicate -> bl -> net.minecraft.advancements.critereon.CriterionConditionEntityEquipment
    F:net.minecraft.advancements.critereon.CriterionConditionEntityEquipment ANY -> a
    F:net.minecraft.advancements.critereon.CriterionConditionEntityEquipment CAPTAIN -> b
    F:net.minecraft.advancements.critereon.CriterionConditionItem head -> c
    F:net.minecraft.advancements.critereon.CriterionConditionItem chest -> d
    F:net.minecraft.advancements.critereon.CriterionConditionItem legs -> e
    F:net.minecraft.advancements.critereon.CriterionConditionItem feet -> f
    F:net.minecraft.advancements.critereon.CriterionConditionItem mainhand -> g
    F:net.minecraft.advancements.critereon.CriterionConditionItem offhand -> h
    M:boolean matches(net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionEntityEquipment fromJson(com.google.gson.JsonElement) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
net.minecraft.advancements.critereon.EntityEquipmentPredicate$Builder -> bl$a -> net.minecraft.advancements.critereon.CriterionConditionEntityEquipment$a
    F:net.minecraft.advancements.critereon.CriterionConditionItem head -> a
    F:net.minecraft.advancements.critereon.CriterionConditionItem chest -> b
    F:net.minecraft.advancements.critereon.CriterionConditionItem legs -> c
    F:net.minecraft.advancements.critereon.CriterionConditionItem feet -> d
    F:net.minecraft.advancements.critereon.CriterionConditionItem mainhand -> e
    F:net.minecraft.advancements.critereon.CriterionConditionItem offhand -> f
    M:net.minecraft.advancements.critereon.EntityEquipmentPredicate$Builder equipment() -> a
    M:net.minecraft.advancements.critereon.EntityEquipmentPredicate$Builder head(net.minecraft.advancements.critereon.CriterionConditionItem) -> a
    M:net.minecraft.advancements.critereon.EntityEquipmentPredicate$Builder chest(net.minecraft.advancements.critereon.CriterionConditionItem) -> b
    M:net.minecraft.advancements.critereon.EntityEquipmentPredicate$Builder legs(net.minecraft.advancements.critereon.CriterionConditionItem) -> c
    M:net.minecraft.advancements.critereon.EntityEquipmentPredicate$Builder feet(net.minecraft.advancements.critereon.CriterionConditionItem) -> d
    M:net.minecraft.advancements.critereon.EntityEquipmentPredicate$Builder mainhand(net.minecraft.advancements.critereon.CriterionConditionItem) -> e
    M:net.minecraft.advancements.critereon.EntityEquipmentPredicate$Builder offhand(net.minecraft.advancements.critereon.CriterionConditionItem) -> f
    M:net.minecraft.advancements.critereon.CriterionConditionEntityEquipment build() -> b
net.minecraft.advancements.critereon.EntityFlagsPredicate -> bm -> net.minecraft.advancements.critereon.CriterionConditionEntityFlags
    F:net.minecraft.advancements.critereon.CriterionConditionEntityFlags ANY -> a
    F:java.lang.Boolean isOnFire -> b
    F:java.lang.Boolean isCrouching -> c
    F:java.lang.Boolean isSprinting -> d
    F:java.lang.Boolean isSwimming -> e
    F:java.lang.Boolean isBaby -> f
    M:boolean matches(net.minecraft.world.entity.Entity) -> a
    M:java.lang.Boolean getOptionalBoolean(com.google.gson.JsonObject,java.lang.String) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionEntityFlags fromJson(com.google.gson.JsonElement) -> a
    M:void addOptionalBoolean(com.google.gson.JsonObject,java.lang.String,java.lang.Boolean) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
net.minecraft.advancements.critereon.EntityFlagsPredicate$Builder -> bm$a -> net.minecraft.advancements.critereon.CriterionConditionEntityFlags$a
    F:java.lang.Boolean isOnFire -> a
    F:java.lang.Boolean isCrouching -> b
    F:java.lang.Boolean isSprinting -> c
    F:java.lang.Boolean isSwimming -> d
    F:java.lang.Boolean isBaby -> e
    M:net.minecraft.advancements.critereon.EntityFlagsPredicate$Builder flags() -> a
    M:net.minecraft.advancements.critereon.EntityFlagsPredicate$Builder setOnFire(java.lang.Boolean) -> a
    M:net.minecraft.advancements.critereon.EntityFlagsPredicate$Builder setCrouching(java.lang.Boolean) -> b
    M:net.minecraft.advancements.critereon.EntityFlagsPredicate$Builder setSprinting(java.lang.Boolean) -> c
    M:net.minecraft.advancements.critereon.EntityFlagsPredicate$Builder setSwimming(java.lang.Boolean) -> d
    M:net.minecraft.advancements.critereon.EntityFlagsPredicate$Builder setIsBaby(java.lang.Boolean) -> e
    M:net.minecraft.advancements.critereon.CriterionConditionEntityFlags build() -> b
net.minecraft.advancements.critereon.EntityHurtPlayerTrigger -> bn -> net.minecraft.advancements.critereon.CriterionTriggerEntityHurtPlayer
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.EntityHurtPlayerTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.damagesource.DamageSource,float,float,boolean) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.EntityHurtPlayerTrigger$TriggerInstance -> bn$a -> net.minecraft.advancements.critereon.CriterionTriggerEntityHurtPlayer$a
    F:net.minecraft.advancements.critereon.CriterionConditionDamage damage -> a
    M:net.minecraft.advancements.critereon.EntityHurtPlayerTrigger$TriggerInstance entityHurtPlayer() -> c
    M:net.minecraft.advancements.critereon.EntityHurtPlayerTrigger$TriggerInstance entityHurtPlayer(net.minecraft.advancements.critereon.CriterionConditionDamage) -> a
    M:net.minecraft.advancements.critereon.EntityHurtPlayerTrigger$TriggerInstance entityHurtPlayer(net.minecraft.advancements.critereon.DamagePredicate$Builder) -> a
    M:boolean matches(net.minecraft.server.level.EntityPlayer,net.minecraft.world.damagesource.DamageSource,float,float,boolean) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.EntityPredicate -> bo -> net.minecraft.advancements.critereon.CriterionConditionEntity
    F:net.minecraft.advancements.critereon.CriterionConditionEntity ANY -> a
    F:net.minecraft.advancements.critereon.CriterionConditionEntityType entityType -> b
    F:net.minecraft.advancements.critereon.CriterionConditionDistance distanceToPlayer -> c
    F:net.minecraft.advancements.critereon.CriterionConditionLocation location -> d
    F:net.minecraft.advancements.critereon.CriterionConditionLocation steppingOnLocation -> e
    F:net.minecraft.advancements.critereon.CriterionConditionMobEffect effects -> f
    F:net.minecraft.advancements.critereon.CriterionConditionNBT nbt -> g
    F:net.minecraft.advancements.critereon.CriterionConditionEntityFlags flags -> h
    F:net.minecraft.advancements.critereon.CriterionConditionEntityEquipment equipment -> i
    F:net.minecraft.advancements.critereon.EntitySubPredicate subPredicate -> j
    F:net.minecraft.advancements.critereon.CriterionConditionEntity vehicle -> k
    F:net.minecraft.advancements.critereon.CriterionConditionEntity passenger -> l
    F:net.minecraft.advancements.critereon.CriterionConditionEntity targetedEntity -> m
    F:java.lang.String team -> n
    M:boolean matches(net.minecraft.server.level.EntityPlayer,net.minecraft.world.entity.Entity) -> a
    M:boolean matches(net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionEntity fromJson(com.google.gson.JsonElement) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
    M:net.minecraft.world.level.storage.loot.LootTableInfo createContext(net.minecraft.server.level.EntityPlayer,net.minecraft.world.entity.Entity) -> b
net.minecraft.advancements.critereon.EntityPredicate$Builder -> bo$a -> net.minecraft.advancements.critereon.CriterionConditionEntity$a
    F:net.minecraft.advancements.critereon.CriterionConditionEntityType entityType -> a
    F:net.minecraft.advancements.critereon.CriterionConditionDistance distanceToPlayer -> b
    F:net.minecraft.advancements.critereon.CriterionConditionLocation location -> c
    F:net.minecraft.advancements.critereon.CriterionConditionLocation steppingOnLocation -> d
    F:net.minecraft.advancements.critereon.CriterionConditionMobEffect effects -> e
    F:net.minecraft.advancements.critereon.CriterionConditionNBT nbt -> f
    F:net.minecraft.advancements.critereon.CriterionConditionEntityFlags flags -> g
    F:net.minecraft.advancements.critereon.CriterionConditionEntityEquipment equipment -> h
    F:net.minecraft.advancements.critereon.EntitySubPredicate subPredicate -> i
    F:net.minecraft.advancements.critereon.CriterionConditionEntity vehicle -> j
    F:net.minecraft.advancements.critereon.CriterionConditionEntity passenger -> k
    F:net.minecraft.advancements.critereon.CriterionConditionEntity targetedEntity -> l
    F:java.lang.String team -> m
    M:net.minecraft.advancements.critereon.EntityPredicate$Builder entity() -> a
    M:net.minecraft.advancements.critereon.EntityPredicate$Builder of(net.minecraft.world.entity.EntityTypes) -> a
    M:net.minecraft.advancements.critereon.EntityPredicate$Builder of(net.minecraft.tags.TagKey) -> a
    M:net.minecraft.advancements.critereon.EntityPredicate$Builder entityType(net.minecraft.advancements.critereon.CriterionConditionEntityType) -> a
    M:net.minecraft.advancements.critereon.EntityPredicate$Builder distance(net.minecraft.advancements.critereon.CriterionConditionDistance) -> a
    M:net.minecraft.advancements.critereon.EntityPredicate$Builder located(net.minecraft.advancements.critereon.CriterionConditionLocation) -> a
    M:net.minecraft.advancements.critereon.EntityPredicate$Builder steppingOn(net.minecraft.advancements.critereon.CriterionConditionLocation) -> b
    M:net.minecraft.advancements.critereon.EntityPredicate$Builder effects(net.minecraft.advancements.critereon.CriterionConditionMobEffect) -> a
    M:net.minecraft.advancements.critereon.EntityPredicate$Builder nbt(net.minecraft.advancements.critereon.CriterionConditionNBT) -> a
    M:net.minecraft.advancements.critereon.EntityPredicate$Builder flags(net.minecraft.advancements.critereon.CriterionConditionEntityFlags) -> a
    M:net.minecraft.advancements.critereon.EntityPredicate$Builder equipment(net.minecraft.advancements.critereon.CriterionConditionEntityEquipment) -> a
    M:net.minecraft.advancements.critereon.EntityPredicate$Builder subPredicate(net.minecraft.advancements.critereon.EntitySubPredicate) -> a
    M:net.minecraft.advancements.critereon.EntityPredicate$Builder vehicle(net.minecraft.advancements.critereon.CriterionConditionEntity) -> a
    M:net.minecraft.advancements.critereon.EntityPredicate$Builder passenger(net.minecraft.advancements.critereon.CriterionConditionEntity) -> b
    M:net.minecraft.advancements.critereon.EntityPredicate$Builder targetedEntity(net.minecraft.advancements.critereon.CriterionConditionEntity) -> c
    M:net.minecraft.advancements.critereon.EntityPredicate$Builder team(java.lang.String) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionEntity build() -> b
net.minecraft.advancements.critereon.EntityPredicate$Composite -> bo$b -> net.minecraft.advancements.critereon.CriterionConditionEntity$b
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite ANY -> a
    F:java.util.function.Predicate compositePredicates -> c
    M:net.minecraft.advancements.critereon.EntityPredicate$Composite create(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.advancements.critereon.EntityPredicate$Composite fromJson(com.google.gson.JsonObject,java.lang.String,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:net.minecraft.advancements.critereon.EntityPredicate$Composite fromElement(java.lang.String,net.minecraft.advancements.critereon.LootDeserializationContext,com.google.gson.JsonElement) -> a
    M:net.minecraft.advancements.critereon.EntityPredicate$Composite wrap(net.minecraft.advancements.critereon.CriterionConditionEntity) -> a
    M:boolean matches(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:com.google.gson.JsonElement toJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
    M:com.google.gson.JsonElement toJson(net.minecraft.advancements.critereon.EntityPredicate$Composite[],net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.EntitySubPredicate -> bp -> net.minecraft.advancements.critereon.EntitySubPredicate
    F:net.minecraft.advancements.critereon.EntitySubPredicate ANY -> a
    M:net.minecraft.advancements.critereon.EntitySubPredicate fromJson(com.google.gson.JsonElement) -> a
    M:com.google.gson.JsonElement serialize() -> b
    M:net.minecraft.advancements.critereon.EntitySubPredicate variant(net.minecraft.world.entity.animal.CatVariant) -> a
    M:net.minecraft.advancements.critereon.EntitySubPredicate variant(net.minecraft.world.entity.animal.FrogVariant) -> a
    M:boolean matches(net.minecraft.world.entity.Entity,net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D) -> a
    M:com.google.gson.JsonObject serializeCustomData() -> a
    M:net.minecraft.advancements.critereon.EntitySubPredicate$Type type() -> c
net.minecraft.advancements.critereon.EntitySubPredicate$Type -> bp$a -> net.minecraft.advancements.critereon.EntitySubPredicate$a
net.minecraft.advancements.critereon.EntitySubPredicate$Types -> bp$b -> net.minecraft.advancements.critereon.EntitySubPredicate$b
    F:net.minecraft.advancements.critereon.EntitySubPredicate$Type ANY -> a
    F:net.minecraft.advancements.critereon.EntitySubPredicate$Type LIGHTNING -> b
    F:net.minecraft.advancements.critereon.EntitySubPredicate$Type FISHING_HOOK -> c
    F:net.minecraft.advancements.critereon.EntitySubPredicate$Type PLAYER -> d
    F:net.minecraft.advancements.critereon.EntitySubPredicate$Type SLIME -> e
    F:net.minecraft.advancements.critereon.EntityVariantPredicate CAT -> f
    F:net.minecraft.advancements.critereon.EntityVariantPredicate FROG -> g
    F:com.google.common.collect.BiMap TYPES -> h
net.minecraft.advancements.critereon.EntityTypePredicate -> bq -> net.minecraft.advancements.critereon.CriterionConditionEntityType
    F:net.minecraft.advancements.critereon.CriterionConditionEntityType ANY -> a
    F:com.google.common.base.Joiner COMMA_JOINER -> b
    M:net.minecraft.advancements.critereon.CriterionConditionEntityType fromJson(com.google.gson.JsonElement) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionEntityType of(net.minecraft.world.entity.EntityTypes) -> b
    M:net.minecraft.advancements.critereon.CriterionConditionEntityType of(net.minecraft.tags.TagKey) -> a
    M:boolean matches(net.minecraft.world.entity.EntityTypes) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
net.minecraft.advancements.critereon.EntityTypePredicate$TagPredicate -> bq$a -> net.minecraft.advancements.critereon.CriterionConditionEntityType$a
    F:net.minecraft.tags.TagKey tag -> b
    M:boolean matches(net.minecraft.world.entity.EntityTypes) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
net.minecraft.advancements.critereon.EntityTypePredicate$TypePredicate -> bq$b -> net.minecraft.advancements.critereon.CriterionConditionEntityType$b
    F:net.minecraft.world.entity.EntityTypes type -> b
    M:boolean matches(net.minecraft.world.entity.EntityTypes) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
net.minecraft.advancements.critereon.EntityVariantPredicate -> br -> net.minecraft.advancements.critereon.EntityVariantPredicate
    F:java.lang.String VARIANT_KEY -> a
    F:net.minecraft.core.IRegistry registry -> b
    F:java.util.function.Function getter -> c
    F:net.minecraft.advancements.critereon.EntitySubPredicate$Type type -> d
    M:net.minecraft.advancements.critereon.EntityVariantPredicate create(net.minecraft.core.IRegistry,java.util.function.Function) -> a
    M:net.minecraft.advancements.critereon.EntitySubPredicate$Type type() -> a
    M:net.minecraft.advancements.critereon.EntitySubPredicate createPredicate(java.lang.Object) -> a
    M:boolean matches(net.minecraft.world.entity.Entity,net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D) -> a
    M:com.google.gson.JsonObject serializeCustomData() -> a
    M:net.minecraft.advancements.critereon.EntitySubPredicate$Type type() -> c
net.minecraft.advancements.critereon.FilledBucketTrigger -> bs -> net.minecraft.advancements.critereon.CriterionTriggerFilledBucket
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.FilledBucketTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.FilledBucketTrigger$TriggerInstance -> bs$a -> net.minecraft.advancements.critereon.CriterionTriggerFilledBucket$a
    F:net.minecraft.advancements.critereon.CriterionConditionItem item -> a
    M:net.minecraft.advancements.critereon.FilledBucketTrigger$TriggerInstance filledBucket(net.minecraft.advancements.critereon.CriterionConditionItem) -> a
    M:boolean matches(net.minecraft.world.item.ItemStack) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.FishingHookPredicate -> bt -> net.minecraft.advancements.critereon.CriterionConditionInOpenWater
    F:net.minecraft.advancements.critereon.CriterionConditionInOpenWater ANY -> b
    F:java.lang.String IN_OPEN_WATER_KEY -> c
    F:boolean inOpenWater -> d
    M:net.minecraft.advancements.critereon.CriterionConditionInOpenWater inOpenWater(boolean) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionInOpenWater fromJson(com.google.gson.JsonObject) -> a
    M:com.google.gson.JsonObject serializeCustomData() -> a
    M:net.minecraft.advancements.critereon.EntitySubPredicate$Type type() -> c
    M:boolean matches(net.minecraft.world.entity.Entity,net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D) -> a
net.minecraft.advancements.critereon.FishingRodHookedTrigger -> bu -> net.minecraft.advancements.critereon.CriterionTriggerFishingRodHooked
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.FishingRodHookedTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.projectile.EntityFishingHook,java.util.Collection) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.FishingRodHookedTrigger$TriggerInstance -> bu$a -> net.minecraft.advancements.critereon.CriterionTriggerFishingRodHooked$a
    F:net.minecraft.advancements.critereon.CriterionConditionItem rod -> a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite entity -> b
    F:net.minecraft.advancements.critereon.CriterionConditionItem item -> c
    M:net.minecraft.advancements.critereon.FishingRodHookedTrigger$TriggerInstance fishedItem(net.minecraft.advancements.critereon.CriterionConditionItem,net.minecraft.advancements.critereon.CriterionConditionEntity,net.minecraft.advancements.critereon.CriterionConditionItem) -> a
    M:boolean matches(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo,java.util.Collection) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.FluidPredicate -> bv -> net.minecraft.advancements.critereon.CriterionConditionFluid
    F:net.minecraft.advancements.critereon.CriterionConditionFluid ANY -> a
    F:net.minecraft.tags.TagKey tag -> b
    F:net.minecraft.world.level.material.FluidType fluid -> c
    F:net.minecraft.advancements.critereon.CriterionTriggerProperties properties -> d
    M:boolean matches(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionFluid fromJson(com.google.gson.JsonElement) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
net.minecraft.advancements.critereon.FluidPredicate$Builder -> bv$a -> net.minecraft.advancements.critereon.CriterionConditionFluid$a
    F:net.minecraft.world.level.material.FluidType fluid -> a
    F:net.minecraft.tags.TagKey fluids -> b
    F:net.minecraft.advancements.critereon.CriterionTriggerProperties properties -> c
    M:net.minecraft.advancements.critereon.FluidPredicate$Builder fluid() -> a
    M:net.minecraft.advancements.critereon.FluidPredicate$Builder of(net.minecraft.world.level.material.FluidType) -> a
    M:net.minecraft.advancements.critereon.FluidPredicate$Builder of(net.minecraft.tags.TagKey) -> a
    M:net.minecraft.advancements.critereon.FluidPredicate$Builder setProperties(net.minecraft.advancements.critereon.CriterionTriggerProperties) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionFluid build() -> b
net.minecraft.advancements.critereon.ImpossibleTrigger -> bw -> net.minecraft.advancements.critereon.CriterionTriggerImpossible
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:void addPlayerListener(net.minecraft.server.AdvancementDataPlayer,net.minecraft.advancements.CriterionTrigger$Listener) -> a
    M:void removePlayerListener(net.minecraft.server.AdvancementDataPlayer,net.minecraft.advancements.CriterionTrigger$Listener) -> b
    M:void removePlayerListeners(net.minecraft.server.AdvancementDataPlayer) -> a
    M:net.minecraft.advancements.critereon.ImpossibleTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
    M:net.minecraft.advancements.CriterionInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
net.minecraft.advancements.critereon.ImpossibleTrigger$TriggerInstance -> bw$a -> net.minecraft.advancements.critereon.CriterionTriggerImpossible$a
    M:net.minecraft.resources.MinecraftKey getCriterion() -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.InventoryChangeTrigger -> bx -> net.minecraft.advancements.critereon.CriterionTriggerInventoryChanged
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.entity.player.PlayerInventory,net.minecraft.world.item.ItemStack) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.entity.player.PlayerInventory,net.minecraft.world.item.ItemStack,int,int,int) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance -> bx$a -> net.minecraft.advancements.critereon.CriterionTriggerInventoryChanged$a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange slotsOccupied -> a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange slotsFull -> b
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange slotsEmpty -> c
    M:net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance hasItems(net.minecraft.advancements.critereon.ItemPredicate[]) -> a
    M:net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance hasItems(net.minecraft.world.level.ItemLike[]) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
    M:boolean matches(net.minecraft.world.entity.player.PlayerInventory,net.minecraft.world.item.ItemStack,int,int,int) -> a
net.minecraft.advancements.critereon.ItemDurabilityTrigger -> by -> net.minecraft.advancements.critereon.CriterionTriggerItemDurabilityChanged
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.ItemDurabilityTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.item.ItemStack,int) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.ItemDurabilityTrigger$TriggerInstance -> by$a -> net.minecraft.advancements.critereon.CriterionTriggerItemDurabilityChanged$a
    F:net.minecraft.advancements.critereon.CriterionConditionItem item -> a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange durability -> b
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange delta -> c
    M:net.minecraft.advancements.critereon.ItemDurabilityTrigger$TriggerInstance changedDurability(net.minecraft.advancements.critereon.CriterionConditionItem,net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange) -> a
    M:net.minecraft.advancements.critereon.ItemDurabilityTrigger$TriggerInstance changedDurability(net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.CriterionConditionItem,net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange) -> a
    M:boolean matches(net.minecraft.world.item.ItemStack,int) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.ItemInteractWithBlockTrigger -> bz -> net.minecraft.advancements.critereon.ItemInteractWithBlockTrigger
    F:net.minecraft.resources.MinecraftKey id -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.ItemInteractWithBlockTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.ItemInteractWithBlockTrigger$TriggerInstance -> bz$a -> net.minecraft.advancements.critereon.ItemInteractWithBlockTrigger$a
    F:net.minecraft.advancements.critereon.CriterionConditionLocation location -> a
    F:net.minecraft.advancements.critereon.CriterionConditionItem item -> b
    M:net.minecraft.advancements.critereon.ItemInteractWithBlockTrigger$TriggerInstance itemUsedOnBlock(net.minecraft.advancements.critereon.LocationPredicate$Builder,net.minecraft.advancements.critereon.ItemPredicate$Builder) -> a
    M:net.minecraft.advancements.critereon.ItemInteractWithBlockTrigger$TriggerInstance allayDropItemOnBlock(net.minecraft.advancements.critereon.LocationPredicate$Builder,net.minecraft.advancements.critereon.ItemPredicate$Builder) -> b
    M:boolean matches(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.ItemPredicate -> ca -> net.minecraft.advancements.critereon.CriterionConditionItem
    F:net.minecraft.advancements.critereon.CriterionConditionItem ANY -> a
    F:net.minecraft.tags.TagKey tag -> b
    F:java.util.Set items -> c
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange count -> d
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange durability -> e
    F:net.minecraft.world.item.alchemy.PotionRegistry potion -> h
    F:net.minecraft.advancements.critereon.CriterionConditionNBT nbt -> i
    M:boolean matches(net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionItem fromJson(com.google.gson.JsonElement) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
net.minecraft.advancements.critereon.ItemPredicate$Builder -> ca$a -> net.minecraft.advancements.critereon.CriterionConditionItem$a
    F:java.util.List enchantments -> a
    F:java.util.List storedEnchantments -> b
    F:java.util.Set items -> c
    F:net.minecraft.tags.TagKey tag -> d
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange count -> e
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange durability -> f
    F:net.minecraft.world.item.alchemy.PotionRegistry potion -> g
    F:net.minecraft.advancements.critereon.CriterionConditionNBT nbt -> h
    M:net.minecraft.advancements.critereon.ItemPredicate$Builder item() -> a
    M:net.minecraft.advancements.critereon.ItemPredicate$Builder of(net.minecraft.world.level.ItemLike[]) -> a
    M:net.minecraft.advancements.critereon.ItemPredicate$Builder of(net.minecraft.tags.TagKey) -> a
    M:net.minecraft.advancements.critereon.ItemPredicate$Builder withCount(net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange) -> a
    M:net.minecraft.advancements.critereon.ItemPredicate$Builder hasDurability(net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange) -> b
    M:net.minecraft.advancements.critereon.ItemPredicate$Builder isPotion(net.minecraft.world.item.alchemy.PotionRegistry) -> a
    M:net.minecraft.advancements.critereon.ItemPredicate$Builder hasNbt(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.advancements.critereon.ItemPredicate$Builder hasEnchantment(net.minecraft.advancements.critereon.CriterionConditionEnchantments) -> a
    M:net.minecraft.advancements.critereon.ItemPredicate$Builder hasStoredEnchantment(net.minecraft.advancements.critereon.CriterionConditionEnchantments) -> b
    M:net.minecraft.advancements.critereon.CriterionConditionItem build() -> b
net.minecraft.advancements.critereon.KilledByCrossbowTrigger -> cb -> net.minecraft.advancements.critereon.CriterionTriggerKilledByCrossbow
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.KilledByCrossbowTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,java.util.Collection) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.KilledByCrossbowTrigger$TriggerInstance -> cb$a -> net.minecraft.advancements.critereon.CriterionTriggerKilledByCrossbow$a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange uniqueEntityTypes -> b
    M:net.minecraft.advancements.critereon.KilledByCrossbowTrigger$TriggerInstance crossbowKilled(net.minecraft.advancements.critereon.EntityPredicate$Builder[]) -> a
    M:net.minecraft.advancements.critereon.KilledByCrossbowTrigger$TriggerInstance crossbowKilled(net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange) -> a
    M:boolean matches(java.util.Collection,int) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.KilledTrigger -> cc -> net.minecraft.advancements.critereon.CriterionTriggerKilled
    F:net.minecraft.resources.MinecraftKey id -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.entity.Entity,net.minecraft.world.damagesource.DamageSource) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance -> cc$a -> net.minecraft.advancements.critereon.CriterionTriggerKilled$a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite entityPredicate -> a
    F:net.minecraft.advancements.critereon.CriterionConditionDamageSource killingBlow -> b
    M:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance playerKilledEntity(net.minecraft.advancements.critereon.CriterionConditionEntity) -> a
    M:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance playerKilledEntity(net.minecraft.advancements.critereon.EntityPredicate$Builder) -> a
    M:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance playerKilledEntity() -> c
    M:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance playerKilledEntity(net.minecraft.advancements.critereon.CriterionConditionEntity,net.minecraft.advancements.critereon.CriterionConditionDamageSource) -> a
    M:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance playerKilledEntity(net.minecraft.advancements.critereon.EntityPredicate$Builder,net.minecraft.advancements.critereon.CriterionConditionDamageSource) -> a
    M:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance playerKilledEntity(net.minecraft.advancements.critereon.CriterionConditionEntity,net.minecraft.advancements.critereon.DamageSourcePredicate$Builder) -> a
    M:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance playerKilledEntity(net.minecraft.advancements.critereon.EntityPredicate$Builder,net.minecraft.advancements.critereon.DamageSourcePredicate$Builder) -> a
    M:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance playerKilledEntityNearSculkCatalyst() -> d
    M:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance entityKilledPlayer(net.minecraft.advancements.critereon.CriterionConditionEntity) -> b
    M:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance entityKilledPlayer(net.minecraft.advancements.critereon.EntityPredicate$Builder) -> b
    M:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance entityKilledPlayer() -> e
    M:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance entityKilledPlayer(net.minecraft.advancements.critereon.CriterionConditionEntity,net.minecraft.advancements.critereon.CriterionConditionDamageSource) -> b
    M:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance entityKilledPlayer(net.minecraft.advancements.critereon.EntityPredicate$Builder,net.minecraft.advancements.critereon.CriterionConditionDamageSource) -> b
    M:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance entityKilledPlayer(net.minecraft.advancements.critereon.CriterionConditionEntity,net.minecraft.advancements.critereon.DamageSourcePredicate$Builder) -> b
    M:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance entityKilledPlayer(net.minecraft.advancements.critereon.EntityPredicate$Builder,net.minecraft.advancements.critereon.DamageSourcePredicate$Builder) -> b
    M:boolean matches(net.minecraft.server.level.EntityPlayer,net.minecraft.world.level.storage.loot.LootTableInfo,net.minecraft.world.damagesource.DamageSource) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.LevitationTrigger -> cd -> net.minecraft.advancements.critereon.CriterionTriggerLevitation
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.LevitationTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.phys.Vec3D,int) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.LevitationTrigger$TriggerInstance -> cd$a -> net.minecraft.advancements.critereon.CriterionTriggerLevitation$a
    F:net.minecraft.advancements.critereon.CriterionConditionDistance distance -> a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange duration -> b
    M:net.minecraft.advancements.critereon.LevitationTrigger$TriggerInstance levitated(net.minecraft.advancements.critereon.CriterionConditionDistance) -> a
    M:boolean matches(net.minecraft.server.level.EntityPlayer,net.minecraft.world.phys.Vec3D,int) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.LightPredicate -> ce -> net.minecraft.advancements.critereon.CriterionConditionLight
    F:net.minecraft.advancements.critereon.CriterionConditionLight ANY -> a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange composite -> b
    M:boolean matches(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
    M:net.minecraft.advancements.critereon.CriterionConditionLight fromJson(com.google.gson.JsonElement) -> a
net.minecraft.advancements.critereon.LightPredicate$Builder -> ce$a -> net.minecraft.advancements.critereon.CriterionConditionLight$a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange composite -> a
    M:net.minecraft.advancements.critereon.LightPredicate$Builder light() -> a
    M:net.minecraft.advancements.critereon.LightPredicate$Builder setComposite(net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionLight build() -> b
net.minecraft.advancements.critereon.LighthingBoltPredicate -> cf -> net.minecraft.advancements.critereon.LighthingBoltPredicate
    F:java.lang.String BLOCKS_SET_ON_FIRE_KEY -> b
    F:java.lang.String ENTITY_STRUCK_KEY -> c
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange blocksSetOnFire -> d
    F:net.minecraft.advancements.critereon.CriterionConditionEntity entityStruck -> e
    M:net.minecraft.advancements.critereon.LighthingBoltPredicate blockSetOnFire(net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange) -> a
    M:net.minecraft.advancements.critereon.LighthingBoltPredicate fromJson(com.google.gson.JsonObject) -> a
    M:com.google.gson.JsonObject serializeCustomData() -> a
    M:net.minecraft.advancements.critereon.EntitySubPredicate$Type type() -> c
    M:boolean matches(net.minecraft.world.entity.Entity,net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D) -> a
net.minecraft.advancements.critereon.LightningStrikeTrigger -> cg -> net.minecraft.advancements.critereon.LightningStrikeTrigger
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.LightningStrikeTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.entity.EntityLightning,java.util.List) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.LightningStrikeTrigger$TriggerInstance -> cg$a -> net.minecraft.advancements.critereon.LightningStrikeTrigger$a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite lightning -> a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite bystander -> b
    M:net.minecraft.advancements.critereon.LightningStrikeTrigger$TriggerInstance lighthingStrike(net.minecraft.advancements.critereon.CriterionConditionEntity,net.minecraft.advancements.critereon.CriterionConditionEntity) -> a
    M:boolean matches(net.minecraft.world.level.storage.loot.LootTableInfo,java.util.List) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.LocationPredicate -> ch -> net.minecraft.advancements.critereon.CriterionConditionLocation
    F:org.slf4j.Logger LOGGER -> b
    F:net.minecraft.advancements.critereon.CriterionConditionLocation ANY -> a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange x -> c
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange y -> d
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange z -> e
    F:net.minecraft.resources.ResourceKey biome -> f
    F:net.minecraft.resources.ResourceKey structure -> g
    F:net.minecraft.resources.ResourceKey dimension -> h
    F:java.lang.Boolean smokey -> i
    F:net.minecraft.advancements.critereon.CriterionConditionLight light -> j
    F:net.minecraft.advancements.critereon.CriterionConditionBlock block -> k
    F:net.minecraft.advancements.critereon.CriterionConditionFluid fluid -> l
    M:net.minecraft.advancements.critereon.CriterionConditionLocation inBiome(net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionLocation inDimension(net.minecraft.resources.ResourceKey) -> b
    M:net.minecraft.advancements.critereon.CriterionConditionLocation inStructure(net.minecraft.resources.ResourceKey) -> c
    M:net.minecraft.advancements.critereon.CriterionConditionLocation atYLocation(net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange) -> a
    M:boolean matches(net.minecraft.server.level.WorldServer,double,double,double) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
    M:net.minecraft.advancements.critereon.CriterionConditionLocation fromJson(com.google.gson.JsonElement) -> a
net.minecraft.advancements.critereon.LocationPredicate$Builder -> ch$a -> net.minecraft.advancements.critereon.CriterionConditionLocation$a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange x -> a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange y -> b
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange z -> c
    F:net.minecraft.resources.ResourceKey biome -> d
    F:net.minecraft.resources.ResourceKey structure -> e
    F:net.minecraft.resources.ResourceKey dimension -> f
    F:java.lang.Boolean smokey -> g
    F:net.minecraft.advancements.critereon.CriterionConditionLight light -> h
    F:net.minecraft.advancements.critereon.CriterionConditionBlock block -> i
    F:net.minecraft.advancements.critereon.CriterionConditionFluid fluid -> j
    M:net.minecraft.advancements.critereon.LocationPredicate$Builder location() -> a
    M:net.minecraft.advancements.critereon.LocationPredicate$Builder setX(net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange) -> a
    M:net.minecraft.advancements.critereon.LocationPredicate$Builder setY(net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange) -> b
    M:net.minecraft.advancements.critereon.LocationPredicate$Builder setZ(net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange) -> c
    M:net.minecraft.advancements.critereon.LocationPredicate$Builder setBiome(net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.advancements.critereon.LocationPredicate$Builder setStructure(net.minecraft.resources.ResourceKey) -> b
    M:net.minecraft.advancements.critereon.LocationPredicate$Builder setDimension(net.minecraft.resources.ResourceKey) -> c
    M:net.minecraft.advancements.critereon.LocationPredicate$Builder setLight(net.minecraft.advancements.critereon.CriterionConditionLight) -> a
    M:net.minecraft.advancements.critereon.LocationPredicate$Builder setBlock(net.minecraft.advancements.critereon.CriterionConditionBlock) -> a
    M:net.minecraft.advancements.critereon.LocationPredicate$Builder setFluid(net.minecraft.advancements.critereon.CriterionConditionFluid) -> a
    M:net.minecraft.advancements.critereon.LocationPredicate$Builder setSmokey(java.lang.Boolean) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionLocation build() -> b
net.minecraft.advancements.critereon.LootTableTrigger -> ci -> net.minecraft.advancements.critereon.CriterionTriggerPlayerGeneratesContainerLoot
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.LootTableTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.LootTableTrigger$TriggerInstance -> ci$a -> net.minecraft.advancements.critereon.CriterionTriggerPlayerGeneratesContainerLoot$a
    F:net.minecraft.resources.MinecraftKey lootTable -> a
    M:net.minecraft.advancements.critereon.LootTableTrigger$TriggerInstance lootTableUsed(net.minecraft.resources.MinecraftKey) -> a
    M:boolean matches(net.minecraft.resources.MinecraftKey) -> b
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.MinMaxBounds -> cj -> net.minecraft.advancements.critereon.CriterionConditionValue
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_EMPTY -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SWAPPED -> b
    F:java.lang.Number min -> c
    F:java.lang.Number max -> d
    M:java.lang.Number getMin() -> a
    M:java.lang.Number getMax() -> b
    M:boolean isAny() -> c
    M:com.google.gson.JsonElement serializeToJson() -> d
    M:net.minecraft.advancements.critereon.CriterionConditionValue fromJson(com.google.gson.JsonElement,net.minecraft.advancements.critereon.CriterionConditionValue,java.util.function.BiFunction,net.minecraft.advancements.critereon.MinMaxBounds$BoundsFactory) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionValue fromReader(com.mojang.brigadier.StringReader,net.minecraft.advancements.critereon.MinMaxBounds$BoundsFromReaderFactory,java.util.function.Function,java.util.function.Supplier,java.util.function.Function) -> a
    M:java.lang.Number readNumber(com.mojang.brigadier.StringReader,java.util.function.Function,java.util.function.Supplier) -> a
    M:boolean isAllowedInputChat(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object optionallyFormat(java.lang.Object,java.util.function.Function) -> a
net.minecraft.advancements.critereon.MinMaxBounds$BoundsFactory -> cj$a -> net.minecraft.advancements.critereon.CriterionConditionValue$a
net.minecraft.advancements.critereon.MinMaxBounds$BoundsFromReaderFactory -> cj$b -> net.minecraft.advancements.critereon.CriterionConditionValue$b
net.minecraft.advancements.critereon.MinMaxBounds$Doubles -> cj$c -> net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange ANY -> e
    F:java.lang.Double minSq -> f
    F:java.lang.Double maxSq -> g
    M:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange create(com.mojang.brigadier.StringReader,java.lang.Double,java.lang.Double) -> a
    M:java.lang.Double squareOpt(java.lang.Double) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange exactly(double) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange between(double,double) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange atLeast(double) -> b
    M:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange atMost(double) -> c
    M:boolean matches(double) -> d
    M:boolean matchesSqr(double) -> e
    M:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange fromJson(com.google.gson.JsonElement) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange fromReader(com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange fromReader(com.mojang.brigadier.StringReader,java.util.function.Function) -> a
net.minecraft.advancements.critereon.MinMaxBounds$Ints -> cj$d -> net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange ANY -> e
    F:java.lang.Long minSq -> f
    F:java.lang.Long maxSq -> g
    M:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange create(com.mojang.brigadier.StringReader,java.lang.Integer,java.lang.Integer) -> a
    M:java.lang.Long squareOpt(java.lang.Integer) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange exactly(int) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange between(int,int) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange atLeast(int) -> b
    M:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange atMost(int) -> c
    M:boolean matches(int) -> d
    M:boolean matchesSqr(long) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange fromJson(com.google.gson.JsonElement) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange fromReader(com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange fromReader(com.mojang.brigadier.StringReader,java.util.function.Function) -> a
net.minecraft.advancements.critereon.MobEffectsPredicate -> ck -> net.minecraft.advancements.critereon.CriterionConditionMobEffect
    F:net.minecraft.advancements.critereon.CriterionConditionMobEffect ANY -> a
    F:java.util.Map effects -> b
    M:net.minecraft.advancements.critereon.CriterionConditionMobEffect effects() -> a
    M:net.minecraft.advancements.critereon.CriterionConditionMobEffect and(net.minecraft.world.effect.MobEffectList) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionMobEffect and(net.minecraft.world.effect.MobEffectList,net.minecraft.advancements.critereon.MobEffectsPredicate$MobEffectInstancePredicate) -> a
    M:boolean matches(net.minecraft.world.entity.Entity) -> a
    M:boolean matches(net.minecraft.world.entity.EntityLiving) -> a
    M:boolean matches(java.util.Map) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionMobEffect fromJson(com.google.gson.JsonElement) -> a
    M:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.MobEffectsPredicate$MobEffectInstancePredicate -> ck$a -> net.minecraft.advancements.critereon.CriterionConditionMobEffect$a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange amplifier -> a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange duration -> b
    F:java.lang.Boolean ambient -> c
    F:java.lang.Boolean visible -> d
    M:boolean matches(net.minecraft.world.effect.MobEffect) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
    M:net.minecraft.advancements.critereon.MobEffectsPredicate$MobEffectInstancePredicate fromJson(com.google.gson.JsonObject) -> a
net.minecraft.advancements.critereon.NbtPredicate -> cl -> net.minecraft.advancements.critereon.CriterionConditionNBT
    F:net.minecraft.advancements.critereon.CriterionConditionNBT ANY -> a
    F:net.minecraft.nbt.NBTTagCompound tag -> b
    M:boolean matches(net.minecraft.world.item.ItemStack) -> a
    M:boolean matches(net.minecraft.world.entity.Entity) -> a
    M:boolean matches(net.minecraft.nbt.NBTBase) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
    M:net.minecraft.advancements.critereon.CriterionConditionNBT fromJson(com.google.gson.JsonElement) -> a
    M:net.minecraft.nbt.NBTTagCompound getEntityTagToCompare(net.minecraft.world.entity.Entity) -> b
net.minecraft.advancements.critereon.PickedUpItemTrigger -> cm -> net.minecraft.advancements.critereon.PickedUpItemTrigger
    F:net.minecraft.resources.MinecraftKey id -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.PickedUpItemTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.PickedUpItemTrigger$TriggerInstance -> cm$a -> net.minecraft.advancements.critereon.PickedUpItemTrigger$a
    F:net.minecraft.advancements.critereon.CriterionConditionItem item -> a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite entity -> b
    M:net.minecraft.advancements.critereon.PickedUpItemTrigger$TriggerInstance thrownItemPickedUpByEntity(net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.CriterionConditionItem,net.minecraft.advancements.critereon.EntityPredicate$Composite) -> a
    M:net.minecraft.advancements.critereon.PickedUpItemTrigger$TriggerInstance thrownItemPickedUpByPlayer(net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.CriterionConditionItem,net.minecraft.advancements.critereon.EntityPredicate$Composite) -> b
    M:boolean matches(net.minecraft.server.level.EntityPlayer,net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.PlacedBlockTrigger -> cn -> net.minecraft.advancements.critereon.CriterionTriggerPlacedBlock
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.PlacedBlockTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:net.minecraft.world.level.block.Block deserializeBlock(com.google.gson.JsonObject) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.PlacedBlockTrigger$TriggerInstance -> cn$a -> net.minecraft.advancements.critereon.CriterionTriggerPlacedBlock$a
    F:net.minecraft.world.level.block.Block block -> a
    F:net.minecraft.advancements.critereon.CriterionTriggerProperties state -> b
    F:net.minecraft.advancements.critereon.CriterionConditionLocation location -> c
    F:net.minecraft.advancements.critereon.CriterionConditionItem item -> d
    M:net.minecraft.advancements.critereon.PlacedBlockTrigger$TriggerInstance placedBlock(net.minecraft.world.level.block.Block) -> a
    M:boolean matches(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.server.level.WorldServer,net.minecraft.world.item.ItemStack) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.PlayerHurtEntityTrigger -> co -> net.minecraft.advancements.critereon.CriterionTriggerPlayerHurtEntity
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.entity.Entity,net.minecraft.world.damagesource.DamageSource,float,float,boolean) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance -> co$a -> net.minecraft.advancements.critereon.CriterionTriggerPlayerHurtEntity$a
    F:net.minecraft.advancements.critereon.CriterionConditionDamage damage -> a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite entity -> b
    M:net.minecraft.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance playerHurtEntity() -> c
    M:net.minecraft.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance playerHurtEntity(net.minecraft.advancements.critereon.CriterionConditionDamage) -> a
    M:net.minecraft.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance playerHurtEntity(net.minecraft.advancements.critereon.DamagePredicate$Builder) -> a
    M:net.minecraft.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance playerHurtEntity(net.minecraft.advancements.critereon.CriterionConditionEntity) -> a
    M:net.minecraft.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance playerHurtEntity(net.minecraft.advancements.critereon.CriterionConditionDamage,net.minecraft.advancements.critereon.CriterionConditionEntity) -> a
    M:net.minecraft.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance playerHurtEntity(net.minecraft.advancements.critereon.DamagePredicate$Builder,net.minecraft.advancements.critereon.CriterionConditionEntity) -> a
    M:boolean matches(net.minecraft.server.level.EntityPlayer,net.minecraft.world.level.storage.loot.LootTableInfo,net.minecraft.world.damagesource.DamageSource,float,float,boolean) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.PlayerInteractTrigger -> cp -> net.minecraft.advancements.critereon.CriterionTriggerPlayerInteractedWithEntity
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.PlayerInteractTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.PlayerInteractTrigger$TriggerInstance -> cp$a -> net.minecraft.advancements.critereon.CriterionTriggerPlayerInteractedWithEntity$a
    F:net.minecraft.advancements.critereon.CriterionConditionItem item -> a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite entity -> b
    M:net.minecraft.advancements.critereon.PlayerInteractTrigger$TriggerInstance itemUsedOnEntity(net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.ItemPredicate$Builder,net.minecraft.advancements.critereon.EntityPredicate$Composite) -> a
    M:net.minecraft.advancements.critereon.PlayerInteractTrigger$TriggerInstance itemUsedOnEntity(net.minecraft.advancements.critereon.ItemPredicate$Builder,net.minecraft.advancements.critereon.EntityPredicate$Composite) -> a
    M:boolean matches(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.PlayerPredicate -> cq -> net.minecraft.advancements.critereon.CriterionConditionPlayer
    F:int LOOKING_AT_RANGE -> b
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange level -> c
    F:net.minecraft.world.level.EnumGamemode gameType -> d
    F:java.util.Map stats -> e
    F:it.unimi.dsi.fastutil.objects.Object2BooleanMap recipes -> f
    F:java.util.Map advancements -> g
    F:net.minecraft.advancements.critereon.CriterionConditionEntity lookingAt -> h
    M:net.minecraft.advancements.critereon.PlayerPredicate$AdvancementPredicate advancementPredicateFromJson(com.google.gson.JsonElement) -> b
    M:boolean matches(net.minecraft.world.entity.Entity,net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionPlayer fromJson(com.google.gson.JsonObject) -> a
    M:net.minecraft.stats.Statistic getStat(net.minecraft.stats.StatisticWrapper,net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.resources.MinecraftKey getStatValueId(net.minecraft.stats.Statistic) -> a
    M:com.google.gson.JsonObject serializeCustomData() -> a
    M:net.minecraft.advancements.critereon.EntitySubPredicate$Type type() -> c
net.minecraft.advancements.critereon.PlayerPredicate$AdvancementCriterionsPredicate -> cq$a -> net.minecraft.advancements.critereon.CriterionConditionPlayer$a
    F:it.unimi.dsi.fastutil.objects.Object2BooleanMap criterions -> a
    M:com.google.gson.JsonElement toJson() -> a
    M:boolean test(net.minecraft.advancements.AdvancementProgress) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.advancements.critereon.PlayerPredicate$AdvancementDonePredicate -> cq$b -> net.minecraft.advancements.critereon.CriterionConditionPlayer$b
    F:boolean state -> a
    M:com.google.gson.JsonElement toJson() -> a
    M:boolean test(net.minecraft.advancements.AdvancementProgress) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.advancements.critereon.PlayerPredicate$AdvancementPredicate -> cq$c -> net.minecraft.advancements.critereon.CriterionConditionPlayer$c
net.minecraft.advancements.critereon.PlayerPredicate$Builder -> cq$d -> net.minecraft.advancements.critereon.CriterionConditionPlayer$d
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange level -> a
    F:net.minecraft.world.level.EnumGamemode gameType -> b
    F:java.util.Map stats -> c
    F:it.unimi.dsi.fastutil.objects.Object2BooleanMap recipes -> d
    F:java.util.Map advancements -> e
    F:net.minecraft.advancements.critereon.CriterionConditionEntity lookingAt -> f
    M:net.minecraft.advancements.critereon.PlayerPredicate$Builder player() -> a
    M:net.minecraft.advancements.critereon.PlayerPredicate$Builder setLevel(net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange) -> a
    M:net.minecraft.advancements.critereon.PlayerPredicate$Builder addStat(net.minecraft.stats.Statistic,net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange) -> a
    M:net.minecraft.advancements.critereon.PlayerPredicate$Builder addRecipe(net.minecraft.resources.MinecraftKey,boolean) -> a
    M:net.minecraft.advancements.critereon.PlayerPredicate$Builder setGameType(net.minecraft.world.level.EnumGamemode) -> a
    M:net.minecraft.advancements.critereon.PlayerPredicate$Builder setLookingAt(net.minecraft.advancements.critereon.CriterionConditionEntity) -> a
    M:net.minecraft.advancements.critereon.PlayerPredicate$Builder checkAdvancementDone(net.minecraft.resources.MinecraftKey,boolean) -> b
    M:net.minecraft.advancements.critereon.PlayerPredicate$Builder checkAdvancementCriterions(net.minecraft.resources.MinecraftKey,java.util.Map) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionPlayer build() -> b
net.minecraft.advancements.critereon.PlayerTrigger -> cr -> net.minecraft.advancements.critereon.PlayerTrigger
    F:net.minecraft.resources.MinecraftKey id -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.PlayerTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.PlayerTrigger$TriggerInstance -> cr$a -> net.minecraft.advancements.critereon.PlayerTrigger$a
    M:net.minecraft.advancements.critereon.PlayerTrigger$TriggerInstance located(net.minecraft.advancements.critereon.CriterionConditionLocation) -> a
    M:net.minecraft.advancements.critereon.PlayerTrigger$TriggerInstance located(net.minecraft.advancements.critereon.CriterionConditionEntity) -> a
    M:net.minecraft.advancements.critereon.PlayerTrigger$TriggerInstance sleptInBed() -> c
    M:net.minecraft.advancements.critereon.PlayerTrigger$TriggerInstance raidWon() -> d
    M:net.minecraft.advancements.critereon.PlayerTrigger$TriggerInstance avoidVibration() -> e
    M:net.minecraft.advancements.critereon.PlayerTrigger$TriggerInstance walkOnBlockWithEquipment(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item) -> a
net.minecraft.advancements.critereon.RecipeUnlockedTrigger -> cs -> net.minecraft.advancements.critereon.CriterionTriggerRecipeUnlocked
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.RecipeUnlockedTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.item.crafting.IRecipe) -> a
    M:net.minecraft.advancements.critereon.RecipeUnlockedTrigger$TriggerInstance unlocked(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.RecipeUnlockedTrigger$TriggerInstance -> cs$a -> net.minecraft.advancements.critereon.CriterionTriggerRecipeUnlocked$a
    F:net.minecraft.resources.MinecraftKey recipe -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
    M:boolean matches(net.minecraft.world.item.crafting.IRecipe) -> a
net.minecraft.advancements.critereon.SerializationContext -> ct -> net.minecraft.advancements.critereon.LootSerializationContext
    F:net.minecraft.advancements.critereon.LootSerializationContext INSTANCE -> a
    F:com.google.gson.Gson predicateGson -> b
    M:com.google.gson.JsonElement serializeConditions(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
net.minecraft.advancements.critereon.ShotCrossbowTrigger -> cu -> net.minecraft.advancements.critereon.CriterionTriggerShotCrossbow
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.ShotCrossbowTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.ShotCrossbowTrigger$TriggerInstance -> cu$a -> net.minecraft.advancements.critereon.CriterionTriggerShotCrossbow$a
    F:net.minecraft.advancements.critereon.CriterionConditionItem item -> a
    M:net.minecraft.advancements.critereon.ShotCrossbowTrigger$TriggerInstance shotCrossbow(net.minecraft.advancements.critereon.CriterionConditionItem) -> a
    M:net.minecraft.advancements.critereon.ShotCrossbowTrigger$TriggerInstance shotCrossbow(net.minecraft.world.level.IMaterial) -> a
    M:boolean matches(net.minecraft.world.item.ItemStack) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.SimpleCriterionTrigger -> cv -> net.minecraft.advancements.critereon.CriterionTriggerAbstract
    F:java.util.Map players -> a
    M:void addPlayerListener(net.minecraft.server.AdvancementDataPlayer,net.minecraft.advancements.CriterionTrigger$Listener) -> a
    M:void removePlayerListener(net.minecraft.server.AdvancementDataPlayer,net.minecraft.advancements.CriterionTrigger$Listener) -> b
    M:void removePlayerListeners(net.minecraft.server.AdvancementDataPlayer) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
    M:void trigger(net.minecraft.server.level.EntityPlayer,java.util.function.Predicate) -> a
    M:net.minecraft.advancements.CriterionInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
net.minecraft.advancements.critereon.SlideDownBlockTrigger -> cw -> net.minecraft.advancements.critereon.CriterionSlideDownBlock
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.SlideDownBlockTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:net.minecraft.world.level.block.Block deserializeBlock(com.google.gson.JsonObject) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.SlideDownBlockTrigger$TriggerInstance -> cw$a -> net.minecraft.advancements.critereon.CriterionSlideDownBlock$a
    F:net.minecraft.world.level.block.Block block -> a
    F:net.minecraft.advancements.critereon.CriterionTriggerProperties state -> b
    M:net.minecraft.advancements.critereon.SlideDownBlockTrigger$TriggerInstance slidesDownBlock(net.minecraft.world.level.block.Block) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
    M:boolean matches(net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.advancements.critereon.SlimePredicate -> cx -> net.minecraft.advancements.critereon.SlimePredicate
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange size -> b
    M:net.minecraft.advancements.critereon.SlimePredicate sized(net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange) -> a
    M:net.minecraft.advancements.critereon.SlimePredicate fromJson(com.google.gson.JsonObject) -> a
    M:com.google.gson.JsonObject serializeCustomData() -> a
    M:boolean matches(net.minecraft.world.entity.Entity,net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.advancements.critereon.EntitySubPredicate$Type type() -> c
net.minecraft.advancements.critereon.StartRidingTrigger -> cy -> net.minecraft.advancements.critereon.StartRidingTrigger
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.StartRidingTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.StartRidingTrigger$TriggerInstance -> cy$a -> net.minecraft.advancements.critereon.StartRidingTrigger$a
    M:net.minecraft.advancements.critereon.StartRidingTrigger$TriggerInstance playerStartsRiding(net.minecraft.advancements.critereon.EntityPredicate$Builder) -> a
net.minecraft.advancements.critereon.StatePropertiesPredicate -> cz -> net.minecraft.advancements.critereon.CriterionTriggerProperties
    F:net.minecraft.advancements.critereon.CriterionTriggerProperties ANY -> a
    F:java.util.List properties -> b
    M:net.minecraft.advancements.critereon.StatePropertiesPredicate$PropertyMatcher fromJson(java.lang.String,com.google.gson.JsonElement) -> a
    M:java.lang.String getStringOrNull(com.google.gson.JsonElement) -> b
    M:boolean matches(net.minecraft.world.level.block.state.BlockStateList,net.minecraft.world.level.block.state.IBlockDataHolder) -> a
    M:boolean matches(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean matches(net.minecraft.world.level.material.Fluid) -> a
    M:void checkState(net.minecraft.world.level.block.state.BlockStateList,java.util.function.Consumer) -> a
    M:net.minecraft.advancements.critereon.CriterionTriggerProperties fromJson(com.google.gson.JsonElement) -> a
    M:com.google.gson.JsonElement serializeToJson() -> a
net.minecraft.advancements.critereon.StatePropertiesPredicate$Builder -> cz$a -> net.minecraft.advancements.critereon.CriterionTriggerProperties$a
    F:java.util.List matchers -> a
    M:net.minecraft.advancements.critereon.StatePropertiesPredicate$Builder properties() -> a
    M:net.minecraft.advancements.critereon.StatePropertiesPredicate$Builder hasProperty(net.minecraft.world.level.block.state.properties.IBlockState,java.lang.String) -> a
    M:net.minecraft.advancements.critereon.StatePropertiesPredicate$Builder hasProperty(net.minecraft.world.level.block.state.properties.IBlockState,int) -> a
    M:net.minecraft.advancements.critereon.StatePropertiesPredicate$Builder hasProperty(net.minecraft.world.level.block.state.properties.IBlockState,boolean) -> a
    M:net.minecraft.advancements.critereon.StatePropertiesPredicate$Builder hasProperty(net.minecraft.world.level.block.state.properties.IBlockState,java.lang.Comparable) -> a
    M:net.minecraft.advancements.critereon.CriterionTriggerProperties build() -> b
net.minecraft.advancements.critereon.StatePropertiesPredicate$ExactPropertyMatcher -> cz$b -> net.minecraft.advancements.critereon.CriterionTriggerProperties$b
    F:java.lang.String value -> a
    M:boolean match(net.minecraft.world.level.block.state.IBlockDataHolder,net.minecraft.world.level.block.state.properties.IBlockState) -> a
    M:com.google.gson.JsonElement toJson() -> a
net.minecraft.advancements.critereon.StatePropertiesPredicate$PropertyMatcher -> cz$c -> net.minecraft.advancements.critereon.CriterionTriggerProperties$c
    F:java.lang.String name -> a
    M:boolean match(net.minecraft.world.level.block.state.BlockStateList,net.minecraft.world.level.block.state.IBlockDataHolder) -> a
    M:java.lang.String getName() -> b
    M:void checkState(net.minecraft.world.level.block.state.BlockStateList,java.util.function.Consumer) -> a
net.minecraft.advancements.critereon.StatePropertiesPredicate$RangedPropertyMatcher -> cz$d -> net.minecraft.advancements.critereon.CriterionTriggerProperties$d
    F:java.lang.String minValue -> a
    F:java.lang.String maxValue -> b
    M:boolean match(net.minecraft.world.level.block.state.IBlockDataHolder,net.minecraft.world.level.block.state.properties.IBlockState) -> a
    M:com.google.gson.JsonElement toJson() -> a
net.minecraft.advancements.critereon.SummonedEntityTrigger -> da -> net.minecraft.advancements.critereon.CriterionTriggerSummonedEntity
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.SummonedEntityTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.SummonedEntityTrigger$TriggerInstance -> da$a -> net.minecraft.advancements.critereon.CriterionTriggerSummonedEntity$a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite entity -> a
    M:net.minecraft.advancements.critereon.SummonedEntityTrigger$TriggerInstance summonedEntity(net.minecraft.advancements.critereon.EntityPredicate$Builder) -> a
    M:boolean matches(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.TameAnimalTrigger -> db -> net.minecraft.advancements.critereon.CriterionTriggerTamedAnimal
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.TameAnimalTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.entity.animal.EntityAnimal) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.TameAnimalTrigger$TriggerInstance -> db$a -> net.minecraft.advancements.critereon.CriterionTriggerTamedAnimal$a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite entity -> a
    M:net.minecraft.advancements.critereon.TameAnimalTrigger$TriggerInstance tamedAnimal() -> c
    M:net.minecraft.advancements.critereon.TameAnimalTrigger$TriggerInstance tamedAnimal(net.minecraft.advancements.critereon.CriterionConditionEntity) -> a
    M:boolean matches(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.TargetBlockTrigger -> dc -> net.minecraft.advancements.critereon.CriterionTriggerTargetHit
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.TargetBlockTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.entity.Entity,net.minecraft.world.phys.Vec3D,int) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.TargetBlockTrigger$TriggerInstance -> dc$a -> net.minecraft.advancements.critereon.CriterionTriggerTargetHit$a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange signalStrength -> a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite projectile -> b
    M:net.minecraft.advancements.critereon.TargetBlockTrigger$TriggerInstance targetHit(net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange,net.minecraft.advancements.critereon.EntityPredicate$Composite) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
    M:boolean matches(net.minecraft.world.level.storage.loot.LootTableInfo,net.minecraft.world.phys.Vec3D,int) -> a
net.minecraft.advancements.critereon.TradeTrigger -> dd -> net.minecraft.advancements.critereon.CriterionTriggerVillagerTrade
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.TradeTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.entity.npc.EntityVillagerAbstract,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.TradeTrigger$TriggerInstance -> dd$a -> net.minecraft.advancements.critereon.CriterionTriggerVillagerTrade$a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite villager -> a
    F:net.minecraft.advancements.critereon.CriterionConditionItem item -> b
    M:net.minecraft.advancements.critereon.TradeTrigger$TriggerInstance tradedWithVillager() -> c
    M:net.minecraft.advancements.critereon.TradeTrigger$TriggerInstance tradedWithVillager(net.minecraft.advancements.critereon.EntityPredicate$Builder) -> a
    M:boolean matches(net.minecraft.world.level.storage.loot.LootTableInfo,net.minecraft.world.item.ItemStack) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.UsedEnderEyeTrigger -> de -> net.minecraft.advancements.critereon.CriterionTriggerUsedEnderEye
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.UsedEnderEyeTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.UsedEnderEyeTrigger$TriggerInstance -> de$a -> net.minecraft.advancements.critereon.CriterionTriggerUsedEnderEye$a
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange level -> a
    M:boolean matches(double) -> a
net.minecraft.advancements.critereon.UsedTotemTrigger -> df -> net.minecraft.advancements.critereon.CriterionTriggerUsedTotem
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.UsedTotemTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.UsedTotemTrigger$TriggerInstance -> df$a -> net.minecraft.advancements.critereon.CriterionTriggerUsedTotem$a
    F:net.minecraft.advancements.critereon.CriterionConditionItem item -> a
    M:net.minecraft.advancements.critereon.UsedTotemTrigger$TriggerInstance usedTotem(net.minecraft.advancements.critereon.CriterionConditionItem) -> a
    M:net.minecraft.advancements.critereon.UsedTotemTrigger$TriggerInstance usedTotem(net.minecraft.world.level.IMaterial) -> a
    M:boolean matches(net.minecraft.world.item.ItemStack) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.UsingItemTrigger -> dg -> net.minecraft.advancements.critereon.UsingItemTrigger
    F:net.minecraft.resources.MinecraftKey ID -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.advancements.critereon.UsingItemTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> a
    M:void trigger(net.minecraft.server.level.EntityPlayer,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.advancements.critereon.CriterionInstanceAbstract createInstance(com.google.gson.JsonObject,net.minecraft.advancements.critereon.EntityPredicate$Composite,net.minecraft.advancements.critereon.LootDeserializationContext) -> b
net.minecraft.advancements.critereon.UsingItemTrigger$TriggerInstance -> dg$a -> net.minecraft.advancements.critereon.UsingItemTrigger$a
    F:net.minecraft.advancements.critereon.CriterionConditionItem item -> a
    M:net.minecraft.advancements.critereon.UsingItemTrigger$TriggerInstance lookingAt(net.minecraft.advancements.critereon.EntityPredicate$Builder,net.minecraft.advancements.critereon.ItemPredicate$Builder) -> a
    M:boolean matches(net.minecraft.world.item.ItemStack) -> a
    M:com.google.gson.JsonObject serializeToJson(net.minecraft.advancements.critereon.LootSerializationContext) -> a
net.minecraft.advancements.critereon.WrappedMinMaxBounds -> dh -> net.minecraft.advancements.critereon.CriterionConditionRange
    F:net.minecraft.advancements.critereon.CriterionConditionRange ANY -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INTS_ONLY -> b
    F:java.lang.Float min -> c
    F:java.lang.Float max -> d
    M:net.minecraft.advancements.critereon.CriterionConditionRange exactly(float) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionRange between(float,float) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionRange atLeast(float) -> b
    M:net.minecraft.advancements.critereon.CriterionConditionRange atMost(float) -> c
    M:boolean matches(float) -> d
    M:boolean matchesSqr(double) -> a
    M:java.lang.Float getMin() -> a
    M:java.lang.Float getMax() -> b
    M:com.google.gson.JsonElement serializeToJson() -> c
    M:net.minecraft.advancements.critereon.CriterionConditionRange fromJson(com.google.gson.JsonElement) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionRange fromReader(com.mojang.brigadier.StringReader,boolean) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionRange fromReader(com.mojang.brigadier.StringReader,boolean,java.util.function.Function) -> a
    M:java.lang.Float readNumber(com.mojang.brigadier.StringReader,boolean) -> b
    M:boolean isAllowedNumber(com.mojang.brigadier.StringReader,boolean) -> c
    M:java.lang.Float optionallyFormat(java.lang.Float,java.util.function.Function) -> a
net.minecraft.commands.BrigadierExceptions -> dk -> net.minecraft.commands.CommandExceptionProvider
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType DOUBLE_TOO_SMALL -> a
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType DOUBLE_TOO_BIG -> b
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType FLOAT_TOO_SMALL -> c
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType FLOAT_TOO_BIG -> d
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType INTEGER_TOO_SMALL -> e
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType INTEGER_TOO_BIG -> f
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType LONG_TOO_SMALL -> g
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType LONG_TOO_BIG -> h
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType LITERAL_INCORRECT -> i
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType READER_EXPECTED_START_OF_QUOTE -> j
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType READER_EXPECTED_END_OF_QUOTE -> k
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType READER_INVALID_ESCAPE -> l
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType READER_INVALID_BOOL -> m
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType READER_INVALID_INT -> n
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType READER_EXPECTED_INT -> o
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType READER_INVALID_LONG -> p
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType READER_EXPECTED_LONG -> q
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType READER_INVALID_DOUBLE -> r
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType READER_EXPECTED_DOUBLE -> s
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType READER_INVALID_FLOAT -> t
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType READER_EXPECTED_FLOAT -> u
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType READER_EXPECTED_BOOL -> v
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType READER_EXPECTED_SYMBOL -> w
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType DISPATCHER_UNKNOWN_COMMAND -> x
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType DISPATCHER_UNKNOWN_ARGUMENT -> y
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType DISPATCHER_EXPECTED_ARGUMENT_SEPARATOR -> z
net.minecraft.commands.CommandBuildContext -> dl -> net.minecraft.commands.CommandBuildContext
    F:net.minecraft.core.IRegistryCustom registryAccess -> a
    F:net.minecraft.commands.CommandBuildContext$MissingTagAccessPolicy missingTagAccessPolicy -> b
    M:void missingTagAccessPolicy(net.minecraft.commands.CommandBuildContext$MissingTagAccessPolicy) -> a
    M:net.minecraft.core.HolderLookup holderLookup(net.minecraft.resources.ResourceKey) -> a
    M:java.util.Optional get(net.minecraft.tags.TagKey) -> a
net.minecraft.commands.CommandBuildContext$MissingTagAccessPolicy -> dl$a -> net.minecraft.commands.CommandBuildContext$a
    F:net.minecraft.commands.CommandBuildContext$MissingTagAccessPolicy CREATE_NEW -> a
    F:net.minecraft.commands.CommandBuildContext$MissingTagAccessPolicy RETURN_EMPTY -> b
    F:net.minecraft.commands.CommandBuildContext$MissingTagAccessPolicy FAIL -> c
net.minecraft.commands.CommandFunction -> dm -> net.minecraft.commands.CustomFunction
    F:net.minecraft.resources.MinecraftKey id -> b
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:net.minecraft.commands.CustomFunction fromLines(net.minecraft.resources.MinecraftKey,com.mojang.brigadier.CommandDispatcher,net.minecraft.commands.CommandListenerWrapper,java.util.List) -> a
net.minecraft.commands.CommandFunction$CacheableFunction -> dm$a -> net.minecraft.commands.CustomFunction$a
    F:net.minecraft.commands.CommandFunction$CacheableFunction NONE -> a
    F:net.minecraft.resources.MinecraftKey id -> b
    F:boolean resolved -> c
    F:java.util.Optional function -> d
    M:java.util.Optional get(net.minecraft.server.CustomFunctionData) -> a
    M:net.minecraft.resources.MinecraftKey getId() -> a
net.minecraft.commands.CommandFunction$CommandEntry -> dm$b -> net.minecraft.commands.CustomFunction$b
    F:com.mojang.brigadier.ParseResults parse -> a
    M:void execute(net.minecraft.server.CustomFunctionData,net.minecraft.commands.CommandListenerWrapper,java.util.Deque,int,int,net.minecraft.server.ServerFunctionManager$TraceCallbacks) -> execute
    M:int execute(net.minecraft.server.CustomFunctionData,net.minecraft.commands.CommandListenerWrapper) -> a
net.minecraft.commands.CommandFunction$Entry -> dm$c -> net.minecraft.commands.CustomFunction$c
net.minecraft.commands.CommandFunction$FunctionEntry -> dm$d -> net.minecraft.commands.CustomFunction$d
    F:net.minecraft.commands.CommandFunction$CacheableFunction function -> a
    M:void execute(net.minecraft.server.CustomFunctionData,net.minecraft.commands.CommandListenerWrapper,java.util.Deque,int,int,net.minecraft.server.ServerFunctionManager$TraceCallbacks) -> execute
net.minecraft.commands.CommandRuntimeException -> dn -> net.minecraft.commands.CommandException
    F:net.minecraft.network.chat.IChatBaseComponent message -> a
    M:net.minecraft.network.chat.IChatBaseComponent getComponent() -> a
net.minecraft.commands.CommandSigningContext -> dp -> net.minecraft.commands.CommandSigningContext
    F:net.minecraft.commands.CommandSigningContext NONE -> a
    M:boolean signedArgumentPreview(java.lang.String) -> a
net.minecraft.commands.CommandSigningContext$SignedArguments -> dp$a -> net.minecraft.commands.CommandSigningContext$a
    F:java.util.UUID sender -> b
    F:java.time.Instant timeStamp -> c
    F:net.minecraft.commands.arguments.ArgumentSignatures argumentSignatures -> d
    F:boolean signedPreview -> e
    M:boolean signedArgumentPreview(java.lang.String) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.UUID sender() -> a
    M:java.time.Instant timeStamp() -> b
    M:net.minecraft.commands.arguments.ArgumentSignatures argumentSignatures() -> c
    M:boolean signedPreview() -> d
net.minecraft.commands.CommandSource -> dq -> net.minecraft.commands.ICommandListener
    F:net.minecraft.commands.ICommandListener NULL -> a
    M:void sendSystemMessage(net.minecraft.network.chat.IChatBaseComponent) -> a
net.minecraft.commands.CommandSourceStack -> dr -> net.minecraft.commands.CommandListenerWrapper
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_PLAYER -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_ENTITY -> b
    F:net.minecraft.commands.ICommandListener source -> c
    F:net.minecraft.world.phys.Vec3D worldPosition -> d
    F:net.minecraft.server.level.WorldServer level -> e
    F:int permissionLevel -> f
    F:java.lang.String textName -> g
    F:net.minecraft.network.chat.IChatBaseComponent displayName -> h
    F:net.minecraft.server.MinecraftServer server -> i
    F:boolean silent -> j
    F:net.minecraft.world.entity.Entity entity -> k
    F:com.mojang.brigadier.ResultConsumer consumer -> l
    F:net.minecraft.commands.arguments.ArgumentAnchor$Anchor anchor -> m
    F:net.minecraft.world.phys.Vec2F rotation -> n
    F:net.minecraft.commands.CommandSigningContext signingContext -> o
    M:net.minecraft.commands.CommandListenerWrapper withSource(net.minecraft.commands.ICommandListener) -> a
    M:net.minecraft.commands.CommandListenerWrapper withEntity(net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.commands.CommandListenerWrapper withPosition(net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.commands.CommandListenerWrapper withRotation(net.minecraft.world.phys.Vec2F) -> a
    M:net.minecraft.commands.CommandListenerWrapper withCallback(com.mojang.brigadier.ResultConsumer) -> a
    M:net.minecraft.commands.CommandListenerWrapper withCallback(com.mojang.brigadier.ResultConsumer,java.util.function.BinaryOperator) -> a
    M:net.minecraft.commands.CommandListenerWrapper withSuppressedOutput() -> a
    M:net.minecraft.commands.CommandListenerWrapper withPermission(int) -> a
    M:net.minecraft.commands.CommandListenerWrapper withMaximumPermission(int) -> b
    M:net.minecraft.commands.CommandListenerWrapper withAnchor(net.minecraft.commands.arguments.ArgumentAnchor$Anchor) -> a
    M:net.minecraft.commands.CommandListenerWrapper withLevel(net.minecraft.server.level.WorldServer) -> a
    M:net.minecraft.commands.CommandListenerWrapper facing(net.minecraft.world.entity.Entity,net.minecraft.commands.arguments.ArgumentAnchor$Anchor) -> a
    M:net.minecraft.commands.CommandListenerWrapper facing(net.minecraft.world.phys.Vec3D) -> b
    M:net.minecraft.commands.CommandListenerWrapper withSigningContext(net.minecraft.commands.CommandSigningContext) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName() -> b
    M:java.lang.String getTextName() -> c
    M:net.minecraft.network.chat.ChatSender asChatSender() -> d
    M:boolean hasPermission(int) -> c
    M:net.minecraft.world.phys.Vec3D getPosition() -> e
    M:net.minecraft.server.level.WorldServer getLevel() -> f
    M:net.minecraft.world.entity.Entity getEntity() -> g
    M:net.minecraft.world.entity.Entity getEntityOrException() -> h
    M:net.minecraft.server.level.EntityPlayer getPlayerOrException() -> i
    M:net.minecraft.server.level.EntityPlayer getPlayer() -> j
    M:boolean isPlayer() -> k
    M:net.minecraft.world.phys.Vec2F getRotation() -> l
    M:net.minecraft.server.MinecraftServer getServer() -> m
    M:net.minecraft.commands.arguments.ArgumentAnchor$Anchor getAnchor() -> n
    M:net.minecraft.commands.CommandSigningContext getSigningContext() -> o
    M:void sendSuccess(net.minecraft.network.chat.IChatBaseComponent,boolean) -> a
    M:void broadcastToAdmins(net.minecraft.network.chat.IChatBaseComponent) -> b
    M:void sendFailure(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void onCommandComplete(com.mojang.brigadier.context.CommandContext,boolean,int) -> a
    M:java.util.Collection getOnlinePlayerNames() -> p
    M:java.util.Collection getAllTeams() -> q
    M:java.util.Collection getAvailableSoundEvents() -> r
    M:java.util.stream.Stream getRecipeNames() -> s
    M:java.util.concurrent.CompletableFuture customSuggestion(com.mojang.brigadier.context.CommandContext) -> a
    M:java.util.concurrent.CompletableFuture suggestRegistryElements(net.minecraft.resources.ResourceKey,net.minecraft.commands.SharedSuggestionProvider$ElementSuggestionType,com.mojang.brigadier.suggestion.SuggestionsBuilder,com.mojang.brigadier.context.CommandContext) -> a
    M:java.util.Set levels() -> t
    M:net.minecraft.core.IRegistryCustom registryAccess() -> u
net.minecraft.commands.Commands -> ds -> net.minecraft.commands.CommandDispatcher
    F:org.slf4j.Logger LOGGER -> f
    F:int LEVEL_ALL -> a
    F:int LEVEL_MODERATORS -> b
    F:int LEVEL_GAMEMASTERS -> c
    F:int LEVEL_ADMINS -> d
    F:int LEVEL_OWNERS -> e
    F:com.mojang.brigadier.CommandDispatcher dispatcher -> g
    M:int performPrefixedCommand(net.minecraft.commands.CommandListenerWrapper,java.lang.String) -> a
    M:int performCommand(net.minecraft.commands.CommandListenerWrapper,java.lang.String) -> b
    M:void sendCommands(net.minecraft.server.level.EntityPlayer) -> a
    M:void fillUsableCommands(com.mojang.brigadier.tree.CommandNode,com.mojang.brigadier.tree.CommandNode,net.minecraft.commands.CommandListenerWrapper,java.util.Map) -> a
    M:com.mojang.brigadier.builder.LiteralArgumentBuilder literal(java.lang.String) -> a
    M:com.mojang.brigadier.builder.RequiredArgumentBuilder argument(java.lang.String,com.mojang.brigadier.arguments.ArgumentType) -> a
    M:java.util.function.Predicate createValidator(net.minecraft.commands.Commands$ParseFunction) -> a
    M:com.mojang.brigadier.CommandDispatcher getDispatcher() -> a
    M:com.mojang.brigadier.exceptions.CommandSyntaxException getParseException(com.mojang.brigadier.ParseResults) -> a
    M:void validate() -> b
net.minecraft.commands.Commands$CommandSelection -> ds$a -> net.minecraft.commands.CommandDispatcher$ServerType
    F:net.minecraft.commands.CommandDispatcher$ServerType ALL -> a
    F:net.minecraft.commands.CommandDispatcher$ServerType DEDICATED -> b
    F:net.minecraft.commands.CommandDispatcher$ServerType INTEGRATED -> c
    F:boolean includeIntegrated -> d
    F:boolean includeDedicated -> e
net.minecraft.commands.Commands$ParseFunction -> ds$b -> net.minecraft.commands.CommandDispatcher$b
net.minecraft.commands.SharedSuggestionProvider -> dt -> net.minecraft.commands.ICompletionProvider
    M:java.util.Collection getSelectedEntities() -> v
    M:java.util.Collection getRelevantCoordinates() -> w
    M:java.util.Collection getAbsoluteCoordinates() -> x
    M:void suggestRegistryElements(net.minecraft.core.IRegistry,net.minecraft.commands.SharedSuggestionProvider$ElementSuggestionType,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    M:void filterResources(java.lang.Iterable,java.lang.String,java.util.function.Function,java.util.function.Consumer) -> a
    M:void filterResources(java.lang.Iterable,java.lang.String,java.lang.String,java.util.function.Function,java.util.function.Consumer) -> a
    M:java.util.concurrent.CompletableFuture suggestResource(java.lang.Iterable,com.mojang.brigadier.suggestion.SuggestionsBuilder,java.lang.String) -> a
    M:java.util.concurrent.CompletableFuture suggestResource(java.util.stream.Stream,com.mojang.brigadier.suggestion.SuggestionsBuilder,java.lang.String) -> a
    M:java.util.concurrent.CompletableFuture suggestResource(java.lang.Iterable,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    M:java.util.concurrent.CompletableFuture suggestResource(java.lang.Iterable,com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Function,java.util.function.Function) -> a
    M:java.util.concurrent.CompletableFuture suggestResource(java.util.stream.Stream,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    M:java.util.concurrent.CompletableFuture suggestResource(java.util.stream.Stream,com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Function,java.util.function.Function) -> a
    M:java.util.concurrent.CompletableFuture suggestCoordinates(java.lang.String,java.util.Collection,com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Predicate) -> a
    M:java.util.concurrent.CompletableFuture suggest2DCoordinates(java.lang.String,java.util.Collection,com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Predicate) -> b
    M:java.util.concurrent.CompletableFuture suggest(java.lang.Iterable,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> b
    M:java.util.concurrent.CompletableFuture suggest(java.util.stream.Stream,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> b
    M:java.util.concurrent.CompletableFuture suggest(java.lang.String[],com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    M:java.util.concurrent.CompletableFuture suggest(java.lang.Iterable,com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Function,java.util.function.Function) -> b
    M:boolean matchesSubStr(java.lang.String,java.lang.String) -> a
net.minecraft.commands.SharedSuggestionProvider$ElementSuggestionType -> dt$a -> net.minecraft.commands.ICompletionProvider$a
    F:net.minecraft.commands.SharedSuggestionProvider$ElementSuggestionType TAGS -> a
    F:net.minecraft.commands.SharedSuggestionProvider$ElementSuggestionType ELEMENTS -> b
    F:net.minecraft.commands.SharedSuggestionProvider$ElementSuggestionType ALL -> c
    M:boolean shouldSuggestTags() -> a
    M:boolean shouldSuggestElements() -> b
net.minecraft.commands.SharedSuggestionProvider$TextCoordinates -> dt$b -> net.minecraft.commands.ICompletionProvider$b
    F:net.minecraft.commands.SharedSuggestionProvider$TextCoordinates DEFAULT_LOCAL -> a
    F:net.minecraft.commands.SharedSuggestionProvider$TextCoordinates DEFAULT_GLOBAL -> b
    F:java.lang.String x -> c
    F:java.lang.String y -> d
    F:java.lang.String z -> e
net.minecraft.commands.arguments.AngleArgument -> du -> net.minecraft.commands.arguments.ArgumentAngle
    F:java.util.Collection EXAMPLES -> c
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_COMPLETE -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID_ANGLE -> b
    M:net.minecraft.commands.arguments.ArgumentAngle angle() -> a
    M:float getAngle(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.commands.arguments.AngleArgument$SingleAngle parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.AngleArgument$SingleAngle -> du$a -> net.minecraft.commands.arguments.ArgumentAngle$a
    F:float angle -> a
    F:boolean isRelative -> b
    M:float getAngle(net.minecraft.commands.CommandListenerWrapper) -> a
net.minecraft.commands.arguments.ArgumentSignatures -> dv -> net.minecraft.commands.arguments.ArgumentSignatures
    F:long salt -> a
    F:java.util.Map signatures -> b
    F:int MAX_ARGUMENT_COUNT -> c
    F:int MAX_ARGUMENT_NAME_LENGTH -> d
    M:net.minecraft.commands.arguments.ArgumentSignatures empty() -> a
    M:net.minecraft.util.Crypt$SaltSignaturePair get(java.lang.String) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:java.util.Map collectLastChildPlainSignableComponents(com.mojang.brigadier.context.CommandContextBuilder) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getPlainComponentUnchecked(net.minecraft.commands.arguments.SignedArgument,com.mojang.brigadier.context.ParsedArgument) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:long salt() -> b
    M:java.util.Map signatures() -> c
net.minecraft.commands.arguments.ColorArgument -> dw -> net.minecraft.commands.arguments.ArgumentChatFormat
    F:java.util.Collection EXAMPLES -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_VALUE -> a
    M:net.minecraft.commands.arguments.ArgumentChatFormat color() -> a
    M:net.minecraft.EnumChatFormat getColor(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.EnumChatFormat parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.ComponentArgument -> dx -> net.minecraft.commands.arguments.ArgumentChatComponent
    F:java.util.Collection EXAMPLES -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_JSON -> a
    M:net.minecraft.network.chat.IChatBaseComponent getComponent(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.commands.arguments.ArgumentChatComponent textComponent() -> a
    M:net.minecraft.network.chat.IChatBaseComponent parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.CompoundTagArgument -> dy -> net.minecraft.commands.arguments.ArgumentNBTTag
    F:java.util.Collection EXAMPLES -> a
    M:net.minecraft.commands.arguments.ArgumentNBTTag compoundTag() -> a
    M:net.minecraft.nbt.NBTTagCompound getCompoundTag(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.nbt.NBTTagCompound parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.DimensionArgument -> dz -> net.minecraft.commands.arguments.ArgumentDimension
    F:java.util.Collection EXAMPLES -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_VALUE -> b
    M:net.minecraft.resources.MinecraftKey parse(com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.commands.arguments.ArgumentDimension dimension() -> a
    M:net.minecraft.server.level.WorldServer getDimension(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.EntityAnchorArgument -> ea -> net.minecraft.commands.arguments.ArgumentAnchor
    F:java.util.Collection EXAMPLES -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID -> b
    M:net.minecraft.commands.arguments.ArgumentAnchor$Anchor getAnchor(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.commands.arguments.ArgumentAnchor anchor() -> a
    M:net.minecraft.commands.arguments.ArgumentAnchor$Anchor parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.EntityAnchorArgument$Anchor -> ea$a -> net.minecraft.commands.arguments.ArgumentAnchor$Anchor
    F:net.minecraft.commands.arguments.ArgumentAnchor$Anchor FEET -> a
    F:net.minecraft.commands.arguments.ArgumentAnchor$Anchor EYES -> b
    F:java.util.Map BY_NAME -> c
    F:java.lang.String name -> d
    F:java.util.function.BiFunction transform -> e
    M:net.minecraft.commands.arguments.ArgumentAnchor$Anchor getByName(java.lang.String) -> a
    M:net.minecraft.world.phys.Vec3D apply(net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.phys.Vec3D apply(net.minecraft.commands.CommandListenerWrapper) -> a
net.minecraft.commands.arguments.EntityArgument -> eb -> net.minecraft.commands.arguments.ArgumentEntity
    F:java.util.Collection EXAMPLES -> g
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_SINGLE_ENTITY -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_SINGLE_PLAYER -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ONLY_PLAYERS_ALLOWED -> c
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType NO_ENTITIES_FOUND -> d
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType NO_PLAYERS_FOUND -> e
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SELECTORS_NOT_ALLOWED -> f
    F:boolean single -> h
    F:boolean playersOnly -> i
    M:net.minecraft.commands.arguments.ArgumentEntity entity() -> a
    M:net.minecraft.world.entity.Entity getEntity(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.commands.arguments.ArgumentEntity entities() -> b
    M:java.util.Collection getEntities(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    M:java.util.Collection getOptionalEntities(com.mojang.brigadier.context.CommandContext,java.lang.String) -> c
    M:java.util.Collection getOptionalPlayers(com.mojang.brigadier.context.CommandContext,java.lang.String) -> d
    M:net.minecraft.commands.arguments.ArgumentEntity player() -> c
    M:net.minecraft.server.level.EntityPlayer getPlayer(com.mojang.brigadier.context.CommandContext,java.lang.String) -> e
    M:net.minecraft.commands.arguments.ArgumentEntity players() -> d
    M:java.util.Collection getPlayers(com.mojang.brigadier.context.CommandContext,java.lang.String) -> f
    M:net.minecraft.commands.arguments.selector.EntitySelector parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.EntityArgument$Info -> eb$a -> net.minecraft.commands.arguments.ArgumentEntity$Info
    F:byte FLAG_SINGLE -> a
    F:byte FLAG_PLAYERS_ONLY -> b
    M:void serializeToNetwork(net.minecraft.commands.arguments.ArgumentEntity$Info$Template,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.commands.arguments.ArgumentEntity$Info$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:void serializeToJson(net.minecraft.commands.arguments.ArgumentEntity$Info$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.arguments.ArgumentEntity$Info$Template unpack(net.minecraft.commands.arguments.ArgumentEntity) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template unpack(com.mojang.brigadier.arguments.ArgumentType) -> a
    M:void serializeToJson(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> b
    M:void serializeToNetwork(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.commands.arguments.EntityArgument$Info$Template -> eb$a$a -> net.minecraft.commands.arguments.ArgumentEntity$Info$Template
    F:boolean single -> b
    F:boolean playersOnly -> c
    M:net.minecraft.commands.arguments.ArgumentEntity instantiate(net.minecraft.commands.CommandBuildContext) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo type() -> a
    M:com.mojang.brigadier.arguments.ArgumentType instantiate(net.minecraft.commands.CommandBuildContext) -> b
net.minecraft.commands.arguments.EntitySummonArgument -> ec -> net.minecraft.commands.arguments.ArgumentEntitySummon
    F:java.util.Collection EXAMPLES -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_ENTITY -> a
    M:net.minecraft.commands.arguments.ArgumentEntitySummon id() -> a
    M:net.minecraft.resources.MinecraftKey getSummonableEntity(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.resources.MinecraftKey verifyCanSummon(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.resources.MinecraftKey parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.GameProfileArgument -> ed -> net.minecraft.commands.arguments.ArgumentProfile
    F:java.util.Collection EXAMPLES -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_UNKNOWN_PLAYER -> a
    M:java.util.Collection getGameProfiles(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.commands.arguments.ArgumentProfile gameProfile() -> a
    M:net.minecraft.commands.arguments.GameProfileArgument$Result parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.GameProfileArgument$Result -> ed$a -> net.minecraft.commands.arguments.ArgumentProfile$a
net.minecraft.commands.arguments.GameProfileArgument$SelectorResult -> ed$b -> net.minecraft.commands.arguments.ArgumentProfile$b
    F:net.minecraft.commands.arguments.selector.EntitySelector selector -> a
net.minecraft.commands.arguments.ItemEnchantmentArgument -> ee -> net.minecraft.commands.arguments.ArgumentEnchantment
    F:java.util.Collection EXAMPLES -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_ENCHANTMENT -> a
    M:net.minecraft.commands.arguments.ArgumentEnchantment enchantment() -> a
    M:net.minecraft.world.item.enchantment.Enchantment getEnchantment(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.world.item.enchantment.Enchantment parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.MessageArgument -> ef -> net.minecraft.commands.arguments.ArgumentChat
    F:java.util.Collection EXAMPLES -> a
    F:org.slf4j.Logger LOGGER -> b
    M:net.minecraft.commands.arguments.ArgumentChat message() -> a
    M:net.minecraft.network.chat.IChatBaseComponent getMessage(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.commands.arguments.MessageArgument$ChatMessage getChatMessage(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    M:net.minecraft.commands.arguments.MessageArgument$Message parse(com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getPlainSignableComponent(net.minecraft.commands.arguments.MessageArgument$Message) -> a
    M:java.util.concurrent.CompletableFuture resolvePreview(net.minecraft.commands.CommandListenerWrapper,net.minecraft.commands.arguments.MessageArgument$Message) -> a
    M:java.lang.Class getValueType() -> b
    M:void logResolutionFailure(net.minecraft.commands.CommandListenerWrapper,java.util.concurrent.CompletableFuture) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getPlainSignableComponent(java.lang.Object) -> a
    M:java.util.concurrent.CompletableFuture resolvePreview(net.minecraft.commands.CommandListenerWrapper,java.lang.Object) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.MessageArgument$ChatMessage -> ef$a -> net.minecraft.commands.arguments.ArgumentChat$a
    F:java.lang.String plain -> a
    F:net.minecraft.network.chat.IChatBaseComponent formatted -> b
    F:net.minecraft.network.chat.MessageSignature signature -> c
    F:boolean signedPreview -> d
    M:java.util.concurrent.CompletableFuture resolve(net.minecraft.commands.CommandListenerWrapper) -> a
    M:net.minecraft.network.chat.PlayerChatMessage getSignedMessage(net.minecraft.server.network.FilteredText) -> a
    M:void verify(net.minecraft.commands.CommandListenerWrapper,net.minecraft.network.chat.PlayerChatMessage) -> a
    M:java.util.concurrent.CompletableFuture filterComponent(net.minecraft.commands.CommandListenerWrapper,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String plain() -> a
    M:net.minecraft.network.chat.IChatBaseComponent formatted() -> b
    M:net.minecraft.network.chat.MessageSignature signature() -> c
    M:boolean signedPreview() -> d
net.minecraft.commands.arguments.MessageArgument$Message -> ef$b -> net.minecraft.commands.arguments.ArgumentChat$b
    F:java.lang.String text -> a
    M:java.lang.String getText() -> a
    M:java.util.concurrent.CompletableFuture resolveDecoratedComponent(net.minecraft.commands.CommandListenerWrapper) -> a
    M:net.minecraft.network.chat.IChatBaseComponent resolveComponent(net.minecraft.commands.CommandListenerWrapper) -> b
    M:net.minecraft.network.chat.IChatBaseComponent toComponent(net.minecraft.commands.CommandListenerWrapper,boolean) -> a
    M:net.minecraft.commands.arguments.MessageArgument$Message parseText(com.mojang.brigadier.StringReader,boolean) -> a
net.minecraft.commands.arguments.MessageArgument$Part -> ef$c -> net.minecraft.commands.arguments.ArgumentChat$c
    F:int start -> a
    F:int end -> b
    F:net.minecraft.commands.arguments.selector.EntitySelector selector -> c
    M:int getStart() -> a
    M:int getEnd() -> b
    M:net.minecraft.commands.arguments.selector.EntitySelector getSelector() -> c
    M:net.minecraft.network.chat.IChatBaseComponent toComponent(net.minecraft.commands.CommandListenerWrapper) -> a
net.minecraft.commands.arguments.MobEffectArgument -> eg -> net.minecraft.commands.arguments.ArgumentMobEffect
    F:java.util.Collection EXAMPLES -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_EFFECT -> a
    M:net.minecraft.commands.arguments.ArgumentMobEffect effect() -> a
    M:net.minecraft.world.effect.MobEffectList getEffect(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.world.effect.MobEffectList parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.NbtPathArgument -> eh -> net.minecraft.commands.arguments.ArgumentNBTKey
    F:java.util.Collection EXAMPLES -> c
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID_NODE -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_NOTHING_FOUND -> b
    F:char INDEX_MATCH_START -> d
    F:char INDEX_MATCH_END -> e
    F:char KEY_MATCH_START -> f
    F:char KEY_MATCH_END -> g
    F:char QUOTED_KEY_START -> h
    M:net.minecraft.commands.arguments.ArgumentNBTKey nbtPath() -> a
    M:net.minecraft.commands.arguments.NbtPathArgument$NbtPath getPath(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.commands.arguments.NbtPathArgument$NbtPath parse(com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.commands.arguments.NbtPathArgument$Node parseNode(com.mojang.brigadier.StringReader,boolean) -> a
    M:net.minecraft.commands.arguments.NbtPathArgument$Node readObjectNode(com.mojang.brigadier.StringReader,java.lang.String) -> a
    M:java.lang.String readUnquotedName(com.mojang.brigadier.StringReader) -> b
    M:boolean isAllowedInUnquotedName(char) -> a
    M:java.util.function.Predicate createTagPredicate(net.minecraft.nbt.NBTTagCompound) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.NbtPathArgument$AllElementsNode -> eh$a -> net.minecraft.commands.arguments.ArgumentNBTKey$a
    F:net.minecraft.commands.arguments.NbtPathArgument$AllElementsNode INSTANCE -> a
    M:void getTag(net.minecraft.nbt.NBTBase,java.util.List) -> a
    M:void getOrCreateTag(net.minecraft.nbt.NBTBase,java.util.function.Supplier,java.util.List) -> a
    M:net.minecraft.nbt.NBTBase createPreferredParentTag() -> a
    M:int setTag(net.minecraft.nbt.NBTBase,java.util.function.Supplier) -> a
    M:int removeTag(net.minecraft.nbt.NBTBase) -> a
net.minecraft.commands.arguments.NbtPathArgument$CompoundChildNode -> eh$b -> net.minecraft.commands.arguments.ArgumentNBTKey$b
    F:java.lang.String name -> a
    M:void getTag(net.minecraft.nbt.NBTBase,java.util.List) -> a
    M:void getOrCreateTag(net.minecraft.nbt.NBTBase,java.util.function.Supplier,java.util.List) -> a
    M:net.minecraft.nbt.NBTBase createPreferredParentTag() -> a
    M:int setTag(net.minecraft.nbt.NBTBase,java.util.function.Supplier) -> a
    M:int removeTag(net.minecraft.nbt.NBTBase) -> a
net.minecraft.commands.arguments.NbtPathArgument$IndexedElementNode -> eh$c -> net.minecraft.commands.arguments.ArgumentNBTKey$c
    F:int index -> a
    M:void getTag(net.minecraft.nbt.NBTBase,java.util.List) -> a
    M:void getOrCreateTag(net.minecraft.nbt.NBTBase,java.util.function.Supplier,java.util.List) -> a
    M:net.minecraft.nbt.NBTBase createPreferredParentTag() -> a
    M:int setTag(net.minecraft.nbt.NBTBase,java.util.function.Supplier) -> a
    M:int removeTag(net.minecraft.nbt.NBTBase) -> a
net.minecraft.commands.arguments.NbtPathArgument$MatchElementNode -> eh$d -> net.minecraft.commands.arguments.ArgumentNBTKey$d
    F:net.minecraft.nbt.NBTTagCompound pattern -> a
    F:java.util.function.Predicate predicate -> b
    M:void getTag(net.minecraft.nbt.NBTBase,java.util.List) -> a
    M:void getOrCreateTag(net.minecraft.nbt.NBTBase,java.util.function.Supplier,java.util.List) -> a
    M:net.minecraft.nbt.NBTBase createPreferredParentTag() -> a
    M:int setTag(net.minecraft.nbt.NBTBase,java.util.function.Supplier) -> a
    M:int removeTag(net.minecraft.nbt.NBTBase) -> a
net.minecraft.commands.arguments.NbtPathArgument$MatchObjectNode -> eh$e -> net.minecraft.commands.arguments.ArgumentNBTKey$e
    F:java.lang.String name -> a
    F:net.minecraft.nbt.NBTTagCompound pattern -> b
    F:java.util.function.Predicate predicate -> c
    M:void getTag(net.minecraft.nbt.NBTBase,java.util.List) -> a
    M:void getOrCreateTag(net.minecraft.nbt.NBTBase,java.util.function.Supplier,java.util.List) -> a
    M:net.minecraft.nbt.NBTBase createPreferredParentTag() -> a
    M:int setTag(net.minecraft.nbt.NBTBase,java.util.function.Supplier) -> a
    M:int removeTag(net.minecraft.nbt.NBTBase) -> a
net.minecraft.commands.arguments.NbtPathArgument$MatchRootObjectNode -> eh$f -> net.minecraft.commands.arguments.ArgumentNBTKey$f
    F:java.util.function.Predicate predicate -> a
    M:void getTag(net.minecraft.nbt.NBTBase,java.util.List) -> a
    M:void getOrCreateTag(net.minecraft.nbt.NBTBase,java.util.function.Supplier,java.util.List) -> a
    M:net.minecraft.nbt.NBTBase createPreferredParentTag() -> a
    M:int setTag(net.minecraft.nbt.NBTBase,java.util.function.Supplier) -> a
    M:int removeTag(net.minecraft.nbt.NBTBase) -> a
net.minecraft.commands.arguments.NbtPathArgument$NbtPath -> eh$g -> net.minecraft.commands.arguments.ArgumentNBTKey$g
    F:java.lang.String original -> a
    F:it.unimi.dsi.fastutil.objects.Object2IntMap nodeToOriginalPosition -> b
    M:java.util.List get(net.minecraft.nbt.NBTBase) -> a
    M:int countMatching(net.minecraft.nbt.NBTBase) -> b
    M:java.util.List getOrCreateParents(net.minecraft.nbt.NBTBase) -> d
    M:java.util.List getOrCreate(net.minecraft.nbt.NBTBase,java.util.function.Supplier) -> a
    M:int apply(java.util.List,java.util.function.Function) -> a
    M:int set(net.minecraft.nbt.NBTBase,net.minecraft.nbt.NBTBase) -> a
    M:int set(net.minecraft.nbt.NBTBase,java.util.function.Supplier) -> b
    M:int remove(net.minecraft.nbt.NBTBase) -> c
    M:com.mojang.brigadier.exceptions.CommandSyntaxException createNotFoundException(net.minecraft.commands.arguments.NbtPathArgument$Node) -> a
net.minecraft.commands.arguments.NbtPathArgument$Node -> eh$h -> net.minecraft.commands.arguments.ArgumentNBTKey$h
    M:java.util.List get(java.util.List) -> a
    M:java.util.List getOrCreate(java.util.List,java.util.function.Supplier) -> a
    M:java.util.List collect(java.util.List,java.util.function.BiConsumer) -> a
net.minecraft.commands.arguments.NbtTagArgument -> ei -> net.minecraft.commands.arguments.ArgumentNBTBase
    F:java.util.Collection EXAMPLES -> a
    M:net.minecraft.commands.arguments.ArgumentNBTBase nbtTag() -> a
    M:net.minecraft.nbt.NBTBase getNbtTag(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.nbt.NBTBase parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.ObjectiveArgument -> ej -> net.minecraft.commands.arguments.ArgumentScoreboardObjective
    F:java.util.Collection EXAMPLES -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_OBJECTIVE_NOT_FOUND -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_OBJECTIVE_READ_ONLY -> c
    M:net.minecraft.commands.arguments.ArgumentScoreboardObjective objective() -> a
    M:net.minecraft.world.scores.ScoreboardObjective getObjective(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.world.scores.ScoreboardObjective getWritableObjective(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    M:java.lang.String parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.ObjectiveCriteriaArgument -> ek -> net.minecraft.commands.arguments.ArgumentScoreboardCriteria
    F:java.util.Collection EXAMPLES -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_VALUE -> a
    M:net.minecraft.commands.arguments.ArgumentScoreboardCriteria criteria() -> a
    M:net.minecraft.world.scores.criteria.IScoreboardCriteria getCriteria(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.world.scores.criteria.IScoreboardCriteria parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.String getName(net.minecraft.stats.StatisticWrapper,java.lang.Object) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.OperationArgument -> el -> net.minecraft.commands.arguments.ArgumentMathOperation
    F:java.util.Collection EXAMPLES -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID_OPERATION -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_DIVIDE_BY_ZERO -> c
    M:net.minecraft.commands.arguments.ArgumentMathOperation operation() -> a
    M:net.minecraft.commands.arguments.OperationArgument$Operation getOperation(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.commands.arguments.OperationArgument$Operation parse(com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.commands.arguments.OperationArgument$Operation getOperation(java.lang.String) -> a
    M:net.minecraft.commands.arguments.OperationArgument$SimpleOperation getSimpleOperation(java.lang.String) -> b
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.OperationArgument$Operation -> el$a -> net.minecraft.commands.arguments.ArgumentMathOperation$a
net.minecraft.commands.arguments.OperationArgument$SimpleOperation -> el$b -> net.minecraft.commands.arguments.ArgumentMathOperation$b
    M:void apply(net.minecraft.world.scores.ScoreboardScore,net.minecraft.world.scores.ScoreboardScore) -> apply
net.minecraft.commands.arguments.ParticleArgument -> em -> net.minecraft.commands.arguments.ArgumentParticle
    F:java.util.Collection EXAMPLES -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_PARTICLE -> a
    M:net.minecraft.commands.arguments.ArgumentParticle particle() -> a
    M:net.minecraft.core.particles.ParticleParam getParticle(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.core.particles.ParticleParam parse(com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.core.particles.ParticleParam readParticle(com.mojang.brigadier.StringReader) -> b
    M:net.minecraft.core.particles.ParticleParam readParticle(com.mojang.brigadier.StringReader,net.minecraft.core.particles.Particle) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.PreviewedArgument -> en -> net.minecraft.commands.arguments.PreviewedArgument
    M:java.util.concurrent.CompletableFuture resolvePreviewed(com.mojang.brigadier.tree.ArgumentCommandNode,com.mojang.brigadier.context.CommandContextBuilder) -> a
    M:boolean isPreviewed(com.mojang.brigadier.tree.CommandNode) -> a
    M:java.util.concurrent.CompletableFuture resolvePreview(com.mojang.brigadier.context.CommandContextBuilder,java.lang.String) -> a
net.minecraft.commands.arguments.RangeArgument -> eo -> net.minecraft.commands.arguments.ArgumentCriterionValue
    M:net.minecraft.commands.arguments.RangeArgument$Ints intRange() -> a
    M:net.minecraft.commands.arguments.RangeArgument$Floats floatRange() -> b
net.minecraft.commands.arguments.RangeArgument$Floats -> eo$a -> net.minecraft.commands.arguments.ArgumentCriterionValue$a
    F:java.util.Collection EXAMPLES -> a
    M:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange getRange(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.RangeArgument$Ints -> eo$b -> net.minecraft.commands.arguments.ArgumentCriterionValue$b
    F:java.util.Collection EXAMPLES -> a
    M:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange getRange(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.ResourceKeyArgument -> ep -> net.minecraft.commands.arguments.ResourceKeyArgument
    F:java.util.Collection EXAMPLES -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_ATTRIBUTE -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_FEATURE -> c
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_STRUCTURE -> d
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_TEMPLATE_POOL -> e
    F:net.minecraft.resources.ResourceKey registryKey -> f
    M:net.minecraft.commands.arguments.ResourceKeyArgument key(net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.resources.ResourceKey getRegistryType(com.mojang.brigadier.context.CommandContext,java.lang.String,net.minecraft.resources.ResourceKey,com.mojang.brigadier.exceptions.DynamicCommandExceptionType) -> a
    M:net.minecraft.core.IRegistry getRegistry(com.mojang.brigadier.context.CommandContext,net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.core.Holder getRegistryKeyType(com.mojang.brigadier.context.CommandContext,java.lang.String,net.minecraft.resources.ResourceKey,com.mojang.brigadier.exceptions.DynamicCommandExceptionType) -> b
    M:net.minecraft.world.entity.ai.attributes.AttributeBase getAttribute(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.core.Holder getConfiguredFeature(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    M:net.minecraft.core.Holder getStructure(com.mojang.brigadier.context.CommandContext,java.lang.String) -> c
    M:net.minecraft.core.Holder getStructureTemplatePool(com.mojang.brigadier.context.CommandContext,java.lang.String) -> d
    M:net.minecraft.resources.ResourceKey parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.ResourceKeyArgument$Info -> ep$a -> net.minecraft.commands.arguments.ResourceKeyArgument$a
    M:void serializeToNetwork(net.minecraft.commands.arguments.ResourceKeyArgument$Info$Template,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.commands.arguments.ResourceKeyArgument$Info$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:void serializeToJson(net.minecraft.commands.arguments.ResourceKeyArgument$Info$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.arguments.ResourceKeyArgument$Info$Template unpack(net.minecraft.commands.arguments.ResourceKeyArgument) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template unpack(com.mojang.brigadier.arguments.ArgumentType) -> a
    M:void serializeToJson(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> b
    M:void serializeToNetwork(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.commands.arguments.ResourceKeyArgument$Info$Template -> ep$a$a -> net.minecraft.commands.arguments.ResourceKeyArgument$a$a
    F:net.minecraft.resources.ResourceKey registryKey -> b
    M:net.minecraft.commands.arguments.ResourceKeyArgument instantiate(net.minecraft.commands.CommandBuildContext) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo type() -> a
    M:com.mojang.brigadier.arguments.ArgumentType instantiate(net.minecraft.commands.CommandBuildContext) -> b
net.minecraft.commands.arguments.ResourceLocationArgument -> eq -> net.minecraft.commands.arguments.ArgumentMinecraftKeyRegistered
    F:java.util.Collection EXAMPLES -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_ADVANCEMENT -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_RECIPE -> c
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_PREDICATE -> d
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_ITEM_MODIFIER -> e
    M:net.minecraft.commands.arguments.ArgumentMinecraftKeyRegistered id() -> a
    M:net.minecraft.advancements.Advancement getAdvancement(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.world.item.crafting.IRecipe getRecipe(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition getPredicate(com.mojang.brigadier.context.CommandContext,java.lang.String) -> c
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunction getItemModifier(com.mojang.brigadier.context.CommandContext,java.lang.String) -> d
    M:net.minecraft.resources.MinecraftKey getId(com.mojang.brigadier.context.CommandContext,java.lang.String) -> e
    M:net.minecraft.resources.MinecraftKey parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.ResourceOrTagLocationArgument -> er -> net.minecraft.commands.arguments.ResourceOrTagLocationArgument
    F:java.util.Collection EXAMPLES -> a
    F:net.minecraft.resources.ResourceKey registryKey -> b
    M:net.minecraft.commands.arguments.ResourceOrTagLocationArgument resourceOrTag(net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.commands.arguments.ResourceOrTagLocationArgument$Result getRegistryType(com.mojang.brigadier.context.CommandContext,java.lang.String,net.minecraft.resources.ResourceKey,com.mojang.brigadier.exceptions.DynamicCommandExceptionType) -> a
    M:net.minecraft.commands.arguments.ResourceOrTagLocationArgument$Result parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.ResourceOrTagLocationArgument$Info -> er$a -> net.minecraft.commands.arguments.ResourceOrTagLocationArgument$a
    M:void serializeToNetwork(net.minecraft.commands.arguments.ResourceOrTagLocationArgument$Info$Template,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.commands.arguments.ResourceOrTagLocationArgument$Info$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:void serializeToJson(net.minecraft.commands.arguments.ResourceOrTagLocationArgument$Info$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.arguments.ResourceOrTagLocationArgument$Info$Template unpack(net.minecraft.commands.arguments.ResourceOrTagLocationArgument) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template unpack(com.mojang.brigadier.arguments.ArgumentType) -> a
    M:void serializeToJson(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> b
    M:void serializeToNetwork(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.commands.arguments.ResourceOrTagLocationArgument$Info$Template -> er$a$a -> net.minecraft.commands.arguments.ResourceOrTagLocationArgument$a$a
    F:net.minecraft.resources.ResourceKey registryKey -> b
    M:net.minecraft.commands.arguments.ResourceOrTagLocationArgument instantiate(net.minecraft.commands.CommandBuildContext) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo type() -> a
    M:com.mojang.brigadier.arguments.ArgumentType instantiate(net.minecraft.commands.CommandBuildContext) -> b
net.minecraft.commands.arguments.ResourceOrTagLocationArgument$ResourceResult -> er$b -> net.minecraft.commands.arguments.ResourceOrTagLocationArgument$b
    F:net.minecraft.resources.ResourceKey key -> a
    M:com.mojang.datafixers.util.Either unwrap() -> a
    M:java.util.Optional cast(net.minecraft.resources.ResourceKey) -> a
    M:boolean test(net.minecraft.core.Holder) -> a
    M:java.lang.String asPrintable() -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.resources.ResourceKey key() -> c
    M:boolean test(java.lang.Object) -> test
net.minecraft.commands.arguments.ResourceOrTagLocationArgument$Result -> er$c -> net.minecraft.commands.arguments.ResourceOrTagLocationArgument$c
net.minecraft.commands.arguments.ResourceOrTagLocationArgument$TagResult -> er$d -> net.minecraft.commands.arguments.ResourceOrTagLocationArgument$d
    F:net.minecraft.tags.TagKey key -> a
    M:com.mojang.datafixers.util.Either unwrap() -> a
    M:java.util.Optional cast(net.minecraft.resources.ResourceKey) -> a
    M:boolean test(net.minecraft.core.Holder) -> a
    M:java.lang.String asPrintable() -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.tags.TagKey key() -> c
    M:boolean test(java.lang.Object) -> test
net.minecraft.commands.arguments.ScoreHolderArgument -> es -> net.minecraft.commands.arguments.ArgumentScoreholder
    F:com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_SCORE_HOLDERS -> a
    F:java.util.Collection EXAMPLES -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_RESULTS -> c
    F:boolean multiple -> d
    M:java.lang.String getName(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:java.util.Collection getNames(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    M:java.util.Collection getNamesWithDefaultWildcard(com.mojang.brigadier.context.CommandContext,java.lang.String) -> c
    M:java.util.Collection getNames(com.mojang.brigadier.context.CommandContext,java.lang.String,java.util.function.Supplier) -> a
    M:net.minecraft.commands.arguments.ArgumentScoreholder scoreHolder() -> a
    M:net.minecraft.commands.arguments.ArgumentScoreholder scoreHolders() -> b
    M:net.minecraft.commands.arguments.ScoreHolderArgument$Result parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.ScoreHolderArgument$Info -> es$a -> net.minecraft.commands.arguments.ArgumentScoreholder$a
    F:byte FLAG_MULTIPLE -> a
    M:void serializeToNetwork(net.minecraft.commands.arguments.ScoreHolderArgument$Info$Template,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.commands.arguments.ScoreHolderArgument$Info$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:void serializeToJson(net.minecraft.commands.arguments.ScoreHolderArgument$Info$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.arguments.ScoreHolderArgument$Info$Template unpack(net.minecraft.commands.arguments.ArgumentScoreholder) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template unpack(com.mojang.brigadier.arguments.ArgumentType) -> a
    M:void serializeToJson(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> b
    M:void serializeToNetwork(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.commands.arguments.ScoreHolderArgument$Info$Template -> es$a$a -> net.minecraft.commands.arguments.ArgumentScoreholder$a$a
    F:boolean multiple -> b
    M:net.minecraft.commands.arguments.ArgumentScoreholder instantiate(net.minecraft.commands.CommandBuildContext) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo type() -> a
    M:com.mojang.brigadier.arguments.ArgumentType instantiate(net.minecraft.commands.CommandBuildContext) -> b
net.minecraft.commands.arguments.ScoreHolderArgument$Result -> es$b -> net.minecraft.commands.arguments.ArgumentScoreholder$b
net.minecraft.commands.arguments.ScoreHolderArgument$SelectorResult -> es$c -> net.minecraft.commands.arguments.ArgumentScoreholder$c
    F:net.minecraft.commands.arguments.selector.EntitySelector selector -> a
net.minecraft.commands.arguments.ScoreboardSlotArgument -> et -> net.minecraft.commands.arguments.ArgumentScoreboardSlot
    F:java.util.Collection EXAMPLES -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_VALUE -> a
    M:net.minecraft.commands.arguments.ArgumentScoreboardSlot displaySlot() -> a
    M:int getDisplaySlot(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:java.lang.Integer parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.SignedArgument -> eu -> net.minecraft.commands.arguments.SignedArgument
net.minecraft.commands.arguments.SlotArgument -> ev -> net.minecraft.commands.arguments.ArgumentInventorySlot
    F:java.util.Collection EXAMPLES -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_SLOT -> b
    F:java.util.Map SLOTS -> c
    M:net.minecraft.commands.arguments.ArgumentInventorySlot slot() -> a
    M:int getSlot(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:java.lang.Integer parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.StringRepresentableArgument -> ew -> net.minecraft.commands.arguments.StringRepresentableArgument
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_VALUE -> a
    F:com.mojang.serialization.Codec codec -> b
    F:java.util.function.Supplier values -> c
    M:java.lang.Enum parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.TeamArgument -> ex -> net.minecraft.commands.arguments.ArgumentScoreboardTeam
    F:java.util.Collection EXAMPLES -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_TEAM_NOT_FOUND -> b
    M:net.minecraft.commands.arguments.ArgumentScoreboardTeam team() -> a
    M:net.minecraft.world.scores.ScoreboardTeam getTeam(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:java.lang.String parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.TemplateMirrorArgument -> ey -> net.minecraft.commands.arguments.TemplateMirrorArgument
    M:net.minecraft.commands.arguments.StringRepresentableArgument templateMirror() -> a
    M:net.minecraft.world.level.block.EnumBlockMirror getMirror(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
net.minecraft.commands.arguments.TemplateRotationArgument -> ez -> net.minecraft.commands.arguments.TemplateRotationArgument
    M:net.minecraft.commands.arguments.TemplateRotationArgument templateRotation() -> a
    M:net.minecraft.world.level.block.EnumBlockRotation getRotation(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
net.minecraft.commands.arguments.TimeArgument -> fa -> net.minecraft.commands.arguments.ArgumentTime
    F:java.util.Collection EXAMPLES -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID_UNIT -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_TICK_COUNT -> c
    F:it.unimi.dsi.fastutil.objects.Object2IntMap UNITS -> d
    M:net.minecraft.commands.arguments.ArgumentTime time() -> a
    M:java.lang.Integer parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.UuidArgument -> fb -> net.minecraft.commands.arguments.ArgumentUUID
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID_UUID -> a
    F:java.util.Collection EXAMPLES -> b
    F:java.util.regex.Pattern ALLOWED_CHARACTERS -> c
    M:java.util.UUID getUuid(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.commands.arguments.ArgumentUUID uuid() -> a
    M:java.util.UUID parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.blocks.BlockInput -> fc -> net.minecraft.commands.arguments.blocks.ArgumentTileLocation
    F:net.minecraft.world.level.block.state.IBlockData state -> a
    F:java.util.Set properties -> b
    F:net.minecraft.nbt.NBTTagCompound tag -> c
    M:net.minecraft.world.level.block.state.IBlockData getState() -> a
    M:java.util.Set getDefinedProperties() -> b
    M:boolean test(net.minecraft.world.level.block.state.pattern.ShapeDetectorBlock) -> a
    M:boolean test(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:boolean place(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,int) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.commands.arguments.blocks.BlockPredicateArgument -> fd -> net.minecraft.commands.arguments.blocks.ArgumentBlockPredicate
    F:java.util.Collection EXAMPLES -> a
    F:net.minecraft.core.HolderLookup blocks -> b
    M:net.minecraft.commands.arguments.blocks.ArgumentBlockPredicate blockPredicate(net.minecraft.commands.CommandBuildContext) -> a
    M:net.minecraft.commands.arguments.blocks.BlockPredicateArgument$Result parse(com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.commands.arguments.blocks.BlockPredicateArgument$Result parse(net.minecraft.core.HolderLookup,com.mojang.brigadier.StringReader) -> a
    M:java.util.function.Predicate getBlockPredicate(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.blocks.BlockPredicateArgument$BlockPredicate -> fd$a -> net.minecraft.commands.arguments.blocks.ArgumentBlockPredicate$a
    F:net.minecraft.world.level.block.state.IBlockData state -> a
    F:java.util.Set properties -> b
    F:net.minecraft.nbt.NBTTagCompound nbt -> c
    M:boolean test(net.minecraft.world.level.block.state.pattern.ShapeDetectorBlock) -> a
    M:boolean requiresNbt() -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.commands.arguments.blocks.BlockPredicateArgument$Result -> fd$b -> net.minecraft.commands.arguments.blocks.ArgumentBlockPredicate$b
net.minecraft.commands.arguments.blocks.BlockPredicateArgument$TagPredicate -> fd$c -> net.minecraft.commands.arguments.blocks.ArgumentBlockPredicate$c
    F:net.minecraft.core.HolderSet tag -> a
    F:net.minecraft.nbt.NBTTagCompound nbt -> b
    F:java.util.Map vagueProperties -> c
    M:boolean test(net.minecraft.world.level.block.state.pattern.ShapeDetectorBlock) -> a
    M:boolean requiresNbt() -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.commands.arguments.blocks.BlockStateArgument -> fe -> net.minecraft.commands.arguments.blocks.ArgumentTile
    F:java.util.Collection EXAMPLES -> a
    F:net.minecraft.core.HolderLookup blocks -> b
    M:net.minecraft.commands.arguments.blocks.ArgumentTile block(net.minecraft.commands.CommandBuildContext) -> a
    M:net.minecraft.commands.arguments.blocks.ArgumentTileLocation parse(com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.commands.arguments.blocks.ArgumentTileLocation getBlock(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.blocks.BlockStateParser -> ff -> net.minecraft.commands.arguments.blocks.ArgumentBlock
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_TAGS_ALLOWED -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_BLOCK -> b
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_UNKNOWN_PROPERTY -> c
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_DUPLICATE_PROPERTY -> d
    F:com.mojang.brigadier.exceptions.Dynamic3CommandExceptionType ERROR_INVALID_VALUE -> e
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_EXPECTED_VALUE -> f
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_EXPECTED_END_OF_PROPERTIES -> g
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_TAG -> h
    F:char SYNTAX_START_PROPERTIES -> i
    F:char SYNTAX_START_NBT -> j
    F:char SYNTAX_END_PROPERTIES -> k
    F:char SYNTAX_EQUALS -> l
    F:char SYNTAX_PROPERTY_SEPARATOR -> m
    F:char SYNTAX_TAG -> n
    F:java.util.function.Function SUGGEST_NOTHING -> o
    F:net.minecraft.core.HolderLookup blocks -> p
    F:com.mojang.brigadier.StringReader reader -> q
    F:boolean forTesting -> r
    F:boolean allowNbt -> s
    F:java.util.Map properties -> t
    F:java.util.Map vagueProperties -> u
    F:net.minecraft.resources.MinecraftKey id -> v
    F:net.minecraft.world.level.block.state.BlockStateList definition -> w
    F:net.minecraft.world.level.block.state.IBlockData state -> x
    F:net.minecraft.nbt.NBTTagCompound nbt -> y
    F:net.minecraft.core.HolderSet tag -> z
    M:net.minecraft.commands.arguments.blocks.BlockStateParser$BlockResult parseForBlock(net.minecraft.core.IRegistry,java.lang.String,boolean) -> a
    M:net.minecraft.commands.arguments.blocks.BlockStateParser$BlockResult parseForBlock(net.minecraft.core.IRegistry,com.mojang.brigadier.StringReader,boolean) -> a
    M:net.minecraft.commands.arguments.blocks.BlockStateParser$BlockResult parseForBlock(net.minecraft.core.HolderLookup,com.mojang.brigadier.StringReader,boolean) -> a
    M:com.mojang.datafixers.util.Either parseForTesting(net.minecraft.core.IRegistry,java.lang.String,boolean) -> b
    M:com.mojang.datafixers.util.Either parseForTesting(net.minecraft.core.IRegistry,com.mojang.brigadier.StringReader,boolean) -> b
    M:com.mojang.datafixers.util.Either parseForTesting(net.minecraft.core.HolderLookup,com.mojang.brigadier.StringReader,boolean) -> b
    M:java.util.concurrent.CompletableFuture fillSuggestions(net.minecraft.core.HolderLookup,com.mojang.brigadier.suggestion.SuggestionsBuilder,boolean,boolean) -> a
    M:void parse() -> a
    M:java.util.concurrent.CompletableFuture suggestPropertyNameOrEnd(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    M:java.util.concurrent.CompletableFuture suggestVaguePropertyNameOrEnd(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> b
    M:java.util.concurrent.CompletableFuture suggestPropertyName(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> c
    M:java.util.concurrent.CompletableFuture suggestVaguePropertyName(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> d
    M:java.util.concurrent.CompletableFuture suggestOpenNbt(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> e
    M:boolean hasBlockEntity() -> b
    M:java.util.concurrent.CompletableFuture suggestEquals(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> f
    M:java.util.concurrent.CompletableFuture suggestNextPropertyOrEnd(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> g
    M:com.mojang.brigadier.suggestion.SuggestionsBuilder addSuggestions(com.mojang.brigadier.suggestion.SuggestionsBuilder,net.minecraft.world.level.block.state.properties.IBlockState) -> a
    M:java.util.concurrent.CompletableFuture suggestVaguePropertyValue(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.lang.String) -> a
    M:java.util.concurrent.CompletableFuture suggestOpenVaguePropertiesOrNbt(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> h
    M:java.util.concurrent.CompletableFuture suggestOpenPropertiesOrNbt(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> i
    M:java.util.concurrent.CompletableFuture suggestTag(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> j
    M:java.util.concurrent.CompletableFuture suggestItem(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> k
    M:java.util.concurrent.CompletableFuture suggestBlockIdOrTag(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> l
    M:void readBlock() -> c
    M:void readTag() -> d
    M:void readProperties() -> e
    M:void readVagueProperties() -> f
    M:void readNbt() -> g
    M:void setValue(net.minecraft.world.level.block.state.properties.IBlockState,java.lang.String,int) -> a
    M:java.lang.String serialize(net.minecraft.world.level.block.state.IBlockData) -> a
    M:void appendProperty(java.lang.StringBuilder,net.minecraft.world.level.block.state.properties.IBlockState,java.lang.Comparable) -> a
net.minecraft.commands.arguments.blocks.BlockStateParser$BlockResult -> ff$a -> net.minecraft.commands.arguments.blocks.ArgumentBlock$a
    F:net.minecraft.world.level.block.state.IBlockData blockState -> a
    F:java.util.Map properties -> b
    F:net.minecraft.nbt.NBTTagCompound nbt -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.block.state.IBlockData blockState() -> a
    M:java.util.Map properties() -> b
    M:net.minecraft.nbt.NBTTagCompound nbt() -> c
net.minecraft.commands.arguments.blocks.BlockStateParser$TagResult -> ff$b -> net.minecraft.commands.arguments.blocks.ArgumentBlock$b
    F:net.minecraft.core.HolderSet tag -> a
    F:java.util.Map vagueProperties -> b
    F:net.minecraft.nbt.NBTTagCompound nbt -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.HolderSet tag() -> a
    M:java.util.Map vagueProperties() -> b
    M:net.minecraft.nbt.NBTTagCompound nbt() -> c
net.minecraft.commands.arguments.coordinates.BlockPosArgument -> fh -> net.minecraft.commands.arguments.coordinates.ArgumentPosition
    F:java.util.Collection EXAMPLES -> d
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_LOADED -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_OUT_OF_WORLD -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_OUT_OF_BOUNDS -> c
    M:net.minecraft.commands.arguments.coordinates.ArgumentPosition blockPos() -> a
    M:net.minecraft.core.BlockPosition getLoadedBlockPos(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.core.BlockPosition getSpawnablePos(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    M:net.minecraft.commands.arguments.coordinates.IVectorPosition parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.coordinates.ColumnPosArgument -> fi -> net.minecraft.commands.arguments.coordinates.ArgumentVec2I
    F:java.util.Collection EXAMPLES -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_COMPLETE -> a
    M:net.minecraft.commands.arguments.coordinates.ArgumentVec2I columnPos() -> a
    M:net.minecraft.server.level.BlockPosition2D getColumnPos(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.commands.arguments.coordinates.IVectorPosition parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.coordinates.Coordinates -> fj -> net.minecraft.commands.arguments.coordinates.IVectorPosition
    M:net.minecraft.core.BlockPosition getBlockPos(net.minecraft.commands.CommandListenerWrapper) -> c
net.minecraft.commands.arguments.coordinates.LocalCoordinates -> fk -> net.minecraft.commands.arguments.coordinates.ArgumentVectorPosition
    F:char PREFIX_LOCAL_COORDINATE -> a
    F:double left -> b
    F:double up -> c
    F:double forwards -> d
    M:net.minecraft.world.phys.Vec3D getPosition(net.minecraft.commands.CommandListenerWrapper) -> a
    M:net.minecraft.world.phys.Vec2F getRotation(net.minecraft.commands.CommandListenerWrapper) -> b
    M:boolean isXRelative() -> a
    M:boolean isYRelative() -> b
    M:boolean isZRelative() -> c
    M:net.minecraft.commands.arguments.coordinates.ArgumentVectorPosition parse(com.mojang.brigadier.StringReader) -> a
    M:double readDouble(com.mojang.brigadier.StringReader,int) -> a
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.commands.arguments.coordinates.RotationArgument -> fl -> net.minecraft.commands.arguments.coordinates.ArgumentRotation
    F:java.util.Collection EXAMPLES -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_COMPLETE -> a
    M:net.minecraft.commands.arguments.coordinates.ArgumentRotation rotation() -> a
    M:net.minecraft.commands.arguments.coordinates.IVectorPosition getRotation(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.commands.arguments.coordinates.IVectorPosition parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.coordinates.SwizzleArgument -> fm -> net.minecraft.commands.arguments.coordinates.ArgumentRotationAxis
    F:java.util.Collection EXAMPLES -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID -> b
    M:net.minecraft.commands.arguments.coordinates.ArgumentRotationAxis swizzle() -> a
    M:java.util.EnumSet getSwizzle(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:java.util.EnumSet parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.coordinates.Vec2Argument -> fn -> net.minecraft.commands.arguments.coordinates.ArgumentVec2
    F:java.util.Collection EXAMPLES -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_COMPLETE -> a
    F:boolean centerCorrect -> c
    M:net.minecraft.commands.arguments.coordinates.ArgumentVec2 vec2() -> a
    M:net.minecraft.commands.arguments.coordinates.ArgumentVec2 vec2(boolean) -> a
    M:net.minecraft.world.phys.Vec2F getVec2(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.commands.arguments.coordinates.IVectorPosition parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.coordinates.Vec3Argument -> fo -> net.minecraft.commands.arguments.coordinates.ArgumentVec3
    F:java.util.Collection EXAMPLES -> c
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_COMPLETE -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_MIXED_TYPE -> b
    F:boolean centerCorrect -> d
    M:net.minecraft.commands.arguments.coordinates.ArgumentVec3 vec3() -> a
    M:net.minecraft.commands.arguments.coordinates.ArgumentVec3 vec3(boolean) -> a
    M:net.minecraft.world.phys.Vec3D getVec3(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.commands.arguments.coordinates.IVectorPosition getCoordinates(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    M:net.minecraft.commands.arguments.coordinates.IVectorPosition parse(com.mojang.brigadier.StringReader) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.coordinates.WorldCoordinate -> fp -> net.minecraft.commands.arguments.coordinates.ArgumentParserPosition
    F:char PREFIX_RELATIVE -> c
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_EXPECTED_DOUBLE -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_EXPECTED_INT -> b
    F:boolean relative -> d
    F:double value -> e
    M:double get(double) -> a
    M:net.minecraft.commands.arguments.coordinates.ArgumentParserPosition parseDouble(com.mojang.brigadier.StringReader,boolean) -> a
    M:net.minecraft.commands.arguments.coordinates.ArgumentParserPosition parseInt(com.mojang.brigadier.StringReader) -> a
    M:boolean isRelative(com.mojang.brigadier.StringReader) -> b
    M:boolean equals(java.lang.Object) -> equals
    M:boolean isRelative() -> a
net.minecraft.commands.arguments.coordinates.WorldCoordinates -> fq -> net.minecraft.commands.arguments.coordinates.VectorPosition
    F:net.minecraft.commands.arguments.coordinates.ArgumentParserPosition x -> a
    F:net.minecraft.commands.arguments.coordinates.ArgumentParserPosition y -> b
    F:net.minecraft.commands.arguments.coordinates.ArgumentParserPosition z -> c
    M:net.minecraft.world.phys.Vec3D getPosition(net.minecraft.commands.CommandListenerWrapper) -> a
    M:net.minecraft.world.phys.Vec2F getRotation(net.minecraft.commands.CommandListenerWrapper) -> b
    M:boolean isXRelative() -> a
    M:boolean isYRelative() -> b
    M:boolean isZRelative() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.commands.arguments.coordinates.VectorPosition parseInt(com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.commands.arguments.coordinates.VectorPosition parseDouble(com.mojang.brigadier.StringReader,boolean) -> a
    M:net.minecraft.commands.arguments.coordinates.VectorPosition absolute(double,double,double) -> a
    M:net.minecraft.commands.arguments.coordinates.VectorPosition absolute(net.minecraft.world.phys.Vec2F) -> a
    M:net.minecraft.commands.arguments.coordinates.VectorPosition current() -> d
net.minecraft.commands.arguments.item.FunctionArgument -> fs -> net.minecraft.commands.arguments.item.ArgumentTag
    F:java.util.Collection EXAMPLES -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_TAG -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_FUNCTION -> c
    M:net.minecraft.commands.arguments.item.ArgumentTag functions() -> a
    M:net.minecraft.commands.arguments.item.FunctionArgument$Result parse(com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.commands.CustomFunction getFunction(com.mojang.brigadier.context.CommandContext,net.minecraft.resources.MinecraftKey) -> a
    M:java.util.Collection getFunctionTag(com.mojang.brigadier.context.CommandContext,net.minecraft.resources.MinecraftKey) -> b
    M:java.util.Collection getFunctions(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:com.mojang.datafixers.util.Pair getFunctionOrTag(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    M:java.util.Collection create(com.mojang.brigadier.context.CommandContext) -> a
    M:com.mojang.datafixers.util.Pair unwrap(com.mojang.brigadier.context.CommandContext) -> b
    M:java.util.Collection create(com.mojang.brigadier.context.CommandContext) -> a
    M:com.mojang.datafixers.util.Pair unwrap(com.mojang.brigadier.context.CommandContext) -> b
net.minecraft.commands.arguments.item.FunctionArgument$Result -> fs$a -> net.minecraft.commands.arguments.item.ArgumentTag$a
net.minecraft.commands.arguments.item.ItemArgument -> ft -> net.minecraft.commands.arguments.item.ArgumentItemStack
    F:java.util.Collection EXAMPLES -> a
    F:net.minecraft.core.HolderLookup items -> b
    M:net.minecraft.commands.arguments.item.ArgumentItemStack item(net.minecraft.commands.CommandBuildContext) -> a
    M:net.minecraft.commands.arguments.item.ArgumentPredicateItemStack parse(com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.commands.arguments.item.ArgumentPredicateItemStack getItem(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.item.ItemInput -> fu -> net.minecraft.commands.arguments.item.ArgumentPredicateItemStack
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_STACK_TOO_BIG -> a
    F:net.minecraft.core.Holder item -> b
    F:net.minecraft.nbt.NBTTagCompound tag -> c
    M:net.minecraft.world.item.Item getItem() -> a
    M:boolean test(net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack createItemStack(int,boolean) -> a
    M:java.lang.String serialize() -> b
    M:java.lang.String getItemName() -> c
    M:boolean test(java.lang.Object) -> test
net.minecraft.commands.arguments.item.ItemParser -> fv -> net.minecraft.commands.arguments.item.ArgumentParserItemStack
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_TAGS_ALLOWED -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_ITEM -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_TAG -> c
    F:char SYNTAX_START_NBT -> d
    F:char SYNTAX_TAG -> e
    F:java.util.function.Function SUGGEST_NOTHING -> f
    F:net.minecraft.core.HolderLookup items -> g
    F:com.mojang.brigadier.StringReader reader -> h
    F:boolean allowTags -> i
    F:com.mojang.datafixers.util.Either result -> j
    F:net.minecraft.nbt.NBTTagCompound nbt -> k
    F:java.util.function.Function suggestions -> l
    M:net.minecraft.commands.arguments.item.ItemParser$ItemResult parseForItem(net.minecraft.core.HolderLookup,com.mojang.brigadier.StringReader) -> a
    M:com.mojang.datafixers.util.Either parseForTesting(net.minecraft.core.HolderLookup,com.mojang.brigadier.StringReader) -> b
    M:java.util.concurrent.CompletableFuture fillSuggestions(net.minecraft.core.HolderLookup,com.mojang.brigadier.suggestion.SuggestionsBuilder,boolean) -> a
    M:void readItem() -> a
    M:void readTag() -> b
    M:void readNbt() -> c
    M:void parse() -> d
    M:java.util.concurrent.CompletableFuture suggestOpenNbt(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    M:java.util.concurrent.CompletableFuture suggestTag(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> b
    M:java.util.concurrent.CompletableFuture suggestItem(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> c
    M:java.util.concurrent.CompletableFuture suggestItemIdOrTag(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> d
net.minecraft.commands.arguments.item.ItemParser$ItemResult -> fv$a -> net.minecraft.commands.arguments.item.ArgumentParserItemStack$a
    F:net.minecraft.core.Holder item -> a
    F:net.minecraft.nbt.NBTTagCompound nbt -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.Holder item() -> a
    M:net.minecraft.nbt.NBTTagCompound nbt() -> b
net.minecraft.commands.arguments.item.ItemParser$TagResult -> fv$b -> net.minecraft.commands.arguments.item.ArgumentParserItemStack$b
    F:net.minecraft.core.HolderSet tag -> a
    F:net.minecraft.nbt.NBTTagCompound nbt -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.HolderSet tag() -> a
    M:net.minecraft.nbt.NBTTagCompound nbt() -> b
net.minecraft.commands.arguments.item.ItemPredicateArgument -> fw -> net.minecraft.commands.arguments.item.ArgumentItemPredicate
    F:java.util.Collection EXAMPLES -> a
    F:net.minecraft.core.HolderLookup items -> b
    M:net.minecraft.commands.arguments.item.ArgumentItemPredicate itemPredicate(net.minecraft.commands.CommandBuildContext) -> a
    M:net.minecraft.commands.arguments.item.ItemPredicateArgument$Result parse(com.mojang.brigadier.StringReader) -> a
    M:java.util.function.Predicate getItemPredicate(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:net.minecraft.commands.arguments.item.ItemPredicateArgument$Result createResult(java.util.function.Predicate,net.minecraft.nbt.NBTTagCompound) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.arguments.item.ItemPredicateArgument$Result -> fw$a -> net.minecraft.commands.arguments.item.ArgumentItemPredicate$a
net.minecraft.commands.arguments.selector.EntitySelector -> fz -> net.minecraft.commands.arguments.selector.EntitySelector
    F:int INFINITE -> a
    F:net.minecraft.world.level.entity.EntityTypeTest ANY_TYPE -> b
    F:int maxResults -> c
    F:boolean includesEntities -> d
    F:boolean worldLimited -> e
    F:java.util.function.Predicate predicate -> f
    F:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange range -> g
    F:java.util.function.Function position -> h
    F:net.minecraft.world.phys.AxisAlignedBB aabb -> i
    F:java.util.function.BiConsumer order -> j
    F:boolean currentEntity -> k
    F:java.lang.String playerName -> l
    F:java.util.UUID entityUUID -> m
    F:net.minecraft.world.level.entity.EntityTypeTest type -> n
    F:boolean usesSelector -> o
    M:int getMaxResults() -> a
    M:boolean includesEntities() -> b
    M:boolean isSelfSelector() -> c
    M:boolean isWorldLimited() -> d
    M:boolean usesSelector() -> e
    M:void checkPermissions(net.minecraft.commands.CommandListenerWrapper) -> e
    M:net.minecraft.world.entity.Entity findSingleEntity(net.minecraft.commands.CommandListenerWrapper) -> a
    M:java.util.List findEntities(net.minecraft.commands.CommandListenerWrapper) -> b
    M:void addEntities(java.util.List,net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D,java.util.function.Predicate) -> a
    M:net.minecraft.server.level.EntityPlayer findSinglePlayer(net.minecraft.commands.CommandListenerWrapper) -> c
    M:java.util.List findPlayers(net.minecraft.commands.CommandListenerWrapper) -> d
    M:java.util.function.Predicate getPredicate(net.minecraft.world.phys.Vec3D) -> a
    M:java.util.List sortAndLimit(net.minecraft.world.phys.Vec3D,java.util.List) -> a
    M:net.minecraft.network.chat.IChatBaseComponent joinNames(java.util.List) -> a
    M:net.minecraft.world.entity.Entity tryCast(net.minecraft.world.entity.Entity) -> a
    M:java.lang.Class getBaseClass() -> a
    M:java.lang.Object tryCast(java.lang.Object) -> a
net.minecraft.commands.arguments.selector.EntitySelectorParser -> ga -> net.minecraft.commands.arguments.selector.ArgumentParserSelector
    F:char SYNTAX_SELECTOR_START -> a
    F:char SYNTAX_OPTIONS_START -> p
    F:char SYNTAX_OPTIONS_END -> q
    F:char SYNTAX_OPTIONS_KEY_VALUE_SEPARATOR -> b
    F:char SYNTAX_OPTIONS_SEPARATOR -> r
    F:char SYNTAX_NOT -> c
    F:char SYNTAX_TAG -> d
    F:char SELECTOR_NEAREST_PLAYER -> s
    F:char SELECTOR_ALL_PLAYERS -> t
    F:char SELECTOR_RANDOM_PLAYERS -> u
    F:char SELECTOR_CURRENT_ENTITY -> v
    F:char SELECTOR_ALL_ENTITIES -> w
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID_NAME_OR_UUID -> e
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_SELECTOR_TYPE -> f
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SELECTORS_NOT_ALLOWED -> g
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_MISSING_SELECTOR_TYPE -> h
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_EXPECTED_END_OF_OPTIONS -> i
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_EXPECTED_OPTION_VALUE -> j
    F:java.util.function.BiConsumer ORDER_ARBITRARY -> k
    F:java.util.function.BiConsumer ORDER_NEAREST -> l
    F:java.util.function.BiConsumer ORDER_FURTHEST -> m
    F:java.util.function.BiConsumer ORDER_RANDOM -> n
    F:java.util.function.BiFunction SUGGEST_NOTHING -> o
    F:com.mojang.brigadier.StringReader reader -> x
    F:boolean allowSelectors -> y
    F:int maxResults -> z
    F:boolean hasTeamNotEquals -> aa
    F:net.minecraft.world.entity.EntityTypes type -> ab
    F:boolean typeInverse -> ac
    F:boolean hasScores -> ad
    F:boolean hasAdvancements -> ae
    F:boolean usesSelectors -> af
    M:net.minecraft.commands.arguments.selector.EntitySelector getSelector() -> a
    M:net.minecraft.world.phys.AxisAlignedBB createAabb(double,double,double) -> a
    M:java.util.function.Predicate createRotationPredicate(net.minecraft.advancements.critereon.CriterionConditionRange,java.util.function.ToDoubleFunction) -> a
    M:void parseSelector() -> b
    M:void parseNameOrUUID() -> c
    M:void parseOptions() -> d
    M:boolean shouldInvertValue() -> e
    M:boolean isTag() -> f
    M:com.mojang.brigadier.StringReader getReader() -> g
    M:void addPredicate(java.util.function.Predicate) -> a
    M:void setWorldLimited() -> h
    M:net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange getDistance() -> i
    M:void setDistance(net.minecraft.advancements.critereon.CriterionConditionValue$DoubleRange) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange getLevel() -> j
    M:void setLevel(net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionRange getRotX() -> k
    M:void setRotX(net.minecraft.advancements.critereon.CriterionConditionRange) -> a
    M:net.minecraft.advancements.critereon.CriterionConditionRange getRotY() -> l
    M:void setRotY(net.minecraft.advancements.critereon.CriterionConditionRange) -> b
    M:java.lang.Double getX() -> m
    M:java.lang.Double getY() -> n
    M:java.lang.Double getZ() -> o
    M:void setX(double) -> a
    M:void setY(double) -> b
    M:void setZ(double) -> c
    M:void setDeltaX(double) -> d
    M:void setDeltaY(double) -> e
    M:void setDeltaZ(double) -> f
    M:java.lang.Double getDeltaX() -> p
    M:java.lang.Double getDeltaY() -> q
    M:java.lang.Double getDeltaZ() -> r
    M:void setMaxResults(int) -> a
    M:void setIncludesEntities(boolean) -> a
    M:java.util.function.BiConsumer getOrder() -> s
    M:void setOrder(java.util.function.BiConsumer) -> a
    M:net.minecraft.commands.arguments.selector.EntitySelector parse() -> t
    M:void fillSelectorSuggestions(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    M:java.util.concurrent.CompletableFuture suggestNameOrSelector(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> b
    M:java.util.concurrent.CompletableFuture suggestName(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> c
    M:java.util.concurrent.CompletableFuture suggestSelector(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> d
    M:java.util.concurrent.CompletableFuture suggestOpenOptions(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> e
    M:java.util.concurrent.CompletableFuture suggestOptionsKeyOrClose(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> f
    M:java.util.concurrent.CompletableFuture suggestOptionsKey(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> g
    M:java.util.concurrent.CompletableFuture suggestOptionsNextOrClose(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> h
    M:java.util.concurrent.CompletableFuture suggestEquals(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> i
    M:boolean isCurrentEntity() -> u
    M:void setSuggestions(java.util.function.BiFunction) -> a
    M:java.util.concurrent.CompletableFuture fillSuggestions(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> a
    M:boolean hasNameEquals() -> v
    M:void setHasNameEquals(boolean) -> b
    M:boolean hasNameNotEquals() -> w
    M:void setHasNameNotEquals(boolean) -> c
    M:boolean isLimited() -> x
    M:void setLimited(boolean) -> d
    M:boolean isSorted() -> y
    M:void setSorted(boolean) -> e
    M:boolean hasGamemodeEquals() -> z
    M:void setHasGamemodeEquals(boolean) -> f
    M:void setHasGamemodeNotEquals(boolean) -> g
    M:void setHasTeamEquals(boolean) -> h
    M:void setHasTeamNotEquals(boolean) -> i
    M:void limitToType(net.minecraft.world.entity.EntityTypes) -> a
    M:void setHasScores(boolean) -> j
    M:void setHasAdvancements(boolean) -> k
net.minecraft.commands.arguments.selector.options.EntitySelectorOptions -> gb -> net.minecraft.commands.arguments.selector.options.PlayerSelector
    F:java.util.Map OPTIONS -> i
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_OPTION -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INAPPLICABLE_OPTION -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_RANGE_NEGATIVE -> c
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_LEVEL_NEGATIVE -> d
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_LIMIT_TOO_SMALL -> e
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_SORT_UNKNOWN -> f
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_GAME_MODE_INVALID -> g
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_ENTITY_TYPE_INVALID -> h
    M:void register(java.lang.String,net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Modifier,java.util.function.Predicate,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void bootStrap() -> a
    M:net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Modifier get(net.minecraft.commands.arguments.selector.ArgumentParserSelector,java.lang.String,int) -> a
    M:void suggestNames(net.minecraft.commands.arguments.selector.ArgumentParserSelector,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Modifier -> gb$a -> net.minecraft.commands.arguments.selector.options.PlayerSelector$a
net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Option -> gb$b -> net.minecraft.commands.arguments.selector.options.PlayerSelector$b
    F:net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Modifier modifier -> a
    F:java.util.function.Predicate predicate -> b
    F:net.minecraft.network.chat.IChatBaseComponent description -> c
net.minecraft.commands.synchronization.ArgumentTypeInfo -> gf -> net.minecraft.commands.synchronization.ArgumentTypeInfo
net.minecraft.commands.synchronization.ArgumentTypeInfo$Template -> gf$a -> net.minecraft.commands.synchronization.ArgumentTypeInfo$a
net.minecraft.commands.synchronization.ArgumentTypeInfos -> gg -> net.minecraft.commands.synchronization.ArgumentTypeInfos
    F:java.util.Map BY_CLASS -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo register(net.minecraft.core.IRegistry,java.lang.String,java.lang.Class,net.minecraft.commands.synchronization.ArgumentTypeInfo) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo bootstrap(net.minecraft.core.IRegistry) -> a
    M:java.lang.Class fixClassType(java.lang.Class) -> b
    M:boolean isClassRecognized(java.lang.Class) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo byClass(com.mojang.brigadier.arguments.ArgumentType) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template unpack(com.mojang.brigadier.arguments.ArgumentType) -> b
net.minecraft.commands.synchronization.ArgumentUtils -> gh -> net.minecraft.commands.synchronization.ArgumentUtils
    F:org.slf4j.Logger LOGGER -> a
    F:byte NUMBER_FLAG_MIN -> b
    F:byte NUMBER_FLAG_MAX -> c
    M:int createNumberFlags(boolean,boolean) -> a
    M:boolean numberHasMin(byte) -> a
    M:boolean numberHasMax(byte) -> b
    M:void serializeCap(com.google.gson.JsonObject,net.minecraft.commands.synchronization.ArgumentTypeInfo$Template) -> a
    M:void serializeCap(com.google.gson.JsonObject,net.minecraft.commands.synchronization.ArgumentTypeInfo,net.minecraft.commands.synchronization.ArgumentTypeInfo$Template) -> a
    M:void serializeArgumentToJson(com.google.gson.JsonObject,com.mojang.brigadier.arguments.ArgumentType) -> a
    M:com.google.gson.JsonObject serializeNodeToJson(com.mojang.brigadier.CommandDispatcher,com.mojang.brigadier.tree.CommandNode) -> a
    M:java.util.Set findUsedArgumentTypes(com.mojang.brigadier.tree.CommandNode) -> a
    M:void findUsedArgumentTypes(com.mojang.brigadier.tree.CommandNode,java.util.Set,java.util.Set) -> a
net.minecraft.commands.synchronization.SingletonArgumentInfo -> gi -> net.minecraft.commands.synchronization.SingletonArgumentInfo
    F:net.minecraft.commands.synchronization.SingletonArgumentInfo$Template template -> a
    M:net.minecraft.commands.synchronization.SingletonArgumentInfo contextFree(java.util.function.Supplier) -> a
    M:net.minecraft.commands.synchronization.SingletonArgumentInfo contextAware(java.util.function.Function) -> a
    M:void serializeToNetwork(net.minecraft.commands.synchronization.SingletonArgumentInfo$Template,net.minecraft.network.PacketDataSerializer) -> a
    M:void serializeToJson(net.minecraft.commands.synchronization.SingletonArgumentInfo$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.synchronization.SingletonArgumentInfo$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.commands.synchronization.SingletonArgumentInfo$Template unpack(com.mojang.brigadier.arguments.ArgumentType) -> b
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template unpack(com.mojang.brigadier.arguments.ArgumentType) -> a
    M:void serializeToJson(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> b
    M:void serializeToNetwork(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.commands.synchronization.SingletonArgumentInfo$Template -> gi$a -> net.minecraft.commands.synchronization.SingletonArgumentInfo$a
    F:java.util.function.Function constructor -> b
    M:com.mojang.brigadier.arguments.ArgumentType instantiate(net.minecraft.commands.CommandBuildContext) -> b
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo type() -> a
net.minecraft.commands.synchronization.SuggestionProviders -> gj -> net.minecraft.commands.synchronization.CompletionProviders
    F:java.util.Map PROVIDERS_BY_NAME -> e
    F:net.minecraft.resources.MinecraftKey DEFAULT_NAME -> f
    F:com.mojang.brigadier.suggestion.SuggestionProvider ASK_SERVER -> a
    F:com.mojang.brigadier.suggestion.SuggestionProvider ALL_RECIPES -> b
    F:com.mojang.brigadier.suggestion.SuggestionProvider AVAILABLE_SOUNDS -> c
    F:com.mojang.brigadier.suggestion.SuggestionProvider SUMMONABLE_ENTITIES -> d
    M:com.mojang.brigadier.suggestion.SuggestionProvider register(net.minecraft.resources.MinecraftKey,com.mojang.brigadier.suggestion.SuggestionProvider) -> a
    M:com.mojang.brigadier.suggestion.SuggestionProvider getProvider(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.resources.MinecraftKey getName(com.mojang.brigadier.suggestion.SuggestionProvider) -> a
    M:com.mojang.brigadier.suggestion.SuggestionProvider safelySwap(com.mojang.brigadier.suggestion.SuggestionProvider) -> b
net.minecraft.commands.synchronization.SuggestionProviders$Wrapper -> gj$a -> net.minecraft.commands.synchronization.CompletionProviders$a
    F:com.mojang.brigadier.suggestion.SuggestionProvider delegate -> a
    F:net.minecraft.resources.MinecraftKey name -> b
net.minecraft.commands.synchronization.brigadier.DoubleArgumentInfo -> gk -> net.minecraft.commands.synchronization.brigadier.DoubleArgumentInfo
    M:void serializeToNetwork(net.minecraft.commands.synchronization.brigadier.DoubleArgumentInfo$Template,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.commands.synchronization.brigadier.DoubleArgumentInfo$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:void serializeToJson(net.minecraft.commands.synchronization.brigadier.DoubleArgumentInfo$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.synchronization.brigadier.DoubleArgumentInfo$Template unpack(com.mojang.brigadier.arguments.DoubleArgumentType) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template unpack(com.mojang.brigadier.arguments.ArgumentType) -> a
    M:void serializeToJson(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> b
    M:void serializeToNetwork(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.commands.synchronization.brigadier.DoubleArgumentInfo$Template -> gk$a -> net.minecraft.commands.synchronization.brigadier.DoubleArgumentInfo$a
    F:double min -> b
    F:double max -> c
    M:com.mojang.brigadier.arguments.DoubleArgumentType instantiate(net.minecraft.commands.CommandBuildContext) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo type() -> a
    M:com.mojang.brigadier.arguments.ArgumentType instantiate(net.minecraft.commands.CommandBuildContext) -> b
net.minecraft.commands.synchronization.brigadier.FloatArgumentInfo -> gl -> net.minecraft.commands.synchronization.brigadier.FloatArgumentInfo
    M:void serializeToNetwork(net.minecraft.commands.synchronization.brigadier.FloatArgumentInfo$Template,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.commands.synchronization.brigadier.FloatArgumentInfo$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:void serializeToJson(net.minecraft.commands.synchronization.brigadier.FloatArgumentInfo$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.synchronization.brigadier.FloatArgumentInfo$Template unpack(com.mojang.brigadier.arguments.FloatArgumentType) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template unpack(com.mojang.brigadier.arguments.ArgumentType) -> a
    M:void serializeToJson(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> b
    M:void serializeToNetwork(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.commands.synchronization.brigadier.FloatArgumentInfo$Template -> gl$a -> net.minecraft.commands.synchronization.brigadier.FloatArgumentInfo$a
    F:float min -> b
    F:float max -> c
    M:com.mojang.brigadier.arguments.FloatArgumentType instantiate(net.minecraft.commands.CommandBuildContext) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo type() -> a
    M:com.mojang.brigadier.arguments.ArgumentType instantiate(net.minecraft.commands.CommandBuildContext) -> b
net.minecraft.commands.synchronization.brigadier.IntegerArgumentInfo -> gm -> net.minecraft.commands.synchronization.brigadier.IntegerArgumentInfo
    M:void serializeToNetwork(net.minecraft.commands.synchronization.brigadier.IntegerArgumentInfo$Template,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.commands.synchronization.brigadier.IntegerArgumentInfo$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:void serializeToJson(net.minecraft.commands.synchronization.brigadier.IntegerArgumentInfo$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.synchronization.brigadier.IntegerArgumentInfo$Template unpack(com.mojang.brigadier.arguments.IntegerArgumentType) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template unpack(com.mojang.brigadier.arguments.ArgumentType) -> a
    M:void serializeToJson(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> b
    M:void serializeToNetwork(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.commands.synchronization.brigadier.IntegerArgumentInfo$Template -> gm$a -> net.minecraft.commands.synchronization.brigadier.IntegerArgumentInfo$a
    F:int min -> b
    F:int max -> c
    M:com.mojang.brigadier.arguments.IntegerArgumentType instantiate(net.minecraft.commands.CommandBuildContext) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo type() -> a
    M:com.mojang.brigadier.arguments.ArgumentType instantiate(net.minecraft.commands.CommandBuildContext) -> b
net.minecraft.commands.synchronization.brigadier.LongArgumentInfo -> gn -> net.minecraft.commands.synchronization.brigadier.LongArgumentInfo
    M:void serializeToNetwork(net.minecraft.commands.synchronization.brigadier.LongArgumentInfo$Template,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.commands.synchronization.brigadier.LongArgumentInfo$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:void serializeToJson(net.minecraft.commands.synchronization.brigadier.LongArgumentInfo$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.synchronization.brigadier.LongArgumentInfo$Template unpack(com.mojang.brigadier.arguments.LongArgumentType) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template unpack(com.mojang.brigadier.arguments.ArgumentType) -> a
    M:void serializeToJson(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> b
    M:void serializeToNetwork(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.commands.synchronization.brigadier.LongArgumentInfo$Template -> gn$a -> net.minecraft.commands.synchronization.brigadier.LongArgumentInfo$a
    F:long min -> b
    F:long max -> c
    M:com.mojang.brigadier.arguments.LongArgumentType instantiate(net.minecraft.commands.CommandBuildContext) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo type() -> a
    M:com.mojang.brigadier.arguments.ArgumentType instantiate(net.minecraft.commands.CommandBuildContext) -> b
net.minecraft.commands.synchronization.brigadier.StringArgumentSerializer -> go -> net.minecraft.commands.synchronization.brigadier.ArgumentSerializerString
    M:void serializeToNetwork(net.minecraft.commands.synchronization.brigadier.StringArgumentSerializer$Template,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.commands.synchronization.brigadier.StringArgumentSerializer$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:void serializeToJson(net.minecraft.commands.synchronization.brigadier.StringArgumentSerializer$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.synchronization.brigadier.StringArgumentSerializer$Template unpack(com.mojang.brigadier.arguments.StringArgumentType) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template unpack(com.mojang.brigadier.arguments.ArgumentType) -> a
    M:void serializeToJson(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,com.google.gson.JsonObject) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template deserializeFromNetwork(net.minecraft.network.PacketDataSerializer) -> b
    M:void serializeToNetwork(net.minecraft.commands.synchronization.ArgumentTypeInfo$Template,net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.commands.synchronization.brigadier.StringArgumentSerializer$Template -> go$a -> net.minecraft.commands.synchronization.brigadier.ArgumentSerializerString$a
    F:com.mojang.brigadier.arguments.StringArgumentType$StringType type -> b
    M:com.mojang.brigadier.arguments.StringArgumentType instantiate(net.minecraft.commands.CommandBuildContext) -> a
    M:net.minecraft.commands.synchronization.ArgumentTypeInfo type() -> a
    M:com.mojang.brigadier.arguments.ArgumentType instantiate(net.minecraft.commands.CommandBuildContext) -> b
net.minecraft.core.AxisCycle -> gr -> net.minecraft.core.EnumAxisCycle
    F:net.minecraft.core.EnumAxisCycle NONE -> a
    F:net.minecraft.core.EnumAxisCycle FORWARD -> b
    F:net.minecraft.core.EnumAxisCycle BACKWARD -> c
    M:net.minecraft.core.EnumAxisCycle between(net.minecraft.core.EnumDirection$EnumAxis,net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:int cycle(int,int,int,net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:double cycle(double,double,double,net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:net.minecraft.core.EnumDirection$EnumAxis cycle(net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:net.minecraft.core.EnumAxisCycle inverse() -> a
    M:int cycle(int,int,int,net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:double cycle(double,double,double,net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:net.minecraft.core.EnumDirection$EnumAxis cycle(net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:net.minecraft.core.EnumAxisCycle inverse() -> a
    M:int cycle(int,int,int,net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:double cycle(double,double,double,net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:net.minecraft.core.EnumDirection$EnumAxis cycle(net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:net.minecraft.core.EnumAxisCycle inverse() -> a
net.minecraft.core.BlockMath -> gs -> net.minecraft.core.BlockMath
    F:org.slf4j.Logger LOGGER -> c
    F:java.util.Map VANILLA_UV_TRANSFORM_LOCAL_TO_GLOBAL -> a
    F:java.util.Map VANILLA_UV_TRANSFORM_GLOBAL_TO_LOCAL -> b
    M:com.mojang.math.Transformation blockCenterToCorner(com.mojang.math.Transformation) -> a
    M:com.mojang.math.Transformation blockCornerToCenter(com.mojang.math.Transformation) -> b
    M:com.mojang.math.Transformation getUVLockTransform(com.mojang.math.Transformation,net.minecraft.core.EnumDirection,java.util.function.Supplier) -> a
net.minecraft.core.BlockPos -> gt -> net.minecraft.core.BlockPosition
    F:com.mojang.serialization.Codec CODEC -> a
    F:org.slf4j.Logger LOGGER -> d
    F:net.minecraft.core.BlockPosition ZERO -> b
    F:int PACKED_X_LENGTH -> e
    F:int PACKED_Z_LENGTH -> h
    F:int PACKED_Y_LENGTH -> c
    F:long PACKED_X_MASK -> i
    F:long PACKED_Y_MASK -> j
    F:long PACKED_Z_MASK -> k
    F:int Y_OFFSET -> l
    F:int Z_OFFSET -> m
    F:int X_OFFSET -> n
    F:net.minecraft.core.BlockPosition$MutableBlockPosition nextPos -> a
    F:int counter -> b
    F:net.minecraft.core.BlockPosition$MutableBlockPosition cursor -> h
    F:int currentDepth -> i
    F:int maxX -> j
    F:int maxY -> k
    F:int x -> l
    F:int y -> m
    F:boolean zMirror -> n
    F:net.minecraft.core.BlockPosition$MutableBlockPosition cursor -> g
    F:int index -> h
    F:net.minecraft.core.BlockPosition$MutableBlockPosition cursor -> f
    F:int legs -> g
    F:int leg -> h
    F:int legSize -> i
    F:int legIndex -> j
    F:int lastX -> k
    F:int lastY -> l
    F:int lastZ -> m
    M:long offset(long,net.minecraft.core.EnumDirection) -> a
    M:long offset(long,int,int,int) -> a
    M:int getX(long) -> a
    M:int getY(long) -> b
    M:int getZ(long) -> c
    M:net.minecraft.core.BlockPosition of(long) -> d
    M:long asLong() -> a
    M:long asLong(int,int,int) -> a
    M:long getFlatIndex(long) -> e
    M:net.minecraft.core.BlockPosition offset(double,double,double) -> a
    M:net.minecraft.core.BlockPosition offset(int,int,int) -> b
    M:net.minecraft.core.BlockPosition offset(net.minecraft.core.BaseBlockPosition) -> a
    M:net.minecraft.core.BlockPosition subtract(net.minecraft.core.BaseBlockPosition) -> b
    M:net.minecraft.core.BlockPosition multiply(int) -> a
    M:net.minecraft.core.BlockPosition above() -> b
    M:net.minecraft.core.BlockPosition above(int) -> b
    M:net.minecraft.core.BlockPosition below() -> c
    M:net.minecraft.core.BlockPosition below(int) -> c
    M:net.minecraft.core.BlockPosition north() -> d
    M:net.minecraft.core.BlockPosition north(int) -> d
    M:net.minecraft.core.BlockPosition south() -> e
    M:net.minecraft.core.BlockPosition south(int) -> e
    M:net.minecraft.core.BlockPosition west() -> f
    M:net.minecraft.core.BlockPosition west(int) -> f
    M:net.minecraft.core.BlockPosition east() -> g
    M:net.minecraft.core.BlockPosition east(int) -> g
    M:net.minecraft.core.BlockPosition relative(net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.core.BlockPosition relative(net.minecraft.core.EnumDirection,int) -> a
    M:net.minecraft.core.BlockPosition relative(net.minecraft.core.EnumDirection$EnumAxis,int) -> a
    M:net.minecraft.core.BlockPosition rotate(net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.core.BlockPosition cross(net.minecraft.core.BaseBlockPosition) -> c
    M:net.minecraft.core.BlockPosition atY(int) -> h
    M:net.minecraft.core.BlockPosition immutable() -> h
    M:net.minecraft.core.BlockPosition$MutableBlockPosition mutable() -> i
    M:java.lang.Iterable randomInCube(net.minecraft.util.RandomSource,int,net.minecraft.core.BlockPosition,int) -> a
    M:java.lang.Iterable randomBetweenClosed(net.minecraft.util.RandomSource,int,int,int,int,int,int,int) -> a
    M:java.lang.Iterable withinManhattan(net.minecraft.core.BlockPosition,int,int,int) -> a
    M:java.util.Optional findClosestMatch(net.minecraft.core.BlockPosition,int,int,java.util.function.Predicate) -> a
    M:java.util.stream.Stream withinManhattanStream(net.minecraft.core.BlockPosition,int,int,int) -> b
    M:java.lang.Iterable betweenClosed(net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:java.util.stream.Stream betweenClosedStream(net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> b
    M:java.util.stream.Stream betweenClosedStream(net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:java.util.stream.Stream betweenClosedStream(net.minecraft.world.phys.AxisAlignedBB) -> a
    M:java.util.stream.Stream betweenClosedStream(int,int,int,int,int,int) -> a
    M:java.lang.Iterable betweenClosed(int,int,int,int,int,int) -> b
    M:java.lang.Iterable spiralAround(net.minecraft.core.BlockPosition,int,net.minecraft.core.EnumDirection,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.core.BaseBlockPosition cross(net.minecraft.core.BaseBlockPosition) -> d
    M:net.minecraft.core.BaseBlockPosition relative(net.minecraft.core.EnumDirection$EnumAxis,int) -> b
    M:net.minecraft.core.BaseBlockPosition relative(net.minecraft.core.EnumDirection,int) -> b
    M:net.minecraft.core.BaseBlockPosition relative(net.minecraft.core.EnumDirection) -> b
    M:net.minecraft.core.BaseBlockPosition east(int) -> i
    M:net.minecraft.core.BaseBlockPosition east() -> j
    M:net.minecraft.core.BaseBlockPosition west(int) -> j
    M:net.minecraft.core.BaseBlockPosition west() -> k
    M:net.minecraft.core.BaseBlockPosition south(int) -> k
    M:net.minecraft.core.BaseBlockPosition south() -> l
    M:net.minecraft.core.BaseBlockPosition north(int) -> l
    M:net.minecraft.core.BaseBlockPosition north() -> m
    M:net.minecraft.core.BaseBlockPosition below(int) -> m
    M:net.minecraft.core.BaseBlockPosition below() -> n
    M:net.minecraft.core.BaseBlockPosition above(int) -> n
    M:net.minecraft.core.BaseBlockPosition above() -> o
    M:net.minecraft.core.BaseBlockPosition multiply(int) -> o
    M:net.minecraft.core.BaseBlockPosition subtract(net.minecraft.core.BaseBlockPosition) -> e
    M:net.minecraft.core.BaseBlockPosition offset(net.minecraft.core.BaseBlockPosition) -> f
    M:net.minecraft.core.BaseBlockPosition offset(int,int,int) -> c
    M:net.minecraft.core.BaseBlockPosition offset(double,double,double) -> b
    M:net.minecraft.core.BlockPosition computeNext() -> a
    M:net.minecraft.core.BlockPosition computeNext() -> a
    M:net.minecraft.core.BlockPosition computeNext() -> a
    M:net.minecraft.core.BlockPosition$MutableBlockPosition computeNext() -> a
net.minecraft.core.BlockPos$MutableBlockPos -> gt$a -> net.minecraft.core.BlockPosition$MutableBlockPosition
    M:net.minecraft.core.BlockPosition offset(double,double,double) -> a
    M:net.minecraft.core.BlockPosition offset(int,int,int) -> b
    M:net.minecraft.core.BlockPosition multiply(int) -> a
    M:net.minecraft.core.BlockPosition relative(net.minecraft.core.EnumDirection,int) -> a
    M:net.minecraft.core.BlockPosition relative(net.minecraft.core.EnumDirection$EnumAxis,int) -> a
    M:net.minecraft.core.BlockPosition rotate(net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.core.BlockPosition$MutableBlockPosition set(int,int,int) -> d
    M:net.minecraft.core.BlockPosition$MutableBlockPosition set(double,double,double) -> c
    M:net.minecraft.core.BlockPosition$MutableBlockPosition set(net.minecraft.core.BaseBlockPosition) -> g
    M:net.minecraft.core.BlockPosition$MutableBlockPosition set(long) -> f
    M:net.minecraft.core.BlockPosition$MutableBlockPosition set(net.minecraft.core.EnumAxisCycle,int,int,int) -> a
    M:net.minecraft.core.BlockPosition$MutableBlockPosition setWithOffset(net.minecraft.core.BaseBlockPosition,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.core.BlockPosition$MutableBlockPosition setWithOffset(net.minecraft.core.BaseBlockPosition,int,int,int) -> a
    M:net.minecraft.core.BlockPosition$MutableBlockPosition setWithOffset(net.minecraft.core.BaseBlockPosition,net.minecraft.core.BaseBlockPosition) -> a
    M:net.minecraft.core.BlockPosition$MutableBlockPosition move(net.minecraft.core.EnumDirection) -> c
    M:net.minecraft.core.BlockPosition$MutableBlockPosition move(net.minecraft.core.EnumDirection,int) -> c
    M:net.minecraft.core.BlockPosition$MutableBlockPosition move(int,int,int) -> e
    M:net.minecraft.core.BlockPosition$MutableBlockPosition move(net.minecraft.core.BaseBlockPosition) -> h
    M:net.minecraft.core.BlockPosition$MutableBlockPosition clamp(net.minecraft.core.EnumDirection$EnumAxis,int,int) -> a
    M:net.minecraft.core.BlockPosition$MutableBlockPosition setX(int) -> p
    M:net.minecraft.core.BlockPosition$MutableBlockPosition setY(int) -> q
    M:net.minecraft.core.BlockPosition$MutableBlockPosition setZ(int) -> r
    M:net.minecraft.core.BlockPosition immutable() -> h
    M:net.minecraft.core.BaseBlockPosition cross(net.minecraft.core.BaseBlockPosition) -> d
    M:net.minecraft.core.BaseBlockPosition relative(net.minecraft.core.EnumDirection$EnumAxis,int) -> b
    M:net.minecraft.core.BaseBlockPosition relative(net.minecraft.core.EnumDirection,int) -> b
    M:net.minecraft.core.BaseBlockPosition relative(net.minecraft.core.EnumDirection) -> b
    M:net.minecraft.core.BaseBlockPosition east(int) -> i
    M:net.minecraft.core.BaseBlockPosition east() -> j
    M:net.minecraft.core.BaseBlockPosition west(int) -> j
    M:net.minecraft.core.BaseBlockPosition west() -> k
    M:net.minecraft.core.BaseBlockPosition south(int) -> k
    M:net.minecraft.core.BaseBlockPosition south() -> l
    M:net.minecraft.core.BaseBlockPosition north(int) -> l
    M:net.minecraft.core.BaseBlockPosition north() -> m
    M:net.minecraft.core.BaseBlockPosition below(int) -> m
    M:net.minecraft.core.BaseBlockPosition below() -> n
    M:net.minecraft.core.BaseBlockPosition above(int) -> n
    M:net.minecraft.core.BaseBlockPosition above() -> o
    M:net.minecraft.core.BaseBlockPosition multiply(int) -> o
    M:net.minecraft.core.BaseBlockPosition subtract(net.minecraft.core.BaseBlockPosition) -> e
    M:net.minecraft.core.BaseBlockPosition offset(net.minecraft.core.BaseBlockPosition) -> f
    M:net.minecraft.core.BaseBlockPosition offset(int,int,int) -> c
    M:net.minecraft.core.BaseBlockPosition offset(double,double,double) -> b
    M:net.minecraft.core.BaseBlockPosition setZ(int) -> s
    M:net.minecraft.core.BaseBlockPosition setY(int) -> t
    M:net.minecraft.core.BaseBlockPosition setX(int) -> u
net.minecraft.core.BlockSource -> gu -> net.minecraft.core.ISourceBlock
net.minecraft.core.BlockSourceImpl -> gv -> net.minecraft.core.SourceBlock
    F:net.minecraft.server.level.WorldServer level -> a
    F:net.minecraft.core.BlockPosition pos -> b
    M:net.minecraft.server.level.WorldServer getLevel() -> g
    M:double x() -> a
    M:double y() -> b
    M:double z() -> c
    M:net.minecraft.core.BlockPosition getPos() -> d
    M:net.minecraft.world.level.block.state.IBlockData getBlockState() -> e
    M:net.minecraft.world.level.block.entity.TileEntity getEntity() -> f
net.minecraft.core.Cursor3D -> gw -> net.minecraft.core.CursorPosition
    F:int TYPE_INSIDE -> a
    F:int TYPE_FACE -> b
    F:int TYPE_EDGE -> c
    F:int TYPE_CORNER -> d
    F:int originX -> e
    F:int originY -> f
    F:int originZ -> g
    F:int width -> h
    F:int height -> i
    F:int depth -> j
    F:int end -> k
    F:int index -> l
    F:int x -> m
    F:int y -> n
    F:int z -> o
    M:boolean advance() -> a
    M:int nextX() -> b
    M:int nextY() -> c
    M:int nextZ() -> d
    M:int getNextType() -> e
net.minecraft.core.DefaultedRegistry -> gx -> net.minecraft.core.RegistryBlocks
    M:net.minecraft.core.Holder registerMapping(int,net.minecraft.resources.ResourceKey,java.lang.Object,com.mojang.serialization.Lifecycle) -> a
    M:int getId(java.lang.Object) -> a
    M:net.minecraft.resources.MinecraftKey getKey(java.lang.Object) -> b
    M:java.lang.Object get(net.minecraft.resources.MinecraftKey) -> a
    M:java.util.Optional getOptional(net.minecraft.resources.MinecraftKey) -> b
    M:java.lang.Object byId(int) -> a
    M:java.util.Optional getRandom(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.resources.MinecraftKey getDefaultKey() -> a
net.minecraft.core.Direction -> gy -> net.minecraft.core.EnumDirection
    F:net.minecraft.core.EnumDirection DOWN -> a
    F:net.minecraft.core.EnumDirection UP -> b
    F:net.minecraft.core.EnumDirection NORTH -> c
    F:net.minecraft.core.EnumDirection SOUTH -> d
    F:net.minecraft.core.EnumDirection WEST -> e
    F:net.minecraft.core.EnumDirection EAST -> f
    F:net.minecraft.util.StringRepresentable$EnumCodec CODEC -> g
    F:com.mojang.serialization.Codec VERTICAL_CODEC -> h
    F:int data3d -> i
    F:int oppositeIndex -> j
    F:int data2d -> k
    F:java.lang.String name -> l
    F:net.minecraft.core.EnumDirection$EnumAxis axis -> m
    F:net.minecraft.core.EnumDirection$EnumAxisDirection axisDirection -> n
    F:net.minecraft.core.BaseBlockPosition normal -> o
    F:it.unimi.dsi.fastutil.longs.Long2ObjectMap BY_NORMAL -> s
    M:net.minecraft.core.EnumDirection rotate(com.mojang.math.Matrix4f,net.minecraft.core.EnumDirection) -> a
    M:java.util.Collection allShuffled(net.minecraft.util.RandomSource) -> a
    M:java.util.stream.Stream stream() -> a
    M:com.mojang.math.Quaternion getRotation() -> b
    M:int get3DDataValue() -> d
    M:int get2DDataValue() -> e
    M:net.minecraft.core.EnumDirection$EnumAxisDirection getAxisDirection() -> f
    M:net.minecraft.core.EnumDirection getFacingAxis(net.minecraft.world.entity.Entity,net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:net.minecraft.core.EnumDirection getOpposite() -> g
    M:net.minecraft.core.EnumDirection getClockWise(net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:net.minecraft.core.EnumDirection getCounterClockWise(net.minecraft.core.EnumDirection$EnumAxis) -> b
    M:net.minecraft.core.EnumDirection getClockWise() -> h
    M:net.minecraft.core.EnumDirection getClockWiseX() -> r
    M:net.minecraft.core.EnumDirection getCounterClockWiseX() -> s
    M:net.minecraft.core.EnumDirection getClockWiseZ() -> t
    M:net.minecraft.core.EnumDirection getCounterClockWiseZ() -> u
    M:net.minecraft.core.EnumDirection getCounterClockWise() -> i
    M:int getStepX() -> j
    M:int getStepY() -> k
    M:int getStepZ() -> l
    M:com.mojang.math.Vector3fa step() -> m
    M:java.lang.String getName() -> n
    M:net.minecraft.core.EnumDirection$EnumAxis getAxis() -> o
    M:net.minecraft.core.EnumDirection byName(java.lang.String) -> a
    M:net.minecraft.core.EnumDirection from3DDataValue(int) -> a
    M:net.minecraft.core.EnumDirection from2DDataValue(int) -> b
    M:net.minecraft.core.EnumDirection fromNormal(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.EnumDirection fromNormal(int,int,int) -> a
    M:net.minecraft.core.EnumDirection fromYRot(double) -> a
    M:net.minecraft.core.EnumDirection fromAxisAndDirection(net.minecraft.core.EnumDirection$EnumAxis,net.minecraft.core.EnumDirection$EnumAxisDirection) -> a
    M:float toYRot() -> p
    M:net.minecraft.core.EnumDirection getRandom(net.minecraft.util.RandomSource) -> b
    M:net.minecraft.core.EnumDirection getNearest(double,double,double) -> a
    M:net.minecraft.core.EnumDirection getNearest(float,float,float) -> a
    M:java.lang.String getSerializedName() -> c
    M:com.mojang.serialization.DataResult verifyVertical(net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.core.EnumDirection get(net.minecraft.core.EnumDirection$EnumAxisDirection,net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:net.minecraft.core.BaseBlockPosition getNormal() -> q
    M:boolean isFacingAngle(float) -> a
net.minecraft.core.Direction$Axis -> gy$a -> net.minecraft.core.EnumDirection$EnumAxis
    F:net.minecraft.core.EnumDirection$EnumAxis X -> a
    F:net.minecraft.core.EnumDirection$EnumAxis Y -> b
    F:net.minecraft.core.EnumDirection$EnumAxis Z -> c
    F:net.minecraft.util.StringRepresentable$EnumCodec CODEC -> e
    F:java.lang.String name -> f
    M:net.minecraft.core.EnumDirection$EnumAxis byName(java.lang.String) -> a
    M:java.lang.String getName() -> a
    M:boolean isVertical() -> b
    M:boolean isHorizontal() -> d
    M:net.minecraft.core.EnumDirection$EnumAxis getRandom(net.minecraft.util.RandomSource) -> a
    M:boolean test(net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.core.EnumDirection$EnumDirectionLimit getPlane() -> e
    M:java.lang.String getSerializedName() -> c
    M:boolean test(java.lang.Object) -> test
    M:int choose(int,int,int) -> a
    M:double choose(double,double,double) -> a
    M:boolean test(java.lang.Object) -> test
    M:int choose(int,int,int) -> a
    M:double choose(double,double,double) -> a
    M:boolean test(java.lang.Object) -> test
    M:int choose(int,int,int) -> a
    M:double choose(double,double,double) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.core.Direction$AxisDirection -> gy$b -> net.minecraft.core.EnumDirection$EnumAxisDirection
    F:net.minecraft.core.EnumDirection$EnumAxisDirection POSITIVE -> a
    F:net.minecraft.core.EnumDirection$EnumAxisDirection NEGATIVE -> b
    F:int step -> c
    F:java.lang.String name -> d
    M:int getStep() -> a
    M:java.lang.String getName() -> b
    M:net.minecraft.core.EnumDirection$EnumAxisDirection opposite() -> c
net.minecraft.core.Direction$Plane -> gy$c -> net.minecraft.core.EnumDirection$EnumDirectionLimit
    F:net.minecraft.core.EnumDirection$EnumDirectionLimit HORIZONTAL -> a
    F:net.minecraft.core.EnumDirection$EnumDirectionLimit VERTICAL -> b
    M:net.minecraft.core.EnumDirection getRandomDirection(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.core.EnumDirection$EnumAxis getRandomAxis(net.minecraft.util.RandomSource) -> b
    M:boolean test(net.minecraft.core.EnumDirection) -> a
    M:java.util.Iterator iterator() -> iterator
    M:java.util.stream.Stream stream() -> a
    M:java.util.List shuffledCopy(net.minecraft.util.RandomSource) -> c
    M:boolean test(java.lang.Object) -> test
net.minecraft.core.Direction8 -> gz -> net.minecraft.core.EnumDirection8
    F:net.minecraft.core.EnumDirection8 NORTH -> a
    F:net.minecraft.core.EnumDirection8 NORTH_EAST -> b
    F:net.minecraft.core.EnumDirection8 EAST -> c
    F:net.minecraft.core.EnumDirection8 SOUTH_EAST -> d
    F:net.minecraft.core.EnumDirection8 SOUTH -> e
    F:net.minecraft.core.EnumDirection8 SOUTH_WEST -> f
    F:net.minecraft.core.EnumDirection8 WEST -> g
    F:net.minecraft.core.EnumDirection8 NORTH_WEST -> h
    F:java.util.Set directions -> i
    F:net.minecraft.core.BaseBlockPosition step -> j
    M:java.util.Set getDirections() -> a
    M:int getStepX() -> b
    M:int getStepZ() -> c
net.minecraft.core.FrontAndTop -> ha -> net.minecraft.core.BlockPropertyJigsawOrientation
    F:net.minecraft.core.BlockPropertyJigsawOrientation DOWN_EAST -> a
    F:net.minecraft.core.BlockPropertyJigsawOrientation DOWN_NORTH -> b
    F:net.minecraft.core.BlockPropertyJigsawOrientation DOWN_SOUTH -> c
    F:net.minecraft.core.BlockPropertyJigsawOrientation DOWN_WEST -> d
    F:net.minecraft.core.BlockPropertyJigsawOrientation UP_EAST -> e
    F:net.minecraft.core.BlockPropertyJigsawOrientation UP_NORTH -> f
    F:net.minecraft.core.BlockPropertyJigsawOrientation UP_SOUTH -> g
    F:net.minecraft.core.BlockPropertyJigsawOrientation UP_WEST -> h
    F:net.minecraft.core.BlockPropertyJigsawOrientation WEST_UP -> i
    F:net.minecraft.core.BlockPropertyJigsawOrientation EAST_UP -> j
    F:net.minecraft.core.BlockPropertyJigsawOrientation NORTH_UP -> k
    F:net.minecraft.core.BlockPropertyJigsawOrientation SOUTH_UP -> l
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap LOOKUP_TOP_FRONT -> m
    F:java.lang.String name -> n
    F:net.minecraft.core.EnumDirection top -> o
    F:net.minecraft.core.EnumDirection front -> p
    M:int lookupKey(net.minecraft.core.EnumDirection,net.minecraft.core.EnumDirection) -> b
    M:java.lang.String getSerializedName() -> c
    M:net.minecraft.core.BlockPropertyJigsawOrientation fromFrontAndTop(net.minecraft.core.EnumDirection,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.core.EnumDirection front() -> a
    M:net.minecraft.core.EnumDirection top() -> b
net.minecraft.core.GlobalPos -> hb -> net.minecraft.core.GlobalPos
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.resources.ResourceKey dimension -> b
    F:net.minecraft.core.BlockPosition pos -> c
    M:net.minecraft.core.GlobalPos of(net.minecraft.resources.ResourceKey,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.resources.ResourceKey dimension() -> a
    M:net.minecraft.core.BlockPosition pos() -> b
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.core.Holder -> hc -> net.minecraft.core.Holder
    M:net.minecraft.core.Holder direct(java.lang.Object) -> a
    M:net.minecraft.core.Holder hackyErase(net.minecraft.core.Holder) -> a
net.minecraft.core.Holder$Direct -> hc$a -> net.minecraft.core.Holder$a
    F:java.lang.Object value -> a
    M:boolean isBound() -> b
    M:boolean is(net.minecraft.resources.MinecraftKey) -> a
    M:boolean is(net.minecraft.resources.ResourceKey) -> a
    M:boolean is(net.minecraft.tags.TagKey) -> a
    M:boolean is(java.util.function.Predicate) -> a
    M:com.mojang.datafixers.util.Either unwrap() -> d
    M:java.util.Optional unwrapKey() -> e
    M:net.minecraft.core.Holder$Kind kind() -> f
    M:boolean isValidInRegistry(net.minecraft.core.IRegistry) -> a
    M:java.util.stream.Stream tags() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.Object value() -> a
net.minecraft.core.Holder$Kind -> hc$b -> net.minecraft.core.Holder$b
    F:net.minecraft.core.Holder$Kind REFERENCE -> a
    F:net.minecraft.core.Holder$Kind DIRECT -> b
net.minecraft.core.Holder$Reference -> hc$c -> net.minecraft.core.Holder$c
    F:net.minecraft.core.IRegistry registry -> a
    F:java.util.Set tags -> b
    F:net.minecraft.core.Holder$Reference$Type type -> c
    F:net.minecraft.resources.ResourceKey key -> d
    F:java.lang.Object value -> e
    M:net.minecraft.core.Holder$Reference createStandAlone(net.minecraft.core.IRegistry,net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.core.Holder$Reference createIntrusive(net.minecraft.core.IRegistry,java.lang.Object) -> a
    M:net.minecraft.resources.ResourceKey key() -> g
    M:java.lang.Object value() -> a
    M:boolean is(net.minecraft.resources.MinecraftKey) -> a
    M:boolean is(net.minecraft.resources.ResourceKey) -> a
    M:boolean is(net.minecraft.tags.TagKey) -> a
    M:boolean is(java.util.function.Predicate) -> a
    M:boolean isValidInRegistry(net.minecraft.core.IRegistry) -> a
    M:com.mojang.datafixers.util.Either unwrap() -> d
    M:java.util.Optional unwrapKey() -> e
    M:net.minecraft.core.Holder$Kind kind() -> f
    M:boolean isBound() -> b
    M:void bind(net.minecraft.resources.ResourceKey,java.lang.Object) -> a
    M:void bindTags(java.util.Collection) -> a
    M:java.util.stream.Stream tags() -> c
net.minecraft.core.Holder$Reference$Type -> hc$c$a -> net.minecraft.core.Holder$c$a
    F:net.minecraft.core.Holder$Reference$Type STAND_ALONE -> a
    F:net.minecraft.core.Holder$Reference$Type INTRUSIVE -> b
net.minecraft.core.HolderLookup -> hd -> net.minecraft.core.HolderLookup
    M:net.minecraft.core.HolderLookup forRegistry(net.minecraft.core.IRegistry) -> a
net.minecraft.core.HolderLookup$RegistryLookup -> hd$a -> net.minecraft.core.HolderLookup$a
    F:net.minecraft.core.IRegistry registry -> b
    M:java.util.Optional get(net.minecraft.resources.ResourceKey) -> a
    M:java.util.stream.Stream listElements() -> a
    M:java.util.Optional get(net.minecraft.tags.TagKey) -> a
    M:java.util.stream.Stream listTags() -> b
net.minecraft.core.HolderSet -> he -> net.minecraft.core.HolderSet
    M:net.minecraft.core.HolderSet$Direct direct(net.minecraft.core.Holder[]) -> a
    M:net.minecraft.core.HolderSet$Direct direct(java.util.List) -> a
    M:net.minecraft.core.HolderSet$Direct direct(java.util.function.Function,java.lang.Object[]) -> a
    M:net.minecraft.core.HolderSet$Direct direct(java.util.function.Function,java.util.List) -> a
net.minecraft.core.HolderSet$Direct -> he$a -> net.minecraft.core.HolderSet$a
    F:java.util.List contents -> a
    F:java.util.Set contentsSet -> b
    M:java.util.List contents() -> d
    M:com.mojang.datafixers.util.Either unwrap() -> c
    M:boolean contains(net.minecraft.core.Holder) -> a
net.minecraft.core.HolderSet$ListBacked -> he$b -> net.minecraft.core.HolderSet$b
    M:int size() -> b
    M:java.util.Spliterator spliterator() -> spliterator
    M:java.util.Iterator iterator() -> iterator
    M:java.util.stream.Stream stream() -> a
    M:java.util.Optional getRandomElement(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.core.Holder get(int) -> a
    M:boolean isValidInRegistry(net.minecraft.core.IRegistry) -> a
net.minecraft.core.HolderSet$Named -> he$c -> net.minecraft.core.HolderSet$Named
    F:net.minecraft.core.IRegistry registry -> a
    F:net.minecraft.tags.TagKey key -> b
    F:java.util.List contents -> c
    M:void bind(java.util.List) -> b
    M:net.minecraft.tags.TagKey key() -> e
    M:java.util.List contents() -> d
    M:com.mojang.datafixers.util.Either unwrap() -> c
    M:boolean contains(net.minecraft.core.Holder) -> a
    M:boolean isValidInRegistry(net.minecraft.core.IRegistry) -> a
net.minecraft.core.IdMap -> hf -> net.minecraft.core.Registry
    F:int DEFAULT -> a
    M:java.lang.Object byIdOrThrow(int) -> b
net.minecraft.core.IdMapper -> hg -> net.minecraft.core.RegistryBlockID
    F:int nextId -> b
    F:it.unimi.dsi.fastutil.objects.Object2IntMap tToId -> c
    F:java.util.List idToT -> d
    M:void addMapping(java.lang.Object,int) -> a
    M:void add(java.lang.Object) -> b
    M:int getId(java.lang.Object) -> a
    M:java.lang.Object byId(int) -> a
    M:java.util.Iterator iterator() -> iterator
    M:boolean contains(int) -> c
    M:int size() -> b
net.minecraft.core.MappedRegistry -> hh -> net.minecraft.core.RegistryMaterials
    F:boolean frozen -> ca
    F:java.util.function.Function customHolderProvider -> cb
    F:java.util.Map intrusiveHolderCache -> cc
    F:java.util.List holdersInOrder -> cd
    F:int nextId -> ce
    M:java.util.List holdersInOrder() -> a
    M:void validateWrite(net.minecraft.resources.ResourceKey) -> i
    M:net.minecraft.core.Holder registerMapping(int,net.minecraft.resources.ResourceKey,java.lang.Object,com.mojang.serialization.Lifecycle) -> a
    M:net.minecraft.core.Holder registerMapping(int,net.minecraft.resources.ResourceKey,java.lang.Object,com.mojang.serialization.Lifecycle,boolean) -> a
    M:net.minecraft.core.Holder register(net.minecraft.resources.ResourceKey,java.lang.Object,com.mojang.serialization.Lifecycle) -> a
    M:net.minecraft.core.Holder registerOrOverride(java.util.OptionalInt,net.minecraft.resources.ResourceKey,java.lang.Object,com.mojang.serialization.Lifecycle) -> a
    M:net.minecraft.resources.MinecraftKey getKey(java.lang.Object) -> b
    M:java.util.Optional getResourceKey(java.lang.Object) -> c
    M:int getId(java.lang.Object) -> a
    M:java.lang.Object get(net.minecraft.resources.ResourceKey) -> a
    M:java.lang.Object byId(int) -> a
    M:java.util.Optional getHolder(int) -> c
    M:java.util.Optional getHolder(net.minecraft.resources.ResourceKey) -> b
    M:net.minecraft.core.Holder getOrCreateHolderOrThrow(net.minecraft.resources.ResourceKey) -> c
    M:com.mojang.serialization.DataResult getOrCreateHolder(net.minecraft.resources.ResourceKey) -> d
    M:int size() -> b
    M:com.mojang.serialization.Lifecycle lifecycle(java.lang.Object) -> d
    M:com.mojang.serialization.Lifecycle elementsLifecycle() -> c
    M:java.util.Iterator iterator() -> iterator
    M:java.lang.Object get(net.minecraft.resources.MinecraftKey) -> a
    M:java.lang.Object getValueFromNullable(net.minecraft.core.Holder$Reference) -> a
    M:java.util.Set keySet() -> d
    M:java.util.Set registryKeySet() -> e
    M:java.util.Set entrySet() -> f
    M:java.util.stream.Stream holders() -> g
    M:boolean isKnownTagName(net.minecraft.tags.TagKey) -> a
    M:java.util.stream.Stream getTags() -> h
    M:net.minecraft.core.HolderSet$Named getOrCreateTag(net.minecraft.tags.TagKey) -> b
    M:net.minecraft.core.HolderSet$Named createTag(net.minecraft.tags.TagKey) -> e
    M:java.util.stream.Stream getTagNames() -> i
    M:boolean isEmpty() -> j
    M:java.util.Optional getRandom(net.minecraft.util.RandomSource) -> a
    M:boolean containsKey(net.minecraft.resources.MinecraftKey) -> c
    M:boolean containsKey(net.minecraft.resources.ResourceKey) -> e
    M:net.minecraft.core.IRegistry freeze() -> k
    M:net.minecraft.core.Holder$Reference createIntrusiveHolder(java.lang.Object) -> e
    M:java.util.Optional getTag(net.minecraft.tags.TagKey) -> c
    M:void bindTags(java.util.Map) -> a
    M:void resetTags() -> l
net.minecraft.core.NonNullList -> hi -> net.minecraft.core.NonNullList
    F:java.util.List list -> a
    F:java.lang.Object defaultValue -> b
    M:net.minecraft.core.NonNullList create() -> a
    M:net.minecraft.core.NonNullList createWithCapacity(int) -> a
    M:net.minecraft.core.NonNullList withSize(int,java.lang.Object) -> a
    M:net.minecraft.core.NonNullList of(java.lang.Object,java.lang.Object[]) -> a
    M:java.lang.Object get(int) -> get
    M:java.lang.Object set(int,java.lang.Object) -> set
    M:void add(int,java.lang.Object) -> add
    M:java.lang.Object remove(int) -> remove
    M:int size() -> size
    M:void clear() -> clear
net.minecraft.core.Position -> hj -> net.minecraft.core.IPosition
net.minecraft.core.PositionImpl -> hk -> net.minecraft.core.Position
    F:double x -> a
    F:double y -> b
    F:double z -> c
    M:double x() -> a
    M:double y() -> b
    M:double z() -> c
net.minecraft.core.QuartPos -> hl -> net.minecraft.core.QuartPos
    F:int BITS -> a
    F:int SIZE -> b
    F:int MASK -> c
    F:int SECTION_TO_QUARTS_BITS -> d
    M:int fromBlock(int) -> a
    M:int quartLocal(int) -> b
    M:int toBlock(int) -> c
    M:int fromSection(int) -> d
    M:int toSection(int) -> e
net.minecraft.core.Registry -> hm -> net.minecraft.core.IRegistry
    F:net.minecraft.resources.MinecraftKey ROOT_REGISTRY_NAME -> b
    F:net.minecraft.core.IRegistryWritable WRITABLE_REGISTRY -> c
    F:net.minecraft.core.IRegistry REGISTRY -> d
    F:net.minecraft.resources.ResourceKey SOUND_EVENT_REGISTRY -> e
    F:net.minecraft.resources.ResourceKey FLUID_REGISTRY -> f
    F:net.minecraft.resources.ResourceKey MOB_EFFECT_REGISTRY -> g
    F:net.minecraft.resources.ResourceKey BLOCK_REGISTRY -> h
    F:net.minecraft.resources.ResourceKey ENCHANTMENT_REGISTRY -> i
    F:net.minecraft.resources.ResourceKey ENTITY_TYPE_REGISTRY -> j
    F:net.minecraft.resources.ResourceKey ITEM_REGISTRY -> k
    F:net.minecraft.resources.ResourceKey POTION_REGISTRY -> l
    F:net.minecraft.resources.ResourceKey PARTICLE_TYPE_REGISTRY -> m
    F:net.minecraft.resources.ResourceKey BLOCK_ENTITY_TYPE_REGISTRY -> n
    F:net.minecraft.resources.ResourceKey PAINTING_VARIANT_REGISTRY -> o
    F:net.minecraft.resources.ResourceKey CUSTOM_STAT_REGISTRY -> p
    F:net.minecraft.resources.ResourceKey CHUNK_STATUS_REGISTRY -> q
    F:net.minecraft.resources.ResourceKey RULE_TEST_REGISTRY -> r
    F:net.minecraft.resources.ResourceKey POS_RULE_TEST_REGISTRY -> s
    F:net.minecraft.resources.ResourceKey MENU_REGISTRY -> t
    F:net.minecraft.resources.ResourceKey RECIPE_TYPE_REGISTRY -> u
    F:net.minecraft.resources.ResourceKey RECIPE_SERIALIZER_REGISTRY -> v
    F:net.minecraft.resources.ResourceKey ATTRIBUTE_REGISTRY -> w
    F:net.minecraft.resources.ResourceKey GAME_EVENT_REGISTRY -> x
    F:net.minecraft.resources.ResourceKey POSITION_SOURCE_TYPE_REGISTRY -> y
    F:net.minecraft.resources.ResourceKey STAT_TYPE_REGISTRY -> z
    F:net.minecraft.core.IRegistry PARTICLE_TYPE -> aa
    F:net.minecraft.core.IRegistry BLOCK_ENTITY_TYPE -> ab
    F:net.minecraft.core.RegistryBlocks PAINTING_VARIANT -> ac
    F:net.minecraft.core.IRegistry CUSTOM_STAT -> ad
    F:net.minecraft.core.RegistryBlocks CHUNK_STATUS -> ae
    F:net.minecraft.core.IRegistry RULE_TEST -> af
    F:net.minecraft.core.IRegistry POS_RULE_TEST -> ag
    F:net.minecraft.core.IRegistry MENU -> ah
    F:net.minecraft.core.IRegistry RECIPE_TYPE -> ai
    F:net.minecraft.core.IRegistry RECIPE_SERIALIZER -> aj
    F:net.minecraft.core.IRegistry ATTRIBUTE -> ak
    F:net.minecraft.core.IRegistry POSITION_SOURCE_TYPE -> al
    F:net.minecraft.core.IRegistry COMMAND_ARGUMENT_TYPE -> am
    F:net.minecraft.core.IRegistry STAT_TYPE -> an
    F:net.minecraft.core.RegistryBlocks VILLAGER_TYPE -> ao
    F:net.minecraft.core.RegistryBlocks VILLAGER_PROFESSION -> ap
    F:net.minecraft.core.IRegistry POINT_OF_INTEREST_TYPE -> aq
    F:net.minecraft.core.RegistryBlocks MEMORY_MODULE_TYPE -> ar
    F:net.minecraft.core.RegistryBlocks SENSOR_TYPE -> as
    F:net.minecraft.core.IRegistry SCHEDULE -> at
    F:net.minecraft.core.IRegistry ACTIVITY -> au
    F:net.minecraft.core.IRegistry LOOT_POOL_ENTRY_TYPE -> av
    F:net.minecraft.core.IRegistry LOOT_FUNCTION_TYPE -> aw
    F:net.minecraft.core.IRegistry LOOT_CONDITION_TYPE -> ax
    F:net.minecraft.core.IRegistry LOOT_NUMBER_PROVIDER_TYPE -> ay
    F:net.minecraft.core.IRegistry LOOT_NBT_PROVIDER_TYPE -> az
    F:net.minecraft.resources.ResourceKey STRUCTURE_PLACEMENT_TYPE_REGISTRY -> ba
    F:net.minecraft.core.IRegistry STRUCTURE_PLACEMENT_TYPE -> bb
    F:net.minecraft.resources.ResourceKey STRUCTURE_PIECE_REGISTRY -> bc
    F:net.minecraft.core.IRegistry STRUCTURE_PIECE -> bd
    F:net.minecraft.resources.ResourceKey STRUCTURE_TYPE_REGISTRY -> be
    F:net.minecraft.core.IRegistry STRUCTURE_TYPES -> bf
    F:net.minecraft.resources.ResourceKey PLACEMENT_MODIFIER_REGISTRY -> bg
    F:net.minecraft.core.IRegistry PLACEMENT_MODIFIERS -> bh
    F:net.minecraft.resources.ResourceKey BLOCK_STATE_PROVIDER_TYPE_REGISTRY -> bi
    F:net.minecraft.resources.ResourceKey FOLIAGE_PLACER_TYPE_REGISTRY -> bj
    F:net.minecraft.resources.ResourceKey TRUNK_PLACER_TYPE_REGISTRY -> bk
    F:net.minecraft.resources.ResourceKey TREE_DECORATOR_TYPE_REGISTRY -> bl
    F:net.minecraft.resources.ResourceKey ROOT_PLACER_TYPE_REGISTRY -> bm
    F:net.minecraft.resources.ResourceKey FEATURE_SIZE_TYPE_REGISTRY -> bn
    F:net.minecraft.resources.ResourceKey BIOME_SOURCE_REGISTRY -> bo
    F:net.minecraft.resources.ResourceKey CHUNK_GENERATOR_REGISTRY -> bp
    F:net.minecraft.resources.ResourceKey CONDITION_REGISTRY -> bq
    F:net.minecraft.resources.ResourceKey RULE_REGISTRY -> br
    F:net.minecraft.resources.ResourceKey DENSITY_FUNCTION_TYPE_REGISTRY -> bs
    F:net.minecraft.resources.ResourceKey STRUCTURE_PROCESSOR_REGISTRY -> bt
    F:net.minecraft.resources.ResourceKey STRUCTURE_POOL_ELEMENT_REGISTRY -> bu
    F:net.minecraft.core.IRegistry BLOCKSTATE_PROVIDER_TYPES -> bv
    F:net.minecraft.core.IRegistry FOLIAGE_PLACER_TYPES -> bw
    F:net.minecraft.core.IRegistry TRUNK_PLACER_TYPES -> bx
    F:net.minecraft.core.IRegistry ROOT_PLACER_TYPES -> by
    F:net.minecraft.core.IRegistry TREE_DECORATOR_TYPES -> bz
    M:net.minecraft.resources.ResourceKey createRegistryKey(java.lang.String) -> a
    M:void checkRegistry(net.minecraft.core.IRegistry) -> a
    M:net.minecraft.core.IRegistry registerSimple(net.minecraft.resources.ResourceKey,net.minecraft.core.Registry$RegistryBootstrap) -> a
    M:net.minecraft.core.RegistryBlocks registerDefaulted(net.minecraft.resources.ResourceKey,java.lang.String,net.minecraft.core.Registry$RegistryBootstrap) -> a
    M:net.minecraft.core.RegistryBlocks registerDefaulted(net.minecraft.resources.ResourceKey,java.lang.String,java.util.function.Function,net.minecraft.core.Registry$RegistryBootstrap) -> a
    M:net.minecraft.core.IRegistry registerSimple(net.minecraft.resources.ResourceKey,com.mojang.serialization.Lifecycle,net.minecraft.core.Registry$RegistryBootstrap) -> a
    M:net.minecraft.core.IRegistry registerSimple(net.minecraft.resources.ResourceKey,com.mojang.serialization.Lifecycle,java.util.function.Function,net.minecraft.core.Registry$RegistryBootstrap) -> a
    M:net.minecraft.core.RegistryBlocks registerDefaulted(net.minecraft.resources.ResourceKey,java.lang.String,com.mojang.serialization.Lifecycle,net.minecraft.core.Registry$RegistryBootstrap) -> a
    M:net.minecraft.core.RegistryBlocks registerDefaulted(net.minecraft.resources.ResourceKey,java.lang.String,com.mojang.serialization.Lifecycle,java.util.function.Function,net.minecraft.core.Registry$RegistryBootstrap) -> a
    M:net.minecraft.core.IRegistryWritable internalRegister(net.minecraft.resources.ResourceKey,net.minecraft.core.IRegistryWritable,net.minecraft.core.Registry$RegistryBootstrap,com.mojang.serialization.Lifecycle) -> a
    M:void freezeBuiltins() -> m
    M:net.minecraft.resources.ResourceKey key() -> n
    M:com.mojang.serialization.Lifecycle lifecycle() -> o
    M:com.mojang.serialization.Codec byNameCodec() -> p
    M:com.mojang.serialization.Codec holderByNameCodec() -> q
    M:java.util.stream.Stream keys(com.mojang.serialization.DynamicOps) -> keys
    M:java.util.Optional getOptional(net.minecraft.resources.MinecraftKey) -> b
    M:java.util.Optional getOptional(net.minecraft.resources.ResourceKey) -> f
    M:java.lang.Object getOrThrow(net.minecraft.resources.ResourceKey) -> g
    M:java.util.stream.Stream stream() -> r
    M:java.lang.Object register(net.minecraft.core.IRegistry,java.lang.String,java.lang.Object) -> a
    M:java.lang.Object register(net.minecraft.core.IRegistry,net.minecraft.resources.MinecraftKey,java.lang.Object) -> a
    M:java.lang.Object register(net.minecraft.core.IRegistry,net.minecraft.resources.ResourceKey,java.lang.Object) -> a
    M:java.lang.Object registerMapping(net.minecraft.core.IRegistry,int,java.lang.String,java.lang.Object) -> a
    M:net.minecraft.core.Holder getHolderOrThrow(net.minecraft.resources.ResourceKey) -> h
    M:java.lang.Iterable getTagOrEmpty(net.minecraft.tags.TagKey) -> d
    M:net.minecraft.core.Registry asHolderIdMap() -> s
    M:int getId(net.minecraft.core.Holder) -> a
    M:net.minecraft.core.Holder byId(int) -> c
    M:int size() -> b
    M:java.util.Iterator iterator() -> iterator
    M:java.lang.Object byId(int) -> a
    M:int getId(java.lang.Object) -> a
net.minecraft.core.Registry$RegistryBootstrap -> hm$a -> net.minecraft.core.IRegistry$a
net.minecraft.core.RegistryAccess -> hn -> net.minecraft.core.IRegistryCustom
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.Map REGISTRIES -> b
    F:com.mojang.serialization.Codec NETWORK_CODEC -> c
    F:java.util.function.Supplier BUILTIN -> d
    M:net.minecraft.core.IRegistry ownedRegistryOrThrow(net.minecraft.resources.ResourceKey) -> b
    M:java.util.Optional registry(net.minecraft.resources.ResourceKey) -> c
    M:net.minecraft.core.IRegistry registryOrThrow(net.minecraft.resources.ResourceKey) -> d
    M:void put(com.google.common.collect.ImmutableMap$Builder,net.minecraft.resources.ResourceKey,com.mojang.serialization.Codec) -> a
    M:void put(com.google.common.collect.ImmutableMap$Builder,net.minecraft.resources.ResourceKey,com.mojang.serialization.Codec,com.mojang.serialization.Codec) -> a
    M:java.lang.Iterable knownRegistries() -> a
    M:java.util.stream.Stream globalRegistries() -> h
    M:java.util.stream.Stream registries() -> c
    M:java.util.stream.Stream networkSafeRegistries() -> d
    M:com.mojang.serialization.Codec makeNetworkCodec() -> i
    M:com.mojang.serialization.Codec captureMap(com.mojang.serialization.codecs.UnboundedMapCodec) -> a
    M:java.util.stream.Stream ownedNetworkableRegistries() -> j
    M:com.mojang.serialization.DataResult getNetworkCodec(net.minecraft.resources.ResourceKey) -> f
    M:java.util.Map createFreshRegistries() -> k
    M:net.minecraft.core.RegistryAccess$Writable blankWriteable() -> l
    M:net.minecraft.core.IRegistryCustom$Dimension fromRegistryOfRegistries(net.minecraft.core.IRegistry) -> a
    M:net.minecraft.core.RegistryAccess$Writable builtinCopy() -> e
    M:void addBuiltinElements(net.minecraft.resources.RegistryResourceAccess$InMemoryStorage,net.minecraft.core.IRegistryCustom$RegistryData) -> a
    M:void load(net.minecraft.core.RegistryAccess$Writable,com.mojang.serialization.DynamicOps,net.minecraft.resources.RegistryLoader) -> a
    M:void readRegistry(com.mojang.serialization.DynamicOps,net.minecraft.resources.RegistryLoader$Bound,net.minecraft.core.IRegistryCustom$RegistryData) -> a
    M:net.minecraft.core.IRegistryCustom readFromDisk(com.mojang.serialization.Dynamic) -> a
    M:net.minecraft.core.IRegistry retrieveRegistry(net.minecraft.resources.ResourceKey,com.mojang.serialization.Dynamic) -> a
    M:net.minecraft.core.IRegistryWritable createRegistry(net.minecraft.resources.ResourceKey) -> e
    M:net.minecraft.core.IRegistryCustom$Dimension freeze() -> f
    M:com.mojang.serialization.Lifecycle allElementsLifecycle() -> g
    M:java.util.Optional ownedRegistry(net.minecraft.resources.ResourceKey) -> a
    M:java.util.stream.Stream ownedRegistries() -> b
net.minecraft.core.RegistryAccess$Frozen -> hn$a -> net.minecraft.core.IRegistryCustom$Dimension
    M:net.minecraft.core.IRegistryCustom$Dimension freeze() -> f
net.minecraft.core.RegistryAccess$ImmutableRegistryAccess -> hn$b -> net.minecraft.core.IRegistryCustom$b
    F:java.util.Map registries -> e
    M:java.util.Optional ownedRegistry(net.minecraft.resources.ResourceKey) -> a
    M:java.util.stream.Stream ownedRegistries() -> b
net.minecraft.core.RegistryAccess$RegistryData -> hn$c -> net.minecraft.core.IRegistryCustom$RegistryData
    F:net.minecraft.resources.ResourceKey key -> a
    F:com.mojang.serialization.Codec codec -> b
    F:com.mojang.serialization.Codec networkCodec -> c
    M:boolean sendToClient() -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.resources.ResourceKey key() -> b
    M:com.mojang.serialization.Codec codec() -> c
    M:com.mojang.serialization.Codec networkCodec() -> d
net.minecraft.core.RegistryAccess$RegistryEntry -> hn$d -> net.minecraft.core.IRegistryCustom$d
    F:net.minecraft.resources.ResourceKey key -> a
    F:net.minecraft.core.IRegistry value -> b
    M:net.minecraft.core.RegistryAccess$RegistryEntry fromMapEntry(java.util.Map$Entry) -> a
    M:net.minecraft.core.RegistryAccess$RegistryEntry fromHolder(net.minecraft.core.Holder$Reference) -> a
    M:net.minecraft.core.RegistryAccess$RegistryEntry fromUntyped(net.minecraft.resources.ResourceKey,net.minecraft.core.IRegistry) -> a
    M:net.minecraft.core.RegistryAccess$RegistryEntry freeze() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.resources.ResourceKey key() -> a
    M:net.minecraft.core.IRegistry value() -> b
net.minecraft.core.RegistryAccess$Writable -> hn$e -> net.minecraft.core.IRegistryCustom$e
    M:net.minecraft.core.IRegistryWritable ownedWritableRegistryOrThrow(net.minecraft.resources.ResourceKey) -> g
net.minecraft.core.RegistryAccess$WritableRegistryAccess -> hn$f -> net.minecraft.core.IRegistryCustom$f
    F:java.util.Map registries -> e
    M:java.util.Optional ownedRegistry(net.minecraft.resources.ResourceKey) -> a
    M:java.util.Optional ownedWritableRegistry(net.minecraft.resources.ResourceKey) -> f
    M:java.util.stream.Stream ownedRegistries() -> b
net.minecraft.core.RegistryCodecs -> ho -> net.minecraft.core.RegistryCodecs
    M:com.mojang.serialization.MapCodec withNameAndId(net.minecraft.resources.ResourceKey,com.mojang.serialization.MapCodec) -> a
    M:com.mojang.serialization.Codec networkCodec(net.minecraft.resources.ResourceKey,com.mojang.serialization.Lifecycle,com.mojang.serialization.Codec) -> a
    M:com.mojang.serialization.Codec dataPackAwareCodec(net.minecraft.resources.ResourceKey,com.mojang.serialization.Lifecycle,com.mojang.serialization.Codec) -> b
    M:com.mojang.serialization.Decoder dataPackAwareDecoder(net.minecraft.resources.ResourceKey,com.mojang.serialization.Codec,com.mojang.serialization.Decoder,com.mojang.serialization.Lifecycle) -> a
    M:com.mojang.serialization.Codec directCodec(net.minecraft.resources.ResourceKey,com.mojang.serialization.Codec) -> b
    M:com.mojang.serialization.Codec homogeneousList(net.minecraft.resources.ResourceKey,com.mojang.serialization.Codec) -> a
    M:com.mojang.serialization.Codec homogeneousList(net.minecraft.resources.ResourceKey,com.mojang.serialization.Codec,boolean) -> a
    M:com.mojang.serialization.Codec homogeneousList(net.minecraft.resources.ResourceKey) -> a
    M:com.mojang.serialization.Codec homogeneousList(net.minecraft.resources.ResourceKey,boolean) -> a
    M:com.mojang.serialization.DataResult decode(com.mojang.serialization.DynamicOps,java.lang.Object) -> decode
    M:com.mojang.serialization.DataResult overrideFromResources(com.mojang.serialization.DataResult,net.minecraft.resources.RegistryOps,net.minecraft.resources.RegistryLoader) -> a
net.minecraft.core.RegistryCodecs$RegistryEntry -> ho$a -> net.minecraft.core.RegistryCodecs$a
    F:net.minecraft.resources.ResourceKey key -> a
    F:int id -> b
    F:java.lang.Object value -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.resources.ResourceKey key() -> a
    M:int id() -> b
    M:java.lang.Object value() -> c
net.minecraft.core.Rotations -> hp -> net.minecraft.core.Vector3f
    F:float x -> a
    F:float y -> b
    F:float z -> c
    M:net.minecraft.nbt.NBTTagList save() -> a
    M:boolean equals(java.lang.Object) -> equals
    M:float getX() -> b
    M:float getY() -> c
    M:float getZ() -> d
    M:float getWrappedX() -> e
    M:float getWrappedY() -> f
    M:float getWrappedZ() -> g
net.minecraft.core.SectionPos -> hq -> net.minecraft.core.SectionPosition
    F:int SECTION_BITS -> a
    F:int SECTION_SIZE -> b
    F:int SECTION_MASK -> c
    F:int SECTION_HALF_SIZE -> d
    F:int SECTION_MAX_INDEX -> e
    F:int PACKED_X_LENGTH -> h
    F:int PACKED_Y_LENGTH -> i
    F:int PACKED_Z_LENGTH -> j
    F:long PACKED_X_MASK -> k
    F:long PACKED_Y_MASK -> l
    F:long PACKED_Z_MASK -> m
    F:int Y_OFFSET -> n
    F:int Z_OFFSET -> o
    F:int X_OFFSET -> p
    F:int RELATIVE_X_SHIFT -> q
    F:int RELATIVE_Y_SHIFT -> r
    F:int RELATIVE_Z_SHIFT -> s
    F:net.minecraft.core.CursorPosition cursor -> a
    M:net.minecraft.core.SectionPosition of(int,int,int) -> a
    M:net.minecraft.core.SectionPosition of(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.SectionPosition of(net.minecraft.world.level.ChunkCoordIntPair,int) -> a
    M:net.minecraft.core.SectionPosition of(net.minecraft.world.level.entity.EntityAccess) -> a
    M:net.minecraft.core.SectionPosition of(net.minecraft.core.IPosition) -> a
    M:net.minecraft.core.SectionPosition of(long) -> a
    M:net.minecraft.core.SectionPosition bottomOf(net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:long offset(long,net.minecraft.core.EnumDirection) -> a
    M:long offset(long,int,int,int) -> a
    M:int posToSectionCoord(double) -> a
    M:int blockToSectionCoord(int) -> a
    M:int blockToSectionCoord(double) -> b
    M:int sectionRelative(int) -> b
    M:short sectionRelativePos(net.minecraft.core.BlockPosition) -> b
    M:int sectionRelativeX(short) -> a
    M:int sectionRelativeY(short) -> b
    M:int sectionRelativeZ(short) -> c
    M:int relativeToBlockX(short) -> d
    M:int relativeToBlockY(short) -> e
    M:int relativeToBlockZ(short) -> f
    M:net.minecraft.core.BlockPosition relativeToBlockPos(short) -> g
    M:int sectionToBlockCoord(int) -> c
    M:int sectionToBlockCoord(int,int) -> a
    M:int x(long) -> b
    M:int y(long) -> c
    M:int z(long) -> d
    M:int x() -> a
    M:int y() -> b
    M:int z() -> c
    M:int minBlockX() -> d
    M:int minBlockY() -> e
    M:int minBlockZ() -> f
    M:int maxBlockX() -> g
    M:int maxBlockY() -> h
    M:int maxBlockZ() -> i
    M:long blockToSection(long) -> e
    M:long getZeroNode(long) -> f
    M:net.minecraft.core.BlockPosition origin() -> p
    M:net.minecraft.core.BlockPosition center() -> q
    M:net.minecraft.world.level.ChunkCoordIntPair chunk() -> r
    M:long asLong(net.minecraft.core.BlockPosition) -> c
    M:long asLong(int,int,int) -> b
    M:long asLong() -> s
    M:net.minecraft.core.SectionPosition offset(int,int,int) -> d
    M:java.util.stream.Stream blocksInside() -> t
    M:java.util.stream.Stream cube(net.minecraft.core.SectionPosition,int) -> a
    M:java.util.stream.Stream aroundChunk(net.minecraft.world.level.ChunkCoordIntPair,int,int,int) -> a
    M:java.util.stream.Stream betweenClosedStream(int,int,int,int,int,int) -> a
    M:void aroundAndAtBlockPos(net.minecraft.core.BlockPosition,it.unimi.dsi.fastutil.longs.LongConsumer) -> a
    M:void aroundAndAtBlockPos(long,it.unimi.dsi.fastutil.longs.LongConsumer) -> a
    M:void aroundAndAtBlockPos(int,int,int,it.unimi.dsi.fastutil.longs.LongConsumer) -> a
    M:net.minecraft.core.BaseBlockPosition offset(int,int,int) -> c
net.minecraft.core.UUIDUtil -> hr -> net.minecraft.core.UUIDUtil
    F:com.mojang.serialization.Codec CODEC -> a
    F:int UUID_BYTES -> b
    F:java.lang.String UUID_PREFIX_OFFLINE_PLAYER -> c
    M:java.util.UUID uuidFromIntArray(int[]) -> a
    M:java.util.UUID readUUID(com.mojang.serialization.Dynamic) -> a
    M:java.util.UUID getOrCreatePlayerUUID(com.mojang.authlib.GameProfile) -> a
    M:java.util.UUID createOfflinePlayerUUID(java.lang.String) -> a
net.minecraft.core.Vec3i -> hs -> net.minecraft.core.BaseBlockPosition
    F:com.mojang.serialization.Codec CODEC -> f
    F:net.minecraft.core.BaseBlockPosition ZERO -> g
    F:int x -> a
    F:int y -> b
    F:int z -> c
    M:java.util.function.Function checkOffsetAxes(int) -> a
    M:com.mojang.serialization.Codec offsetCodec(int) -> v
    M:boolean equals(java.lang.Object) -> equals
    M:int compareTo(net.minecraft.core.BaseBlockPosition) -> i
    M:int getX() -> u
    M:int getY() -> v
    M:int getZ() -> w
    M:net.minecraft.core.BaseBlockPosition setX(int) -> u
    M:net.minecraft.core.BaseBlockPosition setY(int) -> t
    M:net.minecraft.core.BaseBlockPosition setZ(int) -> s
    M:net.minecraft.core.BaseBlockPosition offset(double,double,double) -> b
    M:net.minecraft.core.BaseBlockPosition offset(int,int,int) -> c
    M:net.minecraft.core.BaseBlockPosition offset(net.minecraft.core.BaseBlockPosition) -> f
    M:net.minecraft.core.BaseBlockPosition subtract(net.minecraft.core.BaseBlockPosition) -> e
    M:net.minecraft.core.BaseBlockPosition multiply(int) -> o
    M:net.minecraft.core.BaseBlockPosition above() -> o
    M:net.minecraft.core.BaseBlockPosition above(int) -> n
    M:net.minecraft.core.BaseBlockPosition below() -> n
    M:net.minecraft.core.BaseBlockPosition below(int) -> m
    M:net.minecraft.core.BaseBlockPosition north() -> m
    M:net.minecraft.core.BaseBlockPosition north(int) -> l
    M:net.minecraft.core.BaseBlockPosition south() -> l
    M:net.minecraft.core.BaseBlockPosition south(int) -> k
    M:net.minecraft.core.BaseBlockPosition west() -> k
    M:net.minecraft.core.BaseBlockPosition west(int) -> j
    M:net.minecraft.core.BaseBlockPosition east() -> j
    M:net.minecraft.core.BaseBlockPosition east(int) -> i
    M:net.minecraft.core.BaseBlockPosition relative(net.minecraft.core.EnumDirection) -> b
    M:net.minecraft.core.BaseBlockPosition relative(net.minecraft.core.EnumDirection,int) -> b
    M:net.minecraft.core.BaseBlockPosition relative(net.minecraft.core.EnumDirection$EnumAxis,int) -> b
    M:net.minecraft.core.BaseBlockPosition cross(net.minecraft.core.BaseBlockPosition) -> d
    M:boolean closerThan(net.minecraft.core.BaseBlockPosition,double) -> a
    M:boolean closerToCenterThan(net.minecraft.core.IPosition,double) -> a
    M:double distSqr(net.minecraft.core.BaseBlockPosition) -> j
    M:double distToCenterSqr(net.minecraft.core.IPosition) -> b
    M:double distToCenterSqr(double,double,double) -> d
    M:double distToLowCornerSqr(double,double,double) -> e
    M:int distManhattan(net.minecraft.core.BaseBlockPosition) -> k
    M:int get(net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:java.lang.String toShortString() -> x
net.minecraft.core.WritableRegistry -> ht -> net.minecraft.core.IRegistryWritable
net.minecraft.core.cauldron.CauldronInteraction -> hu -> net.minecraft.core.cauldron.CauldronInteraction
    F:java.util.Map EMPTY -> a
    F:java.util.Map WATER -> b
    F:java.util.Map LAVA -> c
    F:java.util.Map POWDER_SNOW -> d
    F:net.minecraft.core.cauldron.CauldronInteraction FILL_WATER -> e
    F:net.minecraft.core.cauldron.CauldronInteraction FILL_LAVA -> f
    F:net.minecraft.core.cauldron.CauldronInteraction FILL_POWDER_SNOW -> g
    F:net.minecraft.core.cauldron.CauldronInteraction SHULKER_BOX -> h
    F:net.minecraft.core.cauldron.CauldronInteraction BANNER -> i
    F:net.minecraft.core.cauldron.CauldronInteraction DYED_ITEM -> j
    M:it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap newInteractionMap() -> a
    M:void bootStrap() -> b
    M:void addDefaultInteractions(java.util.Map) -> a
    M:net.minecraft.world.EnumInteractionResult fillBucket(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,java.util.function.Predicate,net.minecraft.sounds.SoundEffect) -> a
    M:net.minecraft.world.EnumInteractionResult emptyBucket(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.IBlockData,net.minecraft.sounds.SoundEffect) -> a
net.minecraft.core.dispenser.AbstractProjectileDispenseBehavior -> hw -> net.minecraft.core.dispenser.DispenseBehaviorProjectile
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:void playSound(net.minecraft.core.ISourceBlock) -> a
    M:float getUncertainty() -> a
    M:float getPower() -> b
net.minecraft.core.dispenser.BoatDispenseItemBehavior -> hx -> net.minecraft.core.dispenser.DispenseBehaviorBoat
    F:net.minecraft.core.dispenser.DispenseBehaviorItem defaultDispenseItemBehavior -> c
    F:net.minecraft.world.entity.vehicle.EntityBoat$EnumBoatType type -> d
    F:boolean isChestBoat -> e
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:void playSound(net.minecraft.core.ISourceBlock) -> a
net.minecraft.core.dispenser.DefaultDispenseItemBehavior -> hy -> net.minecraft.core.dispenser.DispenseBehaviorItem
    M:net.minecraft.world.item.ItemStack dispense(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> dispense
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:void spawnItem(net.minecraft.world.level.World,net.minecraft.world.item.ItemStack,int,net.minecraft.core.EnumDirection,net.minecraft.core.IPosition) -> a
    M:void playSound(net.minecraft.core.ISourceBlock) -> a
    M:void playAnimation(net.minecraft.core.ISourceBlock,net.minecraft.core.EnumDirection) -> a
net.minecraft.core.dispenser.DispenseItemBehavior -> hz -> net.minecraft.core.dispenser.IDispenseBehavior
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.core.dispenser.IDispenseBehavior NOOP -> b
    F:net.minecraft.core.dispenser.DispenseBehaviorItem defaultDispenseItemBehavior -> c
    F:net.minecraft.core.dispenser.DispenseBehaviorItem defaultDispenseItemBehavior -> c
    F:net.minecraft.core.dispenser.DispenseBehaviorItem defaultDispenseItemBehavior -> c
    F:net.minecraft.core.dispenser.DispenseBehaviorItem defaultDispenseItemBehavior -> c
    M:void bootStrap() -> c
    M:void setEntityPokingOutOfBlock(net.minecraft.core.ISourceBlock,net.minecraft.world.entity.Entity,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.entity.projectile.IProjectile getProjectile(net.minecraft.world.level.World,net.minecraft.core.IPosition,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:void playSound(net.minecraft.core.ISourceBlock) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:void playSound(net.minecraft.core.ISourceBlock) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.entity.projectile.IProjectile getProjectile(net.minecraft.world.level.World,net.minecraft.core.IPosition,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack takeLiquid(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.entity.projectile.IProjectile getProjectile(net.minecraft.world.level.World,net.minecraft.core.IPosition,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.entity.projectile.IProjectile getProjectile(net.minecraft.world.level.World,net.minecraft.core.IPosition,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.entity.projectile.IProjectile getProjectile(net.minecraft.world.level.World,net.minecraft.core.IPosition,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.entity.projectile.IProjectile getProjectile(net.minecraft.world.level.World,net.minecraft.core.IPosition,net.minecraft.world.item.ItemStack) -> a
    M:float getUncertainty() -> a
    M:float getPower() -> b
    M:net.minecraft.world.item.ItemStack dispense(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> dispense
    M:net.minecraft.world.entity.projectile.IProjectile getProjectile(net.minecraft.world.level.World,net.minecraft.core.IPosition,net.minecraft.world.item.ItemStack) -> a
    M:float getUncertainty() -> a
    M:float getPower() -> b
    M:net.minecraft.world.item.ItemStack dispense(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> dispense
    M:net.minecraft.world.entity.projectile.IProjectile getProjectile(net.minecraft.world.level.World,net.minecraft.core.IPosition,net.minecraft.world.item.ItemStack) -> a
    M:float getUncertainty() -> a
    M:float getPower() -> b
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.dispenser.OptionalDispenseItemBehavior -> ia -> net.minecraft.core.dispenser.DispenseBehaviorMaybe
    F:boolean success -> c
    M:boolean isSuccess() -> a
    M:void setSuccess(boolean) -> a
    M:void playSound(net.minecraft.core.ISourceBlock) -> a
net.minecraft.core.dispenser.ShearsDispenseItemBehavior -> ib -> net.minecraft.core.dispenser.DispenseBehaviorShears
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:boolean tryShearBeehive(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:boolean tryShearLivingEntity(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> b
net.minecraft.core.dispenser.ShulkerBoxDispenseBehavior -> ic -> net.minecraft.core.dispenser.DispenseBehaviorShulkerBox
    F:org.slf4j.Logger LOGGER -> c
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.particles.BlockParticleOption -> ig -> net.minecraft.core.particles.ParticleParamBlock
    F:net.minecraft.core.particles.ParticleOptions$Deserializer DESERIALIZER -> a
    F:net.minecraft.core.particles.Particle type -> b
    F:net.minecraft.world.level.block.state.IBlockData state -> c
    M:com.mojang.serialization.Codec codec(net.minecraft.core.particles.Particle) -> a
    M:void writeToNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:java.lang.String writeToString() -> a
    M:net.minecraft.core.particles.Particle getType() -> b
    M:net.minecraft.world.level.block.state.IBlockData getState() -> c
    M:net.minecraft.core.particles.ParticleParamBlock fromCommand(net.minecraft.core.particles.Particle,com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.core.particles.ParticleParamBlock fromNetwork(net.minecraft.core.particles.Particle,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.core.particles.ParticleParam fromNetwork(net.minecraft.core.particles.Particle,net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.core.particles.ParticleParam fromCommand(net.minecraft.core.particles.Particle,com.mojang.brigadier.StringReader) -> b
net.minecraft.core.particles.DustColorTransitionOptions -> ih -> net.minecraft.core.particles.DustColorTransitionOptions
    F:com.mojang.math.Vector3fa SCULK_PARTICLE_COLOR -> a
    F:net.minecraft.core.particles.DustColorTransitionOptions SCULK_TO_REDSTONE -> b
    F:com.mojang.serialization.Codec CODEC -> c
    F:net.minecraft.core.particles.ParticleOptions$Deserializer DESERIALIZER -> d
    F:com.mojang.math.Vector3fa toColor -> i
    M:com.mojang.math.Vector3fa getFromColor() -> c
    M:com.mojang.math.Vector3fa getToColor() -> d
    M:void writeToNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:java.lang.String writeToString() -> a
    M:net.minecraft.core.particles.Particle getType() -> b
    M:net.minecraft.core.particles.DustColorTransitionOptions fromCommand(net.minecraft.core.particles.Particle,com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.core.particles.DustColorTransitionOptions fromNetwork(net.minecraft.core.particles.Particle,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.core.particles.ParticleParam fromNetwork(net.minecraft.core.particles.Particle,net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.core.particles.ParticleParam fromCommand(net.minecraft.core.particles.Particle,com.mojang.brigadier.StringReader) -> b
net.minecraft.core.particles.DustParticleOptions -> ii -> net.minecraft.core.particles.ParticleParamRedstone
    F:com.mojang.math.Vector3fa REDSTONE_PARTICLE_COLOR -> a
    F:net.minecraft.core.particles.ParticleParamRedstone REDSTONE -> b
    F:com.mojang.serialization.Codec CODEC -> c
    F:net.minecraft.core.particles.ParticleOptions$Deserializer DESERIALIZER -> d
    M:net.minecraft.core.particles.Particle getType() -> b
    M:net.minecraft.core.particles.ParticleParamRedstone fromCommand(net.minecraft.core.particles.Particle,com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.core.particles.ParticleParamRedstone fromNetwork(net.minecraft.core.particles.Particle,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.core.particles.ParticleParam fromNetwork(net.minecraft.core.particles.Particle,net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.core.particles.ParticleParam fromCommand(net.minecraft.core.particles.Particle,com.mojang.brigadier.StringReader) -> b
net.minecraft.core.particles.DustParticleOptionsBase -> ij -> net.minecraft.core.particles.DustParticleOptionsBase
    F:float MIN_SCALE -> e
    F:float MAX_SCALE -> f
    F:com.mojang.math.Vector3fa color -> g
    F:float scale -> h
    M:com.mojang.math.Vector3fa readVector3f(com.mojang.brigadier.StringReader) -> a
    M:com.mojang.math.Vector3fa readVector3f(net.minecraft.network.PacketDataSerializer) -> b
    M:void writeToNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:java.lang.String writeToString() -> a
    M:com.mojang.math.Vector3fa getColor() -> e
    M:float getScale() -> f
net.minecraft.core.particles.ItemParticleOption -> ik -> net.minecraft.core.particles.ParticleParamItem
    F:net.minecraft.core.particles.ParticleOptions$Deserializer DESERIALIZER -> a
    F:net.minecraft.core.particles.Particle type -> b
    F:net.minecraft.world.item.ItemStack itemStack -> c
    M:com.mojang.serialization.Codec codec(net.minecraft.core.particles.Particle) -> a
    M:void writeToNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:java.lang.String writeToString() -> a
    M:net.minecraft.core.particles.Particle getType() -> b
    M:net.minecraft.world.item.ItemStack getItem() -> c
    M:net.minecraft.core.particles.ParticleParamItem fromCommand(net.minecraft.core.particles.Particle,com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.core.particles.ParticleParamItem fromNetwork(net.minecraft.core.particles.Particle,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.core.particles.ParticleParam fromNetwork(net.minecraft.core.particles.Particle,net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.core.particles.ParticleParam fromCommand(net.minecraft.core.particles.Particle,com.mojang.brigadier.StringReader) -> b
net.minecraft.core.particles.ParticleGroup -> il -> net.minecraft.core.particles.ParticleGroup
    F:int limit -> b
    F:net.minecraft.core.particles.ParticleGroup SPORE_BLOSSOM -> a
    M:int getLimit() -> a
net.minecraft.core.particles.ParticleOptions -> im -> net.minecraft.core.particles.ParticleParam
net.minecraft.core.particles.ParticleOptions$Deserializer -> im$a -> net.minecraft.core.particles.ParticleParam$a
net.minecraft.core.particles.ParticleType -> in -> net.minecraft.core.particles.Particle
    F:boolean overrideLimiter -> a
    F:net.minecraft.core.particles.ParticleOptions$Deserializer deserializer -> b
    M:boolean getOverrideLimiter() -> c
    M:net.minecraft.core.particles.ParticleOptions$Deserializer getDeserializer() -> d
net.minecraft.core.particles.ParticleTypes -> io -> net.minecraft.core.particles.Particles
    F:net.minecraft.core.particles.ParticleType AMBIENT_ENTITY_EFFECT -> a
    F:net.minecraft.core.particles.ParticleType ANGRY_VILLAGER -> b
    F:net.minecraft.core.particles.Particle BLOCK -> c
    F:net.minecraft.core.particles.Particle BLOCK_MARKER -> d
    F:net.minecraft.core.particles.ParticleType BUBBLE -> e
    F:net.minecraft.core.particles.ParticleType CLOUD -> f
    F:net.minecraft.core.particles.ParticleType CRIT -> g
    F:net.minecraft.core.particles.ParticleType DAMAGE_INDICATOR -> h
    F:net.minecraft.core.particles.ParticleType DRAGON_BREATH -> i
    F:net.minecraft.core.particles.ParticleType DRIPPING_LAVA -> j
    F:net.minecraft.core.particles.ParticleType FALLING_LAVA -> k
    F:net.minecraft.core.particles.ParticleType LANDING_LAVA -> l
    F:net.minecraft.core.particles.ParticleType DRIPPING_WATER -> m
    F:net.minecraft.core.particles.ParticleType FALLING_WATER -> n
    F:net.minecraft.core.particles.Particle DUST -> o
    F:net.minecraft.core.particles.Particle DUST_COLOR_TRANSITION -> p
    F:net.minecraft.core.particles.ParticleType EFFECT -> q
    F:net.minecraft.core.particles.ParticleType ELDER_GUARDIAN -> r
    F:net.minecraft.core.particles.ParticleType ENCHANTED_HIT -> s
    F:net.minecraft.core.particles.ParticleType ENCHANT -> t
    F:net.minecraft.core.particles.ParticleType END_ROD -> u
    F:net.minecraft.core.particles.ParticleType ENTITY_EFFECT -> v
    F:net.minecraft.core.particles.ParticleType EXPLOSION_EMITTER -> w
    F:net.minecraft.core.particles.ParticleType EXPLOSION -> x
    F:net.minecraft.core.particles.ParticleType SONIC_BOOM -> y
    F:net.minecraft.core.particles.Particle FALLING_DUST -> z
    F:net.minecraft.core.particles.ParticleType SPIT -> aa
    F:net.minecraft.core.particles.ParticleType SQUID_INK -> ab
    F:net.minecraft.core.particles.ParticleType SWEEP_ATTACK -> ac
    F:net.minecraft.core.particles.ParticleType TOTEM_OF_UNDYING -> ad
    F:net.minecraft.core.particles.ParticleType UNDERWATER -> ae
    F:net.minecraft.core.particles.ParticleType SPLASH -> af
    F:net.minecraft.core.particles.ParticleType WITCH -> ag
    F:net.minecraft.core.particles.ParticleType BUBBLE_POP -> ah
    F:net.minecraft.core.particles.ParticleType CURRENT_DOWN -> ai
    F:net.minecraft.core.particles.ParticleType BUBBLE_COLUMN_UP -> aj
    F:net.minecraft.core.particles.ParticleType NAUTILUS -> ak
    F:net.minecraft.core.particles.ParticleType DOLPHIN -> al
    F:net.minecraft.core.particles.ParticleType CAMPFIRE_COSY_SMOKE -> am
    F:net.minecraft.core.particles.ParticleType CAMPFIRE_SIGNAL_SMOKE -> an
    F:net.minecraft.core.particles.ParticleType DRIPPING_HONEY -> ao
    F:net.minecraft.core.particles.ParticleType FALLING_HONEY -> ap
    F:net.minecraft.core.particles.ParticleType LANDING_HONEY -> aq
    F:net.minecraft.core.particles.ParticleType FALLING_NECTAR -> ar
    F:net.minecraft.core.particles.ParticleType FALLING_SPORE_BLOSSOM -> as
    F:net.minecraft.core.particles.ParticleType ASH -> at
    F:net.minecraft.core.particles.ParticleType CRIMSON_SPORE -> au
    F:net.minecraft.core.particles.ParticleType WARPED_SPORE -> av
    F:net.minecraft.core.particles.ParticleType SPORE_BLOSSOM_AIR -> aw
    F:net.minecraft.core.particles.ParticleType DRIPPING_OBSIDIAN_TEAR -> ax
    F:net.minecraft.core.particles.ParticleType FALLING_OBSIDIAN_TEAR -> ay
    F:net.minecraft.core.particles.ParticleType LANDING_OBSIDIAN_TEAR -> az
    M:net.minecraft.core.particles.ParticleType register(java.lang.String,boolean) -> a
    M:net.minecraft.core.particles.Particle register(java.lang.String,boolean,net.minecraft.core.particles.ParticleOptions$Deserializer,java.util.function.Function) -> a
    M:com.mojang.serialization.Codec codec() -> e
net.minecraft.core.particles.SculkChargeParticleOptions -> ip -> net.minecraft.core.particles.SculkChargeParticleOptions
    F:float roll -> c
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.core.particles.ParticleOptions$Deserializer DESERIALIZER -> b
    M:net.minecraft.core.particles.Particle getType() -> b
    M:void writeToNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:java.lang.String writeToString() -> a
    M:boolean equals(java.lang.Object) -> equals
    M:float roll() -> c
    M:net.minecraft.core.particles.SculkChargeParticleOptions fromCommand(net.minecraft.core.particles.Particle,com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.core.particles.SculkChargeParticleOptions fromNetwork(net.minecraft.core.particles.Particle,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.core.particles.ParticleParam fromNetwork(net.minecraft.core.particles.Particle,net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.core.particles.ParticleParam fromCommand(net.minecraft.core.particles.Particle,com.mojang.brigadier.StringReader) -> b
net.minecraft.core.particles.ShriekParticleOption -> iq -> net.minecraft.core.particles.ShriekParticleOption
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.core.particles.ParticleOptions$Deserializer DESERIALIZER -> b
    F:int delay -> c
    M:void writeToNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:java.lang.String writeToString() -> a
    M:net.minecraft.core.particles.Particle getType() -> b
    M:int getDelay() -> c
    M:net.minecraft.core.particles.ShriekParticleOption fromCommand(net.minecraft.core.particles.Particle,com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.core.particles.ShriekParticleOption fromNetwork(net.minecraft.core.particles.Particle,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.core.particles.ParticleParam fromNetwork(net.minecraft.core.particles.Particle,net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.core.particles.ParticleParam fromCommand(net.minecraft.core.particles.Particle,com.mojang.brigadier.StringReader) -> b
net.minecraft.core.particles.SimpleParticleType -> ir -> net.minecraft.core.particles.ParticleType
    F:net.minecraft.core.particles.ParticleOptions$Deserializer DESERIALIZER -> a
    F:com.mojang.serialization.Codec codec -> b
    M:net.minecraft.core.particles.ParticleType getType() -> f
    M:com.mojang.serialization.Codec codec() -> e
    M:void writeToNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:java.lang.String writeToString() -> a
    M:net.minecraft.core.particles.Particle getType() -> b
    M:net.minecraft.core.particles.ParticleType fromCommand(net.minecraft.core.particles.Particle,com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.core.particles.ParticleType fromNetwork(net.minecraft.core.particles.Particle,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.core.particles.ParticleParam fromNetwork(net.minecraft.core.particles.Particle,net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.core.particles.ParticleParam fromCommand(net.minecraft.core.particles.Particle,com.mojang.brigadier.StringReader) -> b
net.minecraft.core.particles.VibrationParticleOption -> is -> net.minecraft.core.particles.VibrationParticleOption
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.core.particles.ParticleOptions$Deserializer DESERIALIZER -> b
    F:net.minecraft.world.level.gameevent.PositionSource destination -> c
    F:int arrivalInTicks -> d
    M:void writeToNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:java.lang.String writeToString() -> a
    M:net.minecraft.core.particles.Particle getType() -> b
    M:net.minecraft.world.level.gameevent.PositionSource getDestination() -> c
    M:int getArrivalInTicks() -> d
    M:net.minecraft.core.particles.VibrationParticleOption fromCommand(net.minecraft.core.particles.Particle,com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.core.particles.VibrationParticleOption fromNetwork(net.minecraft.core.particles.Particle,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.core.particles.ParticleParam fromNetwork(net.minecraft.core.particles.Particle,net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.core.particles.ParticleParam fromCommand(net.minecraft.core.particles.Particle,com.mojang.brigadier.StringReader) -> b
net.minecraft.data.BlockFamilies -> iu -> net.minecraft.data.BlockFamilies
    F:java.util.Map MAP -> aj
    F:java.lang.String RECIPE_GROUP_PREFIX_WOODEN -> ak
    F:java.lang.String RECIPE_UNLOCKED_BY_HAS_PLANKS -> al
    F:net.minecraft.data.BlockFamily ACACIA_PLANKS -> a
    F:net.minecraft.data.BlockFamily BIRCH_PLANKS -> b
    F:net.minecraft.data.BlockFamily CRIMSON_PLANKS -> c
    F:net.minecraft.data.BlockFamily JUNGLE_PLANKS -> d
    F:net.minecraft.data.BlockFamily OAK_PLANKS -> e
    F:net.minecraft.data.BlockFamily DARK_OAK_PLANKS -> f
    F:net.minecraft.data.BlockFamily SPRUCE_PLANKS -> g
    F:net.minecraft.data.BlockFamily WARPED_PLANKS -> h
    F:net.minecraft.data.BlockFamily MANGROVE_PLANKS -> i
    F:net.minecraft.data.BlockFamily MUD_BRICKS -> j
    F:net.minecraft.data.BlockFamily ANDESITE -> k
    F:net.minecraft.data.BlockFamily POLISHED_ANDESITE -> l
    F:net.minecraft.data.BlockFamily BLACKSTONE -> m
    F:net.minecraft.data.BlockFamily POLISHED_BLACKSTONE -> n
    F:net.minecraft.data.BlockFamily POLISHED_BLACKSTONE_BRICKS -> o
    F:net.minecraft.data.BlockFamily BRICKS -> p
    F:net.minecraft.data.BlockFamily END_STONE_BRICKS -> q
    F:net.minecraft.data.BlockFamily MOSSY_STONE_BRICKS -> r
    F:net.minecraft.data.BlockFamily COPPER_BLOCK -> s
    F:net.minecraft.data.BlockFamily CUT_COPPER -> t
    F:net.minecraft.data.BlockFamily WAXED_COPPER_BLOCK -> u
    F:net.minecraft.data.BlockFamily WAXED_CUT_COPPER -> v
    F:net.minecraft.data.BlockFamily EXPOSED_COPPER -> w
    F:net.minecraft.data.BlockFamily EXPOSED_CUT_COPPER -> x
    F:net.minecraft.data.BlockFamily WAXED_EXPOSED_COPPER -> y
    F:net.minecraft.data.BlockFamily WAXED_EXPOSED_CUT_COPPER -> z
    F:net.minecraft.data.BlockFamily CUT_RED_SANDSTONE -> aa
    F:net.minecraft.data.BlockFamily SMOOTH_RED_SANDSTONE -> ab
    F:net.minecraft.data.BlockFamily STONE -> ac
    F:net.minecraft.data.BlockFamily STONE_BRICK -> ad
    F:net.minecraft.data.BlockFamily DEEPSLATE -> ae
    F:net.minecraft.data.BlockFamily COBBLED_DEEPSLATE -> af
    F:net.minecraft.data.BlockFamily POLISHED_DEEPSLATE -> ag
    F:net.minecraft.data.BlockFamily DEEPSLATE_BRICKS -> ah
    F:net.minecraft.data.BlockFamily DEEPSLATE_TILES -> ai
    M:net.minecraft.data.BlockFamily$Builder familyBuilder(net.minecraft.world.level.block.Block) -> a
    M:java.util.stream.Stream getAllFamilies() -> a
net.minecraft.data.BlockFamily -> iv -> net.minecraft.data.BlockFamily
    F:net.minecraft.world.level.block.Block baseBlock -> a
    F:java.util.Map variants -> b
    F:boolean generateModel -> c
    F:boolean generateRecipe -> d
    F:java.lang.String recipeGroupPrefix -> e
    F:java.lang.String recipeUnlockedBy -> f
    M:net.minecraft.world.level.block.Block getBaseBlock() -> a
    M:java.util.Map getVariants() -> b
    M:net.minecraft.world.level.block.Block get(net.minecraft.data.BlockFamily$Variant) -> a
    M:boolean shouldGenerateModel() -> c
    M:boolean shouldGenerateRecipe() -> d
    M:java.util.Optional getRecipeGroupPrefix() -> e
    M:java.util.Optional getRecipeUnlockedBy() -> f
net.minecraft.data.BlockFamily$Builder -> iv$a -> net.minecraft.data.BlockFamily$a
    F:net.minecraft.data.BlockFamily family -> a
    M:net.minecraft.data.BlockFamily getFamily() -> a
    M:net.minecraft.data.BlockFamily$Builder button(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.data.BlockFamily$Builder chiseled(net.minecraft.world.level.block.Block) -> b
    M:net.minecraft.data.BlockFamily$Builder cracked(net.minecraft.world.level.block.Block) -> c
    M:net.minecraft.data.BlockFamily$Builder cut(net.minecraft.world.level.block.Block) -> d
    M:net.minecraft.data.BlockFamily$Builder door(net.minecraft.world.level.block.Block) -> e
    M:net.minecraft.data.BlockFamily$Builder fence(net.minecraft.world.level.block.Block) -> f
    M:net.minecraft.data.BlockFamily$Builder fenceGate(net.minecraft.world.level.block.Block) -> g
    M:net.minecraft.data.BlockFamily$Builder sign(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.data.BlockFamily$Builder slab(net.minecraft.world.level.block.Block) -> h
    M:net.minecraft.data.BlockFamily$Builder stairs(net.minecraft.world.level.block.Block) -> i
    M:net.minecraft.data.BlockFamily$Builder pressurePlate(net.minecraft.world.level.block.Block) -> j
    M:net.minecraft.data.BlockFamily$Builder polished(net.minecraft.world.level.block.Block) -> k
    M:net.minecraft.data.BlockFamily$Builder trapdoor(net.minecraft.world.level.block.Block) -> l
    M:net.minecraft.data.BlockFamily$Builder wall(net.minecraft.world.level.block.Block) -> m
    M:net.minecraft.data.BlockFamily$Builder dontGenerateModel() -> b
    M:net.minecraft.data.BlockFamily$Builder dontGenerateRecipe() -> c
    M:net.minecraft.data.BlockFamily$Builder recipeGroupPrefix(java.lang.String) -> a
    M:net.minecraft.data.BlockFamily$Builder recipeUnlockedBy(java.lang.String) -> b
net.minecraft.data.BlockFamily$Variant -> iv$b -> net.minecraft.data.BlockFamily$b
    F:net.minecraft.data.BlockFamily$Variant BUTTON -> a
    F:net.minecraft.data.BlockFamily$Variant CHISELED -> b
    F:net.minecraft.data.BlockFamily$Variant CRACKED -> c
    F:net.minecraft.data.BlockFamily$Variant CUT -> d
    F:net.minecraft.data.BlockFamily$Variant DOOR -> e
    F:net.minecraft.data.BlockFamily$Variant FENCE -> f
    F:net.minecraft.data.BlockFamily$Variant FENCE_GATE -> g
    F:net.minecraft.data.BlockFamily$Variant SIGN -> h
    F:net.minecraft.data.BlockFamily$Variant SLAB -> i
    F:net.minecraft.data.BlockFamily$Variant STAIRS -> j
    F:net.minecraft.data.BlockFamily$Variant PRESSURE_PLATE -> k
    F:net.minecraft.data.BlockFamily$Variant POLISHED -> l
    F:net.minecraft.data.BlockFamily$Variant TRAPDOOR -> m
    F:net.minecraft.data.BlockFamily$Variant WALL -> n
    F:net.minecraft.data.BlockFamily$Variant WALL_SIGN -> o
    F:java.lang.String name -> p
    M:java.lang.String getName() -> a
net.minecraft.data.BuiltinRegistries -> iw -> net.minecraft.data.RegistryGeneration
    F:org.slf4j.Logger LOGGER -> r
    F:java.util.Map LOADERS -> s
    F:net.minecraft.core.IRegistryWritable WRITABLE_REGISTRY -> t
    F:net.minecraft.core.IRegistry REGISTRY -> a
    F:net.minecraft.core.IRegistry DIMENSION_TYPE -> b
    F:net.minecraft.core.IRegistry CONFIGURED_CARVER -> c
    F:net.minecraft.core.IRegistry CONFIGURED_FEATURE -> d
    F:net.minecraft.core.IRegistry PLACED_FEATURE -> e
    F:net.minecraft.core.IRegistry STRUCTURES -> f
    F:net.minecraft.core.IRegistry STRUCTURE_SETS -> g
    F:net.minecraft.core.IRegistry PROCESSOR_LIST -> h
    F:net.minecraft.core.IRegistry TEMPLATE_POOL -> i
    F:net.minecraft.core.IRegistry BIOME -> j
    F:net.minecraft.core.IRegistry NOISE -> k
    F:net.minecraft.core.IRegistry DENSITY_FUNCTION -> l
    F:net.minecraft.core.IRegistry NOISE_GENERATOR_SETTINGS -> m
    F:net.minecraft.core.IRegistry WORLD_PRESET -> n
    F:net.minecraft.core.IRegistry FLAT_LEVEL_GENERATOR_PRESET -> o
    F:net.minecraft.core.IRegistry CHAT_TYPE -> p
    F:net.minecraft.core.IRegistryCustom ACCESS -> q
    M:net.minecraft.core.IRegistry registerSimple(net.minecraft.resources.ResourceKey,net.minecraft.data.BuiltinRegistries$RegistryBootstrap) -> a
    M:net.minecraft.core.IRegistry registerSimple(net.minecraft.resources.ResourceKey,com.mojang.serialization.Lifecycle,net.minecraft.data.BuiltinRegistries$RegistryBootstrap) -> a
    M:net.minecraft.core.IRegistryWritable internalRegister(net.minecraft.resources.ResourceKey,net.minecraft.core.IRegistryWritable,net.minecraft.data.BuiltinRegistries$RegistryBootstrap,com.mojang.serialization.Lifecycle) -> a
    M:net.minecraft.core.Holder registerExact(net.minecraft.core.IRegistry,java.lang.String,java.lang.Object) -> a
    M:net.minecraft.core.Holder register(net.minecraft.core.IRegistry,java.lang.String,java.lang.Object) -> b
    M:net.minecraft.core.Holder register(net.minecraft.core.IRegistry,net.minecraft.resources.MinecraftKey,java.lang.Object) -> a
    M:net.minecraft.core.Holder register(net.minecraft.core.IRegistry,net.minecraft.resources.ResourceKey,java.lang.Object) -> a
    M:void bootstrap() -> a
net.minecraft.data.BuiltinRegistries$RegistryBootstrap -> iw$a -> net.minecraft.data.RegistryGeneration$a
net.minecraft.data.CachedOutput -> ix -> net.minecraft.data.CachedOutput
    F:net.minecraft.data.CachedOutput NO_CACHE -> a
net.minecraft.data.DataGenerator -> iy -> net.minecraft.data.DebugReportGenerator
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.Collection inputFolders -> b
    F:java.nio.file.Path outputFolder -> c
    F:java.util.List allProviders -> d
    F:java.util.List providersToRun -> e
    F:net.minecraft.WorldVersion version -> f
    F:boolean alwaysGenerate -> g
    M:java.util.Collection getInputFolders() -> a
    M:java.nio.file.Path getOutputFolder() -> b
    M:java.nio.file.Path getOutputFolder(net.minecraft.data.DataGenerator$Target) -> a
    M:void run() -> c
    M:void addProvider(boolean,net.minecraft.data.DebugReportProvider) -> a
    M:net.minecraft.data.DataGenerator$PathProvider createPathProvider(net.minecraft.data.DataGenerator$Target,java.lang.String) -> a
net.minecraft.data.DataGenerator$PathProvider -> iy$a -> net.minecraft.data.DebugReportGenerator$a
    F:java.nio.file.Path root -> a
    F:java.lang.String kind -> b
    M:java.nio.file.Path file(net.minecraft.resources.MinecraftKey,java.lang.String) -> a
    M:java.nio.file.Path json(net.minecraft.resources.MinecraftKey) -> a
net.minecraft.data.DataGenerator$Target -> iy$b -> net.minecraft.data.DebugReportGenerator$b
    F:net.minecraft.data.DataGenerator$Target DATA_PACK -> a
    F:net.minecraft.data.DataGenerator$Target RESOURCE_PACK -> b
    F:net.minecraft.data.DataGenerator$Target REPORTS -> c
    F:java.lang.String directory -> d
net.minecraft.data.DataProvider -> iz -> net.minecraft.data.DebugReportProvider
    F:java.util.function.ToIntFunction FIXED_ORDER_FIELDS -> a
    F:java.util.Comparator KEY_COMPARATOR -> b
    M:void saveStable(net.minecraft.data.CachedOutput,com.google.gson.JsonElement,java.nio.file.Path) -> a
net.minecraft.data.HashCache -> ja -> net.minecraft.data.HashCache
    F:org.slf4j.Logger LOGGER -> a
    F:java.lang.String HEADER_MARKER -> b
    F:java.nio.file.Path rootDir -> c
    F:java.nio.file.Path cacheDir -> d
    F:java.lang.String versionId -> e
    F:java.util.Map existingCaches -> f
    F:java.util.Map cachesToWrite -> g
    F:java.util.Set cachePaths -> h
    F:int initialCount -> i
    M:java.nio.file.Path getProviderCachePath(net.minecraft.data.DebugReportProvider) -> c
    M:net.minecraft.data.HashCache$ProviderCache readCache(java.nio.file.Path,java.nio.file.Path) -> a
    M:boolean shouldRunInThisVersion(net.minecraft.data.DebugReportProvider) -> a
    M:net.minecraft.data.CachedOutput getUpdater(net.minecraft.data.DebugReportProvider) -> b
    M:void purgeStaleAndWrite() -> a
net.minecraft.data.HashCache$CacheUpdater -> ja$a -> net.minecraft.data.HashCache$a
    F:net.minecraft.data.HashCache$ProviderCache oldCache -> b
    F:net.minecraft.data.HashCache$ProviderCache newCache -> c
    F:int writes -> d
    M:boolean shouldWrite(java.nio.file.Path,com.google.common.hash.HashCode) -> a
net.minecraft.data.HashCache$ProviderCache -> ja$b -> net.minecraft.data.HashCache$b
    F:java.lang.String version -> a
    F:java.util.Map data -> b
    M:com.google.common.hash.HashCode get(java.nio.file.Path) -> a
    M:void put(java.nio.file.Path,com.google.common.hash.HashCode) -> a
    M:int count() -> a
    M:net.minecraft.data.HashCache$ProviderCache load(java.nio.file.Path,java.nio.file.Path) -> a
    M:void save(java.nio.file.Path,java.nio.file.Path,java.lang.String) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String version() -> b
    M:java.util.Map data() -> c
    M:void main(java.lang.String[]) -> main
    M:net.minecraft.data.DebugReportGenerator createStandardGenerator(java.nio.file.Path,java.util.Collection,boolean,boolean,boolean,boolean,boolean,net.minecraft.WorldVersion,boolean) -> a
net.minecraft.data.advancements.AdvancementProvider -> jb -> net.minecraft.data.advancements.AdvancementProvider
    F:org.slf4j.Logger LOGGER -> c
    F:net.minecraft.data.DataGenerator$PathProvider pathProvider -> d
    F:java.util.List tabs -> e
    M:void run(net.minecraft.data.CachedOutput) -> a
    M:java.lang.String getName() -> a
net.minecraft.data.advancements.AdventureAdvancements -> jc -> net.minecraft.data.advancements.AdventureAdvancements
    F:int DISTANCE_FROM_BOTTOM_TO_TOP -> a
    F:int Y_COORDINATE_AT_TOP -> b
    F:int Y_COORDINATE_AT_BOTTOM -> c
    F:int BEDROCK_THICKNESS -> d
    M:net.minecraft.advancements.critereon.LightningStrikeTrigger$TriggerInstance fireCountAndBystander(net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange,net.minecraft.advancements.critereon.CriterionConditionEntity) -> a
    M:net.minecraft.advancements.critereon.UsingItemTrigger$TriggerInstance lookAtThroughItem(net.minecraft.world.entity.EntityTypes,net.minecraft.world.item.Item) -> a
    M:void accept(java.util.function.Consumer) -> a
    M:net.minecraft.advancements.Advancement$SerializedAdvancement addMobsToKill(net.minecraft.advancements.Advancement$SerializedAdvancement) -> a
    M:net.minecraft.advancements.Advancement$SerializedAdvancement addBiomes(net.minecraft.advancements.Advancement$SerializedAdvancement,java.util.List) -> a
    M:void accept(java.lang.Object) -> accept
net.minecraft.data.advancements.HusbandryAdvancements -> jd -> net.minecraft.data.advancements.HusbandryAdvancements
    M:void accept(java.util.function.Consumer) -> a
    M:net.minecraft.advancements.Advancement$SerializedAdvancement addLeashedFrogVariants(net.minecraft.advancements.Advancement$SerializedAdvancement) -> a
    M:net.minecraft.advancements.Advancement$SerializedAdvancement addFood(net.minecraft.advancements.Advancement$SerializedAdvancement) -> b
    M:net.minecraft.advancements.Advancement$SerializedAdvancement addBreedable(net.minecraft.advancements.Advancement$SerializedAdvancement) -> c
    M:net.minecraft.advancements.Advancement$SerializedAdvancement addFishBuckets(net.minecraft.advancements.Advancement$SerializedAdvancement) -> d
    M:net.minecraft.advancements.Advancement$SerializedAdvancement addFish(net.minecraft.advancements.Advancement$SerializedAdvancement) -> e
    M:net.minecraft.advancements.Advancement$SerializedAdvancement addCatVariants(net.minecraft.advancements.Advancement$SerializedAdvancement) -> f
    M:void accept(java.lang.Object) -> accept
net.minecraft.data.advancements.NetherAdvancements -> je -> net.minecraft.data.advancements.NetherAdvancements
    F:java.util.List EXPLORABLE_BIOMES -> a
    F:net.minecraft.advancements.critereon.EntityPredicate$Composite DISTRACT_PIGLIN_PLAYER_ARMOR_PREDICATE -> b
    M:void accept(java.util.function.Consumer) -> a
    M:void accept(java.lang.Object) -> accept
net.minecraft.data.advancements.StoryAdvancements -> jf -> net.minecraft.data.advancements.StoryAdvancements
    M:void accept(java.util.function.Consumer) -> a
    M:void accept(java.lang.Object) -> accept
net.minecraft.data.advancements.TheEndAdvancements -> jg -> net.minecraft.data.advancements.TheEndAdvancements
    M:void accept(java.util.function.Consumer) -> a
    M:void accept(java.lang.Object) -> accept
net.minecraft.data.info.BiomeParametersDumpReport -> ji -> net.minecraft.data.info.BiomeParametersDumpReport
    F:org.slf4j.Logger LOGGER -> c
    F:java.nio.file.Path topPath -> d
    M:void run(net.minecraft.data.CachedOutput) -> a
    M:void dumpValue(java.nio.file.Path,net.minecraft.data.CachedOutput,com.mojang.serialization.DynamicOps,com.mojang.serialization.Encoder,java.lang.Object) -> a
    M:java.nio.file.Path createPath(net.minecraft.resources.MinecraftKey) -> a
    M:java.lang.String getName() -> a
net.minecraft.data.info.BlockListReport -> jj -> net.minecraft.data.info.BlockListReport
    F:net.minecraft.data.DebugReportGenerator generator -> c
    M:void run(net.minecraft.data.CachedOutput) -> a
    M:java.lang.String getName() -> a
net.minecraft.data.info.CommandsReport -> jk -> net.minecraft.data.info.CommandsReport
    F:net.minecraft.data.DebugReportGenerator generator -> c
    M:void run(net.minecraft.data.CachedOutput) -> a
    M:java.lang.String getName() -> a
net.minecraft.data.info.RegistryDumpReport -> jl -> net.minecraft.data.info.RegistryDumpReport
    F:net.minecraft.data.DebugReportGenerator generator -> c
    M:void run(net.minecraft.data.CachedOutput) -> a
    M:com.google.gson.JsonElement dumpRegistry(net.minecraft.core.IRegistry) -> a
    M:java.lang.String getName() -> a
net.minecraft.data.info.WorldgenRegistryDumpReport -> jm -> net.minecraft.data.info.WorldgenRegistryDumpReport
    F:org.slf4j.Logger LOGGER -> c
    F:net.minecraft.data.DebugReportGenerator generator -> d
    M:void run(net.minecraft.data.CachedOutput) -> a
    M:void dumpRegistryCap(net.minecraft.data.CachedOutput,net.minecraft.core.IRegistryCustom,com.mojang.serialization.DynamicOps,net.minecraft.core.IRegistryCustom$RegistryData) -> a
    M:void dumpValue(java.nio.file.Path,net.minecraft.data.CachedOutput,com.mojang.serialization.DynamicOps,com.mojang.serialization.Encoder,java.lang.Object) -> a
    M:java.lang.String getName() -> a
net.minecraft.data.loot.BlockLoot -> jo -> net.minecraft.data.loot.BlockLoot
    F:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder HAS_SILK_TOUCH -> a
    F:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder HAS_NO_SILK_TOUCH -> b
    F:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder HAS_SHEARS -> c
    F:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder HAS_SHEARS_OR_SILK_TOUCH -> d
    F:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder HAS_NO_SHEARS_OR_SILK_TOUCH -> e
    F:java.util.Set EXPLOSION_RESISTANT -> f
    F:java.util.Map map -> j
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionUser applyExplosionDecay(net.minecraft.world.level.IMaterial,net.minecraft.world.level.storage.loot.functions.LootItemFunctionUser) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionUser applyExplosionCondition(net.minecraft.world.level.IMaterial,net.minecraft.world.level.storage.loot.predicates.LootItemConditionUser) -> a
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createSingleItemTable(net.minecraft.world.level.IMaterial) -> a
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createSelfDropDispatchTable(net.minecraft.world.level.block.Block,net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> a
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createSilkTouchDispatchTable(net.minecraft.world.level.block.Block,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> a
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createShearsDispatchTable(net.minecraft.world.level.block.Block,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> b
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createSilkTouchOrShearsDispatchTable(net.minecraft.world.level.block.Block,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> c
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createSingleItemTableWithSilkTouch(net.minecraft.world.level.block.Block,net.minecraft.world.level.IMaterial) -> b
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createSingleItemTable(net.minecraft.world.level.IMaterial,net.minecraft.world.level.storage.loot.providers.number.NumberProvider) -> a
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createSingleItemTableWithSilkTouch(net.minecraft.world.level.block.Block,net.minecraft.world.level.IMaterial,net.minecraft.world.level.storage.loot.providers.number.NumberProvider) -> a
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createSilkTouchOnlyTable(net.minecraft.world.level.IMaterial) -> b
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createPotFlowerItemTable(net.minecraft.world.level.IMaterial) -> c
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createSlabItemTable(net.minecraft.world.level.block.Block) -> e
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createSinglePropConditionTable(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.state.properties.IBlockState,java.lang.Comparable) -> a
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createNameableBlockEntityTable(net.minecraft.world.level.block.Block) -> f
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createShulkerBoxDrop(net.minecraft.world.level.block.Block) -> g
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createCopperOreDrops(net.minecraft.world.level.block.Block) -> h
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createLapisOreDrops(net.minecraft.world.level.block.Block) -> i
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createRedstoneOreDrops(net.minecraft.world.level.block.Block) -> j
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createBannerDrop(net.minecraft.world.level.block.Block) -> k
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createBeeNestDrop(net.minecraft.world.level.block.Block) -> l
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createBeeHiveDrop(net.minecraft.world.level.block.Block) -> m
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createCaveVinesDrop(net.minecraft.world.level.block.Block) -> n
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createOreDrop(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item) -> a
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createMushroomBlockDrop(net.minecraft.world.level.block.Block,net.minecraft.world.level.IMaterial) -> c
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createGrassDrops(net.minecraft.world.level.block.Block) -> o
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createStemDrops(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item) -> b
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createAttachedStemDrops(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item) -> c
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createShearsOnlyDrop(net.minecraft.world.level.IMaterial) -> d
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createMultifaceBlockDrops(net.minecraft.world.level.block.Block,net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> a
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createLeavesDrops(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block,float[]) -> a
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createOakLeavesDrops(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block,float[]) -> b
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createMangroveLeavesDrops(net.minecraft.world.level.block.Block) -> p
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createCropDrops(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item,net.minecraft.world.item.Item,net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> a
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createDoublePlantShearsDrop(net.minecraft.world.level.block.Block) -> q
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createDoublePlantWithSeedDrops(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> b
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createCandleDrops(net.minecraft.world.level.block.Block) -> r
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createCandleCakeDrops(net.minecraft.world.level.block.Block) -> s
    M:net.minecraft.world.level.storage.loot.LootTable$Builder noDrop() -> a
    M:void accept(java.util.function.BiConsumer) -> a
    M:void addNetherVinesDropTable(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> c
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createDoorTable(net.minecraft.world.level.block.Block) -> a
    M:void dropPottedContents(net.minecraft.world.level.block.Block) -> b
    M:void otherWhenSilkTouch(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> a
    M:void dropOther(net.minecraft.world.level.block.Block,net.minecraft.world.level.IMaterial) -> a
    M:void dropWhenSilkTouch(net.minecraft.world.level.block.Block) -> c
    M:void dropSelf(net.minecraft.world.level.block.Block) -> d
    M:void add(net.minecraft.world.level.block.Block,java.util.function.Function) -> a
    M:void add(net.minecraft.world.level.block.Block,net.minecraft.world.level.storage.loot.LootTable$Builder) -> a
    M:void accept(java.lang.Object) -> accept
net.minecraft.data.loot.ChestLoot -> jp -> net.minecraft.data.loot.ChestLoot
    M:void accept(java.util.function.BiConsumer) -> a
    M:void accept(java.lang.Object) -> accept
net.minecraft.data.loot.EntityLoot -> jq -> net.minecraft.data.loot.EntityLoot
    F:net.minecraft.advancements.critereon.EntityPredicate$Builder ENTITY_ON_FIRE -> a
    F:java.util.Set SPECIAL_LOOT_TABLE_TYPES -> b
    F:java.util.Map map -> c
    M:net.minecraft.world.level.storage.loot.LootTable$Builder createSheepTable(net.minecraft.world.level.IMaterial) -> a
    M:void accept(java.util.function.BiConsumer) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder killedByFrog() -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder killedByFrogVariant(net.minecraft.world.entity.animal.FrogVariant) -> a
    M:void add(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.storage.loot.LootTable$Builder) -> a
    M:void add(net.minecraft.resources.MinecraftKey,net.minecraft.world.level.storage.loot.LootTable$Builder) -> a
    M:void accept(java.lang.Object) -> accept
net.minecraft.data.loot.FishingLoot -> jr -> net.minecraft.data.loot.FishingLoot
    F:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder IN_JUNGLE -> a
    F:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder IN_SPARSE_JUNGLE -> b
    F:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder IN_BAMBOO_JUNGLE -> c
    M:void accept(java.util.function.BiConsumer) -> a
    M:void accept(java.lang.Object) -> accept
net.minecraft.data.loot.GiftLoot -> js -> net.minecraft.data.loot.GiftLoot
    M:void accept(java.util.function.BiConsumer) -> a
    M:void accept(java.lang.Object) -> accept
net.minecraft.data.loot.LootTableProvider -> jt -> net.minecraft.data.loot.LootTableProvider
    F:org.slf4j.Logger LOGGER -> c
    F:net.minecraft.data.DataGenerator$PathProvider pathProvider -> d
    F:java.util.List subProviders -> e
    M:void run(net.minecraft.data.CachedOutput) -> a
    M:java.lang.String getName() -> a
net.minecraft.data.loot.PiglinBarterLoot -> ju -> net.minecraft.data.loot.PiglinBarterLoot
    M:void accept(java.util.function.BiConsumer) -> a
    M:void accept(java.lang.Object) -> accept
net.minecraft.data.models.BlockModelGenerators -> jw -> net.minecraft.data.models.BlockModelGenerators
    F:java.util.function.Consumer blockStateOutput -> b
    F:java.util.function.BiConsumer modelOutput -> c
    F:java.util.function.Consumer skippedAutoModelsOutput -> d
    F:java.util.List nonOrientableTrapdoor -> e
    F:java.util.Map fullBlockModelCustomGenerators -> f
    F:java.util.Map texturedModels -> g
    F:java.util.Map SHAPE_CONSUMERS -> h
    F:java.util.List MULTIFACE_GENERATOR -> a
    M:net.minecraft.data.models.blockstates.BlockStateGenerator createMirroredCubeGenerator(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.data.models.model.TextureMapping,java.util.function.BiConsumer) -> a
    M:net.minecraft.data.models.blockstates.BlockStateGenerator createNorthWestMirroredCubeGenerator(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.data.models.model.TextureMapping,java.util.function.BiConsumer) -> b
    M:net.minecraft.data.models.blockstates.BlockStateGenerator createMirroredColumnGenerator(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.data.models.model.TextureMapping,java.util.function.BiConsumer) -> c
    M:void skipAutoItemBlock(net.minecraft.world.level.block.Block) -> a
    M:void delegateItemModel(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey) -> a
    M:void delegateItemModel(net.minecraft.world.item.Item,net.minecraft.resources.MinecraftKey) -> a
    M:void createSimpleFlatItemModel(net.minecraft.world.item.Item) -> a
    M:void createSimpleFlatItemModel(net.minecraft.world.level.block.Block) -> b
    M:void createSimpleFlatItemModel(net.minecraft.world.level.block.Block,java.lang.String) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch createHorizontalFacingDispatch() -> b
    M:net.minecraft.data.models.blockstates.PropertyDispatch createHorizontalFacingDispatchAlt() -> c
    M:net.minecraft.data.models.blockstates.PropertyDispatch createTorchHorizontalDispatch() -> d
    M:net.minecraft.data.models.blockstates.PropertyDispatch createFacingDispatch() -> e
    M:net.minecraft.data.models.blockstates.MultiVariantGenerator createRotatedVariant(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey) -> b
    M:net.minecraft.data.models.blockstates.MultiVariantGenerator createRotatedVariant(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch createBooleanModelDispatch(net.minecraft.world.level.block.state.properties.BlockStateBoolean,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> a
    M:void createRotatedMirroredVariantBlock(net.minecraft.world.level.block.Block) -> c
    M:void createRotatedVariantBlock(net.minecraft.world.level.block.Block) -> d
    M:net.minecraft.data.models.blockstates.BlockStateGenerator createButton(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> b
    M:net.minecraft.data.models.blockstates.PropertyDispatch$C4 configureDoorHalf(net.minecraft.data.models.blockstates.PropertyDispatch$C4,net.minecraft.world.level.block.state.properties.BlockPropertyDoubleBlockHalf,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.data.models.blockstates.BlockStateGenerator createDoor(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.data.models.blockstates.BlockStateGenerator createFence(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> c
    M:net.minecraft.data.models.blockstates.BlockStateGenerator createWall(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.data.models.blockstates.BlockStateGenerator createFenceGate(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.data.models.blockstates.BlockStateGenerator createStairs(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> b
    M:net.minecraft.data.models.blockstates.BlockStateGenerator createOrientableTrapdoor(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> c
    M:net.minecraft.data.models.blockstates.BlockStateGenerator createTrapdoor(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> d
    M:net.minecraft.data.models.blockstates.MultiVariantGenerator createSimpleBlock(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey) -> c
    M:net.minecraft.data.models.blockstates.PropertyDispatch createRotatedPillar() -> f
    M:net.minecraft.data.models.blockstates.BlockStateGenerator createAxisAlignedPillarBlock(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey) -> d
    M:void createAxisAlignedPillarBlockCustomModel(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey) -> e
    M:void createAxisAlignedPillarBlock(net.minecraft.world.level.block.Block,net.minecraft.data.models.model.TexturedModel$Provider) -> a
    M:void createHorizontallyRotatedBlock(net.minecraft.world.level.block.Block,net.minecraft.data.models.model.TexturedModel$Provider) -> b
    M:net.minecraft.data.models.blockstates.BlockStateGenerator createRotatedPillarWithHorizontalVariant(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> d
    M:void createRotatedPillarWithHorizontalVariant(net.minecraft.world.level.block.Block,net.minecraft.data.models.model.TexturedModel$Provider,net.minecraft.data.models.model.TexturedModel$Provider) -> a
    M:net.minecraft.resources.MinecraftKey createSuffixedVariant(net.minecraft.world.level.block.Block,java.lang.String,net.minecraft.data.models.model.ModelTemplate,java.util.function.Function) -> a
    M:net.minecraft.data.models.blockstates.BlockStateGenerator createPressurePlate(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> e
    M:net.minecraft.data.models.blockstates.BlockStateGenerator createSlab(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> e
    M:void createTrivialCube(net.minecraft.world.level.block.Block) -> e
    M:void createTrivialBlock(net.minecraft.world.level.block.Block,net.minecraft.data.models.model.TexturedModel$Provider) -> c
    M:void createTrivialBlock(net.minecraft.world.level.block.Block,net.minecraft.data.models.model.TextureMapping,net.minecraft.data.models.model.ModelTemplate) -> a
    M:net.minecraft.data.models.BlockModelGenerators$BlockFamilyProvider family(net.minecraft.world.level.block.Block) -> f
    M:void createDoor(net.minecraft.world.level.block.Block) -> g
    M:void createOrientableTrapdoor(net.minecraft.world.level.block.Block) -> h
    M:void createTrapdoor(net.minecraft.world.level.block.Block) -> i
    M:void createBigDripLeafBlock() -> g
    M:net.minecraft.data.models.BlockModelGenerators$WoodProvider woodProvider(net.minecraft.world.level.block.Block) -> j
    M:void createNonTemplateModelBlock(net.minecraft.world.level.block.Block) -> k
    M:void createNonTemplateModelBlock(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> a
    M:void createCrossBlockWithDefaultItem(net.minecraft.world.level.block.Block,net.minecraft.data.models.BlockModelGenerators$TintState) -> a
    M:void createCrossBlockWithDefaultItem(net.minecraft.world.level.block.Block,net.minecraft.data.models.BlockModelGenerators$TintState,net.minecraft.data.models.model.TextureMapping) -> a
    M:void createCrossBlock(net.minecraft.world.level.block.Block,net.minecraft.data.models.BlockModelGenerators$TintState) -> b
    M:void createCrossBlock(net.minecraft.world.level.block.Block,net.minecraft.data.models.BlockModelGenerators$TintState,net.minecraft.data.models.model.TextureMapping) -> b
    M:void createPlant(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block,net.minecraft.data.models.BlockModelGenerators$TintState) -> a
    M:void createCoralFans(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> b
    M:void createStems(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> c
    M:void createCoral(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> a
    M:void createDoublePlant(net.minecraft.world.level.block.Block,net.minecraft.data.models.BlockModelGenerators$TintState) -> c
    M:void createSunflower() -> h
    M:void createTallSeagrass() -> i
    M:void createSmallDripleaf() -> j
    M:void createDoubleBlock(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> f
    M:void createPassiveRail(net.minecraft.world.level.block.Block) -> l
    M:void createActiveRail(net.minecraft.world.level.block.Block) -> m
    M:net.minecraft.data.models.BlockModelGenerators$BlockEntityModelGenerator blockEntityModels(net.minecraft.resources.MinecraftKey,net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.data.models.BlockModelGenerators$BlockEntityModelGenerator blockEntityModels(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> d
    M:void createAirLikeBlock(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item) -> a
    M:void createAirLikeBlock(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey) -> f
    M:void createFullAndCarpetBlocks(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> e
    M:void createColoredBlockWithRandomRotations(net.minecraft.data.models.model.TexturedModel$Provider,net.minecraft.world.level.block.Block[]) -> a
    M:void createColoredBlockWithStateRotations(net.minecraft.data.models.model.TexturedModel$Provider,net.minecraft.world.level.block.Block[]) -> b
    M:void createGlassBlocks(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> f
    M:void createCommandBlock(net.minecraft.world.level.block.Block) -> n
    M:void createAnvil(net.minecraft.world.level.block.Block) -> o
    M:java.util.List createBambooModels(int) -> a
    M:void createBamboo() -> k
    M:net.minecraft.data.models.blockstates.PropertyDispatch createColumnWithFacing() -> l
    M:void createBarrel() -> m
    M:net.minecraft.data.models.blockstates.PropertyDispatch createEmptyOrFullDispatch(net.minecraft.world.level.block.state.properties.IBlockState,java.lang.Comparable,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> a
    M:void createBeeNest(net.minecraft.world.level.block.Block,java.util.function.Function) -> a
    M:void createCropBlock(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.state.properties.IBlockState,int[]) -> a
    M:void createBell() -> n
    M:void createGrindstone() -> o
    M:void createFurnace(net.minecraft.world.level.block.Block,net.minecraft.data.models.model.TexturedModel$Provider) -> d
    M:void createCampfires(net.minecraft.world.level.block.Block[]) -> a
    M:void createAzalea(net.minecraft.world.level.block.Block) -> p
    M:void createPottedAzalea(net.minecraft.world.level.block.Block) -> q
    M:void createBookshelf() -> p
    M:void createRedstoneWire() -> q
    M:void createComparator() -> r
    M:void createSmoothStoneSlab() -> s
    M:void createBrewingStand() -> t
    M:void createMushroomBlock(net.minecraft.world.level.block.Block) -> r
    M:void createCakeBlock() -> u
    M:void createCartographyTable() -> v
    M:void createSmithingTable() -> w
    M:void createCraftingTableLike(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block,java.util.function.BiFunction) -> a
    M:void createPumpkins() -> x
    M:void createPumpkinVariant(net.minecraft.world.level.block.Block,net.minecraft.data.models.model.TextureMapping) -> a
    M:void createCauldrons() -> y
    M:void createChorusFlower() -> z
    M:void createDispenserBlock(net.minecraft.world.level.block.Block) -> s
    M:void createAmethystCluster(net.minecraft.world.level.block.Block) -> t
    M:net.minecraft.data.models.blockstates.Variant createPointedDripstoneVariant(net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.properties.DripstoneThickness) -> a
    M:void createNyliumBlock(net.minecraft.world.level.block.Block) -> u
    M:void createRotatableColumn(net.minecraft.world.level.block.Block) -> v
    M:java.util.List createFloorFireModels(net.minecraft.world.level.block.Block) -> w
    M:java.util.List createSideFireModels(net.minecraft.world.level.block.Block) -> x
    M:java.util.List createTopFireModels(net.minecraft.world.level.block.Block) -> y
    M:java.util.List wrapModels(java.util.List,java.util.function.UnaryOperator) -> a
    M:void createLantern(net.minecraft.world.level.block.Block) -> z
    M:void createGrassLikeBlock(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.data.models.blockstates.Variant) -> a
    M:void createWeightedPressurePlate(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> g
    M:void copyModel(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> h
    M:void createPistonVariant(net.minecraft.world.level.block.Block,net.minecraft.resources.MinecraftKey,net.minecraft.data.models.model.TextureMapping) -> a
    M:void createSculkSensor() -> aa
    M:void createSculkShrieker() -> ab
    M:void createScaffolding() -> ac
    M:void createCaveVines() -> ad
    M:void createRedstoneLamp() -> ae
    M:void createNormalTorch(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> i
    M:void createRedstoneTorch() -> af
    M:void createRepeater() -> ag
    M:void createSeaPickle() -> ah
    M:void createSnowBlocks() -> ai
    M:void createStonecutter() -> aj
    M:void createStructureBlock() -> ak
    M:void createSweetBerryBush() -> al
    M:void createTripwire() -> am
    M:void createTripwireHook() -> an
    M:net.minecraft.resources.MinecraftKey createTurtleEggModel(int,java.lang.String,net.minecraft.data.models.model.TextureMapping) -> a
    M:net.minecraft.resources.MinecraftKey createTurtleEggModel(java.lang.Integer,java.lang.Integer) -> a
    M:void createTurtleEgg() -> ao
    M:void createSculkCatalyst() -> ap
    M:void createMagmaBlock() -> aq
    M:void createGrowingPlant(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block,net.minecraft.data.models.BlockModelGenerators$TintState) -> b
    M:void createBedItem(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> j
    M:void createInfestedStone() -> ar
    M:void createInfestedDeepslate() -> as
    M:void createNetherRoots(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> k
    M:void createRespawnAnchor() -> at
    M:net.minecraft.data.models.blockstates.Variant applyRotation(net.minecraft.core.BlockPropertyJigsawOrientation,net.minecraft.data.models.blockstates.Variant) -> a
    M:void createJigsaw() -> au
    M:void createPetrifiedOakSlab() -> av
    M:void run() -> a
    M:void createLightBlock() -> aw
    M:void createCandleAndCandleCake(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> l
net.minecraft.data.models.BlockModelGenerators$BlockEntityModelGenerator -> jw$a -> net.minecraft.data.models.BlockModelGenerators$a
    F:net.minecraft.resources.MinecraftKey baseModel -> b
    M:net.minecraft.data.models.BlockModelGenerators$BlockEntityModelGenerator create(net.minecraft.world.level.block.Block[]) -> a
    M:net.minecraft.data.models.BlockModelGenerators$BlockEntityModelGenerator createWithoutBlockItem(net.minecraft.world.level.block.Block[]) -> b
    M:net.minecraft.data.models.BlockModelGenerators$BlockEntityModelGenerator createWithCustomBlockItemModel(net.minecraft.data.models.model.ModelTemplate,net.minecraft.world.level.block.Block[]) -> a
net.minecraft.data.models.BlockModelGenerators$BlockFamilyProvider -> jw$b -> net.minecraft.data.models.BlockModelGenerators$b
    F:net.minecraft.data.models.model.TextureMapping mapping -> b
    F:java.util.Map models -> c
    F:net.minecraft.data.BlockFamily family -> d
    F:net.minecraft.resources.MinecraftKey fullBlock -> e
    M:net.minecraft.data.models.BlockModelGenerators$BlockFamilyProvider fullBlock(net.minecraft.world.level.block.Block,net.minecraft.data.models.model.ModelTemplate) -> a
    M:net.minecraft.data.models.BlockModelGenerators$BlockFamilyProvider fullBlockCopies(net.minecraft.world.level.block.Block[]) -> a
    M:net.minecraft.data.models.BlockModelGenerators$BlockFamilyProvider button(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.data.models.BlockModelGenerators$BlockFamilyProvider wall(net.minecraft.world.level.block.Block) -> b
    M:net.minecraft.data.models.BlockModelGenerators$BlockFamilyProvider fence(net.minecraft.world.level.block.Block) -> c
    M:net.minecraft.data.models.BlockModelGenerators$BlockFamilyProvider fenceGate(net.minecraft.world.level.block.Block) -> d
    M:net.minecraft.data.models.BlockModelGenerators$BlockFamilyProvider pressurePlate(net.minecraft.world.level.block.Block) -> e
    M:net.minecraft.data.models.BlockModelGenerators$BlockFamilyProvider sign(net.minecraft.world.level.block.Block) -> f
    M:net.minecraft.data.models.BlockModelGenerators$BlockFamilyProvider slab(net.minecraft.world.level.block.Block) -> g
    M:net.minecraft.data.models.BlockModelGenerators$BlockFamilyProvider stairs(net.minecraft.world.level.block.Block) -> h
    M:net.minecraft.data.models.BlockModelGenerators$BlockFamilyProvider fullBlockVariant(net.minecraft.world.level.block.Block) -> i
    M:net.minecraft.data.models.BlockModelGenerators$BlockFamilyProvider door(net.minecraft.world.level.block.Block) -> j
    M:void trapdoor(net.minecraft.world.level.block.Block) -> k
    M:net.minecraft.resources.MinecraftKey getOrCreateModel(net.minecraft.data.models.model.ModelTemplate,net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.data.models.BlockModelGenerators$BlockFamilyProvider generateFor(net.minecraft.data.BlockFamily) -> a
net.minecraft.data.models.BlockModelGenerators$BlockStateGeneratorSupplier -> jw$c -> net.minecraft.data.models.BlockModelGenerators$c
net.minecraft.data.models.BlockModelGenerators$TintState -> jw$d -> net.minecraft.data.models.BlockModelGenerators$d
    F:net.minecraft.data.models.BlockModelGenerators$TintState TINTED -> a
    F:net.minecraft.data.models.BlockModelGenerators$TintState NOT_TINTED -> b
    M:net.minecraft.data.models.model.ModelTemplate getCross() -> a
    M:net.minecraft.data.models.model.ModelTemplate getCrossPot() -> b
net.minecraft.data.models.BlockModelGenerators$WoodProvider -> jw$e -> net.minecraft.data.models.BlockModelGenerators$e
    F:net.minecraft.data.models.model.TextureMapping logMapping -> b
    M:net.minecraft.data.models.BlockModelGenerators$WoodProvider wood(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.data.models.BlockModelGenerators$WoodProvider log(net.minecraft.world.level.block.Block) -> b
    M:net.minecraft.data.models.BlockModelGenerators$WoodProvider logWithHorizontal(net.minecraft.world.level.block.Block) -> c
net.minecraft.data.models.ItemModelGenerators -> jx -> net.minecraft.data.models.ItemModelGenerators
    F:java.util.function.BiConsumer output -> a
    M:void generateFlatItem(net.minecraft.world.item.Item,net.minecraft.data.models.model.ModelTemplate) -> a
    M:void generateFlatItem(net.minecraft.world.item.Item,java.lang.String,net.minecraft.data.models.model.ModelTemplate) -> a
    M:void generateFlatItem(net.minecraft.world.item.Item,net.minecraft.world.item.Item,net.minecraft.data.models.model.ModelTemplate) -> a
    M:void generateCompassItem(net.minecraft.world.item.Item) -> a
    M:void generateClockItem(net.minecraft.world.item.Item) -> b
    M:void run() -> a
net.minecraft.data.models.ModelProvider -> jy -> net.minecraft.data.models.ModelProvider
    F:org.slf4j.Logger LOGGER -> c
    F:net.minecraft.data.DataGenerator$PathProvider blockStatePathProvider -> d
    F:net.minecraft.data.DataGenerator$PathProvider modelPathProvider -> e
    M:void run(net.minecraft.data.CachedOutput) -> a
    M:void saveCollection(net.minecraft.data.CachedOutput,java.util.Map,java.util.function.Function) -> a
    M:java.lang.String getName() -> a
net.minecraft.data.models.blockstates.BlockStateGenerator -> jz -> net.minecraft.data.models.blockstates.BlockStateGenerator
net.minecraft.data.models.blockstates.Condition -> ka -> net.minecraft.data.models.blockstates.Condition
    M:net.minecraft.data.models.blockstates.Condition$TerminalCondition condition() -> a
    M:net.minecraft.data.models.blockstates.Condition and(net.minecraft.data.models.blockstates.Condition[]) -> a
    M:net.minecraft.data.models.blockstates.Condition or(net.minecraft.data.models.blockstates.Condition[]) -> b
net.minecraft.data.models.blockstates.Condition$CompositeCondition -> ka$a -> net.minecraft.data.models.blockstates.Condition$a
    F:net.minecraft.data.models.blockstates.Condition$Operation operation -> a
    F:java.util.List subconditions -> b
    M:void validate(net.minecraft.world.level.block.state.BlockStateList) -> a
    M:com.google.gson.JsonElement get() -> b
    M:java.lang.Object get() -> get
net.minecraft.data.models.blockstates.Condition$Operation -> ka$b -> net.minecraft.data.models.blockstates.Condition$b
    F:net.minecraft.data.models.blockstates.Condition$Operation AND -> a
    F:net.minecraft.data.models.blockstates.Condition$Operation OR -> b
    F:java.lang.String id -> c
net.minecraft.data.models.blockstates.Condition$TerminalCondition -> ka$c -> net.minecraft.data.models.blockstates.Condition$c
    F:java.util.Map terms -> a
    M:java.lang.String joinValues(net.minecraft.world.level.block.state.properties.IBlockState,java.util.stream.Stream) -> a
    M:java.lang.String getTerm(net.minecraft.world.level.block.state.properties.IBlockState,java.lang.Comparable,java.lang.Comparable[]) -> c
    M:void putValue(net.minecraft.world.level.block.state.properties.IBlockState,java.lang.String) -> a
    M:net.minecraft.data.models.blockstates.Condition$TerminalCondition term(net.minecraft.world.level.block.state.properties.IBlockState,java.lang.Comparable) -> a
    M:net.minecraft.data.models.blockstates.Condition$TerminalCondition term(net.minecraft.world.level.block.state.properties.IBlockState,java.lang.Comparable,java.lang.Comparable[]) -> a
    M:net.minecraft.data.models.blockstates.Condition$TerminalCondition negatedTerm(net.minecraft.world.level.block.state.properties.IBlockState,java.lang.Comparable) -> b
    M:net.minecraft.data.models.blockstates.Condition$TerminalCondition negatedTerm(net.minecraft.world.level.block.state.properties.IBlockState,java.lang.Comparable,java.lang.Comparable[]) -> b
    M:com.google.gson.JsonElement get() -> b
    M:void validate(net.minecraft.world.level.block.state.BlockStateList) -> a
    M:java.lang.Object get() -> get
net.minecraft.data.models.blockstates.MultiPartGenerator -> kb -> net.minecraft.data.models.blockstates.MultiPartGenerator
    F:net.minecraft.world.level.block.Block block -> a
    F:java.util.List parts -> b
    M:net.minecraft.world.level.block.Block getBlock() -> a
    M:net.minecraft.data.models.blockstates.MultiPartGenerator multiPart(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.data.models.blockstates.MultiPartGenerator with(java.util.List) -> a
    M:net.minecraft.data.models.blockstates.MultiPartGenerator with(net.minecraft.data.models.blockstates.Variant) -> a
    M:net.minecraft.data.models.blockstates.MultiPartGenerator with(net.minecraft.data.models.blockstates.Condition,java.util.List) -> a
    M:net.minecraft.data.models.blockstates.MultiPartGenerator with(net.minecraft.data.models.blockstates.Condition,net.minecraft.data.models.blockstates.Variant[]) -> a
    M:net.minecraft.data.models.blockstates.MultiPartGenerator with(net.minecraft.data.models.blockstates.Condition,net.minecraft.data.models.blockstates.Variant) -> a
    M:com.google.gson.JsonElement get() -> b
    M:java.lang.Object get() -> get
net.minecraft.data.models.blockstates.MultiPartGenerator$ConditionalEntry -> kb$a -> net.minecraft.data.models.blockstates.MultiPartGenerator$a
    F:net.minecraft.data.models.blockstates.Condition condition -> a
    M:void validate(net.minecraft.world.level.block.state.BlockStateList) -> a
    M:void decorate(com.google.gson.JsonObject) -> a
net.minecraft.data.models.blockstates.MultiPartGenerator$Entry -> kb$b -> net.minecraft.data.models.blockstates.MultiPartGenerator$b
    F:java.util.List variants -> a
    M:void validate(net.minecraft.world.level.block.state.BlockStateList) -> a
    M:void decorate(com.google.gson.JsonObject) -> a
    M:com.google.gson.JsonElement get() -> a
    M:java.lang.Object get() -> get
net.minecraft.data.models.blockstates.MultiVariantGenerator -> kc -> net.minecraft.data.models.blockstates.MultiVariantGenerator
    F:net.minecraft.world.level.block.Block block -> a
    F:java.util.List baseVariants -> b
    F:java.util.Set seenProperties -> c
    F:java.util.List declaredPropertySets -> d
    M:net.minecraft.data.models.blockstates.MultiVariantGenerator with(net.minecraft.data.models.blockstates.PropertyDispatch) -> a
    M:com.google.gson.JsonElement get() -> b
    M:java.util.List mergeVariants(java.util.List,java.util.List) -> a
    M:net.minecraft.world.level.block.Block getBlock() -> a
    M:net.minecraft.data.models.blockstates.MultiVariantGenerator multiVariant(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.data.models.blockstates.MultiVariantGenerator multiVariant(net.minecraft.world.level.block.Block,net.minecraft.data.models.blockstates.Variant) -> a
    M:net.minecraft.data.models.blockstates.MultiVariantGenerator multiVariant(net.minecraft.world.level.block.Block,net.minecraft.data.models.blockstates.Variant[]) -> a
    M:java.lang.Object get() -> get
net.minecraft.data.models.blockstates.PropertyDispatch -> kd -> net.minecraft.data.models.blockstates.PropertyDispatch
    F:java.util.Map values -> a
    M:void putValue(net.minecraft.data.models.blockstates.Selector,java.util.List) -> a
    M:java.util.Map getEntries() -> a
    M:void verifyComplete() -> c
    M:net.minecraft.data.models.blockstates.PropertyDispatch$C1 property(net.minecraft.world.level.block.state.properties.IBlockState) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch$C2 properties(net.minecraft.world.level.block.state.properties.IBlockState,net.minecraft.world.level.block.state.properties.IBlockState) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch$C3 properties(net.minecraft.world.level.block.state.properties.IBlockState,net.minecraft.world.level.block.state.properties.IBlockState,net.minecraft.world.level.block.state.properties.IBlockState) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch$C4 properties(net.minecraft.world.level.block.state.properties.IBlockState,net.minecraft.world.level.block.state.properties.IBlockState,net.minecraft.world.level.block.state.properties.IBlockState,net.minecraft.world.level.block.state.properties.IBlockState) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch$C5 properties(net.minecraft.world.level.block.state.properties.IBlockState,net.minecraft.world.level.block.state.properties.IBlockState,net.minecraft.world.level.block.state.properties.IBlockState,net.minecraft.world.level.block.state.properties.IBlockState,net.minecraft.world.level.block.state.properties.IBlockState) -> a
net.minecraft.data.models.blockstates.PropertyDispatch$C1 -> kd$a -> net.minecraft.data.models.blockstates.PropertyDispatch$a
    F:net.minecraft.world.level.block.state.properties.IBlockState property1 -> a
    M:java.util.List getDefinedProperties() -> b
    M:net.minecraft.data.models.blockstates.PropertyDispatch$C1 select(java.lang.Comparable,java.util.List) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch$C1 select(java.lang.Comparable,net.minecraft.data.models.blockstates.Variant) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch generate(java.util.function.Function) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch generateList(java.util.function.Function) -> b
net.minecraft.data.models.blockstates.PropertyDispatch$C2 -> kd$b -> net.minecraft.data.models.blockstates.PropertyDispatch$b
    F:net.minecraft.world.level.block.state.properties.IBlockState property1 -> a
    F:net.minecraft.world.level.block.state.properties.IBlockState property2 -> b
    M:java.util.List getDefinedProperties() -> b
    M:net.minecraft.data.models.blockstates.PropertyDispatch$C2 select(java.lang.Comparable,java.lang.Comparable,java.util.List) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch$C2 select(java.lang.Comparable,java.lang.Comparable,net.minecraft.data.models.blockstates.Variant) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch generate(java.util.function.BiFunction) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch generateList(java.util.function.BiFunction) -> b
net.minecraft.data.models.blockstates.PropertyDispatch$C3 -> kd$c -> net.minecraft.data.models.blockstates.PropertyDispatch$c
    F:net.minecraft.world.level.block.state.properties.IBlockState property1 -> a
    F:net.minecraft.world.level.block.state.properties.IBlockState property2 -> b
    F:net.minecraft.world.level.block.state.properties.IBlockState property3 -> c
    M:java.util.List getDefinedProperties() -> b
    M:net.minecraft.data.models.blockstates.PropertyDispatch$C3 select(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.util.List) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch$C3 select(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,net.minecraft.data.models.blockstates.Variant) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch generate(net.minecraft.data.models.blockstates.PropertyDispatch$TriFunction) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch generateList(net.minecraft.data.models.blockstates.PropertyDispatch$TriFunction) -> b
net.minecraft.data.models.blockstates.PropertyDispatch$C4 -> kd$d -> net.minecraft.data.models.blockstates.PropertyDispatch$d
    F:net.minecraft.world.level.block.state.properties.IBlockState property1 -> a
    F:net.minecraft.world.level.block.state.properties.IBlockState property2 -> b
    F:net.minecraft.world.level.block.state.properties.IBlockState property3 -> c
    F:net.minecraft.world.level.block.state.properties.IBlockState property4 -> d
    M:java.util.List getDefinedProperties() -> b
    M:net.minecraft.data.models.blockstates.PropertyDispatch$C4 select(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.util.List) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch$C4 select(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,net.minecraft.data.models.blockstates.Variant) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch generate(net.minecraft.data.models.blockstates.PropertyDispatch$QuadFunction) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch generateList(net.minecraft.data.models.blockstates.PropertyDispatch$QuadFunction) -> b
net.minecraft.data.models.blockstates.PropertyDispatch$C5 -> kd$e -> net.minecraft.data.models.blockstates.PropertyDispatch$e
    F:net.minecraft.world.level.block.state.properties.IBlockState property1 -> a
    F:net.minecraft.world.level.block.state.properties.IBlockState property2 -> b
    F:net.minecraft.world.level.block.state.properties.IBlockState property3 -> c
    F:net.minecraft.world.level.block.state.properties.IBlockState property4 -> d
    F:net.minecraft.world.level.block.state.properties.IBlockState property5 -> e
    M:java.util.List getDefinedProperties() -> b
    M:net.minecraft.data.models.blockstates.PropertyDispatch$C5 select(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.util.List) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch$C5 select(java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,java.lang.Comparable,net.minecraft.data.models.blockstates.Variant) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch generate(net.minecraft.data.models.blockstates.PropertyDispatch$PentaFunction) -> a
    M:net.minecraft.data.models.blockstates.PropertyDispatch generateList(net.minecraft.data.models.blockstates.PropertyDispatch$PentaFunction) -> b
net.minecraft.data.models.blockstates.PropertyDispatch$PentaFunction -> kd$f -> net.minecraft.data.models.blockstates.PropertyDispatch$f
net.minecraft.data.models.blockstates.PropertyDispatch$QuadFunction -> kd$g -> net.minecraft.data.models.blockstates.PropertyDispatch$g
net.minecraft.data.models.blockstates.PropertyDispatch$TriFunction -> kd$h -> net.minecraft.data.models.blockstates.PropertyDispatch$h
net.minecraft.data.models.blockstates.Selector -> ke -> net.minecraft.data.models.blockstates.Selector
    F:net.minecraft.data.models.blockstates.Selector EMPTY -> a
    F:java.util.Comparator COMPARE_BY_NAME -> b
    F:java.util.List values -> c
    M:net.minecraft.data.models.blockstates.Selector extend(net.minecraft.world.level.block.state.properties.Property$Value) -> a
    M:net.minecraft.data.models.blockstates.Selector extend(net.minecraft.data.models.blockstates.Selector) -> a
    M:net.minecraft.data.models.blockstates.Selector empty() -> a
    M:net.minecraft.data.models.blockstates.Selector of(net.minecraft.world.level.block.state.properties.Property$Value[]) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String getKey() -> b
net.minecraft.data.models.blockstates.Variant -> kf -> net.minecraft.data.models.blockstates.Variant
    F:java.util.Map values -> a
    M:net.minecraft.data.models.blockstates.Variant with(net.minecraft.data.models.blockstates.VariantProperty,java.lang.Object) -> a
    M:net.minecraft.data.models.blockstates.Variant variant() -> a
    M:net.minecraft.data.models.blockstates.Variant merge(net.minecraft.data.models.blockstates.Variant,net.minecraft.data.models.blockstates.Variant) -> a
    M:com.google.gson.JsonElement get() -> b
    M:com.google.gson.JsonElement convertList(java.util.List) -> a
    M:java.lang.Object get() -> get
net.minecraft.data.models.blockstates.VariantProperties -> kg -> net.minecraft.data.models.blockstates.VariantProperties
    F:net.minecraft.data.models.blockstates.VariantProperty X_ROT -> a
    F:net.minecraft.data.models.blockstates.VariantProperty Y_ROT -> b
    F:net.minecraft.data.models.blockstates.VariantProperty MODEL -> c
    F:net.minecraft.data.models.blockstates.VariantProperty UV_LOCK -> d
    F:net.minecraft.data.models.blockstates.VariantProperty WEIGHT -> e
net.minecraft.data.models.blockstates.VariantProperties$Rotation -> kg$a -> net.minecraft.data.models.blockstates.VariantProperties$a
    F:net.minecraft.data.models.blockstates.VariantProperties$Rotation R0 -> a
    F:net.minecraft.data.models.blockstates.VariantProperties$Rotation R90 -> b
    F:net.minecraft.data.models.blockstates.VariantProperties$Rotation R180 -> c
    F:net.minecraft.data.models.blockstates.VariantProperties$Rotation R270 -> d
    F:int value -> e
net.minecraft.data.models.blockstates.VariantProperty -> kh -> net.minecraft.data.models.blockstates.VariantProperty
    F:java.lang.String key -> a
    F:java.util.function.Function serializer -> b
    M:net.minecraft.data.models.blockstates.VariantProperty$Value withValue(java.lang.Object) -> a
net.minecraft.data.models.blockstates.VariantProperty$Value -> kh$a -> net.minecraft.data.models.blockstates.VariantProperty$a
    F:java.lang.Object value -> b
    M:net.minecraft.data.models.blockstates.VariantProperty getKey() -> a
    M:void addToVariant(com.google.gson.JsonObject) -> a
net.minecraft.data.models.model.DelegatedModel -> kj -> net.minecraft.data.models.model.DelegatedModel
    F:net.minecraft.resources.MinecraftKey parent -> a
    M:com.google.gson.JsonElement get() -> a
    M:java.lang.Object get() -> get
net.minecraft.data.models.model.ModelLocationUtils -> kk -> net.minecraft.data.models.model.ModelLocationUtils
    M:net.minecraft.resources.MinecraftKey decorateBlockModelLocation(java.lang.String) -> a
    M:net.minecraft.resources.MinecraftKey decorateItemModelLocation(java.lang.String) -> b
    M:net.minecraft.resources.MinecraftKey getModelLocation(net.minecraft.world.level.block.Block,java.lang.String) -> a
    M:net.minecraft.resources.MinecraftKey getModelLocation(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.resources.MinecraftKey getModelLocation(net.minecraft.world.item.Item) -> a
    M:net.minecraft.resources.MinecraftKey getModelLocation(net.minecraft.world.item.Item,java.lang.String) -> a
net.minecraft.data.models.model.ModelTemplate -> kl -> net.minecraft.data.models.model.ModelTemplate
    F:java.util.Optional model -> a
    F:java.util.Set requiredSlots -> b
    F:java.util.Optional suffix -> c
    M:net.minecraft.resources.MinecraftKey create(net.minecraft.world.level.block.Block,net.minecraft.data.models.model.TextureMapping,java.util.function.BiConsumer) -> a
    M:net.minecraft.resources.MinecraftKey createWithSuffix(net.minecraft.world.level.block.Block,java.lang.String,net.minecraft.data.models.model.TextureMapping,java.util.function.BiConsumer) -> a
    M:net.minecraft.resources.MinecraftKey createWithOverride(net.minecraft.world.level.block.Block,java.lang.String,net.minecraft.data.models.model.TextureMapping,java.util.function.BiConsumer) -> b
    M:net.minecraft.resources.MinecraftKey create(net.minecraft.resources.MinecraftKey,net.minecraft.data.models.model.TextureMapping,java.util.function.BiConsumer) -> a
    M:java.util.Map createMap(net.minecraft.data.models.model.TextureMapping) -> a
net.minecraft.data.models.model.ModelTemplates -> km -> net.minecraft.data.models.model.ModelTemplates
    F:net.minecraft.data.models.model.ModelTemplate CUBE -> a
    F:net.minecraft.data.models.model.ModelTemplate CUBE_DIRECTIONAL -> b
    F:net.minecraft.data.models.model.ModelTemplate CUBE_ALL -> c
    F:net.minecraft.data.models.model.ModelTemplate CUBE_MIRRORED_ALL -> d
    F:net.minecraft.data.models.model.ModelTemplate CUBE_NORTH_WEST_MIRRORED_ALL -> e
    F:net.minecraft.data.models.model.ModelTemplate CUBE_COLUMN -> f
    F:net.minecraft.data.models.model.ModelTemplate CUBE_COLUMN_HORIZONTAL -> g
    F:net.minecraft.data.models.model.ModelTemplate CUBE_COLUMN_MIRRORED -> h
    F:net.minecraft.data.models.model.ModelTemplate CUBE_TOP -> i
    F:net.minecraft.data.models.model.ModelTemplate CUBE_BOTTOM_TOP -> j
    F:net.minecraft.data.models.model.ModelTemplate CUBE_ORIENTABLE -> k
    F:net.minecraft.data.models.model.ModelTemplate CUBE_ORIENTABLE_TOP_BOTTOM -> l
    F:net.minecraft.data.models.model.ModelTemplate CUBE_ORIENTABLE_VERTICAL -> m
    F:net.minecraft.data.models.model.ModelTemplate BUTTON -> n
    F:net.minecraft.data.models.model.ModelTemplate BUTTON_PRESSED -> o
    F:net.minecraft.data.models.model.ModelTemplate BUTTON_INVENTORY -> p
    F:net.minecraft.data.models.model.ModelTemplate DOOR_BOTTOM_LEFT -> q
    F:net.minecraft.data.models.model.ModelTemplate DOOR_BOTTOM_LEFT_OPEN -> r
    F:net.minecraft.data.models.model.ModelTemplate DOOR_BOTTOM_RIGHT -> s
    F:net.minecraft.data.models.model.ModelTemplate DOOR_BOTTOM_RIGHT_OPEN -> t
    F:net.minecraft.data.models.model.ModelTemplate DOOR_TOP_LEFT -> u
    F:net.minecraft.data.models.model.ModelTemplate DOOR_TOP_LEFT_OPEN -> v
    F:net.minecraft.data.models.model.ModelTemplate DOOR_TOP_RIGHT -> w
    F:net.minecraft.data.models.model.ModelTemplate DOOR_TOP_RIGHT_OPEN -> x
    F:net.minecraft.data.models.model.ModelTemplate FENCE_POST -> y
    F:net.minecraft.data.models.model.ModelTemplate FENCE_SIDE -> z
    F:net.minecraft.data.models.model.ModelTemplate TINTED_CROSS -> aa
    F:net.minecraft.data.models.model.ModelTemplate FLOWER_POT_CROSS -> ab
    F:net.minecraft.data.models.model.ModelTemplate TINTED_FLOWER_POT_CROSS -> ac
    F:net.minecraft.data.models.model.ModelTemplate RAIL_FLAT -> ad
    F:net.minecraft.data.models.model.ModelTemplate RAIL_CURVED -> ae
    F:net.minecraft.data.models.model.ModelTemplate RAIL_RAISED_NE -> af
    F:net.minecraft.data.models.model.ModelTemplate RAIL_RAISED_SW -> ag
    F:net.minecraft.data.models.model.ModelTemplate CARPET -> ah
    F:net.minecraft.data.models.model.ModelTemplate CORAL_FAN -> ai
    F:net.minecraft.data.models.model.ModelTemplate CORAL_WALL_FAN -> aj
    F:net.minecraft.data.models.model.ModelTemplate GLAZED_TERRACOTTA -> ak
    F:net.minecraft.data.models.model.ModelTemplate CHORUS_FLOWER -> al
    F:net.minecraft.data.models.model.ModelTemplate DAYLIGHT_DETECTOR -> am
    F:net.minecraft.data.models.model.ModelTemplate STAINED_GLASS_PANE_NOSIDE -> an
    F:net.minecraft.data.models.model.ModelTemplate STAINED_GLASS_PANE_NOSIDE_ALT -> ao
    F:net.minecraft.data.models.model.ModelTemplate STAINED_GLASS_PANE_POST -> ap
    F:net.minecraft.data.models.model.ModelTemplate STAINED_GLASS_PANE_SIDE -> aq
    F:net.minecraft.data.models.model.ModelTemplate STAINED_GLASS_PANE_SIDE_ALT -> ar
    F:net.minecraft.data.models.model.ModelTemplate COMMAND_BLOCK -> as
    F:net.minecraft.data.models.model.ModelTemplate ANVIL -> at
    F:net.minecraft.data.models.model.ModelTemplate ATTACHED_STEM -> av
    F:net.minecraft.data.models.model.ModelTemplate CROP -> aw
    F:net.minecraft.data.models.model.ModelTemplate FARMLAND -> ax
    F:net.minecraft.data.models.model.ModelTemplate FIRE_FLOOR -> ay
    F:net.minecraft.data.models.model.ModelTemplate FIRE_SIDE -> az
    F:net.minecraft.data.models.model.ModelTemplate BED_INVENTORY -> ba
    F:net.minecraft.data.models.model.ModelTemplate BANNER_INVENTORY -> bb
    F:net.minecraft.data.models.model.ModelTemplate SKULL_INVENTORY -> bc
    F:net.minecraft.data.models.model.ModelTemplate CANDLE -> bd
    F:net.minecraft.data.models.model.ModelTemplate TWO_CANDLES -> be
    F:net.minecraft.data.models.model.ModelTemplate THREE_CANDLES -> bf
    F:net.minecraft.data.models.model.ModelTemplate FOUR_CANDLES -> bg
    F:net.minecraft.data.models.model.ModelTemplate CANDLE_CAKE -> bh
    F:net.minecraft.data.models.model.ModelTemplate SCULK_SHRIEKER -> bi
    M:net.minecraft.data.models.model.ModelTemplate create(net.minecraft.data.models.model.TextureSlot[]) -> a
    M:net.minecraft.data.models.model.ModelTemplate create(java.lang.String,net.minecraft.data.models.model.TextureSlot[]) -> a
    M:net.minecraft.data.models.model.ModelTemplate createItem(java.lang.String,net.minecraft.data.models.model.TextureSlot[]) -> b
    M:net.minecraft.data.models.model.ModelTemplate create(java.lang.String,java.lang.String,net.minecraft.data.models.model.TextureSlot[]) -> a
net.minecraft.data.models.model.TextureMapping -> kn -> net.minecraft.data.models.model.TextureMapping
    F:java.util.Map slots -> a
    F:java.util.Set forcedSlots -> b
    M:net.minecraft.data.models.model.TextureMapping put(net.minecraft.data.models.model.TextureSlot,net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.data.models.model.TextureMapping putForced(net.minecraft.data.models.model.TextureSlot,net.minecraft.resources.MinecraftKey) -> b
    M:java.util.stream.Stream getForced() -> a
    M:net.minecraft.data.models.model.TextureMapping copySlot(net.minecraft.data.models.model.TextureSlot,net.minecraft.data.models.model.TextureSlot) -> a
    M:net.minecraft.data.models.model.TextureMapping copyForced(net.minecraft.data.models.model.TextureSlot,net.minecraft.data.models.model.TextureSlot) -> b
    M:net.minecraft.resources.MinecraftKey get(net.minecraft.data.models.model.TextureSlot) -> a
    M:net.minecraft.data.models.model.TextureMapping copyAndUpdate(net.minecraft.data.models.model.TextureSlot,net.minecraft.resources.MinecraftKey) -> c
    M:net.minecraft.data.models.model.TextureMapping cube(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.data.models.model.TextureMapping defaultTexture(net.minecraft.world.level.block.Block) -> b
    M:net.minecraft.data.models.model.TextureMapping defaultTexture(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.data.models.model.TextureMapping cube(net.minecraft.resources.MinecraftKey) -> b
    M:net.minecraft.data.models.model.TextureMapping cross(net.minecraft.world.level.block.Block) -> c
    M:net.minecraft.data.models.model.TextureMapping cross(net.minecraft.resources.MinecraftKey) -> c
    M:net.minecraft.data.models.model.TextureMapping plant(net.minecraft.world.level.block.Block) -> d
    M:net.minecraft.data.models.model.TextureMapping plant(net.minecraft.resources.MinecraftKey) -> d
    M:net.minecraft.data.models.model.TextureMapping rail(net.minecraft.world.level.block.Block) -> e
    M:net.minecraft.data.models.model.TextureMapping rail(net.minecraft.resources.MinecraftKey) -> e
    M:net.minecraft.data.models.model.TextureMapping wool(net.minecraft.world.level.block.Block) -> f
    M:net.minecraft.data.models.model.TextureMapping wool(net.minecraft.resources.MinecraftKey) -> f
    M:net.minecraft.data.models.model.TextureMapping stem(net.minecraft.world.level.block.Block) -> g
    M:net.minecraft.data.models.model.TextureMapping attachedStem(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.data.models.model.TextureMapping pattern(net.minecraft.world.level.block.Block) -> h
    M:net.minecraft.data.models.model.TextureMapping fan(net.minecraft.world.level.block.Block) -> i
    M:net.minecraft.data.models.model.TextureMapping crop(net.minecraft.resources.MinecraftKey) -> g
    M:net.minecraft.data.models.model.TextureMapping pane(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> b
    M:net.minecraft.data.models.model.TextureMapping singleSlot(net.minecraft.data.models.model.TextureSlot,net.minecraft.resources.MinecraftKey) -> d
    M:net.minecraft.data.models.model.TextureMapping column(net.minecraft.world.level.block.Block) -> j
    M:net.minecraft.data.models.model.TextureMapping cubeTop(net.minecraft.world.level.block.Block) -> k
    M:net.minecraft.data.models.model.TextureMapping logColumn(net.minecraft.world.level.block.Block) -> l
    M:net.minecraft.data.models.model.TextureMapping column(net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.data.models.model.TextureMapping cubeBottomTop(net.minecraft.world.level.block.Block) -> m
    M:net.minecraft.data.models.model.TextureMapping cubeBottomTopWithWall(net.minecraft.world.level.block.Block) -> n
    M:net.minecraft.data.models.model.TextureMapping columnWithWall(net.minecraft.world.level.block.Block) -> o
    M:net.minecraft.data.models.model.TextureMapping door(net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> b
    M:net.minecraft.data.models.model.TextureMapping door(net.minecraft.world.level.block.Block) -> p
    M:net.minecraft.data.models.model.TextureMapping particle(net.minecraft.world.level.block.Block) -> q
    M:net.minecraft.data.models.model.TextureMapping particle(net.minecraft.resources.MinecraftKey) -> h
    M:net.minecraft.data.models.model.TextureMapping fire0(net.minecraft.world.level.block.Block) -> r
    M:net.minecraft.data.models.model.TextureMapping fire1(net.minecraft.world.level.block.Block) -> s
    M:net.minecraft.data.models.model.TextureMapping lantern(net.minecraft.world.level.block.Block) -> t
    M:net.minecraft.data.models.model.TextureMapping torch(net.minecraft.world.level.block.Block) -> u
    M:net.minecraft.data.models.model.TextureMapping torch(net.minecraft.resources.MinecraftKey) -> i
    M:net.minecraft.data.models.model.TextureMapping particleFromItem(net.minecraft.world.item.Item) -> a
    M:net.minecraft.data.models.model.TextureMapping commandBlock(net.minecraft.world.level.block.Block) -> v
    M:net.minecraft.data.models.model.TextureMapping orientableCube(net.minecraft.world.level.block.Block) -> w
    M:net.minecraft.data.models.model.TextureMapping orientableCubeOnlyTop(net.minecraft.world.level.block.Block) -> x
    M:net.minecraft.data.models.model.TextureMapping orientableCubeSameEnds(net.minecraft.world.level.block.Block) -> y
    M:net.minecraft.data.models.model.TextureMapping top(net.minecraft.world.level.block.Block) -> z
    M:net.minecraft.data.models.model.TextureMapping craftingTable(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> c
    M:net.minecraft.data.models.model.TextureMapping fletchingTable(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> d
    M:net.minecraft.data.models.model.TextureMapping candleCake(net.minecraft.world.level.block.Block,boolean) -> a
    M:net.minecraft.data.models.model.TextureMapping cauldron(net.minecraft.resources.MinecraftKey) -> j
    M:net.minecraft.data.models.model.TextureMapping sculkShrieker(boolean) -> a
    M:net.minecraft.data.models.model.TextureMapping layer0(net.minecraft.world.item.Item) -> b
    M:net.minecraft.data.models.model.TextureMapping layer0(net.minecraft.resources.MinecraftKey) -> k
    M:net.minecraft.resources.MinecraftKey getBlockTexture(net.minecraft.world.level.block.Block,java.lang.String) -> a
    M:net.minecraft.resources.MinecraftKey getItemTexture(net.minecraft.world.item.Item) -> c
    M:net.minecraft.resources.MinecraftKey getItemTexture(net.minecraft.world.item.Item,java.lang.String) -> a
net.minecraft.data.models.model.TextureSlot -> ko -> net.minecraft.data.models.model.TextureSlot
    F:net.minecraft.data.models.model.TextureSlot ALL -> a
    F:net.minecraft.data.models.model.TextureSlot TEXTURE -> b
    F:net.minecraft.data.models.model.TextureSlot PARTICLE -> c
    F:net.minecraft.data.models.model.TextureSlot END -> d
    F:net.minecraft.data.models.model.TextureSlot BOTTOM -> e
    F:net.minecraft.data.models.model.TextureSlot TOP -> f
    F:net.minecraft.data.models.model.TextureSlot FRONT -> g
    F:net.minecraft.data.models.model.TextureSlot BACK -> h
    F:net.minecraft.data.models.model.TextureSlot SIDE -> i
    F:net.minecraft.data.models.model.TextureSlot NORTH -> j
    F:net.minecraft.data.models.model.TextureSlot SOUTH -> k
    F:net.minecraft.data.models.model.TextureSlot EAST -> l
    F:net.minecraft.data.models.model.TextureSlot WEST -> m
    F:net.minecraft.data.models.model.TextureSlot UP -> n
    F:net.minecraft.data.models.model.TextureSlot DOWN -> o
    F:net.minecraft.data.models.model.TextureSlot CROSS -> p
    F:net.minecraft.data.models.model.TextureSlot PLANT -> q
    F:net.minecraft.data.models.model.TextureSlot WALL -> r
    F:net.minecraft.data.models.model.TextureSlot RAIL -> s
    F:net.minecraft.data.models.model.TextureSlot WOOL -> t
    F:net.minecraft.data.models.model.TextureSlot PATTERN -> u
    F:net.minecraft.data.models.model.TextureSlot PANE -> v
    F:net.minecraft.data.models.model.TextureSlot EDGE -> w
    F:net.minecraft.data.models.model.TextureSlot FAN -> x
    F:net.minecraft.data.models.model.TextureSlot STEM -> y
    F:net.minecraft.data.models.model.TextureSlot UPPER_STEM -> z
    M:net.minecraft.data.models.model.TextureSlot create(java.lang.String) -> a
    M:net.minecraft.data.models.model.TextureSlot create(java.lang.String,net.minecraft.data.models.model.TextureSlot) -> a
    M:java.lang.String getId() -> a
    M:net.minecraft.data.models.model.TextureSlot getParent() -> b
net.minecraft.data.models.model.TexturedModel -> kp -> net.minecraft.data.models.model.TexturedModel
    F:net.minecraft.data.models.model.TexturedModel$Provider CUBE -> a
    F:net.minecraft.data.models.model.TexturedModel$Provider CUBE_MIRRORED -> b
    F:net.minecraft.data.models.model.TexturedModel$Provider COLUMN -> c
    F:net.minecraft.data.models.model.TexturedModel$Provider COLUMN_HORIZONTAL -> d
    F:net.minecraft.data.models.model.TexturedModel$Provider CUBE_TOP_BOTTOM -> e
    F:net.minecraft.data.models.model.TexturedModel$Provider CUBE_TOP -> f
    F:net.minecraft.data.models.model.TexturedModel$Provider ORIENTABLE_ONLY_TOP -> g
    F:net.minecraft.data.models.model.TexturedModel$Provider ORIENTABLE -> h
    F:net.minecraft.data.models.model.TexturedModel$Provider CARPET -> i
    F:net.minecraft.data.models.model.TexturedModel$Provider GLAZED_TERRACOTTA -> j
    F:net.minecraft.data.models.model.TexturedModel$Provider CORAL_FAN -> k
    F:net.minecraft.data.models.model.TexturedModel$Provider PARTICLE_ONLY -> l
    F:net.minecraft.data.models.model.TexturedModel$Provider ANVIL -> m
    F:net.minecraft.data.models.model.TexturedModel$Provider LEAVES -> n
    F:net.minecraft.data.models.model.TexturedModel$Provider LANTERN -> o
    F:net.minecraft.data.models.model.TexturedModel$Provider HANGING_LANTERN -> p
    F:net.minecraft.data.models.model.TexturedModel$Provider SEAGRASS -> q
    F:net.minecraft.data.models.model.TexturedModel$Provider COLUMN_ALT -> r
    F:net.minecraft.data.models.model.TexturedModel$Provider COLUMN_HORIZONTAL_ALT -> s
    F:net.minecraft.data.models.model.TexturedModel$Provider TOP_BOTTOM_WITH_WALL -> t
    F:net.minecraft.data.models.model.TexturedModel$Provider COLUMN_WITH_WALL -> u
    F:net.minecraft.data.models.model.TextureMapping mapping -> v
    F:net.minecraft.data.models.model.ModelTemplate template -> w
    M:net.minecraft.data.models.model.ModelTemplate getTemplate() -> a
    M:net.minecraft.data.models.model.TextureMapping getMapping() -> b
    M:net.minecraft.data.models.model.TexturedModel updateTextures(java.util.function.Consumer) -> a
    M:net.minecraft.resources.MinecraftKey create(net.minecraft.world.level.block.Block,java.util.function.BiConsumer) -> a
    M:net.minecraft.resources.MinecraftKey createWithSuffix(net.minecraft.world.level.block.Block,java.lang.String,java.util.function.BiConsumer) -> a
    M:net.minecraft.data.models.model.TexturedModel$Provider createDefault(java.util.function.Function,net.minecraft.data.models.model.ModelTemplate) -> a
    M:net.minecraft.data.models.model.TexturedModel createAllSame(net.minecraft.resources.MinecraftKey) -> a
net.minecraft.data.models.model.TexturedModel$Provider -> kp$a -> net.minecraft.data.models.model.TexturedModel$a
    M:net.minecraft.resources.MinecraftKey create(net.minecraft.world.level.block.Block,java.util.function.BiConsumer) -> create
net.minecraft.data.recipes.FinishedRecipe -> kt -> net.minecraft.data.recipes.FinishedRecipe
    M:com.google.gson.JsonObject serializeRecipe() -> a
net.minecraft.data.recipes.RecipeBuilder -> ku -> net.minecraft.data.recipes.RecipeBuilder
    F:net.minecraft.resources.MinecraftKey ROOT_RECIPE_ADVANCEMENT -> a
    M:void save(java.util.function.Consumer) -> a
    M:void save(java.util.function.Consumer,java.lang.String) -> a
    M:net.minecraft.resources.MinecraftKey getDefaultRecipeId(net.minecraft.world.level.IMaterial) -> a
net.minecraft.data.recipes.RecipeProvider -> kv -> net.minecraft.data.recipes.RecipeProvider
    F:org.slf4j.Logger LOGGER -> c
    F:com.google.common.collect.ImmutableList COAL_SMELTABLES -> d
    F:com.google.common.collect.ImmutableList IRON_SMELTABLES -> e
    F:com.google.common.collect.ImmutableList COPPER_SMELTABLES -> f
    F:com.google.common.collect.ImmutableList GOLD_SMELTABLES -> g
    F:com.google.common.collect.ImmutableList DIAMOND_SMELTABLES -> h
    F:com.google.common.collect.ImmutableList LAPIS_SMELTABLES -> i
    F:com.google.common.collect.ImmutableList REDSTONE_SMELTABLES -> j
    F:com.google.common.collect.ImmutableList EMERALD_SMELTABLES -> k
    F:net.minecraft.data.DataGenerator$PathProvider recipePathProvider -> l
    F:net.minecraft.data.DataGenerator$PathProvider advancementPathProvider -> m
    F:java.util.Map shapeBuilders -> n
    M:void run(net.minecraft.data.CachedOutput) -> a
    M:void saveRecipe(net.minecraft.data.CachedOutput,com.google.gson.JsonObject,java.nio.file.Path) -> a
    M:void saveAdvancement(net.minecraft.data.CachedOutput,com.google.gson.JsonObject,java.nio.file.Path) -> b
    M:void buildCraftingRecipes(java.util.function.Consumer) -> a
    M:void oneToOneConversionRecipe(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial,java.lang.String) -> a
    M:void oneToOneConversionRecipe(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial,java.lang.String,int) -> a
    M:void oreSmelting(java.util.function.Consumer,java.util.List,net.minecraft.world.level.IMaterial,float,int,java.lang.String) -> a
    M:void oreBlasting(java.util.function.Consumer,java.util.List,net.minecraft.world.level.IMaterial,float,int,java.lang.String) -> b
    M:void oreCooking(java.util.function.Consumer,net.minecraft.world.item.crafting.RecipeSerializerCooking,java.util.List,net.minecraft.world.level.IMaterial,float,int,java.lang.String,java.lang.String) -> a
    M:void netheriteSmithing(java.util.function.Consumer,net.minecraft.world.item.Item,net.minecraft.world.item.Item) -> a
    M:void planksFromLog(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.tags.TagKey) -> a
    M:void planksFromLogs(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.tags.TagKey) -> b
    M:void woodFromLogs(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> f
    M:void woodenBoat(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> g
    M:void chestBoat(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> h
    M:net.minecraft.data.recipes.RecipeBuilder buttonBuilder(net.minecraft.world.level.IMaterial,net.minecraft.world.item.crafting.RecipeItemStack) -> e
    M:net.minecraft.data.recipes.RecipeBuilder doorBuilder(net.minecraft.world.level.IMaterial,net.minecraft.world.item.crafting.RecipeItemStack) -> f
    M:net.minecraft.data.recipes.RecipeBuilder fenceBuilder(net.minecraft.world.level.IMaterial,net.minecraft.world.item.crafting.RecipeItemStack) -> g
    M:net.minecraft.data.recipes.RecipeBuilder fenceGateBuilder(net.minecraft.world.level.IMaterial,net.minecraft.world.item.crafting.RecipeItemStack) -> h
    M:void pressurePlate(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> i
    M:net.minecraft.data.recipes.RecipeBuilder pressurePlateBuilder(net.minecraft.world.level.IMaterial,net.minecraft.world.item.crafting.RecipeItemStack) -> i
    M:void slab(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> j
    M:net.minecraft.data.recipes.RecipeBuilder slabBuilder(net.minecraft.world.level.IMaterial,net.minecraft.world.item.crafting.RecipeItemStack) -> j
    M:net.minecraft.data.recipes.RecipeBuilder stairBuilder(net.minecraft.world.level.IMaterial,net.minecraft.world.item.crafting.RecipeItemStack) -> k
    M:net.minecraft.data.recipes.RecipeBuilder trapdoorBuilder(net.minecraft.world.level.IMaterial,net.minecraft.world.item.crafting.RecipeItemStack) -> l
    M:net.minecraft.data.recipes.RecipeBuilder signBuilder(net.minecraft.world.level.IMaterial,net.minecraft.world.item.crafting.RecipeItemStack) -> m
    M:void coloredWoolFromWhiteWoolAndDye(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> k
    M:void carpet(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> l
    M:void coloredCarpetFromWhiteCarpetAndDye(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> m
    M:void bedFromPlanksAndWool(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> n
    M:void bedFromWhiteBedAndDye(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> o
    M:void banner(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> p
    M:void stainedGlassFromGlassAndDye(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> q
    M:void stainedGlassPaneFromStainedGlass(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> r
    M:void stainedGlassPaneFromGlassPaneAndDye(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> s
    M:void coloredTerracottaFromTerracottaAndDye(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> t
    M:void concretePowder(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> u
    M:void candle(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> a
    M:void wall(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> b
    M:net.minecraft.data.recipes.RecipeBuilder wallBuilder(net.minecraft.world.level.IMaterial,net.minecraft.world.item.crafting.RecipeItemStack) -> a
    M:void polished(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> c
    M:net.minecraft.data.recipes.RecipeBuilder polishedBuilder(net.minecraft.world.level.IMaterial,net.minecraft.world.item.crafting.RecipeItemStack) -> b
    M:void cut(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> d
    M:net.minecraft.data.recipes.ShapedRecipeBuilder cutBuilder(net.minecraft.world.level.IMaterial,net.minecraft.world.item.crafting.RecipeItemStack) -> c
    M:void chiseled(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> e
    M:net.minecraft.data.recipes.ShapedRecipeBuilder chiseledBuilder(net.minecraft.world.level.IMaterial,net.minecraft.world.item.crafting.RecipeItemStack) -> d
    M:void stonecutterResultFromBase(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> v
    M:void stonecutterResultFromBase(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial,int) -> a
    M:void smeltingResultFromBase(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> w
    M:void nineBlockStorageRecipes(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> x
    M:void nineBlockStorageRecipesWithCustomPacking(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial,java.lang.String,java.lang.String) -> a
    M:void nineBlockStorageRecipesRecipesWithCustomUnpacking(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial,java.lang.String,java.lang.String) -> b
    M:void nineBlockStorageRecipes(java.util.function.Consumer,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    M:void cookRecipes(java.util.function.Consumer,java.lang.String,net.minecraft.world.item.crafting.RecipeSerializerCooking,int) -> a
    M:void simpleCookingRecipe(java.util.function.Consumer,java.lang.String,net.minecraft.world.item.crafting.RecipeSerializerCooking,int,net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial,float) -> a
    M:void waxRecipes(java.util.function.Consumer) -> b
    M:void generateRecipes(java.util.function.Consumer,net.minecraft.data.BlockFamily) -> a
    M:net.minecraft.world.level.block.Block getBaseBlock(net.minecraft.data.BlockFamily,net.minecraft.data.BlockFamily$Variant) -> a
    M:net.minecraft.advancements.critereon.EnterBlockTrigger$TriggerInstance insideOf(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance has(net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange,net.minecraft.world.level.IMaterial) -> a
    M:net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance has(net.minecraft.world.level.IMaterial) -> a
    M:net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance has(net.minecraft.tags.TagKey) -> a
    M:net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance inventoryTrigger(net.minecraft.advancements.critereon.ItemPredicate[]) -> a
    M:java.lang.String getHasName(net.minecraft.world.level.IMaterial) -> b
    M:java.lang.String getItemName(net.minecraft.world.level.IMaterial) -> c
    M:java.lang.String getSimpleRecipeName(net.minecraft.world.level.IMaterial) -> d
    M:java.lang.String getConversionRecipeName(net.minecraft.world.level.IMaterial,net.minecraft.world.level.IMaterial) -> a
    M:java.lang.String getSmeltingRecipeName(net.minecraft.world.level.IMaterial) -> e
    M:java.lang.String getBlastingRecipeName(net.minecraft.world.level.IMaterial) -> f
    M:java.lang.String getName() -> a
net.minecraft.data.recipes.ShapedRecipeBuilder -> kw -> net.minecraft.data.recipes.ShapedRecipeBuilder
    F:net.minecraft.world.item.Item result -> b
    F:int count -> c
    F:java.util.List rows -> d
    F:java.util.Map key -> e
    F:net.minecraft.advancements.Advancement$SerializedAdvancement advancement -> f
    F:java.lang.String group -> g
    M:net.minecraft.data.recipes.ShapedRecipeBuilder shaped(net.minecraft.world.level.IMaterial) -> b
    M:net.minecraft.data.recipes.ShapedRecipeBuilder shaped(net.minecraft.world.level.IMaterial,int) -> a
    M:net.minecraft.data.recipes.ShapedRecipeBuilder define(java.lang.Character,net.minecraft.tags.TagKey) -> a
    M:net.minecraft.data.recipes.ShapedRecipeBuilder define(java.lang.Character,net.minecraft.world.level.IMaterial) -> a
    M:net.minecraft.data.recipes.ShapedRecipeBuilder define(java.lang.Character,net.minecraft.world.item.crafting.RecipeItemStack) -> a
    M:net.minecraft.data.recipes.ShapedRecipeBuilder pattern(java.lang.String) -> b
    M:net.minecraft.data.recipes.ShapedRecipeBuilder unlockedBy(java.lang.String,net.minecraft.advancements.CriterionInstance) -> b
    M:net.minecraft.data.recipes.ShapedRecipeBuilder group(java.lang.String) -> c
    M:net.minecraft.world.item.Item getResult() -> a
    M:void save(java.util.function.Consumer,net.minecraft.resources.MinecraftKey) -> a
    M:void ensureValid(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.data.recipes.RecipeBuilder group(java.lang.String) -> a
    M:net.minecraft.data.recipes.RecipeBuilder unlockedBy(java.lang.String,net.minecraft.advancements.CriterionInstance) -> a
net.minecraft.data.recipes.ShapedRecipeBuilder$Result -> kw$a -> net.minecraft.data.recipes.ShapedRecipeBuilder$a
    F:net.minecraft.resources.MinecraftKey id -> a
    F:net.minecraft.world.item.Item result -> b
    F:int count -> c
    F:java.lang.String group -> d
    F:java.util.List pattern -> e
    F:java.util.Map key -> f
    F:net.minecraft.advancements.Advancement$SerializedAdvancement advancement -> g
    F:net.minecraft.resources.MinecraftKey advancementId -> h
    M:void serializeRecipeData(com.google.gson.JsonObject) -> a
    M:net.minecraft.world.item.crafting.RecipeSerializer getType() -> c
    M:net.minecraft.resources.MinecraftKey getId() -> b
    M:com.google.gson.JsonObject serializeAdvancement() -> d
    M:net.minecraft.resources.MinecraftKey getAdvancementId() -> e
net.minecraft.data.recipes.ShapelessRecipeBuilder -> kx -> net.minecraft.data.recipes.ShapelessRecipeBuilder
    F:net.minecraft.world.item.Item result -> b
    F:int count -> c
    F:java.util.List ingredients -> d
    F:net.minecraft.advancements.Advancement$SerializedAdvancement advancement -> e
    F:java.lang.String group -> f
    M:net.minecraft.data.recipes.ShapelessRecipeBuilder shapeless(net.minecraft.world.level.IMaterial) -> b
    M:net.minecraft.data.recipes.ShapelessRecipeBuilder shapeless(net.minecraft.world.level.IMaterial,int) -> a
    M:net.minecraft.data.recipes.ShapelessRecipeBuilder requires(net.minecraft.tags.TagKey) -> a
    M:net.minecraft.data.recipes.ShapelessRecipeBuilder requires(net.minecraft.world.level.IMaterial) -> c
    M:net.minecraft.data.recipes.ShapelessRecipeBuilder requires(net.minecraft.world.level.IMaterial,int) -> b
    M:net.minecraft.data.recipes.ShapelessRecipeBuilder requires(net.minecraft.world.item.crafting.RecipeItemStack) -> a
    M:net.minecraft.data.recipes.ShapelessRecipeBuilder requires(net.minecraft.world.item.crafting.RecipeItemStack,int) -> a
    M:net.minecraft.data.recipes.ShapelessRecipeBuilder unlockedBy(java.lang.String,net.minecraft.advancements.CriterionInstance) -> b
    M:net.minecraft.data.recipes.ShapelessRecipeBuilder group(java.lang.String) -> b
    M:net.minecraft.world.item.Item getResult() -> a
    M:void save(java.util.function.Consumer,net.minecraft.resources.MinecraftKey) -> a
    M:void ensureValid(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.data.recipes.RecipeBuilder group(java.lang.String) -> a
    M:net.minecraft.data.recipes.RecipeBuilder unlockedBy(java.lang.String,net.minecraft.advancements.CriterionInstance) -> a
net.minecraft.data.recipes.ShapelessRecipeBuilder$Result -> kx$a -> net.minecraft.data.recipes.ShapelessRecipeBuilder$a
    F:net.minecraft.resources.MinecraftKey id -> a
    F:net.minecraft.world.item.Item result -> b
    F:int count -> c
    F:java.lang.String group -> d
    F:java.util.List ingredients -> e
    F:net.minecraft.advancements.Advancement$SerializedAdvancement advancement -> f
    F:net.minecraft.resources.MinecraftKey advancementId -> g
    M:void serializeRecipeData(com.google.gson.JsonObject) -> a
    M:net.minecraft.world.item.crafting.RecipeSerializer getType() -> c
    M:net.minecraft.resources.MinecraftKey getId() -> b
    M:com.google.gson.JsonObject serializeAdvancement() -> d
    M:net.minecraft.resources.MinecraftKey getAdvancementId() -> e
net.minecraft.data.recipes.SimpleCookingRecipeBuilder -> ky -> net.minecraft.data.recipes.SimpleCookingRecipeBuilder
    F:net.minecraft.world.item.Item result -> b
    F:net.minecraft.world.item.crafting.RecipeItemStack ingredient -> c
    F:float experience -> d
    F:int cookingTime -> e
    F:net.minecraft.advancements.Advancement$SerializedAdvancement advancement -> f
    F:java.lang.String group -> g
    F:net.minecraft.world.item.crafting.RecipeSerializerCooking serializer -> h
    M:net.minecraft.data.recipes.SimpleCookingRecipeBuilder cooking(net.minecraft.world.item.crafting.RecipeItemStack,net.minecraft.world.level.IMaterial,float,int,net.minecraft.world.item.crafting.RecipeSerializerCooking) -> a
    M:net.minecraft.data.recipes.SimpleCookingRecipeBuilder campfireCooking(net.minecraft.world.item.crafting.RecipeItemStack,net.minecraft.world.level.IMaterial,float,int) -> a
    M:net.minecraft.data.recipes.SimpleCookingRecipeBuilder blasting(net.minecraft.world.item.crafting.RecipeItemStack,net.minecraft.world.level.IMaterial,float,int) -> b
    M:net.minecraft.data.recipes.SimpleCookingRecipeBuilder smelting(net.minecraft.world.item.crafting.RecipeItemStack,net.minecraft.world.level.IMaterial,float,int) -> c
    M:net.minecraft.data.recipes.SimpleCookingRecipeBuilder smoking(net.minecraft.world.item.crafting.RecipeItemStack,net.minecraft.world.level.IMaterial,float,int) -> d
    M:net.minecraft.data.recipes.SimpleCookingRecipeBuilder unlockedBy(java.lang.String,net.minecraft.advancements.CriterionInstance) -> b
    M:net.minecraft.data.recipes.SimpleCookingRecipeBuilder group(java.lang.String) -> b
    M:net.minecraft.world.item.Item getResult() -> a
    M:void save(java.util.function.Consumer,net.minecraft.resources.MinecraftKey) -> a
    M:void ensureValid(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.data.recipes.RecipeBuilder group(java.lang.String) -> a
    M:net.minecraft.data.recipes.RecipeBuilder unlockedBy(java.lang.String,net.minecraft.advancements.CriterionInstance) -> a
net.minecraft.data.recipes.SimpleCookingRecipeBuilder$Result -> ky$a -> net.minecraft.data.recipes.SimpleCookingRecipeBuilder$a
    F:net.minecraft.resources.MinecraftKey id -> a
    F:java.lang.String group -> b
    F:net.minecraft.world.item.crafting.RecipeItemStack ingredient -> c
    F:net.minecraft.world.item.Item result -> d
    F:float experience -> e
    F:int cookingTime -> f
    F:net.minecraft.advancements.Advancement$SerializedAdvancement advancement -> g
    F:net.minecraft.resources.MinecraftKey advancementId -> h
    F:net.minecraft.world.item.crafting.RecipeSerializer serializer -> i
    M:void serializeRecipeData(com.google.gson.JsonObject) -> a
    M:net.minecraft.world.item.crafting.RecipeSerializer getType() -> c
    M:net.minecraft.resources.MinecraftKey getId() -> b
    M:com.google.gson.JsonObject serializeAdvancement() -> d
    M:net.minecraft.resources.MinecraftKey getAdvancementId() -> e
net.minecraft.data.recipes.SingleItemRecipeBuilder -> kz -> net.minecraft.data.recipes.SingleItemRecipeBuilder
    F:net.minecraft.world.item.Item result -> b
    F:net.minecraft.world.item.crafting.RecipeItemStack ingredient -> c
    F:int count -> d
    F:net.minecraft.advancements.Advancement$SerializedAdvancement advancement -> e
    F:java.lang.String group -> f
    F:net.minecraft.world.item.crafting.RecipeSerializer type -> g
    M:net.minecraft.data.recipes.SingleItemRecipeBuilder stonecutting(net.minecraft.world.item.crafting.RecipeItemStack,net.minecraft.world.level.IMaterial) -> a
    M:net.minecraft.data.recipes.SingleItemRecipeBuilder stonecutting(net.minecraft.world.item.crafting.RecipeItemStack,net.minecraft.world.level.IMaterial,int) -> a
    M:net.minecraft.data.recipes.SingleItemRecipeBuilder unlockedBy(java.lang.String,net.minecraft.advancements.CriterionInstance) -> b
    M:net.minecraft.data.recipes.SingleItemRecipeBuilder group(java.lang.String) -> b
    M:net.minecraft.world.item.Item getResult() -> a
    M:void save(java.util.function.Consumer,net.minecraft.resources.MinecraftKey) -> a
    M:void ensureValid(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.data.recipes.RecipeBuilder group(java.lang.String) -> a
    M:net.minecraft.data.recipes.RecipeBuilder unlockedBy(java.lang.String,net.minecraft.advancements.CriterionInstance) -> a
net.minecraft.data.recipes.SingleItemRecipeBuilder$Result -> kz$a -> net.minecraft.data.recipes.SingleItemRecipeBuilder$a
    F:net.minecraft.resources.MinecraftKey id -> a
    F:java.lang.String group -> b
    F:net.minecraft.world.item.crafting.RecipeItemStack ingredient -> c
    F:net.minecraft.world.item.Item result -> d
    F:int count -> e
    F:net.minecraft.advancements.Advancement$SerializedAdvancement advancement -> f
    F:net.minecraft.resources.MinecraftKey advancementId -> g
    F:net.minecraft.world.item.crafting.RecipeSerializer type -> h
    M:void serializeRecipeData(com.google.gson.JsonObject) -> a
    M:net.minecraft.resources.MinecraftKey getId() -> b
    M:net.minecraft.world.item.crafting.RecipeSerializer getType() -> c
    M:com.google.gson.JsonObject serializeAdvancement() -> d
    M:net.minecraft.resources.MinecraftKey getAdvancementId() -> e
net.minecraft.data.recipes.SpecialRecipeBuilder -> la -> net.minecraft.data.recipes.SpecialRecipeBuilder
    F:net.minecraft.world.item.crafting.RecipeSerializerComplex serializer -> a
    M:net.minecraft.data.recipes.SpecialRecipeBuilder special(net.minecraft.world.item.crafting.RecipeSerializerComplex) -> a
    M:void save(java.util.function.Consumer,java.lang.String) -> a
    M:void serializeRecipeData(com.google.gson.JsonObject) -> a
    M:net.minecraft.world.item.crafting.RecipeSerializer getType() -> c
    M:net.minecraft.resources.MinecraftKey getId() -> b
    M:com.google.gson.JsonObject serializeAdvancement() -> d
    M:net.minecraft.resources.MinecraftKey getAdvancementId() -> e
net.minecraft.data.recipes.UpgradeRecipeBuilder -> lb -> net.minecraft.data.recipes.UpgradeRecipeBuilder
    F:net.minecraft.world.item.crafting.RecipeItemStack base -> a
    F:net.minecraft.world.item.crafting.RecipeItemStack addition -> b
    F:net.minecraft.world.item.Item result -> c
    F:net.minecraft.advancements.Advancement$SerializedAdvancement advancement -> d
    F:net.minecraft.world.item.crafting.RecipeSerializer type -> e
    M:net.minecraft.data.recipes.UpgradeRecipeBuilder smithing(net.minecraft.world.item.crafting.RecipeItemStack,net.minecraft.world.item.crafting.RecipeItemStack,net.minecraft.world.item.Item) -> a
    M:net.minecraft.data.recipes.UpgradeRecipeBuilder unlocks(java.lang.String,net.minecraft.advancements.CriterionInstance) -> a
    M:void save(java.util.function.Consumer,java.lang.String) -> a
    M:void save(java.util.function.Consumer,net.minecraft.resources.MinecraftKey) -> a
    M:void ensureValid(net.minecraft.resources.MinecraftKey) -> a
net.minecraft.data.recipes.UpgradeRecipeBuilder$Result -> lb$a -> net.minecraft.data.recipes.UpgradeRecipeBuilder$a
    F:net.minecraft.resources.MinecraftKey id -> a
    F:net.minecraft.world.item.crafting.RecipeItemStack base -> b
    F:net.minecraft.world.item.crafting.RecipeItemStack addition -> c
    F:net.minecraft.world.item.Item result -> d
    F:net.minecraft.advancements.Advancement$SerializedAdvancement advancement -> e
    F:net.minecraft.resources.MinecraftKey advancementId -> f
    F:net.minecraft.world.item.crafting.RecipeSerializer type -> g
    M:void serializeRecipeData(com.google.gson.JsonObject) -> a
    M:net.minecraft.resources.MinecraftKey getId() -> b
    M:net.minecraft.world.item.crafting.RecipeSerializer getType() -> c
    M:com.google.gson.JsonObject serializeAdvancement() -> d
    M:net.minecraft.resources.MinecraftKey getAdvancementId() -> e
net.minecraft.data.structures.NbtToSnbt -> ld -> net.minecraft.data.structures.DebugReportNBT
    F:org.slf4j.Logger LOGGER -> c
    F:net.minecraft.data.DebugReportGenerator generator -> d
    M:void run(net.minecraft.data.CachedOutput) -> a
    M:java.lang.String getName() -> a
    M:java.lang.String getName(java.nio.file.Path,java.nio.file.Path) -> a
    M:java.nio.file.Path convertStructure(net.minecraft.data.CachedOutput,java.nio.file.Path,java.lang.String,java.nio.file.Path) -> a
    M:void writeSnbt(net.minecraft.data.CachedOutput,java.nio.file.Path,java.lang.String) -> a
net.minecraft.data.structures.SnbtToNbt -> le -> net.minecraft.data.structures.SnbtToNbt
    F:java.nio.file.Path DUMP_SNBT_TO -> c
    F:org.slf4j.Logger LOGGER -> d
    F:net.minecraft.data.DebugReportGenerator generator -> e
    F:java.util.List filters -> f
    M:net.minecraft.data.structures.SnbtToNbt addFilter(net.minecraft.data.structures.SnbtToNbt$Filter) -> a
    M:net.minecraft.nbt.NBTTagCompound applyFilters(java.lang.String,net.minecraft.nbt.NBTTagCompound) -> a
    M:void run(net.minecraft.data.CachedOutput) -> a
    M:java.lang.String getName() -> a
    M:java.lang.String getName(java.nio.file.Path,java.nio.file.Path) -> a
    M:net.minecraft.data.structures.SnbtToNbt$TaskResult readStructure(java.nio.file.Path,java.lang.String) -> a
    M:void storeStructureIfChanged(net.minecraft.data.CachedOutput,net.minecraft.data.structures.SnbtToNbt$TaskResult,java.nio.file.Path) -> a
net.minecraft.data.structures.SnbtToNbt$Filter -> le$a -> net.minecraft.data.structures.SnbtToNbt$a
net.minecraft.data.structures.SnbtToNbt$StructureConversionException -> le$b -> net.minecraft.data.structures.SnbtToNbt$b
net.minecraft.data.structures.SnbtToNbt$TaskResult -> le$c -> net.minecraft.data.structures.SnbtToNbt$c
    F:java.lang.String name -> a
    F:java.lang.String snbtPayload -> c
    F:com.google.common.hash.HashCode hash -> d
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String name() -> a
    M:java.lang.String snbtPayload() -> c
    M:com.google.common.hash.HashCode hash() -> d
net.minecraft.data.structures.StructureUpdater -> lf -> net.minecraft.data.structures.StructureUpdater
    F:org.slf4j.Logger LOGGER -> a
    M:net.minecraft.nbt.NBTTagCompound apply(java.lang.String,net.minecraft.nbt.NBTTagCompound) -> apply
    M:net.minecraft.nbt.NBTTagCompound update(java.lang.String,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagCompound patchVersion(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagCompound updateStructure(java.lang.String,net.minecraft.nbt.NBTTagCompound) -> b
net.minecraft.data.tags.BannerPatternTagsProvider -> lh -> net.minecraft.data.tags.BannerPatternTagsProvider
    M:void addTags() -> b
net.minecraft.data.tags.BiomeTagsProvider -> li -> net.minecraft.data.tags.BiomeTagsProvider
    M:void addTags() -> b
net.minecraft.data.tags.BlockTagsProvider -> lj -> net.minecraft.data.tags.BlockTagsProvider
    M:void addTags() -> b
net.minecraft.data.tags.CatVariantTagsProvider -> lk -> net.minecraft.data.tags.CatVariantTagsProvider
    M:void addTags() -> b
net.minecraft.data.tags.EntityTypeTagsProvider -> ll -> net.minecraft.data.tags.EntityTypeTagsProvider
    M:void addTags() -> b
net.minecraft.data.tags.FlatLevelGeneratorPresetTagsProvider -> lm -> net.minecraft.data.tags.FlatLevelGeneratorPresetTagsProvider
    M:void addTags() -> b
net.minecraft.data.tags.FluidTagsProvider -> ln -> net.minecraft.data.tags.FluidTagsProvider
    M:void addTags() -> b
net.minecraft.data.tags.GameEventTagsProvider -> lo -> net.minecraft.data.tags.GameEventTagsProvider
    M:void addTags() -> b
net.minecraft.data.tags.InstrumentTagsProvider -> lp -> net.minecraft.data.tags.InstrumentTagsProvider
    M:void addTags() -> b
net.minecraft.data.tags.ItemTagsProvider -> lq -> net.minecraft.data.tags.ItemTagsProvider
    F:java.util.function.Function blockTags -> e
    M:void addTags() -> b
    M:void copy(net.minecraft.tags.TagKey,net.minecraft.tags.TagKey) -> a
net.minecraft.data.tags.PaintingVariantTagsProvider -> lr -> net.minecraft.data.tags.PaintingVariantTagsProvider
    M:void addTags() -> b
net.minecraft.data.tags.PoiTypeTagsProvider -> ls -> net.minecraft.data.tags.PoiTypeTagsProvider
    M:void addTags() -> b
net.minecraft.data.tags.StructureTagsProvider -> lt -> net.minecraft.data.tags.StructureTagsProvider
    M:void addTags() -> b
net.minecraft.data.tags.TagsProvider -> lu -> net.minecraft.data.tags.TagsProvider
    F:org.slf4j.Logger LOGGER -> e
    F:net.minecraft.data.DataGenerator$PathProvider pathProvider -> c
    F:net.minecraft.core.IRegistry registry -> d
    F:java.util.Map builders -> f
    M:java.lang.String getName() -> a
    M:void run(net.minecraft.data.CachedOutput) -> a
    M:net.minecraft.data.tags.TagsProvider$TagAppender tag(net.minecraft.tags.TagKey) -> a
    M:net.minecraft.tags.TagBuilder getOrCreateRawBuilder(net.minecraft.tags.TagKey) -> b
net.minecraft.data.tags.TagsProvider$TagAppender -> lu$a -> net.minecraft.data.tags.TagsProvider$a
    F:net.minecraft.tags.TagBuilder builder -> a
    F:net.minecraft.core.IRegistry registry -> b
    M:net.minecraft.data.tags.TagsProvider$TagAppender add(java.lang.Object) -> a
    M:net.minecraft.data.tags.TagsProvider$TagAppender add(net.minecraft.resources.ResourceKey[]) -> a
    M:net.minecraft.data.tags.TagsProvider$TagAppender addOptional(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.data.tags.TagsProvider$TagAppender addTag(net.minecraft.tags.TagKey) -> a
    M:net.minecraft.data.tags.TagsProvider$TagAppender addOptionalTag(net.minecraft.resources.MinecraftKey) -> b
    M:net.minecraft.data.tags.TagsProvider$TagAppender add(java.lang.Object[]) -> a
net.minecraft.data.tags.WorldPresetTagsProvider -> lv -> net.minecraft.data.tags.WorldPresetTagsProvider
    M:void addTags() -> b
net.minecraft.data.worldgen.AncientCityStructurePieces -> lx -> net.minecraft.data.worldgen.AncientCityStructurePieces
    F:net.minecraft.core.Holder START -> a
    M:void bootstrap() -> a
net.minecraft.data.worldgen.AncientCityStructurePools -> ly -> net.minecraft.data.worldgen.AncientCityStructurePools
    M:void bootstrap() -> a
net.minecraft.data.worldgen.BastionBridgePools -> lz -> net.minecraft.data.worldgen.WorldGenFeatureBastionBridge
    M:void bootstrap() -> a
net.minecraft.data.worldgen.BastionHoglinStablePools -> ma -> net.minecraft.data.worldgen.WorldGenFeatureBastionHoglinStable
    M:void bootstrap() -> a
net.minecraft.data.worldgen.BastionHousingUnitsPools -> mb -> net.minecraft.data.worldgen.WorldGenFeatureBastionUnits
    M:void bootstrap() -> a
net.minecraft.data.worldgen.BastionPieces -> mc -> net.minecraft.data.worldgen.WorldGenFeatureBastionPieces
    F:net.minecraft.core.Holder START -> a
    M:void bootstrap() -> a
net.minecraft.data.worldgen.BastionSharedPools -> md -> net.minecraft.data.worldgen.WorldGenFeatureBastionExtra
    M:void bootstrap() -> a
net.minecraft.data.worldgen.BastionTreasureRoomPools -> me -> net.minecraft.data.worldgen.WorldGenFeatureBastionTreasure
    M:void bootstrap() -> a
net.minecraft.data.worldgen.BiomeDefaultFeatures -> mf -> net.minecraft.data.worldgen.BiomeSettings
    M:void addDefaultCarversAndLakes(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> a
    M:void addDefaultMonsterRoom(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> b
    M:void addDefaultUndergroundVariety(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> c
    M:void addDripstone(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> d
    M:void addSculk(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> e
    M:void addDefaultOres(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> f
    M:void addDefaultOres(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder,boolean) -> a
    M:void addExtraGold(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> g
    M:void addExtraEmeralds(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> h
    M:void addInfestedStone(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> i
    M:void addDefaultSoftDisks(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> j
    M:void addSwampClayDisk(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> k
    M:void addMangroveSwampDisks(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> l
    M:void addMossyStoneBlock(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> m
    M:void addFerns(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> n
    M:void addRareBerryBushes(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> o
    M:void addCommonBerryBushes(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> p
    M:void addLightBambooVegetation(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> q
    M:void addBambooVegetation(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> r
    M:void addTaigaTrees(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> s
    M:void addGroveTrees(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> t
    M:void addWaterTrees(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> u
    M:void addBirchTrees(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> v
    M:void addOtherBirchTrees(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> w
    M:void addTallBirchTrees(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> x
    M:void addSavannaTrees(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> y
    M:void addShatteredSavannaTrees(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> z
    M:void addPlainGrass(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> aa
    M:void addDefaultMushrooms(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> ab
    M:void addDefaultExtraVegetation(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> ac
    M:void addBadlandExtraVegetation(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> ad
    M:void addJungleMelons(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> ae
    M:void addSparseJungleMelons(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> af
    M:void addJungleVines(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> ag
    M:void addDesertExtraVegetation(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> ah
    M:void addSwampExtraVegetation(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> ai
    M:void addDesertExtraDecoration(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> aj
    M:void addFossilDecoration(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> ak
    M:void addColdOceanExtraVegetation(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> al
    M:void addDefaultSeagrass(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> am
    M:void addLukeWarmKelp(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> an
    M:void addDefaultSprings(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> ao
    M:void addFrozenSprings(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> ap
    M:void addIcebergs(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> aq
    M:void addBlueIce(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> ar
    M:void addSurfaceFreezing(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> as
    M:void addNetherDefaultOres(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> at
    M:void addAncientDebris(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> au
    M:void addDefaultCrystalFormations(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> av
    M:void farmAnimals(net.minecraft.world.level.biome.MobSpawnSettings$Builder) -> a
    M:void caveSpawns(net.minecraft.world.level.biome.MobSpawnSettings$Builder) -> b
    M:void commonSpawns(net.minecraft.world.level.biome.MobSpawnSettings$Builder) -> c
    M:void oceanSpawns(net.minecraft.world.level.biome.MobSpawnSettings$Builder,int,int,int) -> a
    M:void warmOceanSpawns(net.minecraft.world.level.biome.MobSpawnSettings$Builder,int,int) -> a
    M:void plainsSpawns(net.minecraft.world.level.biome.MobSpawnSettings$Builder) -> d
    M:void snowySpawns(net.minecraft.world.level.biome.MobSpawnSettings$Builder) -> e
    M:void desertSpawns(net.minecraft.world.level.biome.MobSpawnSettings$Builder) -> f
    M:void dripstoneCavesSpawns(net.minecraft.world.level.biome.MobSpawnSettings$Builder) -> g
    M:void monsters(net.minecraft.world.level.biome.MobSpawnSettings$Builder,int,int,int,boolean) -> a
    M:void mooshroomSpawns(net.minecraft.world.level.biome.MobSpawnSettings$Builder) -> h
    M:void baseJungleSpawns(net.minecraft.world.level.biome.MobSpawnSettings$Builder) -> i
    M:void endSpawns(net.minecraft.world.level.biome.MobSpawnSettings$Builder) -> j
net.minecraft.data.worldgen.Carvers -> mg -> net.minecraft.data.worldgen.WorldGenCarvers
    F:net.minecraft.core.Holder CAVE -> a
    F:net.minecraft.core.Holder CAVE_EXTRA_UNDERGROUND -> b
    F:net.minecraft.core.Holder CANYON -> c
    F:net.minecraft.core.Holder NETHER_CAVE -> d
    M:net.minecraft.core.Holder register(java.lang.String,net.minecraft.world.level.levelgen.carver.WorldGenCarverWrapper) -> a
net.minecraft.data.worldgen.DesertVillagePools -> mh -> net.minecraft.data.worldgen.WorldGenFeatureDesertVillage
    F:net.minecraft.core.Holder START -> a
    M:void bootstrap() -> a
net.minecraft.data.worldgen.DimensionTypes -> mi -> net.minecraft.data.worldgen.DimensionTypes
    M:net.minecraft.core.Holder bootstrap(net.minecraft.core.IRegistry) -> a
net.minecraft.data.worldgen.NoiseData -> mj -> net.minecraft.data.worldgen.NoiseData
    M:net.minecraft.core.Holder bootstrap(net.minecraft.core.IRegistry) -> a
    M:void registerBiomeNoises(net.minecraft.core.IRegistry,int,net.minecraft.resources.ResourceKey,net.minecraft.resources.ResourceKey,net.minecraft.resources.ResourceKey,net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.core.Holder register(net.minecraft.core.IRegistry,net.minecraft.resources.ResourceKey,int,double,double[]) -> a
net.minecraft.data.worldgen.PillagerOutpostPools -> mk -> net.minecraft.data.worldgen.WorldGenFeaturePillagerOutpostPieces
    F:net.minecraft.core.Holder START -> a
    M:void bootstrap() -> a
net.minecraft.data.worldgen.PlainVillagePools -> ml -> net.minecraft.data.worldgen.WorldGenFeatureVillagePlain
    F:net.minecraft.core.Holder START -> a
    M:void bootstrap() -> a
net.minecraft.data.worldgen.Pools -> mm -> net.minecraft.data.worldgen.WorldGenFeaturePieces
    F:net.minecraft.resources.ResourceKey EMPTY -> a
    F:net.minecraft.core.Holder BUILTIN_EMPTY -> b
    M:net.minecraft.core.Holder register(net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolTemplate) -> a
    M:void forceBootstrap() -> a
    M:net.minecraft.core.Holder bootstrap(net.minecraft.core.IRegistry) -> a
net.minecraft.data.worldgen.ProcessorLists -> mn -> net.minecraft.data.worldgen.ProcessorLists
    F:net.minecraft.core.Holder EMPTY -> a
    F:net.minecraft.core.Holder ZOMBIE_PLAINS -> b
    F:net.minecraft.core.Holder ZOMBIE_SAVANNA -> c
    F:net.minecraft.core.Holder ZOMBIE_SNOWY -> d
    F:net.minecraft.core.Holder ZOMBIE_TAIGA -> e
    F:net.minecraft.core.Holder ZOMBIE_DESERT -> f
    F:net.minecraft.core.Holder MOSSIFY_10_PERCENT -> g
    F:net.minecraft.core.Holder MOSSIFY_20_PERCENT -> h
    F:net.minecraft.core.Holder MOSSIFY_70_PERCENT -> i
    F:net.minecraft.core.Holder STREET_PLAINS -> j
    F:net.minecraft.core.Holder STREET_SAVANNA -> k
    F:net.minecraft.core.Holder STREET_SNOWY_OR_TAIGA -> l
    F:net.minecraft.core.Holder FARM_PLAINS -> m
    F:net.minecraft.core.Holder FARM_SAVANNA -> n
    F:net.minecraft.core.Holder FARM_SNOWY -> o
    F:net.minecraft.core.Holder FARM_TAIGA -> p
    F:net.minecraft.core.Holder FARM_DESERT -> q
    F:net.minecraft.core.Holder OUTPOST_ROT -> r
    F:net.minecraft.core.Holder BOTTOM_RAMPART -> s
    F:net.minecraft.core.Holder TREASURE_ROOMS -> t
    F:net.minecraft.core.Holder HOUSING -> u
    F:net.minecraft.core.Holder SIDE_WALL_DEGRADATION -> v
    F:net.minecraft.core.Holder STABLE_DEGRADATION -> w
    F:net.minecraft.core.Holder BASTION_GENERIC_DEGRADATION -> x
    F:net.minecraft.core.Holder RAMPART_DEGRADATION -> y
    F:net.minecraft.core.Holder ENTRANCE_REPLACEMENT -> z
    M:net.minecraft.core.Holder register(java.lang.String,com.google.common.collect.ImmutableList) -> a
net.minecraft.data.worldgen.SavannaVillagePools -> mo -> net.minecraft.data.worldgen.WorldGenFeatureVillageSavanna
    F:net.minecraft.core.Holder START -> a
    M:void bootstrap() -> a
net.minecraft.data.worldgen.SnowyVillagePools -> mp -> net.minecraft.data.worldgen.WorldGenFeatureVillageSnowy
    F:net.minecraft.core.Holder START -> a
    M:void bootstrap() -> a
net.minecraft.data.worldgen.StructureSets -> mq -> net.minecraft.data.worldgen.StructureSets
    F:net.minecraft.core.Holder VILLAGES -> a
    F:net.minecraft.core.Holder DESERT_PYRAMIDS -> b
    F:net.minecraft.core.Holder IGLOOS -> c
    F:net.minecraft.core.Holder JUNGLE_TEMPLES -> d
    F:net.minecraft.core.Holder SWAMP_HUTS -> e
    F:net.minecraft.core.Holder PILLAGER_OUTPOSTS -> f
    F:net.minecraft.core.Holder ANCIENT_CITIES -> g
    F:net.minecraft.core.Holder OCEAN_MONUMENTS -> h
    F:net.minecraft.core.Holder WOODLAND_MANSIONS -> i
    F:net.minecraft.core.Holder BURIED_TREASURES -> j
    F:net.minecraft.core.Holder MINESHAFTS -> k
    F:net.minecraft.core.Holder RUINED_PORTALS -> l
    F:net.minecraft.core.Holder SHIPWRECKS -> m
    F:net.minecraft.core.Holder OCEAN_RUINS -> n
    F:net.minecraft.core.Holder NETHER_COMPLEXES -> o
    F:net.minecraft.core.Holder NETHER_FOSSILS -> p
    F:net.minecraft.core.Holder END_CITIES -> q
    F:net.minecraft.core.Holder STRONGHOLDS -> r
    M:net.minecraft.core.Holder bootstrap(net.minecraft.core.IRegistry) -> a
    M:net.minecraft.core.Holder register(net.minecraft.resources.ResourceKey,net.minecraft.world.level.levelgen.structure.StructureSet) -> a
    M:net.minecraft.core.Holder register(net.minecraft.resources.ResourceKey,net.minecraft.core.Holder,net.minecraft.world.level.levelgen.structure.placement.StructurePlacement) -> a
net.minecraft.data.worldgen.Structures -> mr -> net.minecraft.data.worldgen.Structures
    F:net.minecraft.core.Holder PILLAGER_OUTPOST -> a
    F:net.minecraft.core.Holder MINESHAFT -> b
    F:net.minecraft.core.Holder MINESHAFT_MESA -> c
    F:net.minecraft.core.Holder WOODLAND_MANSION -> d
    F:net.minecraft.core.Holder JUNGLE_TEMPLE -> e
    F:net.minecraft.core.Holder DESERT_PYRAMID -> f
    F:net.minecraft.core.Holder IGLOO -> g
    F:net.minecraft.core.Holder SHIPWRECK -> h
    F:net.minecraft.core.Holder SHIPWRECK_BEACHED -> i
    F:net.minecraft.core.Holder SWAMP_HUT -> j
    F:net.minecraft.core.Holder STRONGHOLD -> k
    F:net.minecraft.core.Holder OCEAN_MONUMENT -> l
    F:net.minecraft.core.Holder OCEAN_RUIN_COLD -> m
    F:net.minecraft.core.Holder OCEAN_RUIN_WARM -> n
    F:net.minecraft.core.Holder FORTRESS -> o
    F:net.minecraft.core.Holder NETHER_FOSSIL -> p
    F:net.minecraft.core.Holder END_CITY -> q
    F:net.minecraft.core.Holder BURIED_TREASURE -> r
    F:net.minecraft.core.Holder BASTION_REMNANT -> s
    F:net.minecraft.core.Holder VILLAGE_PLAINS -> t
    F:net.minecraft.core.Holder VILLAGE_DESERT -> u
    F:net.minecraft.core.Holder VILLAGE_SAVANNA -> v
    F:net.minecraft.core.Holder VILLAGE_SNOWY -> w
    F:net.minecraft.core.Holder VILLAGE_TAIGA -> x
    F:net.minecraft.core.Holder RUINED_PORTAL_STANDARD -> y
    F:net.minecraft.core.Holder RUINED_PORTAL_DESERT -> z
    M:net.minecraft.core.Holder bootstrap(net.minecraft.core.IRegistry) -> a
    M:net.minecraft.world.level.levelgen.structure.Structure$StructureSettings structure(net.minecraft.tags.TagKey,java.util.Map,net.minecraft.world.level.levelgen.WorldGenStage$Decoration,net.minecraft.world.level.levelgen.structure.TerrainAdjustment) -> a
    M:net.minecraft.world.level.levelgen.structure.Structure$StructureSettings structure(net.minecraft.tags.TagKey,net.minecraft.world.level.levelgen.WorldGenStage$Decoration,net.minecraft.world.level.levelgen.structure.TerrainAdjustment) -> a
    M:net.minecraft.world.level.levelgen.structure.Structure$StructureSettings structure(net.minecraft.tags.TagKey,net.minecraft.world.level.levelgen.structure.TerrainAdjustment) -> a
    M:net.minecraft.core.Holder register(net.minecraft.resources.ResourceKey,net.minecraft.world.level.levelgen.structure.Structure) -> a
    M:net.minecraft.core.HolderSet biomes(net.minecraft.tags.TagKey) -> a
net.minecraft.data.worldgen.SurfaceRuleData -> ms -> net.minecraft.data.worldgen.SurfaceRuleData
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource AIR -> a
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource BEDROCK -> b
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource WHITE_TERRACOTTA -> c
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource ORANGE_TERRACOTTA -> d
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource TERRACOTTA -> e
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource RED_SAND -> f
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource RED_SANDSTONE -> g
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource STONE -> h
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource DEEPSLATE -> i
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource DIRT -> j
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource PODZOL -> k
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource COARSE_DIRT -> l
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource MYCELIUM -> m
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource GRASS_BLOCK -> n
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource CALCITE -> o
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource GRAVEL -> p
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource SAND -> q
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource SANDSTONE -> r
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource PACKED_ICE -> s
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource SNOW_BLOCK -> t
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource MUD -> u
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource POWDER_SNOW -> v
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource ICE -> w
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource WATER -> x
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource LAVA -> y
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource NETHERRACK -> z
    M:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource makeStateRule(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource overworld() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource overworldLike(boolean,boolean,boolean) -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource nether() -> b
    M:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource end() -> c
    M:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource air() -> d
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource surfaceNoiseAbove(double) -> a
net.minecraft.data.worldgen.TaigaVillagePools -> mt -> net.minecraft.data.worldgen.WorldGenFeatureVillageTaiga
    F:net.minecraft.core.Holder START -> a
    M:void bootstrap() -> a
net.minecraft.data.worldgen.TerrainProvider -> mu -> net.minecraft.data.worldgen.TerrainProvider
    F:float DEEP_OCEAN_CONTINENTALNESS -> a
    F:float OCEAN_CONTINENTALNESS -> b
    F:float PLAINS_CONTINENTALNESS -> c
    F:float BEACH_CONTINENTALNESS -> d
    F:net.minecraft.util.ToFloatFunction NO_TRANSFORM -> e
    F:net.minecraft.util.ToFloatFunction AMPLIFIED_OFFSET -> f
    F:net.minecraft.util.ToFloatFunction AMPLIFIED_FACTOR -> g
    F:net.minecraft.util.ToFloatFunction AMPLIFIED_JAGGEDNESS -> h
    M:net.minecraft.util.CubicSpline overworldOffset(net.minecraft.util.ToFloatFunction,net.minecraft.util.ToFloatFunction,net.minecraft.util.ToFloatFunction,boolean) -> a
    M:net.minecraft.util.CubicSpline overworldFactor(net.minecraft.util.ToFloatFunction,net.minecraft.util.ToFloatFunction,net.minecraft.util.ToFloatFunction,net.minecraft.util.ToFloatFunction,boolean) -> a
    M:net.minecraft.util.CubicSpline overworldJaggedness(net.minecraft.util.ToFloatFunction,net.minecraft.util.ToFloatFunction,net.minecraft.util.ToFloatFunction,net.minecraft.util.ToFloatFunction,boolean) -> b
    M:net.minecraft.util.CubicSpline buildErosionJaggednessSpline(net.minecraft.util.ToFloatFunction,net.minecraft.util.ToFloatFunction,net.minecraft.util.ToFloatFunction,float,float,float,float,net.minecraft.util.ToFloatFunction) -> a
    M:net.minecraft.util.CubicSpline buildRidgeJaggednessSpline(net.minecraft.util.ToFloatFunction,net.minecraft.util.ToFloatFunction,float,float,net.minecraft.util.ToFloatFunction) -> a
    M:net.minecraft.util.CubicSpline buildWeirdnessJaggednessSpline(net.minecraft.util.ToFloatFunction,float,net.minecraft.util.ToFloatFunction) -> a
    M:net.minecraft.util.CubicSpline getErosionFactor(net.minecraft.util.ToFloatFunction,net.minecraft.util.ToFloatFunction,net.minecraft.util.ToFloatFunction,float,boolean,net.minecraft.util.ToFloatFunction) -> a
    M:float calculateSlope(float,float,float,float) -> a
    M:net.minecraft.util.CubicSpline buildMountainRidgeSplineWithPoints(net.minecraft.util.ToFloatFunction,float,boolean,net.minecraft.util.ToFloatFunction) -> a
    M:float mountainContinentalness(float,float,float) -> a
    M:float calculateMountainRidgeZeroContinentalnessPoint(float) -> a
    M:net.minecraft.util.CubicSpline buildErosionOffsetSpline(net.minecraft.util.ToFloatFunction,net.minecraft.util.ToFloatFunction,float,float,float,float,float,float,boolean,boolean,net.minecraft.util.ToFloatFunction) -> a
    M:net.minecraft.util.CubicSpline ridgeSpline(net.minecraft.util.ToFloatFunction,float,float,float,float,float,float,net.minecraft.util.ToFloatFunction) -> a
net.minecraft.data.worldgen.VillagePools -> mv -> net.minecraft.data.worldgen.WorldGenFeatureVillages
    M:void bootstrap() -> a
net.minecraft.data.worldgen.biome.Biomes -> mw -> net.minecraft.data.worldgen.biome.BiomeRegistry
    M:net.minecraft.core.Holder bootstrap(net.minecraft.core.IRegistry) -> a
net.minecraft.data.worldgen.biome.EndBiomes -> mx -> net.minecraft.data.worldgen.biome.EndBiomes
    M:net.minecraft.world.level.biome.BiomeBase baseEndBiome(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> a
    M:net.minecraft.world.level.biome.BiomeBase endBarrens() -> a
    M:net.minecraft.world.level.biome.BiomeBase theEnd() -> b
    M:net.minecraft.world.level.biome.BiomeBase endMidlands() -> c
    M:net.minecraft.world.level.biome.BiomeBase endHighlands() -> d
    M:net.minecraft.world.level.biome.BiomeBase smallEndIslands() -> e
net.minecraft.data.worldgen.biome.NetherBiomes -> my -> net.minecraft.data.worldgen.biome.NetherBiomes
    M:net.minecraft.world.level.biome.BiomeBase netherWastes() -> a
    M:net.minecraft.world.level.biome.BiomeBase soulSandValley() -> b
    M:net.minecraft.world.level.biome.BiomeBase basaltDeltas() -> c
    M:net.minecraft.world.level.biome.BiomeBase crimsonForest() -> d
    M:net.minecraft.world.level.biome.BiomeBase warpedForest() -> e
net.minecraft.data.worldgen.biome.OverworldBiomes -> mz -> net.minecraft.data.worldgen.biome.OverworldBiomes
    F:int NORMAL_WATER_COLOR -> a
    F:int NORMAL_WATER_FOG_COLOR -> b
    F:int OVERWORLD_FOG_COLOR -> c
    F:net.minecraft.sounds.Music NORMAL_MUSIC -> d
    M:int calculateSkyColor(float) -> a
    M:net.minecraft.world.level.biome.BiomeBase biome(net.minecraft.world.level.biome.BiomeBase$Precipitation,float,float,net.minecraft.world.level.biome.MobSpawnSettings$Builder,net.minecraft.world.level.biome.BiomeGenerationSettings$Builder,net.minecraft.sounds.Music) -> a
    M:net.minecraft.world.level.biome.BiomeBase biome(net.minecraft.world.level.biome.BiomeBase$Precipitation,float,float,int,int,net.minecraft.world.level.biome.MobSpawnSettings$Builder,net.minecraft.world.level.biome.BiomeGenerationSettings$Builder,net.minecraft.sounds.Music) -> a
    M:void globalOverworldGeneration(net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> a
    M:net.minecraft.world.level.biome.BiomeBase oldGrowthTaiga(boolean) -> a
    M:net.minecraft.world.level.biome.BiomeBase sparseJungle() -> a
    M:net.minecraft.world.level.biome.BiomeBase jungle() -> b
    M:net.minecraft.world.level.biome.BiomeBase bambooJungle() -> c
    M:net.minecraft.world.level.biome.BiomeBase baseJungle(float,boolean,boolean,boolean,net.minecraft.world.level.biome.MobSpawnSettings$Builder) -> a
    M:net.minecraft.world.level.biome.BiomeBase windsweptHills(boolean) -> b
    M:net.minecraft.world.level.biome.BiomeBase desert() -> d
    M:net.minecraft.world.level.biome.BiomeBase plains(boolean,boolean,boolean) -> a
    M:net.minecraft.world.level.biome.BiomeBase mushroomFields() -> e
    M:net.minecraft.world.level.biome.BiomeBase savanna(boolean,boolean) -> a
    M:net.minecraft.world.level.biome.BiomeBase badlands(boolean) -> c
    M:net.minecraft.world.level.biome.BiomeBase baseOcean(net.minecraft.world.level.biome.MobSpawnSettings$Builder,int,int,net.minecraft.world.level.biome.BiomeGenerationSettings$Builder) -> a
    M:net.minecraft.world.level.biome.BiomeGenerationSettings$Builder baseOceanGeneration() -> t
    M:net.minecraft.world.level.biome.BiomeBase coldOcean(boolean) -> d
    M:net.minecraft.world.level.biome.BiomeBase ocean(boolean) -> e
    M:net.minecraft.world.level.biome.BiomeBase lukeWarmOcean(boolean) -> f
    M:net.minecraft.world.level.biome.BiomeBase warmOcean() -> f
    M:net.minecraft.world.level.biome.BiomeBase frozenOcean(boolean) -> g
    M:net.minecraft.world.level.biome.BiomeBase forest(boolean,boolean,boolean) -> b
    M:net.minecraft.world.level.biome.BiomeBase taiga(boolean) -> h
    M:net.minecraft.world.level.biome.BiomeBase darkForest() -> g
    M:net.minecraft.world.level.biome.BiomeBase swamp() -> h
    M:net.minecraft.world.level.biome.BiomeBase mangroveSwamp() -> i
    M:net.minecraft.world.level.biome.BiomeBase river(boolean) -> i
    M:net.minecraft.world.level.biome.BiomeBase beach(boolean,boolean) -> b
    M:net.minecraft.world.level.biome.BiomeBase theVoid() -> j
    M:net.minecraft.world.level.biome.BiomeBase meadow() -> k
    M:net.minecraft.world.level.biome.BiomeBase frozenPeaks() -> l
    M:net.minecraft.world.level.biome.BiomeBase jaggedPeaks() -> m
    M:net.minecraft.world.level.biome.BiomeBase stonyPeaks() -> n
    M:net.minecraft.world.level.biome.BiomeBase snowySlopes() -> o
    M:net.minecraft.world.level.biome.BiomeBase grove() -> p
    M:net.minecraft.world.level.biome.BiomeBase lushCaves() -> q
    M:net.minecraft.world.level.biome.BiomeBase dripstoneCaves() -> r
    M:net.minecraft.world.level.biome.BiomeBase deepDark() -> s
net.minecraft.data.worldgen.features.AquaticFeatures -> nb -> net.minecraft.data.worldgen.features.AquaticFeatures
    F:net.minecraft.core.Holder SEAGRASS_SHORT -> a
    F:net.minecraft.core.Holder SEAGRASS_SLIGHTLY_LESS_SHORT -> b
    F:net.minecraft.core.Holder SEAGRASS_MID -> c
    F:net.minecraft.core.Holder SEAGRASS_TALL -> d
    F:net.minecraft.core.Holder SEA_PICKLE -> e
    F:net.minecraft.core.Holder SEAGRASS_SIMPLE -> f
    F:net.minecraft.core.Holder KELP -> g
    F:net.minecraft.core.Holder WARM_OCEAN_VEGETATION -> h
net.minecraft.data.worldgen.features.CaveFeatures -> nc -> net.minecraft.data.worldgen.features.CaveFeatures
    F:net.minecraft.core.Holder MONSTER_ROOM -> a
    F:java.util.List FOSSIL_STRUCTURES -> y
    F:java.util.List FOSSIL_COAL_STRUCTURES -> z
    F:net.minecraft.core.Holder FOSSIL_COAL -> b
    F:net.minecraft.core.Holder FOSSIL_DIAMONDS -> c
    F:net.minecraft.core.Holder DRIPSTONE_CLUSTER -> d
    F:net.minecraft.core.Holder LARGE_DRIPSTONE -> e
    F:net.minecraft.core.Holder POINTED_DRIPSTONE -> f
    F:net.minecraft.core.Holder UNDERWATER_MAGMA -> g
    F:net.minecraft.core.Holder GLOW_LICHEN -> h
    F:net.minecraft.core.Holder ROOTED_AZALEA_TREE -> i
    F:net.minecraft.core.Holder CAVE_VINE -> j
    F:net.minecraft.core.Holder CAVE_VINE_IN_MOSS -> k
    F:net.minecraft.core.Holder MOSS_VEGETATION -> l
    F:net.minecraft.core.Holder MOSS_PATCH -> m
    F:net.minecraft.core.Holder MOSS_PATCH_BONEMEAL -> n
    F:net.minecraft.core.Holder DRIPLEAF -> o
    F:net.minecraft.core.Holder CLAY_WITH_DRIPLEAVES -> p
    F:net.minecraft.core.Holder CLAY_POOL_WITH_DRIPLEAVES -> q
    F:net.minecraft.core.Holder LUSH_CAVES_CLAY -> r
    F:net.minecraft.core.Holder MOSS_PATCH_CEILING -> s
    F:net.minecraft.core.Holder SPORE_BLOSSOM -> t
    F:net.minecraft.core.Holder AMETHYST_GEODE -> u
    F:net.minecraft.core.Holder SCULK_PATCH_DEEP_DARK -> v
    F:net.minecraft.core.Holder SCULK_PATCH_ANCIENT_CITY -> w
    F:net.minecraft.core.Holder SCULK_VEIN -> x
    M:net.minecraft.core.Holder makeDripleaf(net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.core.Holder makeSmallDripleaf() -> a
net.minecraft.data.worldgen.features.EndFeatures -> nd -> net.minecraft.data.worldgen.features.EndFeatures
    F:net.minecraft.core.Holder END_SPIKE -> a
    F:net.minecraft.core.Holder END_GATEWAY_RETURN -> b
    F:net.minecraft.core.Holder END_GATEWAY_DELAYED -> c
    F:net.minecraft.core.Holder CHORUS_PLANT -> d
    F:net.minecraft.core.Holder END_ISLAND -> e
net.minecraft.data.worldgen.features.FeatureUtils -> ne -> net.minecraft.data.worldgen.features.FeatureUtils
    M:net.minecraft.core.Holder bootstrap(net.minecraft.core.IRegistry) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate simplePatchPredicate(java.util.List) -> a
    M:net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureRandomPatchConfiguration simpleRandomPatchConfiguration(int,net.minecraft.core.Holder) -> a
    M:net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureRandomPatchConfiguration simplePatchConfiguration(net.minecraft.world.level.levelgen.feature.WorldGenerator,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration,java.util.List,int) -> a
    M:net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureRandomPatchConfiguration simplePatchConfiguration(net.minecraft.world.level.levelgen.feature.WorldGenerator,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration,java.util.List) -> a
    M:net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureRandomPatchConfiguration simplePatchConfiguration(net.minecraft.world.level.levelgen.feature.WorldGenerator,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration) -> a
    M:net.minecraft.core.Holder register(java.lang.String,net.minecraft.world.level.levelgen.feature.WorldGenerator) -> a
    M:net.minecraft.core.Holder register(java.lang.String,net.minecraft.world.level.levelgen.feature.WorldGenerator,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration) -> a
net.minecraft.data.worldgen.features.MiscOverworldFeatures -> nf -> net.minecraft.data.worldgen.features.MiscOverworldFeatures
    F:net.minecraft.core.Holder ICE_SPIKE -> a
    F:net.minecraft.core.Holder ICE_PATCH -> b
    F:net.minecraft.core.Holder FOREST_ROCK -> c
    F:net.minecraft.core.Holder ICEBERG_PACKED -> d
    F:net.minecraft.core.Holder ICEBERG_BLUE -> e
    F:net.minecraft.core.Holder BLUE_ICE -> f
    F:net.minecraft.core.Holder LAKE_LAVA -> g
    F:net.minecraft.core.Holder DISK_CLAY -> h
    F:net.minecraft.core.Holder DISK_GRAVEL -> i
    F:net.minecraft.core.Holder DISK_SAND -> j
    F:net.minecraft.core.Holder FREEZE_TOP_LAYER -> k
    F:net.minecraft.core.Holder DISK_GRASS -> l
    F:net.minecraft.core.Holder BONUS_CHEST -> m
    F:net.minecraft.core.Holder VOID_START_PLATFORM -> n
    F:net.minecraft.core.Holder DESERT_WELL -> o
    F:net.minecraft.core.Holder SPRING_LAVA_OVERWORLD -> p
    F:net.minecraft.core.Holder SPRING_LAVA_FROZEN -> q
    F:net.minecraft.core.Holder SPRING_WATER -> r
net.minecraft.data.worldgen.features.NetherFeatures -> ng -> net.minecraft.data.worldgen.features.NetherFeatures
    F:net.minecraft.core.Holder DELTA -> a
    F:net.minecraft.core.Holder SMALL_BASALT_COLUMNS -> b
    F:net.minecraft.core.Holder LARGE_BASALT_COLUMNS -> c
    F:net.minecraft.core.Holder BASALT_BLOBS -> d
    F:net.minecraft.core.Holder BLACKSTONE_BLOBS -> e
    F:net.minecraft.core.Holder GLOWSTONE_EXTRA -> f
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviderWeighted CRIMSON_VEGETATION_PROVIDER -> g
    F:net.minecraft.core.Holder CRIMSON_FOREST_VEGETATION -> h
    F:net.minecraft.core.Holder CRIMSON_FOREST_VEGETATION_BONEMEAL -> i
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviderWeighted WARPED_VEGETATION_PROVIDER -> j
    F:net.minecraft.core.Holder WARPED_FOREST_VEGETION -> k
    F:net.minecraft.core.Holder WARPED_FOREST_VEGETATION_BONEMEAL -> l
    F:net.minecraft.core.Holder NETHER_SPROUTS -> m
    F:net.minecraft.core.Holder NETHER_SPROUTS_BONEMEAL -> n
    F:net.minecraft.core.Holder TWISTING_VINES -> o
    F:net.minecraft.core.Holder TWISTING_VINES_BONEMEAL -> p
    F:net.minecraft.core.Holder WEEPING_VINES -> q
    F:net.minecraft.core.Holder PATCH_CRIMSON_ROOTS -> r
    F:net.minecraft.core.Holder BASALT_PILLAR -> s
    F:net.minecraft.core.Holder SPRING_LAVA_NETHER -> t
    F:net.minecraft.core.Holder SPRING_NETHER_CLOSED -> u
    F:net.minecraft.core.Holder SPRING_NETHER_OPEN -> v
    F:net.minecraft.core.Holder PATCH_FIRE -> w
    F:net.minecraft.core.Holder PATCH_SOUL_FIRE -> x
net.minecraft.data.worldgen.features.OreFeatures -> nh -> net.minecraft.data.worldgen.features.OreFeatures
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTest NATURAL_STONE -> a
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTest STONE_ORE_REPLACEABLES -> b
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTest DEEPSLATE_ORE_REPLACEABLES -> c
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTest NETHERRACK -> d
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTest NETHER_ORE_REPLACEABLES -> e
    F:java.util.List ORE_IRON_TARGET_LIST -> f
    F:java.util.List ORE_GOLD_TARGET_LIST -> g
    F:java.util.List ORE_DIAMOND_TARGET_LIST -> h
    F:java.util.List ORE_LAPIS_TARGET_LIST -> i
    F:java.util.List ORE_COPPER_TARGET_LIST -> j
    F:java.util.List ORE_COAL_TARGET_LIST -> k
    F:net.minecraft.core.Holder ORE_MAGMA -> l
    F:net.minecraft.core.Holder ORE_SOUL_SAND -> m
    F:net.minecraft.core.Holder ORE_NETHER_GOLD -> n
    F:net.minecraft.core.Holder ORE_QUARTZ -> o
    F:net.minecraft.core.Holder ORE_GRAVEL_NETHER -> p
    F:net.minecraft.core.Holder ORE_BLACKSTONE -> q
    F:net.minecraft.core.Holder ORE_DIRT -> r
    F:net.minecraft.core.Holder ORE_GRAVEL -> s
    F:net.minecraft.core.Holder ORE_GRANITE -> t
    F:net.minecraft.core.Holder ORE_DIORITE -> u
    F:net.minecraft.core.Holder ORE_ANDESITE -> v
    F:net.minecraft.core.Holder ORE_TUFF -> w
    F:net.minecraft.core.Holder ORE_COAL -> x
    F:net.minecraft.core.Holder ORE_COAL_BURIED -> y
    F:net.minecraft.core.Holder ORE_IRON -> z
net.minecraft.data.worldgen.features.PileFeatures -> ni -> net.minecraft.data.worldgen.features.PileFeatures
    F:net.minecraft.core.Holder PILE_HAY -> a
    F:net.minecraft.core.Holder PILE_MELON -> b
    F:net.minecraft.core.Holder PILE_SNOW -> c
    F:net.minecraft.core.Holder PILE_ICE -> d
    F:net.minecraft.core.Holder PILE_PUMPKIN -> e
net.minecraft.data.worldgen.features.TreeFeatures -> nj -> net.minecraft.data.worldgen.features.TreeFeatures
    F:net.minecraft.core.Holder CRIMSON_FUNGUS -> a
    F:net.minecraft.core.Holder CRIMSON_FUNGUS_PLANTED -> b
    F:net.minecraft.core.Holder WARPED_FUNGUS -> c
    F:net.minecraft.core.Holder WARPED_FUNGUS_PLANTED -> d
    F:net.minecraft.core.Holder HUGE_BROWN_MUSHROOM -> e
    F:net.minecraft.core.Holder HUGE_RED_MUSHROOM -> f
    F:net.minecraft.core.Holder OAK -> g
    F:net.minecraft.core.Holder DARK_OAK -> h
    F:net.minecraft.core.Holder BIRCH -> i
    F:net.minecraft.core.Holder ACACIA -> j
    F:net.minecraft.core.Holder SPRUCE -> k
    F:net.minecraft.core.Holder PINE -> l
    F:net.minecraft.core.Holder JUNGLE_TREE -> m
    F:net.minecraft.core.Holder FANCY_OAK -> n
    F:net.minecraft.core.Holder JUNGLE_TREE_NO_VINE -> o
    F:net.minecraft.core.Holder MEGA_JUNGLE_TREE -> p
    F:net.minecraft.core.Holder MEGA_SPRUCE -> q
    F:net.minecraft.core.Holder MEGA_PINE -> r
    F:net.minecraft.core.Holder SUPER_BIRCH_BEES_0002 -> s
    F:net.minecraft.core.Holder SUPER_BIRCH_BEES -> t
    F:net.minecraft.core.Holder SWAMP_OAK -> u
    F:net.minecraft.core.Holder JUNGLE_BUSH -> v
    F:net.minecraft.core.Holder AZALEA_TREE -> w
    F:net.minecraft.core.Holder MANGROVE -> x
    F:net.minecraft.core.Holder TALL_MANGROVE -> y
    F:net.minecraft.core.Holder OAK_BEES_0002 -> z
    M:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder createStraightBlobTree(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block,int,int,int,int) -> a
    M:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder createOak() -> a
    M:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder createBirch() -> b
    M:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder createSuperBirch() -> c
    M:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder createJungleTree() -> d
    M:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder createFancyOak() -> e
net.minecraft.data.worldgen.features.VegetationFeatures -> nk -> net.minecraft.data.worldgen.features.VegetationFeatures
    F:net.minecraft.core.Holder BAMBOO_NO_PODZOL -> a
    F:net.minecraft.core.Holder BAMBOO_SOME_PODZOL -> b
    F:net.minecraft.core.Holder VINES -> c
    F:net.minecraft.core.Holder PATCH_BROWN_MUSHROOM -> d
    F:net.minecraft.core.Holder PATCH_RED_MUSHROOM -> e
    F:net.minecraft.core.Holder PATCH_SUNFLOWER -> f
    F:net.minecraft.core.Holder PATCH_PUMPKIN -> g
    F:net.minecraft.core.Holder PATCH_BERRY_BUSH -> h
    F:net.minecraft.core.Holder PATCH_TAIGA_GRASS -> i
    F:net.minecraft.core.Holder PATCH_GRASS -> j
    F:net.minecraft.core.Holder PATCH_GRASS_JUNGLE -> k
    F:net.minecraft.core.Holder SINGLE_PIECE_OF_GRASS -> l
    F:net.minecraft.core.Holder PATCH_DEAD_BUSH -> m
    F:net.minecraft.core.Holder PATCH_MELON -> n
    F:net.minecraft.core.Holder PATCH_WATERLILY -> o
    F:net.minecraft.core.Holder PATCH_TALL_GRASS -> p
    F:net.minecraft.core.Holder PATCH_LARGE_FERN -> q
    F:net.minecraft.core.Holder PATCH_CACTUS -> r
    F:net.minecraft.core.Holder PATCH_SUGAR_CANE -> s
    F:net.minecraft.core.Holder FLOWER_DEFAULT -> t
    F:net.minecraft.core.Holder FLOWER_FLOWER_FOREST -> u
    F:net.minecraft.core.Holder FLOWER_SWAMP -> v
    F:net.minecraft.core.Holder FLOWER_PLAIN -> w
    F:net.minecraft.core.Holder FLOWER_MEADOW -> x
    F:net.minecraft.core.Holder FOREST_FLOWERS -> y
    F:net.minecraft.core.Holder DARK_FOREST_VEGETATION -> z
    M:net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureRandomPatchConfiguration grassPatch(net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider,int) -> a
net.minecraft.data.worldgen.placement.AquaticPlacements -> nn -> net.minecraft.data.worldgen.placement.AquaticPlacements
    F:net.minecraft.core.Holder SEAGRASS_WARM -> a
    F:net.minecraft.core.Holder SEAGRASS_NORMAL -> b
    F:net.minecraft.core.Holder SEAGRASS_COLD -> c
    F:net.minecraft.core.Holder SEAGRASS_RIVER -> d
    F:net.minecraft.core.Holder SEAGRASS_SWAMP -> e
    F:net.minecraft.core.Holder SEAGRASS_DEEP_WARM -> f
    F:net.minecraft.core.Holder SEAGRASS_DEEP -> g
    F:net.minecraft.core.Holder SEAGRASS_DEEP_COLD -> h
    F:net.minecraft.core.Holder SEAGRASS_SIMPLE -> i
    F:net.minecraft.core.Holder SEA_PICKLE -> j
    F:net.minecraft.core.Holder KELP_COLD -> k
    F:net.minecraft.core.Holder KELP_WARM -> l
    F:net.minecraft.core.Holder WARM_OCEAN_VEGETATION -> m
    M:java.util.List seagrassPlacement(int) -> a
net.minecraft.data.worldgen.placement.CavePlacements -> no -> net.minecraft.data.worldgen.placement.CavePlacements
    F:net.minecraft.core.Holder MONSTER_ROOM -> a
    F:net.minecraft.core.Holder MONSTER_ROOM_DEEP -> b
    F:net.minecraft.core.Holder FOSSIL_UPPER -> c
    F:net.minecraft.core.Holder FOSSIL_LOWER -> d
    F:net.minecraft.core.Holder DRIPSTONE_CLUSTER -> e
    F:net.minecraft.core.Holder LARGE_DRIPSTONE -> f
    F:net.minecraft.core.Holder POINTED_DRIPSTONE -> g
    F:net.minecraft.core.Holder UNDERWATER_MAGMA -> h
    F:net.minecraft.core.Holder GLOW_LICHEN -> i
    F:net.minecraft.core.Holder ROOTED_AZALEA_TREE -> j
    F:net.minecraft.core.Holder CAVE_VINES -> k
    F:net.minecraft.core.Holder LUSH_CAVES_VEGETATION -> l
    F:net.minecraft.core.Holder LUSH_CAVES_CLAY -> m
    F:net.minecraft.core.Holder LUSH_CAVES_CEILING_VEGETATION -> n
    F:net.minecraft.core.Holder SPORE_BLOSSOM -> o
    F:net.minecraft.core.Holder CLASSIC_VINES -> p
    F:net.minecraft.core.Holder AMETHYST_GEODE -> q
    F:net.minecraft.core.Holder SCULK_PATCH_DEEP_DARK -> r
    F:net.minecraft.core.Holder SCULK_PATCH_ANCIENT_CITY -> s
    F:net.minecraft.core.Holder SCULK_VEIN -> t
net.minecraft.data.worldgen.placement.EndPlacements -> np -> net.minecraft.data.worldgen.placement.EndPlacements
    F:net.minecraft.core.Holder END_SPIKE -> a
    F:net.minecraft.core.Holder END_GATEWAY_RETURN -> b
    F:net.minecraft.core.Holder CHORUS_PLANT -> c
    F:net.minecraft.core.Holder END_ISLAND_DECORATED -> d
net.minecraft.data.worldgen.placement.MiscOverworldPlacements -> nq -> net.minecraft.data.worldgen.placement.MiscOverworldPlacements
    F:net.minecraft.core.Holder ICE_SPIKE -> a
    F:net.minecraft.core.Holder ICE_PATCH -> b
    F:net.minecraft.core.Holder FOREST_ROCK -> c
    F:net.minecraft.core.Holder ICEBERG_PACKED -> d
    F:net.minecraft.core.Holder ICEBERG_BLUE -> e
    F:net.minecraft.core.Holder BLUE_ICE -> f
    F:net.minecraft.core.Holder LAKE_LAVA_UNDERGROUND -> g
    F:net.minecraft.core.Holder LAKE_LAVA_SURFACE -> h
    F:net.minecraft.core.Holder DISK_CLAY -> i
    F:net.minecraft.core.Holder DISK_GRAVEL -> j
    F:net.minecraft.core.Holder DISK_SAND -> k
    F:net.minecraft.core.Holder DISK_GRASS -> l
    F:net.minecraft.core.Holder FREEZE_TOP_LAYER -> m
    F:net.minecraft.core.Holder VOID_START_PLATFORM -> n
    F:net.minecraft.core.Holder DESERT_WELL -> o
    F:net.minecraft.core.Holder SPRING_LAVA -> p
    F:net.minecraft.core.Holder SPRING_LAVA_FROZEN -> q
    F:net.minecraft.core.Holder SPRING_WATER -> r
net.minecraft.data.worldgen.placement.NetherPlacements -> nr -> net.minecraft.data.worldgen.placement.NetherPlacements
    F:net.minecraft.core.Holder DELTA -> a
    F:net.minecraft.core.Holder SMALL_BASALT_COLUMNS -> b
    F:net.minecraft.core.Holder LARGE_BASALT_COLUMNS -> c
    F:net.minecraft.core.Holder BASALT_BLOBS -> d
    F:net.minecraft.core.Holder BLACKSTONE_BLOBS -> e
    F:net.minecraft.core.Holder GLOWSTONE_EXTRA -> f
    F:net.minecraft.core.Holder GLOWSTONE -> g
    F:net.minecraft.core.Holder CRIMSON_FOREST_VEGETATION -> h
    F:net.minecraft.core.Holder WARPED_FOREST_VEGETATION -> i
    F:net.minecraft.core.Holder NETHER_SPROUTS -> j
    F:net.minecraft.core.Holder TWISTING_VINES -> k
    F:net.minecraft.core.Holder WEEPING_VINES -> l
    F:net.minecraft.core.Holder PATCH_CRIMSON_ROOTS -> m
    F:net.minecraft.core.Holder BASALT_PILLAR -> n
    F:net.minecraft.core.Holder SPRING_DELTA -> o
    F:net.minecraft.core.Holder SPRING_CLOSED -> p
    F:net.minecraft.core.Holder SPRING_CLOSED_DOUBLE -> q
    F:net.minecraft.core.Holder SPRING_OPEN -> r
    F:java.util.List FIRE_PLACEMENT -> s
    F:net.minecraft.core.Holder PATCH_SOUL_FIRE -> t
    F:net.minecraft.core.Holder PATCH_FIRE -> u
net.minecraft.data.worldgen.placement.OrePlacements -> ns -> net.minecraft.data.worldgen.placement.OrePlacements
    F:net.minecraft.core.Holder ORE_MAGMA -> a
    F:net.minecraft.core.Holder ORE_SOUL_SAND -> b
    F:net.minecraft.core.Holder ORE_GOLD_DELTAS -> c
    F:net.minecraft.core.Holder ORE_QUARTZ_DELTAS -> d
    F:net.minecraft.core.Holder ORE_GOLD_NETHER -> e
    F:net.minecraft.core.Holder ORE_QUARTZ_NETHER -> f
    F:net.minecraft.core.Holder ORE_GRAVEL_NETHER -> g
    F:net.minecraft.core.Holder ORE_BLACKSTONE -> h
    F:net.minecraft.core.Holder ORE_DIRT -> i
    F:net.minecraft.core.Holder ORE_GRAVEL -> j
    F:net.minecraft.core.Holder ORE_GRANITE_UPPER -> k
    F:net.minecraft.core.Holder ORE_GRANITE_LOWER -> l
    F:net.minecraft.core.Holder ORE_DIORITE_UPPER -> m
    F:net.minecraft.core.Holder ORE_DIORITE_LOWER -> n
    F:net.minecraft.core.Holder ORE_ANDESITE_UPPER -> o
    F:net.minecraft.core.Holder ORE_ANDESITE_LOWER -> p
    F:net.minecraft.core.Holder ORE_TUFF -> q
    F:net.minecraft.core.Holder ORE_COAL_UPPER -> r
    F:net.minecraft.core.Holder ORE_COAL_LOWER -> s
    F:net.minecraft.core.Holder ORE_IRON_UPPER -> t
    F:net.minecraft.core.Holder ORE_IRON_MIDDLE -> u
    F:net.minecraft.core.Holder ORE_IRON_SMALL -> v
    F:net.minecraft.core.Holder ORE_GOLD_EXTRA -> w
    F:net.minecraft.core.Holder ORE_GOLD -> x
    F:net.minecraft.core.Holder ORE_GOLD_LOWER -> y
    F:net.minecraft.core.Holder ORE_REDSTONE -> z
    M:java.util.List orePlacement(net.minecraft.world.level.levelgen.placement.PlacementModifier,net.minecraft.world.level.levelgen.placement.PlacementModifier) -> a
    M:java.util.List commonOrePlacement(int,net.minecraft.world.level.levelgen.placement.PlacementModifier) -> a
    M:java.util.List rareOrePlacement(int,net.minecraft.world.level.levelgen.placement.PlacementModifier) -> b
net.minecraft.data.worldgen.placement.PlacementUtils -> nt -> net.minecraft.data.worldgen.placement.PlacementUtils
    F:net.minecraft.world.level.levelgen.placement.PlacementModifier HEIGHTMAP -> a
    F:net.minecraft.world.level.levelgen.placement.PlacementModifier HEIGHTMAP_TOP_SOLID -> b
    F:net.minecraft.world.level.levelgen.placement.PlacementModifier HEIGHTMAP_WORLD_SURFACE -> c
    F:net.minecraft.world.level.levelgen.placement.PlacementModifier HEIGHTMAP_OCEAN_FLOOR -> d
    F:net.minecraft.world.level.levelgen.placement.PlacementModifier FULL_RANGE -> e
    F:net.minecraft.world.level.levelgen.placement.PlacementModifier RANGE_10_10 -> f
    F:net.minecraft.world.level.levelgen.placement.PlacementModifier RANGE_8_8 -> g
    F:net.minecraft.world.level.levelgen.placement.PlacementModifier RANGE_4_4 -> h
    F:net.minecraft.world.level.levelgen.placement.PlacementModifier RANGE_BOTTOM_TO_MAX_TERRAIN_HEIGHT -> i
    M:net.minecraft.core.Holder bootstrap(net.minecraft.core.IRegistry) -> a
    M:net.minecraft.core.Holder register(java.lang.String,net.minecraft.core.Holder,java.util.List) -> a
    M:net.minecraft.core.Holder register(java.lang.String,net.minecraft.core.Holder,net.minecraft.world.level.levelgen.placement.PlacementModifier[]) -> a
    M:net.minecraft.world.level.levelgen.placement.PlacementModifier countExtra(int,float,int) -> a
    M:net.minecraft.world.level.levelgen.placement.PlacementFilter isEmpty() -> a
    M:net.minecraft.world.level.levelgen.placement.BlockPredicateFilter filteredByBlockSurvival(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.core.Holder inlinePlaced(net.minecraft.core.Holder,net.minecraft.world.level.levelgen.placement.PlacementModifier[]) -> a
    M:net.minecraft.core.Holder inlinePlaced(net.minecraft.world.level.levelgen.feature.WorldGenerator,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration,net.minecraft.world.level.levelgen.placement.PlacementModifier[]) -> a
    M:net.minecraft.core.Holder onlyWhenEmpty(net.minecraft.world.level.levelgen.feature.WorldGenerator,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration) -> a
    M:net.minecraft.core.Holder filtered(net.minecraft.world.level.levelgen.feature.WorldGenerator,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration,net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate) -> a
net.minecraft.data.worldgen.placement.TreePlacements -> nu -> net.minecraft.data.worldgen.placement.TreePlacements
    F:net.minecraft.core.Holder CRIMSON_FUNGI -> a
    F:net.minecraft.core.Holder WARPED_FUNGI -> b
    F:net.minecraft.core.Holder OAK_CHECKED -> c
    F:net.minecraft.core.Holder DARK_OAK_CHECKED -> d
    F:net.minecraft.core.Holder BIRCH_CHECKED -> e
    F:net.minecraft.core.Holder ACACIA_CHECKED -> f
    F:net.minecraft.core.Holder SPRUCE_CHECKED -> g
    F:net.minecraft.core.Holder MANGROVE_CHECKED -> h
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate SNOW_TREE_PREDICATE -> i
    F:java.util.List SNOW_TREE_FILTER_DECORATOR -> j
    F:net.minecraft.core.Holder PINE_ON_SNOW -> k
    F:net.minecraft.core.Holder SPRUCE_ON_SNOW -> l
    F:net.minecraft.core.Holder PINE_CHECKED -> m
    F:net.minecraft.core.Holder JUNGLE_TREE_CHECKED -> n
    F:net.minecraft.core.Holder FANCY_OAK_CHECKED -> o
    F:net.minecraft.core.Holder MEGA_JUNGLE_TREE_CHECKED -> p
    F:net.minecraft.core.Holder MEGA_SPRUCE_CHECKED -> q
    F:net.minecraft.core.Holder MEGA_PINE_CHECKED -> r
    F:net.minecraft.core.Holder TALL_MANGROVE_CHECKED -> s
    F:net.minecraft.core.Holder JUNGLE_BUSH -> t
    F:net.minecraft.core.Holder SUPER_BIRCH_BEES_0002 -> u
    F:net.minecraft.core.Holder SUPER_BIRCH_BEES -> v
    F:net.minecraft.core.Holder OAK_BEES_0002 -> w
    F:net.minecraft.core.Holder OAK_BEES_002 -> x
    F:net.minecraft.core.Holder BIRCH_BEES_0002_PLACED -> y
    F:net.minecraft.core.Holder BIRCH_BEES_002 -> z
net.minecraft.data.worldgen.placement.VegetationPlacements -> nv -> net.minecraft.data.worldgen.placement.VegetationPlacements
    F:net.minecraft.core.Holder BAMBOO_LIGHT -> a
    F:net.minecraft.core.Holder BAMBOO -> b
    F:net.minecraft.core.Holder VINES -> c
    F:net.minecraft.core.Holder PATCH_SUNFLOWER -> d
    F:net.minecraft.core.Holder PATCH_PUMPKIN -> e
    F:net.minecraft.core.Holder PATCH_GRASS_PLAIN -> f
    F:net.minecraft.core.Holder PATCH_GRASS_FOREST -> g
    F:net.minecraft.core.Holder PATCH_GRASS_BADLANDS -> h
    F:net.minecraft.core.Holder PATCH_GRASS_SAVANNA -> i
    F:net.minecraft.core.Holder PATCH_GRASS_NORMAL -> j
    F:net.minecraft.core.Holder PATCH_GRASS_TAIGA_2 -> k
    F:net.minecraft.core.Holder PATCH_GRASS_TAIGA -> l
    F:net.minecraft.core.Holder PATCH_GRASS_JUNGLE -> m
    F:net.minecraft.core.Holder GRASS_BONEMEAL -> n
    F:net.minecraft.core.Holder PATCH_DEAD_BUSH_2 -> o
    F:net.minecraft.core.Holder PATCH_DEAD_BUSH -> p
    F:net.minecraft.core.Holder PATCH_DEAD_BUSH_BADLANDS -> q
    F:net.minecraft.core.Holder PATCH_MELON -> r
    F:net.minecraft.core.Holder PATCH_MELON_SPARSE -> s
    F:net.minecraft.core.Holder PATCH_BERRY_COMMON -> t
    F:net.minecraft.core.Holder PATCH_BERRY_RARE -> u
    F:net.minecraft.core.Holder PATCH_WATERLILY -> v
    F:net.minecraft.core.Holder PATCH_TALL_GRASS_2 -> w
    F:net.minecraft.core.Holder PATCH_TALL_GRASS -> x
    F:net.minecraft.core.Holder PATCH_LARGE_FERN -> y
    F:net.minecraft.core.Holder PATCH_CACTUS_DESERT -> z
    F:net.minecraft.core.Holder TREES_FLOWER_FOREST -> aa
    F:net.minecraft.core.Holder TREES_MEADOW -> ab
    F:net.minecraft.core.Holder TREES_TAIGA -> ac
    F:net.minecraft.core.Holder TREES_GROVE -> ad
    F:net.minecraft.core.Holder TREES_BADLANDS -> ae
    F:net.minecraft.core.Holder TREES_SNOWY -> af
    F:net.minecraft.core.Holder TREES_SWAMP -> ag
    F:net.minecraft.core.Holder TREES_WINDSWEPT_SAVANNA -> ah
    F:net.minecraft.core.Holder TREES_SAVANNA -> ai
    F:net.minecraft.core.Holder BIRCH_TALL -> aj
    F:net.minecraft.core.Holder TREES_BIRCH -> ak
    F:net.minecraft.core.Holder TREES_WINDSWEPT_FOREST -> al
    F:net.minecraft.core.Holder TREES_WINDSWEPT_HILLS -> am
    F:net.minecraft.core.Holder TREES_WATER -> an
    F:net.minecraft.core.Holder TREES_BIRCH_AND_OAK -> ao
    F:net.minecraft.core.Holder TREES_SPARSE_JUNGLE -> ap
    F:net.minecraft.core.Holder TREES_OLD_GROWTH_SPRUCE_TAIGA -> aq
    F:net.minecraft.core.Holder TREES_OLD_GROWTH_PINE_TAIGA -> ar
    F:net.minecraft.core.Holder TREES_JUNGLE -> as
    F:net.minecraft.core.Holder BAMBOO_VEGETATION -> at
    F:net.minecraft.core.Holder MUSHROOM_ISLAND_VEGETATION -> au
    F:net.minecraft.core.Holder TREES_MANGROVE -> av
    M:java.util.List worldSurfaceSquaredWithCount(int) -> a
    M:java.util.List getMushroomPlacement(int,net.minecraft.world.level.levelgen.placement.PlacementModifier) -> a
    M:com.google.common.collect.ImmutableList$Builder treePlacementBase(net.minecraft.world.level.levelgen.placement.PlacementModifier) -> b
    M:java.util.List treePlacement(net.minecraft.world.level.levelgen.placement.PlacementModifier) -> a
    M:java.util.List treePlacement(net.minecraft.world.level.levelgen.placement.PlacementModifier,net.minecraft.world.level.block.Block) -> a
net.minecraft.data.worldgen.placement.VillagePlacements -> nw -> net.minecraft.data.worldgen.placement.VillagePlacements
    F:net.minecraft.core.Holder PILE_HAY_VILLAGE -> a
    F:net.minecraft.core.Holder PILE_MELON_VILLAGE -> b
    F:net.minecraft.core.Holder PILE_SNOW_VILLAGE -> c
    F:net.minecraft.core.Holder PILE_ICE_VILLAGE -> d
    F:net.minecraft.core.Holder PILE_PUMPKIN_VILLAGE -> e
    F:net.minecraft.core.Holder OAK_VILLAGE -> f
    F:net.minecraft.core.Holder ACACIA_VILLAGE -> g
    F:net.minecraft.core.Holder SPRUCE_VILLAGE -> h
    F:net.minecraft.core.Holder PINE_VILLAGE -> i
    F:net.minecraft.core.Holder PATCH_CACTUS_VILLAGE -> j
    F:net.minecraft.core.Holder FLOWER_PLAIN_VILLAGE -> k
    F:net.minecraft.core.Holder PATCH_TAIGA_GRASS_VILLAGE -> l
    F:net.minecraft.core.Holder PATCH_BERRY_BUSH_VILLAGE -> m
net.minecraft.gametest.framework.AfterBatch -> ny -> net.minecraft.gametest.framework.AfterBatch
net.minecraft.gametest.framework.BeforeBatch -> nz -> net.minecraft.gametest.framework.BeforeBatch
net.minecraft.gametest.framework.ExhaustedAttemptsException -> oa -> net.minecraft.gametest.framework.ExhaustedAttemptsException
net.minecraft.gametest.framework.GameTest -> ob -> net.minecraft.gametest.framework.GameTest
net.minecraft.gametest.framework.GameTestAssertException -> oc -> net.minecraft.gametest.framework.GameTestHarnessAssertion
net.minecraft.gametest.framework.GameTestAssertPosException -> od -> net.minecraft.gametest.framework.GameTestHarnessAssertionPosition
    F:net.minecraft.core.BlockPosition absolutePos -> a
    F:net.minecraft.core.BlockPosition relativePos -> b
    F:long tick -> c
    M:java.lang.String getMessageToShowAtBlock() -> a
    M:net.minecraft.core.BlockPosition getRelativePos() -> b
    M:net.minecraft.core.BlockPosition getAbsolutePos() -> c
net.minecraft.gametest.framework.GameTestBatch -> oe -> net.minecraft.gametest.framework.GameTestHarnessBatch
    F:java.lang.String DEFAULT_BATCH_NAME -> a
    F:java.lang.String name -> b
    F:java.util.Collection testFunctions -> c
    F:java.util.function.Consumer beforeBatchFunction -> d
    F:java.util.function.Consumer afterBatchFunction -> e
    M:java.lang.String getName() -> a
    M:java.util.Collection getTestFunctions() -> b
    M:void runBeforeBatchFunction(net.minecraft.server.level.WorldServer) -> a
    M:void runAfterBatchFunction(net.minecraft.server.level.WorldServer) -> b
net.minecraft.gametest.framework.GameTestBatchRunner -> of -> net.minecraft.gametest.framework.GameTestHarnessBatchRunner
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.core.BlockPosition firstTestNorthWestCorner -> b
    F:net.minecraft.server.level.WorldServer level -> c
    F:net.minecraft.gametest.framework.GameTestHarnessTicker testTicker -> d
    F:int testsPerRow -> e
    F:java.util.List allTestInfos -> f
    F:java.util.List batches -> g
    F:net.minecraft.core.BlockPosition$MutableBlockPosition nextTestNorthWestCorner -> h
    M:java.util.List getTestInfos() -> a
    M:void start() -> b
    M:void runBatch(int) -> a
    M:java.util.Map createStructuresForBatch(java.util.Collection) -> a
    M:void testCompleted() -> a
    M:void testStructureLoaded(net.minecraft.gametest.framework.GameTestHarnessInfo) -> a
    M:void testPassed(net.minecraft.gametest.framework.GameTestHarnessInfo) -> b
    M:void testFailed(net.minecraft.gametest.framework.GameTestHarnessInfo) -> c
net.minecraft.gametest.framework.GameTestEvent -> og -> net.minecraft.gametest.framework.GameTestHarnessEvent
    F:java.lang.Long expectedDelay -> a
    F:java.lang.Runnable assertion -> b
    M:net.minecraft.gametest.framework.GameTestHarnessEvent create(java.lang.Runnable) -> a
    M:net.minecraft.gametest.framework.GameTestHarnessEvent create(long,java.lang.Runnable) -> a
net.minecraft.gametest.framework.GameTestGenerator -> oh -> net.minecraft.gametest.framework.GameTestGenerator
net.minecraft.gametest.framework.GameTestHelper -> oi -> net.minecraft.gametest.framework.GameTestHarnessHelper
    F:net.minecraft.gametest.framework.GameTestHarnessInfo testInfo -> a
    F:boolean finalCheckAdded -> b
    M:net.minecraft.server.level.WorldServer getLevel() -> a
    M:net.minecraft.world.level.block.state.IBlockData getBlockState(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.entity.TileEntity getBlockEntity(net.minecraft.core.BlockPosition) -> b
    M:void killAllEntities() -> b
    M:net.minecraft.world.entity.item.EntityItem spawnItem(net.minecraft.world.item.Item,float,float,float) -> a
    M:net.minecraft.world.entity.Entity spawn(net.minecraft.world.entity.EntityTypes,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.entity.Entity spawn(net.minecraft.world.entity.EntityTypes,net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.world.entity.Entity spawn(net.minecraft.world.entity.EntityTypes,int,int,int) -> a
    M:net.minecraft.world.entity.Entity spawn(net.minecraft.world.entity.EntityTypes,float,float,float) -> a
    M:net.minecraft.world.entity.EntityInsentient spawnWithNoFreeWill(net.minecraft.world.entity.EntityTypes,net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.entity.EntityInsentient spawnWithNoFreeWill(net.minecraft.world.entity.EntityTypes,int,int,int) -> b
    M:net.minecraft.world.entity.EntityInsentient spawnWithNoFreeWill(net.minecraft.world.entity.EntityTypes,net.minecraft.world.phys.Vec3D) -> b
    M:net.minecraft.world.entity.EntityInsentient spawnWithNoFreeWill(net.minecraft.world.entity.EntityTypes,float,float,float) -> b
    M:net.minecraft.gametest.framework.GameTestHarnessSequence walkTo(net.minecraft.world.entity.EntityInsentient,net.minecraft.core.BlockPosition,float) -> a
    M:void pressButton(int,int,int) -> a
    M:void pressButton(net.minecraft.core.BlockPosition) -> c
    M:void useBlock(net.minecraft.core.BlockPosition) -> d
    M:net.minecraft.world.entity.EntityLiving makeAboutToDrown(net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.entity.player.EntityHuman makeMockPlayer() -> c
    M:void pullLever(int,int,int) -> b
    M:void pullLever(net.minecraft.core.BlockPosition) -> e
    M:void pulseRedstone(net.minecraft.core.BlockPosition,long) -> a
    M:void destroyBlock(net.minecraft.core.BlockPosition) -> f
    M:void setBlock(int,int,int,net.minecraft.world.level.block.Block) -> a
    M:void setBlock(int,int,int,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void setBlock(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block) -> a
    M:void setBlock(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void setNight() -> d
    M:void setDayTime(int) -> a
    M:void assertBlockPresent(net.minecraft.world.level.block.Block,int,int,int) -> a
    M:void assertBlockPresent(net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition) -> a
    M:void assertBlockNotPresent(net.minecraft.world.level.block.Block,int,int,int) -> b
    M:void assertBlockNotPresent(net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition) -> b
    M:void succeedWhenBlockPresent(net.minecraft.world.level.block.Block,int,int,int) -> c
    M:void succeedWhenBlockPresent(net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition) -> c
    M:void assertBlock(net.minecraft.core.BlockPosition,java.util.function.Predicate,java.lang.String) -> a
    M:void assertBlock(net.minecraft.core.BlockPosition,java.util.function.Predicate,java.util.function.Supplier) -> a
    M:void assertBlockProperty(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.properties.IBlockState,java.lang.Comparable) -> a
    M:void assertBlockProperty(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.properties.IBlockState,java.util.function.Predicate,java.lang.String) -> a
    M:void assertBlockState(net.minecraft.core.BlockPosition,java.util.function.Predicate,java.util.function.Supplier) -> b
    M:void assertEntityPresent(net.minecraft.world.entity.EntityTypes) -> a
    M:void assertEntityPresent(net.minecraft.world.entity.EntityTypes,int,int,int) -> c
    M:void assertEntityPresent(net.minecraft.world.entity.EntityTypes,net.minecraft.core.BlockPosition) -> c
    M:void assertEntityPresent(net.minecraft.world.entity.EntityTypes,net.minecraft.core.BlockPosition,double) -> a
    M:java.util.List getEntities(net.minecraft.world.entity.EntityTypes,net.minecraft.core.BlockPosition,double) -> b
    M:void assertEntityInstancePresent(net.minecraft.world.entity.Entity,int,int,int) -> a
    M:void assertEntityInstancePresent(net.minecraft.world.entity.Entity,net.minecraft.core.BlockPosition) -> a
    M:void assertItemEntityCountIs(net.minecraft.world.item.Item,net.minecraft.core.BlockPosition,double,int) -> a
    M:void assertItemEntityPresent(net.minecraft.world.item.Item,net.minecraft.core.BlockPosition,double) -> a
    M:void assertItemEntityNotPresent(net.minecraft.world.item.Item,net.minecraft.core.BlockPosition,double) -> b
    M:void assertEntityNotPresent(net.minecraft.world.entity.EntityTypes) -> b
    M:void assertEntityNotPresent(net.minecraft.world.entity.EntityTypes,int,int,int) -> d
    M:void assertEntityNotPresent(net.minecraft.world.entity.EntityTypes,net.minecraft.core.BlockPosition) -> d
    M:void assertEntityTouching(net.minecraft.world.entity.EntityTypes,double,double,double) -> a
    M:void assertEntityNotTouching(net.minecraft.world.entity.EntityTypes,double,double,double) -> b
    M:void assertEntityData(net.minecraft.core.BlockPosition,net.minecraft.world.entity.EntityTypes,java.util.function.Function,java.lang.Object) -> a
    M:void assertContainerEmpty(net.minecraft.core.BlockPosition) -> g
    M:void assertContainerContains(net.minecraft.core.BlockPosition,net.minecraft.world.item.Item) -> a
    M:void assertSameBlockStates(net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.core.BlockPosition) -> a
    M:void assertSameBlockState(net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void assertAtTickTimeContainerContains(long,net.minecraft.core.BlockPosition,net.minecraft.world.item.Item) -> a
    M:void assertAtTickTimeContainerEmpty(long,net.minecraft.core.BlockPosition) -> a
    M:void succeedWhenEntityData(net.minecraft.core.BlockPosition,net.minecraft.world.entity.EntityTypes,java.util.function.Function,java.lang.Object) -> b
    M:void assertEntityProperty(net.minecraft.world.entity.Entity,java.util.function.Predicate,java.lang.String) -> a
    M:void assertEntityProperty(net.minecraft.world.entity.Entity,java.util.function.Function,java.lang.String,java.lang.Object) -> a
    M:void succeedWhenEntityPresent(net.minecraft.world.entity.EntityTypes,int,int,int) -> e
    M:void succeedWhenEntityPresent(net.minecraft.world.entity.EntityTypes,net.minecraft.core.BlockPosition) -> e
    M:void succeedWhenEntityNotPresent(net.minecraft.world.entity.EntityTypes,int,int,int) -> f
    M:void succeedWhenEntityNotPresent(net.minecraft.world.entity.EntityTypes,net.minecraft.core.BlockPosition) -> f
    M:void succeed() -> e
    M:void ensureSingleFinalCheck() -> h
    M:void succeedIf(java.lang.Runnable) -> a
    M:void succeedWhen(java.lang.Runnable) -> b
    M:void succeedOnTickWhen(int,java.lang.Runnable) -> a
    M:void runAtTickTime(long,java.lang.Runnable) -> a
    M:void runAfterDelay(long,java.lang.Runnable) -> b
    M:void randomTick(net.minecraft.core.BlockPosition) -> h
    M:int getHeight(net.minecraft.world.level.levelgen.HeightMap$Type,int,int) -> a
    M:void fail(java.lang.String,net.minecraft.core.BlockPosition) -> a
    M:void fail(java.lang.String,net.minecraft.world.entity.Entity) -> a
    M:void fail(java.lang.String) -> a
    M:void failIf(java.lang.Runnable) -> c
    M:void failIfEver(java.lang.Runnable) -> d
    M:net.minecraft.gametest.framework.GameTestHarnessSequence startSequence() -> f
    M:net.minecraft.core.BlockPosition absolutePos(net.minecraft.core.BlockPosition) -> i
    M:net.minecraft.core.BlockPosition relativePos(net.minecraft.core.BlockPosition) -> j
    M:net.minecraft.world.phys.Vec3D absoluteVec(net.minecraft.world.phys.Vec3D) -> a
    M:long getTick() -> g
    M:net.minecraft.world.phys.AxisAlignedBB getBounds() -> i
    M:net.minecraft.world.phys.AxisAlignedBB getRelativeBounds() -> j
    M:void forEveryBlockInStructure(java.util.function.Consumer) -> a
    M:void onEachTick(java.lang.Runnable) -> e
    M:boolean isCreative() -> f
net.minecraft.gametest.framework.GameTestInfo -> oj -> net.minecraft.gametest.framework.GameTestHarnessInfo
    F:net.minecraft.gametest.framework.GameTestHarnessTestFunction testFunction -> a
    F:net.minecraft.core.BlockPosition structureBlockPos -> b
    F:net.minecraft.server.level.WorldServer level -> c
    F:java.util.Collection listeners -> d
    F:int timeoutTicks -> e
    F:java.util.Collection sequences -> f
    F:it.unimi.dsi.fastutil.objects.Object2LongMap runAtTickTimeMap -> g
    F:long startTick -> h
    F:long tickCount -> i
    F:boolean started -> j
    F:com.google.common.base.Stopwatch timer -> k
    F:boolean done -> l
    F:net.minecraft.world.level.block.EnumBlockRotation rotation -> m
    F:java.lang.Throwable error -> n
    F:net.minecraft.world.level.block.entity.TileEntityStructure structureBlockEntity -> o
    M:void setStructureBlockPos(net.minecraft.core.BlockPosition) -> a
    M:void startExecution() -> a
    M:void tick() -> b
    M:void setRunAtTickTime(long,java.lang.Runnable) -> a
    M:java.lang.String getTestName() -> c
    M:net.minecraft.core.BlockPosition getStructureBlockPos() -> d
    M:net.minecraft.core.BaseBlockPosition getStructureSize() -> e
    M:net.minecraft.world.phys.AxisAlignedBB getStructureBounds() -> f
    M:net.minecraft.server.level.WorldServer getLevel() -> g
    M:boolean hasSucceeded() -> h
    M:boolean hasFailed() -> i
    M:boolean hasStarted() -> j
    M:boolean isDone() -> k
    M:long getRunTime() -> l
    M:void succeed() -> m
    M:void fail(java.lang.Throwable) -> a
    M:java.lang.Throwable getError() -> n
    M:void addListener(net.minecraft.gametest.framework.GameTestHarnessListener) -> a
    M:void spawnStructure(net.minecraft.core.BlockPosition,int) -> a
    M:void clearStructure() -> o
    M:long getTick() -> p
    M:net.minecraft.gametest.framework.GameTestHarnessSequence createSequence() -> q
    M:boolean isRequired() -> r
    M:boolean isOptional() -> s
    M:java.lang.String getStructureName() -> t
    M:net.minecraft.world.level.block.EnumBlockRotation getRotation() -> u
    M:net.minecraft.gametest.framework.GameTestHarnessTestFunction getTestFunction() -> v
    M:int getTimeoutTicks() -> w
    M:boolean isFlaky() -> x
    M:int maxAttempts() -> y
    M:int requiredSuccesses() -> z
net.minecraft.gametest.framework.GameTestListener -> ok -> net.minecraft.gametest.framework.GameTestHarnessListener
net.minecraft.gametest.framework.GameTestRegistry -> ol -> net.minecraft.gametest.framework.GameTestHarnessRegistry
    F:java.util.Collection TEST_FUNCTIONS -> a
    F:java.util.Set TEST_CLASS_NAMES -> b
    F:java.util.Map BEFORE_BATCH_FUNCTIONS -> c
    F:java.util.Map AFTER_BATCH_FUNCTIONS -> d
    F:java.util.Collection LAST_FAILED_TESTS -> e
    M:void register(java.lang.Class) -> a
    M:void register(java.lang.reflect.Method) -> a
    M:void registerBatchFunction(java.lang.reflect.Method,java.lang.Class,java.util.function.Function,java.util.Map) -> a
    M:java.util.Collection getTestFunctionsForClassName(java.lang.String) -> a
    M:java.util.Collection getAllTestFunctions() -> a
    M:java.util.Collection getAllTestClassNames() -> b
    M:boolean isTestClass(java.lang.String) -> b
    M:java.util.function.Consumer getBeforeBatchFunction(java.lang.String) -> c
    M:java.util.function.Consumer getAfterBatchFunction(java.lang.String) -> d
    M:java.util.Optional findTestFunction(java.lang.String) -> e
    M:net.minecraft.gametest.framework.GameTestHarnessTestFunction getTestFunction(java.lang.String) -> f
    M:java.util.Collection useTestGeneratorMethod(java.lang.reflect.Method) -> b
    M:net.minecraft.gametest.framework.GameTestHarnessTestFunction turnMethodIntoTestFunction(java.lang.reflect.Method) -> c
    M:java.util.function.Consumer turnMethodIntoConsumer(java.lang.reflect.Method) -> d
    M:boolean isTestFunctionPartOfClass(net.minecraft.gametest.framework.GameTestHarnessTestFunction,java.lang.String) -> a
    M:java.util.Collection getLastFailedTests() -> c
    M:void rememberFailedTest(net.minecraft.gametest.framework.GameTestHarnessTestFunction) -> a
    M:void forgetFailedTests() -> d
net.minecraft.gametest.framework.GameTestRunner -> om -> net.minecraft.gametest.framework.GameTestHarnessRunner
    F:int MAX_TESTS_PER_BATCH -> e
    F:int PADDING_AROUND_EACH_STRUCTURE -> a
    F:int SPACE_BETWEEN_COLUMNS -> b
    F:int SPACE_BETWEEN_ROWS -> c
    F:int DEFAULT_TESTS_PER_ROW -> d
    M:void runTest(net.minecraft.gametest.framework.GameTestHarnessInfo,net.minecraft.core.BlockPosition,net.minecraft.gametest.framework.GameTestHarnessTicker) -> a
    M:java.util.Collection runTestBatches(java.util.Collection,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.server.level.WorldServer,net.minecraft.gametest.framework.GameTestHarnessTicker,int) -> a
    M:java.util.Collection runTests(java.util.Collection,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.server.level.WorldServer,net.minecraft.gametest.framework.GameTestHarnessTicker,int) -> b
    M:java.util.Collection groupTestsIntoBatches(java.util.Collection) -> a
    M:void clearAllTests(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.gametest.framework.GameTestHarnessTicker,int) -> a
    M:void clearMarkers(net.minecraft.server.level.WorldServer) -> a
net.minecraft.gametest.framework.GameTestSequence -> on -> net.minecraft.gametest.framework.GameTestHarnessSequence
    F:net.minecraft.gametest.framework.GameTestHarnessInfo parent -> a
    F:java.util.List events -> b
    F:long lastTick -> c
    M:net.minecraft.gametest.framework.GameTestHarnessSequence thenWaitUntil(java.lang.Runnable) -> a
    M:net.minecraft.gametest.framework.GameTestHarnessSequence thenWaitUntil(long,java.lang.Runnable) -> a
    M:net.minecraft.gametest.framework.GameTestHarnessSequence thenIdle(int) -> a
    M:net.minecraft.gametest.framework.GameTestHarnessSequence thenExecute(java.lang.Runnable) -> b
    M:net.minecraft.gametest.framework.GameTestHarnessSequence thenExecuteAfter(int,java.lang.Runnable) -> a
    M:net.minecraft.gametest.framework.GameTestHarnessSequence thenExecuteFor(int,java.lang.Runnable) -> b
    M:void thenSucceed() -> a
    M:void thenFail(java.util.function.Supplier) -> a
    M:net.minecraft.gametest.framework.GameTestSequence$Condition thenTrigger() -> b
    M:void tickAndContinue(long) -> a
    M:void tickAndFailIfNotComplete(long) -> b
    M:void executeWithoutFail(java.lang.Runnable) -> c
    M:void tick(long) -> c
net.minecraft.gametest.framework.GameTestSequence$Condition -> on$a -> net.minecraft.gametest.framework.GameTestHarnessSequence$a
    F:long NOT_TRIGGERED -> b
    F:long triggerTime -> c
    M:void trigger(long) -> a
    M:void assertTriggeredThisTick() -> a
net.minecraft.gametest.framework.GameTestServer -> oo -> net.minecraft.gametest.framework.GameTestServer
    F:org.slf4j.Logger LOGGER -> n
    F:int PROGRESS_REPORT_INTERVAL -> o
    F:net.minecraft.server.Services NO_SERVICES -> p
    F:java.util.List testBatches -> q
    F:net.minecraft.core.BlockPosition spawnPos -> r
    F:net.minecraft.world.level.GameRules TEST_GAME_RULES -> s
    F:net.minecraft.world.level.WorldSettings TEST_SETTINGS -> t
    F:net.minecraft.gametest.framework.GameTestHarnessCollector testTracker -> u
    M:net.minecraft.gametest.framework.GameTestServer create(java.lang.Thread,net.minecraft.world.level.storage.Convertable$ConversionSession,net.minecraft.server.packs.repository.ResourcePackRepository,java.util.Collection,net.minecraft.core.BlockPosition) -> a
    M:boolean initServer() -> e
    M:void tickServer(java.util.function.BooleanSupplier) -> a
    M:net.minecraft.SystemReport fillServerSystemReport(net.minecraft.SystemReport) -> a
    M:void onServerExit() -> f
    M:void onServerCrash(net.minecraft.CrashReport) -> a
    M:void startTests(net.minecraft.server.level.WorldServer) -> b
    M:boolean haveTestsStarted() -> bg
    M:boolean isHardcore() -> g
    M:int getOperatorUserPermissionLevel() -> h
    M:int getFunctionCompilationLevel() -> i
    M:boolean shouldRconBroadcast() -> j
    M:boolean isDedicatedServer() -> k
    M:int getRateLimitPacketsPerSecond() -> l
    M:boolean isEpollEnabled() -> m
    M:boolean isCommandBlockEnabled() -> n
    M:boolean isPublished() -> o
    M:boolean isSingleplayerOwner(com.mojang.authlib.GameProfile) -> a
net.minecraft.gametest.framework.GameTestTicker -> op -> net.minecraft.gametest.framework.GameTestHarnessTicker
    F:net.minecraft.gametest.framework.GameTestHarnessTicker SINGLETON -> a
    F:java.util.Collection testInfos -> b
    M:void add(net.minecraft.gametest.framework.GameTestHarnessInfo) -> a
    M:void clear() -> a
    M:void tick() -> b
net.minecraft.gametest.framework.GameTestTimeoutException -> oq -> net.minecraft.gametest.framework.GameTestHarnessTimeout
net.minecraft.gametest.framework.GlobalTestReporter -> or -> net.minecraft.gametest.framework.GlobalTestReporter
    F:net.minecraft.gametest.framework.GameTestHarnessITestReporter DELEGATE -> a
    M:void replaceWith(net.minecraft.gametest.framework.GameTestHarnessITestReporter) -> a
    M:void onTestFailed(net.minecraft.gametest.framework.GameTestHarnessInfo) -> a
    M:void onTestSuccess(net.minecraft.gametest.framework.GameTestHarnessInfo) -> b
    M:void finish() -> a
net.minecraft.gametest.framework.JUnitLikeTestReporter -> os -> net.minecraft.gametest.framework.JUnitLikeTestReporter
    F:org.w3c.dom.Document document -> a
    F:org.w3c.dom.Element testSuite -> b
    F:com.google.common.base.Stopwatch stopwatch -> c
    F:java.io.File destination -> d
    M:org.w3c.dom.Element createTestCase(net.minecraft.gametest.framework.GameTestHarnessInfo,java.lang.String) -> a
    M:void onTestFailed(net.minecraft.gametest.framework.GameTestHarnessInfo) -> a
    M:void onTestSuccess(net.minecraft.gametest.framework.GameTestHarnessInfo) -> b
    M:void finish() -> a
    M:void save(java.io.File) -> a
net.minecraft.gametest.framework.LogTestReporter -> ot -> net.minecraft.gametest.framework.GameTestHarnessLogger
    F:org.slf4j.Logger LOGGER -> a
    M:void onTestFailed(net.minecraft.gametest.framework.GameTestHarnessInfo) -> a
    M:void onTestSuccess(net.minecraft.gametest.framework.GameTestHarnessInfo) -> b
net.minecraft.gametest.framework.MultipleTestTracker -> ou -> net.minecraft.gametest.framework.GameTestHarnessCollector
    F:char NOT_STARTED_TEST_CHAR -> a
    F:char ONGOING_TEST_CHAR -> b
    F:char SUCCESSFUL_TEST_CHAR -> c
    F:char FAILED_OPTIONAL_TEST_CHAR -> d
    F:char FAILED_REQUIRED_TEST_CHAR -> e
    F:java.util.Collection tests -> f
    F:java.util.Collection listeners -> g
    M:void addTestToTrack(net.minecraft.gametest.framework.GameTestHarnessInfo) -> a
    M:void addListener(net.minecraft.gametest.framework.GameTestHarnessListener) -> a
    M:void addFailureListener(java.util.function.Consumer) -> a
    M:int getFailedRequiredCount() -> a
    M:int getFailedOptionalCount() -> b
    M:int getDoneCount() -> c
    M:boolean hasFailedRequired() -> d
    M:boolean hasFailedOptional() -> e
    M:java.util.Collection getFailedRequired() -> f
    M:java.util.Collection getFailedOptional() -> g
    M:int getTotalCount() -> h
    M:boolean isDone() -> i
    M:java.lang.String getProgressBar() -> j
    M:void testStructureLoaded(net.minecraft.gametest.framework.GameTestHarnessInfo) -> a
    M:void testPassed(net.minecraft.gametest.framework.GameTestHarnessInfo) -> b
    M:void testFailed(net.minecraft.gametest.framework.GameTestHarnessInfo) -> c
net.minecraft.gametest.framework.ReportGameListener -> ov -> net.minecraft.gametest.framework.ReportGameListener
    F:net.minecraft.gametest.framework.GameTestHarnessInfo originalTestInfo -> c
    F:net.minecraft.gametest.framework.GameTestHarnessTicker testTicker -> d
    F:net.minecraft.core.BlockPosition structurePos -> e
    F:int attempts -> a
    F:int successes -> b
    M:void testStructureLoaded(net.minecraft.gametest.framework.GameTestHarnessInfo) -> a
    M:void testPassed(net.minecraft.gametest.framework.GameTestHarnessInfo) -> b
    M:void testFailed(net.minecraft.gametest.framework.GameTestHarnessInfo) -> c
    M:void reportPassed(net.minecraft.gametest.framework.GameTestHarnessInfo,java.lang.String) -> a
    M:void visualizePassedTest(net.minecraft.gametest.framework.GameTestHarnessInfo,java.lang.String) -> b
    M:void reportFailure(net.minecraft.gametest.framework.GameTestHarnessInfo,java.lang.Throwable) -> a
    M:void visualizeFailedTest(net.minecraft.gametest.framework.GameTestHarnessInfo,java.lang.Throwable) -> b
    M:void rerunTest() -> a
    M:void spawnBeacon(net.minecraft.gametest.framework.GameTestHarnessInfo,net.minecraft.world.level.block.Block) -> a
    M:void spawnLectern(net.minecraft.gametest.framework.GameTestHarnessInfo,java.lang.String) -> c
    M:net.minecraft.world.item.ItemStack createBook(java.lang.String,boolean,java.lang.String) -> a
    M:void say(net.minecraft.server.level.WorldServer,net.minecraft.EnumChatFormat,java.lang.String) -> a
    M:void showRedBox(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,java.lang.String) -> a
net.minecraft.gametest.framework.StructureUtils -> ow -> net.minecraft.gametest.framework.GameTestHarnessStructures
    F:org.slf4j.Logger LOGGER -> c
    F:java.lang.String DEFAULT_TEST_STRUCTURES_DIR -> a
    F:java.lang.String testStructuresDir -> b
    F:int HOW_MANY_CHUNKS_TO_LOAD_IN_EACH_DIRECTION_OF_STRUCTURE -> d
    M:net.minecraft.world.level.block.EnumBlockRotation getRotationForRotationSteps(int) -> a
    M:int getRotationStepsForRotation(net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:void main(java.lang.String[]) -> a
    M:net.minecraft.world.phys.AxisAlignedBB getStructureBounds(net.minecraft.world.level.block.entity.TileEntityStructure) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox getStructureBoundingBox(net.minecraft.world.level.block.entity.TileEntityStructure) -> b
    M:void addCommandBlockAndButtonToStartTest(net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.server.level.WorldServer) -> a
    M:void createNewEmptyStructureBlock(java.lang.String,net.minecraft.core.BlockPosition,net.minecraft.core.BaseBlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.server.level.WorldServer) -> a
    M:net.minecraft.world.level.block.entity.TileEntityStructure spawnStructure(java.lang.String,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,int,net.minecraft.server.level.WorldServer,boolean) -> a
    M:void forceLoadChunks(net.minecraft.core.BlockPosition,net.minecraft.server.level.WorldServer) -> a
    M:void clearSpaceForStructure(net.minecraft.world.level.levelgen.structure.StructureBoundingBox,int,net.minecraft.server.level.WorldServer) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox getStructureBoundingBox(net.minecraft.core.BlockPosition,net.minecraft.core.BaseBlockPosition,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:java.util.Optional findStructureBlockContainingPos(net.minecraft.core.BlockPosition,int,net.minecraft.server.level.WorldServer) -> a
    M:net.minecraft.core.BlockPosition findNearestStructureBlock(net.minecraft.core.BlockPosition,int,net.minecraft.server.level.WorldServer) -> b
    M:java.util.Collection findStructureBlocks(net.minecraft.core.BlockPosition,int,net.minecraft.server.level.WorldServer) -> c
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure getStructureTemplate(java.lang.String,net.minecraft.server.level.WorldServer) -> a
    M:net.minecraft.world.level.block.entity.TileEntityStructure createStructureBlock(java.lang.String,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.server.level.WorldServer,boolean) -> a
    M:net.minecraft.nbt.NBTTagCompound tryLoadStructure(java.nio.file.Path) -> a
    M:void clearBlock(int,net.minecraft.core.BlockPosition,net.minecraft.server.level.WorldServer) -> a
    M:boolean doesStructureContain(net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.server.level.WorldServer) -> a
net.minecraft.gametest.framework.TeamcityTestReporter -> ox -> net.minecraft.gametest.framework.TeamcityTestReporter
    F:org.slf4j.Logger LOGGER -> a
    F:com.google.common.escape.Escaper ESCAPER -> b
    M:void onTestFailed(net.minecraft.gametest.framework.GameTestHarnessInfo) -> a
    M:void onTestSuccess(net.minecraft.gametest.framework.GameTestHarnessInfo) -> b
net.minecraft.gametest.framework.TestClassNameArgument -> oy -> net.minecraft.gametest.framework.GameTestHarnessTestClassArgument
    F:java.util.Collection EXAMPLES -> a
    M:java.lang.String parse(com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.gametest.framework.GameTestHarnessTestClassArgument testClassName() -> a
    M:java.lang.String getTestClassName(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.gametest.framework.TestCommand -> oz -> net.minecraft.gametest.framework.GameTestHarnessTestCommand
    F:int DEFAULT_CLEAR_RADIUS -> a
    F:int MAX_CLEAR_RADIUS -> b
    F:int STRUCTURE_BLOCK_NEARBY_SEARCH_RADIUS -> c
    F:int STRUCTURE_BLOCK_FULL_SEARCH_RADIUS -> d
    F:int TEST_POS_Z_OFFSET_FROM_PLAYER -> e
    F:int SHOW_POS_DURATION_MS -> f
    F:int DEFAULT_X_SIZE -> g
    F:int DEFAULT_Y_SIZE -> h
    F:int DEFAULT_Z_SIZE -> i
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int createNewStructure(net.minecraft.commands.CommandListenerWrapper,java.lang.String,int,int,int) -> a
    M:int showPos(net.minecraft.commands.CommandListenerWrapper,java.lang.String) -> a
    M:int runNearbyTest(net.minecraft.commands.CommandListenerWrapper) -> a
    M:int runAllNearbyTests(net.minecraft.commands.CommandListenerWrapper) -> b
    M:void runTest(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.gametest.framework.GameTestHarnessCollector) -> a
    M:void showTestSummaryIfAllDone(net.minecraft.server.level.WorldServer,net.minecraft.gametest.framework.GameTestHarnessCollector) -> a
    M:int clearAllTests(net.minecraft.commands.CommandListenerWrapper,int) -> a
    M:int runTest(net.minecraft.commands.CommandListenerWrapper,net.minecraft.gametest.framework.GameTestHarnessTestFunction,int) -> a
    M:void runTestPreparation(net.minecraft.gametest.framework.GameTestHarnessTestFunction,net.minecraft.server.level.WorldServer) -> a
    M:int runAllTests(net.minecraft.commands.CommandListenerWrapper,int,int) -> a
    M:int runAllTestsInClass(net.minecraft.commands.CommandListenerWrapper,java.lang.String,int,int) -> a
    M:int runLastFailedTests(net.minecraft.commands.CommandListenerWrapper,boolean,int,int) -> a
    M:void runTests(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,int,int) -> a
    M:void say(net.minecraft.commands.CommandListenerWrapper,java.lang.String) -> b
    M:int exportNearestTestStructure(net.minecraft.commands.CommandListenerWrapper) -> c
    M:int exportTestStructure(net.minecraft.commands.CommandListenerWrapper,java.lang.String) -> c
    M:int importTestStructure(net.minecraft.commands.CommandListenerWrapper,java.lang.String) -> d
    M:void say(net.minecraft.server.level.WorldServer,java.lang.String,net.minecraft.EnumChatFormat) -> a
net.minecraft.gametest.framework.TestCommand$TestSummaryDisplayer -> oz$a -> net.minecraft.gametest.framework.GameTestHarnessTestCommand$a
    F:net.minecraft.server.level.WorldServer level -> a
    F:net.minecraft.gametest.framework.GameTestHarnessCollector tracker -> b
    M:void testStructureLoaded(net.minecraft.gametest.framework.GameTestHarnessInfo) -> a
    M:void testPassed(net.minecraft.gametest.framework.GameTestHarnessInfo) -> b
    M:void testFailed(net.minecraft.gametest.framework.GameTestHarnessInfo) -> c
net.minecraft.gametest.framework.TestFunction -> pa -> net.minecraft.gametest.framework.GameTestHarnessTestFunction
    F:java.lang.String batchName -> a
    F:java.lang.String testName -> b
    F:java.lang.String structureName -> c
    F:boolean required -> d
    F:int maxAttempts -> e
    F:int requiredSuccesses -> f
    F:java.util.function.Consumer function -> g
    F:int maxTicks -> h
    F:long setupTicks -> i
    F:net.minecraft.world.level.block.EnumBlockRotation rotation -> j
    M:void run(net.minecraft.gametest.framework.GameTestHarnessHelper) -> a
    M:java.lang.String getTestName() -> a
    M:java.lang.String getStructureName() -> b
    M:int getMaxTicks() -> c
    M:boolean isRequired() -> d
    M:java.lang.String getBatchName() -> e
    M:long getSetupTicks() -> f
    M:net.minecraft.world.level.block.EnumBlockRotation getRotation() -> g
    M:boolean isFlaky() -> h
    M:int getMaxAttempts() -> i
    M:int getRequiredSuccesses() -> j
net.minecraft.gametest.framework.TestFunctionArgument -> pb -> net.minecraft.gametest.framework.GameTestHarnessTestFunctionArgument
    F:java.util.Collection EXAMPLES -> a
    M:net.minecraft.gametest.framework.GameTestHarnessTestFunction parse(com.mojang.brigadier.StringReader) -> a
    M:net.minecraft.gametest.framework.GameTestHarnessTestFunctionArgument testFunctionArgument() -> a
    M:net.minecraft.gametest.framework.GameTestHarnessTestFunction getTestFunction(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.gametest.framework.TestReporter -> pc -> net.minecraft.gametest.framework.GameTestHarnessITestReporter
    M:void finish() -> a
net.minecraft.locale.Language -> pe -> net.minecraft.locale.LocaleLanguage
    F:org.slf4j.Logger LOGGER -> b
    F:com.google.gson.Gson GSON -> c
    F:java.util.regex.Pattern UNSUPPORTED_FORMAT_PATTERN -> d
    F:java.lang.String DEFAULT -> a
    F:net.minecraft.locale.LocaleLanguage instance -> e
    M:net.minecraft.locale.LocaleLanguage loadDefault() -> c
    M:void loadFromJson(java.io.InputStream,java.util.function.BiConsumer) -> a
    M:net.minecraft.locale.LocaleLanguage getInstance() -> a
    M:void inject(net.minecraft.locale.LocaleLanguage) -> a
    M:java.util.List getVisualOrder(java.util.List) -> a
    M:java.lang.String getOrDefault(java.lang.String) -> a
    M:boolean has(java.lang.String) -> b
    M:boolean isDefaultRightToLeft() -> b
    M:net.minecraft.util.FormattedString getVisualOrder(net.minecraft.network.chat.IChatFormatted) -> a
net.minecraft.nbt.ByteArrayTag -> pg -> net.minecraft.nbt.NBTTagByteArray
    F:int SELF_SIZE_IN_BITS -> b
    F:net.minecraft.nbt.NBTTagType TYPE -> a
    M:void write(java.io.DataOutput) -> a
    M:byte getId() -> a
    M:net.minecraft.nbt.NBTTagType getType() -> b
    M:net.minecraft.nbt.NBTBase copy() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:void accept(net.minecraft.nbt.TagVisitor) -> a
    M:int size() -> size
    M:net.minecraft.nbt.NBTTagByte get(int) -> a
    M:net.minecraft.nbt.NBTTagByte set(int,net.minecraft.nbt.NBTTagByte) -> a
    M:void add(int,net.minecraft.nbt.NBTTagByte) -> b
    M:boolean setTag(int,net.minecraft.nbt.NBTBase) -> a
    M:boolean addTag(int,net.minecraft.nbt.NBTBase) -> b
    M:net.minecraft.nbt.NBTTagByte remove(int) -> b
    M:byte getElementType() -> e
    M:void clear() -> clear
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult accept(net.minecraft.nbt.StreamTagVisitor) -> a
    M:net.minecraft.nbt.NBTBase remove(int) -> c
    M:void add(int,net.minecraft.nbt.NBTBase) -> c
    M:net.minecraft.nbt.NBTBase set(int,net.minecraft.nbt.NBTBase) -> d
    M:java.lang.Object remove(int) -> remove
    M:void add(int,java.lang.Object) -> add
    M:java.lang.Object set(int,java.lang.Object) -> set
    M:java.lang.Object get(int) -> get
    M:net.minecraft.nbt.NBTTagByteArray load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult parse(java.io.DataInput,net.minecraft.nbt.StreamTagVisitor) -> a
    M:void skip(java.io.DataInput) -> a
    M:java.lang.String getName() -> a
    M:java.lang.String getPrettyName() -> b
    M:net.minecraft.nbt.NBTBase load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> b
net.minecraft.nbt.ByteTag -> ph -> net.minecraft.nbt.NBTTagByte
    F:int SELF_SIZE_IN_BITS -> w
    F:net.minecraft.nbt.NBTTagType TYPE -> a
    F:net.minecraft.nbt.NBTTagByte ZERO -> b
    F:net.minecraft.nbt.NBTTagByte ONE -> c
    F:byte data -> x
    M:net.minecraft.nbt.NBTTagByte valueOf(byte) -> a
    M:net.minecraft.nbt.NBTTagByte valueOf(boolean) -> a
    M:void write(java.io.DataOutput) -> a
    M:byte getId() -> a
    M:net.minecraft.nbt.NBTTagType getType() -> b
    M:net.minecraft.nbt.NBTTagByte copy() -> d
    M:boolean equals(java.lang.Object) -> equals
    M:void accept(net.minecraft.nbt.TagVisitor) -> a
    M:long getAsLong() -> e
    M:int getAsInt() -> f
    M:short getAsShort() -> g
    M:byte getAsByte() -> h
    M:double getAsDouble() -> i
    M:float getAsFloat() -> j
    M:java.lang.Number getAsNumber() -> k
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult accept(net.minecraft.nbt.StreamTagVisitor) -> a
    M:net.minecraft.nbt.NBTBase copy() -> c
    M:net.minecraft.nbt.NBTTagByte load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult parse(java.io.DataInput,net.minecraft.nbt.StreamTagVisitor) -> a
    M:int size() -> c
    M:java.lang.String getName() -> a
    M:java.lang.String getPrettyName() -> b
    M:boolean isValue() -> d
    M:net.minecraft.nbt.NBTBase load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> b
net.minecraft.nbt.ByteTag$Cache -> ph$a -> net.minecraft.nbt.NBTTagByte$a
net.minecraft.nbt.CollectionTag -> pi -> net.minecraft.nbt.NBTList
    M:java.lang.Object remove(int) -> remove
    M:void add(int,java.lang.Object) -> add
    M:java.lang.Object set(int,java.lang.Object) -> set
net.minecraft.nbt.CompoundTag -> pj -> net.minecraft.nbt.NBTTagCompound
    F:com.mojang.serialization.Codec CODEC -> a
    F:int SELF_SIZE_IN_BITS -> c
    F:int MAP_ENTRY_SIZE_IN_BITS -> w
    F:net.minecraft.nbt.NBTTagType TYPE -> b
    F:java.util.Map tags -> x
    M:void write(java.io.DataOutput) -> a
    M:java.util.Set getAllKeys() -> d
    M:byte getId() -> a
    M:net.minecraft.nbt.NBTTagType getType() -> b
    M:int size() -> e
    M:net.minecraft.nbt.NBTBase put(java.lang.String,net.minecraft.nbt.NBTBase) -> a
    M:void putByte(java.lang.String,byte) -> a
    M:void putShort(java.lang.String,short) -> a
    M:void putInt(java.lang.String,int) -> a
    M:void putLong(java.lang.String,long) -> a
    M:void putUUID(java.lang.String,java.util.UUID) -> a
    M:java.util.UUID getUUID(java.lang.String) -> a
    M:boolean hasUUID(java.lang.String) -> b
    M:void putFloat(java.lang.String,float) -> a
    M:void putDouble(java.lang.String,double) -> a
    M:void putString(java.lang.String,java.lang.String) -> a
    M:void putByteArray(java.lang.String,byte[]) -> a
    M:void putByteArray(java.lang.String,java.util.List) -> a
    M:void putIntArray(java.lang.String,int[]) -> a
    M:void putIntArray(java.lang.String,java.util.List) -> b
    M:void putLongArray(java.lang.String,long[]) -> a
    M:void putLongArray(java.lang.String,java.util.List) -> c
    M:void putBoolean(java.lang.String,boolean) -> a
    M:net.minecraft.nbt.NBTBase get(java.lang.String) -> c
    M:byte getTagType(java.lang.String) -> d
    M:boolean contains(java.lang.String) -> e
    M:boolean contains(java.lang.String,int) -> b
    M:byte getByte(java.lang.String) -> f
    M:short getShort(java.lang.String) -> g
    M:int getInt(java.lang.String) -> h
    M:long getLong(java.lang.String) -> i
    M:float getFloat(java.lang.String) -> j
    M:double getDouble(java.lang.String) -> k
    M:java.lang.String getString(java.lang.String) -> l
    M:net.minecraft.nbt.NBTTagCompound getCompound(java.lang.String) -> p
    M:net.minecraft.nbt.NBTTagList getList(java.lang.String,int) -> c
    M:boolean getBoolean(java.lang.String) -> q
    M:void remove(java.lang.String) -> r
    M:boolean isEmpty() -> f
    M:net.minecraft.CrashReport createReport(java.lang.String,net.minecraft.nbt.NBTTagType,java.lang.ClassCastException) -> a
    M:net.minecraft.nbt.NBTTagCompound copy() -> g
    M:boolean equals(java.lang.Object) -> equals
    M:void writeNamedTag(java.lang.String,net.minecraft.nbt.NBTBase,java.io.DataOutput) -> a
    M:byte readNamedTagType(java.io.DataInput,net.minecraft.nbt.NBTReadLimiter) -> a
    M:java.lang.String readNamedTagName(java.io.DataInput,net.minecraft.nbt.NBTReadLimiter) -> b
    M:net.minecraft.nbt.NBTBase readNamedTagData(net.minecraft.nbt.NBTTagType,java.lang.String,java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> a
    M:net.minecraft.nbt.NBTTagCompound merge(net.minecraft.nbt.NBTTagCompound) -> a
    M:void accept(net.minecraft.nbt.TagVisitor) -> a
    M:java.util.Map entries() -> h
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult accept(net.minecraft.nbt.StreamTagVisitor) -> a
    M:net.minecraft.nbt.NBTBase copy() -> c
    M:net.minecraft.nbt.NBTTagCompound load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult parse(java.io.DataInput,net.minecraft.nbt.StreamTagVisitor) -> a
    M:void skip(java.io.DataInput) -> a
    M:java.lang.String getName() -> a
    M:java.lang.String getPrettyName() -> b
    M:net.minecraft.nbt.NBTBase load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> b
net.minecraft.nbt.DoubleTag -> pk -> net.minecraft.nbt.NBTTagDouble
    F:int SELF_SIZE_IN_BITS -> c
    F:net.minecraft.nbt.NBTTagDouble ZERO -> a
    F:net.minecraft.nbt.NBTTagType TYPE -> b
    F:double data -> w
    M:net.minecraft.nbt.NBTTagDouble valueOf(double) -> a
    M:void write(java.io.DataOutput) -> a
    M:byte getId() -> a
    M:net.minecraft.nbt.NBTTagType getType() -> b
    M:net.minecraft.nbt.NBTTagDouble copy() -> d
    M:boolean equals(java.lang.Object) -> equals
    M:void accept(net.minecraft.nbt.TagVisitor) -> a
    M:long getAsLong() -> e
    M:int getAsInt() -> f
    M:short getAsShort() -> g
    M:byte getAsByte() -> h
    M:double getAsDouble() -> i
    M:float getAsFloat() -> j
    M:java.lang.Number getAsNumber() -> k
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult accept(net.minecraft.nbt.StreamTagVisitor) -> a
    M:net.minecraft.nbt.NBTBase copy() -> c
    M:net.minecraft.nbt.NBTTagDouble load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult parse(java.io.DataInput,net.minecraft.nbt.StreamTagVisitor) -> a
    M:int size() -> c
    M:java.lang.String getName() -> a
    M:java.lang.String getPrettyName() -> b
    M:boolean isValue() -> d
    M:net.minecraft.nbt.NBTBase load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> b
net.minecraft.nbt.EndTag -> pl -> net.minecraft.nbt.NBTTagEnd
    F:int SELF_SIZE_IN_BITS -> c
    F:net.minecraft.nbt.NBTTagType TYPE -> a
    F:net.minecraft.nbt.NBTTagEnd INSTANCE -> b
    M:void write(java.io.DataOutput) -> a
    M:byte getId() -> a
    M:net.minecraft.nbt.NBTTagType getType() -> b
    M:net.minecraft.nbt.NBTTagEnd copy() -> d
    M:void accept(net.minecraft.nbt.TagVisitor) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult accept(net.minecraft.nbt.StreamTagVisitor) -> a
    M:net.minecraft.nbt.NBTBase copy() -> c
    M:net.minecraft.nbt.NBTTagEnd load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult parse(java.io.DataInput,net.minecraft.nbt.StreamTagVisitor) -> a
    M:void skip(java.io.DataInput,int) -> a
    M:void skip(java.io.DataInput) -> a
    M:java.lang.String getName() -> a
    M:java.lang.String getPrettyName() -> b
    M:boolean isValue() -> d
    M:net.minecraft.nbt.NBTBase load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> b
net.minecraft.nbt.FloatTag -> pm -> net.minecraft.nbt.NBTTagFloat
    F:int SELF_SIZE_IN_BITS -> c
    F:net.minecraft.nbt.NBTTagFloat ZERO -> a
    F:net.minecraft.nbt.NBTTagType TYPE -> b
    F:float data -> w
    M:net.minecraft.nbt.NBTTagFloat valueOf(float) -> a
    M:void write(java.io.DataOutput) -> a
    M:byte getId() -> a
    M:net.minecraft.nbt.NBTTagType getType() -> b
    M:net.minecraft.nbt.NBTTagFloat copy() -> d
    M:boolean equals(java.lang.Object) -> equals
    M:void accept(net.minecraft.nbt.TagVisitor) -> a
    M:long getAsLong() -> e
    M:int getAsInt() -> f
    M:short getAsShort() -> g
    M:byte getAsByte() -> h
    M:double getAsDouble() -> i
    M:float getAsFloat() -> j
    M:java.lang.Number getAsNumber() -> k
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult accept(net.minecraft.nbt.StreamTagVisitor) -> a
    M:net.minecraft.nbt.NBTBase copy() -> c
    M:net.minecraft.nbt.NBTTagFloat load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult parse(java.io.DataInput,net.minecraft.nbt.StreamTagVisitor) -> a
    M:int size() -> c
    M:java.lang.String getName() -> a
    M:java.lang.String getPrettyName() -> b
    M:boolean isValue() -> d
    M:net.minecraft.nbt.NBTBase load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> b
net.minecraft.nbt.IntArrayTag -> pn -> net.minecraft.nbt.NBTTagIntArray
    F:int SELF_SIZE_IN_BITS -> b
    F:net.minecraft.nbt.NBTTagType TYPE -> a
    M:void write(java.io.DataOutput) -> a
    M:byte getId() -> a
    M:net.minecraft.nbt.NBTTagType getType() -> b
    M:net.minecraft.nbt.NBTTagIntArray copy() -> d
    M:boolean equals(java.lang.Object) -> equals
    M:void accept(net.minecraft.nbt.TagVisitor) -> a
    M:int size() -> size
    M:net.minecraft.nbt.NBTTagInt get(int) -> a
    M:net.minecraft.nbt.NBTTagInt set(int,net.minecraft.nbt.NBTTagInt) -> a
    M:void add(int,net.minecraft.nbt.NBTTagInt) -> b
    M:boolean setTag(int,net.minecraft.nbt.NBTBase) -> a
    M:boolean addTag(int,net.minecraft.nbt.NBTBase) -> b
    M:net.minecraft.nbt.NBTTagInt remove(int) -> b
    M:byte getElementType() -> e
    M:void clear() -> clear
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult accept(net.minecraft.nbt.StreamTagVisitor) -> a
    M:net.minecraft.nbt.NBTBase remove(int) -> c
    M:void add(int,net.minecraft.nbt.NBTBase) -> c
    M:net.minecraft.nbt.NBTBase set(int,net.minecraft.nbt.NBTBase) -> d
    M:net.minecraft.nbt.NBTBase copy() -> c
    M:java.lang.Object remove(int) -> remove
    M:void add(int,java.lang.Object) -> add
    M:java.lang.Object set(int,java.lang.Object) -> set
    M:java.lang.Object get(int) -> get
    M:net.minecraft.nbt.NBTTagIntArray load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult parse(java.io.DataInput,net.minecraft.nbt.StreamTagVisitor) -> a
    M:void skip(java.io.DataInput) -> a
    M:java.lang.String getName() -> a
    M:java.lang.String getPrettyName() -> b
    M:net.minecraft.nbt.NBTBase load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> b
net.minecraft.nbt.IntTag -> po -> net.minecraft.nbt.NBTTagInt
    F:int SELF_SIZE_IN_BITS -> b
    F:net.minecraft.nbt.NBTTagType TYPE -> a
    F:int data -> c
    M:net.minecraft.nbt.NBTTagInt valueOf(int) -> a
    M:void write(java.io.DataOutput) -> a
    M:byte getId() -> a
    M:net.minecraft.nbt.NBTTagType getType() -> b
    M:net.minecraft.nbt.NBTTagInt copy() -> d
    M:boolean equals(java.lang.Object) -> equals
    M:void accept(net.minecraft.nbt.TagVisitor) -> a
    M:long getAsLong() -> e
    M:int getAsInt() -> f
    M:short getAsShort() -> g
    M:byte getAsByte() -> h
    M:double getAsDouble() -> i
    M:float getAsFloat() -> j
    M:java.lang.Number getAsNumber() -> k
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult accept(net.minecraft.nbt.StreamTagVisitor) -> a
    M:net.minecraft.nbt.NBTBase copy() -> c
    M:net.minecraft.nbt.NBTTagInt load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult parse(java.io.DataInput,net.minecraft.nbt.StreamTagVisitor) -> a
    M:int size() -> c
    M:java.lang.String getName() -> a
    M:java.lang.String getPrettyName() -> b
    M:boolean isValue() -> d
    M:net.minecraft.nbt.NBTBase load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> b
net.minecraft.nbt.IntTag$Cache -> po$a -> net.minecraft.nbt.NBTTagInt$a
    F:int HIGH -> b
    F:int LOW -> c
net.minecraft.nbt.ListTag -> pp -> net.minecraft.nbt.NBTTagList
    F:int SELF_SIZE_IN_BITS -> b
    F:net.minecraft.nbt.NBTTagType TYPE -> a
    F:java.util.List list -> c
    F:byte type -> w
    M:void write(java.io.DataOutput) -> a
    M:byte getId() -> a
    M:net.minecraft.nbt.NBTTagType getType() -> b
    M:void updateTypeAfterRemove() -> f
    M:net.minecraft.nbt.NBTBase remove(int) -> c
    M:net.minecraft.nbt.NBTTagCompound getCompound(int) -> a
    M:net.minecraft.nbt.NBTTagList getList(int) -> b
    M:short getShort(int) -> d
    M:int getInt(int) -> e
    M:double getDouble(int) -> h
    M:float getFloat(int) -> i
    M:java.lang.String getString(int) -> j
    M:int size() -> size
    M:net.minecraft.nbt.NBTBase get(int) -> k
    M:net.minecraft.nbt.NBTBase set(int,net.minecraft.nbt.NBTBase) -> d
    M:void add(int,net.minecraft.nbt.NBTBase) -> c
    M:boolean setTag(int,net.minecraft.nbt.NBTBase) -> a
    M:boolean addTag(int,net.minecraft.nbt.NBTBase) -> b
    M:boolean updateType(net.minecraft.nbt.NBTBase) -> a
    M:net.minecraft.nbt.NBTTagList copy() -> d
    M:boolean equals(java.lang.Object) -> equals
    M:void accept(net.minecraft.nbt.TagVisitor) -> a
    M:byte getElementType() -> e
    M:void clear() -> clear
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult accept(net.minecraft.nbt.StreamTagVisitor) -> a
    M:net.minecraft.nbt.NBTBase copy() -> c
    M:java.lang.Object remove(int) -> remove
    M:void add(int,java.lang.Object) -> add
    M:java.lang.Object set(int,java.lang.Object) -> set
    M:java.lang.Object get(int) -> get
    M:net.minecraft.nbt.NBTTagList load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult parse(java.io.DataInput,net.minecraft.nbt.StreamTagVisitor) -> a
    M:void skip(java.io.DataInput) -> a
    M:java.lang.String getName() -> a
    M:java.lang.String getPrettyName() -> b
    M:net.minecraft.nbt.NBTBase load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> b
net.minecraft.nbt.LongArrayTag -> pq -> net.minecraft.nbt.NBTTagLongArray
    F:int SELF_SIZE_IN_BITS -> b
    F:net.minecraft.nbt.NBTTagType TYPE -> a
    M:void write(java.io.DataOutput) -> a
    M:byte getId() -> a
    M:net.minecraft.nbt.NBTTagType getType() -> b
    M:net.minecraft.nbt.NBTTagLongArray copy() -> d
    M:boolean equals(java.lang.Object) -> equals
    M:void accept(net.minecraft.nbt.TagVisitor) -> a
    M:int size() -> size
    M:net.minecraft.nbt.NBTTagLong get(int) -> a
    M:net.minecraft.nbt.NBTTagLong set(int,net.minecraft.nbt.NBTTagLong) -> a
    M:void add(int,net.minecraft.nbt.NBTTagLong) -> b
    M:boolean setTag(int,net.minecraft.nbt.NBTBase) -> a
    M:boolean addTag(int,net.minecraft.nbt.NBTBase) -> b
    M:net.minecraft.nbt.NBTTagLong remove(int) -> b
    M:byte getElementType() -> e
    M:void clear() -> clear
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult accept(net.minecraft.nbt.StreamTagVisitor) -> a
    M:net.minecraft.nbt.NBTBase remove(int) -> c
    M:void add(int,net.minecraft.nbt.NBTBase) -> c
    M:net.minecraft.nbt.NBTBase set(int,net.minecraft.nbt.NBTBase) -> d
    M:net.minecraft.nbt.NBTBase copy() -> c
    M:java.lang.Object remove(int) -> remove
    M:void add(int,java.lang.Object) -> add
    M:java.lang.Object set(int,java.lang.Object) -> set
    M:java.lang.Object get(int) -> get
    M:net.minecraft.nbt.NBTTagLongArray load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult parse(java.io.DataInput,net.minecraft.nbt.StreamTagVisitor) -> a
    M:void skip(java.io.DataInput) -> a
    M:java.lang.String getName() -> a
    M:java.lang.String getPrettyName() -> b
    M:net.minecraft.nbt.NBTBase load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> b
net.minecraft.nbt.LongTag -> pr -> net.minecraft.nbt.NBTTagLong
    F:int SELF_SIZE_IN_BITS -> b
    F:net.minecraft.nbt.NBTTagType TYPE -> a
    F:long data -> c
    M:net.minecraft.nbt.NBTTagLong valueOf(long) -> a
    M:void write(java.io.DataOutput) -> a
    M:byte getId() -> a
    M:net.minecraft.nbt.NBTTagType getType() -> b
    M:net.minecraft.nbt.NBTTagLong copy() -> d
    M:boolean equals(java.lang.Object) -> equals
    M:void accept(net.minecraft.nbt.TagVisitor) -> a
    M:long getAsLong() -> e
    M:int getAsInt() -> f
    M:short getAsShort() -> g
    M:byte getAsByte() -> h
    M:double getAsDouble() -> i
    M:float getAsFloat() -> j
    M:java.lang.Number getAsNumber() -> k
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult accept(net.minecraft.nbt.StreamTagVisitor) -> a
    M:net.minecraft.nbt.NBTBase copy() -> c
    M:net.minecraft.nbt.NBTTagLong load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult parse(java.io.DataInput,net.minecraft.nbt.StreamTagVisitor) -> a
    M:int size() -> c
    M:java.lang.String getName() -> a
    M:java.lang.String getPrettyName() -> b
    M:boolean isValue() -> d
    M:net.minecraft.nbt.NBTBase load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> b
net.minecraft.nbt.LongTag$Cache -> pr$a -> net.minecraft.nbt.NBTTagLong$a
    F:int HIGH -> b
    F:int LOW -> c
net.minecraft.nbt.NbtAccounter -> ps -> net.minecraft.nbt.NBTReadLimiter
    F:net.minecraft.nbt.NBTReadLimiter UNLIMITED -> a
    F:long quota -> b
    F:long usage -> c
    M:void accountBits(long) -> a
    M:void accountBits(long) -> a
net.minecraft.nbt.NbtIo -> pt -> net.minecraft.nbt.NBTCompressedStreamTools
    M:net.minecraft.nbt.NBTTagCompound readCompressed(java.io.File) -> a
    M:java.io.DataInputStream createDecompressorStream(java.io.InputStream) -> b
    M:net.minecraft.nbt.NBTTagCompound readCompressed(java.io.InputStream) -> a
    M:void parseCompressed(java.io.File,net.minecraft.nbt.StreamTagVisitor) -> a
    M:void parseCompressed(java.io.InputStream,net.minecraft.nbt.StreamTagVisitor) -> a
    M:void writeCompressed(net.minecraft.nbt.NBTTagCompound,java.io.File) -> a
    M:void writeCompressed(net.minecraft.nbt.NBTTagCompound,java.io.OutputStream) -> a
    M:void write(net.minecraft.nbt.NBTTagCompound,java.io.File) -> b
    M:net.minecraft.nbt.NBTTagCompound read(java.io.File) -> b
    M:net.minecraft.nbt.NBTTagCompound read(java.io.DataInput) -> a
    M:net.minecraft.nbt.NBTTagCompound read(java.io.DataInput,net.minecraft.nbt.NBTReadLimiter) -> a
    M:void write(net.minecraft.nbt.NBTTagCompound,java.io.DataOutput) -> a
    M:void parse(java.io.DataInput,net.minecraft.nbt.StreamTagVisitor) -> a
    M:void writeUnnamedTag(net.minecraft.nbt.NBTBase,java.io.DataOutput) -> a
    M:net.minecraft.nbt.NBTBase readUnnamedTag(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> a
net.minecraft.nbt.NbtOps -> pu -> net.minecraft.nbt.DynamicOpsNBT
    F:net.minecraft.nbt.DynamicOpsNBT INSTANCE -> a
    M:net.minecraft.nbt.NBTBase empty() -> a
    M:java.lang.Object convertTo(com.mojang.serialization.DynamicOps,net.minecraft.nbt.NBTBase) -> a
    M:com.mojang.serialization.DataResult getNumberValue(net.minecraft.nbt.NBTBase) -> a
    M:net.minecraft.nbt.NBTBase createNumeric(java.lang.Number) -> a
    M:net.minecraft.nbt.NBTBase createByte(byte) -> a
    M:net.minecraft.nbt.NBTBase createShort(short) -> a
    M:net.minecraft.nbt.NBTBase createInt(int) -> a
    M:net.minecraft.nbt.NBTBase createLong(long) -> a
    M:net.minecraft.nbt.NBTBase createFloat(float) -> a
    M:net.minecraft.nbt.NBTBase createDouble(double) -> a
    M:net.minecraft.nbt.NBTBase createBoolean(boolean) -> a
    M:com.mojang.serialization.DataResult getStringValue(net.minecraft.nbt.NBTBase) -> b
    M:net.minecraft.nbt.NBTBase createString(java.lang.String) -> a
    M:net.minecraft.nbt.NBTList createGenericList(byte,byte) -> a
    M:boolean typesMatch(byte,byte,byte) -> a
    M:void fillOne(net.minecraft.nbt.NBTList,net.minecraft.nbt.NBTBase,net.minecraft.nbt.NBTBase) -> a
    M:void fillMany(net.minecraft.nbt.NBTList,net.minecraft.nbt.NBTBase,java.util.List) -> a
    M:com.mojang.serialization.DataResult mergeToList(net.minecraft.nbt.NBTBase,net.minecraft.nbt.NBTBase) -> a
    M:com.mojang.serialization.DataResult mergeToList(net.minecraft.nbt.NBTBase,java.util.List) -> a
    M:com.mojang.serialization.DataResult mergeToMap(net.minecraft.nbt.NBTBase,net.minecraft.nbt.NBTBase,net.minecraft.nbt.NBTBase) -> a
    M:com.mojang.serialization.DataResult mergeToMap(net.minecraft.nbt.NBTBase,com.mojang.serialization.MapLike) -> a
    M:com.mojang.serialization.DataResult getMapValues(net.minecraft.nbt.NBTBase) -> c
    M:com.mojang.serialization.DataResult getMapEntries(net.minecraft.nbt.NBTBase) -> d
    M:com.mojang.serialization.DataResult getMap(net.minecraft.nbt.NBTBase) -> e
    M:net.minecraft.nbt.NBTBase createMap(java.util.stream.Stream) -> a
    M:com.mojang.serialization.DataResult getStream(net.minecraft.nbt.NBTBase) -> f
    M:com.mojang.serialization.DataResult getList(net.minecraft.nbt.NBTBase) -> g
    M:com.mojang.serialization.DataResult getByteBuffer(net.minecraft.nbt.NBTBase) -> h
    M:net.minecraft.nbt.NBTBase createByteList(java.nio.ByteBuffer) -> a
    M:com.mojang.serialization.DataResult getIntStream(net.minecraft.nbt.NBTBase) -> i
    M:net.minecraft.nbt.NBTBase createIntList(java.util.stream.IntStream) -> a
    M:com.mojang.serialization.DataResult getLongStream(net.minecraft.nbt.NBTBase) -> j
    M:net.minecraft.nbt.NBTBase createLongList(java.util.stream.LongStream) -> a
    M:net.minecraft.nbt.NBTBase createList(java.util.stream.Stream) -> b
    M:net.minecraft.nbt.NBTBase remove(net.minecraft.nbt.NBTBase,java.lang.String) -> a
    M:java.lang.Object remove(java.lang.Object,java.lang.String) -> remove
    M:java.lang.Object empty() -> empty
    M:net.minecraft.nbt.NBTBase get(net.minecraft.nbt.NBTBase) -> a
    M:net.minecraft.nbt.NBTBase get(java.lang.String) -> a
    M:java.util.stream.Stream entries() -> entries
    M:java.lang.Object get(java.lang.String) -> get
    M:java.lang.Object get(java.lang.Object) -> get
net.minecraft.nbt.NbtOps$NbtRecordBuilder -> pu$a -> net.minecraft.nbt.DynamicOpsNBT$a
    M:net.minecraft.nbt.NBTTagCompound initBuilder() -> a
    M:net.minecraft.nbt.NBTTagCompound append(java.lang.String,net.minecraft.nbt.NBTBase,net.minecraft.nbt.NBTTagCompound) -> a
    M:com.mojang.serialization.DataResult build(net.minecraft.nbt.NBTTagCompound,net.minecraft.nbt.NBTBase) -> a
    M:java.lang.Object append(java.lang.String,java.lang.Object,java.lang.Object) -> append
    M:com.mojang.serialization.DataResult build(java.lang.Object,java.lang.Object) -> build
net.minecraft.nbt.NbtUtils -> pv -> net.minecraft.nbt.GameProfileSerializer
    F:java.util.Comparator YXZ_LISTTAG_INT_COMPARATOR -> b
    F:java.util.Comparator YXZ_LISTTAG_DOUBLE_COMPARATOR -> c
    F:java.lang.String SNBT_DATA_TAG -> a
    F:char PROPERTIES_START -> d
    F:char PROPERTIES_END -> e
    F:java.lang.String ELEMENT_SEPARATOR -> f
    F:char KEY_VALUE_SEPARATOR -> g
    F:com.google.common.base.Splitter COMMA_SPLITTER -> h
    F:com.google.common.base.Splitter COLON_SPLITTER -> i
    F:org.slf4j.Logger LOGGER -> j
    F:int INDENT -> k
    F:int NOT_FOUND -> l
    M:com.mojang.authlib.GameProfile readGameProfile(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagCompound writeGameProfile(net.minecraft.nbt.NBTTagCompound,com.mojang.authlib.GameProfile) -> a
    M:boolean compareNbt(net.minecraft.nbt.NBTBase,net.minecraft.nbt.NBTBase,boolean) -> a
    M:net.minecraft.nbt.NBTTagIntArray createUUID(java.util.UUID) -> a
    M:java.util.UUID loadUUID(net.minecraft.nbt.NBTBase) -> a
    M:net.minecraft.core.BlockPosition readBlockPos(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.nbt.NBTTagCompound writeBlockPos(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData readBlockState(net.minecraft.nbt.NBTTagCompound) -> c
    M:net.minecraft.world.level.block.state.IBlockDataHolder setValueHelper(net.minecraft.world.level.block.state.IBlockDataHolder,net.minecraft.world.level.block.state.properties.IBlockState,java.lang.String,net.minecraft.nbt.NBTTagCompound,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagCompound writeBlockState(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.nbt.NBTTagCompound writeFluidState(net.minecraft.world.level.material.Fluid) -> a
    M:java.lang.String getName(net.minecraft.world.level.block.state.properties.IBlockState,java.lang.Comparable) -> a
    M:java.lang.String prettyPrint(net.minecraft.nbt.NBTBase) -> b
    M:java.lang.String prettyPrint(net.minecraft.nbt.NBTBase,boolean) -> a
    M:java.lang.StringBuilder prettyPrint(java.lang.StringBuilder,net.minecraft.nbt.NBTBase,int,boolean) -> a
    M:java.lang.StringBuilder indent(int,java.lang.StringBuilder) -> a
    M:net.minecraft.nbt.NBTTagCompound update(com.mojang.datafixers.DataFixer,net.minecraft.util.datafix.DataFixTypes,net.minecraft.nbt.NBTTagCompound,int) -> a
    M:net.minecraft.nbt.NBTTagCompound update(com.mojang.datafixers.DataFixer,net.minecraft.util.datafix.DataFixTypes,net.minecraft.nbt.NBTTagCompound,int,int) -> a
    M:net.minecraft.network.chat.IChatBaseComponent toPrettyComponent(net.minecraft.nbt.NBTBase) -> c
    M:java.lang.String structureToSnbt(net.minecraft.nbt.NBTTagCompound) -> d
    M:net.minecraft.nbt.NBTTagCompound snbtToStructure(java.lang.String) -> a
    M:net.minecraft.nbt.NBTTagCompound packStructureTemplate(net.minecraft.nbt.NBTTagCompound) -> e
    M:net.minecraft.nbt.NBTTagCompound unpackStructureTemplate(net.minecraft.nbt.NBTTagCompound) -> f
    M:java.lang.String packBlockState(net.minecraft.nbt.NBTTagCompound) -> g
    M:net.minecraft.nbt.NBTTagCompound unpackBlockState(java.lang.String) -> b
net.minecraft.nbt.NumericTag -> pw -> net.minecraft.nbt.NBTNumber
net.minecraft.nbt.ShortTag -> px -> net.minecraft.nbt.NBTTagShort
    F:int SELF_SIZE_IN_BITS -> b
    F:net.minecraft.nbt.NBTTagType TYPE -> a
    F:short data -> c
    M:net.minecraft.nbt.NBTTagShort valueOf(short) -> a
    M:void write(java.io.DataOutput) -> a
    M:byte getId() -> a
    M:net.minecraft.nbt.NBTTagType getType() -> b
    M:net.minecraft.nbt.NBTTagShort copy() -> d
    M:boolean equals(java.lang.Object) -> equals
    M:void accept(net.minecraft.nbt.TagVisitor) -> a
    M:long getAsLong() -> e
    M:int getAsInt() -> f
    M:short getAsShort() -> g
    M:byte getAsByte() -> h
    M:double getAsDouble() -> i
    M:float getAsFloat() -> j
    M:java.lang.Number getAsNumber() -> k
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult accept(net.minecraft.nbt.StreamTagVisitor) -> a
    M:net.minecraft.nbt.NBTBase copy() -> c
    M:net.minecraft.nbt.NBTTagShort load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult parse(java.io.DataInput,net.minecraft.nbt.StreamTagVisitor) -> a
    M:int size() -> c
    M:java.lang.String getName() -> a
    M:java.lang.String getPrettyName() -> b
    M:boolean isValue() -> d
    M:net.minecraft.nbt.NBTBase load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> b
net.minecraft.nbt.ShortTag$Cache -> px$a -> net.minecraft.nbt.NBTTagShort$a
    F:int HIGH -> b
    F:int LOW -> c
net.minecraft.nbt.SnbtPrinterTagVisitor -> py -> net.minecraft.nbt.SnbtPrinterTagVisitor
    F:java.util.Map KEY_ORDER -> a
    F:java.util.Set NO_INDENTATION -> b
    F:java.util.regex.Pattern SIMPLE_VALUE -> c
    F:java.lang.String NAME_VALUE_SEPARATOR -> d
    F:java.lang.String ELEMENT_SEPARATOR -> e
    F:java.lang.String LIST_OPEN -> f
    F:java.lang.String LIST_CLOSE -> g
    F:java.lang.String LIST_TYPE_SEPARATOR -> h
    F:java.lang.String ELEMENT_SPACING -> i
    F:java.lang.String STRUCT_OPEN -> j
    F:java.lang.String STRUCT_CLOSE -> k
    F:java.lang.String NEWLINE -> l
    F:java.lang.String indentation -> m
    F:int depth -> n
    F:java.util.List path -> o
    F:java.lang.String result -> p
    M:java.lang.String visit(net.minecraft.nbt.NBTBase) -> a
    M:void visitString(net.minecraft.nbt.NBTTagString) -> a
    M:void visitByte(net.minecraft.nbt.NBTTagByte) -> a
    M:void visitShort(net.minecraft.nbt.NBTTagShort) -> a
    M:void visitInt(net.minecraft.nbt.NBTTagInt) -> a
    M:void visitLong(net.minecraft.nbt.NBTTagLong) -> a
    M:void visitFloat(net.minecraft.nbt.NBTTagFloat) -> a
    M:void visitDouble(net.minecraft.nbt.NBTTagDouble) -> a
    M:void visitByteArray(net.minecraft.nbt.NBTTagByteArray) -> a
    M:void visitIntArray(net.minecraft.nbt.NBTTagIntArray) -> a
    M:void visitLongArray(net.minecraft.nbt.NBTTagLongArray) -> a
    M:void visitList(net.minecraft.nbt.NBTTagList) -> a
    M:void visitCompound(net.minecraft.nbt.NBTTagCompound) -> a
    M:void popPath() -> b
    M:void pushPath(java.lang.String) -> b
    M:java.util.List getKeys(net.minecraft.nbt.NBTTagCompound) -> b
    M:java.lang.String pathString() -> a
    M:java.lang.String handleEscapePretty(java.lang.String) -> a
    M:void visitEnd(net.minecraft.nbt.NBTTagEnd) -> a
net.minecraft.nbt.StreamTagVisitor -> pz -> net.minecraft.nbt.StreamTagVisitor
net.minecraft.nbt.StreamTagVisitor$EntryResult -> pz$a -> net.minecraft.nbt.StreamTagVisitor$a
    F:net.minecraft.nbt.StreamTagVisitor$EntryResult ENTER -> a
    F:net.minecraft.nbt.StreamTagVisitor$EntryResult SKIP -> b
    F:net.minecraft.nbt.StreamTagVisitor$EntryResult BREAK -> c
    F:net.minecraft.nbt.StreamTagVisitor$EntryResult HALT -> d
net.minecraft.nbt.StreamTagVisitor$ValueResult -> pz$b -> net.minecraft.nbt.StreamTagVisitor$b
    F:net.minecraft.nbt.StreamTagVisitor$ValueResult CONTINUE -> a
    F:net.minecraft.nbt.StreamTagVisitor$ValueResult BREAK -> b
    F:net.minecraft.nbt.StreamTagVisitor$ValueResult HALT -> c
net.minecraft.nbt.StringTag -> qa -> net.minecraft.nbt.NBTTagString
    F:int SELF_SIZE_IN_BITS -> b
    F:net.minecraft.nbt.NBTTagType TYPE -> a
    F:net.minecraft.nbt.NBTTagString EMPTY -> c
    F:char DOUBLE_QUOTE -> w
    F:char SINGLE_QUOTE -> x
    F:char ESCAPE -> y
    F:char NOT_SET -> z
    M:void skipString(java.io.DataInput) -> a
    M:net.minecraft.nbt.NBTTagString valueOf(java.lang.String) -> a
    M:void write(java.io.DataOutput) -> a
    M:byte getId() -> a
    M:net.minecraft.nbt.NBTTagType getType() -> b
    M:net.minecraft.nbt.NBTTagString copy() -> d
    M:boolean equals(java.lang.Object) -> equals
    M:void accept(net.minecraft.nbt.TagVisitor) -> a
    M:java.lang.String quoteAndEscape(java.lang.String) -> b
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult accept(net.minecraft.nbt.StreamTagVisitor) -> a
    M:net.minecraft.nbt.NBTBase copy() -> c
    M:net.minecraft.nbt.NBTTagString load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult parse(java.io.DataInput,net.minecraft.nbt.StreamTagVisitor) -> a
    M:void skip(java.io.DataInput) -> a
    M:java.lang.String getName() -> a
    M:java.lang.String getPrettyName() -> b
    M:boolean isValue() -> d
    M:net.minecraft.nbt.NBTBase load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> b
net.minecraft.nbt.StringTagVisitor -> qb -> net.minecraft.nbt.StringTagVisitor
    F:java.util.regex.Pattern SIMPLE_VALUE -> a
    F:java.lang.StringBuilder builder -> b
    M:java.lang.String visit(net.minecraft.nbt.NBTBase) -> a
    M:void visitString(net.minecraft.nbt.NBTTagString) -> a
    M:void visitByte(net.minecraft.nbt.NBTTagByte) -> a
    M:void visitShort(net.minecraft.nbt.NBTTagShort) -> a
    M:void visitInt(net.minecraft.nbt.NBTTagInt) -> a
    M:void visitLong(net.minecraft.nbt.NBTTagLong) -> a
    M:void visitFloat(net.minecraft.nbt.NBTTagFloat) -> a
    M:void visitDouble(net.minecraft.nbt.NBTTagDouble) -> a
    M:void visitByteArray(net.minecraft.nbt.NBTTagByteArray) -> a
    M:void visitIntArray(net.minecraft.nbt.NBTTagIntArray) -> a
    M:void visitLongArray(net.minecraft.nbt.NBTTagLongArray) -> a
    M:void visitList(net.minecraft.nbt.NBTTagList) -> a
    M:void visitCompound(net.minecraft.nbt.NBTTagCompound) -> a
    M:java.lang.String handleEscape(java.lang.String) -> a
    M:void visitEnd(net.minecraft.nbt.NBTTagEnd) -> a
net.minecraft.nbt.Tag -> qc -> net.minecraft.nbt.NBTBase
    F:int OBJECT_HEADER -> d
    F:int ARRAY_HEADER -> e
    F:int OBJECT_REFERENCE -> f
    F:int STRING_SIZE -> g
    F:byte TAG_END -> h
    F:byte TAG_BYTE -> i
    F:byte TAG_SHORT -> j
    F:byte TAG_INT -> k
    F:byte TAG_LONG -> l
    F:byte TAG_FLOAT -> m
    F:byte TAG_DOUBLE -> n
    F:byte TAG_BYTE_ARRAY -> o
    F:byte TAG_STRING -> p
    F:byte TAG_LIST -> q
    F:byte TAG_COMPOUND -> r
    F:byte TAG_INT_ARRAY -> s
    F:byte TAG_LONG_ARRAY -> t
    F:byte TAG_ANY_NUMERIC -> u
    F:int MAX_DEPTH -> v
    M:void acceptAsRoot(net.minecraft.nbt.StreamTagVisitor) -> b
net.minecraft.nbt.TagParser -> qd -> net.minecraft.nbt.MojangsonParser
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TRAILING_DATA -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_EXPECTED_KEY -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_EXPECTED_VALUE -> c
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_INSERT_MIXED_LIST -> d
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_INSERT_MIXED_ARRAY -> e
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_ARRAY -> f
    F:char ELEMENT_SEPARATOR -> g
    F:char NAME_VALUE_SEPARATOR -> h
    F:char LIST_OPEN -> i
    F:char LIST_CLOSE -> j
    F:char STRUCT_CLOSE -> k
    F:char STRUCT_OPEN -> l
    F:java.util.regex.Pattern DOUBLE_PATTERN_NOSUFFIX -> m
    F:java.util.regex.Pattern DOUBLE_PATTERN -> n
    F:java.util.regex.Pattern FLOAT_PATTERN -> o
    F:java.util.regex.Pattern BYTE_PATTERN -> p
    F:java.util.regex.Pattern LONG_PATTERN -> q
    F:java.util.regex.Pattern SHORT_PATTERN -> r
    F:java.util.regex.Pattern INT_PATTERN -> s
    F:com.mojang.brigadier.StringReader reader -> t
    M:net.minecraft.nbt.NBTTagCompound parseTag(java.lang.String) -> a
    M:net.minecraft.nbt.NBTTagCompound readSingleStruct() -> a
    M:java.lang.String readKey() -> b
    M:net.minecraft.nbt.NBTBase readTypedValue() -> c
    M:net.minecraft.nbt.NBTBase type(java.lang.String) -> b
    M:net.minecraft.nbt.NBTBase readValue() -> d
    M:net.minecraft.nbt.NBTBase readList() -> e
    M:net.minecraft.nbt.NBTTagCompound readStruct() -> f
    M:net.minecraft.nbt.NBTBase readListTag() -> g
    M:net.minecraft.nbt.NBTBase readArrayTag() -> h
    M:java.util.List readArray(net.minecraft.nbt.NBTTagType,net.minecraft.nbt.NBTTagType) -> a
    M:boolean hasElementSeparator() -> i
    M:void expect(char) -> a
net.minecraft.nbt.TagType -> qe -> net.minecraft.nbt.NBTTagType
    M:void parseRoot(java.io.DataInput,net.minecraft.nbt.StreamTagVisitor) -> b
    M:boolean isValue() -> d
    M:net.minecraft.nbt.NBTTagType createInvalid(int) -> a
    M:java.io.IOException createException() -> c
    M:net.minecraft.nbt.NBTTagEnd load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult parse(java.io.DataInput,net.minecraft.nbt.StreamTagVisitor) -> a
    M:void skip(java.io.DataInput,int) -> a
    M:void skip(java.io.DataInput) -> a
    M:java.lang.String getName() -> a
    M:java.lang.String getPrettyName() -> b
    M:net.minecraft.nbt.NBTBase load(java.io.DataInput,int,net.minecraft.nbt.NBTReadLimiter) -> b
net.minecraft.nbt.TagType$StaticSize -> qe$a -> net.minecraft.nbt.NBTTagType$a
    M:void skip(java.io.DataInput) -> a
    M:void skip(java.io.DataInput,int) -> a
net.minecraft.nbt.TagType$VariableSize -> qe$b -> net.minecraft.nbt.NBTTagType$b
    M:void skip(java.io.DataInput,int) -> a
net.minecraft.nbt.TagTypes -> qf -> net.minecraft.nbt.NBTTagTypes
    M:net.minecraft.nbt.NBTTagType getType(int) -> a
net.minecraft.nbt.TagVisitor -> qg -> net.minecraft.nbt.TagVisitor
net.minecraft.nbt.TextComponentTagVisitor -> qh -> net.minecraft.nbt.TextComponentTagVisitor
    F:org.slf4j.Logger LOGGER -> a
    F:int INLINE_LIST_THRESHOLD -> b
    F:it.unimi.dsi.fastutil.bytes.ByteCollection INLINE_ELEMENT_TYPES -> c
    F:net.minecraft.EnumChatFormat SYNTAX_HIGHLIGHTING_KEY -> d
    F:net.minecraft.EnumChatFormat SYNTAX_HIGHLIGHTING_STRING -> e
    F:net.minecraft.EnumChatFormat SYNTAX_HIGHLIGHTING_NUMBER -> f
    F:net.minecraft.EnumChatFormat SYNTAX_HIGHLIGHTING_NUMBER_TYPE -> g
    F:java.util.regex.Pattern SIMPLE_VALUE -> h
    F:java.lang.String NAME_VALUE_SEPARATOR -> i
    F:java.lang.String ELEMENT_SEPARATOR -> j
    F:java.lang.String LIST_OPEN -> k
    F:java.lang.String LIST_CLOSE -> l
    F:java.lang.String LIST_TYPE_SEPARATOR -> m
    F:java.lang.String ELEMENT_SPACING -> n
    F:java.lang.String STRUCT_OPEN -> o
    F:java.lang.String STRUCT_CLOSE -> p
    F:java.lang.String NEWLINE -> q
    F:java.lang.String indentation -> r
    F:int depth -> s
    F:net.minecraft.network.chat.IChatBaseComponent result -> t
    M:net.minecraft.network.chat.IChatBaseComponent visit(net.minecraft.nbt.NBTBase) -> a
    M:void visitString(net.minecraft.nbt.NBTTagString) -> a
    M:void visitByte(net.minecraft.nbt.NBTTagByte) -> a
    M:void visitShort(net.minecraft.nbt.NBTTagShort) -> a
    M:void visitInt(net.minecraft.nbt.NBTTagInt) -> a
    M:void visitLong(net.minecraft.nbt.NBTTagLong) -> a
    M:void visitFloat(net.minecraft.nbt.NBTTagFloat) -> a
    M:void visitDouble(net.minecraft.nbt.NBTTagDouble) -> a
    M:void visitByteArray(net.minecraft.nbt.NBTTagByteArray) -> a
    M:void visitIntArray(net.minecraft.nbt.NBTTagIntArray) -> a
    M:void visitLongArray(net.minecraft.nbt.NBTTagLongArray) -> a
    M:void visitList(net.minecraft.nbt.NBTTagList) -> a
    M:void visitCompound(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.network.chat.IChatBaseComponent handleEscapePretty(java.lang.String) -> a
    M:void visitEnd(net.minecraft.nbt.NBTTagEnd) -> a
net.minecraft.nbt.visitors.CollectFields -> qj -> net.minecraft.nbt.visitors.CollectFields
    F:int fieldsToGetCount -> a
    F:java.util.Set wantedTypes -> b
    F:java.util.Deque stack -> c
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visitRootEntry(net.minecraft.nbt.NBTTagType) -> b
    M:net.minecraft.nbt.StreamTagVisitor$EntryResult visitEntry(net.minecraft.nbt.NBTTagType) -> a
    M:net.minecraft.nbt.StreamTagVisitor$EntryResult visitEntry(net.minecraft.nbt.NBTTagType,java.lang.String) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visitContainerEnd() -> b
    M:int getMissingFieldCount() -> c
net.minecraft.nbt.visitors.CollectToTag -> qk -> net.minecraft.nbt.visitors.CollectToTag
    F:java.lang.String lastId -> a
    F:net.minecraft.nbt.NBTBase rootTag -> b
    F:java.util.Deque consumerStack -> c
    M:net.minecraft.nbt.NBTBase getResult() -> d
    M:int depth() -> e
    M:void appendEntry(net.minecraft.nbt.NBTBase) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visitEnd() -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(java.lang.String) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(byte) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(short) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(int) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(long) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(float) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(double) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(byte[]) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(int[]) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(long[]) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visitList(net.minecraft.nbt.NBTTagType,int) -> a
    M:net.minecraft.nbt.StreamTagVisitor$EntryResult visitElement(net.minecraft.nbt.NBTTagType,int) -> b
    M:net.minecraft.nbt.StreamTagVisitor$EntryResult visitEntry(net.minecraft.nbt.NBTTagType) -> a
    M:net.minecraft.nbt.StreamTagVisitor$EntryResult visitEntry(net.minecraft.nbt.NBTTagType,java.lang.String) -> a
    M:void enterContainerIfNeeded(net.minecraft.nbt.NBTTagType) -> c
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visitContainerEnd() -> b
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visitRootEntry(net.minecraft.nbt.NBTTagType) -> b
net.minecraft.nbt.visitors.FieldSelector -> ql -> net.minecraft.nbt.visitors.FieldSelector
    F:java.util.List path -> a
    F:net.minecraft.nbt.NBTTagType type -> b
    F:java.lang.String name -> c
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.List path() -> a
    M:net.minecraft.nbt.NBTTagType type() -> b
    M:java.lang.String name() -> c
net.minecraft.nbt.visitors.FieldTree -> qm -> net.minecraft.nbt.visitors.FieldTree
    F:int depth -> a
    F:java.util.Map selectedFields -> b
    F:java.util.Map fieldsToRecurse -> c
    M:net.minecraft.nbt.visitors.FieldTree createRoot() -> a
    M:void addEntry(net.minecraft.nbt.visitors.FieldSelector) -> a
    M:boolean isSelected(net.minecraft.nbt.NBTTagType,java.lang.String) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int depth() -> b
    M:java.util.Map selectedFields() -> c
    M:java.util.Map fieldsToRecurse() -> d
net.minecraft.nbt.visitors.SkipAll -> qn -> net.minecraft.nbt.visitors.SkipAll
    F:net.minecraft.nbt.visitors.SkipAll INSTANCE -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visitEnd() -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(java.lang.String) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(byte) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(short) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(int) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(long) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(float) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(double) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(byte[]) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(int[]) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visit(long[]) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visitList(net.minecraft.nbt.NBTTagType,int) -> a
    M:net.minecraft.nbt.StreamTagVisitor$EntryResult visitElement(net.minecraft.nbt.NBTTagType,int) -> b
    M:net.minecraft.nbt.StreamTagVisitor$EntryResult visitEntry(net.minecraft.nbt.NBTTagType) -> a
    M:net.minecraft.nbt.StreamTagVisitor$EntryResult visitEntry(net.minecraft.nbt.NBTTagType,java.lang.String) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visitContainerEnd() -> b
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visitRootEntry(net.minecraft.nbt.NBTTagType) -> b
net.minecraft.nbt.visitors.SkipFields -> qo -> net.minecraft.nbt.visitors.SkipFields
    F:java.util.Deque stack -> a
    M:net.minecraft.nbt.StreamTagVisitor$EntryResult visitEntry(net.minecraft.nbt.NBTTagType,java.lang.String) -> a
    M:net.minecraft.nbt.StreamTagVisitor$ValueResult visitContainerEnd() -> b
net.minecraft.network.CipherBase -> qq -> net.minecraft.network.PacketEncryptionHandler
    F:javax.crypto.Cipher cipher -> a
    M:io.netty.buffer.ByteBuf decipher(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf) -> a
    M:void encipher(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf) -> a
net.minecraft.network.CipherDecoder -> qr -> net.minecraft.network.PacketDecrypter
    F:net.minecraft.network.PacketEncryptionHandler cipher -> a
    M:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List) -> a
    M:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List) -> decode
net.minecraft.network.CipherEncoder -> qs -> net.minecraft.network.PacketEncrypter
    F:net.minecraft.network.PacketEncryptionHandler cipher -> a
    M:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf) -> a
    M:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf) -> encode
net.minecraft.network.CompressionDecoder -> qt -> net.minecraft.network.PacketDecompressor
    F:int MAXIMUM_COMPRESSED_LENGTH -> a
    F:int MAXIMUM_UNCOMPRESSED_LENGTH -> b
    F:java.util.zip.Inflater inflater -> c
    F:int threshold -> d
    F:boolean validateDecompressed -> e
    M:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List) -> decode
    M:void setThreshold(int,boolean) -> a
net.minecraft.network.CompressionEncoder -> qu -> net.minecraft.network.PacketCompressor
    F:java.util.zip.Deflater deflater -> b
    F:int threshold -> c
    M:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf) -> a
    M:int getThreshold() -> a
    M:void setThreshold(int) -> a
    M:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf) -> encode
net.minecraft.network.Connection -> qv -> net.minecraft.network.NetworkManager
    F:float AVERAGE_PACKETS_SMOOTHING -> i
    F:org.slf4j.Logger LOGGER -> j
    F:org.slf4j.Marker ROOT_MARKER -> a
    F:org.slf4j.Marker PACKET_MARKER -> b
    F:org.slf4j.Marker PACKET_RECEIVED_MARKER -> c
    F:org.slf4j.Marker PACKET_SENT_MARKER -> d
    F:io.netty.util.AttributeKey ATTRIBUTE_PROTOCOL -> e
    F:net.minecraft.util.LazyInitVar NETWORK_WORKER_GROUP -> f
    F:net.minecraft.util.LazyInitVar NETWORK_EPOLL_WORKER_GROUP -> g
    F:net.minecraft.util.LazyInitVar LOCAL_WORKER_GROUP -> h
    F:net.minecraft.network.protocol.EnumProtocolDirection receiving -> k
    F:java.util.Queue queue -> l
    F:io.netty.channel.Channel channel -> m
    F:java.net.SocketAddress address -> n
    F:net.minecraft.network.PacketListener packetListener -> o
    F:net.minecraft.network.chat.IChatBaseComponent disconnectedReason -> p
    F:boolean encrypted -> q
    F:boolean disconnectionHandled -> r
    F:int receivedPackets -> s
    F:int sentPackets -> t
    F:float averageReceivedPackets -> u
    F:float averageSentPackets -> v
    F:int tickCount -> w
    F:boolean handlingFault -> x
    M:void setProtocol(net.minecraft.network.EnumProtocol) -> a
    M:void channelRead0(io.netty.channel.ChannelHandlerContext,net.minecraft.network.protocol.Packet) -> a
    M:void genericsFtw(net.minecraft.network.protocol.Packet,net.minecraft.network.PacketListener) -> a
    M:void setListener(net.minecraft.network.PacketListener) -> a
    M:void send(net.minecraft.network.protocol.Packet) -> a
    M:void send(net.minecraft.network.protocol.Packet,io.netty.util.concurrent.GenericFutureListener) -> a
    M:void sendPacket(net.minecraft.network.protocol.Packet,io.netty.util.concurrent.GenericFutureListener) -> b
    M:void doSendPacket(net.minecraft.network.protocol.Packet,io.netty.util.concurrent.GenericFutureListener,net.minecraft.network.EnumProtocol,net.minecraft.network.EnumProtocol) -> a
    M:net.minecraft.network.EnumProtocol getCurrentProtocol() -> p
    M:void flushQueue() -> q
    M:void tick() -> a
    M:void tickSecond() -> b
    M:java.net.SocketAddress getRemoteAddress() -> c
    M:void disconnect(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:boolean isMemoryConnection() -> d
    M:net.minecraft.network.protocol.EnumProtocolDirection getReceiving() -> e
    M:net.minecraft.network.protocol.EnumProtocolDirection getSending() -> f
    M:net.minecraft.network.NetworkManager connectToServer(java.net.InetSocketAddress,boolean) -> a
    M:net.minecraft.network.NetworkManager connectToLocalServer(java.net.SocketAddress) -> a
    M:void setEncryptionKey(javax.crypto.Cipher,javax.crypto.Cipher) -> a
    M:boolean isEncrypted() -> g
    M:boolean isConnected() -> h
    M:boolean isConnecting() -> i
    M:net.minecraft.network.PacketListener getPacketListener() -> j
    M:net.minecraft.network.chat.IChatBaseComponent getDisconnectedReason() -> k
    M:void setReadOnly() -> l
    M:void setupCompression(int,boolean) -> a
    M:void handleDisconnection() -> m
    M:float getAverageReceivedPackets() -> n
    M:float getAverageSentPackets() -> o
net.minecraft.network.Connection$PacketHolder -> qv$a -> net.minecraft.network.NetworkManager$QueuedPacket
    F:net.minecraft.network.protocol.Packet packet -> a
    F:io.netty.util.concurrent.GenericFutureListener listener -> b
net.minecraft.network.ConnectionProtocol -> qw -> net.minecraft.network.EnumProtocol
    F:net.minecraft.network.EnumProtocol HANDSHAKING -> a
    F:net.minecraft.network.EnumProtocol PLAY -> b
    F:net.minecraft.network.EnumProtocol STATUS -> c
    F:net.minecraft.network.EnumProtocol LOGIN -> d
    F:int MIN_PROTOCOL_ID -> e
    F:int MAX_PROTOCOL_ID -> f
    F:java.util.Map PROTOCOL_BY_PACKET -> h
    F:int id -> i
    F:java.util.Map flows -> j
    M:net.minecraft.network.ConnectionProtocol$ProtocolBuilder protocol() -> b
    M:java.lang.Integer getPacketId(net.minecraft.network.protocol.EnumProtocolDirection,net.minecraft.network.protocol.Packet) -> a
    M:it.unimi.dsi.fastutil.ints.Int2ObjectMap getPacketsByIds(net.minecraft.network.protocol.EnumProtocolDirection) -> a
    M:net.minecraft.network.protocol.Packet createPacket(net.minecraft.network.protocol.EnumProtocolDirection,int,net.minecraft.network.PacketDataSerializer) -> a
    M:int getId() -> a
    M:net.minecraft.network.EnumProtocol getById(int) -> a
    M:net.minecraft.network.EnumProtocol getProtocolForPacket(net.minecraft.network.protocol.Packet) -> a
net.minecraft.network.ConnectionProtocol$PacketSet -> qw$a -> net.minecraft.network.EnumProtocol$a
    F:org.slf4j.Logger LOGGER -> a
    F:it.unimi.dsi.fastutil.objects.Object2IntMap classToId -> b
    F:java.util.List idToDeserializer -> c
    M:net.minecraft.network.ConnectionProtocol$PacketSet addPacket(java.lang.Class,java.util.function.Function) -> a
    M:java.lang.Integer getId(java.lang.Class) -> a
    M:net.minecraft.network.protocol.Packet createPacket(int,net.minecraft.network.PacketDataSerializer) -> a
    M:java.lang.Iterable getAllPackets() -> a
net.minecraft.network.ConnectionProtocol$ProtocolBuilder -> qw$b -> net.minecraft.network.EnumProtocol$b
    F:java.util.Map flows -> a
    M:net.minecraft.network.ConnectionProtocol$ProtocolBuilder addFlow(net.minecraft.network.protocol.EnumProtocolDirection,net.minecraft.network.ConnectionProtocol$PacketSet) -> a
net.minecraft.network.FriendlyByteBuf -> qx -> net.minecraft.network.PacketDataSerializer
    F:int MAX_VARINT_SIZE -> c
    F:int MAX_VARLONG_SIZE -> d
    F:int DEFAULT_NBT_QUOTA -> e
    F:io.netty.buffer.ByteBuf source -> f
    F:short MAX_STRING_LENGTH -> a
    F:int MAX_COMPONENT_STRING_LENGTH -> b
    F:int PUBLIC_KEY_SIZE -> g
    F:int MAX_PUBLIC_KEY_HEADER_SIZE -> h
    F:int MAX_PUBLIC_KEY_LENGTH -> i
    M:int getVarIntSize(int) -> a
    M:int getVarLongSize(long) -> a
    M:java.lang.Object readWithCodec(com.mojang.serialization.Codec) -> a
    M:void writeWithCodec(com.mojang.serialization.Codec,java.lang.Object) -> a
    M:void writeId(net.minecraft.core.Registry,java.lang.Object) -> a
    M:java.lang.Object readById(net.minecraft.core.Registry) -> a
    M:java.util.function.IntFunction limitValue(java.util.function.IntFunction,int) -> a
    M:java.util.Collection readCollection(java.util.function.IntFunction,net.minecraft.network.FriendlyByteBuf$Reader) -> a
    M:void writeCollection(java.util.Collection,net.minecraft.network.FriendlyByteBuf$Writer) -> a
    M:java.util.List readList(net.minecraft.network.FriendlyByteBuf$Reader) -> a
    M:it.unimi.dsi.fastutil.ints.IntList readIntIdList() -> a
    M:void writeIntIdList(it.unimi.dsi.fastutil.ints.IntList) -> a
    M:java.util.Map readMap(java.util.function.IntFunction,net.minecraft.network.FriendlyByteBuf$Reader,net.minecraft.network.FriendlyByteBuf$Reader) -> a
    M:java.util.Map readMap(net.minecraft.network.FriendlyByteBuf$Reader,net.minecraft.network.FriendlyByteBuf$Reader) -> a
    M:void writeMap(java.util.Map,net.minecraft.network.FriendlyByteBuf$Writer,net.minecraft.network.FriendlyByteBuf$Writer) -> a
    M:void readWithCount(java.util.function.Consumer) -> a
    M:void writeOptional(java.util.Optional,net.minecraft.network.FriendlyByteBuf$Writer) -> a
    M:java.util.Optional readOptional(net.minecraft.network.FriendlyByteBuf$Reader) -> b
    M:java.lang.Object readNullable(net.minecraft.network.FriendlyByteBuf$Reader) -> c
    M:void writeNullable(java.lang.Object,net.minecraft.network.FriendlyByteBuf$Writer) -> a
    M:void writeEither(com.mojang.datafixers.util.Either,net.minecraft.network.FriendlyByteBuf$Writer,net.minecraft.network.FriendlyByteBuf$Writer) -> a
    M:com.mojang.datafixers.util.Either readEither(net.minecraft.network.FriendlyByteBuf$Reader,net.minecraft.network.FriendlyByteBuf$Reader) -> b
    M:net.minecraft.network.PacketDataSerializer writeByteArray(byte[]) -> a
    M:net.minecraft.network.PacketDataSerializer writeVarIntArray(int[]) -> a
    M:net.minecraft.network.PacketDataSerializer writeLongArray(long[]) -> a
    M:net.minecraft.core.BlockPosition readBlockPos() -> f
    M:net.minecraft.network.PacketDataSerializer writeBlockPos(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.ChunkCoordIntPair readChunkPos() -> g
    M:net.minecraft.network.PacketDataSerializer writeChunkPos(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:net.minecraft.core.SectionPosition readSectionPos() -> h
    M:net.minecraft.network.PacketDataSerializer writeSectionPos(net.minecraft.core.SectionPosition) -> a
    M:net.minecraft.core.GlobalPos readGlobalPos() -> i
    M:void writeGlobalPos(net.minecraft.core.GlobalPos) -> a
    M:net.minecraft.network.chat.IChatBaseComponent readComponent() -> j
    M:net.minecraft.network.PacketDataSerializer writeComponent(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:java.lang.Enum readEnum(java.lang.Class) -> a
    M:net.minecraft.network.PacketDataSerializer writeEnum(java.lang.Enum) -> a
    M:int readVarInt() -> k
    M:long readVarLong() -> l
    M:net.minecraft.network.PacketDataSerializer writeUUID(java.util.UUID) -> a
    M:java.util.UUID readUUID() -> m
    M:net.minecraft.network.PacketDataSerializer writeVarInt(int) -> d
    M:net.minecraft.network.PacketDataSerializer writeVarLong(long) -> b
    M:net.minecraft.network.PacketDataSerializer writeNbt(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagCompound readNbt() -> n
    M:net.minecraft.nbt.NBTTagCompound readAnySizeNbt() -> o
    M:net.minecraft.nbt.NBTTagCompound readNbt(net.minecraft.nbt.NBTReadLimiter) -> a
    M:net.minecraft.network.PacketDataSerializer writeItem(net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack readItem() -> p
    M:java.lang.String readUtf() -> q
    M:java.lang.String readUtf(int) -> e
    M:net.minecraft.network.PacketDataSerializer writeUtf(java.lang.String) -> a
    M:net.minecraft.network.PacketDataSerializer writeUtf(java.lang.String,int) -> a
    M:int getMaxEncodedUtfLength(int) -> f
    M:net.minecraft.resources.MinecraftKey readResourceLocation() -> r
    M:net.minecraft.network.PacketDataSerializer writeResourceLocation(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.resources.ResourceKey readResourceKey(net.minecraft.resources.ResourceKey) -> a
    M:void writeResourceKey(net.minecraft.resources.ResourceKey) -> b
    M:java.util.Date readDate() -> s
    M:net.minecraft.network.PacketDataSerializer writeDate(java.util.Date) -> a
    M:java.time.Instant readInstant() -> t
    M:void writeInstant(java.time.Instant) -> a
    M:java.security.PublicKey readPublicKey() -> u
    M:net.minecraft.network.PacketDataSerializer writePublicKey(java.security.PublicKey) -> a
    M:net.minecraft.world.phys.MovingObjectPositionBlock readBlockHitResult() -> v
    M:void writeBlockHitResult(net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:java.util.BitSet readBitSet() -> w
    M:void writeBitSet(java.util.BitSet) -> a
    M:com.mojang.authlib.GameProfile readGameProfile() -> x
    M:void writeGameProfile(com.mojang.authlib.GameProfile) -> a
    M:com.mojang.authlib.properties.Property readProperty() -> y
    M:void writeProperty(com.mojang.authlib.properties.Property) -> a
    M:int capacity() -> capacity
    M:io.netty.buffer.ByteBuf capacity(int) -> capacity
    M:io.netty.buffer.ByteBufAllocator alloc() -> alloc
    M:java.nio.ByteOrder order() -> order
    M:io.netty.buffer.ByteBuf order(java.nio.ByteOrder) -> order
    M:io.netty.buffer.ByteBuf unwrap() -> unwrap
    M:io.netty.buffer.ByteBuf clear() -> clear
    M:io.netty.buffer.ByteBuf copy() -> copy
    M:io.netty.buffer.ByteBuf copy(int,int) -> copy
    M:io.netty.buffer.ByteBuf slice() -> slice
    M:io.netty.buffer.ByteBuf slice(int,int) -> slice
    M:io.netty.buffer.ByteBuf duplicate() -> duplicate
    M:boolean equals(java.lang.Object) -> equals
    M:io.netty.buffer.ByteBuf retain(int) -> retain
    M:io.netty.buffer.ByteBuf retain() -> retain
    M:io.netty.buffer.ByteBuf touch() -> touch
    M:io.netty.buffer.ByteBuf touch(java.lang.Object) -> touch
    M:boolean release() -> release
    M:boolean release(int) -> release
    M:io.netty.util.ReferenceCounted touch(java.lang.Object) -> touch
    M:io.netty.util.ReferenceCounted touch() -> touch
    M:io.netty.util.ReferenceCounted retain(int) -> retain
    M:io.netty.util.ReferenceCounted retain() -> retain
net.minecraft.network.FriendlyByteBuf$Reader -> qx$a -> net.minecraft.network.PacketDataSerializer$a
net.minecraft.network.FriendlyByteBuf$Writer -> qx$b -> net.minecraft.network.PacketDataSerializer$b
net.minecraft.network.PacketDecoder -> qy -> net.minecraft.network.PacketDecoder
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.network.protocol.EnumProtocolDirection flow -> b
    M:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List) -> decode
net.minecraft.network.PacketEncoder -> qz -> net.minecraft.network.PacketEncoder
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.network.protocol.EnumProtocolDirection flow -> b
    M:void encode(io.netty.channel.ChannelHandlerContext,net.minecraft.network.protocol.Packet,io.netty.buffer.ByteBuf) -> a
    M:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf) -> encode
net.minecraft.network.PacketListener -> ra -> net.minecraft.network.PacketListener
    M:boolean shouldPropagateHandlingExceptions() -> b
net.minecraft.network.RateKickingConnection -> rb -> net.minecraft.network.NetworkManagerServer
    F:org.slf4j.Logger LOGGER -> i
    F:net.minecraft.network.chat.IChatBaseComponent EXCEED_REASON -> j
    F:int rateLimitPacketsPerSecond -> k
    M:void tickSecond() -> b
net.minecraft.network.SkipPacketException -> rc -> net.minecraft.network.SkipEncodeException
net.minecraft.network.Varint21FrameDecoder -> rd -> net.minecraft.network.PacketSplitter
    M:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List) -> decode
net.minecraft.network.Varint21LengthFieldPrepender -> re -> net.minecraft.network.PacketPrepender
    F:int MAX_BYTES -> a
    M:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf) -> a
    M:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf) -> encode
net.minecraft.network.chat.ChatDecoration -> rf -> net.minecraft.network.chat.ChatDecoration
    F:java.lang.String translationKey -> b
    F:java.util.List parameters -> c
    F:net.minecraft.network.chat.ChatModifier style -> d
    F:com.mojang.serialization.Codec CODEC -> a
    M:net.minecraft.network.chat.ChatDecoration withSender(java.lang.String) -> a
    M:net.minecraft.network.chat.ChatDecoration directMessage(java.lang.String) -> b
    M:net.minecraft.network.chat.ChatDecoration teamMessage(java.lang.String) -> c
    M:net.minecraft.network.chat.IChatBaseComponent decorate(net.minecraft.network.chat.IChatBaseComponent,net.minecraft.network.chat.ChatSender) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String translationKey() -> a
    M:java.util.List parameters() -> b
    M:net.minecraft.network.chat.ChatModifier style() -> c
net.minecraft.network.chat.ChatDecoration$Parameter -> rf$a -> net.minecraft.network.chat.ChatDecoration$a
    F:net.minecraft.network.chat.ChatDecoration$Parameter SENDER -> a
    F:net.minecraft.network.chat.ChatDecoration$Parameter TEAM_NAME -> b
    F:net.minecraft.network.chat.ChatDecoration$Parameter CONTENT -> c
    F:com.mojang.serialization.Codec CODEC -> d
    F:java.lang.String name -> e
    F:net.minecraft.network.chat.ChatDecoration$Parameter$Selector selector -> f
    M:net.minecraft.network.chat.IChatBaseComponent select(net.minecraft.network.chat.IChatBaseComponent,net.minecraft.network.chat.ChatSender) -> a
    M:java.lang.String getSerializedName() -> c
net.minecraft.network.chat.ChatDecoration$Parameter$Selector -> rf$a$a -> net.minecraft.network.chat.ChatDecoration$a$a
net.minecraft.network.chat.ChatDecorator -> rg -> net.minecraft.network.chat.ChatDecorator
    F:net.minecraft.network.chat.ChatDecorator PLAIN -> a
net.minecraft.network.chat.ChatPreviewThrottler -> rh -> net.minecraft.network.chat.ChatPreviewThrottler
    F:java.util.concurrent.atomic.AtomicReference scheduledRequest -> a
    F:java.util.concurrent.CompletableFuture runningRequest -> b
    M:void tick() -> a
    M:void tickIdle() -> b
    M:void schedule(net.minecraft.network.chat.ChatPreviewThrottler$Request) -> a
net.minecraft.network.chat.ChatPreviewThrottler$Request -> rh$a -> net.minecraft.network.chat.ChatPreviewThrottler$a
net.minecraft.network.chat.ChatSender -> ri -> net.minecraft.network.chat.ChatSender
    F:java.util.UUID uuid -> a
    F:net.minecraft.network.chat.IChatBaseComponent name -> b
    F:net.minecraft.network.chat.IChatBaseComponent teamName -> c
    M:net.minecraft.network.chat.ChatSender system(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.network.chat.ChatSender withTeamName(net.minecraft.network.chat.IChatBaseComponent) -> b
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.UUID uuid() -> a
    M:net.minecraft.network.chat.IChatBaseComponent name() -> b
    M:net.minecraft.network.chat.IChatBaseComponent teamName() -> c
net.minecraft.network.chat.ChatType -> rj -> net.minecraft.network.chat.ChatMessageType
    F:java.util.Optional chat -> j
    F:java.util.Optional overlay -> k
    F:java.util.Optional narration -> l
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.resources.ResourceKey CHAT -> b
    F:net.minecraft.resources.ResourceKey SYSTEM -> c
    F:net.minecraft.resources.ResourceKey GAME_INFO -> d
    F:net.minecraft.resources.ResourceKey SAY_COMMAND -> e
    F:net.minecraft.resources.ResourceKey MSG_COMMAND -> f
    F:net.minecraft.resources.ResourceKey TEAM_MSG_COMMAND -> g
    F:net.minecraft.resources.ResourceKey EMOTE_COMMAND -> h
    F:net.minecraft.resources.ResourceKey TELLRAW_COMMAND -> i
    M:net.minecraft.resources.ResourceKey create(java.lang.String) -> a
    M:net.minecraft.core.Holder bootstrap(net.minecraft.core.IRegistry) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.Optional chat() -> a
    M:java.util.Optional overlay() -> b
    M:java.util.Optional narration() -> c
net.minecraft.network.chat.ChatType$Narration -> rj$a -> net.minecraft.network.chat.ChatMessageType$a
    F:java.util.Optional decoration -> b
    F:net.minecraft.network.chat.ChatType$Narration$Priority priority -> c
    F:com.mojang.serialization.Codec CODEC -> a
    M:net.minecraft.network.chat.ChatType$Narration undecorated(net.minecraft.network.chat.ChatType$Narration$Priority) -> a
    M:net.minecraft.network.chat.ChatType$Narration decorated(net.minecraft.network.chat.ChatDecoration,net.minecraft.network.chat.ChatType$Narration$Priority) -> a
    M:net.minecraft.network.chat.IChatBaseComponent decorate(net.minecraft.network.chat.IChatBaseComponent,net.minecraft.network.chat.ChatSender) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.Optional decoration() -> a
    M:net.minecraft.network.chat.ChatType$Narration$Priority priority() -> b
net.minecraft.network.chat.ChatType$Narration$Priority -> rj$a$a -> net.minecraft.network.chat.ChatMessageType$a$a
    F:net.minecraft.network.chat.ChatType$Narration$Priority CHAT -> a
    F:net.minecraft.network.chat.ChatType$Narration$Priority SYSTEM -> b
    F:com.mojang.serialization.Codec CODEC -> c
    F:java.lang.String name -> d
    F:boolean interrupts -> e
    M:boolean interrupts() -> a
    M:java.lang.String getSerializedName() -> c
net.minecraft.network.chat.ChatType$TextDisplay -> rj$b -> net.minecraft.network.chat.ChatMessageType$b
    F:java.util.Optional decoration -> b
    F:com.mojang.serialization.Codec CODEC -> a
    M:net.minecraft.network.chat.ChatType$TextDisplay undecorated() -> a
    M:net.minecraft.network.chat.ChatType$TextDisplay decorated(net.minecraft.network.chat.ChatDecoration) -> a
    M:net.minecraft.network.chat.IChatBaseComponent decorate(net.minecraft.network.chat.IChatBaseComponent,net.minecraft.network.chat.ChatSender) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.Optional decoration() -> b
net.minecraft.network.chat.ClickEvent -> rk -> net.minecraft.network.chat.ChatClickable
    F:net.minecraft.network.chat.ChatClickable$EnumClickAction action -> a
    F:java.lang.String value -> b
    M:net.minecraft.network.chat.ChatClickable$EnumClickAction getAction() -> a
    M:java.lang.String getValue() -> b
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.network.chat.ClickEvent$Action -> rk$a -> net.minecraft.network.chat.ChatClickable$EnumClickAction
    F:net.minecraft.network.chat.ChatClickable$EnumClickAction OPEN_URL -> a
    F:net.minecraft.network.chat.ChatClickable$EnumClickAction OPEN_FILE -> b
    F:net.minecraft.network.chat.ChatClickable$EnumClickAction RUN_COMMAND -> c
    F:net.minecraft.network.chat.ChatClickable$EnumClickAction SUGGEST_COMMAND -> d
    F:net.minecraft.network.chat.ChatClickable$EnumClickAction CHANGE_PAGE -> e
    F:net.minecraft.network.chat.ChatClickable$EnumClickAction COPY_TO_CLIPBOARD -> f
    F:java.util.Map LOOKUP -> g
    F:boolean allowFromServer -> h
    F:java.lang.String name -> i
    M:boolean isAllowedFromServer() -> a
    M:java.lang.String getName() -> b
    M:net.minecraft.network.chat.ChatClickable$EnumClickAction getByName(java.lang.String) -> a
net.minecraft.network.chat.CommonComponents -> rl -> net.minecraft.network.chat.CommonComponents
    F:net.minecraft.network.chat.IChatBaseComponent EMPTY -> a
    F:net.minecraft.network.chat.IChatBaseComponent OPTION_ON -> b
    F:net.minecraft.network.chat.IChatBaseComponent OPTION_OFF -> c
    F:net.minecraft.network.chat.IChatBaseComponent GUI_DONE -> d
    F:net.minecraft.network.chat.IChatBaseComponent GUI_CANCEL -> e
    F:net.minecraft.network.chat.IChatBaseComponent GUI_YES -> f
    F:net.minecraft.network.chat.IChatBaseComponent GUI_NO -> g
    F:net.minecraft.network.chat.IChatBaseComponent GUI_PROCEED -> h
    F:net.minecraft.network.chat.IChatBaseComponent GUI_BACK -> i
    F:net.minecraft.network.chat.IChatBaseComponent CONNECT_FAILED -> j
    F:net.minecraft.network.chat.IChatBaseComponent NEW_LINE -> k
    F:net.minecraft.network.chat.IChatBaseComponent NARRATION_SEPARATOR -> l
    M:net.minecraft.network.chat.IChatBaseComponent optionStatus(boolean) -> a
    M:net.minecraft.network.chat.IChatMutableComponent optionStatus(net.minecraft.network.chat.IChatBaseComponent,boolean) -> a
    M:net.minecraft.network.chat.IChatMutableComponent optionNameValue(net.minecraft.network.chat.IChatBaseComponent,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:net.minecraft.network.chat.IChatMutableComponent joinForNarration(net.minecraft.network.chat.IChatBaseComponent,net.minecraft.network.chat.IChatBaseComponent) -> b
    M:net.minecraft.network.chat.IChatBaseComponent joinLines(net.minecraft.network.chat.Component[]) -> a
    M:net.minecraft.network.chat.IChatBaseComponent joinLines(java.util.Collection) -> a
net.minecraft.network.chat.Component -> rm -> net.minecraft.network.chat.IChatBaseComponent
    M:java.lang.String getString(int) -> a
    M:net.minecraft.network.chat.IChatMutableComponent plainCopy() -> d
    M:net.minecraft.network.chat.IChatMutableComponent copy() -> e
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$StyledContentConsumer,net.minecraft.network.chat.ChatModifier) -> a
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$ContentConsumer) -> a
    M:java.util.List toFlatList(net.minecraft.network.chat.ChatModifier) -> a
    M:net.minecraft.network.chat.IChatBaseComponent nullToEmpty(java.lang.String) -> a
    M:net.minecraft.network.chat.IChatMutableComponent literal(java.lang.String) -> b
    M:net.minecraft.network.chat.IChatMutableComponent translatable(java.lang.String) -> c
    M:net.minecraft.network.chat.IChatMutableComponent translatable(java.lang.String,java.lang.Object[]) -> a
    M:net.minecraft.network.chat.IChatMutableComponent empty() -> g
    M:net.minecraft.network.chat.IChatMutableComponent keybind(java.lang.String) -> d
    M:net.minecraft.network.chat.IChatMutableComponent nbt(java.lang.String,boolean,java.util.Optional,net.minecraft.network.chat.contents.DataSource) -> a
    M:net.minecraft.network.chat.IChatMutableComponent score(java.lang.String,java.lang.String) -> a
    M:net.minecraft.network.chat.IChatMutableComponent selector(java.lang.String,java.util.Optional) -> a
net.minecraft.network.chat.Component$Serializer -> rm$a -> net.minecraft.network.chat.IChatBaseComponent$ChatSerializer
    F:com.google.gson.Gson GSON -> a
    F:java.lang.reflect.Field JSON_READER_POS -> b
    F:java.lang.reflect.Field JSON_READER_LINESTART -> c
    M:net.minecraft.network.chat.IChatMutableComponent deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    M:java.lang.Object unwrapTextArgument(java.lang.Object) -> a
    M:java.util.Optional parseSeparator(java.lang.reflect.Type,com.google.gson.JsonDeserializationContext,com.google.gson.JsonObject) -> a
    M:void serializeStyle(net.minecraft.network.chat.ChatModifier,com.google.gson.JsonObject,com.google.gson.JsonSerializationContext) -> a
    M:com.google.gson.JsonElement serialize(net.minecraft.network.chat.IChatBaseComponent,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    M:void serializeSeparator(com.google.gson.JsonSerializationContext,com.google.gson.JsonObject,java.util.Optional) -> a
    M:java.lang.String toJson(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:java.lang.String toStableJson(net.minecraft.network.chat.IChatBaseComponent) -> b
    M:com.google.gson.JsonElement toJsonTree(net.minecraft.network.chat.IChatBaseComponent) -> c
    M:net.minecraft.network.chat.IChatMutableComponent fromJson(java.lang.String) -> a
    M:net.minecraft.network.chat.IChatMutableComponent fromJson(com.google.gson.JsonElement) -> a
    M:net.minecraft.network.chat.IChatMutableComponent fromJsonLenient(java.lang.String) -> b
    M:net.minecraft.network.chat.IChatMutableComponent fromJson(com.mojang.brigadier.StringReader) -> a
    M:int getPos(com.google.gson.stream.JsonReader) -> a
    M:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    M:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.network.chat.ComponentContents -> rn -> net.minecraft.network.chat.ComponentContents
    F:net.minecraft.network.chat.ComponentContents EMPTY -> a
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$StyledContentConsumer,net.minecraft.network.chat.ChatModifier) -> a
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$ContentConsumer) -> a
    M:net.minecraft.network.chat.IChatMutableComponent resolve(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity,int) -> a
net.minecraft.network.chat.ComponentUtils -> ro -> net.minecraft.network.chat.ChatComponentUtils
    F:java.lang.String DEFAULT_SEPARATOR_TEXT -> a
    F:net.minecraft.network.chat.IChatBaseComponent DEFAULT_SEPARATOR -> b
    F:net.minecraft.network.chat.IChatBaseComponent DEFAULT_NO_STYLE_SEPARATOR -> c
    M:net.minecraft.network.chat.IChatMutableComponent mergeStyles(net.minecraft.network.chat.IChatMutableComponent,net.minecraft.network.chat.ChatModifier) -> a
    M:java.util.Optional updateForEntity(net.minecraft.commands.CommandListenerWrapper,java.util.Optional,net.minecraft.world.entity.Entity,int) -> a
    M:net.minecraft.network.chat.IChatMutableComponent updateForEntity(net.minecraft.commands.CommandListenerWrapper,net.minecraft.network.chat.IChatBaseComponent,net.minecraft.world.entity.Entity,int) -> a
    M:net.minecraft.network.chat.ChatModifier resolveStyle(net.minecraft.commands.CommandListenerWrapper,net.minecraft.network.chat.ChatModifier,net.minecraft.world.entity.Entity,int) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName(com.mojang.authlib.GameProfile) -> a
    M:net.minecraft.network.chat.IChatBaseComponent formatList(java.util.Collection) -> a
    M:net.minecraft.network.chat.IChatBaseComponent formatAndSortList(java.util.Collection,java.util.function.Function) -> a
    M:net.minecraft.network.chat.IChatBaseComponent formatList(java.util.Collection,java.util.function.Function) -> b
    M:net.minecraft.network.chat.IChatMutableComponent formatList(java.util.Collection,java.util.Optional,java.util.function.Function) -> a
    M:net.minecraft.network.chat.IChatBaseComponent formatList(java.util.Collection,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:net.minecraft.network.chat.IChatMutableComponent formatList(java.util.Collection,net.minecraft.network.chat.IChatBaseComponent,java.util.function.Function) -> a
    M:net.minecraft.network.chat.IChatMutableComponent wrapInSquareBrackets(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:net.minecraft.network.chat.IChatBaseComponent fromMessage(com.mojang.brigadier.Message) -> a
    M:boolean isTranslationResolvable(net.minecraft.network.chat.IChatBaseComponent) -> b
net.minecraft.network.chat.FormattedText -> rp -> net.minecraft.network.chat.IChatFormatted
    F:java.util.Optional STOP_ITERATION -> a
    F:net.minecraft.network.chat.IChatFormatted EMPTY -> b
    M:net.minecraft.network.chat.IChatFormatted of(java.lang.String) -> e
    M:net.minecraft.network.chat.IChatFormatted of(java.lang.String,net.minecraft.network.chat.ChatModifier) -> a
    M:net.minecraft.network.chat.IChatFormatted composite(net.minecraft.network.chat.FormattedText[]) -> a
    M:net.minecraft.network.chat.IChatFormatted composite(java.util.List) -> a
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$ContentConsumer) -> a
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$StyledContentConsumer,net.minecraft.network.chat.ChatModifier) -> a
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$ContentConsumer) -> a
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$StyledContentConsumer,net.minecraft.network.chat.ChatModifier) -> a
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$ContentConsumer) -> a
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$StyledContentConsumer,net.minecraft.network.chat.ChatModifier) -> a
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$ContentConsumer) -> a
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$StyledContentConsumer,net.minecraft.network.chat.ChatModifier) -> a
net.minecraft.network.chat.FormattedText$ContentConsumer -> rp$a -> net.minecraft.network.chat.IChatFormatted$a
net.minecraft.network.chat.FormattedText$StyledContentConsumer -> rp$b -> net.minecraft.network.chat.IChatFormatted$b
net.minecraft.network.chat.HoverEvent -> rq -> net.minecraft.network.chat.ChatHoverable
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.network.chat.ChatHoverable$EnumHoverAction action -> b
    F:java.lang.Object value -> c
    M:net.minecraft.network.chat.ChatHoverable$EnumHoverAction getAction() -> a
    M:java.lang.Object getValue(net.minecraft.network.chat.ChatHoverable$EnumHoverAction) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.network.chat.ChatHoverable deserialize(com.google.gson.JsonObject) -> a
    M:com.google.gson.JsonObject serialize() -> b
net.minecraft.network.chat.HoverEvent$Action -> rq$a -> net.minecraft.network.chat.ChatHoverable$EnumHoverAction
    F:net.minecraft.network.chat.ChatHoverable$EnumHoverAction SHOW_TEXT -> a
    F:net.minecraft.network.chat.ChatHoverable$EnumHoverAction SHOW_ITEM -> b
    F:net.minecraft.network.chat.ChatHoverable$EnumHoverAction SHOW_ENTITY -> c
    F:java.util.Map LOOKUP -> d
    F:java.lang.String name -> e
    F:boolean allowFromServer -> f
    F:java.util.function.Function argDeserializer -> g
    F:java.util.function.Function argSerializer -> h
    F:java.util.function.Function legacyArgDeserializer -> i
    M:boolean isAllowedFromServer() -> a
    M:java.lang.String getName() -> b
    M:net.minecraft.network.chat.ChatHoverable$EnumHoverAction getByName(java.lang.String) -> a
    M:java.lang.Object cast(java.lang.Object) -> b
    M:net.minecraft.network.chat.ChatHoverable deserialize(com.google.gson.JsonElement) -> a
    M:net.minecraft.network.chat.ChatHoverable deserializeFromLegacy(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:com.google.gson.JsonElement serializeArg(java.lang.Object) -> a
net.minecraft.network.chat.HoverEvent$EntityTooltipInfo -> rq$b -> net.minecraft.network.chat.ChatHoverable$b
    F:net.minecraft.world.entity.EntityTypes type -> a
    F:java.util.UUID id -> b
    F:net.minecraft.network.chat.IChatBaseComponent name -> c
    F:java.util.List linesCache -> d
    M:net.minecraft.network.chat.HoverEvent$EntityTooltipInfo create(com.google.gson.JsonElement) -> a
    M:net.minecraft.network.chat.HoverEvent$EntityTooltipInfo create(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:com.google.gson.JsonElement serialize() -> a
    M:java.util.List getTooltipLines() -> b
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.network.chat.HoverEvent$ItemStackInfo -> rq$c -> net.minecraft.network.chat.ChatHoverable$c
    F:net.minecraft.world.item.Item item -> a
    F:int count -> b
    F:net.minecraft.nbt.NBTTagCompound tag -> c
    F:net.minecraft.world.item.ItemStack itemStack -> d
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.item.ItemStack getItemStack() -> a
    M:net.minecraft.network.chat.HoverEvent$ItemStackInfo create(com.google.gson.JsonElement) -> a
    M:net.minecraft.network.chat.HoverEvent$ItemStackInfo create(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:com.google.gson.JsonElement serialize() -> b
net.minecraft.network.chat.MessageSignature -> rr -> net.minecraft.network.chat.MessageSignature
    F:java.util.UUID sender -> a
    F:java.time.Instant timeStamp -> b
    F:net.minecraft.util.Crypt$SaltSignaturePair saltSignature -> c
    M:net.minecraft.network.chat.MessageSignature unsigned() -> a
    M:boolean verify(net.minecraft.util.SignatureValidator,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:boolean verify(net.minecraft.util.SignatureValidator,java.lang.String) -> a
    M:void updateSignature(net.minecraft.util.SignatureUpdater$Output,net.minecraft.network.chat.IChatBaseComponent,java.util.UUID,java.time.Instant,long) -> a
    M:boolean isValid() -> b
    M:boolean isValid(java.util.UUID) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.UUID sender() -> c
    M:java.time.Instant timeStamp() -> d
    M:net.minecraft.util.Crypt$SaltSignaturePair saltSignature() -> e
net.minecraft.network.chat.MessageSigner -> rs -> net.minecraft.network.chat.MessageSigner
    F:java.util.UUID sender -> a
    F:java.time.Instant timeStamp -> b
    F:long salt -> c
    M:net.minecraft.network.chat.MessageSigner create(java.util.UUID) -> a
    M:net.minecraft.network.chat.MessageSignature sign(net.minecraft.util.Signer,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:net.minecraft.network.chat.MessageSignature sign(net.minecraft.util.Signer,java.lang.String) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.UUID sender() -> a
    M:java.time.Instant timeStamp() -> b
    M:long salt() -> c
net.minecraft.network.chat.MutableComponent -> rt -> net.minecraft.network.chat.IChatMutableComponent
    F:net.minecraft.network.chat.ComponentContents contents -> c
    F:java.util.List siblings -> d
    F:net.minecraft.network.chat.ChatModifier style -> e
    F:net.minecraft.util.FormattedString visualOrderText -> f
    F:net.minecraft.locale.LocaleLanguage decomposedWith -> g
    M:net.minecraft.network.chat.IChatMutableComponent create(net.minecraft.network.chat.ComponentContents) -> a
    M:net.minecraft.network.chat.ComponentContents getContents() -> b
    M:java.util.List getSiblings() -> c
    M:net.minecraft.network.chat.IChatMutableComponent setStyle(net.minecraft.network.chat.ChatModifier) -> b
    M:net.minecraft.network.chat.ChatModifier getStyle() -> a
    M:net.minecraft.network.chat.IChatMutableComponent append(java.lang.String) -> f
    M:net.minecraft.network.chat.IChatMutableComponent append(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:net.minecraft.network.chat.IChatMutableComponent withStyle(java.util.function.UnaryOperator) -> a
    M:net.minecraft.network.chat.IChatMutableComponent withStyle(net.minecraft.network.chat.ChatModifier) -> c
    M:net.minecraft.network.chat.IChatMutableComponent withStyle(net.minecraft.ChatFormatting[]) -> a
    M:net.minecraft.network.chat.IChatMutableComponent withStyle(net.minecraft.EnumChatFormat) -> a
    M:net.minecraft.util.FormattedString getVisualOrderText() -> f
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.network.chat.PlayerChatMessage -> ru -> net.minecraft.network.chat.PlayerChatMessage
    F:net.minecraft.network.chat.IChatBaseComponent signedContent -> a
    F:net.minecraft.network.chat.MessageSignature signature -> b
    F:java.util.Optional unsignedContent -> c
    M:net.minecraft.network.chat.PlayerChatMessage signed(net.minecraft.network.chat.IChatBaseComponent,net.minecraft.network.chat.MessageSignature) -> a
    M:net.minecraft.network.chat.PlayerChatMessage signed(java.lang.String,net.minecraft.network.chat.MessageSignature) -> a
    M:net.minecraft.network.chat.PlayerChatMessage signed(net.minecraft.network.chat.IChatBaseComponent,net.minecraft.network.chat.IChatBaseComponent,net.minecraft.network.chat.MessageSignature,boolean) -> a
    M:net.minecraft.server.network.FilteredText filteredSigned(net.minecraft.server.network.FilteredText,net.minecraft.server.network.FilteredText,net.minecraft.network.chat.MessageSignature,boolean) -> a
    M:net.minecraft.network.chat.PlayerChatMessage unsigned(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:net.minecraft.network.chat.PlayerChatMessage withUnsignedContent(net.minecraft.network.chat.IChatBaseComponent) -> b
    M:boolean verify(net.minecraft.world.entity.player.ProfilePublicKey) -> a
    M:boolean verify(net.minecraft.server.level.EntityPlayer) -> a
    M:boolean verify(net.minecraft.commands.CommandListenerWrapper) -> a
    M:net.minecraft.network.chat.IChatBaseComponent serverContent() -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.network.chat.IChatBaseComponent signedContent() -> b
    M:net.minecraft.network.chat.MessageSignature signature() -> c
    M:java.util.Optional unsignedContent() -> d
net.minecraft.network.chat.Style -> rv -> net.minecraft.network.chat.ChatModifier
    F:net.minecraft.network.chat.ChatModifier EMPTY -> a
    F:com.mojang.serialization.Codec FORMATTING_CODEC -> b
    F:net.minecraft.resources.MinecraftKey DEFAULT_FONT -> c
    F:net.minecraft.network.chat.ChatHexColor color -> d
    F:java.lang.Boolean bold -> e
    F:java.lang.Boolean italic -> f
    F:java.lang.Boolean underlined -> g
    F:java.lang.Boolean strikethrough -> h
    F:java.lang.Boolean obfuscated -> i
    F:net.minecraft.network.chat.ChatClickable clickEvent -> j
    F:net.minecraft.network.chat.ChatHoverable hoverEvent -> k
    F:java.lang.String insertion -> l
    F:net.minecraft.resources.MinecraftKey font -> m
    M:net.minecraft.network.chat.ChatModifier create(java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional) -> a
    M:net.minecraft.network.chat.ChatHexColor getColor() -> a
    M:boolean isBold() -> b
    M:boolean isItalic() -> c
    M:boolean isStrikethrough() -> d
    M:boolean isUnderlined() -> e
    M:boolean isObfuscated() -> f
    M:boolean isEmpty() -> g
    M:net.minecraft.network.chat.ChatClickable getClickEvent() -> h
    M:net.minecraft.network.chat.ChatHoverable getHoverEvent() -> i
    M:java.lang.String getInsertion() -> j
    M:net.minecraft.resources.MinecraftKey getFont() -> k
    M:net.minecraft.network.chat.ChatModifier withColor(net.minecraft.network.chat.ChatHexColor) -> a
    M:net.minecraft.network.chat.ChatModifier withColor(net.minecraft.EnumChatFormat) -> a
    M:net.minecraft.network.chat.ChatModifier withColor(int) -> a
    M:net.minecraft.network.chat.ChatModifier withBold(java.lang.Boolean) -> a
    M:net.minecraft.network.chat.ChatModifier withItalic(java.lang.Boolean) -> b
    M:net.minecraft.network.chat.ChatModifier withUnderlined(java.lang.Boolean) -> c
    M:net.minecraft.network.chat.ChatModifier withStrikethrough(java.lang.Boolean) -> d
    M:net.minecraft.network.chat.ChatModifier withObfuscated(java.lang.Boolean) -> e
    M:net.minecraft.network.chat.ChatModifier withClickEvent(net.minecraft.network.chat.ChatClickable) -> a
    M:net.minecraft.network.chat.ChatModifier withHoverEvent(net.minecraft.network.chat.ChatHoverable) -> a
    M:net.minecraft.network.chat.ChatModifier withInsertion(java.lang.String) -> a
    M:net.minecraft.network.chat.ChatModifier withFont(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.network.chat.ChatModifier applyFormat(net.minecraft.EnumChatFormat) -> b
    M:net.minecraft.network.chat.ChatModifier applyLegacyFormat(net.minecraft.EnumChatFormat) -> c
    M:net.minecraft.network.chat.ChatModifier applyFormats(net.minecraft.ChatFormatting[]) -> a
    M:net.minecraft.network.chat.ChatModifier applyTo(net.minecraft.network.chat.ChatModifier) -> a
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.network.chat.Style$1Collector -> rv$a -> net.minecraft.network.chat.ChatModifier$a
    F:boolean isNotFirst -> c
    M:void prependSeparator() -> a
    M:void addFlagString(java.lang.String,java.lang.Boolean) -> a
    M:void addValueString(java.lang.String,java.lang.Object) -> a
net.minecraft.network.chat.Style$Serializer -> rv$b -> net.minecraft.network.chat.ChatModifier$ChatModifierSerializer
    M:net.minecraft.network.chat.ChatModifier deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    M:net.minecraft.resources.MinecraftKey getFont(com.google.gson.JsonObject) -> a
    M:net.minecraft.network.chat.ChatHoverable getHoverEvent(com.google.gson.JsonObject) -> b
    M:net.minecraft.network.chat.ChatClickable getClickEvent(com.google.gson.JsonObject) -> c
    M:java.lang.String getInsertion(com.google.gson.JsonObject) -> d
    M:net.minecraft.network.chat.ChatHexColor getTextColor(com.google.gson.JsonObject) -> e
    M:java.lang.Boolean getOptionalFlag(com.google.gson.JsonObject,java.lang.String) -> a
    M:com.google.gson.JsonElement serialize(net.minecraft.network.chat.ChatModifier,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    M:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    M:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.network.chat.SubStringSource -> rw -> net.minecraft.network.chat.SubStringSource
    F:java.lang.String plainText -> a
    F:java.util.List charStyles -> b
    F:it.unimi.dsi.fastutil.ints.Int2IntFunction reverseCharModifier -> c
    M:java.lang.String getPlainText() -> a
    M:java.util.List substring(int,int,boolean) -> a
    M:net.minecraft.network.chat.SubStringSource create(net.minecraft.network.chat.IChatFormatted) -> a
    M:net.minecraft.network.chat.SubStringSource create(net.minecraft.network.chat.IChatFormatted,it.unimi.dsi.fastutil.ints.Int2IntFunction,java.util.function.UnaryOperator) -> a
net.minecraft.network.chat.TextColor -> rx -> net.minecraft.network.chat.ChatHexColor
    F:java.lang.String CUSTOM_COLOR_PREFIX -> b
    F:com.mojang.serialization.Codec CODEC -> a
    F:java.util.Map LEGACY_FORMAT_TO_COLOR -> c
    F:java.util.Map NAMED_COLORS -> d
    F:int value -> e
    F:java.lang.String name -> f
    M:int getValue() -> a
    M:java.lang.String serialize() -> b
    M:java.lang.String formatValue() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.network.chat.ChatHexColor fromLegacyFormat(net.minecraft.EnumChatFormat) -> a
    M:net.minecraft.network.chat.ChatHexColor fromRgb(int) -> a
    M:net.minecraft.network.chat.ChatHexColor parseColor(java.lang.String) -> a
net.minecraft.network.chat.ThrowingComponent -> ry -> net.minecraft.network.chat.ThrowingComponent
    F:net.minecraft.network.chat.IChatBaseComponent component -> a
    M:net.minecraft.network.chat.IChatBaseComponent getComponent() -> a
net.minecraft.network.chat.contents.BlockDataSource -> rz -> net.minecraft.network.chat.contents.BlockDataSource
    F:java.lang.String posPattern -> a
    F:net.minecraft.commands.arguments.coordinates.IVectorPosition compiledPos -> b
    M:net.minecraft.commands.arguments.coordinates.IVectorPosition compilePos(java.lang.String) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String posPattern() -> a
    M:net.minecraft.commands.arguments.coordinates.IVectorPosition compiledPos() -> b
net.minecraft.network.chat.contents.DataSource -> sa -> net.minecraft.network.chat.contents.DataSource
net.minecraft.network.chat.contents.EntityDataSource -> sb -> net.minecraft.network.chat.contents.EntityDataSource
    F:java.lang.String selectorPattern -> a
    F:net.minecraft.commands.arguments.selector.EntitySelector compiledSelector -> b
    M:net.minecraft.commands.arguments.selector.EntitySelector compileSelector(java.lang.String) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String selectorPattern() -> a
    M:net.minecraft.commands.arguments.selector.EntitySelector compiledSelector() -> b
net.minecraft.network.chat.contents.KeybindContents -> sc -> net.minecraft.network.chat.contents.KeybindContents
    F:java.lang.String name -> b
    F:java.util.function.Supplier nameResolver -> c
    M:net.minecraft.network.chat.IChatBaseComponent getNestedComponent() -> b
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$ContentConsumer) -> a
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$StyledContentConsumer,net.minecraft.network.chat.ChatModifier) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String getName() -> a
net.minecraft.network.chat.contents.KeybindResolver -> sd -> net.minecraft.network.chat.contents.KeybindResolver
    F:java.util.function.Function keyResolver -> a
    M:void setKeyResolver(java.util.function.Function) -> a
net.minecraft.network.chat.contents.LiteralContents -> se -> net.minecraft.network.chat.contents.LiteralContents
    F:java.lang.String text -> b
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$ContentConsumer) -> a
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$StyledContentConsumer,net.minecraft.network.chat.ChatModifier) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String text() -> a
net.minecraft.network.chat.contents.NbtContents -> sf -> net.minecraft.network.chat.contents.NbtContents
    F:org.slf4j.Logger LOGGER -> c
    F:boolean interpreting -> d
    F:java.util.Optional separator -> e
    F:java.lang.String nbtPathPattern -> f
    F:net.minecraft.network.chat.contents.DataSource dataSource -> g
    F:net.minecraft.commands.arguments.NbtPathArgument$NbtPath compiledNbtPath -> b
    M:net.minecraft.commands.arguments.NbtPathArgument$NbtPath compileNbtPath(java.lang.String) -> a
    M:java.lang.String getNbtPath() -> a
    M:boolean isInterpreting() -> b
    M:java.util.Optional getSeparator() -> c
    M:net.minecraft.network.chat.contents.DataSource getDataSource() -> d
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.network.chat.IChatMutableComponent resolve(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity,int) -> a
net.minecraft.network.chat.contents.ScoreContents -> sg -> net.minecraft.network.chat.contents.ScoreContents
    F:java.lang.String SCORER_PLACEHOLDER -> b
    F:java.lang.String name -> c
    F:net.minecraft.commands.arguments.selector.EntitySelector selector -> d
    F:java.lang.String objective -> e
    M:net.minecraft.commands.arguments.selector.EntitySelector parseSelector(java.lang.String) -> a
    M:java.lang.String getName() -> a
    M:net.minecraft.commands.arguments.selector.EntitySelector getSelector() -> b
    M:java.lang.String getObjective() -> c
    M:java.lang.String findTargetName(net.minecraft.commands.CommandListenerWrapper) -> a
    M:java.lang.String getScore(java.lang.String,net.minecraft.commands.CommandListenerWrapper) -> a
    M:net.minecraft.network.chat.IChatMutableComponent resolve(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity,int) -> a
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.network.chat.contents.SelectorContents -> sh -> net.minecraft.network.chat.contents.SelectorContents
    F:org.slf4j.Logger LOGGER -> c
    F:java.lang.String pattern -> d
    F:net.minecraft.commands.arguments.selector.EntitySelector selector -> e
    F:java.util.Optional separator -> b
    M:net.minecraft.commands.arguments.selector.EntitySelector parseSelector(java.lang.String) -> a
    M:java.lang.String getPattern() -> a
    M:net.minecraft.commands.arguments.selector.EntitySelector getSelector() -> b
    M:java.util.Optional getSeparator() -> c
    M:net.minecraft.network.chat.IChatMutableComponent resolve(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity,int) -> a
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$StyledContentConsumer,net.minecraft.network.chat.ChatModifier) -> a
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$ContentConsumer) -> a
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.network.chat.contents.StorageDataSource -> si -> net.minecraft.network.chat.contents.StorageDataSource
    F:net.minecraft.resources.MinecraftKey id -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.resources.MinecraftKey id() -> a
net.minecraft.network.chat.contents.TranslatableContents -> sj -> net.minecraft.network.chat.contents.TranslatableContents
    F:net.minecraft.network.chat.IChatFormatted TEXT_PERCENT -> c
    F:net.minecraft.network.chat.IChatFormatted TEXT_NULL -> d
    F:java.lang.String key -> e
    F:net.minecraft.locale.LocaleLanguage decomposedWith -> g
    F:java.util.List decomposedParts -> h
    F:java.util.regex.Pattern FORMAT_PATTERN -> i
    M:void decompose() -> c
    M:void decomposeTemplate(java.lang.String,java.util.function.Consumer) -> a
    M:net.minecraft.network.chat.IChatFormatted getArgument(int) -> a
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$StyledContentConsumer,net.minecraft.network.chat.ChatModifier) -> a
    M:java.util.Optional visit(net.minecraft.network.chat.FormattedText$ContentConsumer) -> a
    M:net.minecraft.network.chat.IChatMutableComponent resolve(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity,int) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String getKey() -> a
net.minecraft.network.chat.contents.TranslatableFormatException -> sk -> net.minecraft.network.chat.contents.TranslatableFormatException
net.minecraft.network.protocol.Packet -> so -> net.minecraft.network.protocol.Packet
    M:boolean isSkippable() -> a
net.minecraft.network.protocol.PacketFlow -> sp -> net.minecraft.network.protocol.EnumProtocolDirection
    F:net.minecraft.network.protocol.EnumProtocolDirection SERVERBOUND -> a
    F:net.minecraft.network.protocol.EnumProtocolDirection CLIENTBOUND -> b
    M:net.minecraft.network.protocol.EnumProtocolDirection getOpposite() -> a
net.minecraft.network.protocol.PacketUtils -> sq -> net.minecraft.network.protocol.PlayerConnectionUtils
    F:org.slf4j.Logger LOGGER -> a
    M:void ensureRunningOnSameThread(net.minecraft.network.protocol.Packet,net.minecraft.network.PacketListener,net.minecraft.server.level.WorldServer) -> a
    M:void ensureRunningOnSameThread(net.minecraft.network.protocol.Packet,net.minecraft.network.PacketListener,net.minecraft.util.thread.IAsyncTaskHandler) -> a
net.minecraft.network.protocol.game.ClientGamePacketListener -> sr -> net.minecraft.network.protocol.game.PacketListenerPlayOut
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> ss -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity
    F:double MAGICAL_QUANTIZATION -> a
    F:double LIMIT -> b
    F:int id -> c
    F:java.util.UUID uuid -> d
    F:net.minecraft.world.entity.EntityTypes type -> e
    F:double x -> f
    F:double y -> g
    F:double z -> h
    F:int xa -> i
    F:int ya -> j
    F:int za -> k
    F:byte xRot -> l
    F:byte yRot -> m
    F:byte yHeadRot -> n
    F:int data -> o
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getId() -> b
    M:java.util.UUID getUUID() -> c
    M:net.minecraft.world.entity.EntityTypes getType() -> d
    M:double getX() -> e
    M:double getY() -> f
    M:double getZ() -> g
    M:double getXa() -> h
    M:double getYa() -> i
    M:double getZa() -> j
    M:float getXRot() -> k
    M:float getYRot() -> l
    M:float getYHeadRot() -> m
    M:int getData() -> n
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundAddExperienceOrbPacket -> st -> net.minecraft.network.protocol.game.PacketPlayOutSpawnEntityExperienceOrb
    F:int id -> a
    F:double x -> b
    F:double y -> c
    F:double z -> d
    F:int value -> e
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getId() -> b
    M:double getX() -> c
    M:double getY() -> d
    M:double getZ() -> e
    M:int getValue() -> f
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundAddPlayerPacket -> su -> net.minecraft.network.protocol.game.PacketPlayOutNamedEntitySpawn
    F:int entityId -> a
    F:java.util.UUID playerId -> b
    F:double x -> c
    F:double y -> d
    F:double z -> e
    F:byte yRot -> f
    F:byte xRot -> g
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getEntityId() -> b
    M:java.util.UUID getPlayerId() -> c
    M:double getX() -> d
    M:double getY() -> e
    M:double getZ() -> f
    M:byte getyRot() -> g
    M:byte getxRot() -> h
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundAnimatePacket -> sv -> net.minecraft.network.protocol.game.PacketPlayOutAnimation
    F:int SWING_MAIN_HAND -> a
    F:int HURT -> b
    F:int WAKE_UP -> c
    F:int SWING_OFF_HAND -> d
    F:int CRITICAL_HIT -> e
    F:int MAGIC_CRITICAL_HIT -> f
    F:int id -> g
    F:int action -> h
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getId() -> b
    M:int getAction() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundAwardStatsPacket -> sw -> net.minecraft.network.protocol.game.PacketPlayOutStatistic
    F:it.unimi.dsi.fastutil.objects.Object2IntMap stats -> a
    M:net.minecraft.stats.Statistic readStatCap(net.minecraft.network.PacketDataSerializer,net.minecraft.stats.StatisticWrapper) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void writeStatCap(net.minecraft.network.PacketDataSerializer,net.minecraft.stats.Statistic) -> a
    M:java.util.Map getStats() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundBlockChangedAckPacket -> sx -> net.minecraft.network.protocol.game.ClientboundBlockChangedAckPacket
    F:int sequence -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int sequence() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket -> sy -> net.minecraft.network.protocol.game.PacketPlayOutBlockBreakAnimation
    F:int id -> a
    F:net.minecraft.core.BlockPosition pos -> b
    F:int progress -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getId() -> b
    M:net.minecraft.core.BlockPosition getPos() -> c
    M:int getProgress() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket -> sz -> net.minecraft.network.protocol.game.PacketPlayOutTileEntityData
    F:net.minecraft.core.BlockPosition pos -> a
    F:net.minecraft.world.level.block.entity.TileEntityTypes type -> b
    F:net.minecraft.nbt.NBTTagCompound tag -> c
    M:net.minecraft.network.protocol.game.PacketPlayOutTileEntityData create(net.minecraft.world.level.block.entity.TileEntity,java.util.function.Function) -> a
    M:net.minecraft.network.protocol.game.PacketPlayOutTileEntityData create(net.minecraft.world.level.block.entity.TileEntity) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.core.BlockPosition getPos() -> b
    M:net.minecraft.world.level.block.entity.TileEntityTypes getType() -> c
    M:net.minecraft.nbt.NBTTagCompound getTag() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundBlockEventPacket -> ta -> net.minecraft.network.protocol.game.PacketPlayOutBlockAction
    F:net.minecraft.core.BlockPosition pos -> a
    F:int b0 -> b
    F:int b1 -> c
    F:net.minecraft.world.level.block.Block block -> d
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.core.BlockPosition getPos() -> b
    M:int getB0() -> c
    M:int getB1() -> d
    M:net.minecraft.world.level.block.Block getBlock() -> e
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket -> tb -> net.minecraft.network.protocol.game.PacketPlayOutBlockChange
    F:net.minecraft.core.BlockPosition pos -> a
    F:net.minecraft.world.level.block.state.IBlockData blockState -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.world.level.block.state.IBlockData getBlockState() -> b
    M:net.minecraft.core.BlockPosition getPos() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundBossEventPacket -> tc -> net.minecraft.network.protocol.game.PacketPlayOutBoss
    F:int FLAG_DARKEN -> a
    F:int FLAG_MUSIC -> b
    F:int FLAG_FOG -> c
    F:java.util.UUID id -> d
    F:net.minecraft.network.protocol.game.PacketPlayOutBoss$Action operation -> e
    F:net.minecraft.network.protocol.game.PacketPlayOutBoss$Action REMOVE_OPERATION -> f
    M:net.minecraft.network.protocol.game.PacketPlayOutBoss createAddPacket(net.minecraft.world.BossBattle) -> a
    M:net.minecraft.network.protocol.game.PacketPlayOutBoss createRemovePacket(java.util.UUID) -> a
    M:net.minecraft.network.protocol.game.PacketPlayOutBoss createUpdateProgressPacket(net.minecraft.world.BossBattle) -> b
    M:net.minecraft.network.protocol.game.PacketPlayOutBoss createUpdateNamePacket(net.minecraft.world.BossBattle) -> c
    M:net.minecraft.network.protocol.game.PacketPlayOutBoss createUpdateStylePacket(net.minecraft.world.BossBattle) -> d
    M:net.minecraft.network.protocol.game.PacketPlayOutBoss createUpdatePropertiesPacket(net.minecraft.world.BossBattle) -> e
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:int encodeProperties(boolean,boolean,boolean) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:void dispatch(net.minecraft.network.protocol.game.ClientboundBossEventPacket$Handler) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
    M:net.minecraft.network.protocol.game.ClientboundBossEventPacket$OperationType getType() -> a
    M:void dispatch(java.util.UUID,net.minecraft.network.protocol.game.ClientboundBossEventPacket$Handler) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.network.protocol.game.ClientboundBossEventPacket$AddOperation -> tc$a -> net.minecraft.network.protocol.game.PacketPlayOutBoss$a
    F:net.minecraft.network.chat.IChatBaseComponent name -> a
    F:float progress -> b
    F:net.minecraft.world.BossBattle$BarColor color -> c
    F:net.minecraft.world.BossBattle$BarStyle overlay -> d
    F:boolean darkenScreen -> e
    F:boolean playMusic -> f
    F:boolean createWorldFog -> g
    M:net.minecraft.network.protocol.game.ClientboundBossEventPacket$OperationType getType() -> a
    M:void dispatch(java.util.UUID,net.minecraft.network.protocol.game.ClientboundBossEventPacket$Handler) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.network.protocol.game.ClientboundBossEventPacket$Handler -> tc$b -> net.minecraft.network.protocol.game.PacketPlayOutBoss$b
    M:void add(java.util.UUID,net.minecraft.network.chat.IChatBaseComponent,float,net.minecraft.world.BossBattle$BarColor,net.minecraft.world.BossBattle$BarStyle,boolean,boolean,boolean) -> a
    M:void remove(java.util.UUID) -> a
    M:void updateProgress(java.util.UUID,float) -> a
    M:void updateName(java.util.UUID,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void updateStyle(java.util.UUID,net.minecraft.world.BossBattle$BarColor,net.minecraft.world.BossBattle$BarStyle) -> a
    M:void updateProperties(java.util.UUID,boolean,boolean,boolean) -> a
net.minecraft.network.protocol.game.ClientboundBossEventPacket$Operation -> tc$c -> net.minecraft.network.protocol.game.PacketPlayOutBoss$Action
net.minecraft.network.protocol.game.ClientboundBossEventPacket$OperationType -> tc$d -> net.minecraft.network.protocol.game.PacketPlayOutBoss$d
    F:net.minecraft.network.protocol.game.ClientboundBossEventPacket$OperationType ADD -> a
    F:net.minecraft.network.protocol.game.ClientboundBossEventPacket$OperationType REMOVE -> b
    F:net.minecraft.network.protocol.game.ClientboundBossEventPacket$OperationType UPDATE_PROGRESS -> c
    F:net.minecraft.network.protocol.game.ClientboundBossEventPacket$OperationType UPDATE_NAME -> d
    F:net.minecraft.network.protocol.game.ClientboundBossEventPacket$OperationType UPDATE_STYLE -> e
    F:net.minecraft.network.protocol.game.ClientboundBossEventPacket$OperationType UPDATE_PROPERTIES -> f
    F:java.util.function.Function reader -> g
net.minecraft.network.protocol.game.ClientboundBossEventPacket$UpdateNameOperation -> tc$e -> net.minecraft.network.protocol.game.PacketPlayOutBoss$e
    F:net.minecraft.network.chat.IChatBaseComponent name -> a
    M:net.minecraft.network.protocol.game.ClientboundBossEventPacket$OperationType getType() -> a
    M:void dispatch(java.util.UUID,net.minecraft.network.protocol.game.ClientboundBossEventPacket$Handler) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.network.protocol.game.ClientboundBossEventPacket$UpdateProgressOperation -> tc$f -> net.minecraft.network.protocol.game.PacketPlayOutBoss$f
    F:float progress -> a
    M:net.minecraft.network.protocol.game.ClientboundBossEventPacket$OperationType getType() -> a
    M:void dispatch(java.util.UUID,net.minecraft.network.protocol.game.ClientboundBossEventPacket$Handler) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.network.protocol.game.ClientboundBossEventPacket$UpdatePropertiesOperation -> tc$g -> net.minecraft.network.protocol.game.PacketPlayOutBoss$g
    F:boolean darkenScreen -> a
    F:boolean playMusic -> b
    F:boolean createWorldFog -> c
    M:net.minecraft.network.protocol.game.ClientboundBossEventPacket$OperationType getType() -> a
    M:void dispatch(java.util.UUID,net.minecraft.network.protocol.game.ClientboundBossEventPacket$Handler) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.network.protocol.game.ClientboundBossEventPacket$UpdateStyleOperation -> tc$h -> net.minecraft.network.protocol.game.PacketPlayOutBoss$h
    F:net.minecraft.world.BossBattle$BarColor color -> a
    F:net.minecraft.world.BossBattle$BarStyle overlay -> b
    M:net.minecraft.network.protocol.game.ClientboundBossEventPacket$OperationType getType() -> a
    M:void dispatch(java.util.UUID,net.minecraft.network.protocol.game.ClientboundBossEventPacket$Handler) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.network.protocol.game.ClientboundChangeDifficultyPacket -> td -> net.minecraft.network.protocol.game.PacketPlayOutServerDifficulty
    F:net.minecraft.world.EnumDifficulty difficulty -> a
    F:boolean locked -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:boolean isLocked() -> b
    M:net.minecraft.world.EnumDifficulty getDifficulty() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundChatPreviewPacket -> te -> net.minecraft.network.protocol.game.ClientboundChatPreviewPacket
    F:int queryId -> a
    F:net.minecraft.network.chat.IChatBaseComponent preview -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:boolean isSkippable() -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int queryId() -> b
    M:net.minecraft.network.chat.IChatBaseComponent preview() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundClearTitlesPacket -> tf -> net.minecraft.network.protocol.game.ClientboundClearTitlesPacket
    F:boolean resetTimes -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:boolean shouldResetTimes() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundCommandSuggestionsPacket -> tg -> net.minecraft.network.protocol.game.PacketPlayOutTabComplete
    F:int id -> a
    F:com.mojang.brigadier.suggestion.Suggestions suggestions -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getId() -> b
    M:com.mojang.brigadier.suggestion.Suggestions getSuggestions() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundCommandsPacket -> th -> net.minecraft.network.protocol.game.PacketPlayOutCommands
    F:byte MASK_TYPE -> a
    F:byte FLAG_EXECUTABLE -> b
    F:byte FLAG_REDIRECT -> c
    F:byte FLAG_CUSTOM_SUGGESTIONS -> d
    F:byte TYPE_ROOT -> e
    F:byte TYPE_LITERAL -> f
    F:byte TYPE_ARGUMENT -> g
    F:int rootIndex -> h
    F:java.util.List entries -> i
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void validateEntries(java.util.List,java.util.function.BiPredicate) -> a
    M:void validateEntries(java.util.List) -> a
    M:it.unimi.dsi.fastutil.objects.Object2IntMap enumerateNodes(com.mojang.brigadier.tree.RootCommandNode) -> a
    M:java.util.List createEntries(it.unimi.dsi.fastutil.objects.Object2IntMap) -> a
    M:net.minecraft.network.protocol.game.ClientboundCommandsPacket$Entry readNode(net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.network.protocol.game.ClientboundCommandsPacket$NodeStub read(net.minecraft.network.PacketDataSerializer,byte) -> a
    M:net.minecraft.network.protocol.game.ClientboundCommandsPacket$Entry createEntry(com.mojang.brigadier.tree.CommandNode,it.unimi.dsi.fastutil.objects.Object2IntMap) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:com.mojang.brigadier.tree.RootCommandNode getRoot(net.minecraft.commands.CommandBuildContext) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundCommandsPacket$ArgumentNodeStub -> th$a -> net.minecraft.network.protocol.game.PacketPlayOutCommands$a
    F:java.lang.String id -> a
    F:net.minecraft.commands.synchronization.ArgumentTypeInfo$Template argumentType -> b
    F:net.minecraft.resources.MinecraftKey suggestionId -> c
    M:net.minecraft.resources.MinecraftKey getSuggestionId(com.mojang.brigadier.suggestion.SuggestionProvider) -> a
    M:com.mojang.brigadier.builder.ArgumentBuilder build(net.minecraft.commands.CommandBuildContext) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void serializeCap(net.minecraft.network.PacketDataSerializer,net.minecraft.commands.synchronization.ArgumentTypeInfo$Template) -> a
    M:void serializeCap(net.minecraft.network.PacketDataSerializer,net.minecraft.commands.synchronization.ArgumentTypeInfo,net.minecraft.commands.synchronization.ArgumentTypeInfo$Template) -> a
net.minecraft.network.protocol.game.ClientboundCommandsPacket$Entry -> th$b -> net.minecraft.network.protocol.game.PacketPlayOutCommands$b
    F:net.minecraft.network.protocol.game.ClientboundCommandsPacket$NodeStub stub -> a
    F:int flags -> b
    F:int redirect -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:boolean canBuild(it.unimi.dsi.fastutil.ints.IntSet) -> a
    M:boolean canResolve(it.unimi.dsi.fastutil.ints.IntSet) -> b
net.minecraft.network.protocol.game.ClientboundCommandsPacket$LiteralNodeStub -> th$c -> net.minecraft.network.protocol.game.PacketPlayOutCommands$c
    F:java.lang.String id -> a
    M:com.mojang.brigadier.builder.ArgumentBuilder build(net.minecraft.commands.CommandBuildContext) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.network.protocol.game.ClientboundCommandsPacket$NodeResolver -> th$d -> net.minecraft.network.protocol.game.PacketPlayOutCommands$d
    F:net.minecraft.commands.CommandBuildContext context -> a
    F:java.util.List entries -> b
    F:java.util.List nodes -> c
    M:com.mojang.brigadier.tree.CommandNode resolve(int) -> a
net.minecraft.network.protocol.game.ClientboundCommandsPacket$NodeStub -> th$e -> net.minecraft.network.protocol.game.PacketPlayOutCommands$e
net.minecraft.network.protocol.game.ClientboundContainerClosePacket -> ti -> net.minecraft.network.protocol.game.PacketPlayOutCloseWindow
    F:int containerId -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getContainerId() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundContainerSetContentPacket -> tj -> net.minecraft.network.protocol.game.PacketPlayOutWindowItems
    F:int containerId -> a
    F:int stateId -> b
    F:java.util.List items -> c
    F:net.minecraft.world.item.ItemStack carriedItem -> d
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getContainerId() -> b
    M:java.util.List getItems() -> c
    M:net.minecraft.world.item.ItemStack getCarriedItem() -> d
    M:int getStateId() -> e
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundContainerSetDataPacket -> tk -> net.minecraft.network.protocol.game.PacketPlayOutWindowData
    F:int containerId -> a
    F:int id -> b
    F:int value -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getContainerId() -> b
    M:int getId() -> c
    M:int getValue() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket -> tl -> net.minecraft.network.protocol.game.PacketPlayOutSetSlot
    F:int CARRIED_ITEM -> a
    F:int PLAYER_INVENTORY -> b
    F:int containerId -> c
    F:int stateId -> d
    F:int slot -> e
    F:net.minecraft.world.item.ItemStack itemStack -> f
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getContainerId() -> b
    M:int getSlot() -> c
    M:net.minecraft.world.item.ItemStack getItem() -> d
    M:int getStateId() -> e
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundCooldownPacket -> tm -> net.minecraft.network.protocol.game.PacketPlayOutSetCooldown
    F:net.minecraft.world.item.Item item -> a
    F:int duration -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.world.item.Item getItem() -> b
    M:int getDuration() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket -> tn -> net.minecraft.network.protocol.game.PacketPlayOutCustomPayload
    F:int MAX_PAYLOAD_SIZE -> s
    F:net.minecraft.resources.MinecraftKey BRAND -> a
    F:net.minecraft.resources.MinecraftKey DEBUG_PATHFINDING_PACKET -> b
    F:net.minecraft.resources.MinecraftKey DEBUG_NEIGHBORSUPDATE_PACKET -> c
    F:net.minecraft.resources.MinecraftKey DEBUG_STRUCTURES_PACKET -> d
    F:net.minecraft.resources.MinecraftKey DEBUG_WORLDGENATTEMPT_PACKET -> e
    F:net.minecraft.resources.MinecraftKey DEBUG_POI_TICKET_COUNT_PACKET -> f
    F:net.minecraft.resources.MinecraftKey DEBUG_POI_ADDED_PACKET -> g
    F:net.minecraft.resources.MinecraftKey DEBUG_POI_REMOVED_PACKET -> h
    F:net.minecraft.resources.MinecraftKey DEBUG_VILLAGE_SECTIONS -> i
    F:net.minecraft.resources.MinecraftKey DEBUG_GOAL_SELECTOR -> j
    F:net.minecraft.resources.MinecraftKey DEBUG_BRAIN -> k
    F:net.minecraft.resources.MinecraftKey DEBUG_BEE -> l
    F:net.minecraft.resources.MinecraftKey DEBUG_HIVE -> m
    F:net.minecraft.resources.MinecraftKey DEBUG_GAME_TEST_ADD_MARKER -> n
    F:net.minecraft.resources.MinecraftKey DEBUG_GAME_TEST_CLEAR -> o
    F:net.minecraft.resources.MinecraftKey DEBUG_RAIDS -> p
    F:net.minecraft.resources.MinecraftKey DEBUG_GAME_EVENT -> q
    F:net.minecraft.resources.MinecraftKey DEBUG_GAME_EVENT_LISTENER -> r
    F:net.minecraft.resources.MinecraftKey identifier -> t
    F:net.minecraft.network.PacketDataSerializer data -> u
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.resources.MinecraftKey getIdentifier() -> b
    M:net.minecraft.network.PacketDataSerializer getData() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundCustomSoundPacket -> to -> net.minecraft.network.protocol.game.PacketPlayOutCustomSoundEffect
    F:float LOCATION_ACCURACY -> a
    F:net.minecraft.resources.MinecraftKey name -> b
    F:net.minecraft.sounds.SoundCategory source -> c
    F:int x -> d
    F:int y -> e
    F:int z -> f
    F:float volume -> g
    F:float pitch -> h
    F:long seed -> i
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.resources.MinecraftKey getName() -> b
    M:net.minecraft.sounds.SoundCategory getSource() -> c
    M:double getX() -> d
    M:double getY() -> e
    M:double getZ() -> f
    M:float getVolume() -> g
    M:float getPitch() -> h
    M:long getSeed() -> i
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundDisconnectPacket -> tp -> net.minecraft.network.protocol.game.PacketPlayOutKickDisconnect
    F:net.minecraft.network.chat.IChatBaseComponent reason -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getReason() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundEntityEventPacket -> tq -> net.minecraft.network.protocol.game.PacketPlayOutEntityStatus
    F:int entityId -> a
    F:byte eventId -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.world.entity.Entity getEntity(net.minecraft.world.level.World) -> a
    M:byte getEventId() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundExplodePacket -> tr -> net.minecraft.network.protocol.game.PacketPlayOutExplosion
    F:double x -> a
    F:double y -> b
    F:double z -> c
    F:float power -> d
    F:java.util.List toBlow -> e
    F:float knockbackX -> f
    F:float knockbackY -> g
    F:float knockbackZ -> h
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:float getKnockbackX() -> b
    M:float getKnockbackY() -> c
    M:float getKnockbackZ() -> d
    M:double getX() -> e
    M:double getY() -> f
    M:double getZ() -> g
    M:float getPower() -> h
    M:java.util.List getToBlow() -> i
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundForgetLevelChunkPacket -> ts -> net.minecraft.network.protocol.game.PacketPlayOutUnloadChunk
    F:int x -> a
    F:int z -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getX() -> b
    M:int getZ() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundGameEventPacket -> tt -> net.minecraft.network.protocol.game.PacketPlayOutGameStateChange
    F:net.minecraft.network.protocol.game.ClientboundGameEventPacket$Type NO_RESPAWN_BLOCK_AVAILABLE -> a
    F:net.minecraft.network.protocol.game.ClientboundGameEventPacket$Type START_RAINING -> b
    F:net.minecraft.network.protocol.game.ClientboundGameEventPacket$Type STOP_RAINING -> c
    F:net.minecraft.network.protocol.game.ClientboundGameEventPacket$Type CHANGE_GAME_MODE -> d
    F:net.minecraft.network.protocol.game.ClientboundGameEventPacket$Type WIN_GAME -> e
    F:net.minecraft.network.protocol.game.ClientboundGameEventPacket$Type DEMO_EVENT -> f
    F:net.minecraft.network.protocol.game.ClientboundGameEventPacket$Type ARROW_HIT_PLAYER -> g
    F:net.minecraft.network.protocol.game.ClientboundGameEventPacket$Type RAIN_LEVEL_CHANGE -> h
    F:net.minecraft.network.protocol.game.ClientboundGameEventPacket$Type THUNDER_LEVEL_CHANGE -> i
    F:net.minecraft.network.protocol.game.ClientboundGameEventPacket$Type PUFFER_FISH_STING -> j
    F:net.minecraft.network.protocol.game.ClientboundGameEventPacket$Type GUARDIAN_ELDER_EFFECT -> k
    F:net.minecraft.network.protocol.game.ClientboundGameEventPacket$Type IMMEDIATE_RESPAWN -> l
    F:int DEMO_PARAM_INTRO -> m
    F:int DEMO_PARAM_HINT_1 -> n
    F:int DEMO_PARAM_HINT_2 -> o
    F:int DEMO_PARAM_HINT_3 -> p
    F:int DEMO_PARAM_HINT_4 -> q
    F:net.minecraft.network.protocol.game.ClientboundGameEventPacket$Type event -> r
    F:float param -> s
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.network.protocol.game.ClientboundGameEventPacket$Type getEvent() -> b
    M:float getParam() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundGameEventPacket$Type -> tt$a -> net.minecraft.network.protocol.game.PacketPlayOutGameStateChange$a
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap TYPES -> a
    F:int id -> b
net.minecraft.network.protocol.game.ClientboundHorseScreenOpenPacket -> tu -> net.minecraft.network.protocol.game.PacketPlayOutOpenWindowHorse
    F:int containerId -> a
    F:int size -> b
    F:int entityId -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getContainerId() -> b
    M:int getSize() -> c
    M:int getEntityId() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundInitializeBorderPacket -> tv -> net.minecraft.network.protocol.game.ClientboundInitializeBorderPacket
    F:double newCenterX -> a
    F:double newCenterZ -> b
    F:double oldSize -> c
    F:double newSize -> d
    F:long lerpTime -> e
    F:int newAbsoluteMaxSize -> f
    F:int warningBlocks -> g
    F:int warningTime -> h
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:double getNewCenterX() -> b
    M:double getNewCenterZ() -> c
    M:double getNewSize() -> d
    M:double getOldSize() -> e
    M:long getLerpTime() -> f
    M:int getNewAbsoluteMaxSize() -> g
    M:int getWarningTime() -> h
    M:int getWarningBlocks() -> i
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundKeepAlivePacket -> tw -> net.minecraft.network.protocol.game.PacketPlayOutKeepAlive
    F:long id -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:long getId() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundLevelChunkPacketData -> tx -> net.minecraft.network.protocol.game.ClientboundLevelChunkPacketData
    F:int TWO_MEGABYTES -> a
    F:net.minecraft.nbt.NBTTagCompound heightmaps -> b
    F:java.util.List blockEntitiesData -> d
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:int calculateChunkSize(net.minecraft.world.level.chunk.Chunk) -> a
    M:io.netty.buffer.ByteBuf getWriteBuffer() -> c
    M:void extractChunkData(net.minecraft.network.PacketDataSerializer,net.minecraft.world.level.chunk.Chunk) -> a
    M:java.util.function.Consumer getBlockEntitiesTagsConsumer(int,int) -> a
    M:void getBlockEntitiesTags(net.minecraft.network.protocol.game.ClientboundLevelChunkPacketData$BlockEntityTagOutput,int,int) -> a
    M:net.minecraft.network.PacketDataSerializer getReadBuffer() -> a
    M:net.minecraft.nbt.NBTTagCompound getHeightmaps() -> b
net.minecraft.network.protocol.game.ClientboundLevelChunkPacketData$BlockEntityInfo -> tx$a -> net.minecraft.network.protocol.game.ClientboundLevelChunkPacketData$a
    F:int packedXZ -> a
    F:int y -> b
    F:net.minecraft.world.level.block.entity.TileEntityTypes type -> c
    F:net.minecraft.nbt.NBTTagCompound tag -> d
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.network.protocol.game.ClientboundLevelChunkPacketData$BlockEntityInfo create(net.minecraft.world.level.block.entity.TileEntity) -> a
net.minecraft.network.protocol.game.ClientboundLevelChunkPacketData$BlockEntityTagOutput -> tx$b -> net.minecraft.network.protocol.game.ClientboundLevelChunkPacketData$b
net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket -> ty -> net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket
    F:int x -> a
    F:int z -> b
    F:net.minecraft.network.protocol.game.ClientboundLevelChunkPacketData chunkData -> c
    F:net.minecraft.network.protocol.game.ClientboundLightUpdatePacketData lightData -> d
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getX() -> b
    M:int getZ() -> c
    M:net.minecraft.network.protocol.game.ClientboundLevelChunkPacketData getChunkData() -> d
    M:net.minecraft.network.protocol.game.ClientboundLightUpdatePacketData getLightData() -> e
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundLevelEventPacket -> tz -> net.minecraft.network.protocol.game.PacketPlayOutWorldEvent
    F:int type -> a
    F:net.minecraft.core.BlockPosition pos -> b
    F:int data -> c
    F:boolean globalEvent -> d
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:boolean isGlobalEvent() -> b
    M:int getType() -> c
    M:int getData() -> d
    M:net.minecraft.core.BlockPosition getPos() -> e
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket -> ua -> net.minecraft.network.protocol.game.PacketPlayOutWorldParticles
    F:double x -> a
    F:double y -> b
    F:double z -> c
    F:float xDist -> d
    F:float yDist -> e
    F:float zDist -> f
    F:float maxSpeed -> g
    F:int count -> h
    F:boolean overrideLimiter -> i
    F:net.minecraft.core.particles.ParticleParam particle -> j
    M:net.minecraft.core.particles.ParticleParam readParticle(net.minecraft.network.PacketDataSerializer,net.minecraft.core.particles.Particle) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:boolean isOverrideLimiter() -> b
    M:double getX() -> c
    M:double getY() -> d
    M:double getZ() -> e
    M:float getXDist() -> f
    M:float getYDist() -> g
    M:float getZDist() -> h
    M:float getMaxSpeed() -> i
    M:int getCount() -> j
    M:net.minecraft.core.particles.ParticleParam getParticle() -> k
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundLightUpdatePacket -> ub -> net.minecraft.network.protocol.game.PacketPlayOutLightUpdate
    F:int x -> a
    F:int z -> b
    F:net.minecraft.network.protocol.game.ClientboundLightUpdatePacketData lightData -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getX() -> b
    M:int getZ() -> c
    M:net.minecraft.network.protocol.game.ClientboundLightUpdatePacketData getLightData() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundLightUpdatePacketData -> uc -> net.minecraft.network.protocol.game.ClientboundLightUpdatePacketData
    F:java.util.BitSet skyYMask -> a
    F:java.util.BitSet blockYMask -> b
    F:java.util.BitSet emptySkyYMask -> c
    F:java.util.BitSet emptyBlockYMask -> d
    F:java.util.List skyUpdates -> e
    F:java.util.List blockUpdates -> f
    F:boolean trustEdges -> g
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void prepareSectionData(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.lighting.LightEngine,net.minecraft.world.level.EnumSkyBlock,int,java.util.BitSet,java.util.BitSet,java.util.List) -> a
    M:java.util.BitSet getSkyYMask() -> a
    M:java.util.BitSet getEmptySkyYMask() -> b
    M:java.util.List getSkyUpdates() -> c
    M:java.util.BitSet getBlockYMask() -> d
    M:java.util.BitSet getEmptyBlockYMask() -> e
    M:java.util.List getBlockUpdates() -> f
    M:boolean getTrustEdges() -> g
net.minecraft.network.protocol.game.ClientboundLoginPacket -> ud -> net.minecraft.network.protocol.game.PacketPlayOutLogin
    F:int playerId -> a
    F:boolean hardcore -> b
    F:net.minecraft.world.level.EnumGamemode gameType -> c
    F:net.minecraft.world.level.EnumGamemode previousGameType -> d
    F:java.util.Set levels -> e
    F:net.minecraft.core.IRegistryCustom$Dimension registryHolder -> f
    F:net.minecraft.resources.ResourceKey dimensionType -> g
    F:net.minecraft.resources.ResourceKey dimension -> h
    F:long seed -> i
    F:int maxPlayers -> j
    F:int chunkRadius -> k
    F:int simulationDistance -> l
    F:boolean reducedDebugInfo -> m
    F:boolean showDeathScreen -> n
    F:boolean isDebug -> o
    F:boolean isFlat -> p
    F:java.util.Optional lastDeathLocation -> q
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int playerId() -> b
    M:boolean hardcore() -> c
    M:net.minecraft.world.level.EnumGamemode gameType() -> d
    M:net.minecraft.world.level.EnumGamemode previousGameType() -> e
    M:java.util.Set levels() -> f
    M:net.minecraft.core.IRegistryCustom$Dimension registryHolder() -> g
    M:net.minecraft.resources.ResourceKey dimensionType() -> h
    M:net.minecraft.resources.ResourceKey dimension() -> i
    M:long seed() -> j
    M:int maxPlayers() -> k
    M:int chunkRadius() -> l
    M:int simulationDistance() -> m
    M:boolean reducedDebugInfo() -> n
    M:boolean showDeathScreen() -> o
    M:boolean isDebug() -> p
    M:boolean isFlat() -> q
    M:java.util.Optional lastDeathLocation() -> r
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundMapItemDataPacket -> ue -> net.minecraft.network.protocol.game.PacketPlayOutMap
    F:int mapId -> a
    F:byte scale -> b
    F:boolean locked -> c
    F:java.util.List decorations -> d
    F:net.minecraft.world.level.saveddata.maps.MapItemSavedData$MapPatch colorPatch -> e
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getMapId() -> b
    M:void applyToMap(net.minecraft.world.level.saveddata.maps.WorldMap) -> a
    M:byte getScale() -> c
    M:boolean isLocked() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundMerchantOffersPacket -> uf -> net.minecraft.network.protocol.game.PacketPlayOutOpenWindowMerchant
    F:int containerId -> a
    F:net.minecraft.world.item.trading.MerchantRecipeList offers -> b
    F:int villagerLevel -> c
    F:int villagerXp -> d
    F:boolean showProgress -> e
    F:boolean canRestock -> f
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getContainerId() -> b
    M:net.minecraft.world.item.trading.MerchantRecipeList getOffers() -> c
    M:int getVillagerLevel() -> d
    M:int getVillagerXp() -> e
    M:boolean showProgress() -> f
    M:boolean canRestock() -> g
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundMoveEntityPacket -> ug -> net.minecraft.network.protocol.game.PacketPlayOutEntity
    F:int entityId -> a
    F:short xa -> b
    F:short ya -> c
    F:short za -> d
    F:byte yRot -> e
    F:byte xRot -> f
    F:boolean onGround -> g
    F:boolean hasRot -> h
    F:boolean hasPos -> i
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.world.entity.Entity getEntity(net.minecraft.world.level.World) -> a
    M:short getXa() -> b
    M:short getYa() -> c
    M:short getZa() -> d
    M:byte getyRot() -> e
    M:byte getxRot() -> f
    M:boolean hasRotation() -> g
    M:boolean hasPosition() -> h
    M:boolean isOnGround() -> i
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundMoveEntityPacket$Pos -> ug$a -> net.minecraft.network.protocol.game.PacketPlayOutEntity$PacketPlayOutRelEntityMove
    M:net.minecraft.network.protocol.game.PacketPlayOutEntity$PacketPlayOutRelEntityMove read(net.minecraft.network.PacketDataSerializer) -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundMoveEntityPacket$PosRot -> ug$b -> net.minecraft.network.protocol.game.PacketPlayOutEntity$PacketPlayOutRelEntityMoveLook
    M:net.minecraft.network.protocol.game.PacketPlayOutEntity$PacketPlayOutRelEntityMoveLook read(net.minecraft.network.PacketDataSerializer) -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundMoveEntityPacket$Rot -> ug$c -> net.minecraft.network.protocol.game.PacketPlayOutEntity$PacketPlayOutEntityLook
    M:net.minecraft.network.protocol.game.PacketPlayOutEntity$PacketPlayOutEntityLook read(net.minecraft.network.PacketDataSerializer) -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundMoveVehiclePacket -> uh -> net.minecraft.network.protocol.game.PacketPlayOutVehicleMove
    F:double x -> a
    F:double y -> b
    F:double z -> c
    F:float yRot -> d
    F:float xRot -> e
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:double getX() -> b
    M:double getY() -> c
    M:double getZ() -> d
    M:float getYRot() -> e
    M:float getXRot() -> f
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundOpenBookPacket -> ui -> net.minecraft.network.protocol.game.PacketPlayOutOpenBook
    F:net.minecraft.world.EnumHand hand -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.world.EnumHand getHand() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundOpenScreenPacket -> uj -> net.minecraft.network.protocol.game.PacketPlayOutOpenWindow
    F:int containerId -> a
    F:net.minecraft.world.inventory.Containers type -> b
    F:net.minecraft.network.chat.IChatBaseComponent title -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getContainerId() -> b
    M:net.minecraft.world.inventory.Containers getType() -> c
    M:net.minecraft.network.chat.IChatBaseComponent getTitle() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundOpenSignEditorPacket -> uk -> net.minecraft.network.protocol.game.PacketPlayOutOpenSignEditor
    F:net.minecraft.core.BlockPosition pos -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.core.BlockPosition getPos() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPingPacket -> ul -> net.minecraft.network.protocol.game.ClientboundPingPacket
    F:int id -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getId() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPlaceGhostRecipePacket -> um -> net.minecraft.network.protocol.game.PacketPlayOutAutoRecipe
    F:int containerId -> a
    F:net.minecraft.resources.MinecraftKey recipe -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.resources.MinecraftKey getRecipe() -> b
    M:int getContainerId() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket -> un -> net.minecraft.network.protocol.game.PacketPlayOutAbilities
    F:int FLAG_INVULNERABLE -> a
    F:int FLAG_FLYING -> b
    F:int FLAG_CAN_FLY -> c
    F:int FLAG_INSTABUILD -> d
    F:boolean invulnerable -> e
    F:boolean isFlying -> f
    F:boolean canFly -> g
    F:boolean instabuild -> h
    F:float flyingSpeed -> i
    F:float walkingSpeed -> j
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:boolean isInvulnerable() -> b
    M:boolean isFlying() -> c
    M:boolean canFly() -> d
    M:boolean canInstabuild() -> e
    M:float getFlyingSpeed() -> f
    M:float getWalkingSpeed() -> g
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPlayerChatPacket -> uo -> net.minecraft.network.protocol.game.ClientboundPlayerChatPacket
    F:net.minecraft.network.chat.IChatBaseComponent signedContent -> a
    F:java.util.Optional unsignedContent -> b
    F:int typeId -> c
    F:net.minecraft.network.chat.ChatSender sender -> d
    F:java.time.Instant timeStamp -> e
    F:net.minecraft.util.Crypt$SaltSignaturePair saltSignature -> f
    F:java.time.Duration MESSAGE_EXPIRES_AFTER -> g
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:boolean isSkippable() -> a
    M:net.minecraft.network.chat.PlayerChatMessage getMessage() -> b
    M:java.time.Instant getExpiresAt() -> i
    M:boolean hasExpired(java.time.Instant) -> a
    M:net.minecraft.network.chat.ChatMessageType resolveType(net.minecraft.core.IRegistry) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.network.chat.IChatBaseComponent signedContent() -> c
    M:java.util.Optional unsignedContent() -> d
    M:int typeId() -> e
    M:net.minecraft.network.chat.ChatSender sender() -> f
    M:java.time.Instant timeStamp() -> g
    M:net.minecraft.util.Crypt$SaltSignaturePair saltSignature() -> h
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPlayerCombatEndPacket -> up -> net.minecraft.network.protocol.game.ClientboundPlayerCombatEndPacket
    F:int killerId -> a
    F:int duration -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPlayerCombatEnterPacket -> uq -> net.minecraft.network.protocol.game.ClientboundPlayerCombatEnterPacket
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPlayerCombatKillPacket -> ur -> net.minecraft.network.protocol.game.ClientboundPlayerCombatKillPacket
    F:int playerId -> a
    F:int killerId -> b
    F:net.minecraft.network.chat.IChatBaseComponent message -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:boolean isSkippable() -> a
    M:int getKillerId() -> b
    M:int getPlayerId() -> c
    M:net.minecraft.network.chat.IChatBaseComponent getMessage() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket -> us -> net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo
    F:net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$EnumPlayerInfoAction action -> a
    F:java.util.List entries -> b
    M:net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$PlayerInfoData createPlayerUpdate(net.minecraft.server.level.EntityPlayer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:java.util.List getEntries() -> b
    M:net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$EnumPlayerInfoAction getAction() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$Action -> us$a -> net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$EnumPlayerInfoAction
    F:net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$EnumPlayerInfoAction ADD_PLAYER -> a
    F:net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$EnumPlayerInfoAction UPDATE_GAME_MODE -> b
    F:net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$EnumPlayerInfoAction UPDATE_LATENCY -> c
    F:net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$EnumPlayerInfoAction UPDATE_DISPLAY_NAME -> d
    F:net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$EnumPlayerInfoAction REMOVE_PLAYER -> e
    M:net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$PlayerInfoData read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$PlayerInfoData) -> a
    M:net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$PlayerInfoData read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$PlayerInfoData) -> a
    M:net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$PlayerInfoData read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$PlayerInfoData) -> a
    M:net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$PlayerInfoData read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$PlayerInfoData) -> a
    M:net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$PlayerInfoData read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$PlayerInfoData) -> a
net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$PlayerUpdate -> us$b -> net.minecraft.network.protocol.game.PacketPlayOutPlayerInfo$PlayerInfoData
    F:int latency -> a
    F:net.minecraft.world.level.EnumGamemode gameMode -> b
    F:com.mojang.authlib.GameProfile profile -> c
    F:net.minecraft.network.chat.IChatBaseComponent displayName -> d
    F:net.minecraft.world.entity.player.ProfilePublicKey$Data profilePublicKey -> e
    M:com.mojang.authlib.GameProfile getProfile() -> a
    M:int getLatency() -> b
    M:net.minecraft.world.level.EnumGamemode getGameMode() -> c
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName() -> d
    M:net.minecraft.world.entity.player.ProfilePublicKey$Data getProfilePublicKey() -> e
net.minecraft.network.protocol.game.ClientboundPlayerLookAtPacket -> ut -> net.minecraft.network.protocol.game.PacketPlayOutLookAt
    F:double x -> a
    F:double y -> b
    F:double z -> c
    F:int entity -> d
    F:net.minecraft.commands.arguments.ArgumentAnchor$Anchor fromAnchor -> e
    F:net.minecraft.commands.arguments.ArgumentAnchor$Anchor toAnchor -> f
    F:boolean atEntity -> g
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.commands.arguments.ArgumentAnchor$Anchor getFromAnchor() -> b
    M:net.minecraft.world.phys.Vec3D getPosition(net.minecraft.world.level.World) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket -> uu -> net.minecraft.network.protocol.game.PacketPlayOutPosition
    F:double x -> a
    F:double y -> b
    F:double z -> c
    F:float yRot -> d
    F:float xRot -> e
    F:java.util.Set relativeArguments -> f
    F:int id -> g
    F:boolean dismountVehicle -> h
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:double getX() -> b
    M:double getY() -> c
    M:double getZ() -> d
    M:float getYRot() -> e
    M:float getXRot() -> f
    M:int getId() -> g
    M:boolean requestDismountVehicle() -> h
    M:java.util.Set getRelativeArguments() -> i
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument -> uu$a -> net.minecraft.network.protocol.game.PacketPlayOutPosition$EnumPlayerTeleportFlags
    F:net.minecraft.network.protocol.game.PacketPlayOutPosition$EnumPlayerTeleportFlags X -> a
    F:net.minecraft.network.protocol.game.PacketPlayOutPosition$EnumPlayerTeleportFlags Y -> b
    F:net.minecraft.network.protocol.game.PacketPlayOutPosition$EnumPlayerTeleportFlags Z -> c
    F:net.minecraft.network.protocol.game.PacketPlayOutPosition$EnumPlayerTeleportFlags Y_ROT -> d
    F:net.minecraft.network.protocol.game.PacketPlayOutPosition$EnumPlayerTeleportFlags X_ROT -> e
    F:int bit -> f
    M:int getMask() -> a
    M:boolean isSet(int) -> b
    M:java.util.Set unpack(int) -> a
    M:int pack(java.util.Set) -> a
net.minecraft.network.protocol.game.ClientboundRecipePacket -> uv -> net.minecraft.network.protocol.game.PacketPlayOutRecipes
    F:net.minecraft.network.protocol.game.PacketPlayOutRecipes$Action state -> a
    F:java.util.List recipes -> b
    F:java.util.List toHighlight -> c
    F:net.minecraft.stats.RecipeBookSettings bookSettings -> d
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:java.util.List getRecipes() -> b
    M:java.util.List getHighlights() -> c
    M:net.minecraft.stats.RecipeBookSettings getBookSettings() -> d
    M:net.minecraft.network.protocol.game.PacketPlayOutRecipes$Action getState() -> e
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundRecipePacket$State -> uv$a -> net.minecraft.network.protocol.game.PacketPlayOutRecipes$Action
    F:net.minecraft.network.protocol.game.PacketPlayOutRecipes$Action INIT -> a
    F:net.minecraft.network.protocol.game.PacketPlayOutRecipes$Action ADD -> b
    F:net.minecraft.network.protocol.game.PacketPlayOutRecipes$Action REMOVE -> c
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> uw -> net.minecraft.network.protocol.game.PacketPlayOutEntityDestroy
    F:it.unimi.dsi.fastutil.ints.IntList entityIds -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:it.unimi.dsi.fastutil.ints.IntList getEntityIds() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundRemoveMobEffectPacket -> ux -> net.minecraft.network.protocol.game.PacketPlayOutRemoveEntityEffect
    F:int entityId -> a
    F:net.minecraft.world.effect.MobEffectList effect -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.world.entity.Entity getEntity(net.minecraft.world.level.World) -> a
    M:net.minecraft.world.effect.MobEffectList getEffect() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundResourcePackPacket -> uy -> net.minecraft.network.protocol.game.PacketPlayOutResourcePackSend
    F:int MAX_HASH_LENGTH -> a
    F:java.lang.String url -> b
    F:java.lang.String hash -> c
    F:boolean required -> d
    F:net.minecraft.network.chat.IChatBaseComponent prompt -> e
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:java.lang.String getUrl() -> b
    M:java.lang.String getHash() -> c
    M:boolean isRequired() -> d
    M:net.minecraft.network.chat.IChatBaseComponent getPrompt() -> e
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundRespawnPacket -> uz -> net.minecraft.network.protocol.game.PacketPlayOutRespawn
    F:net.minecraft.resources.ResourceKey dimensionType -> a
    F:net.minecraft.resources.ResourceKey dimension -> b
    F:long seed -> c
    F:net.minecraft.world.level.EnumGamemode playerGameType -> d
    F:net.minecraft.world.level.EnumGamemode previousPlayerGameType -> e
    F:boolean isDebug -> f
    F:boolean isFlat -> g
    F:boolean keepAllPlayerData -> h
    F:java.util.Optional lastDeathLocation -> i
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.resources.ResourceKey getDimensionType() -> b
    M:net.minecraft.resources.ResourceKey getDimension() -> c
    M:long getSeed() -> d
    M:net.minecraft.world.level.EnumGamemode getPlayerGameType() -> e
    M:net.minecraft.world.level.EnumGamemode getPreviousPlayerGameType() -> f
    M:boolean isDebug() -> g
    M:boolean isFlat() -> h
    M:boolean shouldKeepAllPlayerData() -> i
    M:java.util.Optional getLastDeathLocation() -> j
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundRotateHeadPacket -> va -> net.minecraft.network.protocol.game.PacketPlayOutEntityHeadRotation
    F:int entityId -> a
    F:byte yHeadRot -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.world.entity.Entity getEntity(net.minecraft.world.level.World) -> a
    M:byte getYHeadRot() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket -> vb -> net.minecraft.network.protocol.game.PacketPlayOutMultiBlockChange
    F:int POS_IN_SECTION_BITS -> a
    F:net.minecraft.core.SectionPosition sectionPos -> b
    F:boolean suppressLightUpdates -> e
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:void runUpdates(java.util.function.BiConsumer) -> a
    M:boolean shouldSuppressLightUpdates() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSelectAdvancementsTabPacket -> vc -> net.minecraft.network.protocol.game.PacketPlayOutSelectAdvancementTab
    F:net.minecraft.resources.MinecraftKey tab -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.resources.MinecraftKey getTab() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundServerDataPacket -> vd -> net.minecraft.network.protocol.game.ClientboundServerDataPacket
    F:java.util.Optional motd -> a
    F:java.util.Optional iconBase64 -> b
    F:boolean previewsChat -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:java.util.Optional getMotd() -> b
    M:java.util.Optional getIconBase64() -> c
    M:boolean previewsChat() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetActionBarTextPacket -> ve -> net.minecraft.network.protocol.game.ClientboundSetActionBarTextPacket
    F:net.minecraft.network.chat.IChatBaseComponent text -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getText() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetBorderCenterPacket -> vf -> net.minecraft.network.protocol.game.ClientboundSetBorderCenterPacket
    F:double newCenterX -> a
    F:double newCenterZ -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:double getNewCenterZ() -> b
    M:double getNewCenterX() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetBorderLerpSizePacket -> vg -> net.minecraft.network.protocol.game.ClientboundSetBorderLerpSizePacket
    F:double oldSize -> a
    F:double newSize -> b
    F:long lerpTime -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:double getOldSize() -> b
    M:double getNewSize() -> c
    M:long getLerpTime() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetBorderSizePacket -> vh -> net.minecraft.network.protocol.game.ClientboundSetBorderSizePacket
    F:double size -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:double getSize() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetBorderWarningDelayPacket -> vi -> net.minecraft.network.protocol.game.ClientboundSetBorderWarningDelayPacket
    F:int warningDelay -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getWarningDelay() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetBorderWarningDistancePacket -> vj -> net.minecraft.network.protocol.game.ClientboundSetBorderWarningDistancePacket
    F:int warningBlocks -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getWarningBlocks() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetCameraPacket -> vk -> net.minecraft.network.protocol.game.PacketPlayOutCamera
    F:int cameraId -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.world.entity.Entity getEntity(net.minecraft.world.level.World) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket -> vl -> net.minecraft.network.protocol.game.PacketPlayOutHeldItemSlot
    F:int slot -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getSlot() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetChunkCacheCenterPacket -> vm -> net.minecraft.network.protocol.game.PacketPlayOutViewCentre
    F:int x -> a
    F:int z -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getX() -> b
    M:int getZ() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetChunkCacheRadiusPacket -> vn -> net.minecraft.network.protocol.game.PacketPlayOutViewDistance
    F:int radius -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getRadius() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket -> vo -> net.minecraft.network.protocol.game.PacketPlayOutSpawnPosition
    F:net.minecraft.core.BlockPosition pos -> a
    F:float angle -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.core.BlockPosition getPos() -> b
    M:float getAngle() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetDisplayChatPreviewPacket -> vp -> net.minecraft.network.protocol.game.ClientboundSetDisplayChatPreviewPacket
    F:boolean enabled -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:boolean enabled() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetDisplayObjectivePacket -> vq -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardDisplayObjective
    F:int slot -> a
    F:java.lang.String objectiveName -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getSlot() -> b
    M:java.lang.String getObjectiveName() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> vr -> net.minecraft.network.protocol.game.PacketPlayOutEntityMetadata
    F:int id -> a
    F:java.util.List packedItems -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:java.util.List getUnpackedData() -> b
    M:int getId() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket -> vs -> net.minecraft.network.protocol.game.PacketPlayOutAttachEntity
    F:int sourceId -> a
    F:int destId -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getSourceId() -> b
    M:int getDestId() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket -> vt -> net.minecraft.network.protocol.game.PacketPlayOutEntityVelocity
    F:int id -> a
    F:int xa -> b
    F:int ya -> c
    F:int za -> d
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getId() -> b
    M:int getXa() -> c
    M:int getYa() -> d
    M:int getZa() -> e
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket -> vu -> net.minecraft.network.protocol.game.PacketPlayOutEntityEquipment
    F:byte CONTINUE_MASK -> a
    F:int entity -> b
    F:java.util.List slots -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getEntity() -> b
    M:java.util.List getSlots() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetExperiencePacket -> vv -> net.minecraft.network.protocol.game.PacketPlayOutExperience
    F:float experienceProgress -> a
    F:int totalExperience -> b
    F:int experienceLevel -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:float getExperienceProgress() -> b
    M:int getTotalExperience() -> c
    M:int getExperienceLevel() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetHealthPacket -> vw -> net.minecraft.network.protocol.game.PacketPlayOutUpdateHealth
    F:float health -> a
    F:int food -> b
    F:float saturation -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:float getHealth() -> b
    M:int getFood() -> c
    M:float getSaturation() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetObjectivePacket -> vx -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardObjective
    F:int METHOD_ADD -> a
    F:int METHOD_REMOVE -> b
    F:int METHOD_CHANGE -> c
    F:java.lang.String objectiveName -> d
    F:net.minecraft.network.chat.IChatBaseComponent displayName -> e
    F:net.minecraft.world.scores.criteria.IScoreboardCriteria$EnumScoreboardHealthDisplay renderType -> f
    F:int method -> g
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:java.lang.String getObjectiveName() -> b
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName() -> c
    M:int getMethod() -> d
    M:net.minecraft.world.scores.criteria.IScoreboardCriteria$EnumScoreboardHealthDisplay getRenderType() -> e
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetPassengersPacket -> vy -> net.minecraft.network.protocol.game.PacketPlayOutMount
    F:int vehicle -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getVehicle() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> vz -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam
    F:int METHOD_ADD -> a
    F:int METHOD_REMOVE -> b
    F:int METHOD_CHANGE -> c
    F:int METHOD_JOIN -> d
    F:int METHOD_LEAVE -> e
    F:int MAX_VISIBILITY_LENGTH -> f
    F:int MAX_COLLISION_LENGTH -> g
    F:int method -> h
    F:java.lang.String name -> i
    F:java.util.Collection players -> j
    F:java.util.Optional parameters -> k
    M:net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam createAddOrModifyPacket(net.minecraft.world.scores.ScoreboardTeam,boolean) -> a
    M:net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam createRemovePacket(net.minecraft.world.scores.ScoreboardTeam) -> a
    M:net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam createPlayerPacket(net.minecraft.world.scores.ScoreboardTeam,java.lang.String,net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:boolean shouldHavePlayerList(int) -> a
    M:boolean shouldHaveParameters(int) -> b
    M:net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action getPlayerAction() -> b
    M:net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action getTeamAction() -> c
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:java.lang.String getName() -> d
    M:java.util.Collection getPlayers() -> e
    M:java.util.Optional getParameters() -> f
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action -> vz$a -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$a
    F:net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action ADD -> a
    F:net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Action REMOVE -> b
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket$Parameters -> vz$b -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardTeam$b
    F:net.minecraft.network.chat.IChatBaseComponent displayName -> a
    F:net.minecraft.network.chat.IChatBaseComponent playerPrefix -> b
    F:net.minecraft.network.chat.IChatBaseComponent playerSuffix -> c
    F:java.lang.String nametagVisibility -> d
    F:java.lang.String collisionRule -> e
    F:net.minecraft.EnumChatFormat color -> f
    F:int options -> g
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName() -> a
    M:int getOptions() -> b
    M:net.minecraft.EnumChatFormat getColor() -> c
    M:java.lang.String getNametagVisibility() -> d
    M:java.lang.String getCollisionRule() -> e
    M:net.minecraft.network.chat.IChatBaseComponent getPlayerPrefix() -> f
    M:net.minecraft.network.chat.IChatBaseComponent getPlayerSuffix() -> g
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.network.protocol.game.ClientboundSetScorePacket -> wa -> net.minecraft.network.protocol.game.PacketPlayOutScoreboardScore
    F:java.lang.String owner -> a
    F:java.lang.String objectiveName -> b
    F:int score -> c
    F:net.minecraft.server.ScoreboardServer$Action method -> d
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:java.lang.String getOwner() -> b
    M:java.lang.String getObjectiveName() -> c
    M:int getScore() -> d
    M:net.minecraft.server.ScoreboardServer$Action getMethod() -> e
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetSimulationDistancePacket -> wb -> net.minecraft.network.protocol.game.ClientboundSetSimulationDistancePacket
    F:int simulationDistance -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int simulationDistance() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetSubtitleTextPacket -> wc -> net.minecraft.network.protocol.game.ClientboundSetSubtitleTextPacket
    F:net.minecraft.network.chat.IChatBaseComponent text -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getText() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetTimePacket -> wd -> net.minecraft.network.protocol.game.PacketPlayOutUpdateTime
    F:long gameTime -> a
    F:long dayTime -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:long getGameTime() -> b
    M:long getDayTime() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetTitleTextPacket -> we -> net.minecraft.network.protocol.game.ClientboundSetTitleTextPacket
    F:net.minecraft.network.chat.IChatBaseComponent text -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getText() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetTitlesAnimationPacket -> wf -> net.minecraft.network.protocol.game.ClientboundSetTitlesAnimationPacket
    F:int fadeIn -> a
    F:int stay -> b
    F:int fadeOut -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getFadeIn() -> b
    M:int getStay() -> c
    M:int getFadeOut() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSoundEntityPacket -> wg -> net.minecraft.network.protocol.game.PacketPlayOutEntitySound
    F:net.minecraft.sounds.SoundEffect sound -> a
    F:net.minecraft.sounds.SoundCategory source -> b
    F:int id -> c
    F:float volume -> d
    F:float pitch -> e
    F:long seed -> f
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.sounds.SoundEffect getSound() -> b
    M:net.minecraft.sounds.SoundCategory getSource() -> c
    M:int getId() -> d
    M:float getVolume() -> e
    M:float getPitch() -> f
    M:long getSeed() -> g
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSoundPacket -> wh -> net.minecraft.network.protocol.game.PacketPlayOutNamedSoundEffect
    F:float LOCATION_ACCURACY -> a
    F:net.minecraft.sounds.SoundEffect sound -> b
    F:net.minecraft.sounds.SoundCategory source -> c
    F:int x -> d
    F:int y -> e
    F:int z -> f
    F:float volume -> g
    F:float pitch -> h
    F:long seed -> i
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.sounds.SoundEffect getSound() -> b
    M:net.minecraft.sounds.SoundCategory getSource() -> c
    M:double getX() -> d
    M:double getY() -> e
    M:double getZ() -> f
    M:float getVolume() -> g
    M:float getPitch() -> h
    M:long getSeed() -> i
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundStopSoundPacket -> wi -> net.minecraft.network.protocol.game.PacketPlayOutStopSound
    F:int HAS_SOURCE -> a
    F:int HAS_SOUND -> b
    F:net.minecraft.resources.MinecraftKey name -> c
    F:net.minecraft.sounds.SoundCategory source -> d
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.resources.MinecraftKey getName() -> b
    M:net.minecraft.sounds.SoundCategory getSource() -> c
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSystemChatPacket -> wj -> net.minecraft.network.protocol.game.ClientboundSystemChatPacket
    F:net.minecraft.network.chat.IChatBaseComponent content -> a
    F:int typeId -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:boolean isSkippable() -> a
    M:net.minecraft.network.chat.ChatMessageType resolveType(net.minecraft.core.IRegistry) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.network.chat.IChatBaseComponent content() -> b
    M:int typeId() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundTabListPacket -> wk -> net.minecraft.network.protocol.game.PacketPlayOutPlayerListHeaderFooter
    F:net.minecraft.network.chat.IChatBaseComponent header -> a
    F:net.minecraft.network.chat.IChatBaseComponent footer -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getHeader() -> b
    M:net.minecraft.network.chat.IChatBaseComponent getFooter() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundTagQueryPacket -> wl -> net.minecraft.network.protocol.game.PacketPlayOutNBTQuery
    F:int transactionId -> a
    F:net.minecraft.nbt.NBTTagCompound tag -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getTransactionId() -> b
    M:net.minecraft.nbt.NBTTagCompound getTag() -> c
    M:boolean isSkippable() -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundTakeItemEntityPacket -> wm -> net.minecraft.network.protocol.game.PacketPlayOutCollect
    F:int itemId -> a
    F:int playerId -> b
    F:int amount -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getItemId() -> b
    M:int getPlayerId() -> c
    M:int getAmount() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket -> wn -> net.minecraft.network.protocol.game.PacketPlayOutEntityTeleport
    F:int id -> a
    F:double x -> b
    F:double y -> c
    F:double z -> d
    F:byte yRot -> e
    F:byte xRot -> f
    F:boolean onGround -> g
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getId() -> b
    M:double getX() -> c
    M:double getY() -> d
    M:double getZ() -> e
    M:byte getyRot() -> f
    M:byte getxRot() -> g
    M:boolean isOnGround() -> h
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundUpdateAdvancementsPacket -> wo -> net.minecraft.network.protocol.game.PacketPlayOutAdvancements
    F:boolean reset -> a
    F:java.util.Map added -> b
    F:java.util.Set removed -> c
    F:java.util.Map progress -> d
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:java.util.Map getAdded() -> b
    M:java.util.Set getRemoved() -> c
    M:java.util.Map getProgress() -> d
    M:boolean shouldReset() -> e
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket -> wp -> net.minecraft.network.protocol.game.PacketPlayOutUpdateAttributes
    F:int entityId -> a
    F:java.util.List attributes -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getEntityId() -> b
    M:java.util.List getValues() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket$AttributeSnapshot -> wp$a -> net.minecraft.network.protocol.game.PacketPlayOutUpdateAttributes$AttributeSnapshot
    F:net.minecraft.world.entity.ai.attributes.AttributeBase attribute -> a
    F:double base -> b
    F:java.util.Collection modifiers -> c
    M:net.minecraft.world.entity.ai.attributes.AttributeBase getAttribute() -> a
    M:double getBase() -> b
    M:java.util.Collection getModifiers() -> c
net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket -> wq -> net.minecraft.network.protocol.game.PacketPlayOutEntityEffect
    F:short LONG_DURATION_THRESHOLD -> a
    F:int FLAG_AMBIENT -> b
    F:int FLAG_VISIBLE -> c
    F:int FLAG_SHOW_ICON -> d
    F:int entityId -> e
    F:net.minecraft.world.effect.MobEffectList effect -> f
    F:byte effectAmplifier -> g
    F:int effectDurationTicks -> h
    F:byte flags -> i
    F:net.minecraft.world.effect.MobEffectInstance$FactorData factorData -> j
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:boolean isSuperLongDuration() -> b
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:int getEntityId() -> c
    M:net.minecraft.world.effect.MobEffectList getEffect() -> d
    M:byte getEffectAmplifier() -> e
    M:int getEffectDurationTicks() -> f
    M:boolean isEffectVisible() -> g
    M:boolean isEffectAmbient() -> h
    M:boolean effectShowsIcon() -> i
    M:net.minecraft.world.effect.MobEffectInstance$FactorData getFactorData() -> j
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket -> wr -> net.minecraft.network.protocol.game.PacketPlayOutRecipeUpdate
    F:java.util.List recipes -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:java.util.List getRecipes() -> b
    M:net.minecraft.world.item.crafting.IRecipe fromNetwork(net.minecraft.network.PacketDataSerializer) -> b
    M:void toNetwork(net.minecraft.network.PacketDataSerializer,net.minecraft.world.item.crafting.IRecipe) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundUpdateTagsPacket -> ws -> net.minecraft.network.protocol.game.PacketPlayOutTags
    F:java.util.Map tags -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayOut) -> a
    M:java.util.Map getTags() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.DebugEntityNameGenerator -> wt -> net.minecraft.network.protocol.game.DebugEntityNameGenerator
    M:java.lang.String getEntityName(net.minecraft.world.entity.Entity) -> a
    M:java.lang.String getEntityName(java.util.UUID) -> a
    M:java.lang.String getRandomString(net.minecraft.util.RandomSource,java.lang.String[]) -> a
    M:net.minecraft.util.RandomSource getRandom(java.util.UUID) -> b
net.minecraft.network.protocol.game.DebugPackets -> wu -> net.minecraft.network.protocol.game.PacketDebug
    F:org.slf4j.Logger LOGGER -> a
    M:void sendGameTestAddMarker(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,java.lang.String,int,int) -> a
    M:void sendGameTestClearPacket(net.minecraft.server.level.WorldServer) -> a
    M:void sendPoiPacketsForChunk(net.minecraft.server.level.WorldServer,net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:void sendPoiAddedPacket(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:void sendPoiRemovedPacket(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> b
    M:void sendPoiTicketCountPacket(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> c
    M:void sendVillageSectionsPacket(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> d
    M:void sendPathFindingPacket(net.minecraft.world.level.World,net.minecraft.world.entity.EntityInsentient,net.minecraft.world.level.pathfinder.PathEntity,float) -> a
    M:void sendNeighborsUpdatePacket(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void sendStructurePacket(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureStart) -> a
    M:void sendGoalSelector(net.minecraft.world.level.World,net.minecraft.world.entity.EntityInsentient,net.minecraft.world.entity.ai.goal.PathfinderGoalSelector) -> a
    M:void sendRaids(net.minecraft.server.level.WorldServer,java.util.Collection) -> a
    M:void sendEntityBrain(net.minecraft.world.entity.EntityLiving) -> a
    M:void sendBeeInfo(net.minecraft.world.entity.animal.EntityBee) -> a
    M:void sendGameEventInfo(net.minecraft.world.level.World,net.minecraft.world.level.gameevent.GameEvent,net.minecraft.world.phys.Vec3D) -> a
    M:void sendGameEventListenerInfo(net.minecraft.world.level.World,net.minecraft.world.level.gameevent.GameEventListener) -> a
    M:void sendHiveInfo(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityBeehive) -> a
    M:void writeBrain(net.minecraft.world.entity.EntityLiving,net.minecraft.network.PacketDataSerializer) -> a
    M:java.util.List getMemoryDescriptions(net.minecraft.world.entity.EntityLiving,long) -> a
    M:java.lang.String getShortDescription(net.minecraft.server.level.WorldServer,java.lang.Object) -> a
    M:void sendPacketToAllPlayers(net.minecraft.server.level.WorldServer,net.minecraft.network.PacketDataSerializer,net.minecraft.resources.MinecraftKey) -> a
net.minecraft.network.protocol.game.ServerGamePacketListener -> wv -> net.minecraft.network.protocol.game.PacketListenerPlayIn
net.minecraft.network.protocol.game.ServerPacketListener -> ww -> net.minecraft.network.protocol.game.ServerPacketListener
    M:boolean shouldPropagateHandlingExceptions() -> b
net.minecraft.network.protocol.game.ServerboundAcceptTeleportationPacket -> wx -> net.minecraft.network.protocol.game.PacketPlayInTeleportAccept
    F:int id -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:int getId() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundBlockEntityTagQuery -> wy -> net.minecraft.network.protocol.game.PacketPlayInTileNBTQuery
    F:int transactionId -> a
    F:net.minecraft.core.BlockPosition pos -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:int getTransactionId() -> b
    M:net.minecraft.core.BlockPosition getPos() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundChangeDifficultyPacket -> wz -> net.minecraft.network.protocol.game.PacketPlayInDifficultyChange
    F:net.minecraft.world.EnumDifficulty difficulty -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.world.EnumDifficulty getDifficulty() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundChatCommandPacket -> xa -> net.minecraft.network.protocol.game.ServerboundChatCommandPacket
    F:java.lang.String command -> a
    F:java.time.Instant timeStamp -> b
    F:net.minecraft.commands.arguments.ArgumentSignatures argumentSignatures -> c
    F:boolean signedPreview -> d
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.commands.CommandSigningContext signingContext(java.util.UUID) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String command() -> b
    M:java.time.Instant timeStamp() -> c
    M:net.minecraft.commands.arguments.ArgumentSignatures argumentSignatures() -> d
    M:boolean signedPreview() -> e
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundChatPacket -> xb -> net.minecraft.network.protocol.game.PacketPlayInChat
    F:java.time.Duration MESSAGE_EXPIRES_AFTER -> a
    F:java.lang.String message -> b
    F:java.time.Instant timeStamp -> c
    F:net.minecraft.util.Crypt$SaltSignaturePair saltSignature -> d
    F:boolean signedPreview -> e
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:java.lang.String getMessage() -> b
    M:net.minecraft.network.chat.MessageSignature getSignature(java.util.UUID) -> a
    M:java.time.Instant getTimeStamp() -> c
    M:boolean signedPreview() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundChatPreviewPacket -> xc -> net.minecraft.network.protocol.game.ServerboundChatPreviewPacket
    F:int queryId -> a
    F:java.lang.String query -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int queryId() -> b
    M:java.lang.String query() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundClientCommandPacket -> xd -> net.minecraft.network.protocol.game.PacketPlayInClientCommand
    F:net.minecraft.network.protocol.game.PacketPlayInClientCommand$EnumClientCommand action -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.network.protocol.game.PacketPlayInClientCommand$EnumClientCommand getAction() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundClientCommandPacket$Action -> xd$a -> net.minecraft.network.protocol.game.PacketPlayInClientCommand$EnumClientCommand
    F:net.minecraft.network.protocol.game.PacketPlayInClientCommand$EnumClientCommand PERFORM_RESPAWN -> a
    F:net.minecraft.network.protocol.game.PacketPlayInClientCommand$EnumClientCommand REQUEST_STATS -> b
net.minecraft.network.protocol.game.ServerboundClientInformationPacket -> xe -> net.minecraft.network.protocol.game.PacketPlayInSettings
    F:java.lang.String language -> b
    F:int viewDistance -> c
    F:net.minecraft.world.entity.player.EnumChatVisibility chatVisibility -> d
    F:boolean chatColors -> e
    F:int modelCustomisation -> f
    F:net.minecraft.world.entity.EnumMainHand mainHand -> g
    F:boolean textFilteringEnabled -> h
    F:boolean allowsListing -> i
    F:int MAX_LANGUAGE_LENGTH -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String language() -> b
    M:int viewDistance() -> c
    M:net.minecraft.world.entity.player.EnumChatVisibility chatVisibility() -> d
    M:boolean chatColors() -> e
    M:int modelCustomisation() -> f
    M:net.minecraft.world.entity.EnumMainHand mainHand() -> g
    M:boolean textFilteringEnabled() -> h
    M:boolean allowsListing() -> i
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundCommandSuggestionPacket -> xf -> net.minecraft.network.protocol.game.PacketPlayInTabComplete
    F:int id -> a
    F:java.lang.String command -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:int getId() -> b
    M:java.lang.String getCommand() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundContainerButtonClickPacket -> xg -> net.minecraft.network.protocol.game.PacketPlayInEnchantItem
    F:int containerId -> a
    F:int buttonId -> b
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:int getContainerId() -> b
    M:int getButtonId() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundContainerClickPacket -> xh -> net.minecraft.network.protocol.game.PacketPlayInWindowClick
    F:int MAX_SLOT_COUNT -> a
    F:int containerId -> b
    F:int stateId -> c
    F:int slotNum -> d
    F:int buttonNum -> e
    F:net.minecraft.world.inventory.InventoryClickType clickType -> f
    F:net.minecraft.world.item.ItemStack carriedItem -> g
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap changedSlots -> h
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:int getContainerId() -> b
    M:int getSlotNum() -> c
    M:int getButtonNum() -> d
    M:net.minecraft.world.item.ItemStack getCarriedItem() -> e
    M:it.unimi.dsi.fastutil.ints.Int2ObjectMap getChangedSlots() -> f
    M:net.minecraft.world.inventory.InventoryClickType getClickType() -> g
    M:int getStateId() -> h
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundContainerClosePacket -> xi -> net.minecraft.network.protocol.game.PacketPlayInCloseWindow
    F:int containerId -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:int getContainerId() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundCustomPayloadPacket -> xj -> net.minecraft.network.protocol.game.PacketPlayInCustomPayload
    F:int MAX_PAYLOAD_SIZE -> b
    F:net.minecraft.resources.MinecraftKey BRAND -> a
    F:net.minecraft.resources.MinecraftKey identifier -> c
    F:net.minecraft.network.PacketDataSerializer data -> d
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.resources.MinecraftKey getIdentifier() -> b
    M:net.minecraft.network.PacketDataSerializer getData() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundEditBookPacket -> xk -> net.minecraft.network.protocol.game.PacketPlayInBEdit
    F:int MAX_BYTES_PER_CHAR -> a
    F:int TITLE_MAX_CHARS -> b
    F:int PAGE_MAX_CHARS -> c
    F:int MAX_PAGES_COUNT -> d
    F:int slot -> e
    F:java.util.List pages -> f
    F:java.util.Optional title -> g
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:java.util.List getPages() -> b
    M:java.util.Optional getTitle() -> c
    M:int getSlot() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundEntityTagQuery -> xl -> net.minecraft.network.protocol.game.PacketPlayInEntityNBTQuery
    F:int transactionId -> a
    F:int entityId -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:int getTransactionId() -> b
    M:int getEntityId() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundInteractPacket -> xm -> net.minecraft.network.protocol.game.PacketPlayInUseEntity
    F:int entityId -> a
    F:net.minecraft.network.protocol.game.PacketPlayInUseEntity$EnumEntityUseAction action -> b
    F:boolean usingSecondaryAction -> c
    F:net.minecraft.network.protocol.game.PacketPlayInUseEntity$EnumEntityUseAction ATTACK_ACTION -> d
    M:net.minecraft.network.protocol.game.PacketPlayInUseEntity createAttackPacket(net.minecraft.world.entity.Entity,boolean) -> a
    M:net.minecraft.network.protocol.game.PacketPlayInUseEntity createInteractionPacket(net.minecraft.world.entity.Entity,boolean,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.network.protocol.game.PacketPlayInUseEntity createInteractionPacket(net.minecraft.world.entity.Entity,boolean,net.minecraft.world.EnumHand,net.minecraft.world.phys.Vec3D) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.world.entity.Entity getTarget(net.minecraft.server.level.WorldServer) -> a
    M:boolean isUsingSecondaryAction() -> b
    M:void dispatch(net.minecraft.network.protocol.game.ServerboundInteractPacket$Handler) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
    M:net.minecraft.network.protocol.game.ServerboundInteractPacket$ActionType getType() -> a
    M:void dispatch(net.minecraft.network.protocol.game.ServerboundInteractPacket$Handler) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.network.protocol.game.ServerboundInteractPacket$Action -> xm$a -> net.minecraft.network.protocol.game.PacketPlayInUseEntity$EnumEntityUseAction
net.minecraft.network.protocol.game.ServerboundInteractPacket$ActionType -> xm$b -> net.minecraft.network.protocol.game.PacketPlayInUseEntity$b
    F:net.minecraft.network.protocol.game.ServerboundInteractPacket$ActionType INTERACT -> a
    F:net.minecraft.network.protocol.game.ServerboundInteractPacket$ActionType ATTACK -> b
    F:net.minecraft.network.protocol.game.ServerboundInteractPacket$ActionType INTERACT_AT -> c
    F:java.util.function.Function reader -> d
net.minecraft.network.protocol.game.ServerboundInteractPacket$Handler -> xm$c -> net.minecraft.network.protocol.game.PacketPlayInUseEntity$c
net.minecraft.network.protocol.game.ServerboundInteractPacket$InteractionAction -> xm$d -> net.minecraft.network.protocol.game.PacketPlayInUseEntity$d
    F:net.minecraft.world.EnumHand hand -> a
    M:net.minecraft.network.protocol.game.ServerboundInteractPacket$ActionType getType() -> a
    M:void dispatch(net.minecraft.network.protocol.game.ServerboundInteractPacket$Handler) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.network.protocol.game.ServerboundInteractPacket$InteractionAtLocationAction -> xm$e -> net.minecraft.network.protocol.game.PacketPlayInUseEntity$e
    F:net.minecraft.world.EnumHand hand -> a
    F:net.minecraft.world.phys.Vec3D location -> b
    M:net.minecraft.network.protocol.game.ServerboundInteractPacket$ActionType getType() -> a
    M:void dispatch(net.minecraft.network.protocol.game.ServerboundInteractPacket$Handler) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.network.protocol.game.ServerboundJigsawGeneratePacket -> xn -> net.minecraft.network.protocol.game.PacketPlayInJigsawGenerate
    F:net.minecraft.core.BlockPosition pos -> a
    F:int levels -> b
    F:boolean keepJigsaws -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.core.BlockPosition getPos() -> b
    M:int levels() -> c
    M:boolean keepJigsaws() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundKeepAlivePacket -> xo -> net.minecraft.network.protocol.game.PacketPlayInKeepAlive
    F:long id -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:long getId() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundLockDifficultyPacket -> xp -> net.minecraft.network.protocol.game.PacketPlayInDifficultyLock
    F:boolean locked -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:boolean isLocked() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundMovePlayerPacket -> xq -> net.minecraft.network.protocol.game.PacketPlayInFlying
    F:double x -> a
    F:double y -> b
    F:double z -> c
    F:float yRot -> d
    F:float xRot -> e
    F:boolean onGround -> f
    F:boolean hasPos -> g
    F:boolean hasRot -> h
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:double getX(double) -> a
    M:double getY(double) -> b
    M:double getZ(double) -> c
    M:float getYRot(float) -> a
    M:float getXRot(float) -> b
    M:boolean isOnGround() -> b
    M:boolean hasPosition() -> c
    M:boolean hasRotation() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundMovePlayerPacket$Pos -> xq$a -> net.minecraft.network.protocol.game.PacketPlayInFlying$PacketPlayInPosition
    M:net.minecraft.network.protocol.game.PacketPlayInFlying$PacketPlayInPosition read(net.minecraft.network.PacketDataSerializer) -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundMovePlayerPacket$PosRot -> xq$b -> net.minecraft.network.protocol.game.PacketPlayInFlying$PacketPlayInPositionLook
    M:net.minecraft.network.protocol.game.PacketPlayInFlying$PacketPlayInPositionLook read(net.minecraft.network.PacketDataSerializer) -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundMovePlayerPacket$Rot -> xq$c -> net.minecraft.network.protocol.game.PacketPlayInFlying$PacketPlayInLook
    M:net.minecraft.network.protocol.game.PacketPlayInFlying$PacketPlayInLook read(net.minecraft.network.PacketDataSerializer) -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundMovePlayerPacket$StatusOnly -> xq$d -> net.minecraft.network.protocol.game.PacketPlayInFlying$d
    M:net.minecraft.network.protocol.game.ServerboundMovePlayerPacket$StatusOnly read(net.minecraft.network.PacketDataSerializer) -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundMoveVehiclePacket -> xr -> net.minecraft.network.protocol.game.PacketPlayInVehicleMove
    F:double x -> a
    F:double y -> b
    F:double z -> c
    F:float yRot -> d
    F:float xRot -> e
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:double getX() -> b
    M:double getY() -> c
    M:double getZ() -> d
    M:float getYRot() -> e
    M:float getXRot() -> f
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundPaddleBoatPacket -> xs -> net.minecraft.network.protocol.game.PacketPlayInBoatMove
    F:boolean left -> a
    F:boolean right -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:boolean getLeft() -> b
    M:boolean getRight() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundPickItemPacket -> xt -> net.minecraft.network.protocol.game.PacketPlayInPickItem
    F:int slot -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:int getSlot() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundPlaceRecipePacket -> xu -> net.minecraft.network.protocol.game.PacketPlayInAutoRecipe
    F:int containerId -> a
    F:net.minecraft.resources.MinecraftKey recipe -> b
    F:boolean shiftDown -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:int getContainerId() -> b
    M:net.minecraft.resources.MinecraftKey getRecipe() -> c
    M:boolean isShiftDown() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundPlayerAbilitiesPacket -> xv -> net.minecraft.network.protocol.game.PacketPlayInAbilities
    F:int FLAG_FLYING -> a
    F:boolean isFlying -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:boolean isFlying() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundPlayerActionPacket -> xw -> net.minecraft.network.protocol.game.PacketPlayInBlockDig
    F:net.minecraft.core.BlockPosition pos -> a
    F:net.minecraft.core.EnumDirection direction -> b
    F:net.minecraft.network.protocol.game.PacketPlayInBlockDig$EnumPlayerDigType action -> c
    F:int sequence -> d
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.core.BlockPosition getPos() -> b
    M:net.minecraft.core.EnumDirection getDirection() -> c
    M:net.minecraft.network.protocol.game.PacketPlayInBlockDig$EnumPlayerDigType getAction() -> d
    M:int getSequence() -> e
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action -> xw$a -> net.minecraft.network.protocol.game.PacketPlayInBlockDig$EnumPlayerDigType
    F:net.minecraft.network.protocol.game.PacketPlayInBlockDig$EnumPlayerDigType START_DESTROY_BLOCK -> a
    F:net.minecraft.network.protocol.game.PacketPlayInBlockDig$EnumPlayerDigType ABORT_DESTROY_BLOCK -> b
    F:net.minecraft.network.protocol.game.PacketPlayInBlockDig$EnumPlayerDigType STOP_DESTROY_BLOCK -> c
    F:net.minecraft.network.protocol.game.PacketPlayInBlockDig$EnumPlayerDigType DROP_ALL_ITEMS -> d
    F:net.minecraft.network.protocol.game.PacketPlayInBlockDig$EnumPlayerDigType DROP_ITEM -> e
    F:net.minecraft.network.protocol.game.PacketPlayInBlockDig$EnumPlayerDigType RELEASE_USE_ITEM -> f
    F:net.minecraft.network.protocol.game.PacketPlayInBlockDig$EnumPlayerDigType SWAP_ITEM_WITH_OFFHAND -> g
net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket -> xx -> net.minecraft.network.protocol.game.PacketPlayInEntityAction
    F:int id -> a
    F:net.minecraft.network.protocol.game.PacketPlayInEntityAction$EnumPlayerAction action -> b
    F:int data -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:int getId() -> b
    M:net.minecraft.network.protocol.game.PacketPlayInEntityAction$EnumPlayerAction getAction() -> c
    M:int getData() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action -> xx$a -> net.minecraft.network.protocol.game.PacketPlayInEntityAction$EnumPlayerAction
    F:net.minecraft.network.protocol.game.PacketPlayInEntityAction$EnumPlayerAction PRESS_SHIFT_KEY -> a
    F:net.minecraft.network.protocol.game.PacketPlayInEntityAction$EnumPlayerAction RELEASE_SHIFT_KEY -> b
    F:net.minecraft.network.protocol.game.PacketPlayInEntityAction$EnumPlayerAction STOP_SLEEPING -> c
    F:net.minecraft.network.protocol.game.PacketPlayInEntityAction$EnumPlayerAction START_SPRINTING -> d
    F:net.minecraft.network.protocol.game.PacketPlayInEntityAction$EnumPlayerAction STOP_SPRINTING -> e
    F:net.minecraft.network.protocol.game.PacketPlayInEntityAction$EnumPlayerAction START_RIDING_JUMP -> f
    F:net.minecraft.network.protocol.game.PacketPlayInEntityAction$EnumPlayerAction STOP_RIDING_JUMP -> g
    F:net.minecraft.network.protocol.game.PacketPlayInEntityAction$EnumPlayerAction OPEN_INVENTORY -> h
    F:net.minecraft.network.protocol.game.PacketPlayInEntityAction$EnumPlayerAction START_FALL_FLYING -> i
net.minecraft.network.protocol.game.ServerboundPlayerInputPacket -> xy -> net.minecraft.network.protocol.game.PacketPlayInSteerVehicle
    F:int FLAG_JUMPING -> a
    F:int FLAG_SHIFT_KEY_DOWN -> b
    F:float xxa -> c
    F:float zza -> d
    F:boolean isJumping -> e
    F:boolean isShiftKeyDown -> f
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:float getXxa() -> b
    M:float getZza() -> c
    M:boolean isJumping() -> d
    M:boolean isShiftKeyDown() -> e
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundPongPacket -> xz -> net.minecraft.network.protocol.game.ServerboundPongPacket
    F:int id -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:int getId() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundRecipeBookChangeSettingsPacket -> ya -> net.minecraft.network.protocol.game.PacketPlayInRecipeSettings
    F:net.minecraft.world.inventory.RecipeBookType bookType -> a
    F:boolean isOpen -> b
    F:boolean isFiltering -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.world.inventory.RecipeBookType getBookType() -> b
    M:boolean isOpen() -> c
    M:boolean isFiltering() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundRecipeBookSeenRecipePacket -> yb -> net.minecraft.network.protocol.game.PacketPlayInRecipeDisplayed
    F:net.minecraft.resources.MinecraftKey recipe -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.resources.MinecraftKey getRecipe() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundRenameItemPacket -> yc -> net.minecraft.network.protocol.game.PacketPlayInItemName
    F:java.lang.String name -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:java.lang.String getName() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundResourcePackPacket -> yd -> net.minecraft.network.protocol.game.PacketPlayInResourcePackStatus
    F:net.minecraft.network.protocol.game.PacketPlayInResourcePackStatus$EnumResourcePackStatus action -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.network.protocol.game.PacketPlayInResourcePackStatus$EnumResourcePackStatus getAction() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action -> yd$a -> net.minecraft.network.protocol.game.PacketPlayInResourcePackStatus$EnumResourcePackStatus
    F:net.minecraft.network.protocol.game.PacketPlayInResourcePackStatus$EnumResourcePackStatus SUCCESSFULLY_LOADED -> a
    F:net.minecraft.network.protocol.game.PacketPlayInResourcePackStatus$EnumResourcePackStatus DECLINED -> b
    F:net.minecraft.network.protocol.game.PacketPlayInResourcePackStatus$EnumResourcePackStatus FAILED_DOWNLOAD -> c
    F:net.minecraft.network.protocol.game.PacketPlayInResourcePackStatus$EnumResourcePackStatus ACCEPTED -> d
net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket -> ye -> net.minecraft.network.protocol.game.PacketPlayInAdvancements
    F:net.minecraft.network.protocol.game.PacketPlayInAdvancements$Status action -> a
    F:net.minecraft.resources.MinecraftKey tab -> b
    M:net.minecraft.network.protocol.game.PacketPlayInAdvancements openedTab(net.minecraft.advancements.Advancement) -> a
    M:net.minecraft.network.protocol.game.PacketPlayInAdvancements closedScreen() -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.network.protocol.game.PacketPlayInAdvancements$Status getAction() -> c
    M:net.minecraft.resources.MinecraftKey getTab() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket$Action -> ye$a -> net.minecraft.network.protocol.game.PacketPlayInAdvancements$Status
    F:net.minecraft.network.protocol.game.PacketPlayInAdvancements$Status OPENED_TAB -> a
    F:net.minecraft.network.protocol.game.PacketPlayInAdvancements$Status CLOSED_SCREEN -> b
net.minecraft.network.protocol.game.ServerboundSelectTradePacket -> yf -> net.minecraft.network.protocol.game.PacketPlayInTrSel
    F:int item -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:int getItem() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSetBeaconPacket -> yg -> net.minecraft.network.protocol.game.PacketPlayInBeacon
    F:java.util.Optional primary -> a
    F:java.util.Optional secondary -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:java.util.Optional getPrimary() -> b
    M:java.util.Optional getSecondary() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSetCarriedItemPacket -> yh -> net.minecraft.network.protocol.game.PacketPlayInHeldItemSlot
    F:int slot -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:int getSlot() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSetCommandBlockPacket -> yi -> net.minecraft.network.protocol.game.PacketPlayInSetCommandBlock
    F:int FLAG_TRACK_OUTPUT -> a
    F:int FLAG_CONDITIONAL -> b
    F:int FLAG_AUTOMATIC -> c
    F:net.minecraft.core.BlockPosition pos -> d
    F:java.lang.String command -> e
    F:boolean trackOutput -> f
    F:boolean conditional -> g
    F:boolean automatic -> h
    F:net.minecraft.world.level.block.entity.TileEntityCommand$Type mode -> i
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.core.BlockPosition getPos() -> b
    M:java.lang.String getCommand() -> c
    M:boolean isTrackOutput() -> d
    M:boolean isConditional() -> e
    M:boolean isAutomatic() -> f
    M:net.minecraft.world.level.block.entity.TileEntityCommand$Type getMode() -> g
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSetCommandMinecartPacket -> yj -> net.minecraft.network.protocol.game.PacketPlayInSetCommandMinecart
    F:int entity -> a
    F:java.lang.String command -> b
    F:boolean trackOutput -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.world.level.CommandBlockListenerAbstract getCommandBlock(net.minecraft.world.level.World) -> a
    M:java.lang.String getCommand() -> b
    M:boolean isTrackOutput() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSetCreativeModeSlotPacket -> yk -> net.minecraft.network.protocol.game.PacketPlayInSetCreativeSlot
    F:int slotNum -> a
    F:net.minecraft.world.item.ItemStack itemStack -> b
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:int getSlotNum() -> b
    M:net.minecraft.world.item.ItemStack getItem() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSetJigsawBlockPacket -> yl -> net.minecraft.network.protocol.game.PacketPlayInSetJigsaw
    F:net.minecraft.core.BlockPosition pos -> a
    F:net.minecraft.resources.MinecraftKey name -> b
    F:net.minecraft.resources.MinecraftKey target -> c
    F:net.minecraft.resources.MinecraftKey pool -> d
    F:java.lang.String finalState -> e
    F:net.minecraft.world.level.block.entity.TileEntityJigsaw$JointType joint -> f
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.core.BlockPosition getPos() -> b
    M:net.minecraft.resources.MinecraftKey getName() -> c
    M:net.minecraft.resources.MinecraftKey getTarget() -> d
    M:net.minecraft.resources.MinecraftKey getPool() -> e
    M:java.lang.String getFinalState() -> f
    M:net.minecraft.world.level.block.entity.TileEntityJigsaw$JointType getJoint() -> g
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSetStructureBlockPacket -> ym -> net.minecraft.network.protocol.game.PacketPlayInStruct
    F:int FLAG_IGNORE_ENTITIES -> a
    F:int FLAG_SHOW_AIR -> b
    F:int FLAG_SHOW_BOUNDING_BOX -> c
    F:net.minecraft.core.BlockPosition pos -> d
    F:net.minecraft.world.level.block.entity.TileEntityStructure$UpdateType updateType -> e
    F:net.minecraft.world.level.block.state.properties.BlockPropertyStructureMode mode -> f
    F:java.lang.String name -> g
    F:net.minecraft.core.BlockPosition offset -> h
    F:net.minecraft.core.BaseBlockPosition size -> i
    F:net.minecraft.world.level.block.EnumBlockMirror mirror -> j
    F:net.minecraft.world.level.block.EnumBlockRotation rotation -> k
    F:java.lang.String data -> l
    F:boolean ignoreEntities -> m
    F:boolean showAir -> n
    F:boolean showBoundingBox -> o
    F:float integrity -> p
    F:long seed -> q
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.core.BlockPosition getPos() -> b
    M:net.minecraft.world.level.block.entity.TileEntityStructure$UpdateType getUpdateType() -> c
    M:net.minecraft.world.level.block.state.properties.BlockPropertyStructureMode getMode() -> d
    M:java.lang.String getName() -> e
    M:net.minecraft.core.BlockPosition getOffset() -> f
    M:net.minecraft.core.BaseBlockPosition getSize() -> g
    M:net.minecraft.world.level.block.EnumBlockMirror getMirror() -> h
    M:net.minecraft.world.level.block.EnumBlockRotation getRotation() -> i
    M:java.lang.String getData() -> j
    M:boolean isIgnoreEntities() -> k
    M:boolean isShowAir() -> l
    M:boolean isShowBoundingBox() -> m
    M:float getIntegrity() -> n
    M:long getSeed() -> o
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSignUpdatePacket -> yn -> net.minecraft.network.protocol.game.PacketPlayInUpdateSign
    F:int MAX_STRING_LENGTH -> a
    F:net.minecraft.core.BlockPosition pos -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.core.BlockPosition getPos() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSwingPacket -> yo -> net.minecraft.network.protocol.game.PacketPlayInArmAnimation
    F:net.minecraft.world.EnumHand hand -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.world.EnumHand getHand() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundTeleportToEntityPacket -> yp -> net.minecraft.network.protocol.game.PacketPlayInSpectate
    F:java.util.UUID uuid -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.world.entity.Entity getEntity(net.minecraft.server.level.WorldServer) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundUseItemOnPacket -> yq -> net.minecraft.network.protocol.game.PacketPlayInUseItem
    F:net.minecraft.world.phys.MovingObjectPositionBlock blockHit -> a
    F:net.minecraft.world.EnumHand hand -> b
    F:int sequence -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.world.EnumHand getHand() -> b
    M:net.minecraft.world.phys.MovingObjectPositionBlock getHitResult() -> c
    M:int getSequence() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundUseItemPacket -> yr -> net.minecraft.network.protocol.game.PacketPlayInBlockPlace
    F:net.minecraft.world.EnumHand hand -> a
    F:int sequence -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.game.PacketListenerPlayIn) -> a
    M:net.minecraft.world.EnumHand getHand() -> b
    M:int getSequence() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.VecDeltaCodec -> ys -> net.minecraft.network.protocol.game.VecDeltaCodec
    F:double TRUNCATION_STEPS -> a
    F:net.minecraft.world.phys.Vec3D base -> b
    M:long encode(double) -> a
    M:double decode(long) -> a
    M:net.minecraft.world.phys.Vec3D decode(long,long,long) -> a
    M:long encodeX(net.minecraft.world.phys.Vec3D) -> a
    M:long encodeY(net.minecraft.world.phys.Vec3D) -> b
    M:long encodeZ(net.minecraft.world.phys.Vec3D) -> c
    M:net.minecraft.world.phys.Vec3D delta(net.minecraft.world.phys.Vec3D) -> d
    M:void setBase(net.minecraft.world.phys.Vec3D) -> e
net.minecraft.network.protocol.handshake.ClientIntentionPacket -> yu -> net.minecraft.network.protocol.handshake.PacketHandshakingInSetProtocol
    F:int MAX_HOST_LENGTH -> a
    F:int protocolVersion -> b
    F:java.lang.String hostName -> c
    F:int port -> d
    F:net.minecraft.network.EnumProtocol intention -> e
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.handshake.PacketHandshakingInListener) -> a
    M:net.minecraft.network.EnumProtocol getIntention() -> b
    M:int getProtocolVersion() -> c
    M:java.lang.String getHostName() -> d
    M:int getPort() -> e
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.handshake.ServerHandshakePacketListener -> yv -> net.minecraft.network.protocol.handshake.PacketHandshakingInListener
net.minecraft.network.protocol.login.ClientLoginPacketListener -> yx -> net.minecraft.network.protocol.login.PacketLoginOutListener
net.minecraft.network.protocol.login.ClientboundCustomQueryPacket -> yy -> net.minecraft.network.protocol.login.PacketLoginOutCustomPayload
    F:int MAX_PAYLOAD_SIZE -> a
    F:int transactionId -> b
    F:net.minecraft.resources.MinecraftKey identifier -> c
    F:net.minecraft.network.PacketDataSerializer data -> d
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.login.PacketLoginOutListener) -> a
    M:int getTransactionId() -> b
    M:net.minecraft.resources.MinecraftKey getIdentifier() -> c
    M:net.minecraft.network.PacketDataSerializer getData() -> d
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.login.ClientboundGameProfilePacket -> yz -> net.minecraft.network.protocol.login.PacketLoginOutSuccess
    F:com.mojang.authlib.GameProfile gameProfile -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.login.PacketLoginOutListener) -> a
    M:com.mojang.authlib.GameProfile getGameProfile() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.login.ClientboundHelloPacket -> za -> net.minecraft.network.protocol.login.PacketLoginOutEncryptionBegin
    F:java.lang.String serverId -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.login.PacketLoginOutListener) -> a
    M:java.lang.String getServerId() -> b
    M:java.security.PublicKey getPublicKey() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.login.ClientboundLoginCompressionPacket -> zb -> net.minecraft.network.protocol.login.PacketLoginOutSetCompression
    F:int compressionThreshold -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.login.PacketLoginOutListener) -> a
    M:int getCompressionThreshold() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket -> zc -> net.minecraft.network.protocol.login.PacketLoginOutDisconnect
    F:net.minecraft.network.chat.IChatBaseComponent reason -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.login.PacketLoginOutListener) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getReason() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.login.ServerLoginPacketListener -> zd -> net.minecraft.network.protocol.login.PacketLoginInListener
net.minecraft.network.protocol.login.ServerboundCustomQueryPacket -> ze -> net.minecraft.network.protocol.login.PacketLoginInCustomPayload
    F:int MAX_PAYLOAD_SIZE -> a
    F:int transactionId -> b
    F:net.minecraft.network.PacketDataSerializer data -> c
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.login.PacketLoginInListener) -> a
    M:int getTransactionId() -> b
    M:net.minecraft.network.PacketDataSerializer getData() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.login.ServerboundHelloPacket -> zf -> net.minecraft.network.protocol.login.PacketLoginInStart
    F:java.lang.String name -> a
    F:java.util.Optional publicKey -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.login.PacketLoginInListener) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String name() -> b
    M:java.util.Optional publicKey() -> c
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.login.ServerboundKeyPacket -> zg -> net.minecraft.network.protocol.login.PacketLoginInEncryptionBegin
    F:com.mojang.datafixers.util.Either nonceOrSaltSignature -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.login.PacketLoginInListener) -> a
    M:javax.crypto.SecretKey getSecretKey(java.security.PrivateKey) -> a
    M:boolean isChallengeSignatureValid(byte[],net.minecraft.world.entity.player.ProfilePublicKey) -> a
    M:boolean isNonceValid(byte[],java.security.PrivateKey) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.status.ClientStatusPacketListener -> zj -> net.minecraft.network.protocol.status.PacketStatusOutListener
net.minecraft.network.protocol.status.ClientboundPongResponsePacket -> zk -> net.minecraft.network.protocol.status.PacketStatusOutPong
    F:long time -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.status.PacketStatusOutListener) -> a
    M:long getTime() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.status.ClientboundStatusResponsePacket -> zl -> net.minecraft.network.protocol.status.PacketStatusOutServerInfo
    F:com.google.gson.Gson GSON -> a
    F:net.minecraft.network.protocol.status.ServerPing status -> b
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.status.PacketStatusOutListener) -> a
    M:net.minecraft.network.protocol.status.ServerPing getStatus() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.status.ServerStatus -> zm -> net.minecraft.network.protocol.status.ServerPing
    F:int FAVICON_WIDTH -> a
    F:int FAVICON_HEIGHT -> b
    F:net.minecraft.network.chat.IChatBaseComponent description -> c
    F:net.minecraft.network.protocol.status.ServerPing$ServerPingPlayerSample players -> d
    F:net.minecraft.network.protocol.status.ServerPing$ServerData version -> e
    F:java.lang.String favicon -> f
    F:boolean previewsChat -> g
    M:net.minecraft.network.chat.IChatBaseComponent getDescription() -> a
    M:void setDescription(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:net.minecraft.network.protocol.status.ServerPing$ServerPingPlayerSample getPlayers() -> b
    M:void setPlayers(net.minecraft.network.protocol.status.ServerPing$ServerPingPlayerSample) -> a
    M:net.minecraft.network.protocol.status.ServerPing$ServerData getVersion() -> c
    M:void setVersion(net.minecraft.network.protocol.status.ServerPing$ServerData) -> a
    M:void setFavicon(java.lang.String) -> a
    M:java.lang.String getFavicon() -> d
    M:void setPreviewsChat(boolean) -> a
    M:boolean previewsChat() -> e
net.minecraft.network.protocol.status.ServerStatus$Players -> zm$a -> net.minecraft.network.protocol.status.ServerPing$ServerPingPlayerSample
    F:int maxPlayers -> a
    F:int numPlayers -> b
    M:int getMaxPlayers() -> a
    M:int getNumPlayers() -> b
    M:void setSample(com.mojang.authlib.GameProfile[]) -> a
net.minecraft.network.protocol.status.ServerStatus$Players$Serializer -> zm$a$a -> net.minecraft.network.protocol.status.ServerPing$ServerPingPlayerSample$Serializer
    M:net.minecraft.network.protocol.status.ServerPing$ServerPingPlayerSample deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    M:com.google.gson.JsonElement serialize(net.minecraft.network.protocol.status.ServerPing$ServerPingPlayerSample,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    M:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    M:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.network.protocol.status.ServerStatus$Serializer -> zm$b -> net.minecraft.network.protocol.status.ServerPing$Serializer
    M:net.minecraft.network.protocol.status.ServerPing deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    M:com.google.gson.JsonElement serialize(net.minecraft.network.protocol.status.ServerPing,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    M:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    M:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.network.protocol.status.ServerStatus$Version -> zm$c -> net.minecraft.network.protocol.status.ServerPing$ServerData
    F:java.lang.String name -> a
    F:int protocol -> b
    M:java.lang.String getName() -> a
    M:int getProtocol() -> b
net.minecraft.network.protocol.status.ServerStatus$Version$Serializer -> zm$c$a -> net.minecraft.network.protocol.status.ServerPing$ServerData$Serializer
    M:net.minecraft.network.protocol.status.ServerPing$ServerData deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    M:com.google.gson.JsonElement serialize(net.minecraft.network.protocol.status.ServerPing$ServerData,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    M:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    M:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.network.protocol.status.ServerStatusPacketListener -> zn -> net.minecraft.network.protocol.status.PacketStatusInListener
net.minecraft.network.protocol.status.ServerboundPingRequestPacket -> zo -> net.minecraft.network.protocol.status.PacketStatusInPing
    F:long time -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.status.PacketStatusInListener) -> a
    M:long getTime() -> b
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.status.ServerboundStatusRequestPacket -> zp -> net.minecraft.network.protocol.status.PacketStatusInStart
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:void handle(net.minecraft.network.protocol.status.PacketStatusInListener) -> a
    M:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.syncher.EntityDataAccessor -> zr -> net.minecraft.network.syncher.DataWatcherObject
    F:int id -> a
    F:net.minecraft.network.syncher.DataWatcherSerializer serializer -> b
    M:int getId() -> a
    M:net.minecraft.network.syncher.DataWatcherSerializer getSerializer() -> b
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.network.syncher.EntityDataSerializer -> zs -> net.minecraft.network.syncher.DataWatcherSerializer
    M:net.minecraft.network.syncher.DataWatcherObject createAccessor(int) -> a
    M:net.minecraft.network.syncher.DataWatcherSerializer simple(net.minecraft.network.FriendlyByteBuf$Writer,net.minecraft.network.FriendlyByteBuf$Reader) -> a
    M:net.minecraft.network.syncher.DataWatcherSerializer optional(net.minecraft.network.FriendlyByteBuf$Writer,net.minecraft.network.FriendlyByteBuf$Reader) -> b
    M:net.minecraft.network.syncher.DataWatcherSerializer simpleEnum(java.lang.Class) -> a
    M:net.minecraft.network.syncher.DataWatcherSerializer simpleId(net.minecraft.core.Registry) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,java.lang.Object) -> a
    M:java.lang.Object read(net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.network.syncher.EntityDataSerializer$ForValueType -> zs$a -> net.minecraft.network.syncher.DataWatcherSerializer$a
    M:java.lang.Object copy(java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers -> zt -> net.minecraft.network.syncher.DataWatcherRegistry
    F:net.minecraft.util.RegistryID SERIALIZERS -> x
    F:net.minecraft.network.syncher.DataWatcherSerializer BYTE -> a
    F:net.minecraft.network.syncher.DataWatcherSerializer INT -> b
    F:net.minecraft.network.syncher.DataWatcherSerializer FLOAT -> c
    F:net.minecraft.network.syncher.DataWatcherSerializer STRING -> d
    F:net.minecraft.network.syncher.DataWatcherSerializer COMPONENT -> e
    F:net.minecraft.network.syncher.DataWatcherSerializer OPTIONAL_COMPONENT -> f
    F:net.minecraft.network.syncher.DataWatcherSerializer ITEM_STACK -> g
    F:net.minecraft.network.syncher.DataWatcherSerializer BLOCK_STATE -> h
    F:net.minecraft.network.syncher.DataWatcherSerializer BOOLEAN -> i
    F:net.minecraft.network.syncher.DataWatcherSerializer PARTICLE -> j
    F:net.minecraft.network.syncher.DataWatcherSerializer ROTATIONS -> k
    F:net.minecraft.network.syncher.DataWatcherSerializer BLOCK_POS -> l
    F:net.minecraft.network.syncher.DataWatcherSerializer OPTIONAL_BLOCK_POS -> m
    F:net.minecraft.network.syncher.DataWatcherSerializer DIRECTION -> n
    F:net.minecraft.network.syncher.DataWatcherSerializer OPTIONAL_UUID -> o
    F:net.minecraft.network.syncher.DataWatcherSerializer OPTIONAL_GLOBAL_POS -> p
    F:net.minecraft.network.syncher.DataWatcherSerializer COMPOUND_TAG -> q
    F:net.minecraft.network.syncher.DataWatcherSerializer VILLAGER_DATA -> r
    F:net.minecraft.network.syncher.DataWatcherSerializer OPTIONAL_UNSIGNED_INT -> s
    F:net.minecraft.network.syncher.DataWatcherSerializer POSE -> t
    F:net.minecraft.network.syncher.DataWatcherSerializer CAT_VARIANT -> u
    F:net.minecraft.network.syncher.DataWatcherSerializer FROG_VARIANT -> v
    F:net.minecraft.network.syncher.DataWatcherSerializer PAINTING_VARIANT -> w
    M:void registerSerializer(net.minecraft.network.syncher.DataWatcherSerializer) -> a
    M:net.minecraft.network.syncher.DataWatcherSerializer getSerializer(int) -> a
    M:int getSerializedId(net.minecraft.network.syncher.DataWatcherSerializer) -> b
    M:void write(net.minecraft.network.PacketDataSerializer,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack read(net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.world.item.ItemStack copy(net.minecraft.world.item.ItemStack) -> a
    M:java.lang.Object copy(java.lang.Object) -> a
    M:java.lang.Object read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,java.lang.Object) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,java.util.Optional) -> a
    M:java.util.Optional read(net.minecraft.network.PacketDataSerializer) -> b
    M:java.lang.Object read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,java.lang.Object) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,net.minecraft.core.particles.ParticleParam) -> a
    M:net.minecraft.core.particles.ParticleParam read(net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.core.particles.ParticleParam readParticle(net.minecraft.network.PacketDataSerializer,net.minecraft.core.particles.Particle) -> a
    M:java.lang.Object read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,java.lang.Object) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,net.minecraft.core.Vector3f) -> a
    M:net.minecraft.core.Vector3f read(net.minecraft.network.PacketDataSerializer) -> b
    M:java.lang.Object read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,java.lang.Object) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagCompound read(net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.nbt.NBTTagCompound copy(net.minecraft.nbt.NBTTagCompound) -> a
    M:java.lang.Object copy(java.lang.Object) -> a
    M:java.lang.Object read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,java.lang.Object) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,net.minecraft.world.entity.npc.VillagerData) -> a
    M:net.minecraft.world.entity.npc.VillagerData read(net.minecraft.network.PacketDataSerializer) -> b
    M:java.lang.Object read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,java.lang.Object) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,java.util.OptionalInt) -> a
    M:java.util.OptionalInt read(net.minecraft.network.PacketDataSerializer) -> b
    M:java.lang.Object read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,java.lang.Object) -> a
net.minecraft.network.syncher.SynchedEntityData -> zu -> net.minecraft.network.syncher.DataWatcher
    F:org.slf4j.Logger LOGGER -> a
    F:it.unimi.dsi.fastutil.objects.Object2IntMap ENTITY_ID_POOL -> b
    F:int EOF_MARKER -> c
    F:int MAX_ID_VALUE -> d
    F:net.minecraft.world.entity.Entity entity -> e
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap itemsById -> f
    F:java.util.concurrent.locks.ReadWriteLock lock -> g
    F:boolean isEmpty -> h
    F:boolean isDirty -> i
    M:net.minecraft.network.syncher.DataWatcherObject defineId(java.lang.Class,net.minecraft.network.syncher.DataWatcherSerializer) -> a
    M:void define(net.minecraft.network.syncher.DataWatcherObject,java.lang.Object) -> a
    M:void createDataItem(net.minecraft.network.syncher.DataWatcherObject,java.lang.Object) -> c
    M:net.minecraft.network.syncher.DataWatcher$Item getItem(net.minecraft.network.syncher.DataWatcherObject) -> b
    M:java.lang.Object get(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:void set(net.minecraft.network.syncher.DataWatcherObject,java.lang.Object) -> b
    M:boolean isDirty() -> a
    M:void pack(java.util.List,net.minecraft.network.PacketDataSerializer) -> a
    M:java.util.List packDirty() -> b
    M:java.util.List getAll() -> c
    M:void writeDataItem(net.minecraft.network.PacketDataSerializer,net.minecraft.network.syncher.DataWatcher$Item) -> a
    M:java.util.List unpack(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.network.syncher.DataWatcher$Item genericHelper(net.minecraft.network.PacketDataSerializer,int,net.minecraft.network.syncher.DataWatcherSerializer) -> a
    M:void assignValues(java.util.List) -> a
    M:void assignValue(net.minecraft.network.syncher.DataWatcher$Item,net.minecraft.network.syncher.DataWatcher$Item) -> a
    M:boolean isEmpty() -> d
    M:void clearDirty() -> e
net.minecraft.network.syncher.SynchedEntityData$DataItem -> zu$a -> net.minecraft.network.syncher.DataWatcher$Item
    F:net.minecraft.network.syncher.DataWatcherObject accessor -> a
    F:java.lang.Object value -> b
    F:boolean dirty -> c
    M:net.minecraft.network.syncher.DataWatcherObject getAccessor() -> a
    M:void setValue(java.lang.Object) -> a
    M:java.lang.Object getValue() -> b
    M:boolean isDirty() -> c
    M:void setDirty(boolean) -> a
    M:net.minecraft.network.syncher.DataWatcher$Item copy() -> d
net.minecraft.recipebook.PlaceRecipe -> zy -> net.minecraft.recipebook.AutoRecipeAbstract
    M:void placeRecipe(int,int,int,net.minecraft.world.item.crafting.IRecipe,java.util.Iterator,int) -> a
net.minecraft.recipebook.ServerPlaceRecipe -> zz -> net.minecraft.recipebook.AutoRecipe
    F:org.slf4j.Logger LOGGER -> d
    F:net.minecraft.world.entity.player.AutoRecipeStackManager stackedContents -> a
    F:net.minecraft.world.entity.player.PlayerInventory inventory -> b
    F:net.minecraft.world.inventory.ContainerRecipeBook menu -> c
    M:void recipeClicked(net.minecraft.server.level.EntityPlayer,net.minecraft.world.item.crafting.IRecipe,boolean) -> a
    M:void clearGrid(boolean) -> a
    M:void handleRecipeClicked(net.minecraft.world.item.crafting.IRecipe,boolean) -> a
    M:void addItemToSlot(java.util.Iterator,int,int,int,int) -> a
    M:int getStackSize(boolean,int,boolean) -> a
    M:void moveItemToGrid(net.minecraft.world.inventory.Slot,net.minecraft.world.item.ItemStack) -> a
    M:boolean testClearGrid() -> a
    M:int getAmountOfFreeSlotsInInventory() -> b
net.minecraft.resources.DelegatingOps -> aab -> net.minecraft.resources.DynamicOpsWrapper
    F:com.mojang.serialization.DynamicOps delegate -> a
    M:java.lang.Object empty() -> empty
    M:java.lang.Object remove(java.lang.Object,java.lang.String) -> remove
net.minecraft.resources.HolderSetCodec -> aac -> net.minecraft.resources.HolderSetCodec
    F:net.minecraft.resources.ResourceKey registryKey -> a
    F:com.mojang.serialization.Codec elementCodec -> b
    F:com.mojang.serialization.Codec homogenousListCodec -> c
    F:com.mojang.serialization.Codec registryAwareCodec -> d
    M:com.mojang.serialization.Codec homogenousList(com.mojang.serialization.Codec,boolean) -> a
    M:com.mojang.serialization.Codec create(net.minecraft.resources.ResourceKey,com.mojang.serialization.Codec,boolean) -> a
    M:com.mojang.serialization.DataResult decode(com.mojang.serialization.DynamicOps,java.lang.Object) -> decode
    M:com.mojang.serialization.DataResult encode(net.minecraft.core.HolderSet,com.mojang.serialization.DynamicOps,java.lang.Object) -> a
    M:com.mojang.serialization.DataResult decodeWithoutRegistry(com.mojang.serialization.DynamicOps,java.lang.Object) -> a
    M:com.mojang.serialization.DataResult encodeWithoutRegistry(net.minecraft.core.HolderSet,com.mojang.serialization.DynamicOps,java.lang.Object) -> b
    M:com.mojang.serialization.DataResult encode(java.lang.Object,com.mojang.serialization.DynamicOps,java.lang.Object) -> encode
net.minecraft.resources.RegistryFileCodec -> aad -> net.minecraft.resources.RegistryFileCodec
    F:net.minecraft.resources.ResourceKey registryKey -> a
    F:com.mojang.serialization.Codec elementCodec -> b
    F:boolean allowInline -> c
    M:net.minecraft.resources.RegistryFileCodec create(net.minecraft.resources.ResourceKey,com.mojang.serialization.Codec) -> a
    M:net.minecraft.resources.RegistryFileCodec create(net.minecraft.resources.ResourceKey,com.mojang.serialization.Codec,boolean) -> a
    M:com.mojang.serialization.DataResult encode(net.minecraft.core.Holder,com.mojang.serialization.DynamicOps,java.lang.Object) -> a
    M:com.mojang.serialization.DataResult decode(com.mojang.serialization.DynamicOps,java.lang.Object) -> decode
    M:com.mojang.serialization.DataResult encode(java.lang.Object,com.mojang.serialization.DynamicOps,java.lang.Object) -> encode
net.minecraft.resources.RegistryFixedCodec -> aae -> net.minecraft.resources.RegistryFixedCodec
    F:net.minecraft.resources.ResourceKey registryKey -> a
    M:net.minecraft.resources.RegistryFixedCodec create(net.minecraft.resources.ResourceKey) -> a
    M:com.mojang.serialization.DataResult encode(net.minecraft.core.Holder,com.mojang.serialization.DynamicOps,java.lang.Object) -> a
    M:com.mojang.serialization.DataResult decode(com.mojang.serialization.DynamicOps,java.lang.Object) -> decode
    M:com.mojang.serialization.DataResult encode(java.lang.Object,com.mojang.serialization.DynamicOps,java.lang.Object) -> encode
net.minecraft.resources.RegistryLoader -> aaf -> net.minecraft.resources.RegistryLoader
    F:net.minecraft.resources.RegistryResourceAccess resources -> a
    F:java.util.Map readCache -> b
    M:com.mojang.serialization.DataResult overrideRegistryFromResources(net.minecraft.core.IRegistryWritable,net.minecraft.resources.ResourceKey,com.mojang.serialization.Codec,com.mojang.serialization.DynamicOps) -> a
    M:com.mojang.serialization.DataResult overrideElementFromResources(net.minecraft.core.IRegistryWritable,net.minecraft.resources.ResourceKey,com.mojang.serialization.Codec,net.minecraft.resources.ResourceKey,com.mojang.serialization.DynamicOps) -> a
    M:com.mojang.serialization.DataResult overrideElementFromResources(net.minecraft.core.IRegistryWritable,net.minecraft.resources.ResourceKey,com.mojang.serialization.Codec,net.minecraft.resources.ResourceKey,java.util.Optional,com.mojang.serialization.DynamicOps) -> a
    M:net.minecraft.resources.RegistryLoader$ReadCache readCache(net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.resources.RegistryLoader$Bound bind(net.minecraft.core.RegistryAccess$Writable) -> a
net.minecraft.resources.RegistryLoader$Bound -> aaf$a -> net.minecraft.resources.RegistryLoader$a
    F:net.minecraft.core.RegistryAccess$Writable access -> a
    F:net.minecraft.resources.RegistryLoader loader -> b
    M:com.mojang.serialization.DataResult overrideRegistryFromResources(net.minecraft.resources.ResourceKey,com.mojang.serialization.Codec,com.mojang.serialization.DynamicOps) -> a
    M:com.mojang.serialization.DataResult overrideElementFromResources(net.minecraft.resources.ResourceKey,com.mojang.serialization.Codec,net.minecraft.resources.ResourceKey,com.mojang.serialization.DynamicOps) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.RegistryAccess$Writable access() -> a
    M:net.minecraft.resources.RegistryLoader loader() -> b
net.minecraft.resources.RegistryLoader$ReadCache -> aaf$b -> net.minecraft.resources.RegistryLoader$b
    F:java.util.Map values -> a
net.minecraft.resources.RegistryOps -> aag -> net.minecraft.resources.RegistryOps
    F:java.util.Optional loader -> b
    F:net.minecraft.core.IRegistryCustom registryAccess -> c
    F:com.mojang.serialization.DynamicOps asJson -> d
    M:net.minecraft.resources.RegistryOps create(com.mojang.serialization.DynamicOps,net.minecraft.core.IRegistryCustom) -> a
    M:net.minecraft.resources.RegistryOps createAndLoad(com.mojang.serialization.DynamicOps,net.minecraft.core.RegistryAccess$Writable,net.minecraft.server.packs.resources.IResourceManager) -> a
    M:net.minecraft.resources.RegistryOps createAndLoad(com.mojang.serialization.DynamicOps,net.minecraft.core.RegistryAccess$Writable,net.minecraft.resources.RegistryResourceAccess) -> a
    M:java.util.Optional registry(net.minecraft.resources.ResourceKey) -> a
    M:java.util.Optional registryLoader() -> a
    M:com.mojang.serialization.DynamicOps getAsJson() -> b
    M:com.mojang.serialization.MapCodec retrieveRegistry(net.minecraft.resources.ResourceKey) -> b
net.minecraft.resources.RegistryResourceAccess -> aah -> net.minecraft.resources.RegistryResourceAccess
    F:java.lang.String JSON -> b
    M:net.minecraft.resources.RegistryResourceAccess forResourceManager(net.minecraft.server.packs.resources.IResourceManager) -> a
    M:java.util.Map listResources(net.minecraft.resources.ResourceKey) -> a
    M:java.util.Optional getResource(net.minecraft.resources.ResourceKey) -> b
    M:com.mojang.serialization.DataResult decodeElement(com.mojang.serialization.DynamicOps,com.mojang.serialization.Decoder,java.io.Reader) -> a
    M:java.lang.String registryDirPath(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.resources.MinecraftKey elementPath(net.minecraft.resources.ResourceKey) -> c
net.minecraft.resources.RegistryResourceAccess$EntryThunk -> aah$a -> net.minecraft.resources.RegistryResourceAccess$a
net.minecraft.resources.RegistryResourceAccess$InMemoryStorage -> aah$b -> net.minecraft.resources.RegistryResourceAccess$InMemoryStorage
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.Map entries -> b
    M:void add(net.minecraft.core.IRegistryCustom,net.minecraft.resources.ResourceKey,com.mojang.serialization.Encoder,int,java.lang.Object,com.mojang.serialization.Lifecycle) -> a
    M:java.util.Map listResources(net.minecraft.resources.ResourceKey) -> a
    M:java.util.Optional getResource(net.minecraft.resources.ResourceKey) -> b
net.minecraft.resources.RegistryResourceAccess$InMemoryStorage$Entry -> aah$b$a -> net.minecraft.resources.RegistryResourceAccess$InMemoryStorage$Entry
    F:com.google.gson.JsonElement data -> a
    F:int id -> b
    F:com.mojang.serialization.Lifecycle lifecycle -> c
    M:com.mojang.serialization.DataResult parse(com.mojang.serialization.DynamicOps,com.mojang.serialization.Decoder) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:com.google.gson.JsonElement data() -> a
    M:int id() -> b
    M:com.mojang.serialization.Lifecycle lifecycle() -> c
net.minecraft.resources.RegistryResourceAccess$ParsedEntry -> aah$c -> net.minecraft.resources.RegistryResourceAccess$ParsedEntry
    F:java.lang.Object value -> a
    F:java.util.OptionalInt fixedId -> b
    M:net.minecraft.resources.RegistryResourceAccess$ParsedEntry createWithoutId(java.lang.Object) -> a
    M:net.minecraft.resources.RegistryResourceAccess$ParsedEntry createWithId(java.lang.Object,int) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.Object value() -> a
    M:java.util.OptionalInt fixedId() -> b
net.minecraft.resources.ResourceKey -> aai -> net.minecraft.resources.ResourceKey
    F:java.util.Map VALUES -> a
    F:net.minecraft.resources.MinecraftKey registryName -> b
    F:net.minecraft.resources.MinecraftKey location -> c
    M:com.mojang.serialization.Codec codec(net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.resources.ResourceKey create(net.minecraft.resources.ResourceKey,net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.resources.ResourceKey createRegistryKey(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.resources.ResourceKey create(net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> a
    M:boolean isFor(net.minecraft.resources.ResourceKey) -> b
    M:java.util.Optional cast(net.minecraft.resources.ResourceKey) -> c
    M:net.minecraft.resources.MinecraftKey location() -> a
    M:net.minecraft.resources.MinecraftKey registry() -> b
net.minecraft.resources.ResourceLocation -> aaj -> net.minecraft.resources.MinecraftKey
    F:com.mojang.serialization.Codec CODEC -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID -> g
    F:char NAMESPACE_SEPARATOR -> b
    F:java.lang.String DEFAULT_NAMESPACE -> c
    F:java.lang.String REALMS_NAMESPACE -> d
    F:java.lang.String namespace -> e
    F:java.lang.String path -> f
    M:net.minecraft.resources.MinecraftKey of(java.lang.String,char) -> a
    M:net.minecraft.resources.MinecraftKey tryParse(java.lang.String) -> a
    M:net.minecraft.resources.MinecraftKey tryBuild(java.lang.String,java.lang.String) -> a
    M:com.mojang.serialization.DataResult read(java.lang.String) -> b
    M:java.lang.String getPath() -> a
    M:java.lang.String getNamespace() -> b
    M:boolean equals(java.lang.Object) -> equals
    M:int compareTo(net.minecraft.resources.MinecraftKey) -> a
    M:java.lang.String toDebugFileName() -> c
    M:java.lang.String toLanguageKey() -> d
    M:java.lang.String toShortLanguageKey() -> e
    M:java.lang.String toLanguageKey(java.lang.String) -> c
    M:net.minecraft.resources.MinecraftKey read(com.mojang.brigadier.StringReader) -> a
    M:boolean isAllowedInResourceLocation(char) -> a
    M:boolean isValidPath(java.lang.String) -> e
    M:boolean isValidNamespace(java.lang.String) -> f
    M:boolean validPathChar(char) -> b
    M:boolean validNamespaceChar(char) -> c
    M:boolean isValidResourceLocation(java.lang.String) -> d
net.minecraft.resources.ResourceLocation$Serializer -> aaj$a -> net.minecraft.resources.MinecraftKey$a
    M:net.minecraft.resources.MinecraftKey deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    M:com.google.gson.JsonElement serialize(net.minecraft.resources.MinecraftKey,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    M:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    M:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.server.Bootstrap -> aal -> net.minecraft.server.DispenserRegistry
    F:java.io.PrintStream STDOUT -> a
    F:boolean isBootstrapped -> b
    F:org.slf4j.Logger LOGGER -> c
    M:void bootStrap() -> a
    M:void checkTranslations(java.lang.Iterable,java.util.function.Function,java.util.Set) -> a
    M:void checkGameruleTranslations(java.util.Set) -> a
    M:java.util.Set getMissingTranslations() -> b
    M:void checkBootstrapCalled(java.util.function.Supplier) -> a
    M:java.lang.RuntimeException createBootstrapException(java.util.function.Supplier) -> b
    M:void validate() -> c
    M:void validateThatAllBiomeFeaturesHaveBiomeFilter() -> d
    M:void wrapStreams() -> e
    M:void realStdoutPrintln(java.lang.String) -> a
    M:void visit(net.minecraft.world.level.GameRules$GameRuleKey,net.minecraft.world.level.GameRules$GameRuleDefinition) -> a
net.minecraft.server.ChainedJsonException -> aam -> net.minecraft.server.ChainedJsonException
    F:java.util.List entries -> a
    F:java.lang.String message -> b
    M:void prependJsonKey(java.lang.String) -> a
    M:void setFilenameAndFlush(java.lang.String) -> b
    M:net.minecraft.server.ChainedJsonException forException(java.lang.Exception) -> a
net.minecraft.server.ChainedJsonException$Entry -> aam$a -> net.minecraft.server.ChainedJsonException$a
    F:java.lang.String filename -> a
    F:java.util.List jsonKeys -> b
    M:void addJsonKey(java.lang.String) -> a
    M:java.lang.String getFilename() -> a
    M:java.lang.String getJsonKeys() -> b
net.minecraft.server.ConsoleInput -> aan -> net.minecraft.server.ServerCommand
    F:java.lang.String msg -> a
    F:net.minecraft.commands.CommandListenerWrapper source -> b
net.minecraft.server.DebugLoggedPrintStream -> aao -> net.minecraft.server.DebugOutputStream
    F:org.slf4j.Logger LOGGER -> b
    M:void logLine(java.lang.String) -> a
net.minecraft.server.Eula -> aap -> net.minecraft.server.EULA
    F:org.slf4j.Logger LOGGER -> a
    F:java.nio.file.Path file -> b
    F:boolean agreed -> c
    M:boolean readFile() -> b
    M:boolean hasAgreedToEULA() -> a
    M:void saveDefaults() -> c
net.minecraft.server.LoggedPrintStream -> aaq -> net.minecraft.server.RedirectStream
    F:org.slf4j.Logger LOGGER -> b
    F:java.lang.String name -> a
    F:org.slf4j.Logger LOGGER -> a
    F:org.slf4j.Logger LOGGER -> n
    F:java.lang.String VANILLA_BRAND -> b
    F:float AVERAGE_TICK_TIME_SMOOTHING -> o
    F:int TICK_STATS_SPAN -> p
    F:int MS_PER_TICK -> c
    F:int OVERLOADED_THRESHOLD -> q
    F:int OVERLOADED_WARNING_INTERVAL -> r
    F:long STATUS_EXPIRE_TIME_NS -> s
    F:int MAX_STATUS_PLAYER_SAMPLE -> t
    F:int START_CHUNK_RADIUS -> d
    F:int START_TICKING_CHUNK_COUNT -> u
    F:int AUTOSAVE_INTERVAL -> v
    F:int MAX_TICK_LATENCY -> w
    F:int ABSOLUTE_MAX_WORLD_SIZE -> e
    F:net.minecraft.world.level.WorldSettings DEMO_SETTINGS -> f
    F:long DELAYED_TASKS_TICK_EXTENSION -> x
    F:com.mojang.authlib.GameProfile ANONYMOUS_PLAYER_PROFILE -> g
    F:net.minecraft.world.level.storage.Convertable$ConversionSession storageSource -> h
    F:net.minecraft.world.level.storage.WorldNBTStorage playerDataStorage -> i
    F:java.util.List tickables -> y
    F:net.minecraft.util.profiling.metrics.profiling.MetricsRecorder metricsRecorder -> z
    F:java.net.Proxy proxy -> j
    F:com.mojang.authlib.GameProfile singleplayerProfile -> aa
    F:boolean isDemo -> ab
    F:boolean isReady -> ac
    F:long lastOverloadWarning -> ad
    F:net.minecraft.server.Services services -> l
    F:long lastServerStatus -> ae
    F:java.lang.Thread serverThread -> af
    F:long nextTickTime -> ag
    F:long delayedTasksMaxNextTickTime -> ah
    F:boolean mayHaveDelayedTasks -> ai
    F:net.minecraft.server.packs.repository.ResourcePackRepository packRepository -> aj
    F:net.minecraft.server.ScoreboardServer scoreboard -> ak
    F:net.minecraft.world.level.storage.PersistentCommandStorage commandStorage -> al
    F:net.minecraft.server.bossevents.BossBattleCustomData customBossEvents -> am
    F:net.minecraft.server.CustomFunctionData functionManager -> an
    F:net.minecraft.util.CircularTimer frameTimer -> ao
    F:boolean enforceWhitelist -> ap
    F:float averageTickTime -> aq
    F:java.util.concurrent.Executor executor -> ar
    F:java.lang.String serverId -> as
    F:net.minecraft.server.MinecraftServer$ReloadableResources resources -> at
    F:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager structureTemplateManager -> au
    F:net.minecraft.world.level.storage.SaveData worldData -> m
    F:boolean isSaving -> av
    F:net.minecraft.server.packs.resources.IReloadableResourceManager resourceManager -> a
    F:net.minecraft.server.DataPackResources managers -> b
    F:java.lang.String url -> a
    F:java.lang.String hash -> b
    F:boolean isRequired -> c
    F:net.minecraft.network.chat.IChatBaseComponent prompt -> d
    F:long startNanos -> a
    F:int startTick -> b
    M:void println(java.lang.String) -> println
    M:void println(java.lang.Object) -> println
    M:void logLine(java.lang.String) -> a
    M:void main(java.lang.String[]) -> main
    M:void forceUpgrade(net.minecraft.world.level.storage.Convertable$ConversionSession,com.mojang.datafixers.DataFixer,boolean,java.util.function.BooleanSupplier,net.minecraft.world.level.levelgen.GeneratorSettings) -> a
    M:void run() -> run
    M:net.minecraft.server.MinecraftServer spin(java.util.function.Function) -> a
    M:void readScoreboard(net.minecraft.world.level.storage.WorldPersistentData) -> a
    M:void forceDifficulty() -> q
    M:void createLevels(net.minecraft.server.level.progress.WorldLoadListener) -> a
    M:void setInitialSpawn(net.minecraft.server.level.WorldServer,net.minecraft.world.level.storage.IWorldDataServer,boolean,boolean) -> a
    M:void setupDebugLevel(net.minecraft.world.level.storage.SaveData) -> a
    M:void prepareLevels(net.minecraft.server.level.progress.WorldLoadListener) -> b
    M:boolean isHardcore() -> g
    M:boolean saveAllChunks(boolean,boolean,boolean) -> a
    M:boolean saveEverything(boolean,boolean,boolean) -> b
    M:void close() -> close
    M:void stopServer() -> s
    M:boolean isRunning() -> u
    M:void halt(boolean) -> a
    M:void runServer() -> v
    M:net.minecraft.CrashReport constructOrExtractCrashReport(java.lang.Throwable) -> a
    M:boolean haveTime() -> bg
    M:void waitUntilNextTick() -> w
    M:net.minecraft.server.TickTask wrapRunnable(java.lang.Runnable) -> a
    M:boolean shouldRun(net.minecraft.server.TickTask) -> a
    M:boolean pollTask() -> x
    M:boolean pollTaskInternal() -> bh
    M:void doRunTask(net.minecraft.server.TickTask) -> b
    M:void updateStatusIcon(net.minecraft.network.protocol.status.ServerPing) -> a
    M:java.util.Optional getWorldScreenshotFile() -> y
    M:java.io.File getServerDirectory() -> z
    M:void onServerCrash(net.minecraft.CrashReport) -> a
    M:void onServerExit() -> f
    M:void tickServer(java.util.function.BooleanSupplier) -> a
    M:void tickChildren(java.util.function.BooleanSupplier) -> b
    M:void addTickable(java.lang.Runnable) -> b
    M:void setId(java.lang.String) -> b
    M:java.io.File getFile(java.lang.String) -> c
    M:net.minecraft.server.level.WorldServer getLevel(net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.SystemReport fillSystemReport(net.minecraft.SystemReport) -> b
    M:void sendSystemMessage(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void setPort(int) -> a
    M:void setSingleplayerProfile(com.mojang.authlib.GameProfile) -> b
    M:void setDifficulty(net.minecraft.world.EnumDifficulty,boolean) -> a
    M:int getScaledTrackingDistance(int) -> b
    M:void updateMobSpawningFlags() -> bi
    M:void setDifficultyLocked(boolean) -> b
    M:void sendDifficultyUpdate(net.minecraft.server.level.EntityPlayer) -> c
    M:void setDemo(boolean) -> c
    M:void setUsesAuthentication(boolean) -> d
    M:void setPreventProxyConnections(boolean) -> e
    M:void setPvpAllowed(boolean) -> f
    M:void setFlightAllowed(boolean) -> g
    M:void setMotd(java.lang.String) -> d
    M:boolean previewsChat() -> aa
    M:boolean isStopped() -> ab
    M:net.minecraft.server.players.PlayerList getPlayerList() -> ac
    M:void setPlayerList(net.minecraft.server.players.PlayerList) -> a
    M:void setDefaultGameType(net.minecraft.world.level.EnumGamemode) -> a
    M:net.minecraft.server.network.ServerConnection getConnection() -> ad
    M:boolean isReady() -> ae
    M:boolean hasGui() -> af
    M:boolean publishServer(net.minecraft.world.level.EnumGamemode,boolean,int) -> a
    M:int getTickCount() -> ag
    M:int getSpawnProtectionRadius() -> ah
    M:boolean isUnderSpawnProtection(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean repliesToStatus() -> ai
    M:boolean hidesOnlinePlayers() -> aj
    M:java.net.Proxy getProxy() -> ak
    M:int getPlayerIdleTimeout() -> al
    M:void setPlayerIdleTimeout(int) -> c
    M:com.mojang.authlib.minecraft.MinecraftSessionService getSessionService() -> am
    M:net.minecraft.util.SignatureValidator getServiceSignatureValidator() -> an
    M:com.mojang.authlib.GameProfileRepository getProfileRepository() -> ao
    M:net.minecraft.server.players.UserCache getProfileCache() -> ap
    M:net.minecraft.network.protocol.status.ServerPing getStatus() -> aq
    M:void invalidateStatus() -> ar
    M:int getAbsoluteMaxWorldSize() -> as
    M:boolean scheduleExecutables() -> at
    M:void executeIfPossible(java.lang.Runnable) -> c
    M:java.lang.Thread getRunningThread() -> au
    M:int getCompressionThreshold() -> av
    M:boolean enforceSecureProfile() -> aw
    M:long getNextTickTime() -> ax
    M:com.mojang.datafixers.DataFixer getFixerUpper() -> ay
    M:int getSpawnRadius(net.minecraft.server.level.WorldServer) -> a
    M:net.minecraft.server.AdvancementDataWorld getAdvancements() -> az
    M:java.util.concurrent.CompletableFuture reloadResources(java.util.Collection) -> a
    M:net.minecraft.world.level.DataPackConfiguration configurePackRepository(net.minecraft.server.packs.repository.ResourcePackRepository,net.minecraft.world.level.DataPackConfiguration,boolean) -> a
    M:net.minecraft.world.level.DataPackConfiguration getSelectedPacks(net.minecraft.server.packs.repository.ResourcePackRepository) -> a
    M:void kickUnlistedPlayers(net.minecraft.commands.CommandListenerWrapper) -> a
    M:void setEnforceWhitelist(boolean) -> h
    M:int getProfilePermissions(com.mojang.authlib.GameProfile) -> c
    M:void dumpServerProperties(java.nio.file.Path) -> a
    M:void saveDebugReport(java.nio.file.Path) -> b
    M:void dumpMiscStats(java.nio.file.Path) -> c
    M:void dumpGameRules(java.nio.file.Path) -> d
    M:void dumpClasspath(java.nio.file.Path) -> e
    M:void dumpThreads(java.nio.file.Path) -> f
    M:void dumpNativeModules(java.nio.file.Path) -> g
    M:void startMetricsRecordingTick() -> bj
    M:void endMetricsRecordingTick() -> bk
    M:void startRecordingMetrics(java.util.function.Consumer,java.util.function.Consumer) -> a
    M:java.nio.file.Path getWorldPath(net.minecraft.world.level.storage.SavedFile) -> a
    M:net.minecraft.server.network.ITextFilter createTextFilterForPlayer(net.minecraft.server.level.EntityPlayer) -> a
    M:net.minecraft.server.level.PlayerInteractManager createGameModeForPlayer(net.minecraft.server.level.EntityPlayer) -> b
    M:boolean isCurrentlySaving() -> ba
    M:boolean isTimeProfilerRunning() -> bb
    M:void startTimeProfiler() -> bc
    M:net.minecraft.util.profiling.MethodProfilerResults stopTimeProfiler() -> bd
    M:int getMaxChainedNeighborUpdates() -> be
    M:void logMessageFrom(net.minecraft.network.chat.ChatSender,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:net.minecraft.network.chat.ChatDecorator getChatDecorator() -> bf
    M:void doRunTask(java.lang.Runnable) -> d
    M:boolean shouldRun(java.lang.Runnable) -> e
    M:java.lang.Runnable wrapRunnable(java.lang.Runnable) -> f
    M:void visit(net.minecraft.world.level.GameRules$GameRuleKey,net.minecraft.world.level.GameRules$GameRuleDefinition) -> a
    M:void close() -> close
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.server.packs.resources.IReloadableResourceManager resourceManager() -> a
    M:net.minecraft.server.DataPackResources managers() -> b
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String url() -> a
    M:java.lang.String hash() -> b
    M:boolean isRequired() -> c
    M:net.minecraft.network.chat.IChatBaseComponent prompt() -> d
    M:net.minecraft.util.profiling.MethodProfilerResults stop(long,int) -> a
    M:java.util.List getTimes(java.lang.String) -> a
    M:boolean saveResults(java.nio.file.Path) -> a
    M:long getStartTimeNano() -> a
    M:int getStartTimeTicks() -> b
    M:long getEndTimeNano() -> c
    M:int getEndTimeTicks() -> d
    M:java.lang.String getProfilerResults() -> e
net.minecraft.server.PlayerAdvancements -> aar -> net.minecraft.server.AdvancementDataPlayer
    F:org.slf4j.Logger LOGGER -> a
    F:int VISIBILITY_DEPTH -> b
    F:com.google.gson.Gson GSON -> c
    F:com.google.gson.reflect.TypeToken TYPE_TOKEN -> d
    F:com.mojang.datafixers.DataFixer dataFixer -> e
    F:net.minecraft.server.players.PlayerList playerList -> f
    F:java.io.File file -> g
    F:java.util.Map advancements -> h
    F:java.util.Set visible -> i
    F:java.util.Set visibilityChanged -> j
    F:java.util.Set progressChanged -> k
    F:net.minecraft.server.level.EntityPlayer player -> l
    F:net.minecraft.advancements.Advancement lastSelectedTab -> m
    F:boolean isFirstPacket -> n
    M:void setPlayer(net.minecraft.server.level.EntityPlayer) -> a
    M:void stopListening() -> a
    M:void reload(net.minecraft.server.AdvancementDataWorld) -> a
    M:void registerListeners(net.minecraft.server.AdvancementDataWorld) -> b
    M:void ensureAllVisible() -> c
    M:void checkForAutomaticTriggers(net.minecraft.server.AdvancementDataWorld) -> c
    M:void load(net.minecraft.server.AdvancementDataWorld) -> d
    M:void save() -> b
    M:boolean award(net.minecraft.advancements.Advancement,java.lang.String) -> a
    M:boolean revoke(net.minecraft.advancements.Advancement,java.lang.String) -> b
    M:void registerListeners(net.minecraft.advancements.Advancement) -> c
    M:void unregisterListeners(net.minecraft.advancements.Advancement) -> d
    M:void flushDirty(net.minecraft.server.level.EntityPlayer) -> b
    M:void setSelectedTab(net.minecraft.advancements.Advancement) -> a
    M:net.minecraft.advancements.AdvancementProgress getOrStartProgress(net.minecraft.advancements.Advancement) -> b
    M:void startProgress(net.minecraft.advancements.Advancement,net.minecraft.advancements.AdvancementProgress) -> a
    M:void ensureVisibility(net.minecraft.advancements.Advancement) -> e
    M:boolean shouldBeVisible(net.minecraft.advancements.Advancement) -> f
    M:boolean hasCompletedChildrenOrSelf(net.minecraft.advancements.Advancement) -> g
net.minecraft.server.ReloadableServerResources -> aas -> net.minecraft.server.DataPackResources
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.concurrent.CompletableFuture DATA_RELOAD_INITIAL_TASK -> b
    F:net.minecraft.commands.CommandBuildContext commandBuildContext -> c
    F:net.minecraft.commands.CommandDispatcher commands -> d
    F:net.minecraft.world.item.crafting.CraftingManager recipes -> e
    F:net.minecraft.tags.TagRegistry tagManager -> f
    F:net.minecraft.world.level.storage.loot.LootPredicateManager predicateManager -> g
    F:net.minecraft.world.level.storage.loot.LootTableRegistry lootTables -> h
    F:net.minecraft.world.level.storage.loot.ItemModifierManager itemModifierManager -> i
    F:net.minecraft.server.AdvancementDataWorld advancements -> j
    F:net.minecraft.server.CustomFunctionManager functionLibrary -> k
    M:net.minecraft.server.CustomFunctionManager getFunctionLibrary() -> a
    M:net.minecraft.world.level.storage.loot.LootPredicateManager getPredicateManager() -> b
    M:net.minecraft.world.level.storage.loot.LootTableRegistry getLootTables() -> c
    M:net.minecraft.world.level.storage.loot.ItemModifierManager getItemModifierManager() -> d
    M:net.minecraft.world.item.crafting.CraftingManager getRecipeManager() -> e
    M:net.minecraft.commands.CommandDispatcher getCommands() -> f
    M:net.minecraft.server.AdvancementDataWorld getAdvancements() -> g
    M:java.util.List listeners() -> h
    M:java.util.concurrent.CompletableFuture loadResources(net.minecraft.server.packs.resources.IResourceManager,net.minecraft.core.IRegistryCustom$Dimension,net.minecraft.commands.CommandDispatcher$ServerType,int,java.util.concurrent.Executor,java.util.concurrent.Executor) -> a
    M:void updateRegistryTags(net.minecraft.core.IRegistryCustom) -> a
    M:void updateRegistryTags(net.minecraft.core.IRegistryCustom,net.minecraft.tags.TagManager$LoadResult) -> a
net.minecraft.server.RunningOnDifferentThreadException -> aat -> net.minecraft.server.CancelledPacketHandleException
    F:net.minecraft.server.CancelledPacketHandleException RUNNING_ON_DIFFERENT_THREAD -> a
net.minecraft.server.ServerAdvancementManager -> aau -> net.minecraft.server.AdvancementDataWorld
    F:org.slf4j.Logger LOGGER -> a
    F:com.google.gson.Gson GSON -> b
    F:net.minecraft.advancements.Advancements advancements -> c
    F:net.minecraft.world.level.storage.loot.LootPredicateManager predicateManager -> d
    M:void apply(java.util.Map,net.minecraft.server.packs.resources.IResourceManager,net.minecraft.util.profiling.GameProfilerFiller) -> a
    M:net.minecraft.advancements.Advancement getAdvancement(net.minecraft.resources.MinecraftKey) -> a
    M:java.util.Collection getAllAdvancements() -> a
    M:void apply(java.lang.Object,net.minecraft.server.packs.resources.IResourceManager,net.minecraft.util.profiling.GameProfilerFiller) -> a
net.minecraft.server.ServerFunctionLibrary -> aav -> net.minecraft.server.CustomFunctionManager
    F:org.slf4j.Logger LOGGER -> a
    F:java.lang.String FILE_EXTENSION -> b
    F:int PATH_PREFIX_LENGTH -> c
    F:int PATH_SUFFIX_LENGTH -> d
    F:java.util.Map functions -> e
    F:net.minecraft.tags.TagDataPack tagsLoader -> f
    F:java.util.Map tags -> g
    F:int functionCompilationLevel -> h
    F:com.mojang.brigadier.CommandDispatcher dispatcher -> i
    M:java.util.Optional getFunction(net.minecraft.resources.MinecraftKey) -> a
    M:java.util.Map getFunctions() -> a
    M:java.util.Collection getTag(net.minecraft.resources.MinecraftKey) -> b
    M:java.lang.Iterable getAvailableTags() -> b
    M:java.util.concurrent.CompletableFuture reload(net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier,net.minecraft.server.packs.resources.IResourceManager,net.minecraft.util.profiling.GameProfilerFiller,net.minecraft.util.profiling.GameProfilerFiller,java.util.concurrent.Executor,java.util.concurrent.Executor) -> a
    M:java.util.List readLines(net.minecraft.server.packs.resources.IResource) -> a
net.minecraft.server.ServerFunctionManager -> aaw -> net.minecraft.server.CustomFunctionData
    F:net.minecraft.network.chat.IChatBaseComponent NO_RECURSIVE_TRACES -> a
    F:net.minecraft.resources.MinecraftKey TICK_FUNCTION_TAG -> b
    F:net.minecraft.resources.MinecraftKey LOAD_FUNCTION_TAG -> c
    F:net.minecraft.server.MinecraftServer server -> d
    F:net.minecraft.server.ServerFunctionManager$ExecutionContext context -> e
    F:java.util.List ticking -> f
    F:boolean postReload -> g
    F:net.minecraft.server.CustomFunctionManager library -> h
    M:int getCommandLimit() -> a
    M:com.mojang.brigadier.CommandDispatcher getDispatcher() -> b
    M:void tick() -> c
    M:void executeTagFunctions(java.util.Collection,net.minecraft.resources.MinecraftKey) -> a
    M:int execute(net.minecraft.commands.CustomFunction,net.minecraft.commands.CommandListenerWrapper) -> a
    M:int execute(net.minecraft.commands.CustomFunction,net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.ServerFunctionManager$TraceCallbacks) -> a
    M:void replaceLibrary(net.minecraft.server.CustomFunctionManager) -> a
    M:void postReload(net.minecraft.server.CustomFunctionManager) -> b
    M:net.minecraft.commands.CommandListenerWrapper getGameLoopSender() -> d
    M:java.util.Optional get(net.minecraft.resources.MinecraftKey) -> a
    M:java.util.Collection getTag(net.minecraft.resources.MinecraftKey) -> b
    M:java.lang.Iterable getFunctionNames() -> e
    M:java.lang.Iterable getTagNames() -> f
net.minecraft.server.ServerFunctionManager$ExecutionContext -> aaw$a -> net.minecraft.server.CustomFunctionData$a
    F:int depth -> b
    F:net.minecraft.server.ServerFunctionManager$TraceCallbacks tracer -> c
    F:java.util.Deque commandQueue -> d
    F:java.util.List nestedCalls -> e
    M:void delayFunctionCall(net.minecraft.commands.CustomFunction,net.minecraft.commands.CommandListenerWrapper) -> a
    M:int runTopCommand(net.minecraft.commands.CustomFunction,net.minecraft.commands.CommandListenerWrapper) -> b
    M:void reportError(java.lang.String) -> a
net.minecraft.server.ServerFunctionManager$QueuedCommand -> aaw$b -> net.minecraft.server.CustomFunctionData$b
    F:net.minecraft.commands.CommandListenerWrapper sender -> a
    F:int depth -> b
    F:net.minecraft.commands.CommandFunction$Entry entry -> c
    M:void execute(net.minecraft.server.CustomFunctionData,java.util.Deque,int,net.minecraft.server.ServerFunctionManager$TraceCallbacks) -> a
net.minecraft.server.ServerFunctionManager$TraceCallbacks -> aaw$c -> net.minecraft.server.CustomFunctionData$c
net.minecraft.server.ServerInterface -> aax -> net.minecraft.server.IMinecraftServer
net.minecraft.server.ServerScoreboard -> aay -> net.minecraft.server.ScoreboardServer
    F:net.minecraft.server.MinecraftServer server -> g
    F:java.util.Set trackedObjectives -> h
    F:java.util.List dirtyListeners -> i
    M:void onScoreChanged(net.minecraft.world.scores.ScoreboardScore) -> a
    M:void onPlayerRemoved(java.lang.String) -> a
    M:void onPlayerScoreRemoved(java.lang.String,net.minecraft.world.scores.ScoreboardObjective) -> a
    M:void setDisplayObjective(int,net.minecraft.world.scores.ScoreboardObjective) -> a
    M:boolean addPlayerToTeam(java.lang.String,net.minecraft.world.scores.ScoreboardTeam) -> a
    M:void removePlayerFromTeam(java.lang.String,net.minecraft.world.scores.ScoreboardTeam) -> b
    M:void onObjectiveAdded(net.minecraft.world.scores.ScoreboardObjective) -> a
    M:void onObjectiveChanged(net.minecraft.world.scores.ScoreboardObjective) -> b
    M:void onObjectiveRemoved(net.minecraft.world.scores.ScoreboardObjective) -> c
    M:void onTeamAdded(net.minecraft.world.scores.ScoreboardTeam) -> a
    M:void onTeamChanged(net.minecraft.world.scores.ScoreboardTeam) -> b
    M:void onTeamRemoved(net.minecraft.world.scores.ScoreboardTeam) -> c
    M:void addDirtyListener(java.lang.Runnable) -> a
    M:void setDirty() -> a
    M:java.util.List getStartTrackingPackets(net.minecraft.world.scores.ScoreboardObjective) -> d
    M:void startTrackingObjective(net.minecraft.world.scores.ScoreboardObjective) -> e
    M:java.util.List getStopTrackingPackets(net.minecraft.world.scores.ScoreboardObjective) -> f
    M:void stopTrackingObjective(net.minecraft.world.scores.ScoreboardObjective) -> g
    M:int getObjectiveDisplaySlotCount(net.minecraft.world.scores.ScoreboardObjective) -> h
    M:net.minecraft.world.scores.PersistentScoreboard createData() -> b
    M:net.minecraft.world.scores.PersistentScoreboard createData(net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.server.ServerScoreboard$Method -> aay$a -> net.minecraft.server.ScoreboardServer$Action
    F:net.minecraft.server.ScoreboardServer$Action CHANGE -> a
    F:net.minecraft.server.ScoreboardServer$Action REMOVE -> b
net.minecraft.server.Services -> aaz -> net.minecraft.server.Services
    F:com.mojang.authlib.minecraft.MinecraftSessionService sessionService -> a
    F:net.minecraft.util.SignatureValidator serviceSignatureValidator -> b
    F:com.mojang.authlib.GameProfileRepository profileRepository -> c
    F:net.minecraft.server.players.UserCache profileCache -> d
    F:java.lang.String USERID_CACHE_FILE -> e
    M:net.minecraft.server.Services create(com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService,java.io.File) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:com.mojang.authlib.minecraft.MinecraftSessionService sessionService() -> a
    M:net.minecraft.util.SignatureValidator serviceSignatureValidator() -> b
    M:com.mojang.authlib.GameProfileRepository profileRepository() -> c
    M:net.minecraft.server.players.UserCache profileCache() -> d
net.minecraft.server.TickTask -> aba -> net.minecraft.server.TickTask
    F:int tick -> a
    F:java.lang.Runnable runnable -> b
    M:int getTick() -> a
    M:void run() -> run
net.minecraft.server.WorldLoader -> abb -> net.minecraft.server.WorldLoader
    M:java.util.concurrent.CompletableFuture load(net.minecraft.server.WorldLoader$InitConfig,net.minecraft.server.WorldLoader$WorldDataSupplier,net.minecraft.server.WorldLoader$ResultFactory,java.util.concurrent.Executor,java.util.concurrent.Executor) -> a
net.minecraft.server.WorldLoader$InitConfig -> abb$a -> net.minecraft.server.WorldLoader$a
    F:net.minecraft.server.WorldLoader$PackConfig packConfig -> a
    F:net.minecraft.commands.CommandDispatcher$ServerType commandSelection -> b
    F:int functionCompilationLevel -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.server.WorldLoader$PackConfig packConfig() -> a
    M:net.minecraft.commands.CommandDispatcher$ServerType commandSelection() -> b
    M:int functionCompilationLevel() -> c
net.minecraft.server.WorldLoader$PackConfig -> abb$b -> net.minecraft.server.WorldLoader$b
    F:net.minecraft.server.packs.repository.ResourcePackRepository packRepository -> a
    F:net.minecraft.world.level.DataPackConfiguration initialDataPacks -> b
    F:boolean safeMode -> c
    M:com.mojang.datafixers.util.Pair createResourceManager() -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.server.packs.repository.ResourcePackRepository packRepository() -> b
    M:net.minecraft.world.level.DataPackConfiguration initialDataPacks() -> c
    M:boolean safeMode() -> d
net.minecraft.server.WorldLoader$ResultFactory -> abb$c -> net.minecraft.server.WorldLoader$c
net.minecraft.server.WorldLoader$WorldDataSupplier -> abb$d -> net.minecraft.server.WorldLoader$d
net.minecraft.server.WorldStem -> abc -> net.minecraft.server.WorldStem
    F:net.minecraft.server.packs.resources.IReloadableResourceManager resourceManager -> a
    F:net.minecraft.server.DataPackResources dataPackResources -> b
    F:net.minecraft.core.IRegistryCustom$Dimension registryAccess -> c
    F:net.minecraft.world.level.storage.SaveData worldData -> d
    M:java.util.concurrent.CompletableFuture load(net.minecraft.server.WorldLoader$InitConfig,net.minecraft.server.WorldLoader$WorldDataSupplier,java.util.concurrent.Executor,java.util.concurrent.Executor) -> a
    M:void close() -> close
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.server.packs.resources.IReloadableResourceManager resourceManager() -> a
    M:net.minecraft.server.DataPackResources dataPackResources() -> b
    M:net.minecraft.core.IRegistryCustom$Dimension registryAccess() -> c
    M:net.minecraft.world.level.storage.SaveData worldData() -> d
net.minecraft.server.bossevents.CustomBossEvent -> abd -> net.minecraft.server.bossevents.BossBattleCustom
    F:net.minecraft.resources.MinecraftKey id -> h
    F:java.util.Set players -> i
    F:int value -> j
    F:int max -> k
    M:net.minecraft.resources.MinecraftKey getTextId() -> a
    M:void addPlayer(net.minecraft.server.level.EntityPlayer) -> a
    M:void addOfflinePlayer(java.util.UUID) -> a
    M:void removePlayer(net.minecraft.server.level.EntityPlayer) -> b
    M:void removeAllPlayers() -> b
    M:int getValue() -> c
    M:int getMax() -> d
    M:void setValue(int) -> a
    M:void setMax(int) -> b
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName() -> e
    M:boolean setPlayers(java.util.Collection) -> a
    M:net.minecraft.nbt.NBTTagCompound save() -> f
    M:net.minecraft.server.bossevents.BossBattleCustom load(net.minecraft.nbt.NBTTagCompound,net.minecraft.resources.MinecraftKey) -> a
    M:void onPlayerConnect(net.minecraft.server.level.EntityPlayer) -> c
    M:void onPlayerDisconnect(net.minecraft.server.level.EntityPlayer) -> d
net.minecraft.server.bossevents.CustomBossEvents -> abe -> net.minecraft.server.bossevents.BossBattleCustomData
    F:java.util.Map events -> a
    M:net.minecraft.server.bossevents.BossBattleCustom get(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.server.bossevents.BossBattleCustom create(net.minecraft.resources.MinecraftKey,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void remove(net.minecraft.server.bossevents.BossBattleCustom) -> a
    M:java.util.Collection getIds() -> a
    M:java.util.Collection getEvents() -> b
    M:net.minecraft.nbt.NBTTagCompound save() -> c
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void onPlayerConnect(net.minecraft.server.level.EntityPlayer) -> a
    M:void onPlayerDisconnect(net.minecraft.server.level.EntityPlayer) -> b
net.minecraft.server.chase.ChaseClient -> abg -> net.minecraft.server.chase.ChaseClient
    F:org.slf4j.Logger LOGGER -> a
    F:int RECONNECT_INTERVAL_SECONDS -> b
    F:java.lang.String serverHost -> c
    F:int serverPort -> d
    F:net.minecraft.server.MinecraftServer server -> e
    F:boolean wantsToRun -> f
    F:java.net.Socket socket -> g
    F:java.lang.Thread thread -> h
    M:void start() -> a
    M:void stop() -> b
    M:void run() -> c
    M:void handleMessage(java.lang.String) -> a
    M:void handleTeleport(java.util.Scanner) -> a
    M:java.util.Optional parseTarget(java.util.Scanner) -> b
    M:void executeCommand(java.lang.String) -> b
net.minecraft.server.chase.ChaseClient$TeleportTarget -> abg$a -> net.minecraft.server.chase.ChaseClient$a
    F:net.minecraft.resources.ResourceKey level -> a
    F:net.minecraft.world.phys.Vec3D pos -> b
    F:net.minecraft.world.phys.Vec2F rot -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.resources.ResourceKey level() -> a
    M:net.minecraft.world.phys.Vec3D pos() -> b
    M:net.minecraft.world.phys.Vec2F rot() -> c
net.minecraft.server.chase.ChaseServer -> abh -> net.minecraft.server.chase.ChaseServer
    F:org.slf4j.Logger LOGGER -> a
    F:java.lang.String serverBindAddress -> b
    F:int serverPort -> c
    F:net.minecraft.server.players.PlayerList playerList -> d
    F:int broadcastIntervalMs -> e
    F:boolean wantsToRun -> f
    F:java.net.ServerSocket serverSocket -> g
    F:java.util.concurrent.CopyOnWriteArrayList clientSockets -> h
    M:void start() -> a
    M:void runSender() -> c
    M:void stop() -> b
    M:void runAcceptor() -> d
    M:net.minecraft.server.chase.ChaseServer$PlayerPosition getPlayerPosition() -> e
net.minecraft.server.chase.ChaseServer$PlayerPosition -> abh$a -> net.minecraft.server.chase.ChaseServer$a
    F:java.lang.String dimensionName -> a
    F:double x -> b
    F:double y -> c
    F:double z -> d
    F:float yRot -> e
    F:float xRot -> f
    M:java.lang.String format() -> g
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String dimensionName() -> a
    M:double x() -> b
    M:double y() -> c
    M:double z() -> d
    M:float yRot() -> e
    M:float xRot() -> f
net.minecraft.server.commands.AdvancementCommands -> abj -> net.minecraft.server.commands.CommandAdvancement
    F:com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_ADVANCEMENTS -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int perform(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.server.commands.CommandAdvancement$Action,java.util.Collection) -> a
    M:int performCriterion(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.server.commands.CommandAdvancement$Action,net.minecraft.advancements.Advancement,java.lang.String) -> a
    M:java.util.List getAdvancements(net.minecraft.advancements.Advancement,net.minecraft.server.commands.CommandAdvancement$Filter) -> a
    M:void addChildren(net.minecraft.advancements.Advancement,java.util.List) -> a
net.minecraft.server.commands.AdvancementCommands$Action -> abj$a -> net.minecraft.server.commands.CommandAdvancement$Action
    F:net.minecraft.server.commands.CommandAdvancement$Action GRANT -> a
    F:net.minecraft.server.commands.CommandAdvancement$Action REVOKE -> b
    F:java.lang.String key -> c
    M:int perform(net.minecraft.server.level.EntityPlayer,java.lang.Iterable) -> a
    M:java.lang.String getKey() -> a
    M:boolean perform(net.minecraft.server.level.EntityPlayer,net.minecraft.advancements.Advancement) -> a
    M:boolean performCriterion(net.minecraft.server.level.EntityPlayer,net.minecraft.advancements.Advancement,java.lang.String) -> a
    M:boolean perform(net.minecraft.server.level.EntityPlayer,net.minecraft.advancements.Advancement) -> a
    M:boolean performCriterion(net.minecraft.server.level.EntityPlayer,net.minecraft.advancements.Advancement,java.lang.String) -> a
net.minecraft.server.commands.AdvancementCommands$Mode -> abj$b -> net.minecraft.server.commands.CommandAdvancement$Filter
    F:net.minecraft.server.commands.CommandAdvancement$Filter ONLY -> a
    F:net.minecraft.server.commands.CommandAdvancement$Filter THROUGH -> b
    F:net.minecraft.server.commands.CommandAdvancement$Filter FROM -> c
    F:net.minecraft.server.commands.CommandAdvancement$Filter UNTIL -> d
    F:net.minecraft.server.commands.CommandAdvancement$Filter EVERYTHING -> e
    F:boolean parents -> f
    F:boolean children -> g
net.minecraft.server.commands.AttributeCommand -> abk -> net.minecraft.server.commands.CommandAttribute
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_NOT_LIVING_ENTITY -> a
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_NO_SUCH_ATTRIBUTE -> b
    F:com.mojang.brigadier.exceptions.Dynamic3CommandExceptionType ERROR_NO_SUCH_MODIFIER -> c
    F:com.mojang.brigadier.exceptions.Dynamic3CommandExceptionType ERROR_MODIFIER_ALREADY_PRESENT -> d
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:net.minecraft.world.entity.ai.attributes.AttributeModifiable getAttributeInstance(net.minecraft.world.entity.Entity,net.minecraft.world.entity.ai.attributes.AttributeBase) -> a
    M:net.minecraft.world.entity.EntityLiving getLivingEntity(net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.entity.EntityLiving getEntityWithAttribute(net.minecraft.world.entity.Entity,net.minecraft.world.entity.ai.attributes.AttributeBase) -> b
    M:int getAttributeValue(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity,net.minecraft.world.entity.ai.attributes.AttributeBase,double) -> a
    M:int getAttributeBase(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity,net.minecraft.world.entity.ai.attributes.AttributeBase,double) -> b
    M:int getAttributeModifier(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity,net.minecraft.world.entity.ai.attributes.AttributeBase,java.util.UUID,double) -> a
    M:int setAttributeBase(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity,net.minecraft.world.entity.ai.attributes.AttributeBase,double) -> c
    M:int addModifier(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity,net.minecraft.world.entity.ai.attributes.AttributeBase,java.util.UUID,java.lang.String,double,net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation) -> a
    M:int removeModifier(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity,net.minecraft.world.entity.ai.attributes.AttributeBase,java.util.UUID) -> a
net.minecraft.server.commands.BanIpCommands -> abl -> net.minecraft.server.commands.CommandBanIp
    F:java.util.regex.Pattern IP_ADDRESS_PATTERN -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID_IP -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_BANNED -> c
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int banIpOrName(net.minecraft.commands.CommandListenerWrapper,java.lang.String,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:int banIp(net.minecraft.commands.CommandListenerWrapper,java.lang.String,net.minecraft.network.chat.IChatBaseComponent) -> b
net.minecraft.server.commands.BanListCommands -> abm -> net.minecraft.server.commands.CommandBanList
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int showList(net.minecraft.commands.CommandListenerWrapper,java.util.Collection) -> a
net.minecraft.server.commands.BanPlayerCommands -> abn -> net.minecraft.server.commands.CommandBan
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_BANNED -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int banPlayers(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.network.chat.IChatBaseComponent) -> a
net.minecraft.server.commands.BossBarCommands -> abo -> net.minecraft.server.commands.CommandBossBar
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_ALREADY_EXISTS -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_DOESNT_EXIST -> c
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_PLAYER_CHANGE -> d
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_NAME_CHANGE -> e
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_COLOR_CHANGE -> f
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_STYLE_CHANGE -> g
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_VALUE_CHANGE -> h
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_MAX_CHANGE -> i
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_HIDDEN -> j
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_VISIBLE -> k
    F:com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_BOSS_BAR -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int getValue(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.bossevents.BossBattleCustom) -> a
    M:int getMax(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.bossevents.BossBattleCustom) -> b
    M:int getVisible(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.bossevents.BossBattleCustom) -> c
    M:int getPlayers(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.bossevents.BossBattleCustom) -> d
    M:int setVisible(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.bossevents.BossBattleCustom,boolean) -> a
    M:int setValue(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.bossevents.BossBattleCustom,int) -> a
    M:int setMax(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.bossevents.BossBattleCustom,int) -> b
    M:int setColor(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.bossevents.BossBattleCustom,net.minecraft.world.BossBattle$BarColor) -> a
    M:int setStyle(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.bossevents.BossBattleCustom,net.minecraft.world.BossBattle$BarStyle) -> a
    M:int setName(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.bossevents.BossBattleCustom,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:int setPlayers(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.bossevents.BossBattleCustom,java.util.Collection) -> a
    M:int listBars(net.minecraft.commands.CommandListenerWrapper) -> a
    M:int createBar(net.minecraft.commands.CommandListenerWrapper,net.minecraft.resources.MinecraftKey,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:int removeBar(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.bossevents.BossBattleCustom) -> e
    M:net.minecraft.server.bossevents.BossBattleCustom getBossBar(com.mojang.brigadier.context.CommandContext) -> a
net.minecraft.server.commands.ChaseCommand -> abp -> net.minecraft.server.commands.ChaseCommand
    F:java.lang.String DEFAULT_CONNECT_HOST -> b
    F:java.lang.String DEFAULT_BIND_ADDRESS -> c
    F:int DEFAULT_PORT -> d
    F:int BROADCAST_INTERVAL_MS -> e
    F:com.google.common.collect.BiMap DIMENSION_NAMES -> a
    F:net.minecraft.server.chase.ChaseServer chaseServer -> f
    F:net.minecraft.server.chase.ChaseClient chaseClient -> g
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int stop(net.minecraft.commands.CommandListenerWrapper) -> a
    M:boolean alreadyRunning(net.minecraft.commands.CommandListenerWrapper) -> b
    M:int lead(net.minecraft.commands.CommandListenerWrapper,java.lang.String,int) -> a
    M:int follow(net.minecraft.commands.CommandListenerWrapper,java.lang.String,int) -> b
net.minecraft.server.commands.ClearInventoryCommands -> abq -> net.minecraft.server.commands.CommandClear
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_SINGLE -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_MULTIPLE -> b
    M:void register(com.mojang.brigadier.CommandDispatcher,net.minecraft.commands.CommandBuildContext) -> a
    M:int clearInventory(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,java.util.function.Predicate,int) -> a
net.minecraft.server.commands.CloneCommands -> abr -> net.minecraft.server.commands.CommandClone
    F:int MAX_CLONE_AREA -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_OVERLAP -> c
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_AREA_TOO_LARGE -> d
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FAILED -> e
    F:java.util.function.Predicate FILTER_AIR -> a
    M:void register(com.mojang.brigadier.CommandDispatcher,net.minecraft.commands.CommandBuildContext) -> a
    M:int clone(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,java.util.function.Predicate,net.minecraft.server.commands.CommandClone$Mode) -> a
net.minecraft.server.commands.CloneCommands$CloneBlockInfo -> abr$a -> net.minecraft.server.commands.CommandClone$CommandCloneStoredTileEntity
    F:net.minecraft.core.BlockPosition pos -> a
    F:net.minecraft.world.level.block.state.IBlockData state -> b
    F:net.minecraft.nbt.NBTTagCompound tag -> c
net.minecraft.server.commands.CloneCommands$Mode -> abr$b -> net.minecraft.server.commands.CommandClone$Mode
    F:net.minecraft.server.commands.CommandClone$Mode FORCE -> a
    F:net.minecraft.server.commands.CommandClone$Mode MOVE -> b
    F:net.minecraft.server.commands.CommandClone$Mode NORMAL -> c
    F:boolean canOverlap -> d
    M:boolean canOverlap() -> a
net.minecraft.server.commands.DataPackCommand -> abs -> net.minecraft.server.commands.CommandDatapack
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_PACK -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_PACK_ALREADY_ENABLED -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_PACK_ALREADY_DISABLED -> c
    F:com.mojang.brigadier.suggestion.SuggestionProvider SELECTED_PACKS -> d
    F:com.mojang.brigadier.suggestion.SuggestionProvider UNSELECTED_PACKS -> e
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int enablePack(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.packs.repository.ResourcePackLoader,net.minecraft.server.commands.DataPackCommand$Inserter) -> a
    M:int disablePack(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.packs.repository.ResourcePackLoader) -> a
    M:int listPacks(net.minecraft.commands.CommandListenerWrapper) -> a
    M:int listAvailablePacks(net.minecraft.commands.CommandListenerWrapper) -> b
    M:int listEnabledPacks(net.minecraft.commands.CommandListenerWrapper) -> c
    M:net.minecraft.server.packs.repository.ResourcePackLoader getPack(com.mojang.brigadier.context.CommandContext,java.lang.String,boolean) -> a
net.minecraft.server.commands.DataPackCommand$Inserter -> abs$a -> net.minecraft.server.commands.CommandDatapack$a
net.minecraft.server.commands.DeOpCommands -> abt -> net.minecraft.server.commands.CommandDeop
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_OP -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int deopPlayers(net.minecraft.commands.CommandListenerWrapper,java.util.Collection) -> a
net.minecraft.server.commands.DebugCommand -> abu -> net.minecraft.server.commands.CommandDebug
    F:org.slf4j.Logger LOGGER -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_RUNNING -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_RUNNING -> c
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int start(net.minecraft.commands.CommandListenerWrapper) -> a
    M:int stop(net.minecraft.commands.CommandListenerWrapper) -> b
    M:int traceFunction(net.minecraft.commands.CommandListenerWrapper,java.util.Collection) -> a
net.minecraft.server.commands.DebugCommand$Tracer -> abu$a -> net.minecraft.server.commands.CommandDebug$a
    F:int INDENT_OFFSET -> b
    F:java.io.PrintWriter output -> c
    F:int lastIndent -> d
    F:boolean waitingForResult -> e
    M:void indentAndSave(int) -> a
    M:void printIndent(int) -> b
    M:void newLine() -> e
    M:void onCommand(int,java.lang.String) -> a
    M:void onReturn(int,java.lang.String,int) -> a
    M:void onCall(int,net.minecraft.resources.MinecraftKey,int) -> a
    M:void onError(int,java.lang.String) -> b
    M:void sendSystemMessage(net.minecraft.network.chat.IChatBaseComponent) -> a
net.minecraft.server.commands.DebugMobSpawningCommand -> abv -> net.minecraft.server.commands.DebugMobSpawningCommand
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int spawnMobs(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.EnumCreatureType,net.minecraft.core.BlockPosition) -> a
net.minecraft.server.commands.DebugPathCommand -> abw -> net.minecraft.server.commands.DebugPathCommand
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_MOB -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_PATH -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_COMPLETE -> c
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int fillBlocks(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.BlockPosition) -> a
net.minecraft.server.commands.DefaultGameModeCommands -> abx -> net.minecraft.server.commands.CommandGamemodeDefault
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int setMode(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.level.EnumGamemode) -> a
net.minecraft.server.commands.DifficultyCommand -> aby -> net.minecraft.server.commands.CommandDifficulty
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_ALREADY_DIFFICULT -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int setDifficulty(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.EnumDifficulty) -> a
net.minecraft.server.commands.EffectCommands -> abz -> net.minecraft.server.commands.CommandEffect
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_GIVE_FAILED -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_CLEAR_EVERYTHING_FAILED -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_CLEAR_SPECIFIC_FAILED -> c
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int giveEffect(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.world.effect.MobEffectList,java.lang.Integer,int,boolean) -> a
    M:int clearEffects(net.minecraft.commands.CommandListenerWrapper,java.util.Collection) -> a
    M:int clearEffect(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.world.effect.MobEffectList) -> a
net.minecraft.server.commands.EmoteCommands -> aca -> net.minecraft.server.commands.CommandMe
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
net.minecraft.server.commands.EnchantCommand -> acb -> net.minecraft.server.commands.CommandEnchant
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_NOT_LIVING_ENTITY -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_NO_ITEM -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INCOMPATIBLE -> c
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_LEVEL_TOO_HIGH -> d
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOTHING_HAPPENED -> e
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int enchant(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.world.item.enchantment.Enchantment,int) -> a
net.minecraft.server.commands.ExecuteCommand -> acc -> net.minecraft.server.commands.CommandExecute
    F:int MAX_TEST_AREA -> a
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_AREA_TOO_LARGE -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_CONDITIONAL_FAILED -> c
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_CONDITIONAL_FAILED_COUNT -> d
    F:java.util.function.BinaryOperator CALLBACK_CHAINER -> e
    F:com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_PREDICATE -> f
    M:void register(com.mojang.brigadier.CommandDispatcher,net.minecraft.commands.CommandBuildContext) -> a
    M:com.mojang.brigadier.builder.ArgumentBuilder wrapStores(com.mojang.brigadier.tree.LiteralCommandNode,com.mojang.brigadier.builder.LiteralArgumentBuilder,boolean) -> a
    M:net.minecraft.commands.CommandListenerWrapper storeValue(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.world.scores.ScoreboardObjective,boolean) -> a
    M:net.minecraft.commands.CommandListenerWrapper storeValue(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.bossevents.BossBattleCustom,boolean,boolean) -> a
    M:net.minecraft.commands.CommandListenerWrapper storeData(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.commands.data.CommandDataAccessor,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.function.IntFunction,boolean) -> a
    M:com.mojang.brigadier.builder.ArgumentBuilder addConditionals(com.mojang.brigadier.tree.CommandNode,com.mojang.brigadier.builder.LiteralArgumentBuilder,boolean,net.minecraft.commands.CommandBuildContext) -> a
    M:com.mojang.brigadier.Command createNumericConditionalHandler(boolean,net.minecraft.server.commands.ExecuteCommand$CommandNumericPredicate) -> a
    M:int checkMatchingData(net.minecraft.server.commands.data.CommandDataAccessor,net.minecraft.commands.arguments.NbtPathArgument$NbtPath) -> a
    M:boolean checkScore(com.mojang.brigadier.context.CommandContext,java.util.function.BiPredicate) -> a
    M:boolean checkScore(com.mojang.brigadier.context.CommandContext,net.minecraft.advancements.critereon.CriterionConditionValue$IntegerRange) -> a
    M:boolean checkCustomPredicate(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.level.storage.loot.predicates.LootItemCondition) -> a
    M:java.util.Collection expect(com.mojang.brigadier.context.CommandContext,boolean,boolean) -> a
    M:com.mojang.brigadier.builder.ArgumentBuilder addConditional(com.mojang.brigadier.tree.CommandNode,com.mojang.brigadier.builder.ArgumentBuilder,boolean,net.minecraft.server.commands.ExecuteCommand$CommandPredicate) -> a
    M:com.mojang.brigadier.builder.ArgumentBuilder addIfBlocksConditional(com.mojang.brigadier.tree.CommandNode,com.mojang.brigadier.builder.ArgumentBuilder,boolean,boolean) -> a
    M:int checkIfRegions(com.mojang.brigadier.context.CommandContext,boolean) -> a
    M:int checkUnlessRegions(com.mojang.brigadier.context.CommandContext,boolean) -> b
    M:java.util.OptionalInt checkRegions(com.mojang.brigadier.context.CommandContext,boolean) -> c
    M:java.util.OptionalInt checkRegions(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,boolean) -> a
net.minecraft.server.commands.ExecuteCommand$CommandNumericPredicate -> acc$a -> net.minecraft.server.commands.CommandExecute$a
net.minecraft.server.commands.ExecuteCommand$CommandPredicate -> acc$b -> net.minecraft.server.commands.CommandExecute$b
net.minecraft.server.commands.ExperienceCommand -> acd -> net.minecraft.server.commands.CommandXp
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SET_POINTS_INVALID -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int queryExperience(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.level.EntityPlayer,net.minecraft.server.commands.CommandXp$Unit) -> a
    M:int addExperience(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,int,net.minecraft.server.commands.CommandXp$Unit) -> a
    M:int setExperience(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,int,net.minecraft.server.commands.CommandXp$Unit) -> b
net.minecraft.server.commands.ExperienceCommand$Type -> acd$a -> net.minecraft.server.commands.CommandXp$Unit
    F:net.minecraft.server.commands.CommandXp$Unit POINTS -> a
    F:net.minecraft.server.commands.CommandXp$Unit LEVELS -> b
    F:java.util.function.BiConsumer add -> c
    F:java.util.function.BiPredicate set -> d
    F:java.lang.String name -> e
    F:java.util.function.ToIntFunction query -> f
net.minecraft.server.commands.FillCommand -> ace -> net.minecraft.server.commands.CommandFill
    F:int MAX_FILL_AREA -> a
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_AREA_TOO_LARGE -> b
    F:net.minecraft.commands.arguments.blocks.ArgumentTileLocation HOLLOW_CORE -> c
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FAILED -> d
    M:void register(com.mojang.brigadier.CommandDispatcher,net.minecraft.commands.CommandBuildContext) -> a
    M:int fillBlocks(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.commands.arguments.blocks.ArgumentTileLocation,net.minecraft.server.commands.CommandFill$Mode,java.util.function.Predicate) -> a
net.minecraft.server.commands.FillCommand$Mode -> ace$a -> net.minecraft.server.commands.CommandFill$Mode
    F:net.minecraft.server.commands.CommandFill$Mode REPLACE -> a
    F:net.minecraft.server.commands.CommandFill$Mode OUTLINE -> b
    F:net.minecraft.server.commands.CommandFill$Mode HOLLOW -> c
    F:net.minecraft.server.commands.CommandFill$Mode DESTROY -> d
    F:net.minecraft.server.commands.CommandSetBlock$Filter filter -> e
net.minecraft.server.commands.ForceLoadCommand -> acf -> net.minecraft.server.commands.CommandForceload
    F:int MAX_CHUNK_LIMIT -> a
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_TOO_MANY_CHUNKS -> b
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_NOT_TICKING -> c
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALL_ADDED -> d
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NONE_REMOVED -> e
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int queryForceLoad(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.level.BlockPosition2D) -> a
    M:int listForceLoad(net.minecraft.commands.CommandListenerWrapper) -> a
    M:int removeAll(net.minecraft.commands.CommandListenerWrapper) -> b
    M:int changeForceLoad(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.level.BlockPosition2D,net.minecraft.server.level.BlockPosition2D,boolean) -> a
net.minecraft.server.commands.FunctionCommand -> acg -> net.minecraft.server.commands.CommandFunction
    F:com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_FUNCTION -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int runFunction(net.minecraft.commands.CommandListenerWrapper,java.util.Collection) -> a
net.minecraft.server.commands.GameModeCommand -> ach -> net.minecraft.server.commands.CommandGamemode
    F:int PERMISSION_LEVEL -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:void logGamemodeChange(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.level.EntityPlayer,net.minecraft.world.level.EnumGamemode) -> a
    M:int setMode(com.mojang.brigadier.context.CommandContext,java.util.Collection,net.minecraft.world.level.EnumGamemode) -> a
net.minecraft.server.commands.GameRuleCommand -> aci -> net.minecraft.server.commands.CommandGamerule
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int setRule(com.mojang.brigadier.context.CommandContext,net.minecraft.world.level.GameRules$GameRuleKey) -> a
    M:int queryRule(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.level.GameRules$GameRuleKey) -> a
    M:void visit(net.minecraft.world.level.GameRules$GameRuleKey,net.minecraft.world.level.GameRules$GameRuleDefinition) -> a
net.minecraft.server.commands.GiveCommand -> acj -> net.minecraft.server.commands.CommandGive
    F:int MAX_ALLOWED_ITEMSTACKS -> a
    M:void register(com.mojang.brigadier.CommandDispatcher,net.minecraft.commands.CommandBuildContext) -> a
    M:int giveItem(net.minecraft.commands.CommandListenerWrapper,net.minecraft.commands.arguments.item.ArgumentPredicateItemStack,java.util.Collection,int) -> a
net.minecraft.server.commands.HelpCommand -> ack -> net.minecraft.server.commands.CommandHelp
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FAILED -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
net.minecraft.server.commands.ItemCommands -> acl -> net.minecraft.server.commands.ItemCommands
    F:com.mojang.brigadier.exceptions.Dynamic3CommandExceptionType ERROR_TARGET_NOT_A_CONTAINER -> a
    F:com.mojang.brigadier.exceptions.Dynamic3CommandExceptionType ERROR_SOURCE_NOT_A_CONTAINER -> c
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_TARGET_INAPPLICABLE_SLOT -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_SOURCE_INAPPLICABLE_SLOT -> d
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_TARGET_NO_CHANGES -> e
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_TARGET_NO_CHANGES_KNOWN_ITEM -> f
    F:com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_MODIFIER -> g
    M:void register(com.mojang.brigadier.CommandDispatcher,net.minecraft.commands.CommandBuildContext) -> a
    M:int modifyBlockItem(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.BlockPosition,int,net.minecraft.world.level.storage.loot.functions.LootItemFunction) -> a
    M:int modifyEntityItem(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,int,net.minecraft.world.level.storage.loot.functions.LootItemFunction) -> a
    M:int setBlockItem(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.BlockPosition,int,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.IInventory getContainer(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.BlockPosition,com.mojang.brigadier.exceptions.Dynamic3CommandExceptionType) -> a
    M:int setEntityItem(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,int,net.minecraft.world.item.ItemStack) -> a
    M:int blockToEntities(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.BlockPosition,int,java.util.Collection,int) -> a
    M:int blockToEntities(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.BlockPosition,int,java.util.Collection,int,net.minecraft.world.level.storage.loot.functions.LootItemFunction) -> a
    M:int blockToBlock(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.BlockPosition,int,net.minecraft.core.BlockPosition,int) -> a
    M:int blockToBlock(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.BlockPosition,int,net.minecraft.core.BlockPosition,int,net.minecraft.world.level.storage.loot.functions.LootItemFunction) -> a
    M:int entityToBlock(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity,int,net.minecraft.core.BlockPosition,int) -> a
    M:int entityToBlock(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity,int,net.minecraft.core.BlockPosition,int,net.minecraft.world.level.storage.loot.functions.LootItemFunction) -> a
    M:int entityToEntities(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity,int,java.util.Collection,int) -> a
    M:int entityToEntities(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity,int,java.util.Collection,int,net.minecraft.world.level.storage.loot.functions.LootItemFunction) -> a
    M:net.minecraft.world.item.ItemStack applyModifier(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.level.storage.loot.functions.LootItemFunction,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack getEntityItem(net.minecraft.world.entity.Entity,int) -> a
    M:net.minecraft.world.item.ItemStack getBlockItem(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.BlockPosition,int) -> a
net.minecraft.server.commands.JfrCommand -> acm -> net.minecraft.server.commands.JfrCommand
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType START_FAILED -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType DUMP_FAILED -> b
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int startJfr(net.minecraft.commands.CommandListenerWrapper) -> a
    M:int stopJfr(net.minecraft.commands.CommandListenerWrapper) -> b
net.minecraft.server.commands.KickCommand -> acn -> net.minecraft.server.commands.CommandKick
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int kickPlayers(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.network.chat.IChatBaseComponent) -> a
net.minecraft.server.commands.KillCommand -> aco -> net.minecraft.server.commands.CommandKill
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int kill(net.minecraft.commands.CommandListenerWrapper,java.util.Collection) -> a
net.minecraft.server.commands.ListPlayersCommand -> acp -> net.minecraft.server.commands.CommandList
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int listPlayers(net.minecraft.commands.CommandListenerWrapper) -> a
    M:int listPlayersWithUuids(net.minecraft.commands.CommandListenerWrapper) -> b
    M:int format(net.minecraft.commands.CommandListenerWrapper,java.util.function.Function) -> a
net.minecraft.server.commands.LocateCommand -> acq -> net.minecraft.server.commands.CommandLocate
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_STRUCTURE_NOT_FOUND -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_STRUCTURE_INVALID -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_BIOME_NOT_FOUND -> c
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_BIOME_INVALID -> d
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_POI_NOT_FOUND -> e
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_POI_INVALID -> f
    F:int MAX_STRUCTURE_SEARCH_RADIUS -> g
    F:int MAX_BIOME_SEARCH_RADIUS -> h
    F:int BIOME_SAMPLE_RESOLUTION_HORIZONTAL -> i
    F:int BIOME_SAMPLE_RESOLUTION_VERTICAL -> j
    F:int POI_SEARCH_RADIUS -> k
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:java.util.Optional getHolders(net.minecraft.commands.arguments.ResourceOrTagLocationArgument$Result,net.minecraft.core.IRegistry) -> a
    M:int locateStructure(net.minecraft.commands.CommandListenerWrapper,net.minecraft.commands.arguments.ResourceOrTagLocationArgument$Result) -> a
    M:int locateBiome(net.minecraft.commands.CommandListenerWrapper,net.minecraft.commands.arguments.ResourceOrTagLocationArgument$Result) -> b
    M:int locatePoi(net.minecraft.commands.CommandListenerWrapper,net.minecraft.commands.arguments.ResourceOrTagLocationArgument$Result) -> c
    M:int showLocateResult(net.minecraft.commands.CommandListenerWrapper,net.minecraft.commands.arguments.ResourceOrTagLocationArgument$Result,net.minecraft.core.BlockPosition,com.mojang.datafixers.util.Pair,java.lang.String,boolean) -> a
    M:float dist(int,int,int,int) -> a
net.minecraft.server.commands.LootCommand -> acr -> net.minecraft.server.commands.CommandLoot
    F:com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_LOOT_TABLE -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_NO_HELD_ITEMS -> b
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_NO_LOOT_TABLE -> c
    M:void register(com.mojang.brigadier.CommandDispatcher,net.minecraft.commands.CommandBuildContext) -> a
    M:com.mojang.brigadier.builder.ArgumentBuilder addTargets(com.mojang.brigadier.builder.ArgumentBuilder,net.minecraft.server.commands.LootCommand$TailProvider) -> a
    M:net.minecraft.world.IInventory getContainer(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.BlockPosition) -> a
    M:int blockDistribute(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.BlockPosition,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> a
    M:boolean distributeToContainer(net.minecraft.world.IInventory,net.minecraft.world.item.ItemStack) -> a
    M:int blockReplace(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.BlockPosition,int,int,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> a
    M:boolean canMergeItems(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:int playerGive(java.util.Collection,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> a
    M:void setSlots(net.minecraft.world.entity.Entity,java.util.List,int,int,java.util.List) -> a
    M:int entityReplace(java.util.Collection,int,int,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> a
    M:int dropInWorld(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.phys.Vec3D,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> a
    M:void callback(net.minecraft.commands.CommandListenerWrapper,java.util.List) -> a
    M:void callback(net.minecraft.commands.CommandListenerWrapper,java.util.List,net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.world.item.ItemStack getSourceHandItem(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.EnumItemSlot) -> a
    M:int dropBlockLoot(com.mojang.brigadier.context.CommandContext,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack,net.minecraft.server.commands.LootCommand$DropConsumer) -> a
    M:int dropKillLoot(com.mojang.brigadier.context.CommandContext,net.minecraft.world.entity.Entity,net.minecraft.server.commands.LootCommand$DropConsumer) -> a
    M:int dropChestLoot(com.mojang.brigadier.context.CommandContext,net.minecraft.resources.MinecraftKey,net.minecraft.server.commands.LootCommand$DropConsumer) -> a
    M:int dropFishingLoot(com.mojang.brigadier.context.CommandContext,net.minecraft.resources.MinecraftKey,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack,net.minecraft.server.commands.LootCommand$DropConsumer) -> a
    M:int drop(com.mojang.brigadier.context.CommandContext,net.minecraft.resources.MinecraftKey,net.minecraft.world.level.storage.loot.LootTableInfo,net.minecraft.server.commands.LootCommand$DropConsumer) -> a
net.minecraft.server.commands.LootCommand$Callback -> acr$a -> net.minecraft.server.commands.CommandLoot$a
net.minecraft.server.commands.LootCommand$DropConsumer -> acr$b -> net.minecraft.server.commands.CommandLoot$b
net.minecraft.server.commands.LootCommand$TailProvider -> acr$c -> net.minecraft.server.commands.CommandLoot$c
net.minecraft.server.commands.MsgCommand -> acs -> net.minecraft.server.commands.CommandTell
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int sendMessage(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.commands.arguments.MessageArgument$ChatMessage) -> a
net.minecraft.server.commands.OpCommand -> act -> net.minecraft.server.commands.CommandOp
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_OP -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int opPlayers(net.minecraft.commands.CommandListenerWrapper,java.util.Collection) -> a
net.minecraft.server.commands.PardonCommand -> acu -> net.minecraft.server.commands.CommandPardon
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_BANNED -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int pardonPlayers(net.minecraft.commands.CommandListenerWrapper,java.util.Collection) -> a
net.minecraft.server.commands.PardonIpCommand -> acv -> net.minecraft.server.commands.CommandPardonIP
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_BANNED -> b
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int unban(net.minecraft.commands.CommandListenerWrapper,java.lang.String) -> a
net.minecraft.server.commands.ParticleCommand -> acw -> net.minecraft.server.commands.CommandParticle
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FAILED -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int sendParticles(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.particles.ParticleParam,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D,float,int,boolean,java.util.Collection) -> a
net.minecraft.server.commands.PerfCommand -> acx -> net.minecraft.server.commands.PerfCommand
    F:org.slf4j.Logger LOGGER -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_RUNNING -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_RUNNING -> c
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int startProfilingDedicatedServer(net.minecraft.commands.CommandListenerWrapper) -> a
    M:int stopProfilingDedicatedServer(net.minecraft.commands.CommandListenerWrapper) -> b
    M:void saveResults(net.minecraft.commands.CommandListenerWrapper,java.nio.file.Path,net.minecraft.server.MinecraftServer) -> a
    M:void whenStopped(net.minecraft.commands.CommandListenerWrapper,net.minecraft.util.profiling.MethodProfilerResults) -> a
net.minecraft.server.commands.PlaceCommand -> acy -> net.minecraft.server.commands.PlaceCommand
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FEATURE_FAILED -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_JIGSAW_FAILED -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_STRUCTURE_FAILED -> c
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_TEMPLATE_INVALID -> d
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEMPLATE_FAILED -> e
    F:com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_TEMPLATES -> f
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int placeFeature(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.Holder,net.minecraft.core.BlockPosition) -> a
    M:int placeJigsaw(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.Holder,net.minecraft.resources.MinecraftKey,int,net.minecraft.core.BlockPosition) -> a
    M:int placeStructure(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.Holder,net.minecraft.core.BlockPosition) -> b
    M:int placeTemplate(net.minecraft.commands.CommandListenerWrapper,net.minecraft.resources.MinecraftKey,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.world.level.block.EnumBlockMirror,float,int) -> a
    M:void checkLoaded(net.minecraft.server.level.WorldServer,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.ChunkCoordIntPair) -> a
net.minecraft.server.commands.PlaySoundCommand -> acz -> net.minecraft.server.commands.CommandPlaySound
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TOO_FAR -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:com.mojang.brigadier.builder.LiteralArgumentBuilder source(net.minecraft.sounds.SoundCategory) -> a
    M:int playSound(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.resources.MinecraftKey,net.minecraft.sounds.SoundCategory,net.minecraft.world.phys.Vec3D,float,float,float) -> a
net.minecraft.server.commands.PublishCommand -> ada -> net.minecraft.server.commands.CommandPublish
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FAILED -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_ALREADY_PUBLISHED -> b
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int publish(net.minecraft.commands.CommandListenerWrapper,int) -> a
net.minecraft.server.commands.RaidCommand -> adb -> net.minecraft.server.commands.RaidCommand
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int glow(net.minecraft.commands.CommandListenerWrapper) -> a
    M:int setBadOmenLevel(net.minecraft.commands.CommandListenerWrapper,int) -> a
    M:int spawnLeader(net.minecraft.commands.CommandListenerWrapper) -> b
    M:int playSound(net.minecraft.commands.CommandListenerWrapper,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:int start(net.minecraft.commands.CommandListenerWrapper,int) -> b
    M:int stop(net.minecraft.commands.CommandListenerWrapper) -> c
    M:int check(net.minecraft.commands.CommandListenerWrapper) -> d
    M:net.minecraft.world.entity.raid.Raid getRaid(net.minecraft.server.level.EntityPlayer) -> a
net.minecraft.server.commands.RecipeCommand -> adc -> net.minecraft.server.commands.CommandRecipe
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_GIVE_FAILED -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TAKE_FAILED -> b
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int giveRecipes(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,java.util.Collection) -> a
    M:int takeRecipes(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,java.util.Collection) -> b
net.minecraft.server.commands.ReloadCommand -> add -> net.minecraft.server.commands.CommandReload
    F:org.slf4j.Logger LOGGER -> a
    M:void reloadPacks(java.util.Collection,net.minecraft.commands.CommandListenerWrapper) -> a
    M:java.util.Collection discoverNewPacks(net.minecraft.server.packs.repository.ResourcePackRepository,net.minecraft.world.level.storage.SaveData,java.util.Collection) -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
net.minecraft.server.commands.ResetChunksCommand -> ade -> net.minecraft.server.commands.ResetChunksCommand
    F:org.slf4j.Logger LOGGER -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int resetChunks(net.minecraft.commands.CommandListenerWrapper,int,boolean) -> a
net.minecraft.server.commands.SaveAllCommand -> adf -> net.minecraft.server.commands.CommandSaveAll
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FAILED -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int saveAll(net.minecraft.commands.CommandListenerWrapper,boolean) -> a
net.minecraft.server.commands.SaveOffCommand -> adg -> net.minecraft.server.commands.CommandSaveOff
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_OFF -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
net.minecraft.server.commands.SaveOnCommand -> adh -> net.minecraft.server.commands.CommandSaveOn
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_ON -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
net.minecraft.server.commands.SayCommand -> adi -> net.minecraft.server.commands.CommandSay
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
net.minecraft.server.commands.ScheduleCommand -> adj -> net.minecraft.server.commands.CommandSchedule
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SAME_TICK -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_CANT_REMOVE -> b
    F:com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_SCHEDULE -> c
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int schedule(net.minecraft.commands.CommandListenerWrapper,com.mojang.datafixers.util.Pair,int,boolean) -> a
    M:int remove(net.minecraft.commands.CommandListenerWrapper,java.lang.String) -> a
net.minecraft.server.commands.ScoreboardCommand -> adk -> net.minecraft.server.commands.CommandScoreboard
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_OBJECTIVE_ALREADY_EXISTS -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_DISPLAY_SLOT_ALREADY_EMPTY -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_DISPLAY_SLOT_ALREADY_SET -> c
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TRIGGER_ALREADY_ENABLED -> d
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_TRIGGER -> e
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_NO_VALUE -> f
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:com.mojang.brigadier.builder.LiteralArgumentBuilder createRenderTypeModify() -> a
    M:java.util.concurrent.CompletableFuture suggestTriggers(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    M:int getScore(net.minecraft.commands.CommandListenerWrapper,java.lang.String,net.minecraft.world.scores.ScoreboardObjective) -> a
    M:int performOperation(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.world.scores.ScoreboardObjective,net.minecraft.commands.arguments.OperationArgument$Operation,java.util.Collection,net.minecraft.world.scores.ScoreboardObjective) -> a
    M:int enableTrigger(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.world.scores.ScoreboardObjective) -> a
    M:int resetScores(net.minecraft.commands.CommandListenerWrapper,java.util.Collection) -> a
    M:int resetScore(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.world.scores.ScoreboardObjective) -> b
    M:int setScore(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.world.scores.ScoreboardObjective,int) -> a
    M:int addScore(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.world.scores.ScoreboardObjective,int) -> b
    M:int removeScore(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.world.scores.ScoreboardObjective,int) -> c
    M:int listTrackedPlayers(net.minecraft.commands.CommandListenerWrapper) -> a
    M:int listTrackedPlayerScores(net.minecraft.commands.CommandListenerWrapper,java.lang.String) -> a
    M:int clearDisplaySlot(net.minecraft.commands.CommandListenerWrapper,int) -> a
    M:int setDisplaySlot(net.minecraft.commands.CommandListenerWrapper,int,net.minecraft.world.scores.ScoreboardObjective) -> a
    M:int setDisplayName(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardObjective,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:int setRenderType(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardObjective,net.minecraft.world.scores.criteria.IScoreboardCriteria$EnumScoreboardHealthDisplay) -> a
    M:int removeObjective(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardObjective) -> a
    M:int addObjective(net.minecraft.commands.CommandListenerWrapper,java.lang.String,net.minecraft.world.scores.criteria.IScoreboardCriteria,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:int listObjectives(net.minecraft.commands.CommandListenerWrapper) -> b
net.minecraft.server.commands.SeedCommand -> adl -> net.minecraft.server.commands.CommandSeed
    M:void register(com.mojang.brigadier.CommandDispatcher,boolean) -> a
net.minecraft.server.commands.SetBlockCommand -> adm -> net.minecraft.server.commands.CommandSetBlock
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FAILED -> a
    M:void register(com.mojang.brigadier.CommandDispatcher,net.minecraft.commands.CommandBuildContext) -> a
    M:int setBlock(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.BlockPosition,net.minecraft.commands.arguments.blocks.ArgumentTileLocation,net.minecraft.server.commands.CommandSetBlock$Mode,java.util.function.Predicate) -> a
net.minecraft.server.commands.SetBlockCommand$Filter -> adm$a -> net.minecraft.server.commands.CommandSetBlock$Filter
net.minecraft.server.commands.SetBlockCommand$Mode -> adm$b -> net.minecraft.server.commands.CommandSetBlock$Mode
    F:net.minecraft.server.commands.CommandSetBlock$Mode REPLACE -> a
    F:net.minecraft.server.commands.CommandSetBlock$Mode DESTROY -> b
net.minecraft.server.commands.SetPlayerIdleTimeoutCommand -> adn -> net.minecraft.server.commands.CommandIdleTimeout
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int setIdleTimeout(net.minecraft.commands.CommandListenerWrapper,int) -> a
net.minecraft.server.commands.SetSpawnCommand -> ado -> net.minecraft.server.commands.CommandSpawnpoint
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int setSpawn(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.core.BlockPosition,float) -> a
net.minecraft.server.commands.SetWorldSpawnCommand -> adp -> net.minecraft.server.commands.CommandSetWorldSpawn
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int setSpawn(net.minecraft.commands.CommandListenerWrapper,net.minecraft.core.BlockPosition,float) -> a
net.minecraft.server.commands.SpectateCommand -> adq -> net.minecraft.server.commands.CommandSpectate
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SELF -> a
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_NOT_SPECTATOR -> b
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int spectate(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity,net.minecraft.server.level.EntityPlayer) -> a
net.minecraft.server.commands.SpreadPlayersCommand -> adr -> net.minecraft.server.commands.CommandSpreadPlayers
    F:int MAX_ITERATION_COUNT -> a
    F:com.mojang.brigadier.exceptions.Dynamic4CommandExceptionType ERROR_FAILED_TO_SPREAD_TEAMS -> b
    F:com.mojang.brigadier.exceptions.Dynamic4CommandExceptionType ERROR_FAILED_TO_SPREAD_ENTITIES -> c
    F:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_INVALID_MAX_HEIGHT -> d
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int spreadPlayers(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.phys.Vec2F,float,float,int,boolean,java.util.Collection) -> a
    M:int getNumberOfTeams(java.util.Collection) -> a
    M:void spreadPositions(net.minecraft.world.phys.Vec2F,double,net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,double,double,double,double,int,net.minecraft.server.commands.SpreadPlayersCommand$Position[],boolean) -> a
    M:double setPlayerPositions(java.util.Collection,net.minecraft.server.level.WorldServer,net.minecraft.server.commands.SpreadPlayersCommand$Position[],int,boolean) -> a
net.minecraft.server.commands.SpreadPlayersCommand$Position -> adr$a -> net.minecraft.server.commands.CommandSpreadPlayers$a
    F:double x -> a
    F:double z -> b
    M:double dist(net.minecraft.server.commands.SpreadPlayersCommand$Position) -> a
    M:void normalize() -> a
    M:double getLength() -> b
    M:void moveAway(net.minecraft.server.commands.SpreadPlayersCommand$Position) -> b
    M:boolean clamp(double,double,double,double) -> a
    M:int getSpawnY(net.minecraft.world.level.IBlockAccess,int) -> a
    M:boolean isSafe(net.minecraft.world.level.IBlockAccess,int) -> b
    M:void randomize(net.minecraft.util.RandomSource,double,double,double,double) -> a
net.minecraft.server.commands.StopCommand -> ads -> net.minecraft.server.commands.CommandStop
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
net.minecraft.server.commands.StopSoundCommand -> adt -> net.minecraft.server.commands.CommandStopSound
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int stopSound(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.sounds.SoundCategory,net.minecraft.resources.MinecraftKey) -> a
net.minecraft.server.commands.SummonCommand -> adu -> net.minecraft.server.commands.CommandSummon
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FAILED -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_DUPLICATE_UUID -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType INVALID_POSITION -> c
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int spawnEntity(net.minecraft.commands.CommandListenerWrapper,net.minecraft.resources.MinecraftKey,net.minecraft.world.phys.Vec3D,net.minecraft.nbt.NBTTagCompound,boolean) -> a
net.minecraft.server.commands.TagCommand -> adv -> net.minecraft.server.commands.CommandTag
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ADD_FAILED -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_REMOVE_FAILED -> b
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:java.util.Collection getTags(java.util.Collection) -> a
    M:int addTag(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,java.lang.String) -> a
    M:int removeTag(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,java.lang.String) -> b
    M:int listTags(net.minecraft.commands.CommandListenerWrapper,java.util.Collection) -> a
net.minecraft.server.commands.TeamCommand -> adw -> net.minecraft.server.commands.CommandTeam
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_ALREADY_EXISTS -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_ALREADY_EMPTY -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_ALREADY_NAME -> c
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_ALREADY_COLOR -> d
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_ALREADY_FRIENDLYFIRE_ENABLED -> e
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_ALREADY_FRIENDLYFIRE_DISABLED -> f
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_ALREADY_FRIENDLYINVISIBLES_ENABLED -> g
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_ALREADY_FRIENDLYINVISIBLES_DISABLED -> h
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_NAMETAG_VISIBLITY_UNCHANGED -> i
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_DEATH_MESSAGE_VISIBLITY_UNCHANGED -> j
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_COLLISION_UNCHANGED -> k
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int leaveTeam(net.minecraft.commands.CommandListenerWrapper,java.util.Collection) -> a
    M:int joinTeam(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardTeam,java.util.Collection) -> a
    M:int setNametagVisibility(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardTeam,net.minecraft.world.scores.ScoreboardTeamBase$EnumNameTagVisibility) -> a
    M:int setDeathMessageVisibility(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardTeam,net.minecraft.world.scores.ScoreboardTeamBase$EnumNameTagVisibility) -> b
    M:int setCollision(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardTeam,net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush) -> a
    M:int setFriendlySight(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardTeam,boolean) -> a
    M:int setFriendlyFire(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardTeam,boolean) -> b
    M:int setDisplayName(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardTeam,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:int setColor(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardTeam,net.minecraft.EnumChatFormat) -> a
    M:int emptyTeam(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardTeam) -> a
    M:int deleteTeam(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardTeam) -> b
    M:int createTeam(net.minecraft.commands.CommandListenerWrapper,java.lang.String) -> a
    M:int createTeam(net.minecraft.commands.CommandListenerWrapper,java.lang.String,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:int listMembers(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardTeam) -> c
    M:int listTeams(net.minecraft.commands.CommandListenerWrapper) -> a
    M:int setPrefix(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardTeam,net.minecraft.network.chat.IChatBaseComponent) -> b
    M:int setSuffix(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardTeam,net.minecraft.network.chat.IChatBaseComponent) -> c
net.minecraft.server.commands.TeamMsgCommand -> adx -> net.minecraft.server.commands.CommandTeamMsg
    F:net.minecraft.network.chat.ChatModifier SUGGEST_STYLE -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_ON_TEAM -> b
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int sendMessage(net.minecraft.commands.CommandListenerWrapper,net.minecraft.commands.arguments.MessageArgument$ChatMessage) -> a
net.minecraft.server.commands.TeleportCommand -> ady -> net.minecraft.server.commands.CommandTeleport
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType INVALID_POSITION -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int teleportToEntity(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.world.entity.Entity) -> a
    M:int teleportToPos(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.server.level.WorldServer,net.minecraft.commands.arguments.coordinates.IVectorPosition,net.minecraft.commands.arguments.coordinates.IVectorPosition,net.minecraft.server.commands.TeleportCommand$LookAt) -> a
    M:java.lang.String formatDouble(double) -> a
    M:void performTeleport(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity,net.minecraft.server.level.WorldServer,double,double,double,java.util.Set,float,float,net.minecraft.server.commands.TeleportCommand$LookAt) -> a
net.minecraft.server.commands.TeleportCommand$LookAt -> ady$a -> net.minecraft.server.commands.CommandTeleport$a
    F:net.minecraft.world.phys.Vec3D position -> a
    F:net.minecraft.world.entity.Entity entity -> b
    F:net.minecraft.commands.arguments.ArgumentAnchor$Anchor anchor -> c
    M:void perform(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.Entity) -> a
net.minecraft.server.commands.TellRawCommand -> adz -> net.minecraft.server.commands.CommandTellRaw
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
net.minecraft.server.commands.TimeCommand -> aea -> net.minecraft.server.commands.CommandTime
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int getDayTime(net.minecraft.server.level.WorldServer) -> a
    M:int queryTime(net.minecraft.commands.CommandListenerWrapper,int) -> c
    M:int setTime(net.minecraft.commands.CommandListenerWrapper,int) -> a
    M:int addTime(net.minecraft.commands.CommandListenerWrapper,int) -> b
net.minecraft.server.commands.TitleCommand -> aeb -> net.minecraft.server.commands.CommandTitle
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int clearTitle(net.minecraft.commands.CommandListenerWrapper,java.util.Collection) -> a
    M:int resetTitle(net.minecraft.commands.CommandListenerWrapper,java.util.Collection) -> b
    M:int showTitle(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,net.minecraft.network.chat.IChatBaseComponent,java.lang.String,java.util.function.Function) -> a
    M:int setTimes(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,int,int,int) -> a
net.minecraft.server.commands.TriggerCommand -> aec -> net.minecraft.server.commands.CommandTrigger
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_PRIMED -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID_OBJECTIVE -> b
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:java.util.concurrent.CompletableFuture suggestObjectives(net.minecraft.commands.CommandListenerWrapper,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    M:int addValue(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardScore,int) -> a
    M:int setValue(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardScore,int) -> b
    M:int simpleTrigger(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.scores.ScoreboardScore) -> a
    M:net.minecraft.world.scores.ScoreboardScore getScore(net.minecraft.server.level.EntityPlayer,net.minecraft.world.scores.ScoreboardObjective) -> a
net.minecraft.server.commands.WardenSpawnTrackerCommand -> aed -> net.minecraft.server.commands.WardenSpawnTrackerCommand
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int setWarningLevel(net.minecraft.commands.CommandListenerWrapper,java.util.Collection,int) -> a
    M:int resetTracker(net.minecraft.commands.CommandListenerWrapper,java.util.Collection) -> a
net.minecraft.server.commands.WeatherCommand -> aee -> net.minecraft.server.commands.CommandWeather
    F:int DEFAULT_TIME -> a
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int setClear(net.minecraft.commands.CommandListenerWrapper,int) -> a
    M:int setRain(net.minecraft.commands.CommandListenerWrapper,int) -> b
    M:int setThunder(net.minecraft.commands.CommandListenerWrapper,int) -> c
net.minecraft.server.commands.WhitelistCommand -> aef -> net.minecraft.server.commands.CommandWhitelist
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_ENABLED -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_DISABLED -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_WHITELISTED -> c
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_WHITELISTED -> d
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int reload(net.minecraft.commands.CommandListenerWrapper) -> a
    M:int addPlayers(net.minecraft.commands.CommandListenerWrapper,java.util.Collection) -> a
    M:int removePlayers(net.minecraft.commands.CommandListenerWrapper,java.util.Collection) -> b
    M:int enableWhitelist(net.minecraft.commands.CommandListenerWrapper) -> b
    M:int disableWhitelist(net.minecraft.commands.CommandListenerWrapper) -> c
    M:int showList(net.minecraft.commands.CommandListenerWrapper) -> d
net.minecraft.server.commands.WorldBorderCommand -> aeg -> net.minecraft.server.commands.CommandWorldBorder
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SAME_CENTER -> a
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SAME_SIZE -> b
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TOO_SMALL -> c
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TOO_BIG -> d
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TOO_FAR_OUT -> e
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SAME_WARNING_TIME -> f
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SAME_WARNING_DISTANCE -> g
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SAME_DAMAGE_BUFFER -> h
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SAME_DAMAGE_AMOUNT -> i
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int setDamageBuffer(net.minecraft.commands.CommandListenerWrapper,float) -> a
    M:int setDamageAmount(net.minecraft.commands.CommandListenerWrapper,float) -> b
    M:int setWarningTime(net.minecraft.commands.CommandListenerWrapper,int) -> a
    M:int setWarningDistance(net.minecraft.commands.CommandListenerWrapper,int) -> b
    M:int getSize(net.minecraft.commands.CommandListenerWrapper) -> a
    M:int setCenter(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.phys.Vec2F) -> a
    M:int setSize(net.minecraft.commands.CommandListenerWrapper,double,long) -> a
net.minecraft.server.commands.data.BlockDataAccessor -> aeh -> net.minecraft.server.commands.data.CommandDataAccessorTile
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_A_BLOCK_ENTITY -> b
    F:java.util.function.Function PROVIDER -> a
    F:net.minecraft.world.level.block.entity.TileEntity entity -> c
    F:net.minecraft.core.BlockPosition pos -> d
    M:void setData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagCompound getData() -> a
    M:net.minecraft.network.chat.IChatBaseComponent getModifiedSuccess() -> b
    M:net.minecraft.network.chat.IChatBaseComponent getPrintSuccess(net.minecraft.nbt.NBTBase) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getPrintSuccess(net.minecraft.commands.arguments.NbtPathArgument$NbtPath,double,int) -> a
    M:net.minecraft.server.commands.data.CommandDataAccessor access(com.mojang.brigadier.context.CommandContext) -> a
    M:com.mojang.brigadier.builder.ArgumentBuilder wrap(com.mojang.brigadier.builder.ArgumentBuilder,java.util.function.Function) -> a
net.minecraft.server.commands.data.DataAccessor -> aei -> net.minecraft.server.commands.data.CommandDataAccessor
net.minecraft.server.commands.data.DataCommands -> aej -> net.minecraft.server.commands.data.CommandData
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_MERGE_UNCHANGED -> d
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_GET_NOT_NUMBER -> e
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_GET_NON_EXISTENT -> f
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_MULTIPLE_TAGS -> g
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_EXPECTED_LIST -> h
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_EXPECTED_OBJECT -> i
    F:com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_INDEX -> j
    F:java.util.List ALL_PROVIDERS -> a
    F:java.util.List TARGET_PROVIDERS -> b
    F:java.util.List SOURCE_PROVIDERS -> c
    M:void register(com.mojang.brigadier.CommandDispatcher) -> a
    M:int insertAtIndex(int,net.minecraft.nbt.NBTTagCompound,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.List) -> a
    M:com.mojang.brigadier.builder.ArgumentBuilder decorateModification(java.util.function.BiConsumer) -> a
    M:int manipulateData(com.mojang.brigadier.context.CommandContext,net.minecraft.server.commands.data.DataCommands$DataProvider,net.minecraft.server.commands.data.DataCommands$DataManipulator,java.util.List) -> a
    M:int removeData(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.commands.data.CommandDataAccessor,net.minecraft.commands.arguments.NbtPathArgument$NbtPath) -> a
    M:net.minecraft.nbt.NBTBase getSingleTag(net.minecraft.commands.arguments.NbtPathArgument$NbtPath,net.minecraft.server.commands.data.CommandDataAccessor) -> a
    M:int getData(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.commands.data.CommandDataAccessor,net.minecraft.commands.arguments.NbtPathArgument$NbtPath) -> b
    M:int getNumeric(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.commands.data.CommandDataAccessor,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,double) -> a
    M:int getData(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.commands.data.CommandDataAccessor) -> a
    M:int mergeData(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.commands.data.CommandDataAccessor,net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.server.commands.data.DataCommands$DataManipulator -> aej$a -> net.minecraft.server.commands.data.CommandData$a
net.minecraft.server.commands.data.DataCommands$DataManipulatorDecorator -> aej$b -> net.minecraft.server.commands.data.CommandData$b
net.minecraft.server.commands.data.DataCommands$DataProvider -> aej$c -> net.minecraft.server.commands.data.CommandData$c
net.minecraft.server.commands.data.EntityDataAccessor -> aek -> net.minecraft.server.commands.data.CommandDataAccessorEntity
    F:com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_PLAYERS -> b
    F:java.util.function.Function PROVIDER -> a
    F:net.minecraft.world.entity.Entity entity -> c
    M:void setData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagCompound getData() -> a
    M:net.minecraft.network.chat.IChatBaseComponent getModifiedSuccess() -> b
    M:net.minecraft.network.chat.IChatBaseComponent getPrintSuccess(net.minecraft.nbt.NBTBase) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getPrintSuccess(net.minecraft.commands.arguments.NbtPathArgument$NbtPath,double,int) -> a
    M:net.minecraft.server.commands.data.CommandDataAccessor access(com.mojang.brigadier.context.CommandContext) -> a
    M:com.mojang.brigadier.builder.ArgumentBuilder wrap(com.mojang.brigadier.builder.ArgumentBuilder,java.util.function.Function) -> a
net.minecraft.server.commands.data.StorageDataAccessor -> ael -> net.minecraft.server.commands.data.CommandDataStorage
    F:com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_STORAGE -> b
    F:java.util.function.Function PROVIDER -> a
    F:net.minecraft.world.level.storage.PersistentCommandStorage storage -> c
    F:net.minecraft.resources.MinecraftKey id -> d
    M:net.minecraft.world.level.storage.PersistentCommandStorage getGlobalTags(com.mojang.brigadier.context.CommandContext) -> a
    M:void setData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagCompound getData() -> a
    M:net.minecraft.network.chat.IChatBaseComponent getModifiedSuccess() -> b
    M:net.minecraft.network.chat.IChatBaseComponent getPrintSuccess(net.minecraft.nbt.NBTBase) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getPrintSuccess(net.minecraft.commands.arguments.NbtPathArgument$NbtPath,double,int) -> a
    M:net.minecraft.server.commands.data.CommandDataAccessor access(com.mojang.brigadier.context.CommandContext) -> a
    M:com.mojang.brigadier.builder.ArgumentBuilder wrap(com.mojang.brigadier.builder.ArgumentBuilder,java.util.function.Function) -> a
net.minecraft.server.dedicated.DedicatedPlayerList -> aeo -> net.minecraft.server.dedicated.DedicatedPlayerList
    F:org.slf4j.Logger LOGGER -> a
    M:void setUsingWhiteList(boolean) -> a
    M:void op(com.mojang.authlib.GameProfile) -> a
    M:void deop(com.mojang.authlib.GameProfile) -> b
    M:void reloadWhiteList() -> a
    M:void saveIpBanList() -> w
    M:void saveUserBanList() -> x
    M:void loadIpBanList() -> y
    M:void loadUserBanList() -> z
    M:boolean isWhiteListed(com.mojang.authlib.GameProfile) -> c
    M:net.minecraft.server.dedicated.DedicatedServer getServer() -> b
    M:boolean canBypassPlayerLimit(com.mojang.authlib.GameProfile) -> d
    M:net.minecraft.server.MinecraftServer getServer() -> c
net.minecraft.server.dedicated.DedicatedServer -> aep -> net.minecraft.server.dedicated.DedicatedServer
    F:org.slf4j.Logger LOGGER -> n
    F:int CONVERSION_RETRY_DELAY_MS -> o
    F:int CONVERSION_RETRIES -> p
    F:java.util.List consoleInput -> q
    F:net.minecraft.server.rcon.thread.RemoteStatusListener queryThreadGs4 -> r
    F:net.minecraft.server.rcon.RemoteControlCommandListener rconConsoleSource -> s
    F:net.minecraft.server.rcon.thread.RemoteControlListener rconThread -> t
    F:net.minecraft.server.dedicated.DedicatedServerSettings settings -> u
    F:net.minecraft.server.gui.ServerGUI gui -> v
    F:net.minecraft.server.network.TextFilter textFilterClient -> w
    M:boolean initServer() -> e
    M:net.minecraft.server.dedicated.DedicatedServerProperties getProperties() -> a
    M:void forceDifficulty() -> q
    M:boolean isHardcore() -> g
    M:net.minecraft.SystemReport fillServerSystemReport(net.minecraft.SystemReport) -> a
    M:void dumpServerProperties(java.nio.file.Path) -> a
    M:void onServerExit() -> f
    M:void tickChildren(java.util.function.BooleanSupplier) -> b
    M:void handleConsoleInput(java.lang.String,net.minecraft.commands.CommandListenerWrapper) -> a
    M:void handleConsoleInputs() -> bg
    M:boolean isDedicatedServer() -> k
    M:int getRateLimitPacketsPerSecond() -> l
    M:boolean isEpollEnabled() -> m
    M:boolean previewsChat() -> aa
    M:net.minecraft.server.dedicated.DedicatedPlayerList getPlayerList() -> bh
    M:boolean isPublished() -> o
    M:java.lang.String getServerIp() -> b
    M:int getServerPort() -> d
    M:java.lang.String getServerName() -> p
    M:void showGui() -> bi
    M:boolean hasGui() -> af
    M:boolean isCommandBlockEnabled() -> n
    M:int getSpawnProtectionRadius() -> ah
    M:boolean isUnderSpawnProtection(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean repliesToStatus() -> ai
    M:boolean hidesOnlinePlayers() -> aj
    M:int getOperatorUserPermissionLevel() -> h
    M:int getFunctionCompilationLevel() -> i
    M:void setPlayerIdleTimeout(int) -> c
    M:boolean shouldRconBroadcast() -> j
    M:int getAbsoluteMaxWorldSize() -> as
    M:int getCompressionThreshold() -> av
    M:boolean enforceSecureProfile() -> aw
    M:boolean convertOldUsers() -> bj
    M:void waitForRetry() -> bt
    M:long getMaxTickLength() -> bk
    M:int getMaxChainedNeighborUpdates() -> be
    M:java.lang.String getPluginNames() -> t
    M:java.lang.String runCommand(java.lang.String) -> a
    M:void storeUsingWhiteList(boolean) -> i
    M:void stopServer() -> s
    M:boolean isSingleplayerOwner(com.mojang.authlib.GameProfile) -> a
    M:int getScaledTrackingDistance(int) -> b
    M:java.lang.String getLevelIdName() -> r
    M:net.minecraft.server.network.ITextFilter createTextFilterForPlayer(net.minecraft.server.level.EntityPlayer) -> a
    M:net.minecraft.server.players.PlayerList getPlayerList() -> ac
    M:void run() -> run
net.minecraft.server.dedicated.DedicatedServerProperties -> aeq -> net.minecraft.server.dedicated.DedicatedServerProperties
    F:boolean onlineMode -> a
    F:boolean preventProxyConnections -> b
    F:java.lang.String serverIp -> c
    F:boolean spawnAnimals -> d
    F:boolean spawnNpcs -> e
    F:boolean pvp -> f
    F:boolean allowFlight -> g
    F:java.lang.String motd -> h
    F:boolean forceGameMode -> i
    F:boolean enforceWhitelist -> j
    F:net.minecraft.world.EnumDifficulty difficulty -> k
    F:net.minecraft.world.level.EnumGamemode gamemode -> l
    F:java.lang.String levelName -> m
    F:int serverPort -> n
    F:java.lang.Boolean announcePlayerAchievements -> o
    F:boolean enableQuery -> p
    F:int queryPort -> q
    F:boolean enableRcon -> r
    F:int rconPort -> s
    F:java.lang.String rconPassword -> t
    F:boolean hardcore -> u
    F:boolean allowNether -> v
    F:boolean spawnMonsters -> w
    F:boolean useNativeTransport -> x
    F:boolean enableCommandBlock -> y
    F:int spawnProtection -> z
    F:net.minecraft.server.dedicated.DedicatedServerProperties$WorldGenProperties worldGenProperties -> aa
    F:net.minecraft.world.level.levelgen.GeneratorSettings worldGenSettings -> ab
    M:net.minecraft.server.dedicated.DedicatedServerProperties fromFile(java.nio.file.Path) -> a
    M:net.minecraft.server.dedicated.DedicatedServerProperties reload(net.minecraft.core.IRegistryCustom,java.util.Properties) -> a
    M:net.minecraft.network.chat.IChatBaseComponent parseResourcePackPrompt(java.lang.String) -> c
    M:java.util.Optional getServerPackInfo(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String) -> a
    M:net.minecraft.world.level.levelgen.GeneratorSettings getWorldGenSettings(net.minecraft.core.IRegistryCustom) -> a
    M:net.minecraft.server.dedicated.PropertyManager reload(net.minecraft.core.IRegistryCustom,java.util.Properties) -> b
net.minecraft.server.dedicated.DedicatedServerProperties$WorldGenProperties -> aeq$a -> net.minecraft.server.dedicated.DedicatedServerProperties$a
    F:java.lang.String levelSeed -> a
    F:com.google.gson.JsonObject generatorSettings -> b
    F:boolean generateStructures -> c
    F:java.lang.String levelType -> d
    F:java.util.Map LEGACY_PRESET_NAMES -> e
    M:net.minecraft.world.level.levelgen.GeneratorSettings create(net.minecraft.core.IRegistryCustom) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String levelSeed() -> a
    M:com.google.gson.JsonObject generatorSettings() -> b
    M:boolean generateStructures() -> c
    M:java.lang.String levelType() -> d
net.minecraft.server.dedicated.DedicatedServerSettings -> aer -> net.minecraft.server.dedicated.DedicatedServerSettings
    F:java.nio.file.Path source -> a
    F:net.minecraft.server.dedicated.DedicatedServerProperties properties -> b
    M:net.minecraft.server.dedicated.DedicatedServerProperties getProperties() -> a
    M:void forceSave() -> b
    M:net.minecraft.server.dedicated.DedicatedServerSettings update(java.util.function.UnaryOperator) -> a
net.minecraft.server.dedicated.ServerWatchdog -> aes -> net.minecraft.server.dedicated.ThreadWatchdog
    F:org.slf4j.Logger LOGGER -> a
    F:long MAX_SHUTDOWN_TIME -> b
    F:int SHUTDOWN_STATUS -> c
    F:net.minecraft.server.dedicated.DedicatedServer server -> d
    F:long maxTickTime -> e
    M:void run() -> run
    M:void exit() -> a
    M:void run() -> run
net.minecraft.server.dedicated.Settings -> aet -> net.minecraft.server.dedicated.PropertyManager
    F:org.slf4j.Logger LOGGER -> a
    M:java.util.Properties loadFromFile(java.nio.file.Path) -> b
    M:void store(java.nio.file.Path) -> c
    M:java.util.function.Function wrapNumberDeserializer(java.util.function.Function) -> a
    M:java.util.function.Function dispatchNumberOrString(java.util.function.IntFunction,java.util.function.Function) -> a
    M:java.lang.String getStringRaw(java.lang.String) -> c
    M:java.lang.Object getLegacy(java.lang.String,java.util.function.Function) -> a
    M:java.lang.Object get(java.lang.String,java.util.function.Function,java.util.function.Function,java.lang.Object) -> a
    M:net.minecraft.server.dedicated.PropertyManager$EditableProperty getMutable(java.lang.String,java.util.function.Function,java.util.function.Function,java.lang.Object) -> b
    M:java.lang.Object get(java.lang.String,java.util.function.Function,java.util.function.UnaryOperator,java.util.function.Function,java.lang.Object) -> a
    M:java.lang.Object get(java.lang.String,java.util.function.Function,java.lang.Object) -> a
    M:net.minecraft.server.dedicated.PropertyManager$EditableProperty getMutable(java.lang.String,java.util.function.Function,java.lang.Object) -> b
    M:java.lang.String get(java.lang.String,java.lang.String) -> a
    M:java.lang.String getLegacyString(java.lang.String) -> a
    M:int get(java.lang.String,int) -> a
    M:net.minecraft.server.dedicated.PropertyManager$EditableProperty getMutable(java.lang.String,int) -> b
    M:int get(java.lang.String,java.util.function.UnaryOperator,int) -> a
    M:long get(java.lang.String,long) -> a
    M:boolean get(java.lang.String,boolean) -> a
    M:net.minecraft.server.dedicated.PropertyManager$EditableProperty getMutable(java.lang.String,boolean) -> b
    M:java.lang.Boolean getLegacyBoolean(java.lang.String) -> b
    M:java.util.Properties cloneProperties() -> a
net.minecraft.server.dedicated.Settings$MutableValue -> aet$a -> net.minecraft.server.dedicated.PropertyManager$EditableProperty
    F:java.lang.String key -> b
    F:java.lang.Object value -> c
    F:java.util.function.Function serializer -> d
    M:java.lang.Object get() -> get
    M:net.minecraft.server.dedicated.PropertyManager update(net.minecraft.core.IRegistryCustom,java.lang.Object) -> a
net.minecraft.server.gui.MinecraftServerGui -> aev -> net.minecraft.server.gui.ServerGUI
    F:java.awt.Font MONOSPACED -> a
    F:org.slf4j.Logger LOGGER -> b
    F:java.lang.String TITLE -> c
    F:java.lang.String SHUTDOWN_TITLE -> d
    F:net.minecraft.server.dedicated.DedicatedServer server -> e
    F:java.lang.Thread logAppenderThread -> f
    F:java.util.Collection finalizers -> g
    F:java.util.concurrent.atomic.AtomicBoolean isClosing -> h
    M:net.minecraft.server.gui.ServerGUI showFrameFor(net.minecraft.server.dedicated.DedicatedServer) -> a
    M:void addFinalizer(java.lang.Runnable) -> a
    M:javax.swing.JComponent buildInfoPanel() -> c
    M:javax.swing.JComponent buildPlayerPanel() -> d
    M:javax.swing.JComponent buildChatPanel() -> e
    M:void start() -> a
    M:void close() -> b
    M:void runFinalizers() -> f
    M:void print(javax.swing.JTextArea,javax.swing.JScrollPane,java.lang.String) -> a
net.minecraft.server.gui.PlayerListComponent -> aew -> net.minecraft.server.gui.PlayerListBox
    F:net.minecraft.server.MinecraftServer server -> a
    F:int tickCount -> b
    M:void tick() -> a
net.minecraft.server.gui.StatsComponent -> aex -> net.minecraft.server.gui.GuiStatsComponent
    F:java.text.DecimalFormat DECIMAL_FORMAT -> a
    F:int vp -> c
    F:net.minecraft.server.MinecraftServer server -> e
    F:javax.swing.Timer timer -> f
    M:void tick() -> b
    M:double getAverage(long[]) -> a
    M:void paint(java.awt.Graphics) -> paint
    M:void close() -> a
net.minecraft.server.level.BlockDestructionProgress -> aez -> net.minecraft.server.level.BlockDestructionProgress
    F:int id -> a
    F:net.minecraft.core.BlockPosition pos -> b
    F:int progress -> c
    F:int updatedRenderTick -> d
    M:int getId() -> a
    M:net.minecraft.core.BlockPosition getPos() -> b
    M:void setProgress(int) -> a
    M:int getProgress() -> c
    M:void updateTick(int) -> b
    M:int getUpdatedRenderTick() -> d
    M:boolean equals(java.lang.Object) -> equals
    M:int compareTo(net.minecraft.server.level.BlockDestructionProgress) -> a
net.minecraft.server.level.ChunkHolder -> afa -> net.minecraft.server.level.PlayerChunk
    F:com.mojang.datafixers.util.Either UNLOADED_CHUNK -> a
    F:java.util.concurrent.CompletableFuture UNLOADED_CHUNK_FUTURE -> b
    F:com.mojang.datafixers.util.Either UNLOADED_LEVEL_CHUNK -> c
    F:com.mojang.datafixers.util.Either NOT_DONE_YET -> d
    F:java.util.concurrent.CompletableFuture UNLOADED_LEVEL_CHUNK_FUTURE -> e
    F:java.util.List CHUNK_STATUSES -> f
    F:int BLOCKS_BEFORE_RESEND_FUDGE -> h
    F:java.util.concurrent.atomic.AtomicReferenceArray futures -> i
    F:net.minecraft.world.level.LevelHeightAccessor levelHeightAccessor -> j
    F:java.util.concurrent.CompletableFuture fullChunkFuture -> k
    F:java.util.concurrent.CompletableFuture tickingChunkFuture -> l
    F:java.util.concurrent.CompletableFuture entityTickingChunkFuture -> m
    F:java.util.concurrent.CompletableFuture chunkToSave -> n
    F:net.minecraft.util.DebugBuffer chunkToSaveHistory -> o
    F:int oldTicketLevel -> p
    F:int ticketLevel -> q
    F:int queueLevel -> r
    F:net.minecraft.world.level.ChunkCoordIntPair pos -> s
    F:boolean hasChangedSections -> t
    F:java.util.BitSet blockChangedLightSectionFilter -> v
    F:java.util.BitSet skyChangedLightSectionFilter -> w
    F:net.minecraft.world.level.lighting.LightEngine lightEngine -> x
    F:net.minecraft.server.level.ChunkHolder$LevelChangeListener onLevelChange -> y
    F:net.minecraft.server.level.ChunkHolder$PlayerProvider playerProvider -> z
    M:java.util.concurrent.CompletableFuture getFutureIfPresentUnchecked(net.minecraft.world.level.chunk.ChunkStatus) -> a
    M:java.util.concurrent.CompletableFuture getFutureIfPresent(net.minecraft.world.level.chunk.ChunkStatus) -> b
    M:java.util.concurrent.CompletableFuture getTickingChunkFuture() -> a
    M:java.util.concurrent.CompletableFuture getEntityTickingChunkFuture() -> b
    M:java.util.concurrent.CompletableFuture getFullChunkFuture() -> c
    M:net.minecraft.world.level.chunk.Chunk getTickingChunk() -> d
    M:net.minecraft.world.level.chunk.Chunk getFullChunk() -> e
    M:net.minecraft.world.level.chunk.ChunkStatus getLastAvailableStatus() -> f
    M:net.minecraft.world.level.chunk.IChunkAccess getLastAvailable() -> g
    M:java.util.concurrent.CompletableFuture getChunkToSave() -> h
    M:void blockChanged(net.minecraft.core.BlockPosition) -> a
    M:void sectionLightChanged(net.minecraft.world.level.EnumSkyBlock,int) -> a
    M:void broadcastChanges(net.minecraft.world.level.chunk.Chunk) -> a
    M:void broadcastBlockEntityIfNeeded(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void broadcastBlockEntity(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void broadcast(net.minecraft.network.protocol.Packet,boolean) -> a
    M:java.util.concurrent.CompletableFuture getOrScheduleFuture(net.minecraft.world.level.chunk.ChunkStatus,net.minecraft.server.level.PlayerChunkMap) -> a
    M:void addSaveDependency(java.lang.String,java.util.concurrent.CompletableFuture) -> a
    M:void updateChunkToSave(java.util.concurrent.CompletableFuture,java.lang.String) -> a
    M:net.minecraft.server.level.PlayerChunk$State getFullStatus() -> i
    M:net.minecraft.world.level.ChunkCoordIntPair getPos() -> j
    M:int getTicketLevel() -> k
    M:int getQueueLevel() -> l
    M:void setQueueLevel(int) -> d
    M:void setTicketLevel(int) -> a
    M:void scheduleFullChunkPromotion(net.minecraft.server.level.PlayerChunkMap,java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,net.minecraft.server.level.PlayerChunk$State) -> a
    M:void demoteFullChunk(net.minecraft.server.level.PlayerChunkMap,net.minecraft.server.level.PlayerChunk$State) -> a
    M:void updateFutures(net.minecraft.server.level.PlayerChunkMap,java.util.concurrent.Executor) -> a
    M:net.minecraft.world.level.chunk.ChunkStatus getStatus(int) -> b
    M:net.minecraft.server.level.PlayerChunk$State getFullChunkStatus(int) -> c
    M:boolean wasAccessibleSinceLastSave() -> m
    M:void refreshAccessibility() -> n
    M:void replaceProtoChunk(net.minecraft.world.level.chunk.ProtoChunkExtension) -> a
    M:java.util.List getAllFutures() -> o
net.minecraft.server.level.ChunkHolder$ChunkLoadingFailure -> afa$a -> net.minecraft.server.level.PlayerChunk$Failure
    F:net.minecraft.server.level.PlayerChunk$Failure UNLOADED -> b
net.minecraft.server.level.ChunkHolder$ChunkSaveDebug -> afa$b -> net.minecraft.server.level.PlayerChunk$b
    F:java.lang.Thread thread -> a
    F:java.util.concurrent.CompletableFuture future -> b
    F:java.lang.String source -> c
net.minecraft.server.level.ChunkHolder$FullChunkStatus -> afa$c -> net.minecraft.server.level.PlayerChunk$State
    F:net.minecraft.server.level.PlayerChunk$State INACCESSIBLE -> a
    F:net.minecraft.server.level.PlayerChunk$State BORDER -> b
    F:net.minecraft.server.level.PlayerChunk$State TICKING -> c
    F:net.minecraft.server.level.PlayerChunk$State ENTITY_TICKING -> d
    M:boolean isOrAfter(net.minecraft.server.level.PlayerChunk$State) -> a
net.minecraft.server.level.ChunkHolder$LevelChangeListener -> afa$d -> net.minecraft.server.level.PlayerChunk$d
net.minecraft.server.level.ChunkHolder$PlayerProvider -> afa$e -> net.minecraft.server.level.PlayerChunk$e
net.minecraft.server.level.ChunkMap -> afb -> net.minecraft.server.level.PlayerChunkMap
    F:byte CHUNK_TYPE_REPLACEABLE -> f
    F:byte CHUNK_TYPE_UNKNOWN -> g
    F:byte CHUNK_TYPE_FULL -> h
    F:org.slf4j.Logger LOGGER -> i
    F:int CHUNK_SAVED_PER_TICK -> j
    F:int CHUNK_SAVED_EAGERLY_PER_TICK -> k
    F:int EAGER_CHUNK_SAVE_COOLDOWN_IN_MILLIS -> l
    F:int MIN_VIEW_DISTANCE -> m
    F:int MAX_VIEW_DISTANCE -> a
    F:int MAX_CHUNK_DISTANCE -> b
    F:int FORCED_TICKET_LEVEL -> c
    F:it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap updatingChunkMap -> n
    F:it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap visibleChunkMap -> o
    F:it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap pendingUnloads -> p
    F:it.unimi.dsi.fastutil.longs.LongSet entitiesInLevel -> q
    F:net.minecraft.server.level.WorldServer level -> r
    F:net.minecraft.server.level.LightEngineThreaded lightEngine -> s
    F:net.minecraft.util.thread.IAsyncTaskHandler mainThreadExecutor -> t
    F:net.minecraft.world.level.chunk.ChunkGenerator generator -> u
    F:net.minecraft.world.level.levelgen.RandomState randomState -> v
    F:java.util.function.Supplier overworldDataStorage -> w
    F:net.minecraft.world.entity.ai.village.poi.VillagePlace poiManager -> x
    F:it.unimi.dsi.fastutil.longs.LongSet toDrop -> y
    F:boolean modified -> z
    M:net.minecraft.world.level.chunk.ChunkGenerator generator() -> a
    M:net.minecraft.world.level.levelgen.RandomState randomState() -> b
    M:void debugReloadGenerator() -> c
    M:double euclideanDistanceSquared(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.entity.Entity) -> a
    M:boolean isChunkInRange(int,int,int,int,int) -> a
    M:boolean isChunkOnRangeBorder(int,int,int,int,int) -> b
    M:net.minecraft.server.level.LightEngineThreaded getLightEngine() -> d
    M:net.minecraft.server.level.PlayerChunk getUpdatingChunkIfPresent(long) -> a
    M:net.minecraft.server.level.PlayerChunk getVisibleChunkIfPresent(long) -> b
    M:java.util.function.IntSupplier getChunkQueueLevel(long) -> c
    M:java.lang.String getChunkDebugData(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:java.util.concurrent.CompletableFuture getChunkRangeFuture(net.minecraft.world.level.ChunkCoordIntPair,int,java.util.function.IntFunction) -> a
    M:net.minecraft.ReportedException debugFuturesAndCreateReportedException(java.lang.IllegalStateException,java.lang.String) -> a
    M:java.util.concurrent.CompletableFuture prepareEntityTickingChunk(net.minecraft.world.level.ChunkCoordIntPair) -> b
    M:net.minecraft.server.level.PlayerChunk updateChunkScheduling(long,int,net.minecraft.server.level.PlayerChunk,int) -> a
    M:void close() -> close
    M:void saveAllChunks(boolean) -> a
    M:void tick(java.util.function.BooleanSupplier) -> a
    M:boolean hasWork() -> e
    M:void processUnloads(java.util.function.BooleanSupplier) -> b
    M:void scheduleUnload(long,net.minecraft.server.level.PlayerChunk) -> a
    M:boolean promoteChunkMap() -> f
    M:java.util.concurrent.CompletableFuture schedule(net.minecraft.server.level.PlayerChunk,net.minecraft.world.level.chunk.ChunkStatus) -> a
    M:java.util.concurrent.CompletableFuture scheduleChunkLoad(net.minecraft.world.level.ChunkCoordIntPair) -> g
    M:boolean isChunkDataValid(net.minecraft.nbt.NBTTagCompound) -> b
    M:com.mojang.datafixers.util.Either handleChunkLoadFailure(java.lang.Throwable,net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:net.minecraft.world.level.chunk.IChunkAccess createEmptyChunk(net.minecraft.world.level.ChunkCoordIntPair) -> h
    M:void markPositionReplaceable(net.minecraft.world.level.ChunkCoordIntPair) -> i
    M:byte markPosition(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.chunk.ChunkStatus$Type) -> a
    M:java.util.concurrent.CompletableFuture scheduleChunkGeneration(net.minecraft.server.level.PlayerChunk,net.minecraft.world.level.chunk.ChunkStatus) -> b
    M:void releaseLightTicket(net.minecraft.world.level.ChunkCoordIntPair) -> c
    M:net.minecraft.world.level.chunk.ChunkStatus getDependencyStatus(net.minecraft.world.level.chunk.ChunkStatus,int) -> a
    M:void postLoadProtoChunk(net.minecraft.server.level.WorldServer,java.util.List) -> a
    M:java.util.concurrent.CompletableFuture protoChunkToFullChunk(net.minecraft.server.level.PlayerChunk) -> c
    M:java.util.concurrent.CompletableFuture prepareTickingChunk(net.minecraft.server.level.PlayerChunk) -> a
    M:java.util.concurrent.CompletableFuture prepareAccessibleChunk(net.minecraft.server.level.PlayerChunk) -> b
    M:int getTickingGenerated() -> g
    M:boolean saveChunkIfNeeded(net.minecraft.server.level.PlayerChunk) -> d
    M:boolean save(net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:boolean isExistingChunkFull(net.minecraft.world.level.ChunkCoordIntPair) -> j
    M:void setViewDistance(int) -> a
    M:void updateChunkTracking(net.minecraft.server.level.EntityPlayer,net.minecraft.world.level.ChunkCoordIntPair,org.apache.commons.lang3.mutable.MutableObject,boolean,boolean) -> a
    M:int size() -> h
    M:net.minecraft.server.level.ChunkMapDistance getDistanceManager() -> i
    M:java.lang.Iterable getChunks() -> j
    M:void dumpChunks(java.io.Writer) -> a
    M:java.lang.String printFuture(java.util.concurrent.CompletableFuture) -> a
    M:java.util.concurrent.CompletableFuture readChunk(net.minecraft.world.level.ChunkCoordIntPair) -> k
    M:net.minecraft.nbt.NBTTagCompound upgradeChunkTag(net.minecraft.nbt.NBTTagCompound) -> c
    M:boolean anyPlayerCloseEnoughForSpawning(net.minecraft.world.level.ChunkCoordIntPair) -> d
    M:java.util.List getPlayersCloseForSpawning(net.minecraft.world.level.ChunkCoordIntPair) -> e
    M:boolean playerIsCloseEnoughForSpawning(net.minecraft.server.level.EntityPlayer,net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:boolean skipPlayer(net.minecraft.server.level.EntityPlayer) -> b
    M:void updatePlayerStatus(net.minecraft.server.level.EntityPlayer,boolean) -> a
    M:net.minecraft.core.SectionPosition updatePlayerPos(net.minecraft.server.level.EntityPlayer) -> c
    M:void move(net.minecraft.server.level.EntityPlayer) -> a
    M:java.util.List getPlayers(net.minecraft.world.level.ChunkCoordIntPair,boolean) -> a
    M:void addEntity(net.minecraft.world.entity.Entity) -> a
    M:void removeEntity(net.minecraft.world.entity.Entity) -> b
    M:void tick() -> k
    M:void broadcast(net.minecraft.world.entity.Entity,net.minecraft.network.protocol.Packet) -> a
    M:void broadcastAndSend(net.minecraft.world.entity.Entity,net.minecraft.network.protocol.Packet) -> b
    M:void playerLoadedChunk(net.minecraft.server.level.EntityPlayer,org.apache.commons.lang3.mutable.MutableObject,net.minecraft.world.level.chunk.Chunk) -> a
    M:net.minecraft.world.entity.ai.village.poi.VillagePlace getPoiManager() -> l
    M:java.lang.String getStorageName() -> m
    M:void onFullChunkStatusChange(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.server.level.PlayerChunk$State) -> a
net.minecraft.server.level.ChunkMap$DistanceManager -> afb$a -> net.minecraft.server.level.PlayerChunkMap$a
    M:boolean isChunkToRemove(long) -> a
    M:net.minecraft.server.level.PlayerChunk getChunk(long) -> b
    M:net.minecraft.server.level.PlayerChunk updateChunkScheduling(long,int,net.minecraft.server.level.PlayerChunk,int) -> a
net.minecraft.server.level.ChunkMap$TrackedEntity -> afb$b -> net.minecraft.server.level.PlayerChunkMap$EntityTracker
    F:net.minecraft.server.level.EntityTrackerEntry serverEntity -> b
    F:net.minecraft.world.entity.Entity entity -> c
    F:int range -> d
    F:net.minecraft.core.SectionPosition lastSectionPos -> e
    F:java.util.Set seenBy -> f
    M:boolean equals(java.lang.Object) -> equals
    M:void broadcast(net.minecraft.network.protocol.Packet) -> a
    M:void broadcastAndSend(net.minecraft.network.protocol.Packet) -> b
    M:void broadcastRemoved() -> a
    M:void removePlayer(net.minecraft.server.level.EntityPlayer) -> a
    M:void updatePlayer(net.minecraft.server.level.EntityPlayer) -> b
    M:int scaledRange(int) -> a
    M:int getEffectiveRange() -> b
    M:void updatePlayers(java.util.List) -> a
net.minecraft.server.level.ChunkTaskPriorityQueue -> afc -> net.minecraft.server.level.ChunkTaskQueue
    F:int PRIORITY_LEVEL_COUNT -> a
    F:java.util.List taskQueue -> b
    F:int firstQueue -> c
    F:java.lang.String name -> d
    F:it.unimi.dsi.fastutil.longs.LongSet acquired -> e
    F:int maxTasks -> f
    M:void resortChunkTasks(int,net.minecraft.world.level.ChunkCoordIntPair,int) -> a
    M:void submit(java.util.Optional,long,int) -> a
    M:void release(long,boolean) -> a
    M:java.lang.Runnable acquire(long) -> a
    M:java.util.stream.Stream pop() -> a
    M:boolean hasWork() -> b
    M:it.unimi.dsi.fastutil.longs.LongSet getAcquired() -> c
net.minecraft.server.level.ChunkTaskPriorityQueueSorter -> afd -> net.minecraft.server.level.ChunkTaskQueueSorter
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.Map queues -> b
    F:java.util.Set sleeping -> c
    F:net.minecraft.util.thread.ThreadedMailbox mailbox -> d
    M:boolean hasWork() -> a
    M:net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Message message(java.util.function.Function,long,java.util.function.IntSupplier) -> a
    M:net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Message message(java.lang.Runnable,long,java.util.function.IntSupplier) -> a
    M:net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Message message(net.minecraft.server.level.PlayerChunk,java.lang.Runnable) -> a
    M:net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Message message(net.minecraft.server.level.PlayerChunk,java.util.function.Function) -> a
    M:net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Release release(java.lang.Runnable,long,boolean) -> a
    M:net.minecraft.util.thread.Mailbox getProcessor(net.minecraft.util.thread.Mailbox,boolean) -> a
    M:net.minecraft.util.thread.Mailbox getReleaseProcessor(net.minecraft.util.thread.Mailbox) -> a
    M:void release(net.minecraft.util.thread.Mailbox,long,java.lang.Runnable,boolean) -> a
    M:void submit(net.minecraft.util.thread.Mailbox,java.util.function.Function,long,java.util.function.IntSupplier,boolean) -> a
    M:void pollTask(net.minecraft.server.level.ChunkTaskQueue,net.minecraft.util.thread.Mailbox) -> a
    M:net.minecraft.server.level.ChunkTaskQueue getQueue(net.minecraft.util.thread.Mailbox) -> b
    M:java.lang.String getDebugStatus() -> b
    M:void close() -> close
net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Message -> afd$a -> net.minecraft.server.level.ChunkTaskQueueSorter$a
    F:java.util.function.Function task -> a
    F:long pos -> b
    F:java.util.function.IntSupplier level -> c
net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Release -> afd$b -> net.minecraft.server.level.ChunkTaskQueueSorter$b
    F:java.lang.Runnable task -> a
    F:long pos -> b
    F:boolean clearQueue -> c
net.minecraft.server.level.ChunkTracker -> afe -> net.minecraft.server.level.ChunkMap
    M:boolean isSource(long) -> a
    M:void checkNeighborsAfterUpdate(long,int,boolean) -> a
    M:int getComputedLevel(long,long,int) -> a
    M:int computeLevelFromNeighbor(long,long,int) -> b
    M:void update(long,int,boolean) -> b
net.minecraft.server.level.ColumnPos -> aff -> net.minecraft.server.level.BlockPosition2D
    F:int x -> a
    F:int z -> b
    F:long COORD_BITS -> c
    F:long COORD_MASK -> d
    M:net.minecraft.world.level.ChunkCoordIntPair toChunkPos() -> a
    M:long toLong() -> b
    M:long asLong(int,int) -> a
    M:int getX(long) -> a
    M:int getZ(long) -> b
    M:boolean equals(java.lang.Object) -> equals
    M:int x() -> c
    M:int z() -> d
net.minecraft.server.level.DemoMode -> afg -> net.minecraft.server.level.DemoPlayerInteractManager
    F:int DEMO_DAYS -> a
    F:int TOTAL_PLAY_TICKS -> b
    F:boolean displayedIntro -> e
    F:boolean demoHasEnded -> f
    F:int demoEndedReminder -> g
    F:int gameModeTicks -> h
    M:void tick() -> a
    M:void outputDemoReminder() -> f
    M:void handleBlockBreakAction(net.minecraft.core.BlockPosition,net.minecraft.network.protocol.game.PacketPlayInBlockDig$EnumPlayerDigType,net.minecraft.core.EnumDirection,int,int) -> a
    M:net.minecraft.world.EnumInteractionResult useItem(net.minecraft.server.level.EntityPlayer,net.minecraft.world.level.World,net.minecraft.world.item.ItemStack,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.world.EnumInteractionResult useItemOn(net.minecraft.server.level.EntityPlayer,net.minecraft.world.level.World,net.minecraft.world.item.ItemStack,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
net.minecraft.server.level.DistanceManager -> afh -> net.minecraft.server.level.ChunkMapDistance
    F:org.slf4j.Logger LOGGER -> a
    F:int ENTITY_TICKING_RANGE -> b
    F:int PLAYER_TICKET_LEVEL -> c
    F:int INITIAL_TICKET_LIST_CAPACITY -> d
    F:int ENTITY_TICKING_LEVEL_THRESHOLD -> e
    F:int BLOCK_TICKING_LEVEL_THRESHOLD -> f
    F:it.unimi.dsi.fastutil.longs.Long2ObjectMap playersPerChunk -> g
    F:it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap tickets -> h
    F:net.minecraft.server.level.DistanceManager$ChunkTicketTracker ticketTracker -> i
    F:net.minecraft.server.level.DistanceManager$FixedPlayerDistanceChunkTracker naturalSpawnChunkCounter -> j
    F:net.minecraft.server.level.TickingTracker tickingTicketsTracker -> k
    F:net.minecraft.server.level.DistanceManager$PlayerTicketTracker playerTicketManager -> l
    F:java.util.Set chunksToUpdateFutures -> m
    F:net.minecraft.server.level.ChunkTaskQueueSorter ticketThrottler -> n
    F:net.minecraft.util.thread.Mailbox ticketThrottlerInput -> o
    F:net.minecraft.util.thread.Mailbox ticketThrottlerReleaser -> p
    F:it.unimi.dsi.fastutil.longs.LongSet ticketsToRelease -> q
    F:java.util.concurrent.Executor mainThreadExecutor -> r
    F:long ticketTickCounter -> s
    F:int simulationDistance -> t
    M:void purgeStaleTickets() -> a
    M:int getTicketLevelAt(net.minecraft.util.ArraySetSorted) -> a
    M:boolean runAllUpdates(net.minecraft.server.level.PlayerChunkMap) -> a
    M:void addTicket(long,net.minecraft.server.level.Ticket) -> a
    M:void removeTicket(long,net.minecraft.server.level.Ticket) -> b
    M:void addTicket(net.minecraft.server.level.TicketType,net.minecraft.world.level.ChunkCoordIntPair,int,java.lang.Object) -> a
    M:void removeTicket(net.minecraft.server.level.TicketType,net.minecraft.world.level.ChunkCoordIntPair,int,java.lang.Object) -> b
    M:void addRegionTicket(net.minecraft.server.level.TicketType,net.minecraft.world.level.ChunkCoordIntPair,int,java.lang.Object) -> c
    M:void removeRegionTicket(net.minecraft.server.level.TicketType,net.minecraft.world.level.ChunkCoordIntPair,int,java.lang.Object) -> d
    M:net.minecraft.util.ArraySetSorted getTickets(long) -> g
    M:void updateChunkForced(net.minecraft.world.level.ChunkCoordIntPair,boolean) -> a
    M:void addPlayer(net.minecraft.core.SectionPosition,net.minecraft.server.level.EntityPlayer) -> a
    M:void removePlayer(net.minecraft.core.SectionPosition,net.minecraft.server.level.EntityPlayer) -> b
    M:int getPlayerTicketLevel() -> g
    M:boolean inEntityTickingRange(long) -> c
    M:boolean inBlockTickingRange(long) -> d
    M:java.lang.String getTicketDebugString(long) -> e
    M:void updatePlayerTickets(int) -> a
    M:void updateSimulationDistance(int) -> b
    M:int getNaturalSpawnChunkCount() -> b
    M:boolean hasPlayersNearby(long) -> f
    M:java.lang.String getDebugStatus() -> c
    M:void dumpTickets(java.lang.String) -> a
    M:net.minecraft.server.level.TickingTracker tickingTracker() -> d
    M:void removeTicketsOnClosing() -> e
    M:boolean hasTickets() -> f
net.minecraft.server.level.DistanceManager$ChunkTicketTracker -> afh$a -> net.minecraft.server.level.ChunkMapDistance$a
    M:int getLevelFromSource(long) -> b
    M:int getLevel(long) -> c
    M:void setLevel(long,int) -> a
    M:int runDistanceUpdates(int) -> a
net.minecraft.server.level.DistanceManager$FixedPlayerDistanceChunkTracker -> afh$b -> net.minecraft.server.level.ChunkMapDistance$b
    F:it.unimi.dsi.fastutil.longs.Long2ByteMap chunks -> a
    F:int maxDistance -> b
    M:int getLevel(long) -> c
    M:void setLevel(long,int) -> a
    M:void onLevelChange(long,int,int) -> a
    M:int getLevelFromSource(long) -> b
    M:boolean havePlayer(long) -> d
    M:void runAllUpdates() -> a
    M:void dumpChunks(java.lang.String) -> a
net.minecraft.server.level.DistanceManager$PlayerTicketTracker -> afh$c -> net.minecraft.server.level.ChunkMapDistance$c
    F:int viewDistance -> e
    F:it.unimi.dsi.fastutil.longs.Long2IntMap queueLevels -> f
    F:it.unimi.dsi.fastutil.longs.LongSet toUpdate -> g
    M:void onLevelChange(long,int,int) -> a
    M:void updateViewDistance(int) -> a
    M:void onLevelChange(long,int,boolean,boolean) -> a
    M:void runAllUpdates() -> a
    M:boolean haveTicketFor(int) -> c
net.minecraft.server.level.PlayerMap -> afi -> net.minecraft.server.level.PlayerMap
    F:it.unimi.dsi.fastutil.objects.Object2BooleanMap players -> a
    M:java.util.Set getPlayers(long) -> a
    M:void addPlayer(long,net.minecraft.server.level.EntityPlayer,boolean) -> a
    M:void removePlayer(long,net.minecraft.server.level.EntityPlayer) -> a
    M:void ignorePlayer(net.minecraft.server.level.EntityPlayer) -> a
    M:void unIgnorePlayer(net.minecraft.server.level.EntityPlayer) -> b
    M:boolean ignoredOrUnknown(net.minecraft.server.level.EntityPlayer) -> c
    M:boolean ignored(net.minecraft.server.level.EntityPlayer) -> d
    M:void updatePlayer(long,long,net.minecraft.server.level.EntityPlayer) -> a
net.minecraft.server.level.PlayerRespawnLogic -> afj -> net.minecraft.server.level.WorldProviderNormal
    M:net.minecraft.core.BlockPosition getOverworldRespawnPos(net.minecraft.server.level.WorldServer,int,int) -> a
    M:net.minecraft.core.BlockPosition getSpawnPosInChunk(net.minecraft.server.level.WorldServer,net.minecraft.world.level.ChunkCoordIntPair) -> a
net.minecraft.server.level.SectionTracker -> afk -> net.minecraft.server.level.LightEngineGraphSection
    M:boolean isSource(long) -> a
    M:void checkNeighborsAfterUpdate(long,int,boolean) -> a
    M:int getComputedLevel(long,long,int) -> a
    M:int computeLevelFromNeighbor(long,long,int) -> b
    M:void update(long,int,boolean) -> b
net.minecraft.server.level.ServerBossEvent -> afl -> net.minecraft.server.level.BossBattleServer
    F:java.util.Set players -> h
    F:java.util.Set unmodifiablePlayers -> i
    F:boolean visible -> j
    M:void setProgress(float) -> a
    M:void setColor(net.minecraft.world.BossBattle$BarColor) -> a
    M:void setOverlay(net.minecraft.world.BossBattle$BarStyle) -> a
    M:net.minecraft.world.BossBattle setDarkenScreen(boolean) -> a
    M:net.minecraft.world.BossBattle setPlayBossMusic(boolean) -> b
    M:net.minecraft.world.BossBattle setCreateWorldFog(boolean) -> c
    M:void setName(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void broadcast(java.util.function.Function) -> a
    M:void addPlayer(net.minecraft.server.level.EntityPlayer) -> a
    M:void removePlayer(net.minecraft.server.level.EntityPlayer) -> b
    M:void removeAllPlayers() -> b
    M:boolean isVisible() -> g
    M:void setVisible(boolean) -> d
    M:java.util.Collection getPlayers() -> h
net.minecraft.server.level.ServerChunkCache -> afm -> net.minecraft.server.level.ChunkProviderServer
    F:java.util.List CHUNK_STATUSES -> b
    F:net.minecraft.server.level.ChunkMapDistance distanceManager -> c
    F:net.minecraft.server.level.WorldServer level -> d
    F:java.lang.Thread mainThread -> e
    F:net.minecraft.server.level.LightEngineThreaded lightEngine -> f
    F:net.minecraft.server.level.ServerChunkCache$MainThreadExecutor mainThreadProcessor -> g
    F:net.minecraft.server.level.PlayerChunkMap chunkMap -> a
    F:net.minecraft.world.level.storage.WorldPersistentData dataStorage -> h
    F:long lastInhabitedUpdate -> i
    F:boolean spawnEnemies -> j
    F:boolean spawnFriendlies -> k
    F:int CACHE_SIZE -> l
    F:net.minecraft.world.level.NaturalSpawner$SpawnState lastSpawnState -> p
    M:net.minecraft.server.level.LightEngineThreaded getLightEngine() -> a
    M:net.minecraft.server.level.PlayerChunk getVisibleChunkIfPresent(long) -> b
    M:int getTickingGenerated() -> b
    M:void storeInCache(long,net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.world.level.chunk.ChunkStatus) -> a
    M:net.minecraft.world.level.chunk.IChunkAccess getChunk(int,int,net.minecraft.world.level.chunk.ChunkStatus,boolean) -> a
    M:net.minecraft.world.level.chunk.Chunk getChunkNow(int,int) -> a
    M:void clearCache() -> q
    M:java.util.concurrent.CompletableFuture getChunkFuture(int,int,net.minecraft.world.level.chunk.ChunkStatus,boolean) -> b
    M:java.util.concurrent.CompletableFuture getChunkFutureMainThread(int,int,net.minecraft.world.level.chunk.ChunkStatus,boolean) -> c
    M:boolean chunkAbsent(net.minecraft.server.level.PlayerChunk,int) -> a
    M:boolean hasChunk(int,int) -> b
    M:net.minecraft.world.level.IBlockAccess getChunkForLighting(int,int) -> c
    M:net.minecraft.world.level.World getLevel() -> c
    M:boolean pollTask() -> d
    M:boolean runDistanceManagerUpdates() -> r
    M:boolean isPositionTicking(long) -> a
    M:void save(boolean) -> a
    M:void close() -> close
    M:void tick(java.util.function.BooleanSupplier,boolean) -> a
    M:void tickChunks() -> s
    M:void getFullChunk(long,java.util.function.Consumer) -> a
    M:java.lang.String gatherStats() -> e
    M:int getPendingTasksCount() -> f
    M:net.minecraft.world.level.chunk.ChunkGenerator getGenerator() -> g
    M:net.minecraft.world.level.levelgen.RandomState randomState() -> h
    M:int getLoadedChunksCount() -> i
    M:void blockChanged(net.minecraft.core.BlockPosition) -> a
    M:void onLightUpdate(net.minecraft.world.level.EnumSkyBlock,net.minecraft.core.SectionPosition) -> a
    M:void addRegionTicket(net.minecraft.server.level.TicketType,net.minecraft.world.level.ChunkCoordIntPair,int,java.lang.Object) -> a
    M:void removeRegionTicket(net.minecraft.server.level.TicketType,net.minecraft.world.level.ChunkCoordIntPair,int,java.lang.Object) -> b
    M:void updateChunkForced(net.minecraft.world.level.ChunkCoordIntPair,boolean) -> a
    M:void move(net.minecraft.server.level.EntityPlayer) -> a
    M:void removeEntity(net.minecraft.world.entity.Entity) -> a
    M:void addEntity(net.minecraft.world.entity.Entity) -> b
    M:void broadcastAndSend(net.minecraft.world.entity.Entity,net.minecraft.network.protocol.Packet) -> a
    M:void broadcast(net.minecraft.world.entity.Entity,net.minecraft.network.protocol.Packet) -> b
    M:void setViewDistance(int) -> a
    M:void setSimulationDistance(int) -> b
    M:void setSpawnSettings(boolean,boolean) -> a
    M:java.lang.String getChunkDebugData(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:net.minecraft.world.level.storage.WorldPersistentData getDataStorage() -> j
    M:net.minecraft.world.entity.ai.village.poi.VillagePlace getPoiManager() -> k
    M:net.minecraft.world.level.chunk.storage.ChunkScanAccess chunkScanner() -> l
    M:net.minecraft.world.level.NaturalSpawner$SpawnState getLastSpawnState() -> m
    M:void removeTicketsOnClosing() -> n
    M:net.minecraft.world.level.lighting.LightEngine getLightEngine() -> o
    M:net.minecraft.world.level.IBlockAccess getLevel() -> p
net.minecraft.server.level.ServerChunkCache$ChunkAndHolder -> afm$a -> net.minecraft.server.level.ChunkProviderServer$a
    F:net.minecraft.world.level.chunk.Chunk chunk -> a
    F:net.minecraft.server.level.PlayerChunk holder -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.chunk.Chunk chunk() -> a
    M:net.minecraft.server.level.PlayerChunk holder() -> b
net.minecraft.server.level.ServerChunkCache$MainThreadExecutor -> afm$b -> net.minecraft.server.level.ChunkProviderServer$b
    M:java.lang.Runnable wrapRunnable(java.lang.Runnable) -> f
    M:boolean shouldRun(java.lang.Runnable) -> e
    M:boolean scheduleExecutables() -> at
    M:java.lang.Thread getRunningThread() -> au
    M:void doRunTask(java.lang.Runnable) -> d
    M:boolean pollTask() -> x
net.minecraft.server.level.ServerEntity -> afn -> net.minecraft.server.level.EntityTrackerEntry
    F:org.slf4j.Logger LOGGER -> a
    F:int TOLERANCE_LEVEL_ROTATION -> b
    F:net.minecraft.server.level.WorldServer level -> c
    F:net.minecraft.world.entity.Entity entity -> d
    F:int updateInterval -> e
    F:boolean trackDelta -> f
    F:java.util.function.Consumer broadcast -> g
    F:net.minecraft.network.protocol.game.VecDeltaCodec positionCodec -> h
    F:int yRotp -> i
    F:int xRotp -> j
    F:int yHeadRotp -> k
    F:net.minecraft.world.phys.Vec3D ap -> l
    F:int tickCount -> m
    F:int teleportDelay -> n
    F:java.util.List lastPassengers -> o
    F:boolean wasRiding -> p
    F:boolean wasOnGround -> q
    M:void sendChanges() -> a
    M:void removePairing(net.minecraft.server.level.EntityPlayer) -> a
    M:void addPairing(net.minecraft.server.level.EntityPlayer) -> b
    M:void sendPairingData(java.util.function.Consumer) -> a
    M:void sendDirtyEntityData() -> b
    M:void broadcastAndSend(net.minecraft.network.protocol.Packet) -> a
net.minecraft.server.level.ServerLevel -> afo -> net.minecraft.server.level.WorldServer
    F:net.minecraft.core.BlockPosition END_SPAWN_POINT -> a
    F:int MIN_RAIN_DELAY_TIME -> z
    F:boolean noSave -> b
    F:net.minecraft.world.entity.raid.PersistentRaid raids -> c
    F:boolean handlingTick -> aa
    F:java.util.List customSpawners -> ab
    F:net.minecraft.world.level.dimension.end.EnderDragonBattle dragonFight -> ac
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap dragonParts -> ad
    F:net.minecraft.world.level.StructureManager structureManager -> ae
    F:net.minecraft.world.level.levelgen.structure.StructureCheck structureCheck -> af
    F:boolean tickTime -> ag
    M:void setWeatherParameters(int,int,boolean,boolean) -> a
    M:net.minecraft.core.Holder getUncachedNoiseBiome(int,int,int) -> a
    M:net.minecraft.world.level.StructureManager structureManager() -> a
    M:void tick(java.util.function.BooleanSupplier) -> a
    M:boolean shouldTickBlocksAt(long) -> a
    M:void tickTime() -> b
    M:void setDayTime(long) -> b
    M:void tickCustomSpawners(boolean,boolean) -> a
    M:boolean shouldDiscardEntity(net.minecraft.world.entity.Entity) -> i
    M:void wakeUpAllPlayers() -> an
    M:void tickChunk(net.minecraft.world.level.chunk.Chunk,int) -> a
    M:net.minecraft.core.BlockPosition findLightningTargetAround(net.minecraft.core.BlockPosition) -> a
    M:boolean isHandlingTick() -> c
    M:boolean canSleepThroughNights() -> d
    M:void announceSleepStatus() -> ao
    M:void updateSleepingPlayerList() -> e
    M:net.minecraft.server.ScoreboardServer getScoreboard() -> f
    M:void advanceWeatherCycle() -> ap
    M:void resetWeatherCycle() -> aq
    M:void resetEmptyTime() -> g
    M:void tickFluid(net.minecraft.core.BlockPosition,net.minecraft.world.level.material.FluidType) -> a
    M:void tickBlock(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block) -> d
    M:void tickNonPassenger(net.minecraft.world.entity.Entity) -> a
    M:void tickPassenger(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> a
    M:boolean mayInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.core.BlockPosition) -> a
    M:void save(net.minecraft.util.IProgressUpdate,boolean,boolean) -> a
    M:void saveLevelData() -> ar
    M:java.util.List getEntities(net.minecraft.world.level.entity.EntityTypeTest,java.util.function.Predicate) -> a
    M:java.util.List getDragons() -> h
    M:java.util.List getPlayers(java.util.function.Predicate) -> a
    M:net.minecraft.server.level.EntityPlayer getRandomPlayer() -> i
    M:boolean addFreshEntity(net.minecraft.world.entity.Entity) -> b
    M:boolean addWithUUID(net.minecraft.world.entity.Entity) -> c
    M:void addDuringTeleport(net.minecraft.world.entity.Entity) -> d
    M:void addDuringCommandTeleport(net.minecraft.server.level.EntityPlayer) -> a
    M:void addDuringPortalTeleport(net.minecraft.server.level.EntityPlayer) -> b
    M:void addNewPlayer(net.minecraft.server.level.EntityPlayer) -> c
    M:void addRespawnedPlayer(net.minecraft.server.level.EntityPlayer) -> d
    M:void addPlayer(net.minecraft.server.level.EntityPlayer) -> e
    M:boolean addEntity(net.minecraft.world.entity.Entity) -> j
    M:boolean tryAddFreshEntityWithPassengers(net.minecraft.world.entity.Entity) -> e
    M:void unload(net.minecraft.world.level.chunk.Chunk) -> a
    M:void removePlayerImmediately(net.minecraft.server.level.EntityPlayer,net.minecraft.world.entity.Entity$RemovalReason) -> a
    M:void destroyBlockProgress(int,net.minecraft.core.BlockPosition,int) -> a
    M:void playSeededSound(net.minecraft.world.entity.player.EntityHuman,double,double,double,net.minecraft.sounds.SoundEffect,net.minecraft.sounds.SoundCategory,float,float,long) -> a
    M:void playSeededSound(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.entity.Entity,net.minecraft.sounds.SoundEffect,net.minecraft.sounds.SoundCategory,float,float,long) -> a
    M:void globalLevelEvent(int,net.minecraft.core.BlockPosition,int) -> b
    M:void levelEvent(net.minecraft.world.entity.player.EntityHuman,int,net.minecraft.core.BlockPosition,int) -> a
    M:int getLogicalHeight() -> j
    M:void gameEvent(net.minecraft.world.level.gameevent.GameEvent,net.minecraft.world.phys.Vec3D,net.minecraft.world.level.gameevent.GameEvent$Context) -> a
    M:void sendGameEvents() -> as
    M:void handleGameEventMessagesInQueue(java.util.List) -> a
    M:void sendBlockUpdated(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,int) -> a
    M:void updateNeighborsAt(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block) -> a
    M:void updateNeighborsAtExceptFromFacing(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.EnumDirection) -> a
    M:void neighborChanged(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void broadcastEntityEvent(net.minecraft.world.entity.Entity,byte) -> a
    M:net.minecraft.server.level.ChunkProviderServer getChunkSource() -> k
    M:net.minecraft.world.level.Explosion explode(net.minecraft.world.entity.Entity,net.minecraft.world.damagesource.DamageSource,net.minecraft.world.level.ExplosionDamageCalculator,double,double,double,float,boolean,net.minecraft.world.level.Explosion$Effect) -> a
    M:void blockEvent(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,int,int) -> a
    M:void runBlockEvents() -> at
    M:boolean doBlockEvent(net.minecraft.world.level.BlockActionData) -> a
    M:net.minecraft.world.ticks.TickListServer getBlockTicks() -> l
    M:net.minecraft.world.ticks.TickListServer getFluidTicks() -> m
    M:net.minecraft.server.MinecraftServer getServer() -> n
    M:net.minecraft.world.level.portal.PortalTravelAgent getPortalForcer() -> o
    M:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager getStructureManager() -> p
    M:int sendParticles(net.minecraft.core.particles.ParticleParam,double,double,double,int,double,double,double,double) -> a
    M:boolean sendParticles(net.minecraft.server.level.EntityPlayer,net.minecraft.core.particles.ParticleParam,boolean,double,double,double,int,double,double,double,double) -> a
    M:boolean sendParticles(net.minecraft.server.level.EntityPlayer,boolean,double,double,double,net.minecraft.network.protocol.Packet) -> a
    M:net.minecraft.world.entity.Entity getEntity(int) -> a
    M:net.minecraft.world.entity.Entity getEntityOrPart(int) -> b
    M:net.minecraft.world.entity.Entity getEntity(java.util.UUID) -> a
    M:net.minecraft.core.BlockPosition findNearestMapStructure(net.minecraft.tags.TagKey,net.minecraft.core.BlockPosition,int,boolean) -> a
    M:com.mojang.datafixers.util.Pair findClosestBiome3d(java.util.function.Predicate,net.minecraft.core.BlockPosition,int,int,int) -> a
    M:net.minecraft.world.item.crafting.CraftingManager getRecipeManager() -> q
    M:boolean noSave() -> r
    M:net.minecraft.core.IRegistryCustom registryAccess() -> s
    M:net.minecraft.world.level.storage.WorldPersistentData getDataStorage() -> t
    M:net.minecraft.world.level.saveddata.maps.WorldMap getMapData(java.lang.String) -> a
    M:void setMapData(java.lang.String,net.minecraft.world.level.saveddata.maps.WorldMap) -> a
    M:int getFreeMapId() -> u
    M:void setDefaultSpawnPos(net.minecraft.core.BlockPosition,float) -> a
    M:it.unimi.dsi.fastutil.longs.LongSet getForcedChunks() -> v
    M:boolean setChunkForced(int,int,boolean) -> a
    M:java.util.List players() -> w
    M:void onBlockStateChange(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.entity.ai.village.poi.VillagePlace getPoiManager() -> x
    M:boolean isVillage(net.minecraft.core.BlockPosition) -> b
    M:boolean isVillage(net.minecraft.core.SectionPosition) -> a
    M:boolean isCloseToVillage(net.minecraft.core.BlockPosition,int) -> a
    M:int sectionsToVillage(net.minecraft.core.SectionPosition) -> b
    M:net.minecraft.world.entity.raid.PersistentRaid getRaids() -> y
    M:net.minecraft.world.entity.raid.Raid getRaidAt(net.minecraft.core.BlockPosition) -> c
    M:boolean isRaided(net.minecraft.core.BlockPosition) -> d
    M:void onReputationEvent(net.minecraft.world.entity.ai.village.ReputationEvent,net.minecraft.world.entity.Entity,net.minecraft.world.entity.ReputationHandler) -> a
    M:void saveDebugReport(java.nio.file.Path) -> a
    M:void dumpEntities(java.io.Writer,java.lang.Iterable) -> a
    M:void dumpBlockEntityTickers(java.io.Writer) -> a
    M:void clearBlockEvents(net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:void blockUpdated(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block) -> b
    M:float getShade(net.minecraft.core.EnumDirection,boolean) -> a
    M:java.lang.Iterable getAllEntities() -> z
    M:java.lang.String getTypeCount(java.lang.Iterable,java.util.function.Function) -> a
    M:void makeObsidianPlatform(net.minecraft.server.level.WorldServer) -> a
    M:void addLegacyChunkEntities(java.util.stream.Stream) -> a
    M:void addWorldGenChunkEntities(java.util.stream.Stream) -> b
    M:void startTickingChunk(net.minecraft.world.level.chunk.Chunk) -> b
    M:void onStructureStartsAvailable(net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:void close() -> close
    M:boolean areEntitiesLoaded(long) -> c
    M:boolean isPositionTickingWithEntitiesLoaded(long) -> d
    M:boolean isPositionEntityTicking(net.minecraft.core.BlockPosition) -> e
    M:boolean isNaturalSpawningAllowed(net.minecraft.core.BlockPosition) -> f
    M:boolean isNaturalSpawningAllowed(net.minecraft.world.level.ChunkCoordIntPair) -> a
net.minecraft.server.level.ServerLevel$EntityCallbacks -> afo$a -> net.minecraft.server.level.WorldServer$a
    M:void onCreated(net.minecraft.world.entity.Entity) -> a
    M:void onDestroyed(net.minecraft.world.entity.Entity) -> b
    M:void onTickingStart(net.minecraft.world.entity.Entity) -> c
    M:void onTickingEnd(net.minecraft.world.entity.Entity) -> d
    M:void onTrackingStart(net.minecraft.world.entity.Entity) -> e
    M:void onTrackingEnd(net.minecraft.world.entity.Entity) -> f
    M:void onSectionChange(net.minecraft.world.entity.Entity) -> g
    M:void onSectionChange(java.lang.Object) -> a
    M:void onTrackingEnd(java.lang.Object) -> b
    M:void onTrackingStart(java.lang.Object) -> c
    M:void onTickingEnd(java.lang.Object) -> d
    M:void onTickingStart(java.lang.Object) -> e
    M:void onDestroyed(java.lang.Object) -> f
    M:void onCreated(java.lang.Object) -> g
net.minecraft.server.level.ServerPlayer -> afp -> net.minecraft.server.level.EntityPlayer
    F:org.slf4j.Logger LOGGER -> co
    F:int NEUTRAL_MOB_DEATH_NOTIFICATION_RADII_XZ -> cp
    F:int NEUTRAL_MOB_DEATH_NOTIFICATION_RADII_Y -> cq
    F:net.minecraft.server.network.PlayerConnection connection -> b
    F:net.minecraft.server.MinecraftServer server -> c
    F:net.minecraft.server.level.PlayerInteractManager gameMode -> d
    F:net.minecraft.server.AdvancementDataPlayer advancements -> cr
    F:net.minecraft.stats.ServerStatisticManager stats -> cs
    F:float lastRecordedHealthAndAbsorption -> ct
    F:int lastRecordedFoodLevel -> cu
    F:int lastRecordedAirLevel -> cv
    F:int lastRecordedArmor -> cw
    F:int lastRecordedLevel -> cx
    F:int lastRecordedExperience -> cy
    F:float lastSentHealth -> cz
    F:net.minecraft.world.inventory.ICrafting containerListener -> da
    F:int containerCounter -> db
    F:int latency -> e
    F:boolean wonGame -> f
    M:void fudgeSpawnLocation(net.minecraft.server.level.WorldServer) -> d
    M:int getCoprime(int) -> u
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void setExperiencePoints(int) -> a
    M:void setExperienceLevels(int) -> b
    M:void giveExperienceLevels(int) -> c
    M:void onEnchantmentPerformed(net.minecraft.world.item.ItemStack,int) -> a
    M:void initMenu(net.minecraft.world.inventory.Container) -> a
    M:void initInventoryMenu() -> g
    M:void onEnterCombat() -> h
    M:void onLeaveCombat() -> i
    M:void onInsideBlock(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.item.ItemCooldown createItemCooldowns() -> j
    M:void tick() -> k
    M:void doTick() -> l
    M:void resetFallDistance() -> m
    M:void trackStartFallingPosition() -> n
    M:void trackEnteredOrExitedLavaOnVehicle() -> o
    M:void updateScoreForCriteria(net.minecraft.world.scores.criteria.IScoreboardCriteria,int) -> a
    M:void die(net.minecraft.world.damagesource.DamageSource) -> a
    M:void tellNeutralMobsThatIDied() -> gb
    M:void awardKillScore(net.minecraft.world.entity.Entity,int,net.minecraft.world.damagesource.DamageSource) -> a
    M:void handleTeamKill(java.lang.String,java.lang.String,net.minecraft.world.scores.criteria.ObjectiveCriteria[]) -> a
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:boolean canHarmPlayer(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean isPvpAllowed() -> gc
    M:net.minecraft.world.level.portal.ShapeDetectorShape findDimensionEntryPoint(net.minecraft.server.level.WorldServer) -> a
    M:net.minecraft.world.entity.Entity changeDimension(net.minecraft.server.level.WorldServer) -> b
    M:void createEndPlatform(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:java.util.Optional getExitPortal(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,boolean,net.minecraft.world.level.border.WorldBorder) -> a
    M:void triggerDimensionChangeTriggers(net.minecraft.server.level.WorldServer) -> e
    M:boolean broadcastToPlayer(net.minecraft.server.level.EntityPlayer) -> a
    M:void take(net.minecraft.world.entity.Entity,int) -> a
    M:com.mojang.datafixers.util.Either startSleepInBed(net.minecraft.core.BlockPosition) -> a
    M:void startSleeping(net.minecraft.core.BlockPosition) -> b
    M:boolean bedInRange(net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:boolean isReachableBedBlock(net.minecraft.core.BlockPosition) -> g
    M:boolean bedBlocked(net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:void stopSleepInBed(boolean,boolean) -> a
    M:boolean startRiding(net.minecraft.world.entity.Entity,boolean) -> a
    M:void stopRiding() -> p
    M:void dismountTo(double,double,double) -> a
    M:boolean isInvulnerableTo(net.minecraft.world.damagesource.DamageSource) -> b
    M:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
    M:void onChangedBlock(net.minecraft.core.BlockPosition) -> c
    M:void doCheckFallDamage(double,boolean) -> a
    M:void openTextEdit(net.minecraft.world.level.block.entity.TileEntitySign) -> a
    M:void nextContainerCounter() -> gd
    M:java.util.OptionalInt openMenu(net.minecraft.world.ITileInventory) -> a
    M:void sendMerchantOffers(int,net.minecraft.world.item.trading.MerchantRecipeList,int,int,boolean,boolean) -> a
    M:void openHorseInventory(net.minecraft.world.entity.animal.horse.EntityHorseAbstract,net.minecraft.world.IInventory) -> a
    M:void openItemGui(net.minecraft.world.item.ItemStack,net.minecraft.world.EnumHand) -> a
    M:void openCommandBlock(net.minecraft.world.level.block.entity.TileEntityCommand) -> a
    M:void closeContainer() -> q
    M:void doCloseContainer() -> r
    M:void setPlayerInput(float,float,boolean,boolean) -> a
    M:void awardStat(net.minecraft.stats.Statistic,int) -> a
    M:void resetStat(net.minecraft.stats.Statistic) -> a
    M:int awardRecipes(java.util.Collection) -> a
    M:void awardRecipesByKey(net.minecraft.resources.ResourceLocation[]) -> a
    M:int resetRecipes(java.util.Collection) -> b
    M:void giveExperiencePoints(int) -> d
    M:void disconnect() -> s
    M:boolean hasDisconnected() -> t
    M:void resetSentInfo() -> u
    M:void displayClientMessage(net.minecraft.network.chat.IChatBaseComponent,boolean) -> a
    M:void completeUsingItem() -> v
    M:void lookAt(net.minecraft.commands.arguments.ArgumentAnchor$Anchor,net.minecraft.world.phys.Vec3D) -> a
    M:void lookAt(net.minecraft.commands.arguments.ArgumentAnchor$Anchor,net.minecraft.world.entity.Entity,net.minecraft.commands.arguments.ArgumentAnchor$Anchor) -> a
    M:void restoreFrom(net.minecraft.server.level.EntityPlayer,boolean) -> a
    M:void onEffectAdded(net.minecraft.world.effect.MobEffect,net.minecraft.world.entity.Entity) -> a
    M:void onEffectUpdated(net.minecraft.world.effect.MobEffect,boolean,net.minecraft.world.entity.Entity) -> a
    M:void onEffectRemoved(net.minecraft.world.effect.MobEffect) -> a
    M:void teleportTo(double,double,double) -> b
    M:void moveTo(double,double,double) -> c
    M:void crit(net.minecraft.world.entity.Entity) -> a
    M:void magicCrit(net.minecraft.world.entity.Entity) -> b
    M:void onUpdateAbilities() -> w
    M:net.minecraft.server.level.WorldServer getLevel() -> x
    M:boolean setGameMode(net.minecraft.world.level.EnumGamemode) -> a
    M:boolean isCreative() -> f
    M:void sendSystemMessage(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void sendSystemMessage(net.minecraft.network.chat.IChatBaseComponent,net.minecraft.resources.ResourceKey) -> a
    M:void handleMessageDeliveryFailure(net.minecraft.network.chat.IChatBaseComponent,net.minecraft.resources.ResourceKey) -> b
    M:void sendChatMessage(net.minecraft.network.chat.PlayerChatMessage,net.minecraft.network.chat.ChatSender,net.minecraft.resources.ResourceKey) -> a
    M:int resolveChatTypeId(net.minecraft.resources.ResourceKey) -> a
    M:java.lang.String getIpAddress() -> y
    M:void updateOptions(net.minecraft.network.protocol.game.PacketPlayInSettings) -> a
    M:boolean canChatInColor() -> z
    M:boolean acceptsChat(net.minecraft.resources.ResourceKey) -> b
    M:void sendTexturePack(java.lang.String,java.lang.String,boolean,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void sendServerStatus(net.minecraft.network.protocol.status.ServerPing) -> a
    M:void setCamera(net.minecraft.world.entity.Entity) -> c
    M:void attack(net.minecraft.world.entity.Entity) -> d
    M:void swing(net.minecraft.world.EnumHand) -> a
    M:void teleportTo(net.minecraft.server.level.WorldServer,double,double,double,float,float) -> a
    M:void setRespawnPosition(net.minecraft.resources.ResourceKey,net.minecraft.core.BlockPosition,float,boolean,boolean) -> a
    M:void trackChunk(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.network.protocol.Packet) -> a
    M:void untrackChunk(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:void setLastSectionPos(net.minecraft.core.SectionPosition) -> a
    M:void playNotifySound(net.minecraft.sounds.SoundEffect,net.minecraft.sounds.SoundCategory,float,float) -> a
    M:net.minecraft.world.entity.item.EntityItem drop(net.minecraft.world.item.ItemStack,boolean,boolean) -> a
    M:void setLevel(net.minecraft.server.level.WorldServer) -> c
    M:net.minecraft.world.level.EnumGamemode readPlayerMode(net.minecraft.nbt.NBTTagCompound,java.lang.String) -> a
    M:net.minecraft.world.level.EnumGamemode calculateGameModeForNewPlayer(net.minecraft.world.level.EnumGamemode) -> b
    M:void loadGameTypes(net.minecraft.nbt.NBTTagCompound) -> c
    M:void storeGameTypes(net.minecraft.nbt.NBTTagCompound) -> k
    M:boolean shouldFilterMessageTo(net.minecraft.server.level.EntityPlayer) -> b
    M:boolean mayInteract(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void updateUsingItem(net.minecraft.world.item.ItemStack) -> a
    M:boolean drop(boolean) -> a
    M:void onItemPickup(net.minecraft.world.entity.item.EntityItem) -> a
    M:void sendInitialData(net.minecraft.world.inventory.Container,net.minecraft.core.NonNullList,net.minecraft.world.item.ItemStack,int[]) -> a
    M:void sendSlotChange(net.minecraft.world.inventory.Container,int,net.minecraft.world.item.ItemStack) -> a
    M:void sendCarriedChange(net.minecraft.world.inventory.Container,net.minecraft.world.item.ItemStack) -> a
    M:void sendDataChange(net.minecraft.world.inventory.Container,int,int) -> a
    M:void broadcastDataValue(net.minecraft.world.inventory.Container,int,int) -> b
    M:void slotChanged(net.minecraft.world.inventory.Container,int,net.minecraft.world.item.ItemStack) -> a
    M:void dataChanged(net.minecraft.world.inventory.Container,int,int) -> a
net.minecraft.server.level.ServerPlayerGameMode -> afq -> net.minecraft.server.level.PlayerInteractManager
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.server.level.WorldServer level -> c
    F:net.minecraft.server.level.EntityPlayer player -> d
    F:net.minecraft.world.level.EnumGamemode gameModeForPlayer -> b
    F:net.minecraft.world.level.EnumGamemode previousGameModeForPlayer -> e
    F:boolean isDestroyingBlock -> f
    F:int destroyProgressStart -> g
    F:net.minecraft.core.BlockPosition destroyPos -> h
    F:int gameTicks -> i
    F:boolean hasDelayedDestroy -> j
    F:net.minecraft.core.BlockPosition delayedDestroyPos -> k
    F:int delayedTickStart -> l
    F:int lastSentState -> m
    M:boolean changeGameModeForPlayer(net.minecraft.world.level.EnumGamemode) -> a
    M:void setGameModeForPlayer(net.minecraft.world.level.EnumGamemode,net.minecraft.world.level.EnumGamemode) -> a
    M:net.minecraft.world.level.EnumGamemode getGameModeForPlayer() -> b
    M:net.minecraft.world.level.EnumGamemode getPreviousGameModeForPlayer() -> c
    M:boolean isSurvival() -> d
    M:boolean isCreative() -> e
    M:void tick() -> a
    M:float incrementDestroyProgress(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,int) -> a
    M:void debugLogging(net.minecraft.core.BlockPosition,boolean,int,java.lang.String) -> a
    M:void handleBlockBreakAction(net.minecraft.core.BlockPosition,net.minecraft.network.protocol.game.PacketPlayInBlockDig$EnumPlayerDigType,net.minecraft.core.EnumDirection,int,int) -> a
    M:void destroyAndAck(net.minecraft.core.BlockPosition,int,java.lang.String) -> a
    M:boolean destroyBlock(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.EnumInteractionResult useItem(net.minecraft.server.level.EntityPlayer,net.minecraft.world.level.World,net.minecraft.world.item.ItemStack,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.world.EnumInteractionResult useItemOn(net.minecraft.server.level.EntityPlayer,net.minecraft.world.level.World,net.minecraft.world.item.ItemStack,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void setLevel(net.minecraft.server.level.WorldServer) -> a
net.minecraft.server.level.ThreadedLevelLightEngine -> afr -> net.minecraft.server.level.LightEngineThreaded
    F:org.slf4j.Logger LOGGER -> d
    F:net.minecraft.util.thread.ThreadedMailbox taskMailbox -> e
    F:it.unimi.dsi.fastutil.objects.ObjectList lightTasks -> f
    F:net.minecraft.server.level.PlayerChunkMap chunkMap -> g
    F:net.minecraft.util.thread.Mailbox sorterMailbox -> h
    F:int taskPerBatch -> i
    F:java.util.concurrent.atomic.AtomicBoolean scheduled -> j
    M:void close() -> close
    M:int runUpdates(int,boolean,boolean) -> a
    M:void onBlockEmissionIncrease(net.minecraft.core.BlockPosition,int) -> a
    M:void checkBlock(net.minecraft.core.BlockPosition) -> a
    M:void updateChunkStatus(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:void updateSectionStatus(net.minecraft.core.SectionPosition,boolean) -> a
    M:void enableLightSources(net.minecraft.world.level.ChunkCoordIntPair,boolean) -> a
    M:void queueSectionData(net.minecraft.world.level.EnumSkyBlock,net.minecraft.core.SectionPosition,net.minecraft.world.level.chunk.NibbleArray,boolean) -> a
    M:void addTask(int,int,net.minecraft.server.level.LightEngineThreaded$Update,java.lang.Runnable) -> a
    M:void addTask(int,int,java.util.function.IntSupplier,net.minecraft.server.level.LightEngineThreaded$Update,java.lang.Runnable) -> a
    M:void retainData(net.minecraft.world.level.ChunkCoordIntPair,boolean) -> b
    M:java.util.concurrent.CompletableFuture retainData(net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:java.util.concurrent.CompletableFuture lightChunk(net.minecraft.world.level.chunk.IChunkAccess,boolean) -> a
    M:void tryScheduleUpdate() -> a
    M:void runUpdate() -> e
    M:void setTaskPerBatch(int) -> a
net.minecraft.server.level.ThreadedLevelLightEngine$TaskType -> afr$a -> net.minecraft.server.level.LightEngineThreaded$Update
    F:net.minecraft.server.level.LightEngineThreaded$Update PRE_UPDATE -> a
    F:net.minecraft.server.level.LightEngineThreaded$Update POST_UPDATE -> b
net.minecraft.server.level.Ticket -> afs -> net.minecraft.server.level.Ticket
    F:net.minecraft.server.level.TicketType type -> a
    F:int ticketLevel -> b
    F:java.lang.Object key -> c
    F:long createdTick -> d
    M:int compareTo(net.minecraft.server.level.Ticket) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.server.level.TicketType getType() -> a
    M:int getTicketLevel() -> b
    M:void setCreatedTick(long) -> a
    M:boolean timedOut(long) -> b
net.minecraft.server.level.TicketType -> aft -> net.minecraft.server.level.TicketType
    F:java.lang.String name -> i
    F:java.util.Comparator comparator -> j
    F:long timeout -> k
    F:net.minecraft.server.level.TicketType START -> a
    F:net.minecraft.server.level.TicketType DRAGON -> b
    F:net.minecraft.server.level.TicketType PLAYER -> c
    F:net.minecraft.server.level.TicketType FORCED -> d
    F:net.minecraft.server.level.TicketType LIGHT -> e
    F:net.minecraft.server.level.TicketType PORTAL -> f
    F:net.minecraft.server.level.TicketType POST_TELEPORT -> g
    F:net.minecraft.server.level.TicketType UNKNOWN -> h
    M:net.minecraft.server.level.TicketType create(java.lang.String,java.util.Comparator) -> a
    M:net.minecraft.server.level.TicketType create(java.lang.String,java.util.Comparator,int) -> a
    M:java.util.Comparator getComparator() -> a
    M:long timeout() -> b
net.minecraft.server.level.TickingTracker -> afu -> net.minecraft.server.level.TickingTracker
    F:int INITIAL_TICKET_LIST_CAPACITY -> b
    F:it.unimi.dsi.fastutil.longs.Long2ByteMap chunks -> a
    F:it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap tickets -> c
    M:net.minecraft.util.ArraySetSorted getTickets(long) -> g
    M:int getTicketLevelAt(net.minecraft.util.ArraySetSorted) -> a
    M:void addTicket(long,net.minecraft.server.level.Ticket) -> a
    M:void removeTicket(long,net.minecraft.server.level.Ticket) -> b
    M:void addTicket(net.minecraft.server.level.TicketType,net.minecraft.world.level.ChunkCoordIntPair,int,java.lang.Object) -> a
    M:void removeTicket(net.minecraft.server.level.TicketType,net.minecraft.world.level.ChunkCoordIntPair,int,java.lang.Object) -> b
    M:void replacePlayerTicketsLevel(int) -> a
    M:int getLevelFromSource(long) -> b
    M:int getLevel(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:int getLevel(long) -> c
    M:void setLevel(long,int) -> a
    M:void runAllUpdates() -> a
    M:java.lang.String getTicketDebugString(long) -> d
net.minecraft.server.level.WorldGenRegion -> afv -> net.minecraft.server.level.RegionLimitedWorldAccess
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.List cache -> b
    F:net.minecraft.world.level.chunk.IChunkAccess center -> c
    F:int size -> d
    F:net.minecraft.server.level.WorldServer level -> e
    F:long seed -> f
    F:net.minecraft.world.level.storage.WorldData levelData -> g
    F:net.minecraft.util.RandomSource random -> h
    F:net.minecraft.world.level.dimension.DimensionManager dimensionType -> i
    F:net.minecraft.world.ticks.TickListWorldGen blockTicks -> j
    F:net.minecraft.world.ticks.TickListWorldGen fluidTicks -> k
    F:net.minecraft.world.level.biome.BiomeManager biomeManager -> l
    F:net.minecraft.world.level.ChunkCoordIntPair firstPos -> m
    F:net.minecraft.world.level.ChunkCoordIntPair lastPos -> n
    F:net.minecraft.world.level.StructureManager structureManager -> o
    F:net.minecraft.world.level.chunk.ChunkStatus generatingStatus -> p
    F:int writeRadiusCutoff -> q
    F:java.util.function.Supplier currentlyGenerating -> r
    F:java.util.concurrent.atomic.AtomicLong subTickCount -> s
    F:net.minecraft.resources.MinecraftKey WORLDGEN_REGION_RANDOM -> t
    M:boolean isOldChunkAround(net.minecraft.world.level.ChunkCoordIntPair,int) -> a
    M:net.minecraft.world.level.ChunkCoordIntPair getCenter() -> a
    M:void setCurrentlyGenerating(java.util.function.Supplier) -> a
    M:net.minecraft.world.level.chunk.IChunkAccess getChunk(int,int) -> a
    M:net.minecraft.world.level.chunk.IChunkAccess getChunk(int,int,net.minecraft.world.level.chunk.ChunkStatus,boolean) -> a
    M:boolean hasChunk(int,int) -> b
    M:net.minecraft.world.entity.player.EntityHuman getNearestPlayer(double,double,double,double,java.util.function.Predicate) -> a
    M:net.minecraft.core.Holder getUncachedNoiseBiome(int,int,int) -> a
    M:float getShade(net.minecraft.core.EnumDirection,boolean) -> a
    M:boolean destroyBlock(net.minecraft.core.BlockPosition,boolean,net.minecraft.world.entity.Entity,int) -> a
    M:boolean setBlock(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,int,int) -> a
    M:void markPosForPostprocessing(net.minecraft.core.BlockPosition) -> f
    M:boolean addFreshEntity(net.minecraft.world.entity.Entity) -> b
    M:boolean removeBlock(net.minecraft.core.BlockPosition,boolean) -> a
    M:net.minecraft.core.IRegistryCustom registryAccess() -> s
    M:net.minecraft.server.MinecraftServer getServer() -> n
    M:int getHeight(net.minecraft.world.level.levelgen.HeightMap$Type,int,int) -> a
    M:void playSound(net.minecraft.world.entity.player.EntityHuman,net.minecraft.core.BlockPosition,net.minecraft.sounds.SoundEffect,net.minecraft.sounds.SoundCategory,float,float) -> a
    M:void addParticle(net.minecraft.core.particles.ParticleParam,double,double,double,double,double,double) -> a
    M:void levelEvent(net.minecraft.world.entity.player.EntityHuman,int,net.minecraft.core.BlockPosition,int) -> a
    M:void gameEvent(net.minecraft.world.level.gameevent.GameEvent,net.minecraft.world.phys.Vec3D,net.minecraft.world.level.gameevent.GameEvent$Context) -> a
    M:boolean isStateAtPosition(net.minecraft.core.BlockPosition,java.util.function.Predicate) -> a
    M:boolean isFluidAtPosition(net.minecraft.core.BlockPosition,java.util.function.Predicate) -> b
    M:java.util.List getEntities(net.minecraft.world.level.entity.EntityTypeTest,net.minecraft.world.phys.AxisAlignedBB,java.util.function.Predicate) -> a
    M:java.util.List getEntities(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AxisAlignedBB,java.util.function.Predicate) -> a
    M:java.util.List players() -> w
net.minecraft.server.level.progress.ChunkProgressListener -> afx -> net.minecraft.server.level.progress.WorldLoadListener
net.minecraft.server.level.progress.ChunkProgressListenerFactory -> afy -> net.minecraft.server.level.progress.WorldLoadListenerFactory
net.minecraft.server.level.progress.LoggerChunkProgressListener -> afz -> net.minecraft.server.level.progress.WorldLoadListenerLogger
    F:org.slf4j.Logger LOGGER -> a
    F:int maxCount -> b
    F:int count -> c
    F:long startTime -> d
    F:long nextTickTime -> e
    M:void updateSpawnPos(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:void onStatusChange(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.chunk.ChunkStatus) -> a
    M:void start() -> a
    M:void stop() -> b
    M:int getProgress() -> c
net.minecraft.server.level.progress.ProcessorChunkProgressListener -> aga -> net.minecraft.server.level.progress.ProcessorChunkProgressListener
    F:net.minecraft.server.level.progress.WorldLoadListener delegate -> a
    F:net.minecraft.util.thread.ThreadedMailbox mailbox -> b
    M:net.minecraft.server.level.progress.ProcessorChunkProgressListener createStarted(net.minecraft.server.level.progress.WorldLoadListener,java.util.concurrent.Executor) -> a
    M:void updateSpawnPos(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:void onStatusChange(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.chunk.ChunkStatus) -> a
    M:void start() -> a
    M:void stop() -> b
net.minecraft.server.level.progress.StoringChunkProgressListener -> agb -> net.minecraft.server.level.progress.StoringChunkProgressListener
    F:net.minecraft.server.level.progress.WorldLoadListenerLogger delegate -> a
    F:it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap statuses -> b
    F:net.minecraft.world.level.ChunkCoordIntPair spawnPos -> c
    F:int fullDiameter -> d
    F:int radius -> e
    F:int diameter -> f
    F:boolean started -> g
    M:void updateSpawnPos(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:void onStatusChange(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.chunk.ChunkStatus) -> a
    M:void start() -> a
    M:void stop() -> b
    M:int getFullDiameter() -> c
    M:int getDiameter() -> d
    M:int getProgress() -> e
    M:net.minecraft.world.level.chunk.ChunkStatus getStatus(int,int) -> a
net.minecraft.server.network.FilteredText -> agd -> net.minecraft.server.network.FilteredText
    F:java.lang.Object raw -> b
    F:java.lang.Object filtered -> c
    F:net.minecraft.server.network.FilteredText EMPTY_STRING -> a
    M:net.minecraft.server.network.FilteredText passThrough(java.lang.Object) -> a
    M:net.minecraft.server.network.FilteredText fullyFiltered(java.lang.Object) -> b
    M:net.minecraft.server.network.FilteredText map(java.util.function.Function) -> a
    M:boolean isFiltered() -> a
    M:boolean isFullyFiltered() -> b
    M:java.lang.Object filteredOrElse(java.lang.Object) -> c
    M:java.lang.Object filter(net.minecraft.server.level.EntityPlayer,net.minecraft.server.level.EntityPlayer) -> a
    M:java.lang.Object filter(net.minecraft.commands.CommandListenerWrapper,net.minecraft.server.level.EntityPlayer) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.Object raw() -> c
    M:java.lang.Object filtered() -> d
net.minecraft.server.network.LegacyQueryHandler -> age -> net.minecraft.server.network.LegacyPingHandler
    F:org.slf4j.Logger LOGGER -> b
    F:int FAKE_PROTOCOL_VERSION -> a
    F:net.minecraft.server.network.ServerConnection serverConnectionListener -> c
    M:void sendFlushAndClose(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf) -> a
    M:io.netty.buffer.ByteBuf createReply(java.lang.String) -> a
net.minecraft.server.network.MemoryServerHandshakePacketListenerImpl -> agf -> net.minecraft.server.network.MemoryServerHandshakePacketListenerImpl
    F:net.minecraft.server.MinecraftServer server -> a
    F:net.minecraft.network.NetworkManager connection -> b
    M:void handleIntention(net.minecraft.network.protocol.handshake.PacketHandshakingInSetProtocol) -> a
    M:void onDisconnect(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:net.minecraft.network.NetworkManager getConnection() -> a
net.minecraft.server.network.ServerConnectionListener -> agg -> net.minecraft.server.network.ServerConnection
    F:org.slf4j.Logger LOGGER -> d
    F:net.minecraft.util.LazyInitVar SERVER_EVENT_GROUP -> a
    F:net.minecraft.util.LazyInitVar SERVER_EPOLL_EVENT_GROUP -> b
    F:net.minecraft.server.MinecraftServer server -> e
    F:boolean running -> c
    F:java.util.List channels -> f
    F:java.util.List connections -> g
    M:void startTcpServerListener(java.net.InetAddress,int) -> a
    M:java.net.SocketAddress startMemoryChannel() -> a
    M:void stop() -> b
    M:void tick() -> c
    M:net.minecraft.server.MinecraftServer getServer() -> d
    M:java.util.List getConnections() -> e
net.minecraft.server.network.ServerConnectionListener$LatencySimulator -> agg$a -> net.minecraft.server.network.ServerConnection$LatencySimulator
    F:io.netty.util.Timer TIMER -> a
    F:int delay -> b
    F:int jitter -> c
    F:java.util.List queuedMessages -> d
    M:void delayDownstream(io.netty.channel.ChannelHandlerContext,java.lang.Object) -> a
    M:void onTimeout(io.netty.util.Timeout) -> a
net.minecraft.server.network.ServerConnectionListener$LatencySimulator$DelayedMessage -> agg$a$a -> net.minecraft.server.network.ServerConnection$LatencySimulator$DelayedMessage
    F:io.netty.channel.ChannelHandlerContext ctx -> a
    F:java.lang.Object msg -> b
net.minecraft.server.network.ServerGamePacketListenerImpl -> agh -> net.minecraft.server.network.PlayerConnection
    F:org.slf4j.Logger LOGGER -> d
    F:int LATENCY_CHECK_INTERVAL -> e
    F:double MAX_INTERACTION_DISTANCE -> a
    F:int NO_BLOCK_UPDATES_TO_ACK -> f
    F:net.minecraft.network.NetworkManager connection -> b
    F:net.minecraft.server.MinecraftServer server -> g
    F:net.minecraft.server.level.EntityPlayer player -> c
    F:int tickCount -> h
    F:int ackBlockChangesUpTo -> i
    F:long keepAliveTime -> j
    F:boolean keepAlivePending -> k
    F:long keepAliveChallenge -> l
    F:int chatSpamTickCount -> m
    F:int dropSpamTickCount -> n
    F:double firstGoodX -> o
    F:double firstGoodY -> p
    F:double firstGoodZ -> q
    F:double lastGoodX -> r
    F:double lastGoodY -> s
    F:double lastGoodZ -> t
    F:net.minecraft.world.entity.Entity lastVehicle -> u
    F:double vehicleFirstGoodX -> v
    F:double vehicleFirstGoodY -> w
    F:double vehicleFirstGoodZ -> x
    F:double vehicleLastGoodX -> y
    F:double vehicleLastGoodY -> z
    M:void tick() -> c
    M:void resetPosition() -> d
    M:net.minecraft.network.NetworkManager getConnection() -> a
    M:boolean isSingleplayerOwner() -> f
    M:void disconnect(net.minecraft.network.chat.IChatBaseComponent) -> b
    M:void filterTextPacket(java.lang.Object,java.util.function.Consumer,java.util.function.BiFunction) -> a
    M:void filterTextPacket(java.lang.String,java.util.function.Consumer) -> a
    M:void filterTextPacket(java.util.List,java.util.function.Consumer) -> a
    M:void handlePlayerInput(net.minecraft.network.protocol.game.PacketPlayInSteerVehicle) -> a
    M:boolean containsInvalidValues(double,double,double,float,float) -> c
    M:double clampHorizontal(double) -> a
    M:double clampVertical(double) -> b
    M:void handleMoveVehicle(net.minecraft.network.protocol.game.PacketPlayInVehicleMove) -> a
    M:boolean noBlocksAround(net.minecraft.world.entity.Entity) -> a
    M:void handleAcceptTeleportPacket(net.minecraft.network.protocol.game.PacketPlayInTeleportAccept) -> a
    M:void handleRecipeBookSeenRecipePacket(net.minecraft.network.protocol.game.PacketPlayInRecipeDisplayed) -> a
    M:void handleRecipeBookChangeSettingsPacket(net.minecraft.network.protocol.game.PacketPlayInRecipeSettings) -> a
    M:void handleSeenAdvancements(net.minecraft.network.protocol.game.PacketPlayInAdvancements) -> a
    M:void handleCustomCommandSuggestions(net.minecraft.network.protocol.game.PacketPlayInTabComplete) -> a
    M:void handleSetCommandBlock(net.minecraft.network.protocol.game.PacketPlayInSetCommandBlock) -> a
    M:void handleSetCommandMinecart(net.minecraft.network.protocol.game.PacketPlayInSetCommandMinecart) -> a
    M:void handlePickItem(net.minecraft.network.protocol.game.PacketPlayInPickItem) -> a
    M:void handleRenameItem(net.minecraft.network.protocol.game.PacketPlayInItemName) -> a
    M:void handleSetBeaconPacket(net.minecraft.network.protocol.game.PacketPlayInBeacon) -> a
    M:void handleSetStructureBlock(net.minecraft.network.protocol.game.PacketPlayInStruct) -> a
    M:void handleSetJigsawBlock(net.minecraft.network.protocol.game.PacketPlayInSetJigsaw) -> a
    M:void handleJigsawGenerate(net.minecraft.network.protocol.game.PacketPlayInJigsawGenerate) -> a
    M:void handleSelectTrade(net.minecraft.network.protocol.game.PacketPlayInTrSel) -> a
    M:void handleEditBook(net.minecraft.network.protocol.game.PacketPlayInBEdit) -> a
    M:void updateBookContents(java.util.List,int) -> a
    M:void signBook(net.minecraft.server.network.FilteredText,java.util.List,int) -> a
    M:void updateBookPages(java.util.List,java.util.function.UnaryOperator,net.minecraft.world.item.ItemStack) -> a
    M:void handleEntityTagQuery(net.minecraft.network.protocol.game.PacketPlayInEntityNBTQuery) -> a
    M:void handleBlockEntityTagQuery(net.minecraft.network.protocol.game.PacketPlayInTileNBTQuery) -> a
    M:void handleMovePlayer(net.minecraft.network.protocol.game.PacketPlayInFlying) -> a
    M:boolean isPlayerCollidingWithAnythingNew(net.minecraft.world.level.IWorldReader,net.minecraft.world.phys.AxisAlignedBB) -> a
    M:void dismount(double,double,double,float,float) -> a
    M:void teleport(double,double,double,float,float) -> b
    M:void teleport(double,double,double,float,float,java.util.Set) -> a
    M:void teleport(double,double,double,float,float,java.util.Set,boolean) -> a
    M:void handlePlayerAction(net.minecraft.network.protocol.game.PacketPlayInBlockDig) -> a
    M:boolean wasBlockPlacementAttempt(net.minecraft.server.level.EntityPlayer,net.minecraft.world.item.ItemStack) -> a
    M:void handleUseItemOn(net.minecraft.network.protocol.game.PacketPlayInUseItem) -> a
    M:void handleUseItem(net.minecraft.network.protocol.game.PacketPlayInBlockPlace) -> a
    M:void handleTeleportToEntityPacket(net.minecraft.network.protocol.game.PacketPlayInSpectate) -> a
    M:void handleResourcePackResponse(net.minecraft.network.protocol.game.PacketPlayInResourcePackStatus) -> a
    M:void handlePaddleBoat(net.minecraft.network.protocol.game.PacketPlayInBoatMove) -> a
    M:void handlePong(net.minecraft.network.protocol.game.ServerboundPongPacket) -> a
    M:void onDisconnect(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void ackBlockChangesUpTo(int) -> a
    M:void send(net.minecraft.network.protocol.Packet) -> a
    M:void send(net.minecraft.network.protocol.Packet,io.netty.util.concurrent.GenericFutureListener) -> a
    M:void handleSetCarriedItem(net.minecraft.network.protocol.game.PacketPlayInHeldItemSlot) -> a
    M:void handleChat(net.minecraft.network.protocol.game.PacketPlayInChat) -> a
    M:void handleChatCommand(net.minecraft.network.protocol.game.ServerboundChatCommandPacket) -> a
    M:boolean tryHandleChat(java.lang.String,java.time.Instant) -> a
    M:boolean isChatExpired(java.time.Instant) -> a
    M:boolean updateChatOrder(java.time.Instant) -> b
    M:boolean isChatMessageIllegal(java.lang.String) -> a
    M:boolean resetLastActionTime() -> g
    M:void handleChat(net.minecraft.network.protocol.game.PacketPlayInChat,net.minecraft.server.network.FilteredText) -> a
    M:void broadcastChatMessage(net.minecraft.server.network.FilteredText) -> a
    M:void detectRateSpam() -> h
    M:void handleChatPreview(net.minecraft.network.protocol.game.ServerboundChatPreviewPacket) -> a
    M:void sendPreviewResponse(int,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:java.util.concurrent.CompletableFuture queryPreview(java.lang.String) -> b
    M:java.util.concurrent.CompletableFuture queryChatPreview(java.lang.String) -> c
    M:java.util.concurrent.CompletableFuture queryCommandPreview(java.lang.String) -> d
    M:java.util.concurrent.CompletableFuture getPreviewedArgument(com.mojang.brigadier.context.CommandContextBuilder) -> a
    M:void handleAnimate(net.minecraft.network.protocol.game.PacketPlayInArmAnimation) -> a
    M:void handlePlayerCommand(net.minecraft.network.protocol.game.PacketPlayInEntityAction) -> a
    M:void handleInteract(net.minecraft.network.protocol.game.PacketPlayInUseEntity) -> a
    M:void handleClientCommand(net.minecraft.network.protocol.game.PacketPlayInClientCommand) -> a
    M:void handleContainerClose(net.minecraft.network.protocol.game.PacketPlayInCloseWindow) -> a
    M:void handleContainerClick(net.minecraft.network.protocol.game.PacketPlayInWindowClick) -> a
    M:void handlePlaceRecipe(net.minecraft.network.protocol.game.PacketPlayInAutoRecipe) -> a
    M:void handleContainerButtonClick(net.minecraft.network.protocol.game.PacketPlayInEnchantItem) -> a
    M:void handleSetCreativeModeSlot(net.minecraft.network.protocol.game.PacketPlayInSetCreativeSlot) -> a
    M:void handleSignUpdate(net.minecraft.network.protocol.game.PacketPlayInUpdateSign) -> a
    M:void updateSignText(net.minecraft.network.protocol.game.PacketPlayInUpdateSign,java.util.List) -> a
    M:void handleKeepAlive(net.minecraft.network.protocol.game.PacketPlayInKeepAlive) -> a
    M:void handlePlayerAbilities(net.minecraft.network.protocol.game.PacketPlayInAbilities) -> a
    M:void handleClientInformation(net.minecraft.network.protocol.game.PacketPlayInSettings) -> a
    M:void handleCustomPayload(net.minecraft.network.protocol.game.PacketPlayInCustomPayload) -> a
    M:void handleChangeDifficulty(net.minecraft.network.protocol.game.PacketPlayInDifficultyChange) -> a
    M:void handleLockDifficulty(net.minecraft.network.protocol.game.PacketPlayInDifficultyLock) -> a
    M:net.minecraft.server.level.EntityPlayer getPlayer() -> e
    M:void performInteraction(net.minecraft.world.EnumHand,net.minecraft.server.network.ServerGamePacketListenerImpl$EntityInteraction) -> a
    M:void onInteraction(net.minecraft.world.EnumHand) -> a
    M:void onInteraction(net.minecraft.world.EnumHand,net.minecraft.world.phys.Vec3D) -> a
    M:void onAttack() -> a
net.minecraft.server.network.ServerGamePacketListenerImpl$EntityInteraction -> agh$a -> net.minecraft.server.network.PlayerConnection$a
net.minecraft.server.network.ServerHandshakePacketListenerImpl -> agi -> net.minecraft.server.network.HandshakeListener
    F:net.minecraft.network.chat.IChatBaseComponent IGNORE_STATUS_REASON -> a
    F:net.minecraft.server.MinecraftServer server -> b
    F:net.minecraft.network.NetworkManager connection -> c
    M:void handleIntention(net.minecraft.network.protocol.handshake.PacketHandshakingInSetProtocol) -> a
    M:void onDisconnect(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:net.minecraft.network.NetworkManager getConnection() -> a
net.minecraft.server.network.ServerLoginPacketListenerImpl -> agj -> net.minecraft.server.network.LoginListener
    F:java.util.concurrent.atomic.AtomicInteger UNIQUE_THREAD_ID -> b
    F:org.slf4j.Logger LOGGER -> c
    F:int MAX_TICKS_BEFORE_LOGIN -> d
    F:net.minecraft.util.RandomSource RANDOM -> e
    F:net.minecraft.network.chat.IChatBaseComponent MISSING_PROFILE_PUBLIC_KEY -> f
    F:net.minecraft.network.chat.IChatBaseComponent INVALID_SIGNATURE -> g
    F:net.minecraft.network.chat.IChatBaseComponent INVALID_PUBLIC_KEY -> h
    F:net.minecraft.server.MinecraftServer server -> j
    F:net.minecraft.network.NetworkManager connection -> a
    F:net.minecraft.server.network.LoginListener$EnumProtocolState state -> k
    F:int tick -> l
    F:com.mojang.authlib.GameProfile gameProfile -> m
    F:java.lang.String serverId -> n
    F:net.minecraft.server.level.EntityPlayer delayedAcceptPlayer -> o
    F:net.minecraft.world.entity.player.ProfilePublicKey playerProfilePublicKey -> p
    M:void tick() -> c
    M:net.minecraft.network.NetworkManager getConnection() -> a
    M:void disconnect(net.minecraft.network.chat.IChatBaseComponent) -> b
    M:void handleAcceptedLogin() -> d
    M:void placeNewPlayer(net.minecraft.server.level.EntityPlayer) -> a
    M:void onDisconnect(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:java.lang.String getUserName() -> e
    M:net.minecraft.world.entity.player.ProfilePublicKey validatePublicKey(net.minecraft.network.protocol.login.PacketLoginInStart,net.minecraft.util.SignatureValidator,boolean) -> a
    M:void handleHello(net.minecraft.network.protocol.login.PacketLoginInStart) -> a
    M:boolean isValidUsername(java.lang.String) -> a
    M:void handleKey(net.minecraft.network.protocol.login.PacketLoginInEncryptionBegin) -> a
    M:void handleCustomQueryPacket(net.minecraft.network.protocol.login.PacketLoginInCustomPayload) -> a
    M:com.mojang.authlib.GameProfile createFakeProfile(com.mojang.authlib.GameProfile) -> a
    M:void run() -> run
    M:java.net.InetAddress getAddress() -> a
net.minecraft.server.network.ServerLoginPacketListenerImpl$PublicKeyParseException -> agj$a -> net.minecraft.server.network.LoginListener$a
net.minecraft.server.network.ServerLoginPacketListenerImpl$State -> agj$b -> net.minecraft.server.network.LoginListener$EnumProtocolState
    F:net.minecraft.server.network.LoginListener$EnumProtocolState HELLO -> a
    F:net.minecraft.server.network.LoginListener$EnumProtocolState KEY -> b
    F:net.minecraft.server.network.LoginListener$EnumProtocolState AUTHENTICATING -> c
    F:net.minecraft.server.network.LoginListener$EnumProtocolState NEGOTIATING -> d
    F:net.minecraft.server.network.LoginListener$EnumProtocolState READY_TO_ACCEPT -> e
    F:net.minecraft.server.network.LoginListener$EnumProtocolState DELAY_ACCEPT -> f
    F:net.minecraft.server.network.LoginListener$EnumProtocolState ACCEPTED -> g
net.minecraft.server.network.ServerPlayerConnection -> agk -> net.minecraft.server.network.ServerPlayerConnection
net.minecraft.server.network.ServerStatusPacketListenerImpl -> agl -> net.minecraft.server.network.PacketStatusListener
    F:net.minecraft.network.chat.IChatBaseComponent DISCONNECT_REASON -> a
    F:net.minecraft.server.MinecraftServer server -> b
    F:net.minecraft.network.NetworkManager connection -> c
    F:boolean hasRequestedStatus -> d
    M:void onDisconnect(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:net.minecraft.network.NetworkManager getConnection() -> a
    M:void handleStatusRequest(net.minecraft.network.protocol.status.PacketStatusInStart) -> a
    M:void handlePingRequest(net.minecraft.network.protocol.status.PacketStatusInPing) -> a
net.minecraft.server.network.TextFilter -> agm -> net.minecraft.server.network.ITextFilter
    F:net.minecraft.server.network.ITextFilter DUMMY -> a
    M:java.util.concurrent.CompletableFuture processStreamComponent(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void join() -> a
    M:void leave() -> b
    M:java.util.concurrent.CompletableFuture processStreamMessage(java.lang.String) -> a
    M:java.util.concurrent.CompletableFuture processMessageBundle(java.util.List) -> a
net.minecraft.server.network.TextFilterClient -> agn -> net.minecraft.server.network.TextFilter
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.concurrent.atomic.AtomicInteger WORKER_COUNT -> b
    F:java.util.concurrent.ThreadFactory THREAD_FACTORY -> c
    F:java.lang.String DEFAULT_ENDPOINT -> d
    F:java.net.URL chatEndpoint -> e
    F:net.minecraft.server.network.TextFilterClient$MessageEncoder chatEncoder -> f
    F:java.net.URL joinEndpoint -> g
    F:net.minecraft.server.network.TextFilterClient$JoinOrLeaveEncoder joinEncoder -> h
    F:java.net.URL leaveEndpoint -> i
    F:net.minecraft.server.network.TextFilterClient$JoinOrLeaveEncoder leaveEncoder -> j
    F:java.lang.String authKey -> k
    F:net.minecraft.server.network.TextFilterClient$IgnoreStrategy chatIgnoreStrategy -> l
    F:java.util.concurrent.ExecutorService workerPool -> m
    M:java.net.URL getEndpoint(java.net.URI,com.google.gson.JsonObject,java.lang.String,java.lang.String) -> a
    M:java.lang.String getEndpointFromConfig(com.google.gson.JsonObject,java.lang.String,java.lang.String) -> a
    M:net.minecraft.server.network.TextFilter createFromConfig(java.lang.String) -> a
    M:void processJoinOrLeave(com.mojang.authlib.GameProfile,java.net.URL,net.minecraft.server.network.TextFilterClient$JoinOrLeaveEncoder,java.util.concurrent.Executor) -> a
    M:java.util.concurrent.CompletableFuture requestMessageProcessing(com.mojang.authlib.GameProfile,java.lang.String,net.minecraft.server.network.TextFilterClient$IgnoreStrategy,java.util.concurrent.Executor) -> a
    M:void close() -> close
    M:void drainStream(java.io.InputStream) -> a
    M:com.google.gson.JsonObject processRequestResponse(com.google.gson.JsonObject,java.net.URL) -> a
    M:void processRequest(com.google.gson.JsonObject,java.net.URL) -> b
    M:java.net.HttpURLConnection makeRequest(com.google.gson.JsonObject,java.net.URL) -> c
    M:net.minecraft.server.network.ITextFilter createContext(com.mojang.authlib.GameProfile) -> a
net.minecraft.server.network.TextFilterClient$IgnoreStrategy -> agn$a -> net.minecraft.server.network.TextFilter$a
    F:net.minecraft.server.network.TextFilterClient$IgnoreStrategy NEVER_IGNORE -> a
    F:net.minecraft.server.network.TextFilterClient$IgnoreStrategy IGNORE_FULLY_FILTERED -> b
    M:net.minecraft.server.network.TextFilterClient$IgnoreStrategy select(int) -> select
net.minecraft.server.network.TextFilterClient$JoinOrLeaveEncoder -> agn$b -> net.minecraft.server.network.TextFilter$b
net.minecraft.server.network.TextFilterClient$MessageEncoder -> agn$c -> net.minecraft.server.network.TextFilter$c
net.minecraft.server.network.TextFilterClient$PlayerContext -> agn$d -> net.minecraft.server.network.TextFilter$d
    F:com.mojang.authlib.GameProfile profile -> c
    F:java.util.concurrent.Executor streamExecutor -> d
    M:void join() -> a
    M:void leave() -> b
    M:java.util.concurrent.CompletableFuture processMessageBundle(java.util.List) -> a
    M:java.util.concurrent.CompletableFuture processStreamMessage(java.lang.String) -> a
net.minecraft.server.network.TextFilterClient$RequestFailedException -> agn$e -> net.minecraft.server.network.TextFilter$e
net.minecraft.server.packs.AbstractPackResources -> agq -> net.minecraft.server.packs.ResourcePackAbstract
    F:org.slf4j.Logger LOGGER -> b
    F:java.io.File file -> a
    M:java.lang.String getPathFromLocation(net.minecraft.server.packs.EnumResourcePackType,net.minecraft.resources.MinecraftKey) -> c
    M:java.lang.String getRelativePath(java.io.File,java.io.File) -> a
    M:java.io.InputStream getResource(net.minecraft.server.packs.EnumResourcePackType,net.minecraft.resources.MinecraftKey) -> a
    M:boolean hasResource(net.minecraft.server.packs.EnumResourcePackType,net.minecraft.resources.MinecraftKey) -> b
    M:java.io.InputStream getRootResource(java.lang.String) -> b
    M:void logWarning(java.lang.String) -> d
    M:java.lang.Object getMetadataSection(net.minecraft.server.packs.metadata.ResourcePackMetaParser) -> a
    M:java.lang.Object getMetadataFromStream(net.minecraft.server.packs.metadata.ResourcePackMetaParser,java.io.InputStream) -> a
    M:java.lang.String getName() -> a
net.minecraft.server.packs.FilePackResources -> agr -> net.minecraft.server.packs.ResourcePackFile
    F:org.slf4j.Logger LOGGER -> e
    F:com.google.common.base.Splitter SPLITTER -> b
    F:java.util.zip.ZipFile zipFile -> f
    M:java.util.zip.ZipFile getOrCreateZipFile() -> b
    M:java.io.InputStream getResource(java.lang.String) -> a
    M:boolean hasResource(java.lang.String) -> c
    M:java.util.Set getNamespaces(net.minecraft.server.packs.EnumResourcePackType) -> a
    M:void finalize() -> finalize
    M:void close() -> close
    M:java.util.Collection getResources(net.minecraft.server.packs.EnumResourcePackType,java.lang.String,java.lang.String,java.util.function.Predicate) -> a
net.minecraft.server.packs.FolderPackResources -> ags -> net.minecraft.server.packs.ResourcePackFolder
    F:org.slf4j.Logger LOGGER -> b
    F:boolean ON_WINDOWS -> e
    F:com.google.common.base.CharMatcher BACKSLASH_MATCHER -> f
    M:boolean validatePath(java.io.File,java.lang.String) -> a
    M:java.io.InputStream getResource(java.lang.String) -> a
    M:boolean hasResource(java.lang.String) -> c
    M:java.io.File getFile(java.lang.String) -> e
    M:java.util.Set getNamespaces(net.minecraft.server.packs.EnumResourcePackType) -> a
    M:void close() -> close
    M:java.util.Collection getResources(net.minecraft.server.packs.EnumResourcePackType,java.lang.String,java.lang.String,java.util.function.Predicate) -> a
    M:void listResources(java.io.File,java.lang.String,java.util.List,java.lang.String,java.util.function.Predicate) -> a
net.minecraft.server.packs.PackResources -> agt -> net.minecraft.server.packs.IResourcePack
    F:java.lang.String METADATA_EXTENSION -> c
    F:java.lang.String PACK_META -> d
net.minecraft.server.packs.PackType -> agu -> net.minecraft.server.packs.EnumResourcePackType
    F:net.minecraft.server.packs.EnumResourcePackType CLIENT_RESOURCES -> a
    F:net.minecraft.server.packs.EnumResourcePackType SERVER_DATA -> b
    F:java.lang.String directory -> c
    F:com.mojang.bridge.game.PackType bridgeType -> d
    M:java.lang.String getDirectory() -> a
    M:int getVersion(com.mojang.bridge.game.GameVersion) -> a
net.minecraft.server.packs.ResourcePackFileNotFoundException -> agv -> net.minecraft.server.packs.ResourceNotFoundException
net.minecraft.server.packs.VanillaPackResources -> agw -> net.minecraft.server.packs.ResourcePackVanilla
    F:java.nio.file.Path generatedDir -> a
    F:org.slf4j.Logger LOGGER -> g
    F:java.lang.Class clientObject -> b
    F:java.util.Map ROOT_DIR_BY_TYPE -> h
    F:net.minecraft.server.packs.metadata.pack.ResourcePackInfo packMetadata -> e
    F:java.util.Set namespaces -> f
    M:java.nio.file.Path safeGetPath(java.net.URI) -> a
    M:java.io.InputStream getRootResource(java.lang.String) -> b
    M:java.io.InputStream getResource(net.minecraft.server.packs.EnumResourcePackType,net.minecraft.resources.MinecraftKey) -> a
    M:java.util.Collection getResources(net.minecraft.server.packs.EnumResourcePackType,java.lang.String,java.lang.String,java.util.function.Predicate) -> a
    M:void getResources(java.util.Collection,java.lang.String,java.nio.file.Path,java.lang.String,java.util.function.Predicate) -> a
    M:java.io.InputStream getResourceAsStream(net.minecraft.server.packs.EnumResourcePackType,net.minecraft.resources.MinecraftKey) -> c
    M:java.lang.String createPath(net.minecraft.server.packs.EnumResourcePackType,net.minecraft.resources.MinecraftKey) -> d
    M:boolean isResourceUrlValid(java.lang.String,java.net.URL) -> a
    M:java.io.InputStream getResourceAsStream(java.lang.String) -> a
    M:boolean hasResource(net.minecraft.server.packs.EnumResourcePackType,net.minecraft.resources.MinecraftKey) -> b
    M:java.util.Set getNamespaces(net.minecraft.server.packs.EnumResourcePackType) -> a
    M:java.lang.Object getMetadataSection(net.minecraft.server.packs.metadata.ResourcePackMetaParser) -> a
    M:java.lang.String getName() -> a
    M:void close() -> close
    M:net.minecraft.server.packs.resources.ResourceProvider asProvider() -> b
net.minecraft.server.packs.metadata.MetadataSectionSerializer -> agx -> net.minecraft.server.packs.metadata.ResourcePackMetaParser
net.minecraft.server.packs.metadata.pack.PackMetadataSection -> agy -> net.minecraft.server.packs.metadata.pack.ResourcePackInfo
    F:net.minecraft.server.packs.metadata.pack.ResourcePackInfoDeserializer SERIALIZER -> a
    F:net.minecraft.network.chat.IChatBaseComponent description -> b
    F:int packFormat -> c
    M:net.minecraft.network.chat.IChatBaseComponent getDescription() -> a
    M:int getPackFormat() -> b
net.minecraft.server.packs.metadata.pack.PackMetadataSectionSerializer -> agz -> net.minecraft.server.packs.metadata.pack.ResourcePackInfoDeserializer
    M:net.minecraft.server.packs.metadata.pack.ResourcePackInfo fromJson(com.google.gson.JsonObject) -> b
    M:java.lang.String getMetadataSectionName() -> a
    M:java.lang.Object fromJson(com.google.gson.JsonObject) -> a
net.minecraft.server.packs.repository.FolderRepositorySource -> ahd -> net.minecraft.server.packs.repository.ResourcePackSourceFolder
    F:java.io.FileFilter RESOURCEPACK_FILTER -> a
    F:java.io.File folder -> b
    F:net.minecraft.server.packs.repository.PackSource packSource -> c
    M:void loadPacks(java.util.function.Consumer,net.minecraft.server.packs.repository.Pack$PackConstructor) -> a
    M:java.util.function.Supplier createSupplier(java.io.File) -> a
net.minecraft.server.packs.repository.Pack -> ahe -> net.minecraft.server.packs.repository.ResourcePackLoader
    F:org.slf4j.Logger LOGGER -> a
    F:java.lang.String id -> b
    F:java.util.function.Supplier supplier -> c
    F:net.minecraft.network.chat.IChatBaseComponent title -> d
    F:net.minecraft.network.chat.IChatBaseComponent description -> e
    F:net.minecraft.server.packs.repository.EnumResourcePackVersion compatibility -> f
    F:net.minecraft.server.packs.repository.ResourcePackLoader$Position defaultPosition -> g
    F:boolean required -> h
    F:boolean fixedPosition -> i
    F:net.minecraft.server.packs.repository.PackSource packSource -> j
    M:net.minecraft.server.packs.repository.ResourcePackLoader create(java.lang.String,boolean,java.util.function.Supplier,net.minecraft.server.packs.repository.Pack$PackConstructor,net.minecraft.server.packs.repository.ResourcePackLoader$Position,net.minecraft.server.packs.repository.PackSource) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getTitle() -> a
    M:net.minecraft.network.chat.IChatBaseComponent getDescription() -> b
    M:net.minecraft.network.chat.IChatBaseComponent getChatLink(boolean) -> a
    M:net.minecraft.server.packs.repository.EnumResourcePackVersion getCompatibility() -> c
    M:net.minecraft.server.packs.IResourcePack open() -> d
    M:java.lang.String getId() -> e
    M:boolean isRequired() -> f
    M:boolean isFixedPosition() -> g
    M:net.minecraft.server.packs.repository.ResourcePackLoader$Position getDefaultPosition() -> h
    M:net.minecraft.server.packs.repository.PackSource getPackSource() -> i
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.server.packs.repository.Pack$PackConstructor -> ahe$a -> net.minecraft.server.packs.repository.ResourcePackLoader$a
net.minecraft.server.packs.repository.Pack$Position -> ahe$b -> net.minecraft.server.packs.repository.ResourcePackLoader$Position
    F:net.minecraft.server.packs.repository.ResourcePackLoader$Position TOP -> a
    F:net.minecraft.server.packs.repository.ResourcePackLoader$Position BOTTOM -> b
    M:int insert(java.util.List,java.lang.Object,java.util.function.Function,boolean) -> a
    M:net.minecraft.server.packs.repository.ResourcePackLoader$Position opposite() -> a
net.minecraft.server.packs.repository.PackCompatibility -> ahf -> net.minecraft.server.packs.repository.EnumResourcePackVersion
    F:net.minecraft.server.packs.repository.EnumResourcePackVersion TOO_OLD -> a
    F:net.minecraft.server.packs.repository.EnumResourcePackVersion TOO_NEW -> b
    F:net.minecraft.server.packs.repository.EnumResourcePackVersion COMPATIBLE -> c
    F:net.minecraft.network.chat.IChatBaseComponent description -> d
    F:net.minecraft.network.chat.IChatBaseComponent confirmation -> e
    M:boolean isCompatible() -> a
    M:net.minecraft.server.packs.repository.EnumResourcePackVersion forFormat(int,net.minecraft.server.packs.EnumResourcePackType) -> a
    M:net.minecraft.server.packs.repository.EnumResourcePackVersion forMetadata(net.minecraft.server.packs.metadata.pack.ResourcePackInfo,net.minecraft.server.packs.EnumResourcePackType) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getDescription() -> b
    M:net.minecraft.network.chat.IChatBaseComponent getConfirmation() -> c
net.minecraft.server.packs.repository.PackRepository -> ahg -> net.minecraft.server.packs.repository.ResourcePackRepository
    F:java.util.Set sources -> a
    F:java.util.Map available -> b
    F:java.util.List selected -> c
    F:net.minecraft.server.packs.repository.Pack$PackConstructor constructor -> d
    M:void reload() -> a
    M:java.util.Map discoverAvailable() -> g
    M:void setSelected(java.util.Collection) -> a
    M:java.util.List rebuildSelected(java.util.Collection) -> b
    M:java.util.stream.Stream getAvailablePacks(java.util.Collection) -> c
    M:java.util.Collection getAvailableIds() -> b
    M:java.util.Collection getAvailablePacks() -> c
    M:java.util.Collection getSelectedIds() -> d
    M:java.util.Collection getSelectedPacks() -> e
    M:net.minecraft.server.packs.repository.ResourcePackLoader getPack(java.lang.String) -> a
    M:boolean isAvailable(java.lang.String) -> b
    M:java.util.List openAllSelected() -> f
net.minecraft.server.packs.repository.PackSource -> ahh -> net.minecraft.server.packs.repository.PackSource
    F:net.minecraft.server.packs.repository.PackSource DEFAULT -> a
    F:net.minecraft.server.packs.repository.PackSource BUILT_IN -> b
    F:net.minecraft.server.packs.repository.PackSource WORLD -> c
    F:net.minecraft.server.packs.repository.PackSource SERVER -> d
    M:net.minecraft.server.packs.repository.PackSource passThrough() -> a
    M:net.minecraft.server.packs.repository.PackSource decorating(java.lang.String) -> a
net.minecraft.server.packs.repository.RepositorySource -> ahi -> net.minecraft.server.packs.repository.ResourcePackSource
net.minecraft.server.packs.repository.ServerPacksSource -> ahj -> net.minecraft.server.packs.repository.ResourcePackSourceVanilla
    F:net.minecraft.server.packs.metadata.pack.ResourcePackInfo BUILT_IN_METADATA -> a
    F:java.lang.String VANILLA_ID -> b
    F:net.minecraft.server.packs.ResourcePackVanilla vanillaPack -> c
    M:void loadPacks(java.util.function.Consumer,net.minecraft.server.packs.repository.Pack$PackConstructor) -> a
net.minecraft.server.packs.resources.CloseableResourceManager -> ahl -> net.minecraft.server.packs.resources.IReloadableResourceManager
net.minecraft.server.packs.resources.FallbackResourceManager -> ahm -> net.minecraft.server.packs.resources.ResourceManagerFallback
    F:org.slf4j.Logger LOGGER -> b
    F:java.util.List fallbacks -> a
    F:net.minecraft.server.packs.EnumResourcePackType type -> c
    F:java.lang.String namespace -> d
    M:void push(net.minecraft.server.packs.IResourcePack) -> a
    M:void push(net.minecraft.server.packs.IResourcePack,java.util.function.Predicate) -> a
    M:void pushFilterOnly(java.lang.String,java.util.function.Predicate) -> a
    M:void pushInternal(java.lang.String,net.minecraft.server.packs.IResourcePack,java.util.function.Predicate) -> a
    M:java.util.Set getNamespaces() -> a
    M:net.minecraft.server.packs.resources.Resource$IoSupplier createResourceGetter(net.minecraft.resources.MinecraftKey,net.minecraft.server.packs.IResourcePack) -> a
    M:boolean isValidLocation(net.minecraft.resources.MinecraftKey) -> c
    M:java.util.List getResourceStack(net.minecraft.resources.MinecraftKey) -> a
    M:java.util.Map listResources(java.lang.String,java.util.function.Predicate) -> b
    M:net.minecraft.server.packs.resources.Resource$IoSupplier createStackMetadataFinder(net.minecraft.resources.MinecraftKey,int) -> a
    M:void applyPackFiltersToExistingResources(net.minecraft.server.packs.resources.FallbackResourceManager$PackEntry,java.util.Map) -> a
    M:void listPackResources(net.minecraft.server.packs.resources.FallbackResourceManager$PackEntry,java.lang.String,java.util.function.Predicate,java.util.Map) -> a
    M:java.util.Map listResourceStacks(java.lang.String,java.util.function.Predicate) -> c
    M:java.util.stream.Stream listPacks() -> b
    M:net.minecraft.resources.MinecraftKey getMetadataLocation(net.minecraft.resources.MinecraftKey) -> b
net.minecraft.server.packs.resources.FallbackResourceManager$EntryStack -> ahm$a -> net.minecraft.server.packs.resources.ResourceManagerFallback$a
    F:net.minecraft.resources.MinecraftKey metadataLocation -> a
    F:java.util.List entries -> b
    M:java.util.List createThunks() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.resources.MinecraftKey metadataLocation() -> a
    M:java.util.List entries() -> b
net.minecraft.server.packs.resources.FallbackResourceManager$LeakedResourceWarningInputStream -> ahm$b -> net.minecraft.server.packs.resources.ResourceManagerFallback$b
    F:java.lang.String message -> a
    F:boolean closed -> b
    M:void close() -> close
    M:void finalize() -> finalize
net.minecraft.server.packs.resources.FallbackResourceManager$PackEntry -> ahm$c -> net.minecraft.server.packs.resources.ResourceManagerFallback$c
    F:java.lang.String name -> a
    F:net.minecraft.server.packs.IResourcePack resources -> b
    F:java.util.function.Predicate filter -> c
    M:void filterAll(java.util.Collection) -> a
    M:boolean isFiltered(net.minecraft.resources.MinecraftKey) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String name() -> a
    M:net.minecraft.server.packs.IResourcePack resources() -> b
    M:java.util.function.Predicate filter() -> c
net.minecraft.server.packs.resources.FallbackResourceManager$SinglePackResourceThunkSupplier -> ahm$d -> net.minecraft.server.packs.resources.ResourceManagerFallback$d
    F:net.minecraft.resources.MinecraftKey location -> b
    F:net.minecraft.resources.MinecraftKey metadataLocation -> c
    F:net.minecraft.server.packs.IResourcePack source -> d
    F:boolean shouldGetMeta -> e
    M:void ignoreMeta() -> a
    M:net.minecraft.server.packs.resources.IResource create() -> b
net.minecraft.server.packs.resources.MultiPackResourceManager -> ahn -> net.minecraft.server.packs.resources.ResourceManager
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.Map namespacedManagers -> b
    F:java.util.List packs -> c
    M:net.minecraft.server.packs.resources.ResourceFilterSection getPackFilterSection(net.minecraft.server.packs.IResourcePack) -> a
    M:java.util.Set getNamespaces() -> a
    M:java.util.List getResourceStack(net.minecraft.resources.MinecraftKey) -> a
    M:java.util.Map listResources(java.lang.String,java.util.function.Predicate) -> b
    M:java.util.Map listResourceStacks(java.lang.String,java.util.function.Predicate) -> c
    M:java.util.stream.Stream listPacks() -> b
    M:void close() -> close
net.minecraft.server.packs.resources.PreparableReloadListener -> aho -> net.minecraft.server.packs.resources.IReloadListener
    M:java.lang.String getName() -> c
net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier -> aho$a -> net.minecraft.server.packs.resources.IReloadListener$a
net.minecraft.server.packs.resources.ProfiledReloadInstance -> ahp -> net.minecraft.server.packs.resources.ReloadableProfiled
    F:org.slf4j.Logger LOGGER -> c
    F:com.google.common.base.Stopwatch total -> d
    M:java.util.List finish(java.util.List) -> a
net.minecraft.server.packs.resources.ProfiledReloadInstance$State -> ahp$a -> net.minecraft.server.packs.resources.ReloadableProfiled$a
    F:java.lang.String name -> a
    F:net.minecraft.util.profiling.MethodProfilerResults preparationResult -> b
    F:net.minecraft.util.profiling.MethodProfilerResults reloadResult -> c
    F:java.util.concurrent.atomic.AtomicLong preparationNanos -> d
    F:java.util.concurrent.atomic.AtomicLong reloadNanos -> e
net.minecraft.server.packs.resources.ReloadInstance -> ahq -> net.minecraft.server.packs.resources.IReloadable
    M:boolean isDone() -> c
    M:void checkExceptions() -> d
net.minecraft.server.packs.resources.ReloadableResourceManager -> ahr -> net.minecraft.server.packs.resources.ReloadableResourceManager
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.server.packs.resources.IReloadableResourceManager resources -> b
    F:java.util.List listeners -> c
    F:net.minecraft.server.packs.EnumResourcePackType type -> d
    M:void close() -> close
    M:void registerReloadListener(net.minecraft.server.packs.resources.IReloadListener) -> a
    M:net.minecraft.server.packs.resources.IReloadable createReload(java.util.concurrent.Executor,java.util.concurrent.Executor,java.util.concurrent.CompletableFuture,java.util.List) -> a
    M:java.util.Set getNamespaces() -> a
    M:java.util.List getResourceStack(net.minecraft.resources.MinecraftKey) -> a
    M:java.util.Map listResources(java.lang.String,java.util.function.Predicate) -> b
    M:java.util.Map listResourceStacks(java.lang.String,java.util.function.Predicate) -> c
    M:java.util.stream.Stream listPacks() -> b
net.minecraft.server.packs.resources.Resource -> ahs -> net.minecraft.server.packs.resources.IResource
    F:java.lang.String packId -> a
    F:net.minecraft.server.packs.resources.Resource$IoSupplier streamSupplier -> b
    F:net.minecraft.server.packs.resources.Resource$IoSupplier metadataSupplier -> c
    F:net.minecraft.server.packs.resources.ResourceMetadata cachedMetadata -> d
    M:java.lang.String sourcePackId() -> a
    M:java.io.InputStream open() -> b
    M:java.io.BufferedReader openAsReader() -> c
    M:net.minecraft.server.packs.resources.ResourceMetadata metadata() -> d
net.minecraft.server.packs.resources.Resource$IoSupplier -> ahs$a -> net.minecraft.server.packs.resources.IResource$a
net.minecraft.server.packs.resources.ResourceFilterSection -> aht -> net.minecraft.server.packs.resources.ResourceFilterSection
    F:org.slf4j.Logger LOGGER -> b
    F:com.mojang.serialization.Codec CODEC -> c
    F:net.minecraft.server.packs.metadata.ResourcePackMetaParser SERIALIZER -> a
    F:java.util.List blockList -> d
    M:boolean isNamespaceFiltered(java.lang.String) -> a
    M:boolean isPathFiltered(java.lang.String) -> b
    M:java.lang.String getMetadataSectionName() -> a
    M:net.minecraft.server.packs.resources.ResourceFilterSection fromJson(com.google.gson.JsonObject) -> b
    M:java.lang.Object fromJson(com.google.gson.JsonObject) -> a
net.minecraft.server.packs.resources.ResourceFilterSection$ResourceLocationPattern -> aht$a -> net.minecraft.server.packs.resources.ResourceFilterSection$a
    F:com.mojang.serialization.Codec CODEC -> a
    F:java.util.Optional namespacePattern -> b
    F:java.util.function.Predicate namespacePredicate -> c
    F:java.util.Optional pathPattern -> d
    F:java.util.function.Predicate pathPredicate -> e
    M:boolean test(net.minecraft.resources.MinecraftKey) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.server.packs.resources.ResourceManager -> ahu -> net.minecraft.server.packs.resources.IResourceManager
net.minecraft.server.packs.resources.ResourceManager$Empty -> ahu$a -> net.minecraft.server.packs.resources.IResourceManager$Empty
    F:net.minecraft.server.packs.resources.IResourceManager$Empty INSTANCE -> a
    M:java.util.Set getNamespaces() -> a
    M:java.util.List getResourceStack(net.minecraft.resources.MinecraftKey) -> a
    M:java.util.Map listResources(java.lang.String,java.util.function.Predicate) -> b
    M:java.util.Map listResourceStacks(java.lang.String,java.util.function.Predicate) -> c
    M:java.util.stream.Stream listPacks() -> b
net.minecraft.server.packs.resources.ResourceManagerReloadListener -> ahv -> net.minecraft.server.packs.resources.ResourceManagerReloadListener
    M:java.util.concurrent.CompletableFuture reload(net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier,net.minecraft.server.packs.resources.IResourceManager,net.minecraft.util.profiling.GameProfilerFiller,net.minecraft.util.profiling.GameProfilerFiller,java.util.concurrent.Executor,java.util.concurrent.Executor) -> a
net.minecraft.server.packs.resources.ResourceMetadata -> ahw -> net.minecraft.server.packs.resources.ResourceMetadata
    F:net.minecraft.server.packs.resources.ResourceMetadata EMPTY -> a
    M:net.minecraft.server.packs.resources.ResourceMetadata fromJsonStream(java.io.InputStream) -> a
    M:java.util.Optional getSection(net.minecraft.server.packs.metadata.ResourcePackMetaParser) -> a
    M:java.util.Optional getSection(net.minecraft.server.packs.metadata.ResourcePackMetaParser) -> a
net.minecraft.server.packs.resources.ResourceProvider -> ahx -> net.minecraft.server.packs.resources.ResourceProvider
    M:java.io.InputStream open(net.minecraft.resources.MinecraftKey) -> open
net.minecraft.server.packs.resources.SimpleJsonResourceReloadListener -> ahy -> net.minecraft.server.packs.resources.ResourceDataJson
    F:org.slf4j.Logger LOGGER -> a
    F:java.lang.String PATH_SUFFIX -> b
    F:int PATH_SUFFIX_LENGTH -> c
    F:com.google.gson.Gson gson -> d
    F:java.lang.String directory -> e
    M:java.util.Map prepare(net.minecraft.server.packs.resources.IResourceManager,net.minecraft.util.profiling.GameProfilerFiller) -> a
    M:java.lang.Object prepare(net.minecraft.server.packs.resources.IResourceManager,net.minecraft.util.profiling.GameProfilerFiller) -> b
net.minecraft.server.packs.resources.SimplePreparableReloadListener -> ahz -> net.minecraft.server.packs.resources.ResourceDataAbstract
    M:java.util.concurrent.CompletableFuture reload(net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier,net.minecraft.server.packs.resources.IResourceManager,net.minecraft.util.profiling.GameProfilerFiller,net.minecraft.util.profiling.GameProfilerFiller,java.util.concurrent.Executor,java.util.concurrent.Executor) -> a
net.minecraft.server.packs.resources.SimpleReloadInstance -> aia -> net.minecraft.server.packs.resources.Reloadable
    F:int PREPARATION_PROGRESS_WEIGHT -> c
    F:int EXTRA_RELOAD_PROGRESS_WEIGHT -> d
    F:int LISTENER_PROGRESS_WEIGHT -> e
    F:java.util.concurrent.CompletableFuture allPreparations -> a
    F:java.util.concurrent.CompletableFuture allDone -> b
    F:java.util.Set preparingListeners -> f
    F:int listenerCount -> g
    F:int startedReloads -> h
    F:int finishedReloads -> i
    F:java.util.concurrent.atomic.AtomicInteger startedTaskCounter -> j
    F:java.util.concurrent.atomic.AtomicInteger doneTaskCounter -> k
    M:net.minecraft.server.packs.resources.Reloadable of(net.minecraft.server.packs.resources.IResourceManager,java.util.List,java.util.concurrent.Executor,java.util.concurrent.Executor,java.util.concurrent.CompletableFuture) -> a
    M:java.util.concurrent.CompletableFuture done() -> a
    M:float getActualProgress() -> b
    M:net.minecraft.server.packs.resources.IReloadable create(net.minecraft.server.packs.resources.IResourceManager,java.util.List,java.util.concurrent.Executor,java.util.concurrent.Executor,java.util.concurrent.CompletableFuture,boolean) -> a
    M:java.util.concurrent.CompletableFuture wait(java.lang.Object) -> a
net.minecraft.server.packs.resources.SimpleReloadInstance$StateFactory -> aia$a -> net.minecraft.server.packs.resources.Reloadable$a
net.minecraft.server.players.BanListEntry -> aic -> net.minecraft.server.players.ExpirableListEntry
    F:java.text.SimpleDateFormat DATE_FORMAT -> a
    F:java.lang.String EXPIRES_NEVER -> b
    F:java.util.Date created -> c
    F:java.lang.String source -> d
    F:java.util.Date expires -> e
    F:java.lang.String reason -> f
    M:java.util.Date getCreated() -> a
    M:java.lang.String getSource() -> b
    M:java.util.Date getExpires() -> c
    M:java.lang.String getReason() -> d
    M:boolean hasExpired() -> f
    M:void serialize(com.google.gson.JsonObject) -> a
net.minecraft.server.players.GameProfileCache -> aid -> net.minecraft.server.players.UserCache
    F:org.slf4j.Logger LOGGER -> a
    F:int GAMEPROFILES_MRU_LIMIT -> b
    F:int GAMEPROFILES_EXPIRATION_MONTHS -> c
    F:boolean usesAuthentication -> d
    F:java.util.Map profilesByName -> e
    F:java.util.Map profilesByUUID -> f
    F:java.util.Map requests -> g
    F:com.mojang.authlib.GameProfileRepository profileRepository -> h
    F:com.google.gson.Gson gson -> i
    F:java.io.File file -> j
    F:java.util.concurrent.atomic.AtomicLong operationCount -> k
    F:java.util.concurrent.Executor executor -> l
    M:void safeAdd(net.minecraft.server.players.UserCache$UserCacheEntry) -> a
    M:java.util.Optional lookupGameProfile(com.mojang.authlib.GameProfileRepository,java.lang.String) -> a
    M:void setUsesAuthentication(boolean) -> a
    M:boolean usesAuthentication() -> d
    M:void add(com.mojang.authlib.GameProfile) -> a
    M:long getNextOperation() -> e
    M:java.util.Optional get(java.lang.String) -> a
    M:void getAsync(java.lang.String,java.util.function.Consumer) -> a
    M:java.util.Optional get(java.util.UUID) -> a
    M:void setExecutor(java.util.concurrent.Executor) -> a
    M:void clearExecutor() -> a
    M:java.text.DateFormat createDateFormat() -> f
    M:java.util.List load() -> b
    M:void save() -> c
    M:java.util.stream.Stream getTopMRUProfiles(int) -> a
    M:com.google.gson.JsonElement writeGameProfile(net.minecraft.server.players.UserCache$UserCacheEntry,java.text.DateFormat) -> a
    M:java.util.Optional readGameProfile(com.google.gson.JsonElement,java.text.DateFormat) -> a
net.minecraft.server.players.GameProfileCache$GameProfileInfo -> aid$a -> net.minecraft.server.players.UserCache$UserCacheEntry
    F:com.mojang.authlib.GameProfile profile -> a
    F:java.util.Date expirationDate -> b
    F:long lastAccess -> c
    M:com.mojang.authlib.GameProfile getProfile() -> a
    M:java.util.Date getExpirationDate() -> b
    M:void setLastAccess(long) -> a
    M:long getLastAccess() -> c
net.minecraft.server.players.IpBanList -> aie -> net.minecraft.server.players.IpBanList
    M:net.minecraft.server.players.JsonListEntry createEntry(com.google.gson.JsonObject) -> a
    M:boolean isBanned(java.net.SocketAddress) -> a
    M:boolean isBanned(java.lang.String) -> a
    M:net.minecraft.server.players.IpBanEntry get(java.net.SocketAddress) -> b
    M:java.lang.String getIpFromAddress(java.net.SocketAddress) -> c
net.minecraft.server.players.IpBanListEntry -> aif -> net.minecraft.server.players.IpBanEntry
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName() -> e
    M:java.lang.String createIpInfo(com.google.gson.JsonObject) -> b
    M:void serialize(com.google.gson.JsonObject) -> a
net.minecraft.server.players.OldUsersConverter -> aig -> net.minecraft.server.players.NameReferencingFileConverter
    F:org.slf4j.Logger LOGGER -> e
    F:java.io.File OLD_IPBANLIST -> a
    F:java.io.File OLD_USERBANLIST -> b
    F:java.io.File OLD_OPLIST -> c
    F:java.io.File OLD_WHITELIST -> d
    M:java.util.List readOldListFormat(java.io.File,java.util.Map) -> a
    M:void lookupPlayers(net.minecraft.server.MinecraftServer,java.util.Collection,com.mojang.authlib.ProfileLookupCallback) -> a
    M:boolean convertUserBanlist(net.minecraft.server.MinecraftServer) -> a
    M:boolean convertIpBanlist(net.minecraft.server.MinecraftServer) -> b
    M:boolean convertOpsList(net.minecraft.server.MinecraftServer) -> c
    M:boolean convertWhiteList(net.minecraft.server.MinecraftServer) -> d
    M:java.util.UUID convertMobOwnerIfNecessary(net.minecraft.server.MinecraftServer,java.lang.String) -> a
    M:boolean convertPlayers(net.minecraft.server.dedicated.DedicatedServer) -> a
    M:void ensureDirectoryExists(java.io.File) -> a
    M:boolean serverReadyAfterUserconversion(net.minecraft.server.MinecraftServer) -> e
    M:boolean areOldUserlistsRemoved() -> a
    M:boolean areOldPlayersConverted(net.minecraft.server.MinecraftServer) -> f
    M:java.io.File getWorldPlayersDirectory(net.minecraft.server.MinecraftServer) -> g
    M:void renameOldFile(java.io.File) -> b
    M:java.util.Date parseDate(java.lang.String,java.util.Date) -> a
    M:void movePlayerFile(java.io.File,java.lang.String,java.lang.String) -> a
    M:java.lang.String getFileNameForProfile(com.mojang.authlib.GameProfile) -> a
net.minecraft.server.players.OldUsersConverter$ConversionError -> aig$a -> net.minecraft.server.players.NameReferencingFileConverter$FileConversionException
net.minecraft.server.players.PlayerList -> aih -> net.minecraft.server.players.PlayerList
    F:java.io.File USERBANLIST_FILE -> b
    F:java.io.File IPBANLIST_FILE -> c
    F:java.io.File OPLIST_FILE -> d
    F:java.io.File WHITELIST_FILE -> e
    F:org.slf4j.Logger LOGGER -> a
    F:int SEND_PLAYER_INFO_INTERVAL -> g
    F:java.text.SimpleDateFormat BAN_DATE_FORMAT -> h
    F:net.minecraft.server.MinecraftServer server -> i
    F:java.util.List players -> j
    F:java.util.Map playersByUUID -> k
    F:net.minecraft.server.players.GameProfileBanList bans -> l
    F:net.minecraft.server.players.IpBanList ipBans -> m
    F:net.minecraft.server.players.OpList ops -> n
    F:net.minecraft.server.players.WhiteList whitelist -> o
    F:java.util.Map stats -> p
    F:java.util.Map advancements -> q
    F:net.minecraft.world.level.storage.WorldNBTStorage playerIo -> r
    F:boolean doWhiteList -> s
    F:net.minecraft.core.IRegistryCustom$Dimension registryHolder -> t
    F:int maxPlayers -> f
    F:int viewDistance -> u
    F:int simulationDistance -> v
    F:boolean allowCheatsForAllPlayers -> w
    F:boolean ALLOW_LOGOUTIVATOR -> x
    F:int sendAllPlayerInfoIn -> y
    M:void placeNewPlayer(net.minecraft.network.NetworkManager,net.minecraft.server.level.EntityPlayer) -> a
    M:void updateEntireScoreboard(net.minecraft.server.ScoreboardServer,net.minecraft.server.level.EntityPlayer) -> a
    M:void addWorldborderListener(net.minecraft.server.level.WorldServer) -> a
    M:net.minecraft.nbt.NBTTagCompound load(net.minecraft.server.level.EntityPlayer) -> a
    M:void save(net.minecraft.server.level.EntityPlayer) -> b
    M:void remove(net.minecraft.server.level.EntityPlayer) -> c
    M:net.minecraft.network.chat.IChatBaseComponent canPlayerLogin(java.net.SocketAddress,com.mojang.authlib.GameProfile) -> a
    M:net.minecraft.server.level.EntityPlayer getPlayerForLogin(com.mojang.authlib.GameProfile,net.minecraft.world.entity.player.ProfilePublicKey) -> a
    M:net.minecraft.server.level.EntityPlayer respawn(net.minecraft.server.level.EntityPlayer,boolean) -> a
    M:void sendPlayerPermissionLevel(net.minecraft.server.level.EntityPlayer) -> d
    M:void tick() -> d
    M:void broadcastAll(net.minecraft.network.protocol.Packet) -> a
    M:void broadcastAll(net.minecraft.network.protocol.Packet,net.minecraft.resources.ResourceKey) -> a
    M:void broadcastSystemToTeam(net.minecraft.world.entity.player.EntityHuman,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void broadcastSystemToAllExceptTeam(net.minecraft.world.entity.player.EntityHuman,net.minecraft.network.chat.IChatBaseComponent) -> b
    M:net.minecraft.server.players.GameProfileBanList getBans() -> f
    M:net.minecraft.server.players.IpBanList getIpBans() -> g
    M:void op(com.mojang.authlib.GameProfile) -> a
    M:void deop(com.mojang.authlib.GameProfile) -> b
    M:void sendPlayerPermissionLevel(net.minecraft.server.level.EntityPlayer,int) -> a
    M:boolean isWhiteListed(com.mojang.authlib.GameProfile) -> c
    M:boolean isOp(com.mojang.authlib.GameProfile) -> e
    M:net.minecraft.server.level.EntityPlayer getPlayerByName(java.lang.String) -> a
    M:void broadcast(net.minecraft.world.entity.player.EntityHuman,double,double,double,double,net.minecraft.resources.ResourceKey,net.minecraft.network.protocol.Packet) -> a
    M:void saveAll() -> h
    M:net.minecraft.server.players.WhiteList getWhiteList() -> i
    M:net.minecraft.server.players.OpList getOps() -> k
    M:void reloadWhiteList() -> a
    M:void sendLevelInfo(net.minecraft.server.level.EntityPlayer,net.minecraft.server.level.WorldServer) -> a
    M:void sendAllPlayerInfo(net.minecraft.server.level.EntityPlayer) -> e
    M:int getPlayerCount() -> m
    M:int getMaxPlayers() -> n
    M:boolean isUsingWhitelist() -> o
    M:void setUsingWhiteList(boolean) -> a
    M:java.util.List getPlayersWithAddress(java.lang.String) -> b
    M:int getViewDistance() -> p
    M:int getSimulationDistance() -> q
    M:net.minecraft.server.MinecraftServer getServer() -> c
    M:net.minecraft.nbt.NBTTagCompound getSingleplayerData() -> r
    M:void setAllowCheatsForAllPlayers(boolean) -> b
    M:void removeAll() -> s
    M:void broadcastSystemMessage(net.minecraft.network.chat.IChatBaseComponent,net.minecraft.resources.ResourceKey) -> a
    M:void broadcastSystemMessage(net.minecraft.network.chat.IChatBaseComponent,java.util.function.Function,net.minecraft.resources.ResourceKey) -> a
    M:void broadcastChatMessage(net.minecraft.server.network.FilteredText,net.minecraft.commands.CommandListenerWrapper,net.minecraft.resources.ResourceKey) -> a
    M:void broadcastChatMessage(net.minecraft.server.network.FilteredText,net.minecraft.server.level.EntityPlayer,net.minecraft.resources.ResourceKey) -> a
    M:void broadcastChatMessage(net.minecraft.network.chat.PlayerChatMessage,net.minecraft.network.chat.ChatSender,net.minecraft.resources.ResourceKey) -> a
    M:void broadcastChatMessage(net.minecraft.network.chat.PlayerChatMessage,java.util.function.Function,net.minecraft.network.chat.ChatSender,net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.stats.ServerStatisticManager getPlayerStats(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.server.AdvancementDataPlayer getPlayerAdvancements(net.minecraft.server.level.EntityPlayer) -> f
    M:void setViewDistance(int) -> a
    M:void setSimulationDistance(int) -> b
    M:java.util.List getPlayers() -> t
    M:net.minecraft.server.level.EntityPlayer getPlayer(java.util.UUID) -> a
    M:boolean canBypassPlayerLimit(com.mojang.authlib.GameProfile) -> d
    M:void reloadResources() -> u
    M:boolean isAllowCheatsForAllPlayers() -> v
    M:void onBorderSizeSet(net.minecraft.world.level.border.WorldBorder,double) -> a
    M:void onBorderSizeLerping(net.minecraft.world.level.border.WorldBorder,double,double,long) -> a
    M:void onBorderCenterSet(net.minecraft.world.level.border.WorldBorder,double,double) -> a
    M:void onBorderSetWarningTime(net.minecraft.world.level.border.WorldBorder,int) -> a
    M:void onBorderSetWarningBlocks(net.minecraft.world.level.border.WorldBorder,int) -> b
    M:void onBorderSetDamagePerBlock(net.minecraft.world.level.border.WorldBorder,double) -> b
    M:void onBorderSetDamageSafeZOne(net.minecraft.world.level.border.WorldBorder,double) -> c
net.minecraft.server.players.ServerOpList -> aii -> net.minecraft.server.players.OpList
    M:net.minecraft.server.players.JsonListEntry createEntry(com.google.gson.JsonObject) -> a
    M:boolean canBypassPlayerLimit(com.mojang.authlib.GameProfile) -> a
    M:java.lang.String getKeyForUser(com.mojang.authlib.GameProfile) -> b
    M:java.lang.String getKeyForUser(java.lang.Object) -> a
net.minecraft.server.players.ServerOpListEntry -> aij -> net.minecraft.server.players.OpListEntry
    F:int level -> a
    F:boolean bypassesPlayerLimit -> b
    M:int getLevel() -> a
    M:boolean getBypassesPlayerLimit() -> b
    M:void serialize(com.google.gson.JsonObject) -> a
    M:com.mojang.authlib.GameProfile createGameProfile(com.google.gson.JsonObject) -> b
net.minecraft.server.players.SleepStatus -> aik -> net.minecraft.server.players.SleepStatus
    F:int activePlayers -> a
    F:int sleepingPlayers -> b
    M:boolean areEnoughSleeping(int) -> a
    M:boolean areEnoughDeepSleeping(int,java.util.List) -> a
    M:int sleepersNeeded(int) -> b
    M:void removeAllSleepers() -> a
    M:int amountSleeping() -> b
    M:boolean update(java.util.List) -> a
net.minecraft.server.players.StoredUserEntry -> ail -> net.minecraft.server.players.JsonListEntry
    F:java.lang.Object user -> a
    M:java.lang.Object getUser() -> g
    M:boolean hasExpired() -> f
net.minecraft.server.players.StoredUserList -> aim -> net.minecraft.server.players.JsonList
    F:org.slf4j.Logger LOGGER -> a
    F:com.google.gson.Gson GSON -> b
    F:java.io.File file -> c
    F:java.util.Map map -> d
    M:java.io.File getFile() -> b
    M:void add(net.minecraft.server.players.JsonListEntry) -> a
    M:net.minecraft.server.players.JsonListEntry get(java.lang.Object) -> b
    M:void remove(java.lang.Object) -> c
    M:void remove(net.minecraft.server.players.JsonListEntry) -> b
    M:boolean isEmpty() -> c
    M:java.lang.String getKeyForUser(java.lang.Object) -> a
    M:boolean contains(java.lang.Object) -> d
    M:void removeExpired() -> g
    M:java.util.Collection getEntries() -> d
    M:void save() -> e
    M:void load() -> f
net.minecraft.server.players.UserBanList -> ain -> net.minecraft.server.players.GameProfileBanList
    M:net.minecraft.server.players.JsonListEntry createEntry(com.google.gson.JsonObject) -> a
    M:boolean isBanned(com.mojang.authlib.GameProfile) -> a
    M:java.lang.String getKeyForUser(com.mojang.authlib.GameProfile) -> b
    M:java.lang.String getKeyForUser(java.lang.Object) -> a
net.minecraft.server.players.UserBanListEntry -> aio -> net.minecraft.server.players.GameProfileBanEntry
    M:void serialize(com.google.gson.JsonObject) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName() -> e
    M:com.mojang.authlib.GameProfile createGameProfile(com.google.gson.JsonObject) -> b
net.minecraft.server.players.UserWhiteList -> aip -> net.minecraft.server.players.WhiteList
    M:net.minecraft.server.players.JsonListEntry createEntry(com.google.gson.JsonObject) -> a
    M:boolean isWhiteListed(com.mojang.authlib.GameProfile) -> a
    M:java.lang.String getKeyForUser(com.mojang.authlib.GameProfile) -> b
    M:java.lang.String getKeyForUser(java.lang.Object) -> a
net.minecraft.server.players.UserWhiteListEntry -> aiq -> net.minecraft.server.players.WhiteListEntry
    M:void serialize(com.google.gson.JsonObject) -> a
    M:com.mojang.authlib.GameProfile createGameProfile(com.google.gson.JsonObject) -> b
net.minecraft.server.rcon.NetworkDataOutputStream -> ais -> net.minecraft.server.rcon.RemoteStatusReply
    F:java.io.ByteArrayOutputStream outputStream -> a
    F:java.io.DataOutputStream dataOutputStream -> b
    M:void writeBytes(byte[]) -> a
    M:void writeString(java.lang.String) -> a
    M:void write(int) -> a
    M:void writeShort(short) -> a
    M:void writeInt(int) -> b
    M:void writeFloat(float) -> a
    M:void reset() -> b
net.minecraft.server.rcon.PktUtils -> ait -> net.minecraft.server.rcon.StatusChallengeUtils
    F:int MAX_PACKET_SIZE -> a
    M:java.lang.String stringFromByteArray(byte[],int,int) -> a
    M:int intFromByteArray(byte[],int) -> a
    M:int intFromByteArray(byte[],int,int) -> b
    M:int intFromNetworkByteArray(byte[],int,int) -> c
    M:java.lang.String toHexString(byte) -> a
net.minecraft.server.rcon.RconConsoleSource -> aiu -> net.minecraft.server.rcon.RemoteControlCommandListener
    F:java.lang.String RCON -> b
    F:net.minecraft.network.chat.IChatBaseComponent RCON_COMPONENT -> c
    F:java.lang.StringBuffer buffer -> d
    F:net.minecraft.server.MinecraftServer server -> e
    M:void prepareForCommand() -> e
    M:java.lang.String getCommandResponse() -> f
    M:net.minecraft.commands.CommandListenerWrapper createCommandSourceStack() -> g
    M:void sendSystemMessage(net.minecraft.network.chat.IChatBaseComponent) -> a
net.minecraft.server.rcon.thread.GenericThread -> aiw -> net.minecraft.server.rcon.thread.RemoteConnectionThread
    F:org.slf4j.Logger LOGGER -> d
    F:java.util.concurrent.atomic.AtomicInteger UNIQUE_THREAD_ID -> e
    F:int MAX_STOP_WAIT -> f
    F:boolean running -> a
    F:java.lang.String name -> b
    F:java.lang.Thread thread -> c
    M:boolean start() -> a
    M:void stop() -> b
    M:boolean isRunning() -> c
net.minecraft.server.rcon.thread.QueryThreadGs4 -> aix -> net.minecraft.server.rcon.thread.RemoteStatusListener
    F:org.slf4j.Logger LOGGER -> d
    F:java.lang.String GAME_TYPE -> e
    F:java.lang.String GAME_ID -> f
    F:long CHALLENGE_CHECK_INTERVAL -> g
    F:long RESPONSE_CACHE_TIME -> h
    F:long lastChallengeCheck -> i
    F:int port -> j
    F:int serverPort -> k
    F:int maxPlayers -> l
    F:java.lang.String serverName -> m
    F:java.lang.String worldName -> n
    F:java.net.DatagramSocket socket -> o
    F:java.lang.String hostIp -> q
    F:java.lang.String serverIp -> r
    F:java.util.Map validChallenges -> s
    F:net.minecraft.server.rcon.RemoteStatusReply rulesResponse -> t
    F:long lastRulesResponse -> u
    F:net.minecraft.server.IMinecraftServer serverInterface -> v
    M:net.minecraft.server.rcon.thread.RemoteStatusListener create(net.minecraft.server.IMinecraftServer) -> a
    M:void sendTo(byte[],java.net.DatagramPacket) -> a
    M:boolean processPacket(java.net.DatagramPacket) -> a
    M:java.lang.Boolean validChallenge(java.net.DatagramPacket) -> c
    M:void sendChallenge(java.net.DatagramPacket) -> d
    M:void pruneChallenges() -> d
    M:void run() -> run
    M:boolean start() -> a
    M:void recoverSocketError(java.lang.Exception) -> a
    M:boolean initSocket() -> e
net.minecraft.server.rcon.thread.QueryThreadGs4$RequestChallenge -> aix$a -> net.minecraft.server.rcon.thread.RemoteStatusListener$RemoteStatusChallenge
    F:long time -> a
    F:int challenge -> b
    F:java.lang.String ident -> e
    M:java.lang.Boolean before(long) -> a
    M:int getChallenge() -> a
    M:java.lang.String getIdent() -> d
net.minecraft.server.rcon.thread.RconClient -> aiy -> net.minecraft.server.rcon.thread.RemoteControlSession
    F:org.slf4j.Logger LOGGER -> d
    F:int SERVERDATA_AUTH -> e
    F:int SERVERDATA_EXECCOMMAND -> f
    F:int SERVERDATA_RESPONSE_VALUE -> g
    F:int SERVERDATA_AUTH_RESPONSE -> h
    F:int SERVERDATA_AUTH_FAILURE -> i
    F:boolean authed -> j
    F:java.net.Socket client -> k
    F:java.lang.String rconPassword -> m
    F:net.minecraft.server.IMinecraftServer serverInterface -> n
    M:void run() -> run
    M:void send(int,int,java.lang.String) -> a
    M:void sendAuthFailure() -> d
    M:void sendCmdResponse(int,java.lang.String) -> a
    M:void stop() -> b
    M:void closeSocket() -> e
net.minecraft.server.rcon.thread.RconThread -> aiz -> net.minecraft.server.rcon.thread.RemoteControlListener
    F:org.slf4j.Logger LOGGER -> d
    F:java.net.ServerSocket socket -> e
    F:java.lang.String rconPassword -> f
    F:java.util.List clients -> g
    F:net.minecraft.server.IMinecraftServer serverInterface -> h
    M:void clearClients() -> d
    M:void run() -> run
    M:net.minecraft.server.rcon.thread.RemoteControlListener create(net.minecraft.server.IMinecraftServer) -> a
    M:void stop() -> b
    M:void closeSocket(java.net.ServerSocket) -> a
net.minecraft.sounds.Music -> ajb -> net.minecraft.sounds.Music
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.sounds.SoundEffect event -> b
    F:int minDelay -> c
    F:int maxDelay -> d
    F:boolean replaceCurrentMusic -> e
    M:net.minecraft.sounds.SoundEffect getEvent() -> a
    M:int getMinDelay() -> b
    M:int getMaxDelay() -> c
    M:boolean replaceCurrentMusic() -> d
net.minecraft.sounds.Musics -> ajc -> net.minecraft.sounds.Musics
    F:int ONE_SECOND -> h
    F:int THIRTY_SECONDS -> i
    F:int TEN_MINUTES -> j
    F:int TWENTY_MINUTES -> k
    F:int FIVE_MINUTES -> l
    F:net.minecraft.sounds.Music MENU -> a
    F:net.minecraft.sounds.Music CREATIVE -> b
    F:net.minecraft.sounds.Music CREDITS -> c
    F:net.minecraft.sounds.Music END_BOSS -> d
    F:net.minecraft.sounds.Music END -> e
    F:net.minecraft.sounds.Music UNDER_WATER -> f
    F:net.minecraft.sounds.Music GAME -> g
    M:net.minecraft.sounds.Music createGameMusic(net.minecraft.sounds.SoundEffect) -> a
net.minecraft.sounds.SoundEvent -> ajd -> net.minecraft.sounds.SoundEffect
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.resources.MinecraftKey location -> b
    F:float range -> c
    F:boolean newSystem -> d
    M:net.minecraft.resources.MinecraftKey getLocation() -> a
    M:float getRange(float) -> a
net.minecraft.sounds.SoundEvents -> aje -> net.minecraft.sounds.SoundEffects
    F:net.minecraft.sounds.SoundEffect ALLAY_AMBIENT_WITH_ITEM -> a
    F:net.minecraft.sounds.SoundEffect ALLAY_AMBIENT_WITHOUT_ITEM -> b
    F:net.minecraft.sounds.SoundEffect ALLAY_DEATH -> c
    F:net.minecraft.sounds.SoundEffect ALLAY_HURT -> d
    F:net.minecraft.sounds.SoundEffect ALLAY_ITEM_GIVEN -> e
    F:net.minecraft.sounds.SoundEffect ALLAY_ITEM_TAKEN -> f
    F:net.minecraft.sounds.SoundEffect ALLAY_THROW -> g
    F:net.minecraft.sounds.SoundEffect AMBIENT_CAVE -> h
    F:net.minecraft.sounds.SoundEffect AMBIENT_BASALT_DELTAS_ADDITIONS -> i
    F:net.minecraft.sounds.SoundEffect AMBIENT_BASALT_DELTAS_LOOP -> j
    F:net.minecraft.sounds.SoundEffect AMBIENT_BASALT_DELTAS_MOOD -> k
    F:net.minecraft.sounds.SoundEffect AMBIENT_CRIMSON_FOREST_ADDITIONS -> l
    F:net.minecraft.sounds.SoundEffect AMBIENT_CRIMSON_FOREST_LOOP -> m
    F:net.minecraft.sounds.SoundEffect AMBIENT_CRIMSON_FOREST_MOOD -> n
    F:net.minecraft.sounds.SoundEffect AMBIENT_NETHER_WASTES_ADDITIONS -> o
    F:net.minecraft.sounds.SoundEffect AMBIENT_NETHER_WASTES_LOOP -> p
    F:net.minecraft.sounds.SoundEffect AMBIENT_NETHER_WASTES_MOOD -> q
    F:net.minecraft.sounds.SoundEffect AMBIENT_SOUL_SAND_VALLEY_ADDITIONS -> r
    F:net.minecraft.sounds.SoundEffect AMBIENT_SOUL_SAND_VALLEY_LOOP -> s
    F:net.minecraft.sounds.SoundEffect AMBIENT_SOUL_SAND_VALLEY_MOOD -> t
    F:net.minecraft.sounds.SoundEffect AMBIENT_WARPED_FOREST_ADDITIONS -> u
    F:net.minecraft.sounds.SoundEffect AMBIENT_WARPED_FOREST_LOOP -> v
    F:net.minecraft.sounds.SoundEffect AMBIENT_WARPED_FOREST_MOOD -> w
    F:net.minecraft.sounds.SoundEffect AMBIENT_UNDERWATER_ENTER -> x
    F:net.minecraft.sounds.SoundEffect AMBIENT_UNDERWATER_EXIT -> y
    F:net.minecraft.sounds.SoundEffect AMBIENT_UNDERWATER_LOOP -> z
    F:net.minecraft.sounds.SoundEffect ANVIL_USE -> aa
    F:net.minecraft.sounds.SoundEffect ARMOR_EQUIP_CHAIN -> ab
    F:net.minecraft.sounds.SoundEffect ARMOR_EQUIP_DIAMOND -> ac
    F:net.minecraft.sounds.SoundEffect ARMOR_EQUIP_ELYTRA -> ad
    F:net.minecraft.sounds.SoundEffect ARMOR_EQUIP_GENERIC -> ae
    F:net.minecraft.sounds.SoundEffect ARMOR_EQUIP_GOLD -> af
    F:net.minecraft.sounds.SoundEffect ARMOR_EQUIP_IRON -> ag
    F:net.minecraft.sounds.SoundEffect ARMOR_EQUIP_LEATHER -> ah
    F:net.minecraft.sounds.SoundEffect ARMOR_EQUIP_NETHERITE -> ai
    F:net.minecraft.sounds.SoundEffect ARMOR_EQUIP_TURTLE -> aj
    F:net.minecraft.sounds.SoundEffect ARMOR_STAND_BREAK -> ak
    F:net.minecraft.sounds.SoundEffect ARMOR_STAND_FALL -> al
    F:net.minecraft.sounds.SoundEffect ARMOR_STAND_HIT -> am
    F:net.minecraft.sounds.SoundEffect ARMOR_STAND_PLACE -> an
    F:net.minecraft.sounds.SoundEffect ARROW_HIT -> ao
    F:net.minecraft.sounds.SoundEffect ARROW_HIT_PLAYER -> ap
    F:net.minecraft.sounds.SoundEffect ARROW_SHOOT -> aq
    F:net.minecraft.sounds.SoundEffect AXE_STRIP -> ar
    F:net.minecraft.sounds.SoundEffect AXE_SCRAPE -> as
    F:net.minecraft.sounds.SoundEffect AXE_WAX_OFF -> at
    F:net.minecraft.sounds.SoundEffect AXOLOTL_ATTACK -> au
    F:net.minecraft.sounds.SoundEffect AXOLOTL_DEATH -> av
    F:net.minecraft.sounds.SoundEffect AXOLOTL_HURT -> aw
    F:net.minecraft.sounds.SoundEffect AXOLOTL_IDLE_AIR -> ax
    F:net.minecraft.sounds.SoundEffect AXOLOTL_IDLE_WATER -> ay
    F:net.minecraft.sounds.SoundEffect AXOLOTL_SPLASH -> az
    F:net.minecraft.sounds.SoundEffect BAT_AMBIENT -> ba
    F:net.minecraft.sounds.SoundEffect BAT_DEATH -> bb
    F:net.minecraft.sounds.SoundEffect BAT_HURT -> bc
    F:net.minecraft.sounds.SoundEffect BAT_LOOP -> bd
    F:net.minecraft.sounds.SoundEffect BAT_TAKEOFF -> be
    F:net.minecraft.sounds.SoundEffect BEACON_ACTIVATE -> bf
    F:net.minecraft.sounds.SoundEffect BEACON_AMBIENT -> bg
    F:net.minecraft.sounds.SoundEffect BEACON_DEACTIVATE -> bh
    F:net.minecraft.sounds.SoundEffect BEACON_POWER_SELECT -> bi
    F:net.minecraft.sounds.SoundEffect BEE_DEATH -> bj
    F:net.minecraft.sounds.SoundEffect BEE_HURT -> bk
    F:net.minecraft.sounds.SoundEffect BEE_LOOP_AGGRESSIVE -> bl
    F:net.minecraft.sounds.SoundEffect BEE_LOOP -> bm
    F:net.minecraft.sounds.SoundEffect BEE_STING -> bn
    F:net.minecraft.sounds.SoundEffect BEE_POLLINATE -> bo
    F:net.minecraft.sounds.SoundEffect BEEHIVE_DRIP -> bp
    F:net.minecraft.sounds.SoundEffect BEEHIVE_ENTER -> bq
    F:net.minecraft.sounds.SoundEffect BEEHIVE_EXIT -> br
    F:net.minecraft.sounds.SoundEffect BEEHIVE_SHEAR -> bs
    F:net.minecraft.sounds.SoundEffect BEEHIVE_WORK -> bt
    F:net.minecraft.sounds.SoundEffect BELL_BLOCK -> bu
    F:net.minecraft.sounds.SoundEffect BELL_RESONATE -> bv
    F:net.minecraft.sounds.SoundEffect BIG_DRIPLEAF_BREAK -> bw
    F:net.minecraft.sounds.SoundEffect BIG_DRIPLEAF_FALL -> bx
    F:net.minecraft.sounds.SoundEffect BIG_DRIPLEAF_HIT -> by
    F:net.minecraft.sounds.SoundEffect BIG_DRIPLEAF_PLACE -> bz
    F:net.minecraft.sounds.SoundEffect BUCKET_EMPTY -> ca
    F:net.minecraft.sounds.SoundEffect BUCKET_EMPTY_AXOLOTL -> cb
    F:net.minecraft.sounds.SoundEffect BUCKET_EMPTY_FISH -> cc
    F:net.minecraft.sounds.SoundEffect BUCKET_EMPTY_LAVA -> cd
    F:net.minecraft.sounds.SoundEffect BUCKET_EMPTY_POWDER_SNOW -> ce
    F:net.minecraft.sounds.SoundEffect BUCKET_EMPTY_TADPOLE -> cf
    F:net.minecraft.sounds.SoundEffect BUCKET_FILL -> cg
    F:net.minecraft.sounds.SoundEffect BUCKET_FILL_AXOLOTL -> ch
    F:net.minecraft.sounds.SoundEffect BUCKET_FILL_FISH -> ci
    F:net.minecraft.sounds.SoundEffect BUCKET_FILL_LAVA -> cj
    F:net.minecraft.sounds.SoundEffect BUCKET_FILL_POWDER_SNOW -> ck
    F:net.minecraft.sounds.SoundEffect BUCKET_FILL_TADPOLE -> cl
    F:net.minecraft.sounds.SoundEffect BUNDLE_DROP_CONTENTS -> cm
    F:net.minecraft.sounds.SoundEffect BUNDLE_INSERT -> cn
    F:net.minecraft.sounds.SoundEffect BUNDLE_REMOVE_ONE -> co
    F:net.minecraft.sounds.SoundEffect CAKE_ADD_CANDLE -> cp
    F:net.minecraft.sounds.SoundEffect CALCITE_BREAK -> cq
    F:net.minecraft.sounds.SoundEffect CALCITE_STEP -> cr
    F:net.minecraft.sounds.SoundEffect CALCITE_PLACE -> cs
    F:net.minecraft.sounds.SoundEffect CALCITE_HIT -> ct
    F:net.minecraft.sounds.SoundEffect CALCITE_FALL -> cu
    F:net.minecraft.sounds.SoundEffect CAMPFIRE_CRACKLE -> cv
    F:net.minecraft.sounds.SoundEffect CANDLE_AMBIENT -> cw
    F:net.minecraft.sounds.SoundEffect CANDLE_BREAK -> cx
    F:net.minecraft.sounds.SoundEffect CANDLE_EXTINGUISH -> cy
    F:net.minecraft.sounds.SoundEffect CANDLE_FALL -> cz
    F:net.minecraft.sounds.SoundEffect CHICKEN_AMBIENT -> da
    F:net.minecraft.sounds.SoundEffect CHICKEN_DEATH -> db
    F:net.minecraft.sounds.SoundEffect CHICKEN_EGG -> dc
    F:net.minecraft.sounds.SoundEffect CHICKEN_HURT -> dd
    F:net.minecraft.sounds.SoundEffect CHICKEN_STEP -> de
    F:net.minecraft.sounds.SoundEffect CHORUS_FLOWER_DEATH -> df
    F:net.minecraft.sounds.SoundEffect CHORUS_FLOWER_GROW -> dg
    F:net.minecraft.sounds.SoundEffect CHORUS_FRUIT_TELEPORT -> dh
    F:net.minecraft.sounds.SoundEffect COD_AMBIENT -> di
    F:net.minecraft.sounds.SoundEffect COD_DEATH -> dj
    F:net.minecraft.sounds.SoundEffect COD_FLOP -> dk
    F:net.minecraft.sounds.SoundEffect COD_HURT -> dl
    F:net.minecraft.sounds.SoundEffect COMPARATOR_CLICK -> dm
    F:net.minecraft.sounds.SoundEffect COMPOSTER_EMPTY -> dn
    F:net.minecraft.sounds.SoundEffect COMPOSTER_FILL -> do
    F:net.minecraft.sounds.SoundEffect COMPOSTER_FILL_SUCCESS -> dp
    F:net.minecraft.sounds.SoundEffect COMPOSTER_READY -> dq
    F:net.minecraft.sounds.SoundEffect CONDUIT_ACTIVATE -> dr
    F:net.minecraft.sounds.SoundEffect CONDUIT_AMBIENT -> ds
    F:net.minecraft.sounds.SoundEffect CONDUIT_AMBIENT_SHORT -> dt
    F:net.minecraft.sounds.SoundEffect CONDUIT_ATTACK_TARGET -> du
    F:net.minecraft.sounds.SoundEffect CONDUIT_DEACTIVATE -> dv
    F:net.minecraft.sounds.SoundEffect COPPER_BREAK -> dw
    F:net.minecraft.sounds.SoundEffect COPPER_STEP -> dx
    F:net.minecraft.sounds.SoundEffect COPPER_PLACE -> dy
    F:net.minecraft.sounds.SoundEffect COPPER_HIT -> dz
    F:net.minecraft.sounds.SoundEffect DEEPSLATE_BRICKS_HIT -> ea
    F:net.minecraft.sounds.SoundEffect DEEPSLATE_BRICKS_PLACE -> eb
    F:net.minecraft.sounds.SoundEffect DEEPSLATE_BRICKS_STEP -> ec
    F:net.minecraft.sounds.SoundEffect DEEPSLATE_BREAK -> ed
    F:net.minecraft.sounds.SoundEffect DEEPSLATE_FALL -> ee
    F:net.minecraft.sounds.SoundEffect DEEPSLATE_HIT -> ef
    F:net.minecraft.sounds.SoundEffect DEEPSLATE_PLACE -> eg
    F:net.minecraft.sounds.SoundEffect DEEPSLATE_STEP -> eh
    F:net.minecraft.sounds.SoundEffect DEEPSLATE_TILES_BREAK -> ei
    F:net.minecraft.sounds.SoundEffect DEEPSLATE_TILES_FALL -> ej
    F:net.minecraft.sounds.SoundEffect DEEPSLATE_TILES_HIT -> ek
    F:net.minecraft.sounds.SoundEffect DEEPSLATE_TILES_PLACE -> el
    F:net.minecraft.sounds.SoundEffect DEEPSLATE_TILES_STEP -> em
    F:net.minecraft.sounds.SoundEffect DISPENSER_DISPENSE -> en
    F:net.minecraft.sounds.SoundEffect DISPENSER_FAIL -> eo
    F:net.minecraft.sounds.SoundEffect DISPENSER_LAUNCH -> ep
    F:net.minecraft.sounds.SoundEffect DOLPHIN_AMBIENT -> eq
    F:net.minecraft.sounds.SoundEffect DOLPHIN_AMBIENT_WATER -> er
    F:net.minecraft.sounds.SoundEffect DOLPHIN_ATTACK -> es
    F:net.minecraft.sounds.SoundEffect DOLPHIN_DEATH -> et
    F:net.minecraft.sounds.SoundEffect DOLPHIN_EAT -> eu
    F:net.minecraft.sounds.SoundEffect DOLPHIN_HURT -> ev
    F:net.minecraft.sounds.SoundEffect DOLPHIN_JUMP -> ew
    F:net.minecraft.sounds.SoundEffect DOLPHIN_PLAY -> ex
    F:net.minecraft.sounds.SoundEffect DOLPHIN_SPLASH -> ey
    F:net.minecraft.sounds.SoundEffect DOLPHIN_SWIM -> ez
    F:net.minecraft.sounds.SoundEffect DROWNED_DEATH_WATER -> fa
    F:net.minecraft.sounds.SoundEffect DROWNED_HURT -> fb
    F:net.minecraft.sounds.SoundEffect DROWNED_HURT_WATER -> fc
    F:net.minecraft.sounds.SoundEffect DROWNED_SHOOT -> fd
    F:net.minecraft.sounds.SoundEffect DROWNED_STEP -> fe
    F:net.minecraft.sounds.SoundEffect DROWNED_SWIM -> ff
    F:net.minecraft.sounds.SoundEffect DYE_USE -> fg
    F:net.minecraft.sounds.SoundEffect EGG_THROW -> fh
    F:net.minecraft.sounds.SoundEffect ELDER_GUARDIAN_AMBIENT -> fi
    F:net.minecraft.sounds.SoundEffect ELDER_GUARDIAN_AMBIENT_LAND -> fj
    F:net.minecraft.sounds.SoundEffect ELDER_GUARDIAN_CURSE -> fk
    F:net.minecraft.sounds.SoundEffect ELDER_GUARDIAN_DEATH -> fl
    F:net.minecraft.sounds.SoundEffect ELDER_GUARDIAN_DEATH_LAND -> fm
    F:net.minecraft.sounds.SoundEffect ELDER_GUARDIAN_FLOP -> fn
    F:net.minecraft.sounds.SoundEffect ELDER_GUARDIAN_HURT -> fo
    F:net.minecraft.sounds.SoundEffect ELDER_GUARDIAN_HURT_LAND -> fp
    F:net.minecraft.sounds.SoundEffect ELYTRA_FLYING -> fq
    F:net.minecraft.sounds.SoundEffect ENCHANTMENT_TABLE_USE -> fr
    F:net.minecraft.sounds.SoundEffect ENDER_CHEST_CLOSE -> fs
    F:net.minecraft.sounds.SoundEffect ENDER_CHEST_OPEN -> ft
    F:net.minecraft.sounds.SoundEffect ENDER_DRAGON_AMBIENT -> fu
    F:net.minecraft.sounds.SoundEffect ENDER_DRAGON_DEATH -> fv
    F:net.minecraft.sounds.SoundEffect DRAGON_FIREBALL_EXPLODE -> fw
    F:net.minecraft.sounds.SoundEffect ENDER_DRAGON_FLAP -> fx
    F:net.minecraft.sounds.SoundEffect ENDER_DRAGON_GROWL -> fy
    F:net.minecraft.sounds.SoundEffect ENDER_DRAGON_HURT -> fz
    F:net.minecraft.sounds.SoundEffect EXPERIENCE_BOTTLE_THROW -> ga
    F:net.minecraft.sounds.SoundEffect EXPERIENCE_ORB_PICKUP -> gb
    F:net.minecraft.sounds.SoundEffect FENCE_GATE_CLOSE -> gc
    F:net.minecraft.sounds.SoundEffect FENCE_GATE_OPEN -> gd
    F:net.minecraft.sounds.SoundEffect FIRECHARGE_USE -> ge
    F:net.minecraft.sounds.SoundEffect FIREWORK_ROCKET_BLAST -> gf
    F:net.minecraft.sounds.SoundEffect FIREWORK_ROCKET_BLAST_FAR -> gg
    F:net.minecraft.sounds.SoundEffect FIREWORK_ROCKET_LARGE_BLAST -> gh
    F:net.minecraft.sounds.SoundEffect FIREWORK_ROCKET_LARGE_BLAST_FAR -> gi
    F:net.minecraft.sounds.SoundEffect FIREWORK_ROCKET_LAUNCH -> gj
    F:net.minecraft.sounds.SoundEffect FIREWORK_ROCKET_SHOOT -> gk
    F:net.minecraft.sounds.SoundEffect FIREWORK_ROCKET_TWINKLE -> gl
    F:net.minecraft.sounds.SoundEffect FIREWORK_ROCKET_TWINKLE_FAR -> gm
    F:net.minecraft.sounds.SoundEffect FIRE_AMBIENT -> gn
    F:net.minecraft.sounds.SoundEffect FIRE_EXTINGUISH -> go
    F:net.minecraft.sounds.SoundEffect FISH_SWIM -> gp
    F:net.minecraft.sounds.SoundEffect FISHING_BOBBER_RETRIEVE -> gq
    F:net.minecraft.sounds.SoundEffect FISHING_BOBBER_SPLASH -> gr
    F:net.minecraft.sounds.SoundEffect FISHING_BOBBER_THROW -> gs
    F:net.minecraft.sounds.SoundEffect FLINTANDSTEEL_USE -> gt
    F:net.minecraft.sounds.SoundEffect FLOWERING_AZALEA_BREAK -> gu
    F:net.minecraft.sounds.SoundEffect FLOWERING_AZALEA_FALL -> gv
    F:net.minecraft.sounds.SoundEffect FLOWERING_AZALEA_HIT -> gw
    F:net.minecraft.sounds.SoundEffect FLOWERING_AZALEA_PLACE -> gx
    F:net.minecraft.sounds.SoundEffect FLOWERING_AZALEA_STEP -> gy
    F:net.minecraft.sounds.SoundEffect FOX_AGGRO -> gz
    F:net.minecraft.sounds.SoundEffect FROG_LONG_JUMP -> ha
    F:net.minecraft.sounds.SoundEffect FROG_STEP -> hb
    F:net.minecraft.sounds.SoundEffect FROG_TONGUE -> hc
    F:net.minecraft.sounds.SoundEffect ROOTS_BREAK -> hd
    F:net.minecraft.sounds.SoundEffect ROOTS_STEP -> he
    F:net.minecraft.sounds.SoundEffect ROOTS_PLACE -> hf
    F:net.minecraft.sounds.SoundEffect ROOTS_HIT -> hg
    F:net.minecraft.sounds.SoundEffect ROOTS_FALL -> hh
    F:net.minecraft.sounds.SoundEffect FURNACE_FIRE_CRACKLE -> hi
    F:net.minecraft.sounds.SoundEffect GENERIC_BIG_FALL -> hj
    F:net.minecraft.sounds.SoundEffect GENERIC_BURN -> hk
    F:net.minecraft.sounds.SoundEffect GENERIC_DEATH -> hl
    F:net.minecraft.sounds.SoundEffect GENERIC_DRINK -> hm
    F:net.minecraft.sounds.SoundEffect GENERIC_EAT -> hn
    F:net.minecraft.sounds.SoundEffect GENERIC_EXPLODE -> ho
    F:net.minecraft.sounds.SoundEffect GENERIC_EXTINGUISH_FIRE -> hp
    F:net.minecraft.sounds.SoundEffect GENERIC_HURT -> hq
    F:net.minecraft.sounds.SoundEffect GENERIC_SMALL_FALL -> hr
    F:net.minecraft.sounds.SoundEffect GENERIC_SPLASH -> hs
    F:net.minecraft.sounds.SoundEffect GENERIC_SWIM -> ht
    F:net.minecraft.sounds.SoundEffect GHAST_AMBIENT -> hu
    F:net.minecraft.sounds.SoundEffect GHAST_DEATH -> hv
    F:net.minecraft.sounds.SoundEffect GHAST_HURT -> hw
    F:net.minecraft.sounds.SoundEffect GHAST_SCREAM -> hx
    F:net.minecraft.sounds.SoundEffect GHAST_SHOOT -> hy
    F:net.minecraft.sounds.SoundEffect GHAST_WARN -> hz
    F:net.minecraft.sounds.SoundEffect GOAT_PREPARE_RAM -> ia
    F:net.minecraft.sounds.SoundEffect GOAT_RAM_IMPACT -> ib
    F:net.minecraft.sounds.SoundEffect GOAT_HORN_BREAK -> ic
    F:net.minecraft.sounds.SoundEffect GOAT_HORN_PLAY -> id
    F:net.minecraft.sounds.SoundEffect GOAT_SCREAMING_AMBIENT -> ie
    F:net.minecraft.sounds.SoundEffect GOAT_SCREAMING_DEATH -> if
    F:net.minecraft.sounds.SoundEffect GOAT_SCREAMING_EAT -> ig
    F:net.minecraft.sounds.SoundEffect GOAT_SCREAMING_HURT -> ih
    F:net.minecraft.sounds.SoundEffect GOAT_SCREAMING_LONG_JUMP -> ii
    F:net.minecraft.sounds.SoundEffect GOAT_SCREAMING_MILK -> ij
    F:net.minecraft.sounds.SoundEffect GOAT_SCREAMING_PREPARE_RAM -> ik
    F:net.minecraft.sounds.SoundEffect GOAT_SCREAMING_RAM_IMPACT -> il
    F:net.minecraft.sounds.SoundEffect GOAT_SCREAMING_HORN_BREAK -> im
    F:net.minecraft.sounds.SoundEffect GOAT_STEP -> in
    F:net.minecraft.sounds.SoundEffect GRASS_BREAK -> io
    F:net.minecraft.sounds.SoundEffect GRASS_FALL -> ip
    F:net.minecraft.sounds.SoundEffect GRASS_HIT -> iq
    F:net.minecraft.sounds.SoundEffect GRASS_PLACE -> ir
    F:net.minecraft.sounds.SoundEffect GRASS_STEP -> is
    F:net.minecraft.sounds.SoundEffect GRAVEL_BREAK -> it
    F:net.minecraft.sounds.SoundEffect GRAVEL_FALL -> iu
    F:net.minecraft.sounds.SoundEffect GRAVEL_HIT -> iv
    F:net.minecraft.sounds.SoundEffect GRAVEL_PLACE -> iw
    F:net.minecraft.sounds.SoundEffect GRAVEL_STEP -> ix
    F:net.minecraft.sounds.SoundEffect GRINDSTONE_USE -> iy
    F:net.minecraft.sounds.SoundEffect GROWING_PLANT_CROP -> iz
    F:net.minecraft.sounds.SoundEffect HONEY_BLOCK_SLIDE -> ja
    F:net.minecraft.sounds.SoundEffect HONEY_BLOCK_STEP -> jb
    F:net.minecraft.sounds.SoundEffect HONEYCOMB_WAX_ON -> jc
    F:net.minecraft.sounds.SoundEffect HONEY_DRINK -> jd
    F:int GOAT_HORN_VARIANT_COUNT -> je
    F:com.google.common.collect.ImmutableList GOAT_HORN_SOUND_VARIANTS -> jf
    F:net.minecraft.sounds.SoundEffect HORSE_AMBIENT -> jg
    F:net.minecraft.sounds.SoundEffect HORSE_ANGRY -> jh
    F:net.minecraft.sounds.SoundEffect HORSE_ARMOR -> ji
    F:net.minecraft.sounds.SoundEffect HORSE_BREATHE -> jj
    F:net.minecraft.sounds.SoundEffect HORSE_DEATH -> jk
    F:net.minecraft.sounds.SoundEffect HORSE_EAT -> jl
    F:net.minecraft.sounds.SoundEffect HORSE_GALLOP -> jm
    F:net.minecraft.sounds.SoundEffect HORSE_HURT -> jn
    F:net.minecraft.sounds.SoundEffect HORSE_JUMP -> jo
    F:net.minecraft.sounds.SoundEffect HORSE_LAND -> jp
    F:net.minecraft.sounds.SoundEffect HORSE_SADDLE -> jq
    F:net.minecraft.sounds.SoundEffect HORSE_STEP -> jr
    F:net.minecraft.sounds.SoundEffect HORSE_STEP_WOOD -> js
    F:net.minecraft.sounds.SoundEffect HOSTILE_BIG_FALL -> jt
    F:net.minecraft.sounds.SoundEffect HOSTILE_DEATH -> ju
    F:net.minecraft.sounds.SoundEffect HOSTILE_HURT -> jv
    F:net.minecraft.sounds.SoundEffect HOSTILE_SMALL_FALL -> jw
    F:net.minecraft.sounds.SoundEffect HOSTILE_SPLASH -> jx
    F:net.minecraft.sounds.SoundEffect HOSTILE_SWIM -> jy
    F:net.minecraft.sounds.SoundEffect HUSK_AMBIENT -> jz
    F:net.minecraft.sounds.SoundEffect ITEM_FRAME_ROTATE_ITEM -> ka
    F:net.minecraft.sounds.SoundEffect ITEM_BREAK -> kb
    F:net.minecraft.sounds.SoundEffect ITEM_PICKUP -> kc
    F:net.minecraft.sounds.SoundEffect LADDER_BREAK -> kd
    F:net.minecraft.sounds.SoundEffect LADDER_FALL -> ke
    F:net.minecraft.sounds.SoundEffect LADDER_HIT -> kf
    F:net.minecraft.sounds.SoundEffect LADDER_PLACE -> kg
    F:net.minecraft.sounds.SoundEffect LADDER_STEP -> kh
    F:net.minecraft.sounds.SoundEffect LANTERN_BREAK -> ki
    F:net.minecraft.sounds.SoundEffect LANTERN_FALL -> kj
    F:net.minecraft.sounds.SoundEffect LANTERN_HIT -> kk
    F:net.minecraft.sounds.SoundEffect LANTERN_PLACE -> kl
    F:net.minecraft.sounds.SoundEffect LANTERN_STEP -> km
    F:net.minecraft.sounds.SoundEffect LARGE_AMETHYST_BUD_BREAK -> kn
    F:net.minecraft.sounds.SoundEffect LARGE_AMETHYST_BUD_PLACE -> ko
    F:net.minecraft.sounds.SoundEffect LAVA_AMBIENT -> kp
    F:net.minecraft.sounds.SoundEffect LAVA_EXTINGUISH -> kq
    F:net.minecraft.sounds.SoundEffect LAVA_POP -> kr
    F:net.minecraft.sounds.SoundEffect LEASH_KNOT_BREAK -> ks
    F:net.minecraft.sounds.SoundEffect LEASH_KNOT_PLACE -> kt
    F:net.minecraft.sounds.SoundEffect LEVER_CLICK -> ku
    F:net.minecraft.sounds.SoundEffect LIGHTNING_BOLT_IMPACT -> kv
    F:net.minecraft.sounds.SoundEffect LIGHTNING_BOLT_THUNDER -> kw
    F:net.minecraft.sounds.SoundEffect LINGERING_POTION_THROW -> kx
    F:net.minecraft.sounds.SoundEffect LLAMA_AMBIENT -> ky
    F:net.minecraft.sounds.SoundEffect LLAMA_ANGRY -> kz
    F:net.minecraft.sounds.SoundEffect MEDIUM_AMETHYST_BUD_PLACE -> la
    F:net.minecraft.sounds.SoundEffect METAL_BREAK -> lb
    F:net.minecraft.sounds.SoundEffect METAL_FALL -> lc
    F:net.minecraft.sounds.SoundEffect METAL_HIT -> ld
    F:net.minecraft.sounds.SoundEffect METAL_PLACE -> le
    F:net.minecraft.sounds.SoundEffect METAL_PRESSURE_PLATE_CLICK_OFF -> lf
    F:net.minecraft.sounds.SoundEffect METAL_PRESSURE_PLATE_CLICK_ON -> lg
    F:net.minecraft.sounds.SoundEffect METAL_STEP -> lh
    F:net.minecraft.sounds.SoundEffect MINECART_INSIDE_UNDERWATER -> li
    F:net.minecraft.sounds.SoundEffect MINECART_INSIDE -> lj
    F:net.minecraft.sounds.SoundEffect MINECART_RIDING -> lk
    F:net.minecraft.sounds.SoundEffect MOOSHROOM_CONVERT -> ll
    F:net.minecraft.sounds.SoundEffect MOOSHROOM_EAT -> lm
    F:net.minecraft.sounds.SoundEffect MOOSHROOM_MILK -> ln
    F:net.minecraft.sounds.SoundEffect MOOSHROOM_MILK_SUSPICIOUSLY -> lo
    F:net.minecraft.sounds.SoundEffect MOOSHROOM_SHEAR -> lp
    F:net.minecraft.sounds.SoundEffect MOSS_CARPET_BREAK -> lq
    F:net.minecraft.sounds.SoundEffect MOSS_CARPET_FALL -> lr
    F:net.minecraft.sounds.SoundEffect MOSS_CARPET_HIT -> ls
    F:net.minecraft.sounds.SoundEffect MOSS_CARPET_PLACE -> lt
    F:net.minecraft.sounds.SoundEffect MOSS_CARPET_STEP -> lu
    F:net.minecraft.sounds.SoundEffect MOSS_BREAK -> lv
    F:net.minecraft.sounds.SoundEffect MOSS_FALL -> lw
    F:net.minecraft.sounds.SoundEffect MOSS_HIT -> lx
    F:net.minecraft.sounds.SoundEffect MOSS_PLACE -> ly
    F:net.minecraft.sounds.SoundEffect MOSS_STEP -> lz
    F:net.minecraft.sounds.SoundEffect MUSIC_DISC_BLOCKS -> ma
    F:net.minecraft.sounds.SoundEffect MUSIC_DISC_CAT -> mb
    F:net.minecraft.sounds.SoundEffect MUSIC_DISC_CHIRP -> mc
    F:net.minecraft.sounds.SoundEffect MUSIC_DISC_FAR -> md
    F:net.minecraft.sounds.SoundEffect MUSIC_DISC_MALL -> me
    F:net.minecraft.sounds.SoundEffect MUSIC_DISC_MELLOHI -> mf
    F:net.minecraft.sounds.SoundEffect MUSIC_DISC_PIGSTEP -> mg
    F:net.minecraft.sounds.SoundEffect MUSIC_DISC_STAL -> mh
    F:net.minecraft.sounds.SoundEffect MUSIC_DISC_STRAD -> mi
    F:net.minecraft.sounds.SoundEffect MUSIC_DISC_WAIT -> mj
    F:net.minecraft.sounds.SoundEffect MUSIC_DISC_WARD -> mk
    F:net.minecraft.sounds.SoundEffect MUSIC_DISC_OTHERSIDE -> ml
    F:net.minecraft.sounds.SoundEffect MUSIC_DRAGON -> mm
    F:net.minecraft.sounds.SoundEffect MUSIC_END -> mn
    F:net.minecraft.sounds.SoundEffect MUSIC_GAME -> mo
    F:net.minecraft.sounds.SoundEffect MUSIC_MENU -> mp
    F:net.minecraft.sounds.SoundEffect MUSIC_BIOME_BASALT_DELTAS -> mq
    F:net.minecraft.sounds.SoundEffect MUSIC_BIOME_CRIMSON_FOREST -> mr
    F:net.minecraft.sounds.SoundEffect MUSIC_BIOME_DEEP_DARK -> ms
    F:net.minecraft.sounds.SoundEffect MUSIC_BIOME_DRIPSTONE_CAVES -> mt
    F:net.minecraft.sounds.SoundEffect MUSIC_BIOME_GROVE -> mu
    F:net.minecraft.sounds.SoundEffect MUSIC_BIOME_JAGGED_PEAKS -> mv
    F:net.minecraft.sounds.SoundEffect MUSIC_BIOME_LUSH_CAVES -> mw
    F:net.minecraft.sounds.SoundEffect MUSIC_BIOME_SWAMP -> mx
    F:net.minecraft.sounds.SoundEffect MUSIC_BIOME_JUNGLE_AND_FOREST -> my
    F:net.minecraft.sounds.SoundEffect MUSIC_BIOME_OLD_GROWTH_TAIGA -> mz
    F:net.minecraft.sounds.SoundEffect NYLIUM_STEP -> na
    F:net.minecraft.sounds.SoundEffect NYLIUM_PLACE -> nb
    F:net.minecraft.sounds.SoundEffect NYLIUM_HIT -> nc
    F:net.minecraft.sounds.SoundEffect NYLIUM_FALL -> nd
    F:net.minecraft.sounds.SoundEffect NETHER_SPROUTS_BREAK -> ne
    F:net.minecraft.sounds.SoundEffect NETHER_SPROUTS_STEP -> nf
    F:net.minecraft.sounds.SoundEffect NETHER_SPROUTS_PLACE -> ng
    F:net.minecraft.sounds.SoundEffect NETHER_SPROUTS_HIT -> nh
    F:net.minecraft.sounds.SoundEffect NETHER_SPROUTS_FALL -> ni
    F:net.minecraft.sounds.SoundEffect FUNGUS_BREAK -> nj
    F:net.minecraft.sounds.SoundEffect FUNGUS_STEP -> nk
    F:net.minecraft.sounds.SoundEffect FUNGUS_PLACE -> nl
    F:net.minecraft.sounds.SoundEffect FUNGUS_HIT -> nm
    F:net.minecraft.sounds.SoundEffect FUNGUS_FALL -> nn
    F:net.minecraft.sounds.SoundEffect WEEPING_VINES_BREAK -> no
    F:net.minecraft.sounds.SoundEffect WEEPING_VINES_STEP -> np
    F:net.minecraft.sounds.SoundEffect WEEPING_VINES_PLACE -> nq
    F:net.minecraft.sounds.SoundEffect WEEPING_VINES_HIT -> nr
    F:net.minecraft.sounds.SoundEffect WEEPING_VINES_FALL -> ns
    F:net.minecraft.sounds.SoundEffect WART_BLOCK_BREAK -> nt
    F:net.minecraft.sounds.SoundEffect WART_BLOCK_STEP -> nu
    F:net.minecraft.sounds.SoundEffect WART_BLOCK_PLACE -> nv
    F:net.minecraft.sounds.SoundEffect WART_BLOCK_HIT -> nw
    F:net.minecraft.sounds.SoundEffect WART_BLOCK_FALL -> nx
    F:net.minecraft.sounds.SoundEffect NETHERITE_BLOCK_BREAK -> ny
    F:net.minecraft.sounds.SoundEffect NETHERITE_BLOCK_STEP -> nz
    F:net.minecraft.sounds.SoundEffect OCELOT_DEATH -> oa
    F:net.minecraft.sounds.SoundEffect PAINTING_BREAK -> ob
    F:net.minecraft.sounds.SoundEffect PAINTING_PLACE -> oc
    F:net.minecraft.sounds.SoundEffect PANDA_PRE_SNEEZE -> od
    F:net.minecraft.sounds.SoundEffect PANDA_SNEEZE -> oe
    F:net.minecraft.sounds.SoundEffect PANDA_AMBIENT -> of
    F:net.minecraft.sounds.SoundEffect PANDA_DEATH -> og
    F:net.minecraft.sounds.SoundEffect PANDA_EAT -> oh
    F:net.minecraft.sounds.SoundEffect PANDA_STEP -> oi
    F:net.minecraft.sounds.SoundEffect PANDA_CANT_BREED -> oj
    F:net.minecraft.sounds.SoundEffect PANDA_AGGRESSIVE_AMBIENT -> ok
    F:net.minecraft.sounds.SoundEffect PANDA_WORRIED_AMBIENT -> ol
    F:net.minecraft.sounds.SoundEffect PANDA_HURT -> om
    F:net.minecraft.sounds.SoundEffect PANDA_BITE -> on
    F:net.minecraft.sounds.SoundEffect PARROT_AMBIENT -> oo
    F:net.minecraft.sounds.SoundEffect PARROT_DEATH -> op
    F:net.minecraft.sounds.SoundEffect PARROT_EAT -> oq
    F:net.minecraft.sounds.SoundEffect PARROT_FLY -> or
    F:net.minecraft.sounds.SoundEffect PARROT_HURT -> os
    F:net.minecraft.sounds.SoundEffect PARROT_IMITATE_BLAZE -> ot
    F:net.minecraft.sounds.SoundEffect PARROT_IMITATE_CREEPER -> ou
    F:net.minecraft.sounds.SoundEffect PARROT_IMITATE_DROWNED -> ov
    F:net.minecraft.sounds.SoundEffect PARROT_IMITATE_ELDER_GUARDIAN -> ow
    F:net.minecraft.sounds.SoundEffect PARROT_IMITATE_ENDER_DRAGON -> ox
    F:net.minecraft.sounds.SoundEffect PARROT_IMITATE_ENDERMITE -> oy
    F:net.minecraft.sounds.SoundEffect PARROT_IMITATE_EVOKER -> oz
    F:net.minecraft.sounds.SoundEffect PARROT_STEP -> pa
    F:net.minecraft.sounds.SoundEffect PHANTOM_AMBIENT -> pb
    F:net.minecraft.sounds.SoundEffect PHANTOM_BITE -> pc
    F:net.minecraft.sounds.SoundEffect PHANTOM_DEATH -> pd
    F:net.minecraft.sounds.SoundEffect PHANTOM_FLAP -> pe
    F:net.minecraft.sounds.SoundEffect PHANTOM_HURT -> pf
    F:net.minecraft.sounds.SoundEffect PHANTOM_SWOOP -> pg
    F:net.minecraft.sounds.SoundEffect PIG_AMBIENT -> ph
    F:net.minecraft.sounds.SoundEffect PIG_DEATH -> pi
    F:net.minecraft.sounds.SoundEffect PIG_HURT -> pj
    F:net.minecraft.sounds.SoundEffect PIG_SADDLE -> pk
    F:net.minecraft.sounds.SoundEffect PIG_STEP -> pl
    F:net.minecraft.sounds.SoundEffect PIGLIN_ADMIRING_ITEM -> pm
    F:net.minecraft.sounds.SoundEffect PIGLIN_AMBIENT -> pn
    F:net.minecraft.sounds.SoundEffect PIGLIN_ANGRY -> po
    F:net.minecraft.sounds.SoundEffect PIGLIN_CELEBRATE -> pp
    F:net.minecraft.sounds.SoundEffect PIGLIN_DEATH -> pq
    F:net.minecraft.sounds.SoundEffect PIGLIN_JEALOUS -> pr
    F:net.minecraft.sounds.SoundEffect PIGLIN_HURT -> ps
    F:net.minecraft.sounds.SoundEffect PIGLIN_RETREAT -> pt
    F:net.minecraft.sounds.SoundEffect PIGLIN_STEP -> pu
    F:net.minecraft.sounds.SoundEffect PIGLIN_CONVERTED_TO_ZOMBIFIED -> pv
    F:net.minecraft.sounds.SoundEffect PIGLIN_BRUTE_AMBIENT -> pw
    F:net.minecraft.sounds.SoundEffect PIGLIN_BRUTE_ANGRY -> px
    F:net.minecraft.sounds.SoundEffect PIGLIN_BRUTE_DEATH -> py
    F:net.minecraft.sounds.SoundEffect PIGLIN_BRUTE_HURT -> pz
    F:net.minecraft.sounds.SoundEffect PLAYER_SPLASH_HIGH_SPEED -> qa
    F:net.minecraft.sounds.SoundEffect PLAYER_SWIM -> qb
    F:net.minecraft.sounds.SoundEffect POLAR_BEAR_AMBIENT -> qc
    F:net.minecraft.sounds.SoundEffect POLAR_BEAR_AMBIENT_BABY -> qd
    F:net.minecraft.sounds.SoundEffect POLAR_BEAR_DEATH -> qe
    F:net.minecraft.sounds.SoundEffect POLAR_BEAR_HURT -> qf
    F:net.minecraft.sounds.SoundEffect POLAR_BEAR_STEP -> qg
    F:net.minecraft.sounds.SoundEffect POLAR_BEAR_WARNING -> qh
    F:net.minecraft.sounds.SoundEffect POLISHED_DEEPSLATE_BREAK -> qi
    F:net.minecraft.sounds.SoundEffect POLISHED_DEEPSLATE_FALL -> qj
    F:net.minecraft.sounds.SoundEffect POLISHED_DEEPSLATE_HIT -> qk
    F:net.minecraft.sounds.SoundEffect POLISHED_DEEPSLATE_PLACE -> ql
    F:net.minecraft.sounds.SoundEffect POLISHED_DEEPSLATE_STEP -> qm
    F:net.minecraft.sounds.SoundEffect PORTAL_AMBIENT -> qn
    F:net.minecraft.sounds.SoundEffect PORTAL_TRAVEL -> qo
    F:net.minecraft.sounds.SoundEffect PORTAL_TRIGGER -> qp
    F:net.minecraft.sounds.SoundEffect POWDER_SNOW_BREAK -> qq
    F:net.minecraft.sounds.SoundEffect POWDER_SNOW_FALL -> qr
    F:net.minecraft.sounds.SoundEffect POWDER_SNOW_HIT -> qs
    F:net.minecraft.sounds.SoundEffect POWDER_SNOW_PLACE -> qt
    F:net.minecraft.sounds.SoundEffect POWDER_SNOW_STEP -> qu
    F:net.minecraft.sounds.SoundEffect PUFFER_FISH_AMBIENT -> qv
    F:net.minecraft.sounds.SoundEffect PUFFER_FISH_BLOW_OUT -> qw
    F:net.minecraft.sounds.SoundEffect PUFFER_FISH_BLOW_UP -> qx
    F:net.minecraft.sounds.SoundEffect PUFFER_FISH_DEATH -> qy
    F:net.minecraft.sounds.SoundEffect PUFFER_FISH_FLOP -> qz
    F:net.minecraft.sounds.SoundEffect NETHER_ORE_STEP -> ra
    F:net.minecraft.sounds.SoundEffect REDSTONE_TORCH_BURNOUT -> rb
    F:net.minecraft.sounds.SoundEffect RESPAWN_ANCHOR_AMBIENT -> rc
    F:net.minecraft.sounds.SoundEffect RESPAWN_ANCHOR_CHARGE -> rd
    F:net.minecraft.sounds.SoundEffect RESPAWN_ANCHOR_DEPLETE -> re
    F:net.minecraft.sounds.SoundEffect RESPAWN_ANCHOR_SET_SPAWN -> rf
    F:net.minecraft.sounds.SoundEffect ROOTED_DIRT_BREAK -> rg
    F:net.minecraft.sounds.SoundEffect ROOTED_DIRT_FALL -> rh
    F:net.minecraft.sounds.SoundEffect ROOTED_DIRT_HIT -> ri
    F:net.minecraft.sounds.SoundEffect ROOTED_DIRT_PLACE -> rj
    F:net.minecraft.sounds.SoundEffect ROOTED_DIRT_STEP -> rk
    F:net.minecraft.sounds.SoundEffect SALMON_AMBIENT -> rl
    F:net.minecraft.sounds.SoundEffect SALMON_DEATH -> rm
    F:net.minecraft.sounds.SoundEffect SALMON_FLOP -> rn
    F:net.minecraft.sounds.SoundEffect SALMON_HURT -> ro
    F:net.minecraft.sounds.SoundEffect SAND_BREAK -> rp
    F:net.minecraft.sounds.SoundEffect SAND_FALL -> rq
    F:net.minecraft.sounds.SoundEffect SAND_HIT -> rr
    F:net.minecraft.sounds.SoundEffect SAND_PLACE -> rs
    F:net.minecraft.sounds.SoundEffect SAND_STEP -> rt
    F:net.minecraft.sounds.SoundEffect SCAFFOLDING_BREAK -> ru
    F:net.minecraft.sounds.SoundEffect SCAFFOLDING_FALL -> rv
    F:net.minecraft.sounds.SoundEffect SCAFFOLDING_HIT -> rw
    F:net.minecraft.sounds.SoundEffect SCAFFOLDING_PLACE -> rx
    F:net.minecraft.sounds.SoundEffect SCAFFOLDING_STEP -> ry
    F:net.minecraft.sounds.SoundEffect SCULK_BLOCK_SPREAD -> rz
    F:net.minecraft.sounds.SoundEffect SCULK_VEIN_FALL -> sa
    F:net.minecraft.sounds.SoundEffect SCULK_VEIN_HIT -> sb
    F:net.minecraft.sounds.SoundEffect SCULK_VEIN_PLACE -> sc
    F:net.minecraft.sounds.SoundEffect SCULK_VEIN_STEP -> sd
    F:net.minecraft.sounds.SoundEffect SHEEP_AMBIENT -> se
    F:net.minecraft.sounds.SoundEffect SHEEP_DEATH -> sf
    F:net.minecraft.sounds.SoundEffect SHEEP_HURT -> sg
    F:net.minecraft.sounds.SoundEffect SHEEP_SHEAR -> sh
    F:net.minecraft.sounds.SoundEffect SHEEP_STEP -> si
    F:net.minecraft.sounds.SoundEffect SHIELD_BLOCK -> sj
    F:net.minecraft.sounds.SoundEffect SHIELD_BREAK -> sk
    F:net.minecraft.sounds.SoundEffect SHROOMLIGHT_BREAK -> sl
    F:net.minecraft.sounds.SoundEffect SHROOMLIGHT_STEP -> sm
    F:net.minecraft.sounds.SoundEffect SHROOMLIGHT_PLACE -> sn
    F:net.minecraft.sounds.SoundEffect SHROOMLIGHT_HIT -> so
    F:net.minecraft.sounds.SoundEffect SHROOMLIGHT_FALL -> sp
    F:net.minecraft.sounds.SoundEffect SHOVEL_FLATTEN -> sq
    F:net.minecraft.sounds.SoundEffect SHULKER_AMBIENT -> sr
    F:net.minecraft.sounds.SoundEffect SHULKER_BOX_CLOSE -> ss
    F:net.minecraft.sounds.SoundEffect SHULKER_BOX_OPEN -> st
    F:net.minecraft.sounds.SoundEffect SHULKER_BULLET_HIT -> su
    F:net.minecraft.sounds.SoundEffect SHULKER_BULLET_HURT -> sv
    F:net.minecraft.sounds.SoundEffect SHULKER_CLOSE -> sw
    F:net.minecraft.sounds.SoundEffect SHULKER_DEATH -> sx
    F:net.minecraft.sounds.SoundEffect SHULKER_HURT -> sy
    F:net.minecraft.sounds.SoundEffect SHULKER_HURT_CLOSED -> sz
    F:net.minecraft.sounds.SoundEffect SLIME_BLOCK_BREAK -> ta
    F:net.minecraft.sounds.SoundEffect SLIME_BLOCK_FALL -> tb
    F:net.minecraft.sounds.SoundEffect SLIME_BLOCK_HIT -> tc
    F:net.minecraft.sounds.SoundEffect SLIME_BLOCK_PLACE -> td
    F:net.minecraft.sounds.SoundEffect SLIME_BLOCK_STEP -> te
    F:net.minecraft.sounds.SoundEffect SMALL_AMETHYST_BUD_BREAK -> tf
    F:net.minecraft.sounds.SoundEffect SMALL_AMETHYST_BUD_PLACE -> tg
    F:net.minecraft.sounds.SoundEffect SMALL_DRIPLEAF_BREAK -> th
    F:net.minecraft.sounds.SoundEffect SMALL_DRIPLEAF_FALL -> ti
    F:net.minecraft.sounds.SoundEffect SMALL_DRIPLEAF_HIT -> tj
    F:net.minecraft.sounds.SoundEffect SMALL_DRIPLEAF_PLACE -> tk
    F:net.minecraft.sounds.SoundEffect SMALL_DRIPLEAF_STEP -> tl
    F:net.minecraft.sounds.SoundEffect SOUL_SAND_BREAK -> tm
    F:net.minecraft.sounds.SoundEffect SOUL_SAND_STEP -> tn
    F:net.minecraft.sounds.SoundEffect SOUL_SAND_PLACE -> to
    F:net.minecraft.sounds.SoundEffect SOUL_SAND_HIT -> tp
    F:net.minecraft.sounds.SoundEffect SOUL_SAND_FALL -> tq
    F:net.minecraft.sounds.SoundEffect SOUL_SOIL_BREAK -> tr
    F:net.minecraft.sounds.SoundEffect SOUL_SOIL_STEP -> ts
    F:net.minecraft.sounds.SoundEffect SOUL_SOIL_PLACE -> tt
    F:net.minecraft.sounds.SoundEffect SOUL_SOIL_HIT -> tu
    F:net.minecraft.sounds.SoundEffect SOUL_SOIL_FALL -> tv
    F:net.minecraft.sounds.SoundEffect SOUL_ESCAPE -> tw
    F:net.minecraft.sounds.SoundEffect SPORE_BLOSSOM_BREAK -> tx
    F:net.minecraft.sounds.SoundEffect SPORE_BLOSSOM_FALL -> ty
    F:net.minecraft.sounds.SoundEffect SPORE_BLOSSOM_HIT -> tz
    F:net.minecraft.sounds.SoundEffect SNOW_PLACE -> ua
    F:net.minecraft.sounds.SoundEffect SNOW_STEP -> ub
    F:net.minecraft.sounds.SoundEffect SPIDER_AMBIENT -> uc
    F:net.minecraft.sounds.SoundEffect SPIDER_DEATH -> ud
    F:net.minecraft.sounds.SoundEffect SPIDER_HURT -> ue
    F:net.minecraft.sounds.SoundEffect SPIDER_STEP -> uf
    F:net.minecraft.sounds.SoundEffect SPLASH_POTION_BREAK -> ug
    F:net.minecraft.sounds.SoundEffect SPLASH_POTION_THROW -> uh
    F:net.minecraft.sounds.SoundEffect SPYGLASS_USE -> ui
    F:net.minecraft.sounds.SoundEffect SPYGLASS_STOP_USING -> uj
    F:net.minecraft.sounds.SoundEffect SQUID_AMBIENT -> uk
    F:net.minecraft.sounds.SoundEffect SQUID_DEATH -> ul
    F:net.minecraft.sounds.SoundEffect SQUID_HURT -> um
    F:net.minecraft.sounds.SoundEffect SQUID_SQUIRT -> un
    F:net.minecraft.sounds.SoundEffect STONE_BREAK -> uo
    F:net.minecraft.sounds.SoundEffect STONE_BUTTON_CLICK_OFF -> up
    F:net.minecraft.sounds.SoundEffect STONE_BUTTON_CLICK_ON -> uq
    F:net.minecraft.sounds.SoundEffect STONE_FALL -> ur
    F:net.minecraft.sounds.SoundEffect STONE_HIT -> us
    F:net.minecraft.sounds.SoundEffect STONE_PLACE -> ut
    F:net.minecraft.sounds.SoundEffect STONE_PRESSURE_PLATE_CLICK_OFF -> uu
    F:net.minecraft.sounds.SoundEffect STONE_PRESSURE_PLATE_CLICK_ON -> uv
    F:net.minecraft.sounds.SoundEffect STONE_STEP -> uw
    F:net.minecraft.sounds.SoundEffect STRAY_AMBIENT -> ux
    F:net.minecraft.sounds.SoundEffect STRAY_DEATH -> uy
    F:net.minecraft.sounds.SoundEffect STRAY_HURT -> uz
    F:net.minecraft.sounds.SoundEffect TROPICAL_FISH_HURT -> va
    F:net.minecraft.sounds.SoundEffect TUFF_BREAK -> vb
    F:net.minecraft.sounds.SoundEffect TUFF_STEP -> vc
    F:net.minecraft.sounds.SoundEffect TUFF_PLACE -> vd
    F:net.minecraft.sounds.SoundEffect TUFF_HIT -> ve
    F:net.minecraft.sounds.SoundEffect TUFF_FALL -> vf
    F:net.minecraft.sounds.SoundEffect TURTLE_AMBIENT_LAND -> vg
    F:net.minecraft.sounds.SoundEffect TURTLE_DEATH -> vh
    F:net.minecraft.sounds.SoundEffect TURTLE_DEATH_BABY -> vi
    F:net.minecraft.sounds.SoundEffect TURTLE_EGG_BREAK -> vj
    F:net.minecraft.sounds.SoundEffect TURTLE_EGG_CRACK -> vk
    F:net.minecraft.sounds.SoundEffect TURTLE_EGG_HATCH -> vl
    F:net.minecraft.sounds.SoundEffect TURTLE_HURT -> vm
    F:net.minecraft.sounds.SoundEffect TURTLE_HURT_BABY -> vn
    F:net.minecraft.sounds.SoundEffect TURTLE_LAY_EGG -> vo
    F:net.minecraft.sounds.SoundEffect TURTLE_SHAMBLE -> vp
    F:net.minecraft.sounds.SoundEffect TURTLE_SHAMBLE_BABY -> vq
    F:net.minecraft.sounds.SoundEffect TURTLE_SWIM -> vr
    F:net.minecraft.sounds.SoundEffect UI_BUTTON_CLICK -> vs
    F:net.minecraft.sounds.SoundEffect UI_LOOM_SELECT_PATTERN -> vt
    F:net.minecraft.sounds.SoundEffect UI_LOOM_TAKE_RESULT -> vu
    F:net.minecraft.sounds.SoundEffect UI_CARTOGRAPHY_TABLE_TAKE_RESULT -> vv
    F:net.minecraft.sounds.SoundEffect UI_STONECUTTER_TAKE_RESULT -> vw
    F:net.minecraft.sounds.SoundEffect UI_STONECUTTER_SELECT_RECIPE -> vx
    F:net.minecraft.sounds.SoundEffect UI_TOAST_CHALLENGE_COMPLETE -> vy
    F:net.minecraft.sounds.SoundEffect UI_TOAST_IN -> vz
    F:net.minecraft.sounds.SoundEffect VINDICATOR_CELEBRATE -> wa
    F:net.minecraft.sounds.SoundEffect VINDICATOR_DEATH -> wb
    F:net.minecraft.sounds.SoundEffect VINDICATOR_HURT -> wc
    F:net.minecraft.sounds.SoundEffect VINE_BREAK -> wd
    F:net.minecraft.sounds.SoundEffect VINE_FALL -> we
    F:net.minecraft.sounds.SoundEffect VINE_HIT -> wf
    F:net.minecraft.sounds.SoundEffect VINE_PLACE -> wg
    F:net.minecraft.sounds.SoundEffect VINE_STEP -> wh
    F:net.minecraft.sounds.SoundEffect LILY_PAD_PLACE -> wi
    F:net.minecraft.sounds.SoundEffect WANDERING_TRADER_AMBIENT -> wj
    F:net.minecraft.sounds.SoundEffect WANDERING_TRADER_DEATH -> wk
    F:net.minecraft.sounds.SoundEffect WANDERING_TRADER_DISAPPEARED -> wl
    F:net.minecraft.sounds.SoundEffect WANDERING_TRADER_DRINK_MILK -> wm
    F:net.minecraft.sounds.SoundEffect WANDERING_TRADER_DRINK_POTION -> wn
    F:net.minecraft.sounds.SoundEffect WANDERING_TRADER_HURT -> wo
    F:net.minecraft.sounds.SoundEffect WANDERING_TRADER_NO -> wp
    F:net.minecraft.sounds.SoundEffect WANDERING_TRADER_REAPPEARED -> wq
    F:net.minecraft.sounds.SoundEffect WANDERING_TRADER_TRADE -> wr
    F:net.minecraft.sounds.SoundEffect WANDERING_TRADER_YES -> ws
    F:net.minecraft.sounds.SoundEffect WARDEN_AGITATED -> wt
    F:net.minecraft.sounds.SoundEffect WARDEN_AMBIENT -> wu
    F:net.minecraft.sounds.SoundEffect WARDEN_ANGRY -> wv
    F:net.minecraft.sounds.SoundEffect WARDEN_ATTACK_IMPACT -> ww
    F:net.minecraft.sounds.SoundEffect WARDEN_DEATH -> wx
    F:net.minecraft.sounds.SoundEffect WARDEN_DIG -> wy
    F:net.minecraft.sounds.SoundEffect WARDEN_EMERGE -> wz
    F:net.minecraft.sounds.SoundEffect WITCH_THROW -> xa
    F:net.minecraft.sounds.SoundEffect WITHER_AMBIENT -> xb
    F:net.minecraft.sounds.SoundEffect WITHER_BREAK_BLOCK -> xc
    F:net.minecraft.sounds.SoundEffect WITHER_DEATH -> xd
    F:net.minecraft.sounds.SoundEffect WITHER_HURT -> xe
    F:net.minecraft.sounds.SoundEffect WITHER_SHOOT -> xf
    F:net.minecraft.sounds.SoundEffect WITHER_SKELETON_AMBIENT -> xg
    F:net.minecraft.sounds.SoundEffect WITHER_SKELETON_DEATH -> xh
    F:net.minecraft.sounds.SoundEffect WITHER_SKELETON_HURT -> xi
    F:net.minecraft.sounds.SoundEffect WITHER_SKELETON_STEP -> xj
    F:net.minecraft.sounds.SoundEffect WITHER_SPAWN -> xk
    F:net.minecraft.sounds.SoundEffect WOLF_AMBIENT -> xl
    F:net.minecraft.sounds.SoundEffect WOLF_DEATH -> xm
    F:net.minecraft.sounds.SoundEffect WOLF_GROWL -> xn
    F:net.minecraft.sounds.SoundEffect WOLF_HOWL -> xo
    F:net.minecraft.sounds.SoundEffect WOLF_HURT -> xp
    F:net.minecraft.sounds.SoundEffect WOLF_PANT -> xq
    F:net.minecraft.sounds.SoundEffect WOLF_SHAKE -> xr
    F:net.minecraft.sounds.SoundEffect WOLF_STEP -> xs
    F:net.minecraft.sounds.SoundEffect WOLF_WHINE -> xt
    F:net.minecraft.sounds.SoundEffect WOODEN_DOOR_CLOSE -> xu
    F:net.minecraft.sounds.SoundEffect WOODEN_DOOR_OPEN -> xv
    F:net.minecraft.sounds.SoundEffect WOODEN_TRAPDOOR_CLOSE -> xw
    F:net.minecraft.sounds.SoundEffect WOODEN_TRAPDOOR_OPEN -> xx
    F:net.minecraft.sounds.SoundEffect WOOD_BREAK -> xy
    F:net.minecraft.sounds.SoundEffect WOODEN_BUTTON_CLICK_OFF -> xz
    F:net.minecraft.sounds.SoundEffect ZOMBIE_HORSE_DEATH -> ya
    F:net.minecraft.sounds.SoundEffect ZOMBIE_HORSE_HURT -> yb
    F:net.minecraft.sounds.SoundEffect ZOMBIE_HURT -> yc
    F:net.minecraft.sounds.SoundEffect ZOMBIE_INFECT -> yd
    F:net.minecraft.sounds.SoundEffect ZOMBIFIED_PIGLIN_AMBIENT -> ye
    F:net.minecraft.sounds.SoundEffect ZOMBIFIED_PIGLIN_ANGRY -> yf
    F:net.minecraft.sounds.SoundEffect ZOMBIFIED_PIGLIN_DEATH -> yg
    F:net.minecraft.sounds.SoundEffect ZOMBIFIED_PIGLIN_HURT -> yh
    F:net.minecraft.sounds.SoundEffect ZOMBIE_STEP -> yi
    F:net.minecraft.sounds.SoundEffect ZOMBIE_VILLAGER_AMBIENT -> yj
    F:net.minecraft.sounds.SoundEffect ZOMBIE_VILLAGER_CONVERTED -> yk
    F:net.minecraft.sounds.SoundEffect ZOMBIE_VILLAGER_CURE -> yl
    F:net.minecraft.sounds.SoundEffect ZOMBIE_VILLAGER_DEATH -> ym
    F:net.minecraft.sounds.SoundEffect ZOMBIE_VILLAGER_HURT -> yn
    F:net.minecraft.sounds.SoundEffect ZOMBIE_VILLAGER_STEP -> yo
    M:net.minecraft.sounds.SoundEffect register(java.lang.String,float) -> a
    M:net.minecraft.sounds.SoundEffect register(java.lang.String) -> a
    M:com.google.common.collect.ImmutableList registerGoatHornSoundVariants() -> a
net.minecraft.sounds.SoundSource -> ajf -> net.minecraft.sounds.SoundCategory
    F:net.minecraft.sounds.SoundCategory MASTER -> a
    F:net.minecraft.sounds.SoundCategory MUSIC -> b
    F:net.minecraft.sounds.SoundCategory RECORDS -> c
    F:net.minecraft.sounds.SoundCategory WEATHER -> d
    F:net.minecraft.sounds.SoundCategory BLOCKS -> e
    F:net.minecraft.sounds.SoundCategory HOSTILE -> f
    F:net.minecraft.sounds.SoundCategory NEUTRAL -> g
    F:net.minecraft.sounds.SoundCategory PLAYERS -> h
    F:net.minecraft.sounds.SoundCategory AMBIENT -> i
    F:net.minecraft.sounds.SoundCategory VOICE -> j
    F:java.lang.String name -> k
    M:java.lang.String getName() -> a
net.minecraft.stats.RecipeBook -> ajh -> net.minecraft.stats.RecipeBook
    F:java.util.Set known -> a
    F:java.util.Set highlight -> b
    F:net.minecraft.stats.RecipeBookSettings bookSettings -> c
    M:void copyOverData(net.minecraft.stats.RecipeBook) -> a
    M:void add(net.minecraft.world.item.crafting.IRecipe) -> a
    M:void add(net.minecraft.resources.MinecraftKey) -> a
    M:boolean contains(net.minecraft.world.item.crafting.IRecipe) -> b
    M:boolean contains(net.minecraft.resources.MinecraftKey) -> b
    M:void remove(net.minecraft.world.item.crafting.IRecipe) -> c
    M:void remove(net.minecraft.resources.MinecraftKey) -> c
    M:boolean willHighlight(net.minecraft.world.item.crafting.IRecipe) -> d
    M:void removeHighlight(net.minecraft.world.item.crafting.IRecipe) -> e
    M:void addHighlight(net.minecraft.world.item.crafting.IRecipe) -> f
    M:void addHighlight(net.minecraft.resources.MinecraftKey) -> d
    M:boolean isOpen(net.minecraft.world.inventory.RecipeBookType) -> a
    M:void setOpen(net.minecraft.world.inventory.RecipeBookType,boolean) -> a
    M:boolean isFiltering(net.minecraft.world.inventory.ContainerRecipeBook) -> a
    M:boolean isFiltering(net.minecraft.world.inventory.RecipeBookType) -> b
    M:void setFiltering(net.minecraft.world.inventory.RecipeBookType,boolean) -> b
    M:void setBookSettings(net.minecraft.stats.RecipeBookSettings) -> a
    M:net.minecraft.stats.RecipeBookSettings getBookSettings() -> a
    M:void setBookSetting(net.minecraft.world.inventory.RecipeBookType,boolean,boolean) -> a
net.minecraft.stats.RecipeBookSettings -> aji -> net.minecraft.stats.RecipeBookSettings
    F:java.util.Map TAG_FIELDS -> a
    F:java.util.Map states -> b
    M:boolean isOpen(net.minecraft.world.inventory.RecipeBookType) -> a
    M:void setOpen(net.minecraft.world.inventory.RecipeBookType,boolean) -> a
    M:boolean isFiltering(net.minecraft.world.inventory.RecipeBookType) -> b
    M:void setFiltering(net.minecraft.world.inventory.RecipeBookType,boolean) -> b
    M:net.minecraft.stats.RecipeBookSettings read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.stats.RecipeBookSettings read(net.minecraft.nbt.NBTTagCompound) -> a
    M:void write(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.stats.RecipeBookSettings copy() -> a
    M:void replaceFrom(net.minecraft.stats.RecipeBookSettings) -> a
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.stats.RecipeBookSettings$TypeSettings -> aji$a -> net.minecraft.stats.RecipeBookSettings$a
    F:boolean open -> a
    F:boolean filtering -> b
    M:net.minecraft.stats.RecipeBookSettings$TypeSettings copy() -> a
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.stats.ServerRecipeBook -> ajj -> net.minecraft.stats.RecipeBookServer
    F:java.lang.String RECIPE_BOOK_TAG -> c
    F:org.slf4j.Logger LOGGER -> d
    M:int addRecipes(java.util.Collection,net.minecraft.server.level.EntityPlayer) -> a
    M:int removeRecipes(java.util.Collection,net.minecraft.server.level.EntityPlayer) -> b
    M:void sendRecipes(net.minecraft.network.protocol.game.PacketPlayOutRecipes$Action,net.minecraft.server.level.EntityPlayer,java.util.List) -> a
    M:net.minecraft.nbt.NBTTagCompound toNbt() -> b
    M:void fromNbt(net.minecraft.nbt.NBTTagCompound,net.minecraft.world.item.crafting.CraftingManager) -> a
    M:void loadRecipes(net.minecraft.nbt.NBTTagList,java.util.function.Consumer,net.minecraft.world.item.crafting.CraftingManager) -> a
    M:void sendInitialRecipeBook(net.minecraft.server.level.EntityPlayer) -> a
net.minecraft.stats.ServerStatsCounter -> ajk -> net.minecraft.stats.ServerStatisticManager
    F:org.slf4j.Logger LOGGER -> b
    F:net.minecraft.server.MinecraftServer server -> c
    F:java.io.File file -> d
    F:java.util.Set dirty -> e
    M:void save() -> a
    M:void setValue(net.minecraft.world.entity.player.EntityHuman,net.minecraft.stats.Statistic,int) -> a
    M:java.util.Set getDirty() -> d
    M:void parseLocal(com.mojang.datafixers.DataFixer,java.lang.String) -> a
    M:java.util.Optional getStat(net.minecraft.stats.StatisticWrapper,java.lang.String) -> a
    M:net.minecraft.nbt.NBTTagCompound fromJson(com.google.gson.JsonObject) -> a
    M:java.lang.String toJson() -> b
    M:net.minecraft.resources.MinecraftKey getKey(net.minecraft.stats.Statistic) -> b
    M:void markAllDirty() -> c
    M:void sendStats(net.minecraft.server.level.EntityPlayer) -> a
net.minecraft.stats.Stat -> ajl -> net.minecraft.stats.Statistic
    F:net.minecraft.stats.Counter formatter -> n
    F:java.lang.Object value -> o
    F:net.minecraft.stats.StatisticWrapper type -> p
    M:java.lang.String buildName(net.minecraft.stats.StatisticWrapper,java.lang.Object) -> a
    M:java.lang.String locationToKey(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.stats.StatisticWrapper getType() -> a
    M:java.lang.Object getValue() -> b
    M:java.lang.String format(int) -> a
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.stats.StatFormatter -> ajm -> net.minecraft.stats.Counter
    F:java.text.DecimalFormat DECIMAL_FORMAT -> a
    F:net.minecraft.stats.Counter DEFAULT -> b
    F:net.minecraft.stats.Counter DIVIDE_BY_TEN -> c
    F:net.minecraft.stats.Counter DISTANCE -> d
    F:net.minecraft.stats.Counter TIME -> e
net.minecraft.stats.StatType -> ajn -> net.minecraft.stats.StatisticWrapper
    F:net.minecraft.core.IRegistry registry -> a
    F:java.util.Map map -> b
    F:net.minecraft.network.chat.IChatBaseComponent displayName -> c
    M:boolean contains(java.lang.Object) -> a
    M:net.minecraft.stats.Statistic get(java.lang.Object,net.minecraft.stats.Counter) -> a
    M:net.minecraft.core.IRegistry getRegistry() -> a
    M:java.util.Iterator iterator() -> iterator
    M:net.minecraft.stats.Statistic get(java.lang.Object) -> b
    M:java.lang.String getTranslationKey() -> b
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName() -> c
net.minecraft.stats.Stats -> ajo -> net.minecraft.stats.StatisticList
    F:net.minecraft.stats.StatisticWrapper BLOCK_MINED -> a
    F:net.minecraft.stats.StatisticWrapper ITEM_CRAFTED -> b
    F:net.minecraft.stats.StatisticWrapper ITEM_USED -> c
    F:net.minecraft.stats.StatisticWrapper ITEM_BROKEN -> d
    F:net.minecraft.stats.StatisticWrapper ITEM_PICKED_UP -> e
    F:net.minecraft.stats.StatisticWrapper ITEM_DROPPED -> f
    F:net.minecraft.stats.StatisticWrapper ENTITY_KILLED -> g
    F:net.minecraft.stats.StatisticWrapper ENTITY_KILLED_BY -> h
    F:net.minecraft.stats.StatisticWrapper CUSTOM -> i
    F:net.minecraft.resources.MinecraftKey LEAVE_GAME -> j
    F:net.minecraft.resources.MinecraftKey PLAY_TIME -> k
    F:net.minecraft.resources.MinecraftKey TOTAL_WORLD_TIME -> l
    F:net.minecraft.resources.MinecraftKey TIME_SINCE_DEATH -> m
    F:net.minecraft.resources.MinecraftKey TIME_SINCE_REST -> n
    F:net.minecraft.resources.MinecraftKey CROUCH_TIME -> o
    F:net.minecraft.resources.MinecraftKey WALK_ONE_CM -> p
    F:net.minecraft.resources.MinecraftKey CROUCH_ONE_CM -> q
    F:net.minecraft.resources.MinecraftKey SPRINT_ONE_CM -> r
    F:net.minecraft.resources.MinecraftKey WALK_ON_WATER_ONE_CM -> s
    F:net.minecraft.resources.MinecraftKey FALL_ONE_CM -> t
    F:net.minecraft.resources.MinecraftKey CLIMB_ONE_CM -> u
    F:net.minecraft.resources.MinecraftKey FLY_ONE_CM -> v
    F:net.minecraft.resources.MinecraftKey WALK_UNDER_WATER_ONE_CM -> w
    F:net.minecraft.resources.MinecraftKey MINECART_ONE_CM -> x
    F:net.minecraft.resources.MinecraftKey BOAT_ONE_CM -> y
    F:net.minecraft.resources.MinecraftKey PIG_ONE_CM -> z
    F:net.minecraft.resources.MinecraftKey INTERACT_WITH_BREWINGSTAND -> aa
    F:net.minecraft.resources.MinecraftKey INTERACT_WITH_BEACON -> ab
    F:net.minecraft.resources.MinecraftKey INSPECT_DROPPER -> ac
    F:net.minecraft.resources.MinecraftKey INSPECT_HOPPER -> ad
    F:net.minecraft.resources.MinecraftKey INSPECT_DISPENSER -> ae
    F:net.minecraft.resources.MinecraftKey PLAY_NOTEBLOCK -> af
    F:net.minecraft.resources.MinecraftKey TUNE_NOTEBLOCK -> ag
    F:net.minecraft.resources.MinecraftKey POT_FLOWER -> ah
    F:net.minecraft.resources.MinecraftKey TRIGGER_TRAPPED_CHEST -> ai
    F:net.minecraft.resources.MinecraftKey OPEN_ENDERCHEST -> aj
    F:net.minecraft.resources.MinecraftKey ENCHANT_ITEM -> ak
    F:net.minecraft.resources.MinecraftKey PLAY_RECORD -> al
    F:net.minecraft.resources.MinecraftKey INTERACT_WITH_FURNACE -> am
    F:net.minecraft.resources.MinecraftKey INTERACT_WITH_CRAFTING_TABLE -> an
    F:net.minecraft.resources.MinecraftKey OPEN_CHEST -> ao
    F:net.minecraft.resources.MinecraftKey SLEEP_IN_BED -> ap
    F:net.minecraft.resources.MinecraftKey OPEN_SHULKER_BOX -> aq
    F:net.minecraft.resources.MinecraftKey OPEN_BARREL -> ar
    F:net.minecraft.resources.MinecraftKey INTERACT_WITH_BLAST_FURNACE -> as
    F:net.minecraft.resources.MinecraftKey INTERACT_WITH_SMOKER -> at
    F:net.minecraft.resources.MinecraftKey INTERACT_WITH_LECTERN -> au
    F:net.minecraft.resources.MinecraftKey INTERACT_WITH_CAMPFIRE -> av
    F:net.minecraft.resources.MinecraftKey INTERACT_WITH_CARTOGRAPHY_TABLE -> aw
    F:net.minecraft.resources.MinecraftKey INTERACT_WITH_LOOM -> ax
    F:net.minecraft.resources.MinecraftKey INTERACT_WITH_STONECUTTER -> ay
    F:net.minecraft.resources.MinecraftKey BELL_RING -> az
    M:net.minecraft.resources.MinecraftKey makeCustomStat(java.lang.String,net.minecraft.stats.Counter) -> a
    M:net.minecraft.stats.StatisticWrapper makeRegistryStatType(java.lang.String,net.minecraft.core.IRegistry) -> a
net.minecraft.stats.StatsCounter -> ajp -> net.minecraft.stats.StatisticManager
    F:it.unimi.dsi.fastutil.objects.Object2IntMap stats -> a
    M:void increment(net.minecraft.world.entity.player.EntityHuman,net.minecraft.stats.Statistic,int) -> b
    M:void setValue(net.minecraft.world.entity.player.EntityHuman,net.minecraft.stats.Statistic,int) -> a
    M:int getValue(net.minecraft.stats.StatisticWrapper,java.lang.Object) -> a
    M:int getValue(net.minecraft.stats.Statistic) -> a
net.minecraft.tags.BannerPatternTags -> ajr -> net.minecraft.tags.BannerPatternTags
    F:net.minecraft.tags.TagKey NO_ITEM_REQUIRED -> a
    F:net.minecraft.tags.TagKey PATTERN_ITEM_FLOWER -> b
    F:net.minecraft.tags.TagKey PATTERN_ITEM_CREEPER -> c
    F:net.minecraft.tags.TagKey PATTERN_ITEM_SKULL -> d
    F:net.minecraft.tags.TagKey PATTERN_ITEM_MOJANG -> e
    F:net.minecraft.tags.TagKey PATTERN_ITEM_GLOBE -> f
    F:net.minecraft.tags.TagKey PATTERN_ITEM_PIGLIN -> g
    M:net.minecraft.tags.TagKey create(java.lang.String) -> a
net.minecraft.tags.BiomeTags -> ajs -> net.minecraft.tags.BiomeTags
    F:net.minecraft.tags.TagKey IS_DEEP_OCEAN -> a
    F:net.minecraft.tags.TagKey IS_OCEAN -> b
    F:net.minecraft.tags.TagKey IS_BEACH -> c
    F:net.minecraft.tags.TagKey IS_RIVER -> d
    F:net.minecraft.tags.TagKey IS_MOUNTAIN -> e
    F:net.minecraft.tags.TagKey IS_BADLANDS -> f
    F:net.minecraft.tags.TagKey IS_HILL -> g
    F:net.minecraft.tags.TagKey IS_TAIGA -> h
    F:net.minecraft.tags.TagKey IS_JUNGLE -> i
    F:net.minecraft.tags.TagKey IS_FOREST -> j
    F:net.minecraft.tags.TagKey IS_SAVANNA -> k
    F:net.minecraft.tags.TagKey IS_OVERWORLD -> l
    F:net.minecraft.tags.TagKey IS_NETHER -> m
    F:net.minecraft.tags.TagKey IS_END -> n
    F:net.minecraft.tags.TagKey STRONGHOLD_BIASED_TO -> o
    F:net.minecraft.tags.TagKey HAS_BURIED_TREASURE -> p
    F:net.minecraft.tags.TagKey HAS_DESERT_PYRAMID -> q
    F:net.minecraft.tags.TagKey HAS_IGLOO -> r
    F:net.minecraft.tags.TagKey HAS_JUNGLE_TEMPLE -> s
    F:net.minecraft.tags.TagKey HAS_MINESHAFT -> t
    F:net.minecraft.tags.TagKey HAS_MINESHAFT_MESA -> u
    F:net.minecraft.tags.TagKey HAS_OCEAN_MONUMENT -> v
    F:net.minecraft.tags.TagKey HAS_OCEAN_RUIN_COLD -> w
    F:net.minecraft.tags.TagKey HAS_OCEAN_RUIN_WARM -> x
    F:net.minecraft.tags.TagKey HAS_PILLAGER_OUTPOST -> y
    F:net.minecraft.tags.TagKey HAS_RUINED_PORTAL_DESERT -> z
    F:net.minecraft.tags.TagKey PRODUCES_CORALS_FROM_BONEMEAL -> aa
    F:net.minecraft.tags.TagKey WITHOUT_ZOMBIE_SIEGES -> ab
    F:net.minecraft.tags.TagKey WITHOUT_PATROL_SPAWNS -> ac
    F:net.minecraft.tags.TagKey WITHOUT_WANDERING_TRADER_SPAWNS -> ad
    F:net.minecraft.tags.TagKey SPAWNS_COLD_VARIANT_FROGS -> ae
    F:net.minecraft.tags.TagKey SPAWNS_WARM_VARIANT_FROGS -> af
    F:net.minecraft.tags.TagKey ONLY_ALLOWS_SNOW_AND_GOLD_RABBITS -> ag
    F:net.minecraft.tags.TagKey REDUCED_WATER_AMBIENT_SPAWNS -> ah
    F:net.minecraft.tags.TagKey ALLOWS_TROPICAL_FISH_SPAWNS_AT_ANY_HEIGHT -> ai
    F:net.minecraft.tags.TagKey POLAR_BEARS_SPAWN_ON_ALTERNATE_BLOCKS -> aj
    F:net.minecraft.tags.TagKey MORE_FREQUENT_DROWNED_SPAWNS -> ak
    F:net.minecraft.tags.TagKey ALLOWS_SURFACE_SLIME_SPAWNS -> al
    M:net.minecraft.tags.TagKey create(java.lang.String) -> a
net.minecraft.tags.BlockTags -> ajt -> net.minecraft.tags.TagsBlock
    F:net.minecraft.tags.TagKey WOOL -> a
    F:net.minecraft.tags.TagKey PLANKS -> b
    F:net.minecraft.tags.TagKey STONE_BRICKS -> c
    F:net.minecraft.tags.TagKey WOODEN_BUTTONS -> d
    F:net.minecraft.tags.TagKey BUTTONS -> e
    F:net.minecraft.tags.TagKey WOOL_CARPETS -> f
    F:net.minecraft.tags.TagKey WOODEN_DOORS -> g
    F:net.minecraft.tags.TagKey WOODEN_STAIRS -> h
    F:net.minecraft.tags.TagKey WOODEN_SLABS -> i
    F:net.minecraft.tags.TagKey WOODEN_FENCES -> j
    F:net.minecraft.tags.TagKey PRESSURE_PLATES -> k
    F:net.minecraft.tags.TagKey WOODEN_PRESSURE_PLATES -> l
    F:net.minecraft.tags.TagKey STONE_PRESSURE_PLATES -> m
    F:net.minecraft.tags.TagKey WOODEN_TRAPDOORS -> n
    F:net.minecraft.tags.TagKey DOORS -> o
    F:net.minecraft.tags.TagKey SAPLINGS -> p
    F:net.minecraft.tags.TagKey LOGS_THAT_BURN -> q
    F:net.minecraft.tags.TagKey OVERWORLD_NATURAL_LOGS -> r
    F:net.minecraft.tags.TagKey LOGS -> s
    F:net.minecraft.tags.TagKey DARK_OAK_LOGS -> t
    F:net.minecraft.tags.TagKey OAK_LOGS -> u
    F:net.minecraft.tags.TagKey BIRCH_LOGS -> v
    F:net.minecraft.tags.TagKey ACACIA_LOGS -> w
    F:net.minecraft.tags.TagKey JUNGLE_LOGS -> x
    F:net.minecraft.tags.TagKey SPRUCE_LOGS -> y
    F:net.minecraft.tags.TagKey MANGROVE_LOGS -> z
    F:net.minecraft.tags.TagKey NON_FLAMMABLE_WOOD -> aa
    F:net.minecraft.tags.TagKey CANDLES -> ab
    F:net.minecraft.tags.TagKey DIRT -> ac
    F:net.minecraft.tags.TagKey TERRACOTTA -> ad
    F:net.minecraft.tags.TagKey COMPLETES_FIND_TREE_TUTORIAL -> ae
    F:net.minecraft.tags.TagKey FLOWER_POTS -> af
    F:net.minecraft.tags.TagKey ENDERMAN_HOLDABLE -> ag
    F:net.minecraft.tags.TagKey ICE -> ah
    F:net.minecraft.tags.TagKey VALID_SPAWN -> ai
    F:net.minecraft.tags.TagKey IMPERMEABLE -> aj
    F:net.minecraft.tags.TagKey UNDERWATER_BONEMEALS -> ak
    F:net.minecraft.tags.TagKey CORAL_BLOCKS -> al
    F:net.minecraft.tags.TagKey WALL_CORALS -> am
    F:net.minecraft.tags.TagKey CORAL_PLANTS -> an
    F:net.minecraft.tags.TagKey CORALS -> ao
    F:net.minecraft.tags.TagKey BAMBOO_PLANTABLE_ON -> ap
    F:net.minecraft.tags.TagKey STANDING_SIGNS -> aq
    F:net.minecraft.tags.TagKey WALL_SIGNS -> ar
    F:net.minecraft.tags.TagKey SIGNS -> as
    F:net.minecraft.tags.TagKey DRAGON_IMMUNE -> at
    F:net.minecraft.tags.TagKey DRAGON_TRANSPARENT -> au
    F:net.minecraft.tags.TagKey WITHER_IMMUNE -> av
    F:net.minecraft.tags.TagKey WITHER_SUMMON_BASE_BLOCKS -> aw
    F:net.minecraft.tags.TagKey BEEHIVES -> ax
    F:net.minecraft.tags.TagKey CROPS -> ay
    F:net.minecraft.tags.TagKey BEE_GROWABLES -> az
    F:net.minecraft.tags.TagKey NETHER_CARVER_REPLACEABLES -> ba
    F:net.minecraft.tags.TagKey CANDLE_CAKES -> bb
    F:net.minecraft.tags.TagKey CAULDRONS -> bc
    F:net.minecraft.tags.TagKey CRYSTAL_SOUND_BLOCKS -> bd
    F:net.minecraft.tags.TagKey INSIDE_STEP_SOUND_BLOCKS -> be
    F:net.minecraft.tags.TagKey OCCLUDES_VIBRATION_SIGNALS -> bf
    F:net.minecraft.tags.TagKey DAMPENS_VIBRATIONS -> bg
    F:net.minecraft.tags.TagKey DRIPSTONE_REPLACEABLE -> bh
    F:net.minecraft.tags.TagKey CAVE_VINES -> bi
    F:net.minecraft.tags.TagKey MOSS_REPLACEABLE -> bj
    F:net.minecraft.tags.TagKey LUSH_GROUND_REPLACEABLE -> bk
    F:net.minecraft.tags.TagKey AZALEA_ROOT_REPLACEABLE -> bl
    F:net.minecraft.tags.TagKey SMALL_DRIPLEAF_PLACEABLE -> bm
    F:net.minecraft.tags.TagKey BIG_DRIPLEAF_PLACEABLE -> bn
    F:net.minecraft.tags.TagKey SNOW -> bo
    F:net.minecraft.tags.TagKey MINEABLE_WITH_AXE -> bp
    F:net.minecraft.tags.TagKey MINEABLE_WITH_HOE -> bq
    F:net.minecraft.tags.TagKey MINEABLE_WITH_PICKAXE -> br
    F:net.minecraft.tags.TagKey MINEABLE_WITH_SHOVEL -> bs
    F:net.minecraft.tags.TagKey NEEDS_DIAMOND_TOOL -> bt
    F:net.minecraft.tags.TagKey NEEDS_IRON_TOOL -> bu
    F:net.minecraft.tags.TagKey NEEDS_STONE_TOOL -> bv
    F:net.minecraft.tags.TagKey FEATURES_CANNOT_REPLACE -> bw
    F:net.minecraft.tags.TagKey LAVA_POOL_STONE_CANNOT_REPLACE -> bx
    F:net.minecraft.tags.TagKey GEODE_INVALID_BLOCKS -> by
    F:net.minecraft.tags.TagKey FROG_PREFER_JUMP_TO -> bz
    M:net.minecraft.tags.TagKey create(java.lang.String) -> a
net.minecraft.tags.CatVariantTags -> aju -> net.minecraft.tags.CatVariantTags
    F:net.minecraft.tags.TagKey DEFAULT_SPAWNS -> a
    F:net.minecraft.tags.TagKey FULL_MOON_SPAWNS -> b
    M:net.minecraft.tags.TagKey create(java.lang.String) -> a
net.minecraft.tags.EntityTypeTags -> ajv -> net.minecraft.tags.TagsEntity
    F:net.minecraft.tags.TagKey SKELETONS -> a
    F:net.minecraft.tags.TagKey RAIDERS -> b
    F:net.minecraft.tags.TagKey BEEHIVE_INHABITORS -> c
    F:net.minecraft.tags.TagKey ARROWS -> d
    F:net.minecraft.tags.TagKey IMPACT_PROJECTILES -> e
    F:net.minecraft.tags.TagKey POWDER_SNOW_WALKABLE_MOBS -> f
    F:net.minecraft.tags.TagKey AXOLOTL_ALWAYS_HOSTILES -> g
    F:net.minecraft.tags.TagKey AXOLOTL_HUNT_TARGETS -> h
    F:net.minecraft.tags.TagKey FREEZE_IMMUNE_ENTITY_TYPES -> i
    F:net.minecraft.tags.TagKey FREEZE_HURTS_EXTRA_TYPES -> j
    F:net.minecraft.tags.TagKey FROG_FOOD -> k
    M:net.minecraft.tags.TagKey create(java.lang.String) -> a
net.minecraft.tags.FlatLevelGeneratorPresetTags -> ajw -> net.minecraft.tags.FlatLevelGeneratorPresetTags
    F:net.minecraft.tags.TagKey VISIBLE -> a
    M:net.minecraft.tags.TagKey create(java.lang.String) -> a
net.minecraft.tags.FluidTags -> ajx -> net.minecraft.tags.TagsFluid
    F:net.minecraft.tags.TagKey WATER -> a
    F:net.minecraft.tags.TagKey LAVA -> b
    M:net.minecraft.tags.TagKey create(java.lang.String) -> a
net.minecraft.tags.GameEventTags -> ajy -> net.minecraft.tags.GameEventTags
    F:net.minecraft.tags.TagKey VIBRATIONS -> a
    F:net.minecraft.tags.TagKey WARDEN_CAN_LISTEN -> b
    F:net.minecraft.tags.TagKey SHRIEKER_CAN_LISTEN -> c
    F:net.minecraft.tags.TagKey IGNORE_VIBRATIONS_SNEAKING -> d
    F:net.minecraft.tags.TagKey ALLAY_CAN_LISTEN -> e
    M:net.minecraft.tags.TagKey create(java.lang.String) -> a
net.minecraft.tags.InstrumentTags -> ajz -> net.minecraft.tags.InstrumentTags
    F:net.minecraft.tags.TagKey REGULAR_GOAT_HORNS -> a
    F:net.minecraft.tags.TagKey SCREAMING_GOAT_HORNS -> b
    F:net.minecraft.tags.TagKey GOAT_HORNS -> c
    M:net.minecraft.tags.TagKey create(java.lang.String) -> a
net.minecraft.tags.ItemTags -> aka -> net.minecraft.tags.TagsItem
    F:net.minecraft.tags.TagKey WOOL -> a
    F:net.minecraft.tags.TagKey PLANKS -> b
    F:net.minecraft.tags.TagKey STONE_BRICKS -> c
    F:net.minecraft.tags.TagKey WOODEN_BUTTONS -> d
    F:net.minecraft.tags.TagKey BUTTONS -> e
    F:net.minecraft.tags.TagKey WOOL_CARPETS -> f
    F:net.minecraft.tags.TagKey WOODEN_DOORS -> g
    F:net.minecraft.tags.TagKey WOODEN_STAIRS -> h
    F:net.minecraft.tags.TagKey WOODEN_SLABS -> i
    F:net.minecraft.tags.TagKey WOODEN_FENCES -> j
    F:net.minecraft.tags.TagKey WOODEN_PRESSURE_PLATES -> k
    F:net.minecraft.tags.TagKey WOODEN_TRAPDOORS -> l
    F:net.minecraft.tags.TagKey DOORS -> m
    F:net.minecraft.tags.TagKey SAPLINGS -> n
    F:net.minecraft.tags.TagKey LOGS_THAT_BURN -> o
    F:net.minecraft.tags.TagKey OVERWORLD_NATURAL_LOGS -> p
    F:net.minecraft.tags.TagKey LOGS -> q
    F:net.minecraft.tags.TagKey DARK_OAK_LOGS -> r
    F:net.minecraft.tags.TagKey OAK_LOGS -> s
    F:net.minecraft.tags.TagKey BIRCH_LOGS -> t
    F:net.minecraft.tags.TagKey ACACIA_LOGS -> u
    F:net.minecraft.tags.TagKey JUNGLE_LOGS -> v
    F:net.minecraft.tags.TagKey SPRUCE_LOGS -> w
    F:net.minecraft.tags.TagKey MANGROVE_LOGS -> x
    F:net.minecraft.tags.TagKey CRIMSON_STEMS -> y
    F:net.minecraft.tags.TagKey WARPED_STEMS -> z
    F:net.minecraft.tags.TagKey EMERALD_ORES -> aa
    F:net.minecraft.tags.TagKey COPPER_ORES -> ab
    F:net.minecraft.tags.TagKey NON_FLAMMABLE_WOOD -> ac
    F:net.minecraft.tags.TagKey SOUL_FIRE_BASE_BLOCKS -> ad
    F:net.minecraft.tags.TagKey CANDLES -> ae
    F:net.minecraft.tags.TagKey DIRT -> af
    F:net.minecraft.tags.TagKey TERRACOTTA -> ag
    F:net.minecraft.tags.TagKey COMPLETES_FIND_TREE_TUTORIAL -> ah
    F:net.minecraft.tags.TagKey BOATS -> ai
    F:net.minecraft.tags.TagKey CHEST_BOATS -> aj
    F:net.minecraft.tags.TagKey FISHES -> ak
    F:net.minecraft.tags.TagKey SIGNS -> al
    F:net.minecraft.tags.TagKey MUSIC_DISCS -> am
    F:net.minecraft.tags.TagKey CREEPER_DROP_MUSIC_DISCS -> an
    F:net.minecraft.tags.TagKey COALS -> ao
    F:net.minecraft.tags.TagKey ARROWS -> ap
    F:net.minecraft.tags.TagKey LECTERN_BOOKS -> aq
    F:net.minecraft.tags.TagKey BEACON_PAYMENT_ITEMS -> ar
    F:net.minecraft.tags.TagKey STONE_TOOL_MATERIALS -> as
    F:net.minecraft.tags.TagKey STONE_CRAFTING_MATERIALS -> at
    F:net.minecraft.tags.TagKey FREEZE_IMMUNE_WEARABLES -> au
    F:net.minecraft.tags.TagKey AXOLOTL_TEMPT_ITEMS -> av
    F:net.minecraft.tags.TagKey DAMPENS_VIBRATIONS -> aw
    F:net.minecraft.tags.TagKey CLUSTER_MAX_HARVESTABLES -> ax
    F:net.minecraft.tags.TagKey COMPASSES -> ay
    M:net.minecraft.tags.TagKey bind(java.lang.String) -> a
net.minecraft.tags.PaintingVariantTags -> akb -> net.minecraft.tags.PaintingVariantTags
    F:net.minecraft.tags.TagKey PLACEABLE -> a
    M:net.minecraft.tags.TagKey create(java.lang.String) -> a
net.minecraft.tags.PoiTypeTags -> akc -> net.minecraft.tags.PoiTypeTags
    F:net.minecraft.tags.TagKey ACQUIRABLE_JOB_SITE -> a
    F:net.minecraft.tags.TagKey VILLAGE -> b
    F:net.minecraft.tags.TagKey BEE_HOME -> c
    M:net.minecraft.tags.TagKey create(java.lang.String) -> a
net.minecraft.tags.StructureTags -> akd -> net.minecraft.tags.StructureTags
    F:net.minecraft.tags.TagKey EYE_OF_ENDER_LOCATED -> a
    F:net.minecraft.tags.TagKey DOLPHIN_LOCATED -> b
    F:net.minecraft.tags.TagKey ON_WOODLAND_EXPLORER_MAPS -> c
    F:net.minecraft.tags.TagKey ON_OCEAN_EXPLORER_MAPS -> d
    F:net.minecraft.tags.TagKey ON_TREASURE_MAPS -> e
    F:net.minecraft.tags.TagKey CATS_SPAWN_IN -> f
    F:net.minecraft.tags.TagKey CATS_SPAWN_AS_BLACK -> g
    F:net.minecraft.tags.TagKey VILLAGE -> h
    F:net.minecraft.tags.TagKey MINESHAFT -> i
    F:net.minecraft.tags.TagKey SHIPWRECK -> j
    F:net.minecraft.tags.TagKey RUINED_PORTAL -> k
    F:net.minecraft.tags.TagKey OCEAN_RUIN -> l
    M:net.minecraft.tags.TagKey create(java.lang.String) -> a
net.minecraft.tags.TagBuilder -> ake -> net.minecraft.tags.TagBuilder
    F:java.util.List entries -> a
    M:net.minecraft.tags.TagBuilder create() -> a
    M:java.util.List build() -> b
    M:net.minecraft.tags.TagBuilder add(net.minecraft.tags.TagEntry) -> a
    M:net.minecraft.tags.TagBuilder addElement(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.tags.TagBuilder addOptionalElement(net.minecraft.resources.MinecraftKey) -> b
    M:net.minecraft.tags.TagBuilder addTag(net.minecraft.resources.MinecraftKey) -> c
    M:net.minecraft.tags.TagBuilder addOptionalTag(net.minecraft.resources.MinecraftKey) -> d
net.minecraft.tags.TagEntry -> akf -> net.minecraft.tags.TagEntry
    F:com.mojang.serialization.Codec FULL_CODEC -> b
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.resources.MinecraftKey id -> c
    F:boolean tag -> d
    F:boolean required -> e
    M:net.minecraft.util.ExtraCodecs$TagOrElementLocation elementOrTag() -> a
    M:net.minecraft.tags.TagEntry element(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.tags.TagEntry optionalElement(net.minecraft.resources.MinecraftKey) -> b
    M:net.minecraft.tags.TagEntry tag(net.minecraft.resources.MinecraftKey) -> c
    M:net.minecraft.tags.TagEntry optionalTag(net.minecraft.resources.MinecraftKey) -> d
    M:boolean build(net.minecraft.tags.TagEntry$Lookup,java.util.function.Consumer) -> a
    M:void visitRequiredDependencies(java.util.function.Consumer) -> a
    M:void visitOptionalDependencies(java.util.function.Consumer) -> b
    M:boolean verifyIfPresent(java.util.function.Predicate,java.util.function.Predicate) -> a
net.minecraft.tags.TagEntry$Lookup -> akf$a -> net.minecraft.tags.TagEntry$a
net.minecraft.tags.TagFile -> akg -> net.minecraft.tags.TagFile
    F:java.util.List entries -> b
    F:boolean replace -> c
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.List entries() -> a
    M:boolean replace() -> b
net.minecraft.tags.TagKey -> akh -> net.minecraft.tags.TagKey
    F:net.minecraft.resources.ResourceKey registry -> a
    F:net.minecraft.resources.MinecraftKey location -> b
    F:com.google.common.collect.Interner VALUES -> c
    M:com.mojang.serialization.Codec codec(net.minecraft.resources.ResourceKey) -> a
    M:com.mojang.serialization.Codec hashedCodec(net.minecraft.resources.ResourceKey) -> b
    M:net.minecraft.tags.TagKey create(net.minecraft.resources.ResourceKey,net.minecraft.resources.MinecraftKey) -> a
    M:boolean isFor(net.minecraft.resources.ResourceKey) -> c
    M:java.util.Optional cast(net.minecraft.resources.ResourceKey) -> d
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.resources.ResourceKey registry() -> a
    M:net.minecraft.resources.MinecraftKey location() -> b
net.minecraft.tags.TagLoader -> aki -> net.minecraft.tags.TagDataPack
    F:org.slf4j.Logger LOGGER -> a
    F:java.lang.String PATH_SUFFIX -> b
    F:int PATH_SUFFIX_LENGTH -> c
    F:java.util.function.Function idToValue -> d
    F:java.lang.String directory -> e
    M:java.util.Map load(net.minecraft.server.packs.resources.IResourceManager) -> a
    M:void visitDependenciesAndElement(java.util.Map,com.google.common.collect.Multimap,java.util.Set,net.minecraft.resources.MinecraftKey,java.util.function.BiConsumer) -> a
    M:boolean isCyclic(com.google.common.collect.Multimap,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> a
    M:void addDependencyIfNotCyclic(com.google.common.collect.Multimap,net.minecraft.resources.MinecraftKey,net.minecraft.resources.MinecraftKey) -> b
    M:com.mojang.datafixers.util.Either build(net.minecraft.tags.TagEntry$Lookup,java.util.List) -> a
    M:java.util.Map build(java.util.Map) -> a
    M:java.util.Map loadAndBuild(net.minecraft.server.packs.resources.IResourceManager) -> b
    M:java.lang.Object element(net.minecraft.resources.MinecraftKey) -> a
    M:java.util.Collection tag(net.minecraft.resources.MinecraftKey) -> b
net.minecraft.tags.TagLoader$EntryWithSource -> aki$a -> net.minecraft.tags.TagDataPack$a
    F:net.minecraft.tags.TagEntry entry -> a
    F:java.lang.String source -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.tags.TagEntry entry() -> a
    M:java.lang.String source() -> b
net.minecraft.tags.TagManager -> akj -> net.minecraft.tags.TagRegistry
    F:java.util.Map CUSTOM_REGISTRY_DIRECTORIES -> a
    F:net.minecraft.core.IRegistryCustom registryAccess -> b
    F:java.util.List results -> c
    M:java.util.List getResult() -> a
    M:java.lang.String getTagDir(net.minecraft.resources.ResourceKey) -> a
    M:java.util.concurrent.CompletableFuture reload(net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier,net.minecraft.server.packs.resources.IResourceManager,net.minecraft.util.profiling.GameProfilerFiller,net.minecraft.util.profiling.GameProfilerFiller,java.util.concurrent.Executor,java.util.concurrent.Executor) -> a
    M:java.util.concurrent.CompletableFuture createLoader(net.minecraft.server.packs.resources.IResourceManager,java.util.concurrent.Executor,net.minecraft.core.RegistryAccess$RegistryEntry) -> a
net.minecraft.tags.TagManager$LoadResult -> akj$a -> net.minecraft.tags.TagRegistry$a
    F:net.minecraft.resources.ResourceKey key -> a
    F:java.util.Map tags -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.resources.ResourceKey key() -> a
    M:java.util.Map tags() -> b
net.minecraft.tags.TagNetworkSerialization -> akk -> net.minecraft.tags.TagNetworkSerialization
    M:java.util.Map serializeTagsToNetwork(net.minecraft.core.IRegistryCustom) -> a
    M:net.minecraft.tags.TagNetworkSerialization$NetworkPayload serializeToNetwork(net.minecraft.core.IRegistry) -> a
    M:void deserializeTagsFromNetwork(net.minecraft.resources.ResourceKey,net.minecraft.core.IRegistry,net.minecraft.tags.TagNetworkSerialization$NetworkPayload,net.minecraft.tags.TagNetworkSerialization$TagOutput) -> a
net.minecraft.tags.TagNetworkSerialization$NetworkPayload -> akk$a -> net.minecraft.tags.TagNetworkSerialization$a
    F:java.util.Map tags -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.tags.TagNetworkSerialization$NetworkPayload read(net.minecraft.network.PacketDataSerializer) -> b
    M:boolean isEmpty() -> a
net.minecraft.tags.TagNetworkSerialization$TagOutput -> akk$b -> net.minecraft.tags.TagNetworkSerialization$b
net.minecraft.tags.WorldPresetTags -> akl -> net.minecraft.tags.WorldPresetTags
    F:net.minecraft.tags.TagKey NORMAL -> a
    F:net.minecraft.tags.TagKey EXTENDED -> b
    M:net.minecraft.tags.TagKey create(java.lang.String) -> a
net.minecraft.util.BitStorage -> akn -> net.minecraft.util.DataBits
net.minecraft.util.ClassInstanceMultiMap -> ako -> net.minecraft.util.EntitySlice
    F:java.util.Map byClass -> a
    F:java.lang.Class baseClass -> b
    F:java.util.List allInstances -> c
    M:boolean add(java.lang.Object) -> add
    M:boolean remove(java.lang.Object) -> remove
    M:boolean contains(java.lang.Object) -> contains
    M:java.util.Collection find(java.lang.Class) -> a
    M:java.util.Iterator iterator() -> iterator
    M:java.util.List getAllInstances() -> a
    M:int size() -> size
net.minecraft.util.CrudeIncrementalIntIdentityHashBiMap -> akp -> net.minecraft.util.RegistryID
    F:int NOT_FOUND -> b
    F:java.lang.Object EMPTY_SLOT -> c
    F:float LOADFACTOR -> d
    F:int nextId -> h
    F:int size -> i
    M:net.minecraft.util.RegistryID create(int) -> c
    M:int getId(java.lang.Object) -> a
    M:java.lang.Object byId(int) -> a
    M:int getValue(int) -> e
    M:boolean contains(java.lang.Object) -> b
    M:boolean contains(int) -> d
    M:int add(java.lang.Object) -> c
    M:int nextId() -> d
    M:void grow(int) -> f
    M:void addMapping(java.lang.Object,int) -> a
    M:int hash(java.lang.Object) -> d
    M:int indexOf(java.lang.Object,int) -> b
    M:int findEmpty(int) -> g
    M:java.util.Iterator iterator() -> iterator
    M:void clear() -> a
    M:int size() -> b
    M:net.minecraft.util.RegistryID copy() -> c
net.minecraft.util.Crypt -> akq -> net.minecraft.util.MinecraftEncryption
    F:java.lang.String SYMMETRIC_ALGORITHM -> g
    F:int SYMMETRIC_BITS -> h
    F:java.lang.String ASYMMETRIC_ALGORITHM -> i
    F:int ASYMMETRIC_BITS -> j
    F:java.lang.String BYTE_ENCODING -> k
    F:java.lang.String HASH_ALGORITHM -> l
    F:java.lang.String SIGNING_ALGORITHM -> a
    F:java.lang.String PEM_RSA_PRIVATE_KEY_HEADER -> m
    F:java.lang.String PEM_RSA_PRIVATE_KEY_FOOTER -> n
    F:java.lang.String RSA_PUBLIC_KEY_HEADER -> b
    F:java.lang.String RSA_PUBLIC_KEY_FOOTER -> o
    F:java.lang.String MIME_LINE_SEPARATOR -> c
    F:java.util.Base64$Encoder MIME_ENCODER -> d
    F:com.mojang.serialization.Codec PUBLIC_KEY_CODEC -> e
    F:com.mojang.serialization.Codec PRIVATE_KEY_CODEC -> f
    M:javax.crypto.SecretKey generateSecretKey() -> a
    M:java.security.KeyPair generateKeyPair() -> b
    M:java.security.Key rsaStringToKey(java.lang.String,java.lang.String,java.lang.String,net.minecraft.util.Crypt$ByteArrayToKeyFunction) -> a
    M:java.security.PrivateKey stringToPemRsaPrivateKey(java.lang.String) -> a
    M:java.security.PublicKey stringToRsaPublicKey(java.lang.String) -> b
    M:java.lang.String rsaPublicKeyToString(java.security.PublicKey) -> a
    M:java.lang.String pemRsaPrivateKeyToString(java.security.PrivateKey) -> a
    M:java.security.PrivateKey byteToPrivateKey(byte[]) -> b
    M:java.security.PublicKey byteToPublicKey(byte[]) -> a
    M:javax.crypto.SecretKey decryptByteToSecretKey(java.security.PrivateKey,byte[]) -> a
    M:javax.crypto.Cipher setupCipher(int,java.lang.String,java.security.Key) -> a
    M:javax.crypto.Cipher getCipher(int,java.security.Key) -> a
net.minecraft.util.Crypt$ByteArrayToKeyFunction -> akq$a -> net.minecraft.util.MinecraftEncryption$a
net.minecraft.util.Crypt$SaltSignaturePair -> akq$b -> net.minecraft.util.MinecraftEncryption$b
    F:long salt -> b
    F:net.minecraft.util.Crypt$SaltSignaturePair EMPTY -> a
    M:boolean isValid() -> a
    M:void write(net.minecraft.network.PacketDataSerializer,net.minecraft.util.Crypt$SaltSignaturePair) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:long salt() -> c
net.minecraft.util.Crypt$SaltSupplier -> akq$c -> net.minecraft.util.MinecraftEncryption$c
    F:java.security.SecureRandom secureRandom -> a
    M:long getLong() -> a
net.minecraft.util.CryptException -> akr -> net.minecraft.util.CryptographyException
net.minecraft.util.CsvOutput -> aks -> net.minecraft.util.CSVWriter
    F:java.lang.String LINE_SEPARATOR -> a
    F:java.lang.String FIELD_SEPARATOR -> b
    F:java.io.Writer output -> c
    F:int columnCount -> d
    M:net.minecraft.util.CsvOutput$Builder builder() -> a
    M:void writeRow(java.lang.Object[]) -> a
    M:void writeLine(java.util.stream.Stream) -> a
    M:java.lang.String getStringValue(java.lang.Object) -> a
net.minecraft.util.CsvOutput$Builder -> aks$a -> net.minecraft.util.CSVWriter$a
    F:java.util.List headers -> a
    M:net.minecraft.util.CsvOutput$Builder addColumn(java.lang.String) -> a
    M:net.minecraft.util.CSVWriter build(java.io.Writer) -> a
net.minecraft.util.CubicSampler -> akt -> net.minecraft.util.CubicSampler
    F:int GAUSSIAN_SAMPLE_RADIUS -> a
    F:int GAUSSIAN_SAMPLE_BREADTH -> b
    M:net.minecraft.world.phys.Vec3D gaussianSampleVec3(net.minecraft.world.phys.Vec3D,net.minecraft.util.CubicSampler$Vec3Fetcher) -> a
net.minecraft.util.CubicSampler$Vec3Fetcher -> akt$a -> net.minecraft.util.CubicSampler$a
net.minecraft.util.CubicSpline -> aku -> net.minecraft.util.CubicSpline
    M:com.mojang.serialization.Codec codec(com.mojang.serialization.Codec) -> a
    M:net.minecraft.util.CubicSpline constant(float) -> a
    M:net.minecraft.util.CubicSpline$Builder builder(net.minecraft.util.ToFloatFunction) -> a
    M:net.minecraft.util.CubicSpline$Builder builder(net.minecraft.util.ToFloatFunction,net.minecraft.util.ToFloatFunction) -> a
net.minecraft.util.CubicSpline$1Point -> aku$a -> net.minecraft.util.CubicSpline$a
    F:float location -> a
    F:net.minecraft.util.CubicSpline value -> b
    F:float derivative -> c
    M:boolean equals(java.lang.Object) -> equals
    M:float location() -> a
    M:net.minecraft.util.CubicSpline value() -> b
    M:float derivative() -> c
net.minecraft.util.CubicSpline$Builder -> aku$b -> net.minecraft.util.CubicSpline$b
    F:net.minecraft.util.ToFloatFunction coordinate -> a
    F:net.minecraft.util.ToFloatFunction valueTransformer -> b
    F:it.unimi.dsi.fastutil.floats.FloatList locations -> c
    F:java.util.List values -> d
    F:it.unimi.dsi.fastutil.floats.FloatList derivatives -> e
    M:net.minecraft.util.CubicSpline$Builder addPoint(float,float) -> a
    M:net.minecraft.util.CubicSpline$Builder addPoint(float,float,float) -> a
    M:net.minecraft.util.CubicSpline$Builder addPoint(float,net.minecraft.util.CubicSpline) -> a
    M:net.minecraft.util.CubicSpline$Builder addPoint(float,net.minecraft.util.CubicSpline,float) -> a
    M:net.minecraft.util.CubicSpline build() -> a
net.minecraft.util.CubicSpline$Constant -> aku$c -> net.minecraft.util.CubicSpline$c
    F:float value -> b
    M:float apply(java.lang.Object) -> a
    M:java.lang.String parityString() -> a
    M:float minValue() -> b
    M:float maxValue() -> c
    M:net.minecraft.util.CubicSpline mapAll(net.minecraft.util.CubicSpline$CoordinateVisitor) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:float value() -> d
net.minecraft.util.CubicSpline$CoordinateVisitor -> aku$d -> net.minecraft.util.CubicSpline$d
net.minecraft.util.CubicSpline$Multipoint -> aku$e -> net.minecraft.util.CubicSpline$e
    F:net.minecraft.util.ToFloatFunction coordinate -> b
    F:java.util.List values -> d
    F:float minValue -> f
    F:float maxValue -> g
    M:net.minecraft.util.CubicSpline$Multipoint create(net.minecraft.util.ToFloatFunction,float[],java.util.List,float[]) -> a
    M:float linearExtend(float,float[],float,float[],int) -> a
    M:void validateSizes(float[],java.util.List,float[]) -> a
    M:float apply(java.lang.Object) -> a
    M:int findIntervalStart(float[],float) -> a
    M:java.lang.String parityString() -> a
    M:java.lang.String toString(float[]) -> a
    M:net.minecraft.util.CubicSpline mapAll(net.minecraft.util.CubicSpline$CoordinateVisitor) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.util.ToFloatFunction coordinate() -> d
    M:java.util.List values() -> f
    M:float minValue() -> b
    M:float maxValue() -> c
net.minecraft.util.DebugBuffer -> akv -> net.minecraft.util.DebugBuffer
    F:java.util.concurrent.atomic.AtomicReferenceArray data -> a
    F:java.util.concurrent.atomic.AtomicInteger index -> b
    M:void push(java.lang.Object) -> a
    M:java.util.List dump() -> a
net.minecraft.util.DirectoryLock -> akw -> net.minecraft.util.SessionLock
    F:java.lang.String LOCK_FILE -> a
    F:java.nio.channels.FileChannel lockFile -> b
    F:java.nio.channels.FileLock lock -> c
    F:java.nio.ByteBuffer DUMMY -> d
    M:net.minecraft.util.SessionLock create(java.nio.file.Path) -> a
    M:void close() -> close
    M:boolean isValid() -> a
    M:boolean isLocked(java.nio.file.Path) -> b
net.minecraft.util.DirectoryLock$LockException -> akw$a -> net.minecraft.util.SessionLock$ExceptionWorldConflict
    M:net.minecraft.util.SessionLock$ExceptionWorldConflict alreadyLocked(java.nio.file.Path) -> a
net.minecraft.util.ExceptionCollector -> akx -> net.minecraft.util.ExceptionSuppressor
    F:java.lang.Throwable result -> a
    M:void add(java.lang.Throwable) -> a
    M:void throwIfPresent() -> a
net.minecraft.util.ExtraCodecs -> aky -> net.minecraft.util.ExtraCodecs
    F:com.mojang.serialization.Codec UUID -> a
    F:com.mojang.serialization.Codec NON_NEGATIVE_INT -> b
    F:com.mojang.serialization.Codec POSITIVE_INT -> c
    F:com.mojang.serialization.Codec POSITIVE_FLOAT -> d
    F:com.mojang.serialization.Codec PATTERN -> e
    F:com.mojang.serialization.Codec INSTANT_ISO8601 -> f
    F:com.mojang.serialization.Codec BASE64_STRING -> g
    F:com.mojang.serialization.Codec TAG_OR_ELEMENT_ID -> h
    F:java.util.function.Function toOptionalLong -> i
    F:java.util.function.Function fromOptionalLong -> j
    M:com.mojang.serialization.Codec xor(com.mojang.serialization.Codec,com.mojang.serialization.Codec) -> a
    M:com.mojang.serialization.Codec intervalCodec(com.mojang.serialization.Codec,java.lang.String,java.lang.String,java.util.function.BiFunction,java.util.function.Function,java.util.function.Function) -> a
    M:com.mojang.serialization.Codec$ResultFunction orElsePartial(java.lang.Object) -> a
    M:com.mojang.serialization.Codec idResolverCodec(java.util.function.ToIntFunction,java.util.function.IntFunction,int) -> a
    M:com.mojang.serialization.Codec stringResolverCodec(java.util.function.Function,java.util.function.Function) -> a
    M:com.mojang.serialization.Codec orCompressed(com.mojang.serialization.Codec,com.mojang.serialization.Codec) -> b
    M:com.mojang.serialization.Codec overrideLifecycle(com.mojang.serialization.Codec,java.util.function.Function,java.util.function.Function) -> a
    M:java.util.function.Function checkRangeWithMessage(java.lang.Number,java.lang.Number,java.util.function.Function) -> a
    M:com.mojang.serialization.Codec intRangeWithMessage(int,int,java.util.function.Function) -> a
    M:java.util.function.Function checkRangeMinExclusiveWithMessage(java.lang.Number,java.lang.Number,java.util.function.Function) -> b
    M:com.mojang.serialization.Codec floatRangeMinExclusiveWithMessage(float,float,java.util.function.Function) -> a
    M:java.util.function.Function nonEmptyListCheck() -> a
    M:com.mojang.serialization.Codec nonEmptyList(com.mojang.serialization.Codec) -> a
    M:java.util.function.Function nonEmptyHolderSetCheck() -> b
    M:com.mojang.serialization.Codec nonEmptyHolderSet(com.mojang.serialization.Codec) -> b
    M:com.mojang.serialization.Codec lazyInitializedCodec(java.util.function.Supplier) -> a
    M:com.mojang.serialization.MapCodec retrieveContext(java.util.function.Function) -> a
    M:java.util.function.Function ensureHomogenous(java.util.function.Function) -> b
    M:com.mojang.serialization.Codec catchDecoderException(com.mojang.serialization.Codec) -> c
    M:com.mojang.serialization.Codec instantCodec(java.time.format.DateTimeFormatter) -> a
    M:com.mojang.serialization.MapCodec asOptionalLong(com.mojang.serialization.MapCodec) -> a
    M:com.mojang.serialization.DataResult apply(com.mojang.serialization.DynamicOps,java.lang.Object,com.mojang.serialization.DataResult) -> apply
net.minecraft.util.ExtraCodecs$1ContextRetrievalCodec -> aky$a -> net.minecraft.util.ExtraCodecs$a
    M:com.mojang.serialization.RecordBuilder encode(java.lang.Object,com.mojang.serialization.DynamicOps,com.mojang.serialization.RecordBuilder) -> encode
    M:com.mojang.serialization.DataResult decode(com.mojang.serialization.DynamicOps,com.mojang.serialization.MapLike) -> decode
    M:java.util.stream.Stream keys(com.mojang.serialization.DynamicOps) -> keys
    M:com.mojang.serialization.DataResult encode(java.lang.Object,com.mojang.serialization.DynamicOps,java.lang.Object) -> encode
    M:com.mojang.serialization.DataResult decode(com.mojang.serialization.DynamicOps,java.lang.Object) -> decode
    M:com.mojang.serialization.DataResult apply(com.mojang.serialization.DynamicOps,java.lang.Object,com.mojang.serialization.DataResult) -> apply
    M:com.mojang.serialization.DataResult decode(com.mojang.serialization.DynamicOps,java.lang.Object) -> decode
net.minecraft.util.ExtraCodecs$EitherCodec -> aky$b -> net.minecraft.util.ExtraCodecs$b
    F:com.mojang.serialization.Codec first -> a
    F:com.mojang.serialization.Codec second -> b
    M:com.mojang.serialization.DataResult decode(com.mojang.serialization.DynamicOps,java.lang.Object) -> decode
    M:com.mojang.serialization.DataResult encode(com.mojang.datafixers.util.Either,com.mojang.serialization.DynamicOps,java.lang.Object) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:com.mojang.serialization.DataResult encode(java.lang.Object,com.mojang.serialization.DynamicOps,java.lang.Object) -> encode
net.minecraft.util.ExtraCodecs$LazyInitializedCodec -> aky$c -> net.minecraft.util.ExtraCodecs$c
    F:java.util.function.Supplier delegate -> a
    M:com.mojang.serialization.DataResult decode(com.mojang.serialization.DynamicOps,java.lang.Object) -> decode
    M:com.mojang.serialization.DataResult encode(java.lang.Object,com.mojang.serialization.DynamicOps,java.lang.Object) -> encode
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.function.Supplier delegate() -> a
net.minecraft.util.ExtraCodecs$TagOrElementLocation -> aky$d -> net.minecraft.util.ExtraCodecs$d
    F:net.minecraft.resources.MinecraftKey id -> a
    F:boolean tag -> b
    M:java.lang.String decoratedId() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.resources.MinecraftKey id() -> a
    M:boolean tag() -> b
net.minecraft.util.ExtraCodecs$XorCodec -> aky$e -> net.minecraft.util.ExtraCodecs$e
    F:com.mojang.serialization.Codec first -> a
    F:com.mojang.serialization.Codec second -> b
    M:com.mojang.serialization.DataResult decode(com.mojang.serialization.DynamicOps,java.lang.Object) -> decode
    M:com.mojang.serialization.DataResult encode(com.mojang.datafixers.util.Either,com.mojang.serialization.DynamicOps,java.lang.Object) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:com.mojang.serialization.DataResult encode(java.lang.Object,com.mojang.serialization.DynamicOps,java.lang.Object) -> encode
net.minecraft.util.FastBufferedInputStream -> akz -> net.minecraft.util.FastBufferedInputStream
    F:int DEFAULT_BUFFER_SIZE -> a
    F:java.io.InputStream in -> b
    F:int limit -> d
    F:int position -> e
    M:int read() -> read
    M:int read(byte[],int,int) -> read
    M:long skip(long) -> skip
    M:int available() -> available
    M:void close() -> close
    M:int bytesInBuffer() -> a
    M:void fill() -> b
net.minecraft.util.FastColor -> ala -> net.minecraft.util.ColorUtil
net.minecraft.util.FastColor$ARGB32 -> ala$a -> net.minecraft.util.ColorUtil$a
    M:int alpha(int) -> a
    M:int red(int) -> b
    M:int green(int) -> c
    M:int blue(int) -> d
    M:int color(int,int,int,int) -> a
    M:int multiply(int,int) -> a
net.minecraft.util.FileZipper -> alb -> net.minecraft.util.FileZipper
    F:org.slf4j.Logger LOGGER -> a
    F:java.nio.file.Path outputFile -> b
    F:java.nio.file.Path tempFile -> c
    F:java.nio.file.FileSystem fs -> d
    M:void add(java.nio.file.Path,java.lang.String) -> a
    M:void add(java.nio.file.Path,java.io.File) -> a
    M:void add(java.nio.file.Path) -> a
    M:void close() -> close
net.minecraft.util.FormattedCharSequence -> alc -> net.minecraft.util.FormattedString
    F:net.minecraft.util.FormattedString EMPTY -> a
    M:net.minecraft.util.FormattedString codepoint(int,net.minecraft.network.chat.ChatModifier) -> codepoint
    M:net.minecraft.util.FormattedString forward(java.lang.String,net.minecraft.network.chat.ChatModifier) -> forward
    M:net.minecraft.util.FormattedString forward(java.lang.String,net.minecraft.network.chat.ChatModifier,it.unimi.dsi.fastutil.ints.Int2IntFunction) -> forward
    M:net.minecraft.util.FormattedString backward(java.lang.String,net.minecraft.network.chat.ChatModifier) -> backward
    M:net.minecraft.util.FormattedString backward(java.lang.String,net.minecraft.network.chat.ChatModifier,it.unimi.dsi.fastutil.ints.Int2IntFunction) -> backward
    M:net.minecraft.util.FormattedString composite() -> composite
    M:net.minecraft.util.FormattedString composite(net.minecraft.util.FormattedString) -> composite
    M:net.minecraft.util.FormattedString composite(net.minecraft.util.FormattedString,net.minecraft.util.FormattedString) -> composite
    M:net.minecraft.util.FormattedString composite(net.minecraft.util.FormattedCharSequence[]) -> composite
    M:net.minecraft.util.FormattedString composite(java.util.List) -> composite
net.minecraft.util.FormattedCharSink -> ald -> net.minecraft.util.FormattedStringEmpty
net.minecraft.util.FrameTimer -> ale -> net.minecraft.util.CircularTimer
    F:int LOGGING_LENGTH -> a
    F:int logStart -> c
    F:int logLength -> d
    F:int logEnd -> e
    M:void logFrameDuration(long) -> a
    M:long getAverageDuration(int) -> a
    M:int scaleAverageDurationTo(int,int) -> a
    M:int scaleSampleTo(long,int,int) -> a
    M:int getLogStart() -> a
    M:int getLogEnd() -> b
    M:int wrapIndex(int) -> b
net.minecraft.util.Graph -> alf -> net.minecraft.util.Graph
    M:boolean depthFirstSearch(java.util.Map,java.util.Set,java.util.Set,java.util.function.Consumer,java.lang.Object) -> a
net.minecraft.util.GsonHelper -> alg -> net.minecraft.util.ChatDeserializer
    F:com.google.gson.Gson GSON -> a
    M:boolean isStringValue(com.google.gson.JsonObject,java.lang.String) -> a
    M:boolean isStringValue(com.google.gson.JsonElement) -> a
    M:boolean isNumberValue(com.google.gson.JsonObject,java.lang.String) -> b
    M:boolean isNumberValue(com.google.gson.JsonElement) -> b
    M:boolean isBooleanValue(com.google.gson.JsonObject,java.lang.String) -> c
    M:boolean isBooleanValue(com.google.gson.JsonElement) -> c
    M:boolean isArrayNode(com.google.gson.JsonObject,java.lang.String) -> d
    M:boolean isObjectNode(com.google.gson.JsonObject,java.lang.String) -> e
    M:boolean isValidPrimitive(com.google.gson.JsonObject,java.lang.String) -> f
    M:boolean isValidNode(com.google.gson.JsonObject,java.lang.String) -> g
    M:java.lang.String convertToString(com.google.gson.JsonElement,java.lang.String) -> a
    M:java.lang.String getAsString(com.google.gson.JsonObject,java.lang.String) -> h
    M:java.lang.String getAsString(com.google.gson.JsonObject,java.lang.String,java.lang.String) -> a
    M:net.minecraft.world.item.Item convertToItem(com.google.gson.JsonElement,java.lang.String) -> b
    M:net.minecraft.world.item.Item getAsItem(com.google.gson.JsonObject,java.lang.String) -> i
    M:net.minecraft.world.item.Item getAsItem(com.google.gson.JsonObject,java.lang.String,net.minecraft.world.item.Item) -> a
    M:boolean convertToBoolean(com.google.gson.JsonElement,java.lang.String) -> c
    M:boolean getAsBoolean(com.google.gson.JsonObject,java.lang.String) -> j
    M:boolean getAsBoolean(com.google.gson.JsonObject,java.lang.String,boolean) -> a
    M:double convertToDouble(com.google.gson.JsonElement,java.lang.String) -> d
    M:double getAsDouble(com.google.gson.JsonObject,java.lang.String) -> k
    M:double getAsDouble(com.google.gson.JsonObject,java.lang.String,double) -> a
    M:float convertToFloat(com.google.gson.JsonElement,java.lang.String) -> e
    M:float getAsFloat(com.google.gson.JsonObject,java.lang.String) -> l
    M:float getAsFloat(com.google.gson.JsonObject,java.lang.String,float) -> a
    M:long convertToLong(com.google.gson.JsonElement,java.lang.String) -> f
    M:long getAsLong(com.google.gson.JsonObject,java.lang.String) -> m
    M:long getAsLong(com.google.gson.JsonObject,java.lang.String,long) -> a
    M:int convertToInt(com.google.gson.JsonElement,java.lang.String) -> g
    M:int getAsInt(com.google.gson.JsonObject,java.lang.String) -> n
    M:int getAsInt(com.google.gson.JsonObject,java.lang.String,int) -> a
    M:byte convertToByte(com.google.gson.JsonElement,java.lang.String) -> h
    M:byte getAsByte(com.google.gson.JsonObject,java.lang.String) -> o
    M:byte getAsByte(com.google.gson.JsonObject,java.lang.String,byte) -> a
    M:char convertToCharacter(com.google.gson.JsonElement,java.lang.String) -> i
    M:char getAsCharacter(com.google.gson.JsonObject,java.lang.String) -> p
    M:char getAsCharacter(com.google.gson.JsonObject,java.lang.String,char) -> a
    M:java.math.BigDecimal convertToBigDecimal(com.google.gson.JsonElement,java.lang.String) -> j
    M:java.math.BigDecimal getAsBigDecimal(com.google.gson.JsonObject,java.lang.String) -> q
    M:java.math.BigDecimal getAsBigDecimal(com.google.gson.JsonObject,java.lang.String,java.math.BigDecimal) -> a
    M:java.math.BigInteger convertToBigInteger(com.google.gson.JsonElement,java.lang.String) -> k
    M:java.math.BigInteger getAsBigInteger(com.google.gson.JsonObject,java.lang.String) -> r
    M:java.math.BigInteger getAsBigInteger(com.google.gson.JsonObject,java.lang.String,java.math.BigInteger) -> a
    M:short convertToShort(com.google.gson.JsonElement,java.lang.String) -> l
    M:short getAsShort(com.google.gson.JsonObject,java.lang.String) -> s
    M:short getAsShort(com.google.gson.JsonObject,java.lang.String,short) -> a
    M:com.google.gson.JsonObject convertToJsonObject(com.google.gson.JsonElement,java.lang.String) -> m
    M:com.google.gson.JsonObject getAsJsonObject(com.google.gson.JsonObject,java.lang.String) -> t
    M:com.google.gson.JsonObject getAsJsonObject(com.google.gson.JsonObject,java.lang.String,com.google.gson.JsonObject) -> a
    M:com.google.gson.JsonArray convertToJsonArray(com.google.gson.JsonElement,java.lang.String) -> n
    M:com.google.gson.JsonArray getAsJsonArray(com.google.gson.JsonObject,java.lang.String) -> u
    M:com.google.gson.JsonArray getAsJsonArray(com.google.gson.JsonObject,java.lang.String,com.google.gson.JsonArray) -> a
    M:java.lang.Object convertToObject(com.google.gson.JsonElement,java.lang.String,com.google.gson.JsonDeserializationContext,java.lang.Class) -> a
    M:java.lang.Object getAsObject(com.google.gson.JsonObject,java.lang.String,com.google.gson.JsonDeserializationContext,java.lang.Class) -> a
    M:java.lang.Object getAsObject(com.google.gson.JsonObject,java.lang.String,java.lang.Object,com.google.gson.JsonDeserializationContext,java.lang.Class) -> a
    M:java.lang.String getType(com.google.gson.JsonElement) -> d
    M:java.lang.Object fromJson(com.google.gson.Gson,java.io.Reader,java.lang.Class,boolean) -> a
    M:java.lang.Object fromJson(com.google.gson.Gson,java.io.Reader,com.google.gson.reflect.TypeToken,boolean) -> a
    M:java.lang.Object fromJson(com.google.gson.Gson,java.lang.String,com.google.gson.reflect.TypeToken,boolean) -> a
    M:java.lang.Object fromJson(com.google.gson.Gson,java.lang.String,java.lang.Class,boolean) -> a
    M:java.lang.Object fromJson(com.google.gson.Gson,java.io.Reader,com.google.gson.reflect.TypeToken) -> a
    M:java.lang.Object fromJson(com.google.gson.Gson,java.lang.String,com.google.gson.reflect.TypeToken) -> a
    M:java.lang.Object fromJson(com.google.gson.Gson,java.io.Reader,java.lang.Class) -> a
    M:java.lang.Object fromJson(com.google.gson.Gson,java.lang.String,java.lang.Class) -> a
    M:com.google.gson.JsonObject parse(java.lang.String,boolean) -> a
    M:com.google.gson.JsonObject parse(java.io.Reader,boolean) -> a
    M:com.google.gson.JsonObject parse(java.lang.String) -> a
    M:com.google.gson.JsonObject parse(java.io.Reader) -> a
    M:com.google.gson.JsonArray parseArray(java.lang.String) -> b
    M:com.google.gson.JsonArray parseArray(java.io.Reader) -> b
    M:java.lang.String toStableString(com.google.gson.JsonElement) -> e
    M:void writeValue(com.google.gson.stream.JsonWriter,com.google.gson.JsonElement,java.util.Comparator) -> a
    M:java.util.Collection sortByKeyIfNeeded(java.util.Collection,java.util.Comparator) -> a
net.minecraft.util.HttpUtil -> alh -> net.minecraft.util.HttpUtilities
    F:org.slf4j.Logger LOGGER -> b
    F:com.google.common.util.concurrent.ListeningExecutorService DOWNLOAD_EXECUTOR -> a
    M:java.util.concurrent.CompletableFuture downloadTo(java.io.File,java.net.URL,java.util.Map,int,net.minecraft.util.IProgressUpdate,java.net.Proxy) -> a
    M:int getAvailablePort() -> a
net.minecraft.util.InclusiveRange -> ali -> net.minecraft.util.InclusiveRange
    F:java.lang.Comparable minInclusive -> b
    F:java.lang.Comparable maxInclusive -> c
    F:com.mojang.serialization.Codec INT -> a
    M:com.mojang.serialization.Codec codec(com.mojang.serialization.Codec) -> a
    M:com.mojang.serialization.Codec codec(com.mojang.serialization.Codec,java.lang.Comparable,java.lang.Comparable) -> a
    M:com.mojang.serialization.DataResult create(java.lang.Comparable,java.lang.Comparable) -> a
    M:boolean isValueInRange(java.lang.Comparable) -> a
    M:boolean contains(net.minecraft.util.InclusiveRange) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.Comparable minInclusive() -> a
    M:java.lang.Comparable maxInclusive() -> b
net.minecraft.util.KeyDispatchDataCodec -> alj -> net.minecraft.util.KeyDispatchDataCodec
    F:com.mojang.serialization.Codec codec -> a
    M:net.minecraft.util.KeyDispatchDataCodec of(com.mojang.serialization.Codec) -> a
    M:net.minecraft.util.KeyDispatchDataCodec of(com.mojang.serialization.MapCodec) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:com.mojang.serialization.Codec codec() -> a
net.minecraft.util.LazyLoadedValue -> alk -> net.minecraft.util.LazyInitVar
    F:java.util.function.Supplier factory -> a
    M:java.lang.Object get() -> a
net.minecraft.util.LinearCongruentialGenerator -> all -> net.minecraft.util.LinearCongruentialGenerator
    F:long MULTIPLIER -> a
    F:long INCREMENT -> b
    M:long next(long,long) -> a
net.minecraft.util.LowerCaseEnumTypeAdapterFactory -> alm -> net.minecraft.util.ChatTypeAdapterFactory
    M:com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
    M:java.lang.String toLowercase(java.lang.Object) -> a
    M:void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
    M:java.lang.Object read(com.google.gson.stream.JsonReader) -> read
net.minecraft.util.MemoryReserve -> aln -> net.minecraft.util.MemoryReserve
    M:void allocate() -> a
    M:void release() -> b
net.minecraft.util.ModCheck -> alo -> net.minecraft.util.ModCheck
    F:net.minecraft.util.ModCheck$Confidence confidence -> a
    F:java.lang.String description -> b
    M:net.minecraft.util.ModCheck identify(java.lang.String,java.util.function.Supplier,java.lang.String,java.lang.Class) -> a
    M:boolean shouldReportAsModified() -> a
    M:net.minecraft.util.ModCheck merge(net.minecraft.util.ModCheck) -> a
    M:java.lang.String fullDescription() -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.util.ModCheck$Confidence confidence() -> c
    M:java.lang.String description() -> d
net.minecraft.util.ModCheck$Confidence -> alo$a -> net.minecraft.util.ModCheck$a
    F:net.minecraft.util.ModCheck$Confidence PROBABLY_NOT -> a
    F:net.minecraft.util.ModCheck$Confidence VERY_LIKELY -> b
    F:net.minecraft.util.ModCheck$Confidence DEFINITELY -> c
    F:java.lang.String description -> d
    F:boolean shouldReportAsModified -> e
net.minecraft.util.Mth -> alp -> net.minecraft.util.MathHelper
    F:int BIG_ENOUGH_INT -> h
    F:float BIG_ENOUGH_FLOAT -> i
    F:long UUID_VERSION -> j
    F:long UUID_VERSION_TYPE_4 -> k
    F:long UUID_VARIANT -> l
    F:long UUID_VARIANT_2 -> m
    F:float PI -> a
    F:float HALF_PI -> b
    F:float TWO_PI -> c
    F:float DEG_TO_RAD -> d
    F:float RAD_TO_DEG -> e
    F:float EPSILON -> f
    F:float SQRT_OF_TWO -> g
    F:float SIN_SCALE -> n
    F:net.minecraft.util.RandomSource RANDOM -> p
    F:double ONE_SIXTH -> r
    F:int FRAC_EXP -> s
    F:int LUT_SIZE -> t
    F:double FRAC_BIAS -> u
    M:float sin(float) -> a
    M:float cos(float) -> b
    M:float sqrt(float) -> c
    M:int floor(float) -> d
    M:int fastFloor(double) -> a
    M:int floor(double) -> b
    M:long lfloor(double) -> c
    M:int absFloor(double) -> d
    M:float abs(float) -> e
    M:int abs(int) -> a
    M:int ceil(float) -> f
    M:int ceil(double) -> e
    M:byte clamp(byte,byte,byte) -> a
    M:int clamp(int,int,int) -> a
    M:long clamp(long,long,long) -> a
    M:float clamp(float,float,float) -> a
    M:double clamp(double,double,double) -> a
    M:double clampedLerp(double,double,double) -> b
    M:float clampedLerp(float,float,float) -> b
    M:double absMax(double,double) -> a
    M:int intFloorDiv(int,int) -> a
    M:int nextInt(net.minecraft.util.RandomSource,int,int) -> a
    M:float nextFloat(net.minecraft.util.RandomSource,float,float) -> a
    M:double nextDouble(net.minecraft.util.RandomSource,double,double) -> a
    M:double average(long[]) -> a
    M:boolean equal(float,float) -> a
    M:boolean equal(double,double) -> b
    M:int positiveModulo(int,int) -> b
    M:float positiveModulo(float,float) -> b
    M:double positiveModulo(double,double) -> c
    M:int wrapDegrees(int) -> b
    M:float wrapDegrees(float) -> g
    M:double wrapDegrees(double) -> f
    M:float degreesDifference(float,float) -> c
    M:float degreesDifferenceAbs(float,float) -> d
    M:float rotateIfNecessary(float,float,float) -> c
    M:float approach(float,float,float) -> d
    M:float approachDegrees(float,float,float) -> e
    M:int getInt(java.lang.String,int) -> a
    M:int getInt(java.lang.String,int,int) -> a
    M:double getDouble(java.lang.String,double) -> a
    M:double getDouble(java.lang.String,double,double) -> a
    M:int smallestEncompassingPowerOfTwo(int) -> c
    M:boolean isPowerOfTwo(int) -> d
    M:int ceillog2(int) -> e
    M:int log2(int) -> f
    M:int color(float,float,float) -> f
    M:int color(int,int,int) -> b
    M:int colorMultiply(int,int) -> c
    M:int colorMultiply(int,float,float,float) -> a
    M:float frac(float) -> h
    M:double frac(double) -> g
    M:net.minecraft.world.phys.Vec3D catmullRomSplinePos(net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D,double) -> a
    M:long getSeed(net.minecraft.core.BaseBlockPosition) -> a
    M:long getSeed(int,int,int) -> c
    M:java.util.UUID createInsecureUUID(net.minecraft.util.RandomSource) -> a
    M:java.util.UUID createInsecureUUID() -> a
    M:double inverseLerp(double,double,double) -> c
    M:float inverseLerp(float,float,float) -> g
    M:boolean rayIntersectsAABB(net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.AxisAlignedBB) -> a
    M:double atan2(double,double) -> d
    M:float fastInvSqrt(float) -> i
    M:double fastInvSqrt(double) -> h
    M:float fastInvCubeRoot(float) -> j
    M:int hsvToRgb(float,float,float) -> h
    M:int murmurHash3Mixer(int) -> g
    M:long murmurHash3Mixer(long) -> a
    M:int getRandomForDistributionIntegral(net.minecraft.util.RandomSource,double[]) -> a
    M:int binarySearch(int,int,java.util.function.IntPredicate) -> a
    M:float lerp(float,float,float) -> i
    M:double lerp(double,double,double) -> d
    M:double lerp2(double,double,double,double,double,double) -> a
    M:double lerp3(double,double,double,double,double,double,double,double,double,double,double) -> a
    M:float catmullrom(float,float,float,float,float) -> a
    M:double smoothstep(double) -> i
    M:double smoothstepDerivative(double) -> j
    M:int sign(double) -> k
    M:float rotLerp(float,float,float) -> j
    M:float diffuseLight(float,float,float) -> k
    M:float rotlerp(float,float,float) -> l
    M:float rotWrap(double) -> l
    M:float triangleWave(float,float) -> e
    M:float square(float) -> k
    M:double square(double) -> m
    M:int square(int) -> h
    M:long square(long) -> b
    M:float cube(float) -> l
    M:double clampedMap(double,double,double,double,double) -> a
    M:float clampedMap(float,float,float,float,float) -> b
    M:double map(double,double,double,double,double) -> b
    M:float map(float,float,float,float,float) -> c
    M:double wobble(double) -> n
    M:int roundToward(int,int) -> d
    M:int positiveCeilDiv(int,int) -> e
    M:int randomBetweenInclusive(net.minecraft.util.RandomSource,int,int) -> b
    M:float randomBetween(net.minecraft.util.RandomSource,float,float) -> b
    M:float normal(net.minecraft.util.RandomSource,float,float) -> c
    M:double lengthSquared(double,double) -> e
    M:double length(double,double) -> f
    M:double lengthSquared(double,double,double) -> e
    M:double length(double,double,double) -> f
    M:int quantize(double,int) -> a
    M:java.util.stream.IntStream outFromOrigin(int,int,int) -> d
    M:java.util.stream.IntStream outFromOrigin(int,int,int,int) -> a
net.minecraft.util.NativeModuleLister -> alq -> net.minecraft.util.NativeModuleLister
    F:org.slf4j.Logger LOGGER -> a
    F:int LANG_MASK -> b
    F:int DEFAULT_LANG -> c
    F:int CODEPAGE_MASK -> d
    F:int DEFAULT_CODEPAGE -> e
    M:java.util.List listModules() -> a
    M:java.util.Optional tryGetVersion(java.lang.String) -> a
    M:java.lang.String langTableKey(java.lang.String,int,int) -> a
    M:java.util.OptionalInt findLangAndCodepage(int[]) -> a
    M:com.sun.jna.Pointer queryVersionValue(com.sun.jna.Pointer,java.lang.String,com.sun.jna.ptr.IntByReference) -> a
    M:java.lang.String queryVersionString(com.sun.jna.Pointer,java.lang.String,com.sun.jna.ptr.IntByReference) -> b
    M:void addCrashSection(net.minecraft.CrashReportSystemDetails) -> a
net.minecraft.util.NativeModuleLister$NativeModuleInfo -> alq$a -> net.minecraft.util.NativeModuleLister$a
    F:java.lang.String name -> a
    F:java.util.Optional version -> b
net.minecraft.util.NativeModuleLister$NativeModuleVersion -> alq$b -> net.minecraft.util.NativeModuleLister$b
    F:java.lang.String description -> a
    F:java.lang.String version -> b
    F:java.lang.String company -> c
net.minecraft.util.OptionEnum -> alr -> net.minecraft.util.OptionEnum
    M:net.minecraft.network.chat.IChatBaseComponent getCaption() -> c
net.minecraft.util.ParticleUtils -> als -> net.minecraft.util.ParticleUtils
    M:void spawnParticlesOnBlockFaces(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.particles.ParticleParam,net.minecraft.util.valueproviders.IntProvider) -> a
    M:void spawnParticlesOnBlockFace(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.particles.ParticleParam,net.minecraft.util.valueproviders.IntProvider,net.minecraft.core.EnumDirection,java.util.function.Supplier,double) -> a
    M:net.minecraft.world.phys.Vec3D getRandomSpeedRanges(net.minecraft.util.RandomSource) -> a
    M:void spawnParticlesAlongAxis(net.minecraft.core.EnumDirection$EnumAxis,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,double,net.minecraft.core.particles.ParticleParam,net.minecraft.util.valueproviders.UniformInt) -> a
    M:void spawnParticleOnFace(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.core.particles.ParticleParam,net.minecraft.world.phys.Vec3D,double) -> a
net.minecraft.util.ProgressListener -> alt -> net.minecraft.util.IProgressUpdate
net.minecraft.util.RandomSource -> alu -> net.minecraft.util.RandomSource
    F:double GAUSSIAN_SPREAD_FACTOR -> a
    M:net.minecraft.util.RandomSource create() -> a
    M:net.minecraft.util.RandomSource createThreadSafe() -> b
    M:net.minecraft.util.RandomSource create(long) -> a
    M:net.minecraft.util.RandomSource createNewThreadLocalInstance() -> c
    M:int nextIntBetweenInclusive(int,int) -> a
    M:double triangle(double,double) -> a
    M:void consumeCount(int) -> b
    M:int nextInt(int,int) -> b
net.minecraft.util.SignatureUpdater -> alv -> net.minecraft.util.SignatureUpdater
net.minecraft.util.SignatureUpdater$Output -> alv$a -> net.minecraft.util.SignatureUpdater$a
net.minecraft.util.SignatureValidator -> alw -> net.minecraft.util.SignatureValidator
    F:net.minecraft.util.SignatureValidator NO_VALIDATION -> a
    F:org.slf4j.Logger LOGGER -> b
    M:boolean validate(byte[],byte[]) -> a
    M:boolean verifySignature(net.minecraft.util.SignatureUpdater,byte[],java.security.Signature) -> a
    M:net.minecraft.util.SignatureValidator from(java.security.PublicKey,java.lang.String) -> a
    M:net.minecraft.util.SignatureValidator from(com.mojang.authlib.yggdrasil.ServicesKeyInfo) -> a
net.minecraft.util.Signer -> alx -> net.minecraft.util.Signer
    F:org.slf4j.Logger LOGGER -> a
    M:net.minecraft.util.Signer from(java.security.PrivateKey,java.lang.String) -> a
net.minecraft.util.SimpleBitStorage -> aly -> net.minecraft.util.SimpleBitStorage
    F:int bits -> c
    F:long mask -> d
    F:int size -> e
    F:int valuesPerLong -> f
    F:int divideMul -> g
    F:int divideAdd -> h
    F:int divideShift -> i
    M:int cellIndex(int) -> b
    M:int getAndSet(int,int) -> a
    M:void set(int,int) -> b
    M:int get(int) -> a
    M:int getSize() -> b
    M:int getBits() -> c
    M:void getAll(java.util.function.IntConsumer) -> a
    M:void unpack(int[]) -> a
    M:net.minecraft.util.DataBits copy() -> d
net.minecraft.util.SimpleBitStorage$InitializationException -> aly$a -> net.minecraft.util.SimpleBitStorage$a
net.minecraft.util.SmoothDouble -> alz -> net.minecraft.util.SmoothDouble
    F:double targetValue -> a
    F:double remainingValue -> b
    F:double lastAmount -> c
    M:double getNewDeltaValue(double,double) -> a
    M:void reset() -> a
net.minecraft.util.SortedArraySet -> ama -> net.minecraft.util.ArraySetSorted
    F:int DEFAULT_INITIAL_CAPACITY -> a
    F:java.util.Comparator comparator -> b
    F:int size -> d
    M:net.minecraft.util.ArraySetSorted create() -> a
    M:net.minecraft.util.ArraySetSorted create(int) -> a
    M:net.minecraft.util.ArraySetSorted create(java.util.Comparator) -> a
    M:net.minecraft.util.ArraySetSorted create(java.util.Comparator,int) -> a
    M:int findIndex(java.lang.Object) -> c
    M:int getInsertionPosition(int) -> b
    M:boolean add(java.lang.Object) -> add
    M:void grow(int) -> c
    M:void addInternal(java.lang.Object,int) -> a
    M:void removeInternal(int) -> d
    M:java.lang.Object getInternal(int) -> e
    M:java.lang.Object addOrGet(java.lang.Object) -> a
    M:boolean remove(java.lang.Object) -> remove
    M:java.lang.Object get(java.lang.Object) -> b
    M:java.lang.Object first() -> b
    M:java.lang.Object last() -> c
    M:boolean contains(java.lang.Object) -> contains
    M:java.util.Iterator iterator() -> iterator
    M:int size() -> size
    M:void clear() -> clear
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.util.SortedArraySet$ArrayIterator -> ama$a -> net.minecraft.util.ArraySetSorted$a
    F:int index -> b
    F:int last -> c
    M:java.lang.Object next() -> next
    M:void remove() -> remove
net.minecraft.util.SpawnUtil -> amb -> net.minecraft.util.SpawnUtil
    M:java.util.Optional trySpawnMob(net.minecraft.world.entity.EntityTypes,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,int,int,int,net.minecraft.util.SpawnUtil$Strategy) -> a
    M:boolean moveToPossibleSpawnPosition(net.minecraft.server.level.WorldServer,int,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.util.SpawnUtil$Strategy) -> a
net.minecraft.util.SpawnUtil$Strategy -> amb$a -> net.minecraft.util.SpawnUtil$a
    F:net.minecraft.util.SpawnUtil$Strategy LEGACY_IRON_GOLEM -> a
    F:net.minecraft.util.SpawnUtil$Strategy ON_TOP_OF_COLLIDER -> b
net.minecraft.util.StringDecomposer -> amc -> net.minecraft.util.StringDecomposer
    F:char REPLACEMENT_CHAR -> a
    F:java.util.Optional STOP_ITERATION -> b
    M:boolean feedChar(net.minecraft.network.chat.ChatModifier,net.minecraft.util.FormattedStringEmpty,int,char) -> a
    M:boolean iterate(java.lang.String,net.minecraft.network.chat.ChatModifier,net.minecraft.util.FormattedStringEmpty) -> a
    M:boolean iterateBackwards(java.lang.String,net.minecraft.network.chat.ChatModifier,net.minecraft.util.FormattedStringEmpty) -> b
    M:boolean iterateFormatted(java.lang.String,net.minecraft.network.chat.ChatModifier,net.minecraft.util.FormattedStringEmpty) -> c
    M:boolean iterateFormatted(java.lang.String,int,net.minecraft.network.chat.ChatModifier,net.minecraft.util.FormattedStringEmpty) -> a
    M:boolean iterateFormatted(java.lang.String,int,net.minecraft.network.chat.ChatModifier,net.minecraft.network.chat.ChatModifier,net.minecraft.util.FormattedStringEmpty) -> a
    M:boolean iterateFormatted(net.minecraft.network.chat.IChatFormatted,net.minecraft.network.chat.ChatModifier,net.minecraft.util.FormattedStringEmpty) -> a
    M:java.lang.String filterBrokenSurrogates(java.lang.String) -> a
    M:java.lang.String getPlainText(net.minecraft.network.chat.IChatFormatted) -> a
net.minecraft.util.StringRepresentable -> amd -> net.minecraft.util.INamable
    M:net.minecraft.util.StringRepresentable$EnumCodec fromEnum(java.util.function.Supplier) -> a
    M:com.mojang.serialization.Keyable keys(net.minecraft.util.StringRepresentable[]) -> a
    M:java.util.stream.Stream keys(com.mojang.serialization.DynamicOps) -> keys
net.minecraft.util.StringRepresentable$EnumCodec -> amd$a -> net.minecraft.util.INamable$a
    F:com.mojang.serialization.Codec codec -> a
    F:java.util.function.Function resolver -> b
    M:com.mojang.serialization.DataResult decode(com.mojang.serialization.DynamicOps,java.lang.Object) -> decode
    M:com.mojang.serialization.DataResult encode(java.lang.Enum,com.mojang.serialization.DynamicOps,java.lang.Object) -> a
    M:java.lang.Enum byName(java.lang.String) -> a
    M:com.mojang.serialization.DataResult encode(java.lang.Object,com.mojang.serialization.DynamicOps,java.lang.Object) -> encode
net.minecraft.util.StringUtil -> ame -> net.minecraft.util.UtilColor
    F:java.util.regex.Pattern STRIP_COLOR_PATTERN -> a
    F:java.util.regex.Pattern LINE_PATTERN -> b
    F:java.util.regex.Pattern LINE_END_PATTERN -> c
    M:java.lang.String formatTickDuration(int) -> a
    M:java.lang.String stripColor(java.lang.String) -> a
    M:boolean isNullOrEmpty(java.lang.String) -> b
    M:java.lang.String truncateStringIfNecessary(java.lang.String,int,boolean) -> a
    M:int lineCount(java.lang.String) -> c
    M:boolean endsWithNewLine(java.lang.String) -> d
    M:java.lang.String trimChatMessage(java.lang.String) -> e
net.minecraft.util.TelemetryConstants -> amf -> net.minecraft.util.TelemetryConstants
    F:java.time.format.DateTimeFormatter TIMESTAMP_FORMATTER -> a
    F:java.lang.String EVENT_WORLD_LOADED -> b
    F:java.lang.String SERVER_MODDED -> c
    F:java.lang.String USER_ID -> d
    F:java.lang.String CLIENT_ID -> e
    F:java.lang.String DEVICE_SESSION_ID -> f
    F:java.lang.String WORLD_SESSION_ID -> g
    F:java.lang.String EVENT_TIMESTAMP_UTC -> h
    F:java.lang.String BUILD_DISPLAY_NAME -> i
    F:java.lang.String CLIENT_MODDED -> j
    F:java.lang.String SERVER_TYPE -> k
    F:java.lang.String BUILD_PLATFORM -> l
    F:java.lang.String PLATFORM -> m
    F:java.lang.String JAVA_VERSION -> n
    F:java.lang.String PLAYER_GAME_MODE -> o
    F:int GAME_MODE_SURVIVAL -> p
    F:int GAME_MODE_CREATIVE -> q
    F:int GAME_MODE_ADVENTURE -> r
    F:int GAME_MODE_SPECTATOR -> s
    F:int GAME_MODE_HARDCORE -> t
    F:java.lang.String SERVER_TYPE_REALM -> u
    F:java.lang.String SERVER_TYPE_LOCAL -> v
    F:java.lang.String SERVER_TYPE_OTHER -> w
net.minecraft.util.ThreadingDetector -> amg -> net.minecraft.util.ThreadingDetector
    F:org.slf4j.Logger LOGGER -> a
    F:java.lang.String name -> b
    F:java.util.concurrent.Semaphore lock -> c
    F:java.util.concurrent.locks.Lock stackTraceLock -> d
    F:java.lang.Thread threadThatFailedToAcquire -> e
    F:net.minecraft.ReportedException fullException -> f
    M:void checkAndLock() -> a
    M:void checkAndUnlock() -> b
    M:net.minecraft.ReportedException makeThreadingException(java.lang.String,java.lang.Thread) -> a
    M:java.lang.String stackTrace(java.lang.Thread) -> a
net.minecraft.util.TimeUtil -> amh -> net.minecraft.util.TimeRange
    F:long NANOSECONDS_PER_SECOND -> a
    F:long NANOSECONDS_PER_MILLISECOND -> b
    M:net.minecraft.util.valueproviders.UniformInt rangeOfSeconds(int,int) -> a
net.minecraft.util.ToFloatFunction -> ami -> net.minecraft.util.ToFloatFunction
    F:net.minecraft.util.ToFloatFunction IDENTITY -> a
    M:net.minecraft.util.ToFloatFunction createUnlimited(it.unimi.dsi.fastutil.floats.Float2FloatFunction) -> a
    M:net.minecraft.util.ToFloatFunction comap(java.util.function.Function) -> a
    M:float apply(java.lang.Float) -> a
    M:float minValue() -> b
    M:float maxValue() -> c
    M:float apply(java.lang.Object) -> a
    M:float apply(java.lang.Object) -> a
    M:float minValue() -> b
    M:float maxValue() -> c
net.minecraft.util.Tuple -> amj -> net.minecraft.util.Tuple
    F:java.lang.Object a -> a
    F:java.lang.Object b -> b
    M:java.lang.Object getA() -> a
    M:void setA(java.lang.Object) -> a
    M:java.lang.Object getB() -> b
    M:void setB(java.lang.Object) -> b
net.minecraft.util.Unit -> amk -> net.minecraft.util.Unit
    F:net.minecraft.util.Unit INSTANCE -> a
net.minecraft.util.VisibleForDebug -> aml -> net.minecraft.util.VisibleForDebug
net.minecraft.util.ZeroBitStorage -> amm -> net.minecraft.util.ZeroBitStorage
    F:int size -> b
    M:int getAndSet(int,int) -> a
    M:void set(int,int) -> b
    M:int get(int) -> a
    M:int getSize() -> b
    M:int getBits() -> c
    M:void getAll(java.util.function.IntConsumer) -> a
    M:void unpack(int[]) -> a
    M:net.minecraft.util.DataBits copy() -> d
net.minecraft.util.datafix.DataFixTypes -> amn -> net.minecraft.util.datafix.DataFixTypes
    F:net.minecraft.util.datafix.DataFixTypes LEVEL -> a
    F:net.minecraft.util.datafix.DataFixTypes PLAYER -> b
    F:net.minecraft.util.datafix.DataFixTypes CHUNK -> c
    F:net.minecraft.util.datafix.DataFixTypes HOTBAR -> d
    F:net.minecraft.util.datafix.DataFixTypes OPTIONS -> e
    F:net.minecraft.util.datafix.DataFixTypes STRUCTURE -> f
    F:net.minecraft.util.datafix.DataFixTypes STATS -> g
    F:net.minecraft.util.datafix.DataFixTypes SAVED_DATA -> h
    F:net.minecraft.util.datafix.DataFixTypes ADVANCEMENTS -> i
    F:net.minecraft.util.datafix.DataFixTypes POI_CHUNK -> j
    F:net.minecraft.util.datafix.DataFixTypes WORLD_GEN_SETTINGS -> k
    F:net.minecraft.util.datafix.DataFixTypes ENTITY_CHUNK -> l
    F:com.mojang.datafixers.DSL$TypeReference type -> m
    M:com.mojang.datafixers.DSL$TypeReference getType() -> a
net.minecraft.util.datafix.DataFixerOptimizationOption -> amo -> net.minecraft.util.datafix.DataFixerOptimizationOption
    F:net.minecraft.util.datafix.DataFixerOptimizationOption UNINITIALIZED_UNOPTIMIZED -> a
    F:net.minecraft.util.datafix.DataFixerOptimizationOption UNINITIALIZED_OPTIMIZED -> b
    F:net.minecraft.util.datafix.DataFixerOptimizationOption INITIALIZED_UNOPTIMIZED -> c
    F:net.minecraft.util.datafix.DataFixerOptimizationOption INITIALIZED_OPTIMIZED -> d
net.minecraft.util.datafix.DataFixers -> amp -> net.minecraft.util.datafix.DataConverterRegistry
    F:org.slf4j.Logger LOGGER -> b
    F:java.util.function.BiFunction SAME -> c
    F:java.util.function.BiFunction SAME_NAMESPACED -> d
    F:com.mojang.datafixers.DataFixer dataFixer -> e
    F:int BLENDING_VERSION -> a
    M:com.mojang.datafixers.DataFixer getDataFixer() -> a
    M:com.mojang.datafixers.DataFixer createFixerUpper() -> b
    M:void addFixers(com.mojang.datafixers.DataFixerBuilder) -> a
    M:java.util.function.UnaryOperator createRenamer(java.util.Map) -> a
    M:java.util.function.UnaryOperator createRenamer(java.lang.String,java.lang.String) -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.PackedBitStorage -> amq -> net.minecraft.util.datafix.DataBitsPacked
    F:int BIT_TO_LONG_SHIFT -> a
    F:int bits -> c
    F:long mask -> d
    F:int size -> e
    M:void set(int,int) -> a
    M:int get(int) -> a
    M:int getBits() -> b
net.minecraft.util.datafix.fixes.AbstractArrowPickupFix -> amr -> net.minecraft.util.datafix.fixes.AbstractArrowPickupFix
    M:com.mojang.datafixers.Typed updateProjectiles(com.mojang.datafixers.Typed) -> a
    M:com.mojang.serialization.Dynamic updatePickup(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.datafixers.Typed updateEntity(com.mojang.datafixers.Typed,java.lang.String,java.util.function.Function) -> a
net.minecraft.util.datafix.fixes.AbstractPoiSectionFix -> ams -> net.minecraft.util.datafix.fixes.AbstractPoiSectionFix
    F:java.lang.String name -> a
    M:com.mojang.serialization.Dynamic cap(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.serialization.Dynamic processSection(com.mojang.serialization.Dynamic) -> b
    M:com.mojang.serialization.Dynamic processSectionRecords(com.mojang.serialization.Dynamic) -> c
net.minecraft.util.datafix.fixes.AbstractUUIDFix -> amt -> net.minecraft.util.datafix.fixes.DataConverterUUIDBase
    F:com.mojang.datafixers.DSL$TypeReference typeReference -> a
    M:com.mojang.datafixers.Typed updateNamedChoice(com.mojang.datafixers.Typed,java.lang.String,java.util.function.Function) -> a
    M:java.util.Optional replaceUUIDString(com.mojang.serialization.Dynamic,java.lang.String,java.lang.String) -> a
    M:java.util.Optional replaceUUIDMLTag(com.mojang.serialization.Dynamic,java.lang.String,java.lang.String) -> b
    M:java.util.Optional replaceUUIDLeastMost(com.mojang.serialization.Dynamic,java.lang.String,java.lang.String) -> c
    M:java.util.Optional createUUIDFromString(com.mojang.serialization.Dynamic,java.lang.String) -> a
    M:java.util.Optional createUUIDFromML(com.mojang.serialization.Dynamic) -> a
    M:java.util.Optional createUUIDFromLongs(com.mojang.serialization.Dynamic,java.lang.String,java.lang.String) -> d
    M:java.util.Optional createUUIDTag(com.mojang.serialization.Dynamic,long,long) -> a
net.minecraft.util.datafix.fixes.AddFlagIfNotPresentFix -> amu -> net.minecraft.util.datafix.fixes.AddFlagIfNotPresentFix
    F:java.lang.String name -> a
    F:boolean flagValue -> b
    F:java.lang.String flagKey -> c
    F:com.mojang.datafixers.DSL$TypeReference typeReference -> d
net.minecraft.util.datafix.fixes.AddNewChoices -> amv -> net.minecraft.util.datafix.fixes.DataConverterAddChoices
    F:java.lang.String name -> a
    F:com.mojang.datafixers.DSL$TypeReference type -> b
    M:com.mojang.datafixers.TypeRewriteRule cap(java.lang.String,com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType) -> a
net.minecraft.util.datafix.fixes.AdvancementsFix -> amw -> net.minecraft.util.datafix.fixes.DataConverterAdvancement
    F:java.util.Map RENAMES -> a
net.minecraft.util.datafix.fixes.AdvancementsRenameFix -> amx -> net.minecraft.util.datafix.fixes.DataConverterAdvancementBase
    F:java.lang.String name -> a
    F:java.util.function.Function renamer -> b
net.minecraft.util.datafix.fixes.AttributesRename -> amy -> net.minecraft.util.datafix.fixes.DataConverterAttributes
    F:java.util.Map RENAMES -> a
    M:com.mojang.serialization.Dynamic fixName(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.datafixers.Typed fixItemStackTag(com.mojang.datafixers.Typed) -> a
    M:com.mojang.datafixers.Typed fixEntity(com.mojang.datafixers.Typed) -> b
net.minecraft.util.datafix.fixes.BedItemColorFix -> amz -> net.minecraft.util.datafix.fixes.DataConverterBedItem
net.minecraft.util.datafix.fixes.BiomeFix -> ana -> net.minecraft.util.datafix.fixes.DataConverterBiome
    F:java.util.Map BIOMES -> a
net.minecraft.util.datafix.fixes.BitStorageAlignFix -> anb -> net.minecraft.util.datafix.fixes.DataConverterBitStorageAlign
    F:int BIT_TO_LONG_SHIFT -> a
    F:int SECTION_WIDTH -> b
    F:int SECTION_HEIGHT -> c
    F:int SECTION_SIZE -> d
    F:int HEIGHTMAP_BITS -> e
    F:int HEIGHTMAP_SIZE -> f
    M:com.mojang.datafixers.Typed updateHeightmaps(com.mojang.datafixers.Typed) -> a
    M:com.mojang.datafixers.Typed updateSections(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    M:com.mojang.serialization.Dynamic updateBitStorage(com.mojang.serialization.Dynamic,com.mojang.serialization.Dynamic,int,int) -> a
net.minecraft.util.datafix.fixes.BlendingDataFix -> anc -> net.minecraft.util.datafix.fixes.BlendingDataFix
    F:java.lang.String name -> a
    F:java.util.Set STATUSES_TO_SKIP_BLENDING -> b
    M:com.mojang.serialization.Dynamic updateChunkTag(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.serialization.Dynamic updateBlendingData(com.mojang.serialization.Dynamic,int,int) -> a
net.minecraft.util.datafix.fixes.BlockEntityBannerColorFix -> and -> net.minecraft.util.datafix.fixes.DataConverterBannerColour
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.BlockEntityBlockStateFix -> ane -> net.minecraft.util.datafix.fixes.DataConverterPiston
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.BlockEntityCustomNameToComponentFix -> anf -> net.minecraft.util.datafix.fixes.DataConverterCustomNameTile
net.minecraft.util.datafix.fixes.BlockEntityIdFix -> ang -> net.minecraft.util.datafix.fixes.DataConverterTileEntity
    F:java.util.Map ID_MAP -> a
net.minecraft.util.datafix.fixes.BlockEntityJukeboxFix -> anh -> net.minecraft.util.datafix.fixes.DataConverterJukeBox
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.BlockEntityKeepPacked -> ani -> net.minecraft.util.datafix.fixes.DataConverterBlockEntityKeepPacked
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.BlockEntityShulkerBoxColorFix -> anj -> net.minecraft.util.datafix.fixes.DataConverterShulkerBoxBlock
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.BlockEntitySignTextStrictJsonFix -> ank -> net.minecraft.util.datafix.fixes.DataConverterSignText
    F:com.google.gson.Gson GSON -> a
    M:com.mojang.serialization.Dynamic updateLine(com.mojang.serialization.Dynamic,java.lang.String) -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    M:net.minecraft.network.chat.IChatMutableComponent deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    M:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.util.datafix.fixes.BlockEntityUUIDFix -> anl -> net.minecraft.util.datafix.fixes.DataConverterBlockEntityUUID
    M:com.mojang.serialization.Dynamic updateSkull(com.mojang.serialization.Dynamic) -> b
    M:com.mojang.serialization.Dynamic updateConduit(com.mojang.serialization.Dynamic) -> c
net.minecraft.util.datafix.fixes.BlockNameFlatteningFix -> anm -> net.minecraft.util.datafix.fixes.DataConverterBlockName
net.minecraft.util.datafix.fixes.BlockRenameFix -> ann -> net.minecraft.util.datafix.fixes.DataConverterBlockRename
    F:java.lang.String name -> a
    M:com.mojang.datafixers.DataFix create(com.mojang.datafixers.schemas.Schema,java.lang.String,java.util.function.Function) -> a
    M:java.lang.String fixBlock(java.lang.String) -> a
net.minecraft.util.datafix.fixes.BlockRenameFixWithJigsaw -> ano -> net.minecraft.util.datafix.fixes.BlockRenameFixWithJigsaw
    F:java.lang.String name -> a
    M:com.mojang.datafixers.DataFix create(com.mojang.datafixers.schemas.Schema,java.lang.String,java.util.function.Function) -> b
    M:java.lang.String fixBlock(java.lang.String) -> a
net.minecraft.util.datafix.fixes.BlockStateData -> anp -> net.minecraft.util.datafix.fixes.DataConverterFlattenData
    F:org.slf4j.Logger LOGGER -> b
    F:it.unimi.dsi.fastutil.objects.Object2IntMap ID_BY_OLD -> e
    F:it.unimi.dsi.fastutil.objects.Object2IntMap ID_BY_OLD_NAME -> f
    F:java.lang.String FILTER_ME -> a
    M:void register(int,java.lang.String,java.lang.String[]) -> a
    M:void finalizeMaps() -> q
    M:com.mojang.serialization.Dynamic upgradeBlockStateTag(com.mojang.serialization.Dynamic) -> a
    M:java.lang.String upgradeBlock(java.lang.String) -> a
    M:java.lang.String upgradeBlock(int) -> a
    M:com.mojang.serialization.Dynamic parse(java.lang.String) -> b
    M:com.mojang.serialization.Dynamic getTag(int) -> b
    M:void bootstrap0() -> a
    M:void bootstrap1() -> b
    M:void bootstrap2() -> c
    M:void bootstrap3() -> d
    M:void bootstrap4() -> e
    M:void bootstrap5() -> f
    M:void bootstrap6() -> g
    M:void bootstrap7() -> h
    M:void bootstrap8() -> i
    M:void bootstrap9() -> j
    M:void bootstrap10() -> k
    M:void bootstrap11() -> l
    M:void bootstrap12() -> m
    M:void bootstrap13() -> n
    M:void bootstrap14() -> o
    M:void bootstrap15() -> p
net.minecraft.util.datafix.fixes.BlockStateStructureTemplateFix -> anq -> net.minecraft.util.datafix.fixes.DataConverterFlattenState
net.minecraft.util.datafix.fixes.CatTypeFix -> anr -> net.minecraft.util.datafix.fixes.DataConverterCatType
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.CauldronRenameFix -> ans -> net.minecraft.util.datafix.fixes.CauldronRenameFix
    M:com.mojang.serialization.Dynamic fix(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.CavesAndCliffsRenames -> ant -> net.minecraft.util.datafix.fixes.CavesAndCliffsRenames
    F:com.google.common.collect.ImmutableMap RENAMES -> a
net.minecraft.util.datafix.fixes.ChunkBedBlockEntityInjecterFix -> anu -> net.minecraft.util.datafix.fixes.DataConverterBedBlock
    M:com.mojang.datafixers.TypeRewriteRule cap(com.mojang.datafixers.types.Type,com.mojang.datafixers.types.templates.List$ListType) -> a
net.minecraft.util.datafix.fixes.ChunkBiomeFix -> anv -> net.minecraft.util.datafix.fixes.DataConverterLeavesBiome
net.minecraft.util.datafix.fixes.ChunkDeleteIgnoredLightDataFix -> anw -> net.minecraft.util.datafix.fixes.ChunkDeleteIgnoredLightDataFix
net.minecraft.util.datafix.fixes.ChunkHeightAndBiomeFix -> anx -> net.minecraft.util.datafix.fixes.ChunkHeightAndBiomeFix
    F:java.lang.String DATAFIXER_CONTEXT_TAG -> a
    F:java.lang.String NAME -> d
    F:int OLD_SECTION_COUNT -> e
    F:int NEW_SECTION_COUNT -> f
    F:int NEW_MIN_SECTION_Y -> g
    F:int BLOCKS_PER_SECTION -> b
    F:int LONGS_PER_SECTION -> h
    F:int HEIGHTMAP_BITS -> i
    F:long HEIGHTMAP_MASK -> j
    F:int HEIGHTMAP_OFFSET -> k
    F:java.util.Set STATUS_IS_OR_AFTER_SURFACE -> m
    F:java.util.Set STATUS_IS_OR_AFTER_NOISE -> n
    F:java.util.Set BLOCKS_BEFORE_FEATURE_STATUS -> o
    F:int BIOME_CONTAINER_LAYER_SIZE -> p
    F:int BIOME_CONTAINER_SIZE -> q
    F:int BIOME_CONTAINER_TOP_LAYER_OFFSET -> r
    F:java.lang.String DEFAULT_BIOME -> c
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap BIOMES_BY_ID -> s
    M:com.mojang.serialization.Dynamic predictChunkStatusBeforeSurface(com.mojang.serialization.Dynamic,java.util.Set) -> a
    M:int getOldBiome(int[],int) -> a
    M:com.mojang.serialization.Dynamic updateChunkTag(com.mojang.serialization.Dynamic,boolean,boolean,boolean,java.util.function.Supplier) -> a
    M:com.mojang.serialization.Dynamic shiftUpgradeData(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.serialization.Dynamic updateCarvingMasks(com.mojang.serialization.Dynamic,int,int) -> a
    M:com.mojang.serialization.Dynamic addPaddingEntries(com.mojang.serialization.Dynamic,java.lang.String) -> a
    M:com.mojang.serialization.Dynamic updateHeightmaps(com.mojang.serialization.Dynamic) -> b
    M:com.mojang.serialization.Dynamic getFixedHeightmap(com.mojang.serialization.Dynamic) -> c
    M:com.mojang.serialization.Dynamic makeBiomeContainer(com.mojang.serialization.Dynamic,it.unimi.dsi.fastutil.ints.Int2IntFunction) -> a
    M:com.mojang.serialization.Dynamic makePalettedContainer(com.mojang.serialization.Dynamic) -> d
    M:com.mojang.serialization.Dynamic makePalettedContainer(com.mojang.serialization.Dynamic,com.mojang.serialization.Dynamic) -> a
    M:com.mojang.serialization.Dynamic makeOptimizedPalettedContainer(com.mojang.serialization.Dynamic,com.mojang.serialization.Dynamic) -> b
    M:com.mojang.serialization.Dynamic padPaletteEntries(com.mojang.serialization.Dynamic,com.mojang.serialization.Dynamic,java.util.List) -> a
    M:int ceillog2(int) -> a
net.minecraft.util.datafix.fixes.ChunkLightRemoveFix -> any -> net.minecraft.util.datafix.fixes.DataConverterChunkLightRemove
net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix -> anz -> net.minecraft.util.datafix.fixes.ChunkConverterPalette
    F:int NORTH_WEST_MASK -> a
    F:int WEST_MASK -> b
    F:int SOUTH_WEST_MASK -> c
    F:int SOUTH_MASK -> d
    F:int SOUTH_EAST_MASK -> e
    F:int EAST_MASK -> f
    F:int NORTH_EAST_MASK -> g
    F:int NORTH_MASK -> h
    F:org.slf4j.Logger LOGGER -> i
    F:java.util.BitSet VIRTUAL -> j
    F:java.util.BitSet FIX -> k
    F:com.mojang.serialization.Dynamic PUMPKIN -> l
    F:com.mojang.serialization.Dynamic SNOWY_PODZOL -> m
    F:com.mojang.serialization.Dynamic SNOWY_GRASS -> n
    F:com.mojang.serialization.Dynamic SNOWY_MYCELIUM -> o
    F:com.mojang.serialization.Dynamic UPPER_SUNFLOWER -> p
    F:com.mojang.serialization.Dynamic UPPER_LILAC -> q
    F:com.mojang.serialization.Dynamic UPPER_TALL_GRASS -> r
    F:com.mojang.serialization.Dynamic UPPER_LARGE_FERN -> s
    F:com.mojang.serialization.Dynamic UPPER_ROSE_BUSH -> t
    F:com.mojang.serialization.Dynamic UPPER_PEONY -> u
    F:java.util.Map FLOWER_POT_MAP -> v
    F:java.util.Map SKULL_MAP -> w
    F:java.util.Map DOOR_MAP -> x
    F:java.util.Map NOTE_BLOCK_MAP -> y
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap DYE_COLOR_MAP -> z
    M:void mapSkull(java.util.Map,int,java.lang.String,java.lang.String) -> a
    M:void mapDoor(java.util.Map,java.lang.String,int) -> a
    M:void addBeds(java.util.Map,int,java.lang.String) -> a
    M:void addBanners(java.util.Map,int,java.lang.String) -> b
    M:java.lang.String getName(com.mojang.serialization.Dynamic) -> a
    M:java.lang.String getProperty(com.mojang.serialization.Dynamic,java.lang.String) -> a
    M:int idFor(net.minecraft.util.RegistryID,com.mojang.serialization.Dynamic) -> a
    M:com.mojang.serialization.Dynamic fix(com.mojang.serialization.Dynamic) -> b
    M:int getSideMask(boolean,boolean,boolean,boolean) -> a
net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$DataLayer -> anz$a -> net.minecraft.util.datafix.fixes.ChunkConverterPalette$a
    F:int SIZE -> a
    F:int NIBBLE_SIZE -> b
    M:int get(int,int,int) -> a
    M:boolean isFirst(int) -> a
    M:int getPosition(int) -> b
net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction -> anz$b -> net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction
    F:net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction DOWN -> a
    F:net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction UP -> b
    F:net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction NORTH -> c
    F:net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction SOUTH -> d
    F:net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction WEST -> e
    F:net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction EAST -> f
    F:net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction$Axis axis -> g
    F:net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction$AxisDirection axisDirection -> h
    M:net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction$AxisDirection getAxisDirection() -> a
    M:net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction$Axis getAxis() -> b
net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$Axis -> anz$b$a -> net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction$Axis
    F:net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction$Axis X -> a
    F:net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction$Axis Y -> b
    F:net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction$Axis Z -> c
net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$AxisDirection -> anz$b$b -> net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction$AxisDirection
    F:net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction$AxisDirection POSITIVE -> a
    F:net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction$AxisDirection NEGATIVE -> b
    F:int step -> c
    M:int getStep() -> a
net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Section -> anz$c -> net.minecraft.util.datafix.fixes.ChunkConverterPalette$c
    F:net.minecraft.util.RegistryID palette -> b
    F:java.util.List listTag -> c
    F:com.mojang.serialization.Dynamic section -> d
    F:boolean hasData -> e
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap toFix -> f
    F:it.unimi.dsi.fastutil.ints.IntList update -> g
    F:int y -> a
    F:java.util.Set seen -> h
    M:com.mojang.serialization.Dynamic getBlock(int) -> a
    M:void setBlock(int,com.mojang.serialization.Dynamic) -> a
    M:int upgrade(int) -> b
    M:void addFix(int,int) -> a
    M:com.mojang.serialization.Dynamic write() -> a
net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$UpgradeChunk -> anz$d -> net.minecraft.util.datafix.fixes.ChunkConverterPalette$d
    F:int sides -> a
    F:com.mojang.serialization.Dynamic level -> c
    F:int x -> d
    F:int z -> e
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap blockEntities -> f
    M:com.mojang.serialization.Dynamic getBlockEntity(int) -> b
    M:com.mojang.serialization.Dynamic removeBlockEntity(int) -> c
    M:int relative(int,net.minecraft.util.datafix.fixes.ChunkConverterPalette$Direction) -> a
    M:void setBlock(int,com.mojang.serialization.Dynamic) -> a
    M:net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Section getSection(int) -> d
    M:com.mojang.serialization.Dynamic getBlock(int) -> a
    M:com.mojang.serialization.Dynamic write() -> a
net.minecraft.util.datafix.fixes.ChunkProtoTickListFix -> aoa -> net.minecraft.util.datafix.fixes.ChunkProtoTickListFix
    F:int SECTION_WIDTH -> a
    F:com.google.common.collect.ImmutableSet ALWAYS_WATERLOGGED -> b
    M:com.mojang.serialization.Dynamic makeTickList(com.mojang.serialization.Dynamic,it.unimi.dsi.fastutil.ints.Int2ObjectMap,byte,int,int,java.lang.String,java.util.function.Function) -> a
    M:java.lang.String getBlock(com.mojang.serialization.Dynamic) -> a
    M:java.lang.String getLiquid(com.mojang.serialization.Dynamic) -> b
    M:com.mojang.serialization.Dynamic createTick(com.mojang.serialization.Dynamic,java.util.function.Supplier,int,int,int,int,java.util.function.Function) -> a
net.minecraft.util.datafix.fixes.ChunkProtoTickListFix$PoorMansPalettedContainer -> aoa$a -> net.minecraft.util.datafix.fixes.ChunkProtoTickListFix$a
    F:long SIZE_BITS -> a
    F:java.util.List palette -> b
    F:int bits -> d
    F:long mask -> e
    F:int valuesPerLong -> f
    M:com.mojang.serialization.Dynamic get(int,int,int) -> a
    M:int getIndex(int,int,int) -> b
    M:java.util.List palette() -> a
net.minecraft.util.datafix.fixes.ChunkRenamesFix -> aob -> net.minecraft.util.datafix.fixes.ChunkRenamesFix
    M:com.mojang.datafixers.Typed renameField(com.mojang.datafixers.Typed,java.lang.String,java.lang.String) -> a
    M:com.mojang.datafixers.Typed renameFieldHelper(com.mojang.datafixers.Typed,java.lang.String,java.lang.String,com.mojang.datafixers.types.Type) -> a
    M:com.mojang.datafixers.Typed appendChunkName(com.mojang.datafixers.Typed) -> a
    M:com.mojang.serialization.Dynamic mergeRemainders(com.mojang.datafixers.Typed,com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.ChunkStatusFix -> aoc -> net.minecraft.util.datafix.fixes.DataConverterChunkStatus
net.minecraft.util.datafix.fixes.ChunkStatusFix2 -> aod -> net.minecraft.util.datafix.fixes.DataConverterChunkStatus2
    F:java.util.Map RENAMES_AND_DOWNGRADES -> a
net.minecraft.util.datafix.fixes.ChunkStructuresTemplateRenameFix -> aoe -> net.minecraft.util.datafix.fixes.DataConverterChunkStructuresTemplateRename
    F:com.google.common.collect.ImmutableMap RENAMES -> a
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic,com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.ChunkToProtochunkFix -> aof -> net.minecraft.util.datafix.fixes.DataConverterProtoChunk
    F:int NUM_SECTIONS -> a
    M:com.mojang.serialization.Dynamic fixChunkData(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.serialization.Dynamic repackBiomes(com.mojang.serialization.Dynamic) -> b
    M:com.mojang.serialization.Dynamic repackTicks(com.mojang.serialization.Dynamic) -> c
    M:short packOffsetCoordinates(int,int,int) -> a
net.minecraft.util.datafix.fixes.ColorlessShulkerEntityFix -> aog -> net.minecraft.util.datafix.fixes.DataConverterColorlessShulkerEntity
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.CriteriaRenameFix -> aoh -> net.minecraft.util.datafix.fixes.CriteriaRenameFix
    F:java.lang.String name -> a
    F:java.lang.String advancementId -> b
    F:java.util.function.UnaryOperator conversions -> c
    M:com.mojang.serialization.Dynamic fixAdvancements(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.DyeItemRenameFix -> aoi -> net.minecraft.util.datafix.fixes.DataConverterDye
    F:java.util.Map RENAMED_IDS -> a
net.minecraft.util.datafix.fixes.EntityArmorStandSilentFix -> aoj -> net.minecraft.util.datafix.fixes.DataConverterArmorStand
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.EntityBlockStateFix -> aok -> net.minecraft.util.datafix.fixes.DataConverterEntityBlockState
    F:java.util.Map MAP -> a
    M:int getBlockId(java.lang.String) -> a
    M:com.mojang.datafixers.Typed updateFallingBlock(com.mojang.datafixers.Typed) -> a
    M:com.mojang.datafixers.Typed updateBlockToBlockState(com.mojang.datafixers.Typed,java.lang.String,java.lang.String,java.lang.String) -> a
    M:com.mojang.datafixers.Typed updateEntity(com.mojang.datafixers.Typed,java.lang.String,java.util.function.Function) -> a
net.minecraft.util.datafix.fixes.EntityCatSplitFix -> aol -> net.minecraft.util.datafix.fixes.DataConverterEntityCatSplit
    M:com.mojang.datafixers.util.Pair getNewNameAndTag(java.lang.String,com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.EntityCodSalmonFix -> aom -> net.minecraft.util.datafix.fixes.DataConverterEntityCodSalmon
    F:java.util.Map RENAMED_IDS -> a
    F:java.util.Map RENAMED_EGG_IDS -> b
    M:java.lang.String rename(java.lang.String) -> a
net.minecraft.util.datafix.fixes.EntityCustomNameToComponentFix -> aon -> net.minecraft.util.datafix.fixes.DataConverterCustomNameEntity
    M:com.mojang.serialization.Dynamic fixTagCustomName(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.EntityElderGuardianSplitFix -> aoo -> net.minecraft.util.datafix.fixes.DataConverterGuardian
    M:com.mojang.datafixers.util.Pair getNewNameAndTag(java.lang.String,com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.EntityEquipmentToArmorAndHandFix -> aop -> net.minecraft.util.datafix.fixes.DataConverterEquipment
    M:com.mojang.datafixers.TypeRewriteRule cap(com.mojang.datafixers.types.Type) -> a
net.minecraft.util.datafix.fixes.EntityGoatMissingStateFix -> aoq -> net.minecraft.util.datafix.fixes.EntityGoatMissingStateFix
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.EntityHealthFix -> aor -> net.minecraft.util.datafix.fixes.DataConverterHealth
    F:java.util.Set ENTITIES -> a
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.EntityHorseSaddleFix -> aos -> net.minecraft.util.datafix.fixes.DataConverterSaddle
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.EntityHorseSplitFix -> aot -> net.minecraft.util.datafix.fixes.DataConverterHorse
    M:com.mojang.datafixers.util.Pair fix(java.lang.String,com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.EntityIdFix -> aou -> net.minecraft.util.datafix.fixes.DataConverterEntity
    F:java.util.Map ID_MAP -> a
net.minecraft.util.datafix.fixes.EntityItemFrameDirectionFix -> aov -> net.minecraft.util.datafix.fixes.DataConverterItemFrame
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    M:byte direction2dTo3d(byte) -> a
net.minecraft.util.datafix.fixes.EntityMinecartIdentifiersFix -> aow -> net.minecraft.util.datafix.fixes.DataConverterMinecart
    F:java.util.List MINECART_BY_ID -> a
net.minecraft.util.datafix.fixes.EntityPaintingFieldsRenameFix -> aox -> net.minecraft.util.datafix.fixes.EntityPaintingFieldsRenameFix
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.serialization.Dynamic renameField(com.mojang.serialization.Dynamic,java.lang.String,java.lang.String) -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.EntityPaintingItemFrameDirectionFix -> aoy -> net.minecraft.util.datafix.fixes.DataConverterHanging
    M:com.mojang.serialization.Dynamic doFix(com.mojang.serialization.Dynamic,boolean,boolean) -> a
net.minecraft.util.datafix.fixes.EntityPaintingMotiveFix -> aoz -> net.minecraft.util.datafix.fixes.DataConverterPainting
    F:java.util.Map MAP -> a
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.EntityProjectileOwnerFix -> apa -> net.minecraft.util.datafix.fixes.DataConverterEntityProjectileOwner
    M:com.mojang.datafixers.Typed updateProjectiles(com.mojang.datafixers.Typed) -> a
    M:com.mojang.serialization.Dynamic updateOwnerArrow(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.serialization.Dynamic updateOwnerLlamaSpit(com.mojang.serialization.Dynamic) -> b
    M:com.mojang.serialization.Dynamic updateItemPotion(com.mojang.serialization.Dynamic) -> c
    M:com.mojang.serialization.Dynamic updateOwnerThrowable(com.mojang.serialization.Dynamic) -> d
    M:com.mojang.serialization.Dynamic setUUID(com.mojang.serialization.Dynamic,long,long) -> a
    M:com.mojang.datafixers.Typed updateEntity(com.mojang.datafixers.Typed,java.lang.String,java.util.function.Function) -> a
net.minecraft.util.datafix.fixes.EntityPufferfishRenameFix -> apb -> net.minecraft.util.datafix.fixes.DataConverterEntityPufferfish
    F:java.util.Map RENAMED_IDS -> a
    M:java.lang.String rename(java.lang.String) -> a
net.minecraft.util.datafix.fixes.EntityRavagerRenameFix -> apc -> net.minecraft.util.datafix.fixes.DataConverterEntityRavagerRename
    F:java.util.Map RENAMED_IDS -> a
    M:java.lang.String rename(java.lang.String) -> a
net.minecraft.util.datafix.fixes.EntityRedundantChanceTagsFix -> apd -> net.minecraft.util.datafix.fixes.DataConverterDropChances
    F:com.mojang.serialization.Codec FLOAT_LIST_CODEC -> a
    M:boolean isZeroList(com.mojang.serialization.OptionalDynamic,int) -> a
net.minecraft.util.datafix.fixes.EntityRenameFix -> ape -> net.minecraft.util.datafix.fixes.DataConverterEntityName
    F:java.lang.String name -> a
    M:com.mojang.datafixers.Typed getEntity(java.lang.Object,com.mojang.serialization.DynamicOps,com.mojang.datafixers.types.Type) -> a
net.minecraft.util.datafix.fixes.EntityRidingToPassengersFix -> apf -> net.minecraft.util.datafix.fixes.DataConverterRiding
    M:com.mojang.datafixers.TypeRewriteRule cap(com.mojang.datafixers.schemas.Schema,com.mojang.datafixers.schemas.Schema,com.mojang.datafixers.types.Type,com.mojang.datafixers.types.Type,com.mojang.datafixers.types.Type) -> a
net.minecraft.util.datafix.fixes.EntityShulkerColorFix -> apg -> net.minecraft.util.datafix.fixes.DataConverterShulker
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.EntityShulkerRotationFix -> aph -> net.minecraft.util.datafix.fixes.DataConverterEntityShulkerRotation
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.EntitySkeletonSplitFix -> api -> net.minecraft.util.datafix.fixes.DataConverterSkeleton
    M:com.mojang.datafixers.util.Pair getNewNameAndTag(java.lang.String,com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.EntityStringUuidFix -> apj -> net.minecraft.util.datafix.fixes.DataConverterUUID
net.minecraft.util.datafix.fixes.EntityTheRenameningFix -> apk -> net.minecraft.util.datafix.fixes.DataConverterEntityRename
    F:java.util.Map RENAMED_IDS -> a
    F:java.util.Map RENAMED_BLOCKS -> b
    F:java.util.Map RENAMED_ITEMS -> c
    F:java.lang.String MINECRAFT_BRED -> d
    M:java.lang.String rename(java.lang.String) -> a
net.minecraft.util.datafix.fixes.EntityTippedArrowFix -> apl -> net.minecraft.util.datafix.fixes.DataConverterEntityTippedArrow
    M:java.lang.String rename(java.lang.String) -> a
net.minecraft.util.datafix.fixes.EntityUUIDFix -> apm -> net.minecraft.util.datafix.fixes.DataConverterEntityUUID
    F:org.slf4j.Logger LOGGER -> b
    F:java.util.Set ABSTRACT_HORSES -> c
    F:java.util.Set TAMEABLE_ANIMALS -> d
    F:java.util.Set ANIMALS -> e
    F:java.util.Set MOBS -> f
    F:java.util.Set LIVING_ENTITIES -> g
    F:java.util.Set PROJECTILES -> h
    M:com.mojang.serialization.Dynamic updatePiglin(com.mojang.serialization.Dynamic) -> d
    M:com.mojang.serialization.Dynamic updateEvokerFangs(com.mojang.serialization.Dynamic) -> e
    M:com.mojang.serialization.Dynamic updateZombieVillager(com.mojang.serialization.Dynamic) -> f
    M:com.mojang.serialization.Dynamic updateAreaEffectCloud(com.mojang.serialization.Dynamic) -> g
    M:com.mojang.serialization.Dynamic updateShulkerBullet(com.mojang.serialization.Dynamic) -> h
    M:com.mojang.serialization.Dynamic updateItem(com.mojang.serialization.Dynamic) -> i
    M:com.mojang.serialization.Dynamic updateFox(com.mojang.serialization.Dynamic) -> j
    M:com.mojang.serialization.Dynamic updateHurtBy(com.mojang.serialization.Dynamic) -> k
    M:com.mojang.serialization.Dynamic updateAnimalOwner(com.mojang.serialization.Dynamic) -> l
    M:com.mojang.serialization.Dynamic updateAnimal(com.mojang.serialization.Dynamic) -> m
    M:com.mojang.serialization.Dynamic updateMob(com.mojang.serialization.Dynamic) -> n
    M:com.mojang.serialization.Dynamic updateLivingEntity(com.mojang.serialization.Dynamic) -> b
    M:com.mojang.serialization.Dynamic updateProjectile(com.mojang.serialization.Dynamic) -> o
    M:com.mojang.serialization.Dynamic updateEntityUUID(com.mojang.serialization.Dynamic) -> c
net.minecraft.util.datafix.fixes.EntityVariantFix -> apn -> net.minecraft.util.datafix.fixes.EntityVariantFix
    F:java.lang.String fieldName -> a
    F:java.util.function.IntFunction idConversions -> b
    M:com.mojang.serialization.Dynamic updateAndRename(com.mojang.serialization.Dynamic,java.lang.String,java.lang.String,java.util.function.Function) -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.EntityWolfColorFix -> apo -> net.minecraft.util.datafix.fixes.DataConverterWolf
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.EntityZombieSplitFix -> app -> net.minecraft.util.datafix.fixes.DataConverterZombieType
    M:com.mojang.datafixers.util.Pair getNewNameAndTag(java.lang.String,com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.EntityZombieVillagerTypeFix -> apq -> net.minecraft.util.datafix.fixes.DataConverterZombie
    F:int PROFESSION_MAX -> a
    F:net.minecraft.util.RandomSource RANDOM -> b
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
    M:int getVillagerProfession(int) -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.EntityZombifiedPiglinRenameFix -> apr -> net.minecraft.util.datafix.fixes.DataConverterEntityZombifiedPiglinRename
    F:java.util.Map RENAMED_IDS -> a
    M:java.lang.String rename(java.lang.String) -> a
net.minecraft.util.datafix.fixes.FilteredBooksFix -> aps -> net.minecraft.util.datafix.fixes.FilteredBooksFix
    M:com.mojang.serialization.Dynamic fixItemStackTag(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.FilteredSignsFix -> apt -> net.minecraft.util.datafix.fixes.FilteredSignsFix
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.ForcePoiRebuild -> apu -> net.minecraft.util.datafix.fixes.DataConverterPOIRebuild
    M:com.mojang.serialization.Dynamic cap(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.FurnaceRecipeFix -> apv -> net.minecraft.util.datafix.fixes.DataConverterFurnaceRecipesUsed
    M:com.mojang.datafixers.TypeRewriteRule cap(com.mojang.datafixers.types.Type) -> a
    M:com.mojang.datafixers.Typed updateFurnaceContents(com.mojang.datafixers.types.Type,com.mojang.datafixers.types.Type,com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.GoatHornIdFix -> apw -> net.minecraft.util.datafix.fixes.GoatHornIdFix
    M:com.mojang.serialization.Dynamic fixItemStackTag(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.GossipUUIDFix -> apx -> net.minecraft.util.datafix.fixes.DataConverterGossip
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.HeightmapRenamingFix -> apy -> net.minecraft.util.datafix.fixes.DataConverterHeightmapRenaming
    M:com.mojang.serialization.Dynamic fix(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.IglooMetadataRemovalFix -> apz -> net.minecraft.util.datafix.fixes.DataConverterIglooMetadataRemoval
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.serialization.Dynamic removeIglooPieces(com.mojang.serialization.Dynamic) -> b
    M:boolean isIglooPiece(com.mojang.serialization.Dynamic) -> c
net.minecraft.util.datafix.fixes.ItemBannerColorFix -> aqa -> net.minecraft.util.datafix.fixes.DataConverterBanner
net.minecraft.util.datafix.fixes.ItemCustomNameToComponentFix -> aqb -> net.minecraft.util.datafix.fixes.DataConverterCustomNameItem
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.ItemIdFix -> aqc -> net.minecraft.util.datafix.fixes.DataConverterMaterialId
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap ITEM_NAMES -> a
    M:java.lang.String getItem(int) -> a
net.minecraft.util.datafix.fixes.ItemLoreFix -> aqd -> net.minecraft.util.datafix.fixes.DataConverterItemLoreComponentize
    M:java.util.stream.Stream fixLoreList(java.util.stream.Stream) -> a
    M:java.lang.String fixLoreEntry(java.lang.String) -> a
net.minecraft.util.datafix.fixes.ItemPotionFix -> aqe -> net.minecraft.util.datafix.fixes.DataConverterPotionId
    F:int SPLASH -> b
    F:java.lang.String DEFAULT -> a
net.minecraft.util.datafix.fixes.ItemRenameFix -> aqf -> net.minecraft.util.datafix.fixes.DataConverterItemName
    F:java.lang.String name -> a
    M:com.mojang.datafixers.DataFix create(com.mojang.datafixers.schemas.Schema,java.lang.String,java.util.function.Function) -> a
    M:java.lang.String fixItem(java.lang.String) -> a
net.minecraft.util.datafix.fixes.ItemShulkerBoxColorFix -> aqg -> net.minecraft.util.datafix.fixes.DataConverterShulkerBoxItem
net.minecraft.util.datafix.fixes.ItemSpawnEggFix -> aqh -> net.minecraft.util.datafix.fixes.DataConverterSpawnEgg
net.minecraft.util.datafix.fixes.ItemStackEnchantmentNamesFix -> aqi -> net.minecraft.util.datafix.fixes.DataConverterItemStackEnchantment
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap MAP -> a
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.ItemStackMapIdFix -> aqj -> net.minecraft.util.datafix.fixes.DataConverterMap
net.minecraft.util.datafix.fixes.ItemStackSpawnEggFix -> aqk -> net.minecraft.util.datafix.fixes.DataConverterFlattenSpawnEgg
    F:java.util.Map MAP -> a
net.minecraft.util.datafix.fixes.ItemStackTagFix -> aql -> net.minecraft.util.datafix.fixes.ItemStackTagFix
    F:java.lang.String name -> a
    F:java.util.function.Predicate idFilter -> b
net.minecraft.util.datafix.fixes.ItemStackTheFlatteningFix -> aqm -> net.minecraft.util.datafix.fixes.DataConverterFlatten
    F:java.util.Map MAP -> a
    F:java.util.Set IDS -> b
    F:java.util.Set DAMAGE_IDS -> c
    M:java.lang.String updateItem(java.lang.String,int) -> a
net.minecraft.util.datafix.fixes.ItemStackUUIDFix -> aqn -> net.minecraft.util.datafix.fixes.DataConverterItemStackUUID
    M:com.mojang.serialization.Dynamic updateAttributeModifiers(com.mojang.serialization.Dynamic) -> b
    M:com.mojang.serialization.Dynamic updateSkullOwner(com.mojang.serialization.Dynamic) -> c
net.minecraft.util.datafix.fixes.ItemWaterPotionFix -> aqo -> net.minecraft.util.datafix.fixes.DataConverterPotionWater
net.minecraft.util.datafix.fixes.ItemWrittenBookPagesStrictJsonFix -> aqp -> net.minecraft.util.datafix.fixes.DataConverterBook
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.JigsawPropertiesFix -> aqq -> net.minecraft.util.datafix.fixes.DataConverterJigsawProperties
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.JigsawRotationFix -> aqr -> net.minecraft.util.datafix.fixes.DataConverterJigsawRotation
    F:java.util.Map RENAMES -> a
    M:com.mojang.serialization.Dynamic fix(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.LeavesFix -> aqs -> net.minecraft.util.datafix.fixes.DataConverterLeaves
    F:int NORTH_WEST_MASK -> a
    F:int WEST_MASK -> b
    F:int SOUTH_WEST_MASK -> c
    F:int SOUTH_MASK -> d
    F:int SOUTH_EAST_MASK -> e
    F:int EAST_MASK -> f
    F:int NORTH_EAST_MASK -> g
    F:int NORTH_MASK -> h
    F:int DECAY_DISTANCE -> j
    F:int SIZE_BITS -> k
    F:int SIZE -> l
    F:it.unimi.dsi.fastutil.objects.Object2IntMap LEAVES -> m
    F:java.util.Set LOGS -> n
    M:int getIndex(int,int,int) -> a
    M:int getX(int) -> a
    M:int getY(int) -> b
    M:int getZ(int) -> c
    M:int getSideMask(boolean,boolean,boolean,boolean) -> a
net.minecraft.util.datafix.fixes.LeavesFix$LeavesSection -> aqs$a -> net.minecraft.util.datafix.fixes.DataConverterLeaves$a
    F:java.lang.String PERSISTENT -> h
    F:java.lang.String DECAYABLE -> i
    F:java.lang.String DISTANCE -> j
    F:it.unimi.dsi.fastutil.ints.IntSet leaveIds -> k
    F:it.unimi.dsi.fastutil.ints.IntSet logIds -> l
    F:it.unimi.dsi.fastutil.ints.Int2IntMap stateToIdMap -> m
    M:boolean skippable() -> a
    M:com.mojang.serialization.Dynamic makeLeafTag(com.mojang.serialization.Dynamic,java.lang.String,boolean,int) -> a
    M:boolean isLog(int) -> a
    M:boolean isLeaf(int) -> b
    M:int getDistance(int) -> d
    M:void setDistance(int,int,int) -> a
net.minecraft.util.datafix.fixes.LeavesFix$Section -> aqs$b -> net.minecraft.util.datafix.fixes.DataConverterLeaves$b
    F:java.lang.String BLOCK_STATES_TAG -> a
    F:java.lang.String NAME_TAG -> b
    F:java.lang.String PROPERTIES_TAG -> c
    F:com.mojang.datafixers.types.Type blockStateType -> h
    F:com.mojang.datafixers.OpticFinder paletteFinder -> d
    F:java.util.List palette -> e
    F:int index -> f
    F:net.minecraft.util.datafix.DataBitsPacked storage -> g
    M:void readStorage(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.datafixers.Typed write(com.mojang.datafixers.Typed) -> a
    M:boolean isSkippable() -> b
    M:int getBlock(int) -> c
    M:int getStateId(java.lang.String,boolean,int) -> a
    M:int getIndex() -> c
net.minecraft.util.datafix.fixes.LevelDataGeneratorOptionsFix -> aqt -> net.minecraft.util.datafix.fixes.DataConverterLevelDataGeneratorOptions
    F:java.util.Map MAP -> a
    F:java.lang.String GENERATOR_OPTIONS -> b
    M:com.mojang.serialization.Dynamic convert(java.lang.String,com.mojang.serialization.DynamicOps) -> a
    M:com.mojang.datafixers.util.Pair getLayerInfoFromString(java.lang.String) -> a
    M:java.util.List getLayersInfoFromString(java.lang.String) -> b
net.minecraft.util.datafix.fixes.LevelFlatGeneratorInfoFix -> aqu -> net.minecraft.util.datafix.fixes.DataConverterWorldGenSettings
    F:java.lang.String GENERATOR_OPTIONS -> b
    F:java.lang.String DEFAULT -> a
    F:com.google.common.base.Splitter SPLITTER -> c
    F:com.google.common.base.Splitter LAYER_SPLITTER -> d
    F:com.google.common.base.Splitter OLD_AMOUNT_SPLITTER -> e
    F:com.google.common.base.Splitter AMOUNT_SPLITTER -> f
    F:com.google.common.base.Splitter BLOCK_SPLITTER -> g
    M:com.mojang.serialization.Dynamic fix(com.mojang.serialization.Dynamic) -> a
    M:java.lang.String fixString(java.lang.String) -> a
net.minecraft.util.datafix.fixes.LevelUUIDFix -> aqv -> net.minecraft.util.datafix.fixes.DataConverterMiscUUID
    F:org.slf4j.Logger LOGGER -> b
    M:com.mojang.serialization.Dynamic updateWanderingTrader(com.mojang.serialization.Dynamic) -> b
    M:com.mojang.serialization.Dynamic updateDragonFight(com.mojang.serialization.Dynamic) -> c
    M:com.mojang.serialization.Dynamic updateCustomBossEvents(com.mojang.serialization.Dynamic) -> d
net.minecraft.util.datafix.fixes.MapIdFix -> aqw -> net.minecraft.util.datafix.fixes.DataConverterMapId
net.minecraft.util.datafix.fixes.MemoryExpiryDataFix -> aqx -> net.minecraft.util.datafix.fixes.DataConverterMemoryExpiry
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.serialization.Dynamic updateBrain(com.mojang.serialization.Dynamic) -> b
    M:com.mojang.serialization.Dynamic updateMemories(com.mojang.serialization.Dynamic) -> c
    M:com.mojang.datafixers.util.Pair updateMemoryEntry(com.mojang.datafixers.util.Pair) -> a
    M:com.mojang.serialization.Dynamic wrapMemoryValue(com.mojang.serialization.Dynamic) -> d
net.minecraft.util.datafix.fixes.MissingDimensionFix -> aqy -> net.minecraft.util.datafix.fixes.DataConverterMissingDimension
    M:com.mojang.datafixers.types.Type fields(java.lang.String,com.mojang.datafixers.types.Type) -> a
    M:com.mojang.datafixers.types.Type optionalFields(java.lang.String,com.mojang.datafixers.types.Type) -> b
    M:com.mojang.datafixers.types.Type optionalFields(java.lang.String,com.mojang.datafixers.types.Type,java.lang.String,com.mojang.datafixers.types.Type) -> a
    M:com.mojang.datafixers.types.Type flatType(com.mojang.datafixers.schemas.Schema) -> a
    M:com.mojang.serialization.Dynamic recreateSettings(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.MobSpawnerEntityIdentifiersFix -> aqz -> net.minecraft.util.datafix.fixes.DataConverterMobSpawner
    M:com.mojang.serialization.Dynamic fix(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.NamedEntityFix -> ara -> net.minecraft.util.datafix.fixes.DataConverterNamedEntity
    F:java.lang.String name -> a
    F:java.lang.String entityName -> b
    F:com.mojang.datafixers.DSL$TypeReference type -> c
net.minecraft.util.datafix.fixes.NewVillageFix -> arb -> net.minecraft.util.datafix.fixes.DataConverterNewVillage
    M:com.mojang.datafixers.TypeRewriteRule cap(com.mojang.datafixers.types.templates.CompoundList$CompoundListType) -> a
net.minecraft.util.datafix.fixes.ObjectiveDisplayNameFix -> arc -> net.minecraft.util.datafix.fixes.DataConverterObjectiveDisplayName
net.minecraft.util.datafix.fixes.ObjectiveRenderTypeFix -> ard -> net.minecraft.util.datafix.fixes.DataConverterObjectiveRenderType
    M:net.minecraft.world.scores.criteria.IScoreboardCriteria$EnumScoreboardHealthDisplay getRenderType(java.lang.String) -> a
net.minecraft.util.datafix.fixes.OminousBannerBlockEntityRenameFix -> are -> net.minecraft.util.datafix.fixes.DataConverterOminousBannerBlockEntityRename
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.OminousBannerRenameFix -> arf -> net.minecraft.util.datafix.fixes.DataConverterOminousBannerRename
    M:com.mojang.serialization.Dynamic fixItemStackTag(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.OptionsAddTextBackgroundFix -> arg -> net.minecraft.util.datafix.fixes.DataConverterOptionsAddTextBackground
    M:double calculateBackground(java.lang.String) -> a
net.minecraft.util.datafix.fixes.OptionsForceVBOFix -> arh -> net.minecraft.util.datafix.fixes.DataConverterVBO
net.minecraft.util.datafix.fixes.OptionsKeyLwjgl3Fix -> ari -> net.minecraft.util.datafix.fixes.DataConverterKeybind
    F:java.lang.String KEY_UNKNOWN -> a
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap MAP -> b
net.minecraft.util.datafix.fixes.OptionsKeyTranslationFix -> arj -> net.minecraft.util.datafix.fixes.DataConverterKeybind2
net.minecraft.util.datafix.fixes.OptionsLowerCaseLanguageFix -> ark -> net.minecraft.util.datafix.fixes.DataConverterLang
net.minecraft.util.datafix.fixes.OptionsRenameFieldFix -> arl -> net.minecraft.util.datafix.fixes.DataConverterSettingRename
    F:java.lang.String fixName -> a
    F:java.lang.String fieldFrom -> b
    F:java.lang.String fieldTo -> c
net.minecraft.util.datafix.fixes.OverreachingTickFix -> arm -> net.minecraft.util.datafix.fixes.OverreachingTickFix
    M:com.mojang.serialization.Dynamic extractOverreachingTicks(com.mojang.serialization.Dynamic,int,int,java.util.Optional,java.lang.String) -> a
net.minecraft.util.datafix.fixes.PlayerUUIDFix -> arn -> net.minecraft.util.datafix.fixes.DataConverterPlayerUUID
net.minecraft.util.datafix.fixes.PoiTypeRemoveFix -> aro -> net.minecraft.util.datafix.fixes.PoiTypeRemoveFix
    F:java.util.function.Predicate typesToKeep -> a
    M:java.util.stream.Stream processRecords(java.util.stream.Stream) -> a
    M:boolean shouldKeepRecord(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.PoiTypeRenameFix -> arp -> net.minecraft.util.datafix.fixes.PoiTypeRenameFix
    F:java.util.function.Function renamer -> a
    M:java.util.stream.Stream processRecords(java.util.stream.Stream) -> a
net.minecraft.util.datafix.fixes.RecipesFix -> arq -> net.minecraft.util.datafix.fixes.DataConverterRecipes
    F:java.util.Map RECIPES -> a
net.minecraft.util.datafix.fixes.RecipesRenameFix -> arr -> net.minecraft.util.datafix.fixes.DataConverterRecipeBase
    F:java.lang.String name -> a
    F:java.util.function.Function renamer -> b
net.minecraft.util.datafix.fixes.RecipesRenameningFix -> ars -> net.minecraft.util.datafix.fixes.DataConverterRecipeRename
    F:java.util.Map RECIPES -> a
net.minecraft.util.datafix.fixes.RedstoneWireConnectionsFix -> art -> net.minecraft.util.datafix.fixes.DataConverterRedstoneConnections
    M:com.mojang.serialization.Dynamic updateRedstoneConnections(com.mojang.serialization.Dynamic) -> a
    M:boolean isConnected(java.lang.String) -> a
net.minecraft.util.datafix.fixes.References -> aru -> net.minecraft.util.datafix.fixes.DataConverterTypes
    F:com.mojang.datafixers.DSL$TypeReference LEVEL -> a
    F:com.mojang.datafixers.DSL$TypeReference PLAYER -> b
    F:com.mojang.datafixers.DSL$TypeReference CHUNK -> c
    F:com.mojang.datafixers.DSL$TypeReference HOTBAR -> d
    F:com.mojang.datafixers.DSL$TypeReference OPTIONS -> e
    F:com.mojang.datafixers.DSL$TypeReference STRUCTURE -> f
    F:com.mojang.datafixers.DSL$TypeReference STATS -> g
    F:com.mojang.datafixers.DSL$TypeReference SAVED_DATA -> h
    F:com.mojang.datafixers.DSL$TypeReference ADVANCEMENTS -> i
    F:com.mojang.datafixers.DSL$TypeReference POI_CHUNK -> j
    F:com.mojang.datafixers.DSL$TypeReference ENTITY_CHUNK -> k
    F:com.mojang.datafixers.DSL$TypeReference BLOCK_ENTITY -> l
    F:com.mojang.datafixers.DSL$TypeReference ITEM_STACK -> m
    F:com.mojang.datafixers.DSL$TypeReference BLOCK_STATE -> n
    F:com.mojang.datafixers.DSL$TypeReference ENTITY_NAME -> o
    F:com.mojang.datafixers.DSL$TypeReference ENTITY_TREE -> p
    F:com.mojang.datafixers.DSL$TypeReference ENTITY -> q
    F:com.mojang.datafixers.DSL$TypeReference BLOCK_NAME -> r
    F:com.mojang.datafixers.DSL$TypeReference ITEM_NAME -> s
    F:com.mojang.datafixers.DSL$TypeReference GAME_EVENT_NAME -> t
    F:com.mojang.datafixers.DSL$TypeReference UNTAGGED_SPAWNER -> u
    F:com.mojang.datafixers.DSL$TypeReference STRUCTURE_FEATURE -> v
    F:com.mojang.datafixers.DSL$TypeReference OBJECTIVE -> w
    F:com.mojang.datafixers.DSL$TypeReference TEAM -> x
    F:com.mojang.datafixers.DSL$TypeReference RECIPE -> y
    F:com.mojang.datafixers.DSL$TypeReference BIOME -> z
net.minecraft.util.datafix.fixes.RemoveGolemGossipFix -> arv -> net.minecraft.util.datafix.fixes.DataConverterRemoveGolemGossip
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    M:com.mojang.serialization.Dynamic fixValue(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.RenameBiomesFix -> arw -> net.minecraft.util.datafix.fixes.DataConverterBiomeBase
    F:java.lang.String name -> a
    F:java.util.Map biomes -> b
net.minecraft.util.datafix.fixes.RenamedCoralFansFix -> arx -> net.minecraft.util.datafix.fixes.DataConverterCoralFan
    F:java.util.Map RENAMED_IDS -> a
net.minecraft.util.datafix.fixes.RenamedCoralFix -> ary -> net.minecraft.util.datafix.fixes.DataConverterCoral
    F:java.util.Map RENAMED_IDS -> a
net.minecraft.util.datafix.fixes.ReorganizePoi -> arz -> net.minecraft.util.datafix.fixes.DataConverterPOI
    M:com.mojang.serialization.Dynamic cap(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.SavedDataFeaturePoolElementFix -> asa -> net.minecraft.util.datafix.fixes.SavedDataFeaturePoolElementFix
    F:java.util.regex.Pattern INDEX_PATTERN -> a
    F:java.util.Set PIECE_TYPE -> b
    F:java.util.Set FEATURES -> c
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> b
    M:com.mojang.serialization.Dynamic updateChildren(com.mojang.serialization.Dynamic) -> c
    M:java.util.stream.Stream updateChildren(java.util.stream.Stream) -> a
    M:com.mojang.serialization.OptionalDynamic get(com.mojang.serialization.Dynamic,java.lang.String[]) -> a
    M:com.mojang.serialization.Dynamic fixFeature(com.mojang.serialization.Dynamic) -> a
    M:java.util.Optional getReplacement(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
net.minecraft.util.datafix.fixes.SavedDataUUIDFix -> asb -> net.minecraft.util.datafix.fixes.DataConverterSavedDataUUID
    F:org.slf4j.Logger LOGGER -> b
net.minecraft.util.datafix.fixes.SavedDataVillageCropFix -> asc -> net.minecraft.util.datafix.fixes.DataConverterVillage
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.serialization.Dynamic updateChildren(com.mojang.serialization.Dynamic) -> b
    M:java.util.stream.Stream updateChildren(java.util.stream.Stream) -> a
    M:com.mojang.serialization.Dynamic updateSingleField(com.mojang.serialization.Dynamic) -> c
    M:com.mojang.serialization.Dynamic updateDoubleField(com.mojang.serialization.Dynamic) -> d
    M:com.mojang.serialization.Dynamic updateCrop(com.mojang.serialization.Dynamic,java.lang.String) -> a
net.minecraft.util.datafix.fixes.SimpleEntityRenameFix -> asd -> net.minecraft.util.datafix.fixes.DataConverterEntityNameAbstract
    M:com.mojang.datafixers.util.Pair fix(java.lang.String,com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.SimpleRenameFix -> ase -> net.minecraft.util.datafix.fixes.SimpleRenameFix
    F:java.lang.String fixerName -> a
    F:java.util.Map nameMapping -> b
    F:com.mojang.datafixers.DSL$TypeReference typeReference -> c
net.minecraft.util.datafix.fixes.SimplestEntityRenameFix -> asf -> net.minecraft.util.datafix.fixes.DataConverterEntityRenameAbstract
    F:java.lang.String name -> a
net.minecraft.util.datafix.fixes.SpawnerDataFix -> asg -> net.minecraft.util.datafix.fixes.SpawnerDataFix
    M:com.mojang.datafixers.Typed wrapEntityToSpawnData(com.mojang.datafixers.types.Type,com.mojang.datafixers.Typed) -> a
    M:com.mojang.datafixers.Typed wrapSpawnPotentialsToWeightedEntries(com.mojang.datafixers.types.Type,com.mojang.datafixers.Typed) -> b
net.minecraft.util.datafix.fixes.StatsCounterFix -> ash -> net.minecraft.util.datafix.fixes.DataConverterStatistic
    F:java.util.Set SKIP -> a
    F:java.util.Map CUSTOM_MAP -> b
    F:java.lang.String BLOCK_KEY -> c
    F:java.lang.String NEW_BLOCK_KEY -> d
    F:java.util.Map ITEM_KEYS -> e
    F:java.util.Map ENTITY_KEYS -> f
    F:java.util.Map ENTITIES -> g
    F:java.lang.String NEW_CUSTOM_KEY -> h
    M:java.lang.String upgradeItem(java.lang.String) -> a
    M:java.lang.String upgradeBlock(java.lang.String) -> b
net.minecraft.util.datafix.fixes.StatsRenameFix -> asi -> net.minecraft.util.datafix.fixes.StatsRenameFix
    F:java.lang.String name -> a
    F:java.util.Map renames -> b
    M:com.mojang.datafixers.TypeRewriteRule createCriteriaRule() -> a
    M:com.mojang.datafixers.TypeRewriteRule createStatRule() -> b
net.minecraft.util.datafix.fixes.StriderGravityFix -> asj -> net.minecraft.util.datafix.fixes.DataConverterStriderGravity
    M:com.mojang.serialization.Dynamic fixTag(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.StructureReferenceCountFix -> ask -> net.minecraft.util.datafix.fixes.DataConverterStructureReference
    M:com.mojang.serialization.Dynamic setCountToAtLeastOne(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.StructureSettingsFlattenFix -> asl -> net.minecraft.util.datafix.fixes.StructureSettingsFlattenFix
    M:com.mojang.datafixers.util.Pair fixDimension(com.mojang.datafixers.util.Pair) -> a
    M:com.mojang.serialization.Dynamic fixStructures(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.StructuresBecomeConfiguredFix -> asm -> net.minecraft.util.datafix.fixes.StructuresBecomeConfiguredFix
    F:java.util.Map CONVERSION_MAP -> a
    M:com.mojang.serialization.Dynamic fix(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.serialization.Dynamic updateStarts(com.mojang.serialization.Dynamic,com.mojang.serialization.Dynamic) -> a
    M:com.mojang.datafixers.util.Pair updateStart(com.mojang.datafixers.util.Pair,com.mojang.serialization.Dynamic) -> a
    M:com.mojang.serialization.Dynamic updateReferences(com.mojang.serialization.Dynamic,com.mojang.serialization.Dynamic) -> b
    M:com.mojang.datafixers.util.Pair updateReference(com.mojang.datafixers.util.Pair,com.mojang.serialization.Dynamic) -> b
    M:com.mojang.serialization.Dynamic findUpdatedStructureType(com.mojang.datafixers.util.Pair,com.mojang.serialization.Dynamic) -> c
    M:java.util.Optional guessConfiguration(com.mojang.serialization.Dynamic,net.minecraft.util.datafix.fixes.StructuresBecomeConfiguredFix$Conversion) -> a
net.minecraft.util.datafix.fixes.StructuresBecomeConfiguredFix$Conversion -> asm$a -> net.minecraft.util.datafix.fixes.StructuresBecomeConfiguredFix$a
    F:java.util.Map biomeMapping -> a
    F:java.lang.String fallback -> b
    M:net.minecraft.util.datafix.fixes.StructuresBecomeConfiguredFix$Conversion trivial(java.lang.String) -> a
    M:net.minecraft.util.datafix.fixes.StructuresBecomeConfiguredFix$Conversion biomeMapped(java.util.Map,java.lang.String) -> a
    M:java.util.Map unpack(java.util.Map) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.Map biomeMapping() -> a
    M:java.lang.String fallback() -> b
net.minecraft.util.datafix.fixes.TeamDisplayNameFix -> asn -> net.minecraft.util.datafix.fixes.DataConverterTeamDisplayName
net.minecraft.util.datafix.fixes.TrappedChestBlockEntityFix -> aso -> net.minecraft.util.datafix.fixes.DataConverterTrappedChest
    F:org.slf4j.Logger LOGGER -> a
    F:int SIZE -> b
    F:short SIZE_BITS -> c
net.minecraft.util.datafix.fixes.TrappedChestBlockEntityFix$TrappedChestSection -> aso$a -> net.minecraft.util.datafix.fixes.DataConverterTrappedChest$a
    F:it.unimi.dsi.fastutil.ints.IntSet chestIds -> h
    M:boolean skippable() -> a
    M:boolean isTrappedChest(int) -> a
net.minecraft.util.datafix.fixes.VariantRenameFix -> asp -> net.minecraft.util.datafix.fixes.VariantRenameFix
    F:java.util.Map renames -> a
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.VillagerDataFix -> asq -> net.minecraft.util.datafix.fixes.DataConverterVillagerProfession
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    M:java.lang.String upgradeData(int,int) -> a
net.minecraft.util.datafix.fixes.VillagerFollowRangeFix -> asr -> net.minecraft.util.datafix.fixes.DataConverterVillagerFollowRange
    F:double ORIGINAL_VALUE -> a
    F:double NEW_BASE_VALUE -> b
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    M:com.mojang.serialization.Dynamic fixValue(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.VillagerRebuildLevelAndXpFix -> ass -> net.minecraft.util.datafix.fixes.DataConverterVillagerLevelXp
    F:int TRADES_PER_LEVEL -> a
    M:int getMinXpPerLevel(int) -> a
    M:com.mojang.datafixers.Typed addLevel(com.mojang.datafixers.Typed,int) -> a
    M:com.mojang.datafixers.Typed addXpFromLevel(com.mojang.datafixers.Typed,int) -> b
net.minecraft.util.datafix.fixes.VillagerTradeFix -> ast -> net.minecraft.util.datafix.fixes.DataConverterVillagerTrade
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    M:com.mojang.datafixers.Typed updateItemStack(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.WallPropertyFix -> asu -> net.minecraft.util.datafix.fixes.DataConverterWallProperty
    F:java.util.Set WALL_BLOCKS -> a
    M:java.lang.String mapProperty(java.lang.String) -> a
    M:com.mojang.serialization.Dynamic fixWallProperty(com.mojang.serialization.Dynamic,java.lang.String) -> a
    M:com.mojang.serialization.Dynamic upgradeBlockStateTag(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.WeaponSmithChestLootTableFix -> asv -> net.minecraft.util.datafix.fixes.WeaponSmithChestLootTableFix
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.WorldGenSettingsDisallowOldCustomWorldsFix -> asw -> net.minecraft.util.datafix.fixes.WorldGenSettingsDisallowOldCustomWorldsFix
net.minecraft.util.datafix.fixes.WorldGenSettingsFix -> asx -> net.minecraft.util.datafix.fixes.DataConverterWorldGenSettingsBuilding
    F:java.lang.String VILLAGE -> a
    F:java.lang.String DESERT_PYRAMID -> b
    F:java.lang.String IGLOO -> c
    F:java.lang.String JUNGLE_TEMPLE -> d
    F:java.lang.String SWAMP_HUT -> e
    F:java.lang.String PILLAGER_OUTPOST -> f
    F:java.lang.String END_CITY -> g
    F:java.lang.String WOODLAND_MANSION -> h
    F:java.lang.String OCEAN_MONUMENT -> i
    F:com.google.common.collect.ImmutableMap DEFAULTS -> j
    M:com.mojang.serialization.Dynamic noise(long,com.mojang.serialization.DynamicLike,com.mojang.serialization.Dynamic,com.mojang.serialization.Dynamic) -> a
    M:com.mojang.serialization.Dynamic vanillaBiomeSource(com.mojang.serialization.Dynamic,long,boolean,boolean) -> a
    M:com.mojang.serialization.Dynamic fix(com.mojang.serialization.Dynamic) -> a
    M:com.mojang.serialization.Dynamic defaultOverworld(com.mojang.serialization.Dynamic,long) -> a
    M:java.lang.Object vanillaLevels(com.mojang.serialization.Dynamic,long,com.mojang.serialization.Dynamic,boolean) -> a
    M:java.util.Map fixFlatStructures(com.mojang.serialization.DynamicOps,com.mojang.serialization.OptionalDynamic) -> a
    M:int getInt(java.lang.String,int) -> a
    M:int getInt(java.lang.String,int,int) -> a
    M:void setSpacing(java.util.Map,java.lang.String,java.lang.String,int) -> a
net.minecraft.util.datafix.fixes.WorldGenSettingsFix$StructureFeatureConfiguration -> asx$a -> net.minecraft.util.datafix.fixes.DataConverterWorldGenSettingsBuilding$a
    F:com.mojang.serialization.Codec CODEC -> a
    F:int spacing -> b
    F:int separation -> c
    F:int salt -> d
    M:com.mojang.serialization.Dynamic serialize(com.mojang.serialization.DynamicOps) -> a
net.minecraft.util.datafix.fixes.WorldGenSettingsHeightAndBiomeFix -> asy -> net.minecraft.util.datafix.fixes.WorldGenSettingsHeightAndBiomeFix
    F:java.lang.String NAME -> b
    F:java.lang.String WAS_PREVIOUSLY_INCREASED_KEY -> a
    M:com.mojang.serialization.Dynamic updateLayers(com.mojang.serialization.Dynamic) -> a
net.minecraft.util.datafix.fixes.WriteAndReadFix -> asz -> net.minecraft.util.datafix.fixes.DataConverterShoulderEntity
    F:java.lang.String name -> a
    F:com.mojang.datafixers.DSL$TypeReference type -> b
net.minecraft.util.datafix.fixes.ZombieVillagerRebuildXpFix -> ata -> net.minecraft.util.datafix.fixes.DataConverterZombieVillagerLevelXp
    M:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.schemas.NamespacedSchema -> atd -> net.minecraft.util.datafix.schemas.DataConverterSchemaNamed
    F:com.mojang.serialization.codecs.PrimitiveCodec NAMESPACED_STRING_CODEC -> a
    F:com.mojang.datafixers.types.Type NAMESPACED_STRING -> b
    M:java.lang.String ensureNamespaced(java.lang.String) -> a
    M:com.mojang.datafixers.types.Type namespacedString() -> a
    M:com.mojang.serialization.DataResult read(com.mojang.serialization.DynamicOps,java.lang.Object) -> read
    M:java.lang.Object write(com.mojang.serialization.DynamicOps,java.lang.String) -> a
    M:java.lang.Object write(com.mojang.serialization.DynamicOps,java.lang.Object) -> write
net.minecraft.util.datafix.schemas.V100 -> ate -> net.minecraft.util.datafix.schemas.DataConverterSchemaV100
    M:com.mojang.datafixers.types.templates.TypeTemplate equipment(com.mojang.datafixers.schemas.Schema) -> a
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V102 -> atf -> net.minecraft.util.datafix.schemas.DataConverterSchemaV102
net.minecraft.util.datafix.schemas.V1022 -> atg -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1022
net.minecraft.util.datafix.schemas.V106 -> ath -> net.minecraft.util.datafix.schemas.DataConverterSchemaV106
net.minecraft.util.datafix.schemas.V107 -> ati -> net.minecraft.util.datafix.schemas.DataConverterSchemaV107
net.minecraft.util.datafix.schemas.V1125 -> atj -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1125
net.minecraft.util.datafix.schemas.V135 -> atk -> net.minecraft.util.datafix.schemas.DataConverterSchemaV135
net.minecraft.util.datafix.schemas.V143 -> atl -> net.minecraft.util.datafix.schemas.DataConverterSchemaV143
net.minecraft.util.datafix.schemas.V1451 -> atm -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1451
net.minecraft.util.datafix.schemas.V1451_1 -> atn -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1451_1
net.minecraft.util.datafix.schemas.V1451_2 -> ato -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1451_2
net.minecraft.util.datafix.schemas.V1451_3 -> atp -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1451_3
net.minecraft.util.datafix.schemas.V1451_4 -> atq -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1451_4
net.minecraft.util.datafix.schemas.V1451_5 -> atr -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1451_5
net.minecraft.util.datafix.schemas.V1451_6 -> ats -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1451_6
    F:java.lang.String SPECIAL_OBJECTIVE_MARKER -> b
    F:com.mojang.datafixers.types.templates.Hook$HookFunction UNPACK_OBJECTIVE_ID -> c
    F:com.mojang.datafixers.types.templates.Hook$HookFunction REPACK_OBJECTIVE_ID -> d
    M:java.util.Map createCriterionTypes(com.mojang.datafixers.schemas.Schema) -> a
    M:java.lang.Object apply(com.mojang.serialization.DynamicOps,java.lang.Object) -> apply
    M:java.lang.String packWithDot(java.lang.String) -> a
    M:java.lang.Object apply(com.mojang.serialization.DynamicOps,java.lang.Object) -> apply
net.minecraft.util.datafix.schemas.V1451_7 -> att -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1451_7
net.minecraft.util.datafix.schemas.V1460 -> atu -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1460
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    M:void registerInventory(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> b
net.minecraft.util.datafix.schemas.V1466 -> atv -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1466
net.minecraft.util.datafix.schemas.V1470 -> atw -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1470
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V1481 -> atx -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1481
net.minecraft.util.datafix.schemas.V1483 -> aty -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1483
net.minecraft.util.datafix.schemas.V1486 -> atz -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1486
net.minecraft.util.datafix.schemas.V1510 -> aua -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1510
net.minecraft.util.datafix.schemas.V1800 -> aub -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1800
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V1801 -> auc -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1801
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V1904 -> aud -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1904
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V1906 -> aue -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1906
    M:void registerInventory(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V1909 -> auf -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1909
net.minecraft.util.datafix.schemas.V1920 -> aug -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1920
    M:void registerInventory(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V1928 -> auh -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1928
    M:com.mojang.datafixers.types.templates.TypeTemplate equipment(com.mojang.datafixers.schemas.Schema) -> a
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V1929 -> aui -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1929
net.minecraft.util.datafix.schemas.V1931 -> auj -> net.minecraft.util.datafix.schemas.DataConverterSchemaV1931
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V2100 -> auk -> net.minecraft.util.datafix.schemas.DataConverterSchemaV2100
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V2501 -> aul -> net.minecraft.util.datafix.schemas.DataConverterSchemaV2501
    M:void registerFurnace(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V2502 -> aum -> net.minecraft.util.datafix.schemas.DataConverterSchemaV2502
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V2505 -> aun -> net.minecraft.util.datafix.schemas.DataConverterSchemaV2505
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V2509 -> auo -> net.minecraft.util.datafix.schemas.DataConverterSchemaV2509
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V2519 -> aup -> net.minecraft.util.datafix.schemas.DataConverterSchemaV2519
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V2522 -> auq -> net.minecraft.util.datafix.schemas.DataConverterSchemaV2522
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V2551 -> aur -> net.minecraft.util.datafix.schemas.DataConverterSchemaV2551
net.minecraft.util.datafix.schemas.V2568 -> aus -> net.minecraft.util.datafix.schemas.DataConverterSchemaV2568
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V2571 -> aut -> net.minecraft.util.datafix.schemas.V2571
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V2684 -> auu -> net.minecraft.util.datafix.schemas.V2684
net.minecraft.util.datafix.schemas.V2686 -> auv -> net.minecraft.util.datafix.schemas.V2686
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V2688 -> auw -> net.minecraft.util.datafix.schemas.V2688
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V2704 -> auy -> net.minecraft.util.datafix.schemas.V2704
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V2707 -> auz -> net.minecraft.util.datafix.schemas.V2707
    M:void registerEntity(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V2831 -> ava -> net.minecraft.util.datafix.schemas.V2831
net.minecraft.util.datafix.schemas.V2832 -> avb -> net.minecraft.util.datafix.schemas.V2832
net.minecraft.util.datafix.schemas.V2842 -> avc -> net.minecraft.util.datafix.schemas.V2842
net.minecraft.util.datafix.schemas.V3076 -> avd -> net.minecraft.util.datafix.schemas.V3076
net.minecraft.util.datafix.schemas.V3078 -> ave -> net.minecraft.util.datafix.schemas.V3078
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V3081 -> avf -> net.minecraft.util.datafix.schemas.V3081
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V3082 -> avg -> net.minecraft.util.datafix.schemas.V3082
net.minecraft.util.datafix.schemas.V3083 -> avh -> net.minecraft.util.datafix.schemas.V3083
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V501 -> avi -> net.minecraft.util.datafix.schemas.DataConverterSchemaV501
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V700 -> avj -> net.minecraft.util.datafix.schemas.DataConverterSchemaV700
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V701 -> avk -> net.minecraft.util.datafix.schemas.DataConverterSchemaV701
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V702 -> avl -> net.minecraft.util.datafix.schemas.DataConverterSchemaV702
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V703 -> avm -> net.minecraft.util.datafix.schemas.DataConverterSchemaV703
net.minecraft.util.datafix.schemas.V704 -> avn -> net.minecraft.util.datafix.schemas.DataConverterSchemaV704
    F:java.util.Map ITEM_TO_BLOCKENTITY -> a
    F:com.mojang.datafixers.types.templates.Hook$HookFunction ADD_NAMES -> b
    M:void registerInventory(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    M:java.lang.Object apply(com.mojang.serialization.DynamicOps,java.lang.Object) -> apply
net.minecraft.util.datafix.schemas.V705 -> avo -> net.minecraft.util.datafix.schemas.DataConverterSchemaV705
    F:com.mojang.datafixers.types.templates.Hook$HookFunction ADD_NAMES -> b
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    M:void registerThrowableProjectile(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> b
    M:java.lang.Object apply(com.mojang.serialization.DynamicOps,java.lang.Object) -> apply
net.minecraft.util.datafix.schemas.V808 -> avp -> net.minecraft.util.datafix.schemas.DataConverterSchemaV808
    M:void registerInventory(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V99 -> avq -> net.minecraft.util.datafix.schemas.DataConverterSchemaV99
    F:org.slf4j.Logger LOGGER -> b
    F:java.util.Map ITEM_TO_BLOCKENTITY -> c
    F:com.mojang.datafixers.types.templates.Hook$HookFunction ADD_NAMES -> a
    M:com.mojang.datafixers.types.templates.TypeTemplate equipment(com.mojang.datafixers.schemas.Schema) -> a
    M:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    M:void registerThrowableProjectile(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> b
    M:void registerMinecart(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> c
    M:void registerInventory(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> d
    M:java.lang.Object addNames(com.mojang.serialization.Dynamic,java.util.Map,java.lang.String) -> a
    M:java.lang.Object apply(com.mojang.serialization.DynamicOps,java.lang.Object) -> apply
net.minecraft.util.monitoring.jmx.MinecraftServerStatistics -> avs -> net.minecraft.util.monitoring.jmx.MinecraftServerBeans
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.server.MinecraftServer server -> b
    F:javax.management.MBeanInfo mBeanInfo -> c
    F:java.util.Map attributeDescriptionByName -> d
    M:void registerJmxMonitoring(net.minecraft.server.MinecraftServer) -> a
    M:float getAverageTickTime() -> a
    M:java.lang.Object invoke(java.lang.String,java.lang.Object[],java.lang.String[]) -> invoke
net.minecraft.util.monitoring.jmx.MinecraftServerStatistics$AttributeDescription -> avs$a -> net.minecraft.util.monitoring.jmx.MinecraftServerBeans$a
    F:java.lang.String name -> a
    F:java.util.function.Supplier getter -> b
    F:java.lang.String description -> c
    F:java.lang.Class type -> d
    M:javax.management.MBeanAttributeInfo asMBeanAttributeInfo() -> a
net.minecraft.util.profiling.ActiveProfiler -> avv -> net.minecraft.util.profiling.MethodProfiler
    F:long WARNING_TIME_NANOS -> a
    F:org.slf4j.Logger LOGGER -> c
    F:java.util.List paths -> d
    F:it.unimi.dsi.fastutil.longs.LongList startTimes -> e
    F:java.util.Map entries -> f
    F:java.util.function.IntSupplier getTickTime -> g
    F:java.util.function.LongSupplier getRealTime -> h
    F:long startTimeNano -> i
    F:int startTimeTicks -> j
    F:java.lang.String path -> k
    F:boolean started -> l
    F:net.minecraft.util.profiling.ActiveProfiler$PathEntry currentEntry -> m
    F:boolean warn -> n
    F:java.util.Set chartedPaths -> o
    M:void startTick() -> a
    M:void endTick() -> b
    M:void push(java.lang.String) -> a
    M:void push(java.util.function.Supplier) -> a
    M:void markForCharting(net.minecraft.util.profiling.metrics.MetricCategory) -> a
    M:void pop() -> c
    M:void popPush(java.lang.String) -> b
    M:void popPush(java.util.function.Supplier) -> b
    M:net.minecraft.util.profiling.ActiveProfiler$PathEntry getCurrentEntry() -> f
    M:void incrementCounter(java.lang.String,int) -> a
    M:void incrementCounter(java.util.function.Supplier,int) -> a
    M:net.minecraft.util.profiling.MethodProfilerResults getResults() -> d
    M:net.minecraft.util.profiling.ActiveProfiler$PathEntry getEntry(java.lang.String) -> c
    M:java.util.Set getChartedPaths() -> e
net.minecraft.util.profiling.ActiveProfiler$PathEntry -> avv$a -> net.minecraft.util.profiling.MethodProfiler$a
    F:long maxDuration -> a
    F:long minDuration -> b
    F:long accumulatedDuration -> c
    F:long count -> d
    F:it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap counters -> e
    M:long getDuration() -> a
    M:long getMaxDuration() -> b
    M:long getCount() -> c
    M:it.unimi.dsi.fastutil.objects.Object2LongMap getCounters() -> d
net.minecraft.util.profiling.ContinuousProfiler -> avw -> net.minecraft.util.profiling.GameProfilerSwitcher
    F:java.util.function.LongSupplier realTime -> a
    F:java.util.function.IntSupplier tickCount -> b
    F:net.minecraft.util.profiling.GameProfilerFillerActive profiler -> c
    M:boolean isEnabled() -> a
    M:void disable() -> b
    M:void enable() -> c
    M:net.minecraft.util.profiling.GameProfilerFiller getFiller() -> d
    M:net.minecraft.util.profiling.MethodProfilerResults getResults() -> e
net.minecraft.util.profiling.EmptyProfileResults -> avx -> net.minecraft.util.profiling.MethodProfilerResultsEmpty
    F:net.minecraft.util.profiling.MethodProfilerResultsEmpty EMPTY -> a
    M:java.util.List getTimes(java.lang.String) -> a
    M:boolean saveResults(java.nio.file.Path) -> a
    M:long getStartTimeNano() -> a
    M:int getStartTimeTicks() -> b
    M:long getEndTimeNano() -> c
    M:int getEndTimeTicks() -> d
    M:java.lang.String getProfilerResults() -> e
net.minecraft.util.profiling.FilledProfileResults -> avy -> net.minecraft.util.profiling.MethodProfilerResultsFilled
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.util.profiling.MethodProfilerResult EMPTY -> b
    F:com.google.common.base.Splitter SPLITTER -> c
    F:java.util.Comparator COUNTER_ENTRY_COMPARATOR -> e
    F:java.util.Map entries -> f
    F:long startTimeNano -> g
    F:int startTimeTicks -> h
    F:long endTimeNano -> i
    F:int endTimeTicks -> j
    F:int tickDuration -> k
    M:net.minecraft.util.profiling.MethodProfilerResult getEntry(java.lang.String) -> c
    M:java.util.List getTimes(java.lang.String) -> a
    M:boolean isDirectChild(java.lang.String,java.lang.String) -> a
    M:java.util.Map getCounterValues() -> h
    M:long getStartTimeNano() -> a
    M:int getStartTimeTicks() -> b
    M:long getEndTimeNano() -> c
    M:int getEndTimeTicks() -> d
    M:boolean saveResults(java.nio.file.Path) -> a
    M:java.lang.String getProfilerResults(long,int) -> a
    M:java.lang.String getProfilerResults() -> e
    M:java.lang.StringBuilder indentLine(java.lang.StringBuilder,int) -> a
    M:void appendProfilerResults(int,java.lang.String,java.lang.StringBuilder) -> a
    M:void appendCounterResults(int,java.lang.String,net.minecraft.util.profiling.FilledProfileResults$CounterCollector,int,java.lang.StringBuilder) -> a
    M:void appendCounters(java.util.Map,java.lang.StringBuilder,int) -> a
    M:java.lang.String getComment() -> i
    M:int getTickDuration() -> f
    M:long getDuration() -> a
    M:long getMaxDuration() -> b
    M:long getCount() -> c
    M:it.unimi.dsi.fastutil.objects.Object2LongMap getCounters() -> d
net.minecraft.util.profiling.FilledProfileResults$CounterCollector -> avy$a -> net.minecraft.util.profiling.MethodProfilerResultsFilled$a
    F:long selfValue -> a
    F:long totalValue -> b
    F:java.util.Map children -> c
    M:void addValue(java.util.Iterator,long) -> a
net.minecraft.util.profiling.InactiveProfiler -> avz -> net.minecraft.util.profiling.GameProfilerDisabled
    F:net.minecraft.util.profiling.GameProfilerDisabled INSTANCE -> a
    M:void startTick() -> a
    M:void endTick() -> b
    M:void push(java.lang.String) -> a
    M:void push(java.util.function.Supplier) -> a
    M:void markForCharting(net.minecraft.util.profiling.metrics.MetricCategory) -> a
    M:void pop() -> c
    M:void popPush(java.lang.String) -> b
    M:void popPush(java.util.function.Supplier) -> b
    M:void incrementCounter(java.lang.String,int) -> a
    M:void incrementCounter(java.util.function.Supplier,int) -> a
    M:net.minecraft.util.profiling.MethodProfilerResults getResults() -> d
    M:net.minecraft.util.profiling.ActiveProfiler$PathEntry getEntry(java.lang.String) -> c
    M:java.util.Set getChartedPaths() -> e
net.minecraft.util.profiling.ProfileCollector -> awa -> net.minecraft.util.profiling.GameProfilerFillerActive
net.minecraft.util.profiling.ProfileResults -> awb -> net.minecraft.util.profiling.MethodProfilerResults
    F:char PATH_SEPARATOR -> d
    M:long getNanoDuration() -> g
    M:int getTickDuration() -> f
    M:java.lang.String demanglePath(java.lang.String) -> b
net.minecraft.util.profiling.ProfilerFiller -> awc -> net.minecraft.util.profiling.GameProfilerFiller
    F:java.lang.String ROOT -> b
    M:void incrementCounter(java.lang.String) -> d
    M:void incrementCounter(java.util.function.Supplier) -> c
    M:net.minecraft.util.profiling.GameProfilerFiller tee(net.minecraft.util.profiling.GameProfilerFiller,net.minecraft.util.profiling.GameProfilerFiller) -> a
    M:void startTick() -> a
    M:void endTick() -> b
    M:void push(java.lang.String) -> a
    M:void push(java.util.function.Supplier) -> a
    M:void markForCharting(net.minecraft.util.profiling.metrics.MetricCategory) -> a
    M:void pop() -> c
    M:void popPush(java.lang.String) -> b
    M:void popPush(java.util.function.Supplier) -> b
    M:void incrementCounter(java.lang.String,int) -> a
    M:void incrementCounter(java.util.function.Supplier,int) -> a
net.minecraft.util.profiling.ProfilerPathEntry -> awd -> net.minecraft.util.profiling.MethodProfilerResult
net.minecraft.util.profiling.ResultField -> awe -> net.minecraft.util.profiling.MethodProfilerResultsField
    F:double percentage -> a
    F:double globalPercentage -> b
    F:long count -> c
    F:java.lang.String name -> d
    M:int compareTo(net.minecraft.util.profiling.MethodProfilerResultsField) -> a
    M:int getColor() -> a
net.minecraft.util.profiling.SingleTickProfiler -> awf -> net.minecraft.util.profiling.GameProfilerTick
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.function.LongSupplier realTime -> b
    F:long saveThreshold -> c
    F:int tick -> d
    F:java.io.File location -> e
    F:net.minecraft.util.profiling.GameProfilerFillerActive profiler -> f
    M:net.minecraft.util.profiling.GameProfilerFiller startTick() -> a
    M:void endTick() -> b
    M:net.minecraft.util.profiling.GameProfilerTick createTickProfiler(java.lang.String) -> a
    M:net.minecraft.util.profiling.GameProfilerFiller decorateFiller(net.minecraft.util.profiling.GameProfilerFiller,net.minecraft.util.profiling.GameProfilerTick) -> a
net.minecraft.util.profiling.jfr.Environment -> awg -> net.minecraft.util.profiling.jfr.Environment
    F:net.minecraft.util.profiling.jfr.Environment CLIENT -> a
    F:net.minecraft.util.profiling.jfr.Environment SERVER -> b
    F:java.lang.String description -> c
    M:net.minecraft.util.profiling.jfr.Environment from(net.minecraft.server.MinecraftServer) -> a
    M:java.lang.String getDescription() -> a
net.minecraft.util.profiling.jfr.JfrProfiler -> awh -> net.minecraft.util.profiling.jfr.JfrProfiler
    F:org.slf4j.Logger LOGGER -> f
    F:java.lang.String ROOT_CATEGORY -> a
    F:java.lang.String WORLD_GEN_CATEGORY -> b
    F:java.lang.String TICK_CATEGORY -> c
    F:java.lang.String NETWORK_CATEGORY -> d
    F:java.util.List CUSTOM_EVENTS -> g
    F:java.lang.String FLIGHT_RECORDER_CONFIG -> h
    F:java.time.format.DateTimeFormatter DATE_TIME_FORMATTER -> i
    F:net.minecraft.util.profiling.jfr.JfrProfiler INSTANCE -> j
    F:jdk.jfr.Recording recording -> k
    F:float currentAverageTickTime -> l
    F:java.util.Map networkTrafficByAddress -> m
    F:net.minecraft.util.profiling.jfr.SummaryReporter summaryReporter -> a
    M:net.minecraft.util.profiling.jfr.JfrProfiler getInstance() -> a
    M:boolean start(net.minecraft.util.profiling.jfr.Environment) -> a
    M:java.nio.file.Path stop() -> b
    M:boolean isRunning() -> c
    M:boolean isAvailable() -> d
    M:boolean start(java.io.Reader,net.minecraft.util.profiling.jfr.Environment) -> a
    M:void setupSummaryListener() -> f
    M:void onServerTick(float) -> a
    M:void onPacketReceived(int,int,java.net.SocketAddress,int) -> a
    M:void onPacketSent(int,int,java.net.SocketAddress,int) -> b
    M:net.minecraft.util.profiling.jfr.event.NetworkSummaryEvent$SumAggregation networkStatFor(java.net.SocketAddress) -> a
    M:net.minecraft.util.profiling.jfr.callback.ProfiledDuration onWorldLoadedStarted() -> e
    M:net.minecraft.util.profiling.jfr.callback.ProfiledDuration onChunkGenerate(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.resources.ResourceKey,java.lang.String) -> a
net.minecraft.util.profiling.jfr.JvmProfiler -> awi -> net.minecraft.util.profiling.jfr.JvmProfiler
    F:net.minecraft.util.profiling.jfr.JvmProfiler INSTANCE -> e
net.minecraft.util.profiling.jfr.JvmProfiler$NoOpProfiler -> awi$a -> net.minecraft.util.profiling.jfr.JvmProfiler$a
    F:org.slf4j.Logger LOGGER -> b
    F:net.minecraft.util.profiling.jfr.callback.ProfiledDuration noOpCommit -> a
    M:boolean start(net.minecraft.util.profiling.jfr.Environment) -> a
    M:java.nio.file.Path stop() -> b
    M:boolean isRunning() -> c
    M:boolean isAvailable() -> d
    M:void onPacketReceived(int,int,java.net.SocketAddress,int) -> a
    M:void onPacketSent(int,int,java.net.SocketAddress,int) -> b
    M:void onServerTick(float) -> a
    M:net.minecraft.util.profiling.jfr.callback.ProfiledDuration onWorldLoadedStarted() -> e
    M:net.minecraft.util.profiling.jfr.callback.ProfiledDuration onChunkGenerate(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.resources.ResourceKey,java.lang.String) -> a
net.minecraft.util.profiling.jfr.Percentiles -> awj -> net.minecraft.util.profiling.jfr.Percentiles
    F:com.google.common.math.Quantiles$ScaleAndIndexes DEFAULT_INDEXES -> a
    M:java.util.Map evaluate(long[]) -> a
    M:java.util.Map evaluate(double[]) -> a
    M:java.util.Map sorted(java.util.Map) -> a
net.minecraft.util.profiling.jfr.SummaryReporter -> awk -> net.minecraft.util.profiling.jfr.SummaryReporter
    F:org.slf4j.Logger LOGGER -> a
    F:java.lang.Runnable onDeregistration -> b
    M:void recordingStopped(java.nio.file.Path) -> a
    M:void infoWithFallback(java.util.function.Supplier) -> a
    M:void warnWithFallback(java.util.function.Supplier,java.lang.Throwable) -> a
net.minecraft.util.profiling.jfr.callback.ProfiledDuration -> awl -> net.minecraft.util.profiling.jfr.callback.ProfiledDuration
    F:java.lang.String level -> level
    F:java.lang.String WORLD_POS_X -> a
    F:java.lang.String WORLD_POS_Z -> b
    F:java.lang.String CHUNK_POS_X -> c
    F:java.lang.String CHUNK_POS_Z -> d
    F:java.lang.String STATUS -> e
    F:java.lang.String LEVEL -> f
    F:java.lang.String REMOTE_ADDRESS -> a
    F:java.lang.String SENT_BYTES -> b
    F:java.lang.String SENT_PACKETS -> d
    F:java.lang.String RECEIVED_BYTES -> c
    F:java.lang.String RECEIVED_PACKETS -> e
    F:java.util.concurrent.atomic.AtomicLong sentBytes -> a
    F:java.util.concurrent.atomic.AtomicInteger sentPackets -> b
    F:java.util.concurrent.atomic.AtomicLong receivedBytes -> c
    F:java.util.concurrent.atomic.AtomicInteger receivedPackets -> d
    F:net.minecraft.util.profiling.jfr.event.NetworkSummaryEvent event -> e
    M:void trackSentPacket(int) -> a
    M:void trackReceivedPacket(int) -> b
    M:void commitEvent() -> a
net.minecraft.util.profiling.jfr.event.PacketEvent -> awn -> net.minecraft.util.profiling.jfr.event.PacketEvent
    F:int bytes -> bytes
net.minecraft.util.profiling.jfr.event.PacketEvent$Fields -> awn$a -> net.minecraft.util.profiling.jfr.event.PacketEvent$a
    F:java.lang.String REMOTE_ADDRESS -> a
    F:java.lang.String PROTOCOL_ID -> b
    F:java.lang.String PACKET_ID -> c
    F:java.lang.String BYTES -> d
    F:java.lang.String AVERAGE_TICK_DURATION -> a
net.minecraft.util.profiling.jfr.parse.JfrStatsParser -> awq -> net.minecraft.util.profiling.jfr.parse.JfrStatsParser
    F:java.time.Instant recordingStarted -> a
    F:java.time.Instant recordingEnded -> b
    F:java.util.List chunkGenStats -> c
    F:java.util.List cpuLoadStat -> d
    F:java.util.Map receivedPackets -> e
    F:java.util.Map sentPackets -> f
    F:java.util.List fileWrites -> g
    F:java.util.List fileReads -> h
    F:int garbageCollections -> i
    F:java.time.Duration gcTotalDuration -> j
    F:java.util.List gcHeapStats -> k
    F:java.util.List threadAllocationStats -> l
    F:java.util.List tickTimes -> m
    F:java.time.Duration worldCreationDuration -> n
    M:net.minecraft.util.profiling.jfr.parse.JfrStatsResult parse(java.nio.file.Path) -> a
    M:net.minecraft.util.profiling.jfr.parse.JfrStatsResult results() -> a
    M:void capture(java.util.stream.Stream) -> a
    M:void incrementPacket(jdk.jfr.consumer.RecordedEvent,int,java.util.Map) -> a
    M:void appendFileIO(jdk.jfr.consumer.RecordedEvent,java.util.List,java.lang.String) -> a
    M:net.minecraft.util.profiling.jfr.stats.NetworkPacketSummary collectPacketStats(java.time.Duration,java.util.Map) -> a
    M:jdk.jfr.consumer.RecordedEvent next() -> a
    M:java.lang.Object next() -> next
net.minecraft.util.profiling.jfr.parse.JfrStatsParser$MutableCountAndSize -> awq$a -> net.minecraft.util.profiling.jfr.parse.JfrStatsParser$a
    F:long count -> a
    F:long totalSize -> b
    M:void increment(int) -> a
    M:net.minecraft.util.profiling.jfr.stats.NetworkPacketSummary$PacketCountAndSize toCountAndSize() -> a
net.minecraft.util.profiling.jfr.parse.JfrStatsResult -> awr -> net.minecraft.util.profiling.jfr.parse.JfrStatsResult
    F:java.time.Instant recordingStarted -> a
    F:java.time.Instant recordingEnded -> b
    F:java.time.Duration recordingDuration -> c
    F:java.time.Duration worldCreationDuration -> d
    F:java.util.List tickTimes -> e
    F:java.util.List cpuLoadStats -> f
    F:net.minecraft.util.profiling.jfr.stats.GcHeapStat$Summary heapSummary -> g
    F:net.minecraft.util.profiling.jfr.stats.ThreadAllocationStat$Summary threadAllocationSummary -> h
    F:net.minecraft.util.profiling.jfr.stats.NetworkPacketSummary receivedPacketsSummary -> i
    F:net.minecraft.util.profiling.jfr.stats.NetworkPacketSummary sentPacketsSummary -> j
    F:net.minecraft.util.profiling.jfr.stats.FileIOStat$Summary fileWrites -> k
    F:net.minecraft.util.profiling.jfr.stats.FileIOStat$Summary fileReads -> l
    F:java.util.List chunkGenStats -> m
    M:java.util.List chunkGenSummary() -> a
    M:java.lang.String asJson() -> b
    M:boolean equals(java.lang.Object) -> equals
    M:java.time.Instant recordingStarted() -> c
    M:java.time.Instant recordingEnded() -> d
    M:java.time.Duration recordingDuration() -> e
    M:java.time.Duration worldCreationDuration() -> f
    M:java.util.List tickTimes() -> g
    M:java.util.List cpuLoadStats() -> h
    M:net.minecraft.util.profiling.jfr.stats.GcHeapStat$Summary heapSummary() -> i
    M:net.minecraft.util.profiling.jfr.stats.ThreadAllocationStat$Summary threadAllocationSummary() -> j
    M:net.minecraft.util.profiling.jfr.stats.NetworkPacketSummary receivedPacketsSummary() -> k
    M:net.minecraft.util.profiling.jfr.stats.NetworkPacketSummary sentPacketsSummary() -> l
    M:net.minecraft.util.profiling.jfr.stats.FileIOStat$Summary fileWrites() -> m
    M:net.minecraft.util.profiling.jfr.stats.FileIOStat$Summary fileReads() -> n
    M:java.util.List chunkGenStats() -> o
net.minecraft.util.profiling.jfr.serialize.JfrResultJsonSerializer -> awt -> net.minecraft.util.profiling.jfr.serialize.JfrResultJsonSerializer
    F:java.lang.String BYTES_PER_SECOND -> b
    F:java.lang.String COUNT -> c
    F:java.lang.String DURATION_NANOS_TOTAL -> d
    F:java.lang.String TOTAL_BYTES -> e
    F:java.lang.String COUNT_PER_SECOND -> f
    F:com.google.gson.Gson gson -> a
    M:java.lang.String format(net.minecraft.util.profiling.jfr.parse.JfrStatsResult) -> a
    M:com.google.gson.JsonElement heap(net.minecraft.util.profiling.jfr.stats.GcHeapStat$Summary) -> a
    M:com.google.gson.JsonElement chunkGen(java.util.List) -> a
    M:com.google.gson.JsonElement threadAllocations(net.minecraft.util.profiling.jfr.stats.ThreadAllocationStat$Summary) -> a
    M:com.google.gson.JsonElement serverTicks(java.util.List) -> b
    M:com.google.gson.JsonElement fileIO(net.minecraft.util.profiling.jfr.parse.JfrStatsResult) -> b
    M:com.google.gson.JsonElement fileIoSummary(net.minecraft.util.profiling.jfr.stats.FileIOStat$Summary) -> a
    M:com.google.gson.JsonElement network(net.minecraft.util.profiling.jfr.parse.JfrStatsResult) -> c
    M:com.google.gson.JsonElement packets(net.minecraft.util.profiling.jfr.stats.NetworkPacketSummary) -> a
    M:com.google.gson.JsonElement cpu(java.util.List) -> c
net.minecraft.util.profiling.jfr.stats.ChunkGenStat -> awv -> net.minecraft.util.profiling.jfr.stats.ChunkGenStat
    F:java.time.Duration duration -> a
    F:net.minecraft.world.level.ChunkCoordIntPair chunkPos -> b
    F:net.minecraft.server.level.BlockPosition2D worldPos -> c
    F:net.minecraft.world.level.chunk.ChunkStatus status -> d
    F:java.lang.String level -> e
    M:net.minecraft.util.profiling.jfr.stats.ChunkGenStat from(jdk.jfr.consumer.RecordedEvent) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.time.Duration duration() -> a
    M:net.minecraft.world.level.ChunkCoordIntPair chunkPos() -> b
    M:net.minecraft.server.level.BlockPosition2D worldPos() -> c
    M:net.minecraft.world.level.chunk.ChunkStatus status() -> d
    M:java.lang.String level() -> e
net.minecraft.util.profiling.jfr.stats.CpuLoadStat -> aww -> net.minecraft.util.profiling.jfr.stats.CpuLoadStat
    F:double jvm -> a
    F:double userJvm -> b
    F:double system -> c
    M:net.minecraft.util.profiling.jfr.stats.CpuLoadStat from(jdk.jfr.consumer.RecordedEvent) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:double jvm() -> a
    M:double userJvm() -> b
    M:double system() -> c
net.minecraft.util.profiling.jfr.stats.FileIOStat -> awx -> net.minecraft.util.profiling.jfr.stats.FileIOStat
    F:java.time.Duration duration -> a
    F:java.lang.String path -> b
    F:long bytes -> c
    M:net.minecraft.util.profiling.jfr.stats.FileIOStat$Summary summary(java.time.Duration,java.util.List) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.time.Duration duration() -> a
    M:java.lang.String path() -> b
    M:long bytes() -> c
net.minecraft.util.profiling.jfr.stats.FileIOStat$Summary -> awx$a -> net.minecraft.util.profiling.jfr.stats.FileIOStat$a
    F:long totalBytes -> a
    F:double bytesPerSecond -> b
    F:long counts -> c
    F:double countsPerSecond -> d
    F:java.time.Duration timeSpentInIO -> e
    F:java.util.List topTenContributorsByTotalBytes -> f
    M:boolean equals(java.lang.Object) -> equals
    M:long totalBytes() -> a
    M:double bytesPerSecond() -> b
    M:long counts() -> c
    M:double countsPerSecond() -> d
    M:java.time.Duration timeSpentInIO() -> e
    M:java.util.List topTenContributorsByTotalBytes() -> f
net.minecraft.util.profiling.jfr.stats.GcHeapStat -> awy -> net.minecraft.util.profiling.jfr.stats.GcHeapStat
    F:java.time.Instant timestamp -> a
    F:long heapUsed -> b
    F:net.minecraft.util.profiling.jfr.stats.GcHeapStat$Timing timing -> c
    M:net.minecraft.util.profiling.jfr.stats.GcHeapStat from(jdk.jfr.consumer.RecordedEvent) -> a
    M:net.minecraft.util.profiling.jfr.stats.GcHeapStat$Summary summary(java.time.Duration,java.util.List,java.time.Duration,int) -> a
    M:double calculateAllocationRatePerSecond(java.util.List) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.time.Instant timestamp() -> a
    M:long heapUsed() -> b
    M:net.minecraft.util.profiling.jfr.stats.GcHeapStat$Timing timing() -> c
net.minecraft.util.profiling.jfr.stats.GcHeapStat$Summary -> awy$a -> net.minecraft.util.profiling.jfr.stats.GcHeapStat$a
    F:java.time.Duration duration -> a
    F:java.time.Duration gcTotalDuration -> b
    F:int totalGCs -> c
    F:double allocationRateBytesPerSecond -> d
    M:float gcOverHead() -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.time.Duration duration() -> b
    M:java.time.Duration gcTotalDuration() -> c
    M:int totalGCs() -> d
    M:double allocationRateBytesPerSecond() -> e
net.minecraft.util.profiling.jfr.stats.GcHeapStat$Timing -> awy$b -> net.minecraft.util.profiling.jfr.stats.GcHeapStat$b
    F:net.minecraft.util.profiling.jfr.stats.GcHeapStat$Timing BEFORE_GC -> a
    F:net.minecraft.util.profiling.jfr.stats.GcHeapStat$Timing AFTER_GC -> b
net.minecraft.util.profiling.jfr.stats.NetworkPacketSummary -> awz -> net.minecraft.util.profiling.jfr.stats.NetworkPacketSummary
    F:net.minecraft.util.profiling.jfr.stats.NetworkPacketSummary$PacketCountAndSize totalPacketCountAndSize -> a
    F:java.util.List largestSizeContributors -> b
    F:java.time.Duration recordingDuration -> c
    M:double getCountsPerSecond() -> a
    M:double getSizePerSecond() -> b
    M:long getTotalCount() -> c
    M:long getTotalSize() -> d
    M:java.util.List largestSizeContributors() -> e
net.minecraft.util.profiling.jfr.stats.NetworkPacketSummary$PacketCountAndSize -> awz$a -> net.minecraft.util.profiling.jfr.stats.NetworkPacketSummary$a
    F:long totalCount -> a
    F:long totalSize -> b
    F:java.util.Comparator SIZE_THEN_COUNT -> c
    M:net.minecraft.util.profiling.jfr.stats.NetworkPacketSummary$PacketCountAndSize add(net.minecraft.util.profiling.jfr.stats.NetworkPacketSummary$PacketCountAndSize) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:long totalCount() -> a
    M:long totalSize() -> b
net.minecraft.util.profiling.jfr.stats.NetworkPacketSummary$PacketIdentification -> awz$b -> net.minecraft.util.profiling.jfr.stats.NetworkPacketSummary$b
    F:net.minecraft.network.protocol.EnumProtocolDirection direction -> a
    F:int protocolId -> b
    F:int packetId -> c
    F:java.util.Map PACKET_NAME_BY_ID -> d
    M:java.lang.String packetName() -> a
    M:net.minecraft.util.profiling.jfr.stats.NetworkPacketSummary$PacketIdentification from(jdk.jfr.consumer.RecordedEvent) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.network.protocol.EnumProtocolDirection direction() -> b
    M:int protocolId() -> c
    M:int packetId() -> d
net.minecraft.util.profiling.jfr.stats.ThreadAllocationStat -> axa -> net.minecraft.util.profiling.jfr.stats.ThreadAllocationStat
    F:java.time.Instant timestamp -> a
    F:java.lang.String threadName -> b
    F:long totalBytes -> c
    F:java.lang.String UNKNOWN_THREAD -> d
    M:net.minecraft.util.profiling.jfr.stats.ThreadAllocationStat from(jdk.jfr.consumer.RecordedEvent) -> a
    M:net.minecraft.util.profiling.jfr.stats.ThreadAllocationStat$Summary summary(java.util.List) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.time.Instant timestamp() -> a
    M:java.lang.String threadName() -> b
    M:long totalBytes() -> c
net.minecraft.util.profiling.jfr.stats.ThreadAllocationStat$Summary -> axa$a -> net.minecraft.util.profiling.jfr.stats.ThreadAllocationStat$a
    F:java.util.Map allocationsPerSecondByThread -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.Map allocationsPerSecondByThread() -> a
net.minecraft.util.profiling.jfr.stats.TickTimeStat -> axb -> net.minecraft.util.profiling.jfr.stats.TickTimeStat
    F:java.time.Instant timestamp -> a
    F:java.time.Duration currentAverage -> b
    M:net.minecraft.util.profiling.jfr.stats.TickTimeStat from(jdk.jfr.consumer.RecordedEvent) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.time.Instant timestamp() -> a
    M:java.time.Duration currentAverage() -> b
net.minecraft.util.profiling.jfr.stats.TimeStamped -> axc -> net.minecraft.util.profiling.jfr.stats.TimeStamped
net.minecraft.util.profiling.jfr.stats.TimedStat -> axd -> net.minecraft.util.profiling.jfr.stats.TimedStat
net.minecraft.util.profiling.jfr.stats.TimedStatSummary -> axe -> net.minecraft.util.profiling.jfr.stats.TimedStatSummary
    F:net.minecraft.util.profiling.jfr.stats.TimedStat fastest -> a
    F:net.minecraft.util.profiling.jfr.stats.TimedStat slowest -> b
    F:net.minecraft.util.profiling.jfr.stats.TimedStat secondSlowest -> c
    F:int count -> d
    F:java.util.Map percentilesNanos -> e
    F:java.time.Duration totalDuration -> f
    M:net.minecraft.util.profiling.jfr.stats.TimedStatSummary summary(java.util.List) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.util.profiling.jfr.stats.TimedStat fastest() -> a
    M:net.minecraft.util.profiling.jfr.stats.TimedStat slowest() -> b
    M:net.minecraft.util.profiling.jfr.stats.TimedStat secondSlowest() -> c
    M:int count() -> d
    M:java.util.Map percentilesNanos() -> e
    M:java.time.Duration totalDuration() -> f
net.minecraft.util.profiling.metrics.MetricCategory -> axg -> net.minecraft.util.profiling.metrics.MetricCategory
    F:net.minecraft.util.profiling.metrics.MetricCategory PATH_FINDING -> a
    F:net.minecraft.util.profiling.metrics.MetricCategory EVENT_LOOPS -> b
    F:net.minecraft.util.profiling.metrics.MetricCategory MAIL_BOXES -> c
    F:net.minecraft.util.profiling.metrics.MetricCategory TICK_LOOP -> d
    F:net.minecraft.util.profiling.metrics.MetricCategory JVM -> e
    F:net.minecraft.util.profiling.metrics.MetricCategory CHUNK_RENDERING -> f
    F:net.minecraft.util.profiling.metrics.MetricCategory CHUNK_RENDERING_DISPATCHING -> g
    F:net.minecraft.util.profiling.metrics.MetricCategory CPU -> h
    F:net.minecraft.util.profiling.metrics.MetricCategory GPU -> i
    F:java.lang.String description -> j
    M:java.lang.String getDescription() -> a
net.minecraft.util.profiling.metrics.MetricSampler -> axh -> net.minecraft.util.profiling.metrics.MetricSampler
    F:java.lang.String name -> b
    F:net.minecraft.util.profiling.metrics.MetricCategory category -> c
    F:java.util.function.DoubleSupplier sampler -> d
    F:io.netty.buffer.ByteBuf ticks -> e
    F:io.netty.buffer.ByteBuf values -> f
    F:boolean isRunning -> g
    F:java.lang.Runnable beforeTick -> h
    F:net.minecraft.util.profiling.metrics.MetricSampler$ThresholdTest thresholdTest -> a
    F:double currentValue -> i
    M:net.minecraft.util.profiling.metrics.MetricSampler create(java.lang.String,net.minecraft.util.profiling.metrics.MetricCategory,java.util.function.DoubleSupplier) -> a
    M:net.minecraft.util.profiling.metrics.MetricSampler create(java.lang.String,net.minecraft.util.profiling.metrics.MetricCategory,java.lang.Object,java.util.function.ToDoubleFunction) -> a
    M:net.minecraft.util.profiling.metrics.MetricSampler$MetricSamplerBuilder builder(java.lang.String,net.minecraft.util.profiling.metrics.MetricCategory,java.util.function.ToDoubleFunction,java.lang.Object) -> a
    M:void onStartTick() -> a
    M:void onEndTick(int) -> a
    M:void onFinished() -> b
    M:void verifyRunning() -> h
    M:java.util.function.DoubleSupplier getSampler() -> c
    M:java.lang.String getName() -> d
    M:net.minecraft.util.profiling.metrics.MetricCategory getCategory() -> e
    M:net.minecraft.util.profiling.metrics.MetricSampler$SamplerResult result() -> f
    M:boolean triggersThreshold() -> g
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.util.profiling.metrics.MetricSampler$MetricSamplerBuilder -> axh$a -> net.minecraft.util.profiling.metrics.MetricSampler$a
    F:java.lang.String name -> a
    F:net.minecraft.util.profiling.metrics.MetricCategory category -> b
    F:java.util.function.DoubleSupplier sampler -> c
    F:java.lang.Object context -> d
    F:java.lang.Runnable beforeTick -> e
    F:net.minecraft.util.profiling.metrics.MetricSampler$ThresholdTest thresholdTest -> f
    M:net.minecraft.util.profiling.metrics.MetricSampler$MetricSamplerBuilder withBeforeTick(java.util.function.Consumer) -> a
    M:net.minecraft.util.profiling.metrics.MetricSampler$MetricSamplerBuilder withThresholdAlert(net.minecraft.util.profiling.metrics.MetricSampler$ThresholdTest) -> a
    M:net.minecraft.util.profiling.metrics.MetricSampler build() -> a
net.minecraft.util.profiling.metrics.MetricSampler$SamplerResult -> axh$b -> net.minecraft.util.profiling.metrics.MetricSampler$b
    F:it.unimi.dsi.fastutil.ints.Int2DoubleMap recording -> a
    F:int firstTick -> b
    F:int lastTick -> c
    M:double valueAtTick(int) -> a
    M:int getFirstTick() -> a
    M:int getLastTick() -> b
net.minecraft.util.profiling.metrics.MetricSampler$ThresholdTest -> axh$c -> net.minecraft.util.profiling.metrics.MetricSampler$c
net.minecraft.util.profiling.metrics.MetricSampler$ValueIncreasedByPercentage -> axh$d -> net.minecraft.util.profiling.metrics.MetricSampler$d
    F:float percentageIncreaseThreshold -> a
    F:double previousValue -> b
    M:boolean test(double) -> test
net.minecraft.util.profiling.metrics.MetricsRegistry -> axi -> net.minecraft.util.profiling.metrics.MetricsRegistry
    F:net.minecraft.util.profiling.metrics.MetricsRegistry INSTANCE -> a
    F:java.util.WeakHashMap measuredInstances -> b
    M:void add(net.minecraft.util.profiling.metrics.ProfilerMeasured) -> a
    M:java.util.List getRegisteredSamplers() -> a
    M:java.util.List aggregateDuplicates(java.util.Map) -> a
net.minecraft.util.profiling.metrics.MetricsRegistry$AggregatedMetricSampler -> axi$a -> net.minecraft.util.profiling.metrics.MetricsRegistry$a
    F:java.util.List delegates -> b
    M:net.minecraft.util.profiling.metrics.MetricSampler$ThresholdTest thresholdTest(java.util.List) -> a
    M:void beforeTick(java.util.List) -> b
    M:double averageValueFromDelegates(java.util.List) -> c
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.util.profiling.metrics.MetricsSamplerProvider -> axj -> net.minecraft.util.profiling.metrics.MetricsSamplerProvider
net.minecraft.util.profiling.metrics.ProfilerMeasured -> axk -> net.minecraft.util.profiling.metrics.ProfilerMeasured
net.minecraft.util.profiling.metrics.profiling.ActiveMetricsRecorder -> axm -> net.minecraft.util.profiling.metrics.profiling.ActiveMetricsRecorder
    F:int PROFILING_MAX_DURATION_SECONDS -> a
    F:java.util.function.Consumer globalOnReportFinished -> b
    F:java.util.Map deviationsBySampler -> c
    F:net.minecraft.util.profiling.GameProfilerSwitcher taskProfiler -> d
    F:java.util.concurrent.Executor ioExecutor -> e
    F:net.minecraft.util.profiling.metrics.storage.MetricsPersister metricsPersister -> f
    F:java.util.function.Consumer onProfilingEnd -> g
    F:java.util.function.Consumer onReportFinished -> h
    F:net.minecraft.util.profiling.metrics.MetricsSamplerProvider metricsSamplerProvider -> i
    F:java.util.function.LongSupplier wallTimeSource -> j
    F:long deadlineNano -> k
    F:int currentTick -> l
    F:net.minecraft.util.profiling.GameProfilerFillerActive singleTickProfiler -> m
    F:boolean killSwitch -> n
    F:java.util.Set thisTickSamplers -> o
    M:net.minecraft.util.profiling.metrics.profiling.ActiveMetricsRecorder createStarted(net.minecraft.util.profiling.metrics.MetricsSamplerProvider,java.util.function.LongSupplier,java.util.concurrent.Executor,net.minecraft.util.profiling.metrics.storage.MetricsPersister,java.util.function.Consumer,java.util.function.Consumer) -> a
    M:void end() -> a
    M:void cancel() -> b
    M:void startTick() -> c
    M:void endTick() -> d
    M:boolean isRecording() -> e
    M:net.minecraft.util.profiling.GameProfilerFiller getProfiler() -> f
    M:void verifyStarted() -> g
    M:void scheduleSaveResults(net.minecraft.util.profiling.MethodProfilerResults) -> a
    M:void cleanup(java.util.Collection) -> a
    M:void registerGlobalCompletionCallback(java.util.function.Consumer) -> a
net.minecraft.util.profiling.metrics.profiling.InactiveMetricsRecorder -> axn -> net.minecraft.util.profiling.metrics.profiling.InactiveMetricsRecorder
    F:net.minecraft.util.profiling.metrics.profiling.MetricsRecorder INSTANCE -> a
    M:void end() -> a
    M:void cancel() -> b
    M:void startTick() -> c
    M:boolean isRecording() -> e
    M:net.minecraft.util.profiling.GameProfilerFiller getProfiler() -> f
    M:void endTick() -> d
net.minecraft.util.profiling.metrics.profiling.MetricsRecorder -> axo -> net.minecraft.util.profiling.metrics.profiling.MetricsRecorder
net.minecraft.util.profiling.metrics.profiling.ProfilerSamplerAdapter -> axp -> net.minecraft.util.profiling.metrics.profiling.ProfilerSamplerAdapter
    F:java.util.Set previouslyFoundSamplerNames -> a
    M:java.util.Set newSamplersFoundInProfiler(java.util.function.Supplier) -> a
    M:net.minecraft.util.profiling.metrics.MetricSampler samplerForProfilingPath(java.util.function.Supplier,java.lang.String,net.minecraft.util.profiling.metrics.MetricCategory) -> a
net.minecraft.util.profiling.metrics.profiling.ServerMetricsSamplersProvider -> axq -> net.minecraft.util.profiling.metrics.profiling.ServerMetricsSamplersProvider
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.Set samplers -> b
    F:net.minecraft.util.profiling.metrics.profiling.ProfilerSamplerAdapter samplerFactory -> c
    M:java.util.Set runtimeIndependentSamplers() -> a
    M:java.util.Set samplers(java.util.function.Supplier) -> a
    M:net.minecraft.util.profiling.metrics.MetricSampler tickTimeSampler(java.util.function.LongSupplier) -> a
    M:long read() -> read
net.minecraft.util.profiling.metrics.profiling.ServerMetricsSamplersProvider$CpuStats -> axq$a -> net.minecraft.util.profiling.metrics.profiling.ServerMetricsSamplersProvider$a
    F:oshi.SystemInfo systemInfo -> b
    F:oshi.hardware.CentralProcessor processor -> c
    F:int nrOfCpus -> a
    F:long lastPollMs -> f
    M:double loadForCpu(int) -> a
net.minecraft.util.profiling.metrics.storage.MetricsPersister -> axs -> net.minecraft.util.profiling.metrics.storage.MetricsPersister
    F:java.nio.file.Path PROFILING_RESULTS_DIR -> a
    F:java.lang.String METRICS_DIR_NAME -> b
    F:java.lang.String DEVIATIONS_DIR_NAME -> c
    F:java.lang.String PROFILING_RESULT_FILENAME -> d
    F:org.slf4j.Logger LOGGER -> e
    F:java.lang.String rootFolderName -> f
    M:java.nio.file.Path saveReports(java.util.Set,java.util.Map,net.minecraft.util.profiling.MethodProfilerResults) -> a
    M:void saveMetrics(java.util.Set,java.nio.file.Path) -> a
    M:void saveCategory(net.minecraft.util.profiling.metrics.MetricCategory,java.util.List,java.nio.file.Path) -> a
    M:void saveDeviations(java.util.Map,java.nio.file.Path) -> a
    M:void saveProfilingTaskExecutionResult(net.minecraft.util.profiling.MethodProfilerResults,java.nio.file.Path) -> a
net.minecraft.util.profiling.metrics.storage.RecordedDeviation -> axt -> net.minecraft.util.profiling.metrics.storage.RecordedDeviation
    F:java.time.Instant timestamp -> a
    F:int tick -> b
    F:net.minecraft.util.profiling.MethodProfilerResults profilerResultAtTick -> c
net.minecraft.util.random.SimpleWeightedRandomList -> axw -> net.minecraft.util.random.SimpleWeightedRandomList
    M:com.mojang.serialization.Codec wrappedCodecAllowingEmpty(com.mojang.serialization.Codec) -> a
    M:com.mojang.serialization.Codec wrappedCodec(com.mojang.serialization.Codec) -> b
    M:net.minecraft.util.random.SimpleWeightedRandomList$Builder builder() -> a
    M:net.minecraft.util.random.SimpleWeightedRandomList empty() -> b
    M:net.minecraft.util.random.SimpleWeightedRandomList single(java.lang.Object) -> a
    M:java.util.Optional getRandomValue(net.minecraft.util.RandomSource) -> a
net.minecraft.util.random.SimpleWeightedRandomList$Builder -> axw$a -> net.minecraft.util.random.SimpleWeightedRandomList$a
    F:com.google.common.collect.ImmutableList$Builder result -> a
    M:net.minecraft.util.random.SimpleWeightedRandomList$Builder add(java.lang.Object,int) -> a
    M:net.minecraft.util.random.SimpleWeightedRandomList build() -> a
net.minecraft.util.random.Weight -> axx -> net.minecraft.util.random.Weight
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.util.random.Weight ONE -> b
    F:org.slf4j.Logger LOGGER -> c
    F:int value -> d
    M:net.minecraft.util.random.Weight of(int) -> a
    M:int asInt() -> a
    M:void validateWeight(int) -> b
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.util.random.WeightedEntry -> axy -> net.minecraft.util.random.WeightedEntry
    M:net.minecraft.util.random.WeightedEntry$Wrapper wrap(java.lang.Object,int) -> a
net.minecraft.util.random.WeightedEntry$IntrusiveBase -> axy$a -> net.minecraft.util.random.WeightedEntry$a
    F:net.minecraft.util.random.Weight weight -> a
    M:net.minecraft.util.random.Weight getWeight() -> a
net.minecraft.util.random.WeightedEntry$Wrapper -> axy$b -> net.minecraft.util.random.WeightedEntry$b
    F:java.lang.Object data -> a
    F:net.minecraft.util.random.Weight weight -> b
    M:java.lang.Object getData() -> b
    M:net.minecraft.util.random.Weight getWeight() -> a
    M:com.mojang.serialization.Codec codec(com.mojang.serialization.Codec) -> a
net.minecraft.util.random.WeightedRandom -> axz -> net.minecraft.util.random.WeightedRandom2
    M:int getTotalWeight(java.util.List) -> a
    M:java.util.Optional getRandomItem(net.minecraft.util.RandomSource,java.util.List,int) -> a
    M:java.util.Optional getWeightedItem(java.util.List,int) -> a
    M:java.util.Optional getRandomItem(net.minecraft.util.RandomSource,java.util.List) -> a
net.minecraft.util.random.WeightedRandomList -> aya -> net.minecraft.util.random.WeightedRandomList
    F:int totalWeight -> a
    F:com.google.common.collect.ImmutableList items -> b
    M:net.minecraft.util.random.WeightedRandomList create() -> c
    M:net.minecraft.util.random.WeightedRandomList create(net.minecraft.util.random.WeightedEntry[]) -> a
    M:net.minecraft.util.random.WeightedRandomList create(java.util.List) -> a
    M:boolean isEmpty() -> d
    M:java.util.Optional getRandom(net.minecraft.util.RandomSource) -> b
    M:java.util.List unwrap() -> e
    M:com.mojang.serialization.Codec codec(com.mojang.serialization.Codec) -> c
net.minecraft.util.thread.BlockableEventLoop -> ayc -> net.minecraft.util.thread.IAsyncTaskHandler
    F:java.lang.String name -> b
    F:org.slf4j.Logger LOGGER -> c
    F:java.util.Queue pendingRunnables -> d
    F:int blockingCount -> e
    M:boolean isSameThread() -> bm
    M:boolean scheduleExecutables() -> at
    M:int getPendingTasksCount() -> bn
    M:java.lang.String name() -> bo
    M:java.util.concurrent.CompletableFuture submit(java.util.function.Supplier) -> a
    M:java.util.concurrent.CompletableFuture submitAsync(java.lang.Runnable) -> a
    M:java.util.concurrent.CompletableFuture submit(java.lang.Runnable) -> g
    M:void executeBlocking(java.lang.Runnable) -> h
    M:void tell(java.lang.Runnable) -> i
    M:void execute(java.lang.Runnable) -> execute
    M:void executeIfPossible(java.lang.Runnable) -> c
    M:void dropAllTasks() -> bp
    M:void runAllTasks() -> bq
    M:boolean pollTask() -> x
    M:void managedBlock(java.util.function.BooleanSupplier) -> c
    M:void waitForTasks() -> br
    M:void doRunTask(java.lang.Runnable) -> d
    M:java.util.List profiledMetrics() -> bl
    M:void tell(java.lang.Object) -> a
net.minecraft.util.thread.NamedThreadFactory -> ayd -> net.minecraft.util.thread.NamedThreadFactory
    F:org.slf4j.Logger LOGGER -> a
    F:java.lang.ThreadGroup group -> b
    F:java.util.concurrent.atomic.AtomicInteger threadNumber -> c
    F:java.lang.String namePrefix -> d
net.minecraft.util.thread.ProcessorHandle -> aye -> net.minecraft.util.thread.Mailbox
    M:void close() -> close
    M:java.util.concurrent.CompletableFuture ask(java.util.function.Function) -> b
    M:java.util.concurrent.CompletableFuture askEither(java.util.function.Function) -> c
    M:net.minecraft.util.thread.Mailbox of(java.lang.String,java.util.function.Consumer) -> a
    M:java.lang.String name() -> bo
    M:void tell(java.lang.Object) -> a
net.minecraft.util.thread.ProcessorMailbox -> ayf -> net.minecraft.util.thread.ThreadedMailbox
    F:org.slf4j.Logger LOGGER -> a
    F:int CLOSED_BIT -> b
    F:int SCHEDULED_BIT -> c
    F:java.util.concurrent.atomic.AtomicInteger status -> d
    F:net.minecraft.util.thread.PairedQueue queue -> e
    F:java.util.concurrent.Executor dispatcher -> f
    F:java.lang.String name -> g
    M:net.minecraft.util.thread.ThreadedMailbox create(java.util.concurrent.Executor,java.lang.String) -> a
    M:boolean setAsScheduled() -> d
    M:void setAsIdle() -> e
    M:boolean canBeScheduled() -> f
    M:void close() -> close
    M:boolean shouldProcess() -> g
    M:boolean pollTask() -> h
    M:void run() -> run
    M:void runAll() -> a
    M:void tell(java.lang.Object) -> a
    M:void registerForExecution() -> i
    M:int pollUntil(it.unimi.dsi.fastutil.ints.Int2BooleanFunction) -> a
    M:int size() -> b
    M:boolean hasWork() -> c
    M:java.lang.String name() -> bo
    M:java.util.List profiledMetrics() -> bl
net.minecraft.util.thread.ReentrantBlockableEventLoop -> ayg -> net.minecraft.util.thread.IAsyncTaskHandlerReentrant
    F:int reentrantCount -> b
    M:boolean scheduleExecutables() -> at
    M:boolean runningTask() -> bs
    M:void doRunTask(java.lang.Runnable) -> d
net.minecraft.util.thread.StrictQueue -> ayh -> net.minecraft.util.thread.PairedQueue
net.minecraft.util.thread.StrictQueue$FixedPriorityQueue -> ayh$a -> net.minecraft.util.thread.PairedQueue$a
    F:java.util.concurrent.atomic.AtomicInteger size -> b
    M:java.lang.Runnable pop() -> d
    M:boolean push(net.minecraft.util.thread.StrictQueue$IntRunnable) -> a
    M:boolean isEmpty() -> b
    M:int size() -> c
    M:boolean push(java.lang.Object) -> a
    M:java.lang.Object pop() -> a
net.minecraft.util.thread.StrictQueue$IntRunnable -> ayh$b -> net.minecraft.util.thread.PairedQueue$b
    F:int priority -> a
    F:java.lang.Runnable task -> b
    M:void run() -> run
    M:int getPriority() -> a
net.minecraft.util.thread.StrictQueue$QueueStrictQueue -> ayh$c -> net.minecraft.util.thread.PairedQueue$c
    F:java.util.Queue queue -> a
    M:java.lang.Object pop() -> a
    M:boolean push(java.lang.Object) -> a
    M:boolean isEmpty() -> b
    M:int size() -> c
net.minecraft.util.valueproviders.BiasedToBottomInt -> ayj -> net.minecraft.util.valueproviders.BiasedToBottomInt
    F:com.mojang.serialization.Codec CODEC -> a
    F:int minInclusive -> b
    F:int maxInclusive -> f
    M:net.minecraft.util.valueproviders.BiasedToBottomInt of(int,int) -> a
    M:int sample(net.minecraft.util.RandomSource) -> a
    M:int getMinValue() -> a
    M:int getMaxValue() -> b
    M:net.minecraft.util.valueproviders.IntProviderType getType() -> c
net.minecraft.util.valueproviders.ClampedInt -> ayk -> net.minecraft.util.valueproviders.ClampedInt
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.util.valueproviders.IntProvider source -> b
    F:int minInclusive -> f
    F:int maxInclusive -> g
    M:net.minecraft.util.valueproviders.ClampedInt of(net.minecraft.util.valueproviders.IntProvider,int,int) -> a
    M:int sample(net.minecraft.util.RandomSource) -> a
    M:int getMinValue() -> a
    M:int getMaxValue() -> b
    M:net.minecraft.util.valueproviders.IntProviderType getType() -> c
net.minecraft.util.valueproviders.ClampedNormalFloat -> ayl -> net.minecraft.util.valueproviders.ClampedNormalFloat
    F:com.mojang.serialization.Codec CODEC -> a
    F:float mean -> b
    F:float deviation -> d
    F:float min -> e
    F:float max -> f
    M:net.minecraft.util.valueproviders.ClampedNormalFloat of(float,float,float,float) -> a
    M:float sample(net.minecraft.util.RandomSource) -> a
    M:float sample(net.minecraft.util.RandomSource,float,float,float,float) -> a
    M:float getMinValue() -> a
    M:float getMaxValue() -> b
    M:net.minecraft.util.valueproviders.FloatProviderType getType() -> c
net.minecraft.util.valueproviders.ClampedNormalInt -> aym -> net.minecraft.util.valueproviders.ClampedNormalInt
    F:com.mojang.serialization.Codec CODEC -> a
    F:float mean -> b
    F:float deviation -> f
    F:int min_inclusive -> g
    F:int max_inclusive -> h
    M:net.minecraft.util.valueproviders.ClampedNormalInt of(float,float,int,int) -> a
    M:int sample(net.minecraft.util.RandomSource) -> a
    M:int sample(net.minecraft.util.RandomSource,float,float,float,float) -> a
    M:int getMinValue() -> a
    M:int getMaxValue() -> b
    M:net.minecraft.util.valueproviders.IntProviderType getType() -> c
net.minecraft.util.valueproviders.ConstantFloat -> ayn -> net.minecraft.util.valueproviders.ConstantFloat
    F:net.minecraft.util.valueproviders.ConstantFloat ZERO -> a
    F:com.mojang.serialization.Codec CODEC -> b
    F:float value -> d
    M:net.minecraft.util.valueproviders.ConstantFloat of(float) -> a
    M:float getValue() -> d
    M:float sample(net.minecraft.util.RandomSource) -> a
    M:float getMinValue() -> a
    M:float getMaxValue() -> b
    M:net.minecraft.util.valueproviders.FloatProviderType getType() -> c
net.minecraft.util.valueproviders.ConstantInt -> ayo -> net.minecraft.util.valueproviders.ConstantInt
    F:net.minecraft.util.valueproviders.ConstantInt ZERO -> a
    F:com.mojang.serialization.Codec CODEC -> b
    F:int value -> f
    M:net.minecraft.util.valueproviders.ConstantInt of(int) -> a
    M:int getValue() -> d
    M:int sample(net.minecraft.util.RandomSource) -> a
    M:int getMinValue() -> a
    M:int getMaxValue() -> b
    M:net.minecraft.util.valueproviders.IntProviderType getType() -> c
net.minecraft.util.valueproviders.FloatProvider -> ayp -> net.minecraft.util.valueproviders.FloatProvider
    F:com.mojang.serialization.Codec CONSTANT_OR_DISPATCH_CODEC -> a
    F:com.mojang.serialization.Codec CODEC -> c
    M:com.mojang.serialization.Codec codec(float,float) -> a
net.minecraft.util.valueproviders.FloatProviderType -> ayq -> net.minecraft.util.valueproviders.FloatProviderType
    F:net.minecraft.util.valueproviders.FloatProviderType CONSTANT -> a
    F:net.minecraft.util.valueproviders.FloatProviderType UNIFORM -> b
    F:net.minecraft.util.valueproviders.FloatProviderType CLAMPED_NORMAL -> c
    F:net.minecraft.util.valueproviders.FloatProviderType TRAPEZOID -> d
    M:net.minecraft.util.valueproviders.FloatProviderType register(java.lang.String,com.mojang.serialization.Codec) -> a
net.minecraft.util.valueproviders.IntProvider -> ayr -> net.minecraft.util.valueproviders.IntProvider
    F:com.mojang.serialization.Codec CONSTANT_OR_DISPATCH_CODEC -> a
    F:com.mojang.serialization.Codec CODEC -> c
    F:com.mojang.serialization.Codec NON_NEGATIVE_CODEC -> d
    F:com.mojang.serialization.Codec POSITIVE_CODEC -> e
    M:com.mojang.serialization.Codec codec(int,int) -> b
net.minecraft.util.valueproviders.IntProviderType -> ays -> net.minecraft.util.valueproviders.IntProviderType
    F:net.minecraft.util.valueproviders.IntProviderType CONSTANT -> a
    F:net.minecraft.util.valueproviders.IntProviderType UNIFORM -> b
    F:net.minecraft.util.valueproviders.IntProviderType BIASED_TO_BOTTOM -> c
    F:net.minecraft.util.valueproviders.IntProviderType CLAMPED -> d
    F:net.minecraft.util.valueproviders.IntProviderType WEIGHTED_LIST -> e
    F:net.minecraft.util.valueproviders.IntProviderType CLAMPED_NORMAL -> f
    M:net.minecraft.util.valueproviders.IntProviderType register(java.lang.String,com.mojang.serialization.Codec) -> a
net.minecraft.util.valueproviders.MultipliedFloats -> ayt -> net.minecraft.util.valueproviders.MultipliedFloats
    M:float sample(net.minecraft.util.RandomSource) -> a
net.minecraft.util.valueproviders.SampledFloat -> ayu -> net.minecraft.util.valueproviders.SampledFloat
net.minecraft.util.valueproviders.TrapezoidFloat -> ayv -> net.minecraft.util.valueproviders.TrapezoidFloat
    F:com.mojang.serialization.Codec CODEC -> a
    F:float min -> b
    F:float max -> d
    F:float plateau -> e
    M:net.minecraft.util.valueproviders.TrapezoidFloat of(float,float,float) -> a
    M:float sample(net.minecraft.util.RandomSource) -> a
    M:float getMinValue() -> a
    M:float getMaxValue() -> b
    M:net.minecraft.util.valueproviders.FloatProviderType getType() -> c
net.minecraft.util.valueproviders.UniformFloat -> ayw -> net.minecraft.util.valueproviders.UniformFloat
    F:com.mojang.serialization.Codec CODEC -> a
    F:float minInclusive -> b
    F:float maxExclusive -> d
    M:net.minecraft.util.valueproviders.UniformFloat of(float,float) -> b
    M:float sample(net.minecraft.util.RandomSource) -> a
    M:float getMinValue() -> a
    M:float getMaxValue() -> b
    M:net.minecraft.util.valueproviders.FloatProviderType getType() -> c
net.minecraft.util.valueproviders.UniformInt -> ayx -> net.minecraft.util.valueproviders.UniformInt
    F:com.mojang.serialization.Codec CODEC -> a
    F:int minInclusive -> b
    F:int maxInclusive -> f
    M:net.minecraft.util.valueproviders.UniformInt of(int,int) -> a
    M:int sample(net.minecraft.util.RandomSource) -> a
    M:int getMinValue() -> a
    M:int getMaxValue() -> b
    M:net.minecraft.util.valueproviders.IntProviderType getType() -> c
net.minecraft.util.valueproviders.WeightedListInt -> ayy -> net.minecraft.util.valueproviders.WeightedListInt
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.util.random.SimpleWeightedRandomList distribution -> b
    F:int minValue -> f
    F:int maxValue -> g
    M:int sample(net.minecraft.util.RandomSource) -> a
    M:int getMinValue() -> a
    M:int getMaxValue() -> b
    M:net.minecraft.util.valueproviders.IntProviderType getType() -> c
net.minecraft.util.worldupdate.WorldUpgrader -> aza -> net.minecraft.util.worldupdate.WorldUpgrader
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.concurrent.ThreadFactory THREAD_FACTORY -> b
    F:net.minecraft.world.level.levelgen.GeneratorSettings worldGenSettings -> c
    F:boolean eraseCache -> d
    F:net.minecraft.world.level.storage.Convertable$ConversionSession levelStorage -> e
    F:java.lang.Thread thread -> f
    F:com.mojang.datafixers.DataFixer dataFixer -> g
    F:boolean running -> h
    F:boolean finished -> i
    F:float progress -> j
    F:int totalChunks -> k
    F:int converted -> l
    F:int skipped -> m
    F:it.unimi.dsi.fastutil.objects.Object2FloatMap progressMap -> n
    F:net.minecraft.network.chat.IChatBaseComponent status -> o
    F:java.util.regex.Pattern REGEX -> p
    F:net.minecraft.world.level.storage.WorldPersistentData overworldDataStorage -> q
    M:void cancel() -> a
    M:void work() -> i
    M:java.util.List getAllChunkPos(net.minecraft.resources.ResourceKey) -> b
    M:boolean isFinished() -> b
    M:com.google.common.collect.ImmutableSet levels() -> c
    M:float dimensionProgress(net.minecraft.resources.ResourceKey) -> a
    M:float getProgress() -> d
    M:int getTotalChunks() -> e
    M:int getConverted() -> f
    M:int getSkipped() -> g
    M:net.minecraft.network.chat.IChatBaseComponent getStatus() -> h
net.minecraft.world.BossEvent -> azc -> net.minecraft.world.BossBattle
    F:java.util.UUID id -> h
    F:net.minecraft.network.chat.IChatBaseComponent name -> a
    F:float progress -> b
    F:net.minecraft.world.BossBattle$BarColor color -> c
    F:net.minecraft.world.BossBattle$BarStyle overlay -> d
    F:boolean darkenScreen -> e
    F:boolean playBossMusic -> f
    F:boolean createWorldFog -> g
    M:java.util.UUID getId() -> i
    M:net.minecraft.network.chat.IChatBaseComponent getName() -> j
    M:void setName(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:float getProgress() -> k
    M:void setProgress(float) -> a
    M:net.minecraft.world.BossBattle$BarColor getColor() -> l
    M:void setColor(net.minecraft.world.BossBattle$BarColor) -> a
    M:net.minecraft.world.BossBattle$BarStyle getOverlay() -> m
    M:void setOverlay(net.minecraft.world.BossBattle$BarStyle) -> a
    M:boolean shouldDarkenScreen() -> n
    M:net.minecraft.world.BossBattle setDarkenScreen(boolean) -> a
    M:boolean shouldPlayBossMusic() -> o
    M:net.minecraft.world.BossBattle setPlayBossMusic(boolean) -> b
    M:net.minecraft.world.BossBattle setCreateWorldFog(boolean) -> c
    M:boolean shouldCreateWorldFog() -> p
net.minecraft.world.BossEvent$BossBarColor -> azc$a -> net.minecraft.world.BossBattle$BarColor
    F:net.minecraft.world.BossBattle$BarColor PINK -> a
    F:net.minecraft.world.BossBattle$BarColor BLUE -> b
    F:net.minecraft.world.BossBattle$BarColor RED -> c
    F:net.minecraft.world.BossBattle$BarColor GREEN -> d
    F:net.minecraft.world.BossBattle$BarColor YELLOW -> e
    F:net.minecraft.world.BossBattle$BarColor PURPLE -> f
    F:net.minecraft.world.BossBattle$BarColor WHITE -> g
    F:java.lang.String name -> h
    F:net.minecraft.EnumChatFormat formatting -> i
    M:net.minecraft.EnumChatFormat getFormatting() -> a
    M:java.lang.String getName() -> b
    M:net.minecraft.world.BossBattle$BarColor byName(java.lang.String) -> a
net.minecraft.world.BossEvent$BossBarOverlay -> azc$b -> net.minecraft.world.BossBattle$BarStyle
    F:net.minecraft.world.BossBattle$BarStyle PROGRESS -> a
    F:net.minecraft.world.BossBattle$BarStyle NOTCHED_6 -> b
    F:net.minecraft.world.BossBattle$BarStyle NOTCHED_10 -> c
    F:net.minecraft.world.BossBattle$BarStyle NOTCHED_12 -> d
    F:net.minecraft.world.BossBattle$BarStyle NOTCHED_20 -> e
    F:java.lang.String name -> f
    M:java.lang.String getName() -> a
    M:net.minecraft.world.BossBattle$BarStyle byName(java.lang.String) -> a
net.minecraft.world.Clearable -> azd -> net.minecraft.world.Clearable
    M:void tryClear(java.lang.Object) -> a
net.minecraft.world.CompoundContainer -> aze -> net.minecraft.world.InventoryLargeChest
    F:net.minecraft.world.IInventory container1 -> b
    F:net.minecraft.world.IInventory container2 -> c
    M:int getContainerSize() -> b
    M:boolean isEmpty() -> c
    M:boolean contains(net.minecraft.world.IInventory) -> a
    M:net.minecraft.world.item.ItemStack getItem(int) -> a
    M:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    M:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    M:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    M:void setChanged() -> e
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean canPlaceItem(int,net.minecraft.world.item.ItemStack) -> b
    M:void clearContent() -> a
net.minecraft.world.Container -> azf -> net.minecraft.world.IInventory
    M:boolean canPlaceItem(int,net.minecraft.world.item.ItemStack) -> b
    M:boolean hasAnyOf(java.util.Set) -> a
net.minecraft.world.ContainerHelper -> azg -> net.minecraft.world.ContainerUtil
    M:net.minecraft.world.item.ItemStack removeItem(java.util.List,int,int) -> a
    M:net.minecraft.world.item.ItemStack takeItem(java.util.List,int) -> a
    M:net.minecraft.nbt.NBTTagCompound saveAllItems(net.minecraft.nbt.NBTTagCompound,net.minecraft.core.NonNullList) -> a
    M:net.minecraft.nbt.NBTTagCompound saveAllItems(net.minecraft.nbt.NBTTagCompound,net.minecraft.core.NonNullList,boolean) -> a
    M:void loadAllItems(net.minecraft.nbt.NBTTagCompound,net.minecraft.core.NonNullList) -> b
    M:int clearOrCountMatchingItems(net.minecraft.world.IInventory,java.util.function.Predicate,int,boolean) -> a
    M:int clearOrCountMatchingItems(net.minecraft.world.item.ItemStack,java.util.function.Predicate,int,boolean) -> a
net.minecraft.world.ContainerListener -> azh -> net.minecraft.world.IInventoryListener
net.minecraft.world.Containers -> azi -> net.minecraft.world.InventoryUtils
    M:void dropContents(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.IInventory) -> a
    M:void dropContents(net.minecraft.world.level.World,net.minecraft.world.entity.Entity,net.minecraft.world.IInventory) -> a
    M:void dropContents(net.minecraft.world.level.World,double,double,double,net.minecraft.world.IInventory) -> a
    M:void dropContents(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.NonNullList) -> a
    M:void dropItemStack(net.minecraft.world.level.World,double,double,double,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.Difficulty -> azj -> net.minecraft.world.EnumDifficulty
    F:net.minecraft.world.EnumDifficulty PEACEFUL -> a
    F:net.minecraft.world.EnumDifficulty EASY -> b
    F:net.minecraft.world.EnumDifficulty NORMAL -> c
    F:net.minecraft.world.EnumDifficulty HARD -> d
    F:int id -> f
    F:java.lang.String key -> g
    M:int getId() -> a
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName() -> b
    M:net.minecraft.world.EnumDifficulty byId(int) -> a
    M:net.minecraft.world.EnumDifficulty byName(java.lang.String) -> a
    M:java.lang.String getKey() -> c
net.minecraft.world.DifficultyInstance -> azk -> net.minecraft.world.DifficultyDamageScaler
    F:float DIFFICULTY_TIME_GLOBAL_OFFSET -> a
    F:float MAX_DIFFICULTY_TIME_GLOBAL -> b
    F:float MAX_DIFFICULTY_TIME_LOCAL -> c
    F:net.minecraft.world.EnumDifficulty base -> d
    F:float effectiveDifficulty -> e
    M:net.minecraft.world.EnumDifficulty getDifficulty() -> a
    M:float getEffectiveDifficulty() -> b
    M:boolean isHard() -> c
    M:boolean isHarderThan(float) -> a
    M:float getSpecialMultiplier() -> d
    M:float calculateDifficulty(net.minecraft.world.EnumDifficulty,long,long,float) -> a
net.minecraft.world.InteractionHand -> azl -> net.minecraft.world.EnumHand
    F:net.minecraft.world.EnumHand MAIN_HAND -> a
    F:net.minecraft.world.EnumHand OFF_HAND -> b
net.minecraft.world.InteractionResult -> azm -> net.minecraft.world.EnumInteractionResult
    F:net.minecraft.world.EnumInteractionResult SUCCESS -> a
    F:net.minecraft.world.EnumInteractionResult CONSUME -> b
    F:net.minecraft.world.EnumInteractionResult CONSUME_PARTIAL -> c
    F:net.minecraft.world.EnumInteractionResult PASS -> d
    F:net.minecraft.world.EnumInteractionResult FAIL -> e
    M:boolean consumesAction() -> a
    M:boolean shouldSwing() -> b
    M:boolean shouldAwardStats() -> c
    M:net.minecraft.world.EnumInteractionResult sidedSuccess(boolean) -> a
net.minecraft.world.InteractionResultHolder -> azn -> net.minecraft.world.InteractionResultWrapper
    F:net.minecraft.world.EnumInteractionResult result -> a
    F:java.lang.Object object -> b
    M:net.minecraft.world.EnumInteractionResult getResult() -> a
    M:java.lang.Object getObject() -> b
    M:net.minecraft.world.InteractionResultWrapper success(java.lang.Object) -> a
    M:net.minecraft.world.InteractionResultWrapper consume(java.lang.Object) -> b
    M:net.minecraft.world.InteractionResultWrapper pass(java.lang.Object) -> c
    M:net.minecraft.world.InteractionResultWrapper fail(java.lang.Object) -> d
    M:net.minecraft.world.InteractionResultWrapper sidedSuccess(java.lang.Object,boolean) -> a
net.minecraft.world.LockCode -> azo -> net.minecraft.world.ChestLock
    F:net.minecraft.world.ChestLock NO_LOCK -> a
    F:java.lang.String TAG_LOCK -> b
    F:java.lang.String key -> c
    M:boolean unlocksWith(net.minecraft.world.item.ItemStack) -> a
    M:void addToTag(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.ChestLock fromTag(net.minecraft.nbt.NBTTagCompound) -> b
net.minecraft.world.MenuProvider -> azp -> net.minecraft.world.ITileInventory
net.minecraft.world.Nameable -> azq -> net.minecraft.world.INamableTileEntity
net.minecraft.world.SimpleContainer -> azr -> net.minecraft.world.InventorySubcontainer
    F:int size -> b
    F:net.minecraft.core.NonNullList items -> c
    F:java.util.List listeners -> d
    M:void addListener(net.minecraft.world.IInventoryListener) -> a
    M:void removeListener(net.minecraft.world.IInventoryListener) -> b
    M:net.minecraft.world.item.ItemStack getItem(int) -> a
    M:java.util.List removeAllItems() -> f
    M:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    M:net.minecraft.world.item.ItemStack removeItemType(net.minecraft.world.item.Item,int) -> a
    M:net.minecraft.world.item.ItemStack addItem(net.minecraft.world.item.ItemStack) -> a
    M:boolean canAddItem(net.minecraft.world.item.ItemStack) -> b
    M:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    M:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    M:int getContainerSize() -> b
    M:boolean isEmpty() -> c
    M:void setChanged() -> e
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void clearContent() -> a
    M:void fillStackedContents(net.minecraft.world.entity.player.AutoRecipeStackManager) -> a
    M:void moveItemToEmptySlots(net.minecraft.world.item.ItemStack) -> c
    M:void moveItemToOccupiedSlotsWithSameType(net.minecraft.world.item.ItemStack) -> d
    M:void moveItemsBetweenStacks(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:void fromTag(net.minecraft.nbt.NBTTagList) -> a
    M:net.minecraft.nbt.NBTTagList createTag() -> g
net.minecraft.world.SimpleMenuProvider -> azs -> net.minecraft.world.TileInventory
    F:net.minecraft.network.chat.IChatBaseComponent title -> a
    F:net.minecraft.world.inventory.ITileEntityContainer menuConstructor -> b
net.minecraft.world.WorldlyContainer -> azt -> net.minecraft.world.IWorldInventory
net.minecraft.world.WorldlyContainerHolder -> azu -> net.minecraft.world.IInventoryHolder
net.minecraft.world.damagesource.BadRespawnPointDamage -> azv -> net.minecraft.world.damagesource.DamageSourceNetherBed
    M:net.minecraft.network.chat.IChatBaseComponent getLocalizedDeathMessage(net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.damagesource.CombatEntry -> azw -> net.minecraft.world.damagesource.CombatEntry
    F:net.minecraft.world.damagesource.DamageSource source -> a
    F:int time -> b
    F:float damage -> c
    F:float health -> d
    F:java.lang.String location -> e
    F:float fallDistance -> f
    M:net.minecraft.world.damagesource.DamageSource getSource() -> a
    M:int getTime() -> b
    M:float getDamage() -> c
    M:float getHealthBeforeDamage() -> d
    M:float getHealthAfterDamage() -> e
    M:boolean isCombatRelated() -> f
    M:java.lang.String getLocation() -> g
    M:net.minecraft.network.chat.IChatBaseComponent getAttackerName() -> h
    M:net.minecraft.world.entity.Entity getAttacker() -> i
    M:float getFallDistance() -> j
net.minecraft.world.damagesource.CombatRules -> azx -> net.minecraft.world.damagesource.CombatMath
    F:float MAX_ARMOR -> a
    F:float ARMOR_PROTECTION_DIVIDER -> b
    F:float BASE_ARMOR_TOUGHNESS -> c
    F:float MIN_ARMOR_RATIO -> d
    F:int NUM_ARMOR_ITEMS -> e
    M:float getDamageAfterAbsorb(float,float,float) -> a
    M:float getDamageAfterMagicAbsorb(float,float) -> a
net.minecraft.world.damagesource.CombatTracker -> azy -> net.minecraft.world.damagesource.CombatTracker
    F:int RESET_DAMAGE_STATUS_TIME -> a
    F:int RESET_COMBAT_STATUS_TIME -> b
    F:java.util.List entries -> c
    F:net.minecraft.world.entity.EntityLiving mob -> d
    F:int lastDamageTime -> e
    F:int combatStartTime -> f
    F:int combatEndTime -> g
    F:boolean inCombat -> h
    F:boolean takingDamage -> i
    F:java.lang.String nextLocation -> j
    M:void prepareForDamage() -> a
    M:void recordDamage(net.minecraft.world.damagesource.DamageSource,float,float) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getDeathMessage() -> b
    M:net.minecraft.world.entity.EntityLiving getKiller() -> c
    M:net.minecraft.world.damagesource.CombatEntry getMostSignificantFall() -> k
    M:java.lang.String getFallLocation(net.minecraft.world.damagesource.CombatEntry) -> a
    M:boolean isTakingDamage() -> d
    M:boolean isInCombat() -> e
    M:int getCombatDuration() -> f
    M:void resetPreparedStatus() -> l
    M:void recheckStatus() -> g
    M:net.minecraft.world.entity.EntityLiving getMob() -> h
    M:net.minecraft.world.damagesource.CombatEntry getLastEntry() -> i
    M:int getKillerId() -> j
net.minecraft.world.damagesource.DamageSource -> azz -> net.minecraft.world.damagesource.DamageSource
    F:net.minecraft.world.damagesource.DamageSource IN_FIRE -> a
    F:net.minecraft.world.damagesource.DamageSource LIGHTNING_BOLT -> b
    F:net.minecraft.world.damagesource.DamageSource ON_FIRE -> c
    F:net.minecraft.world.damagesource.DamageSource LAVA -> d
    F:net.minecraft.world.damagesource.DamageSource HOT_FLOOR -> e
    F:net.minecraft.world.damagesource.DamageSource IN_WALL -> f
    F:net.minecraft.world.damagesource.DamageSource CRAMMING -> g
    F:net.minecraft.world.damagesource.DamageSource DROWN -> h
    F:net.minecraft.world.damagesource.DamageSource STARVE -> i
    F:net.minecraft.world.damagesource.DamageSource CACTUS -> j
    F:net.minecraft.world.damagesource.DamageSource FALL -> k
    F:net.minecraft.world.damagesource.DamageSource FLY_INTO_WALL -> l
    F:net.minecraft.world.damagesource.DamageSource OUT_OF_WORLD -> m
    F:net.minecraft.world.damagesource.DamageSource GENERIC -> n
    F:net.minecraft.world.damagesource.DamageSource MAGIC -> o
    F:net.minecraft.world.damagesource.DamageSource WITHER -> p
    F:net.minecraft.world.damagesource.DamageSource ANVIL -> q
    F:net.minecraft.world.damagesource.DamageSource FALLING_BLOCK -> r
    F:net.minecraft.world.damagesource.DamageSource DRAGON_BREATH -> s
    F:net.minecraft.world.damagesource.DamageSource DRY_OUT -> t
    F:net.minecraft.world.damagesource.DamageSource SWEET_BERRY_BUSH -> u
    F:net.minecraft.world.damagesource.DamageSource FREEZE -> v
    F:net.minecraft.world.damagesource.DamageSource FALLING_STALACTITE -> w
    F:net.minecraft.world.damagesource.DamageSource STALAGMITE -> x
    F:boolean damageHelmet -> z
    F:java.lang.String msgId -> y
    M:net.minecraft.world.damagesource.DamageSource sting(net.minecraft.world.entity.EntityLiving) -> b
    M:net.minecraft.world.damagesource.DamageSource mobAttack(net.minecraft.world.entity.EntityLiving) -> c
    M:net.minecraft.world.damagesource.DamageSource indirectMobAttack(net.minecraft.world.entity.Entity,net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.damagesource.DamageSource playerAttack(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.damagesource.DamageSource arrow(net.minecraft.world.entity.projectile.EntityArrow,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.damagesource.DamageSource trident(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.damagesource.DamageSource fireworks(net.minecraft.world.entity.projectile.EntityFireworks,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.damagesource.DamageSource fireball(net.minecraft.world.entity.projectile.EntityFireballFireball,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.damagesource.DamageSource witherSkull(net.minecraft.world.entity.projectile.EntityWitherSkull,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.damagesource.DamageSource thrown(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> b
    M:net.minecraft.world.damagesource.DamageSource indirectMagic(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> c
    M:net.minecraft.world.damagesource.DamageSource thorns(net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.damagesource.DamageSource explosion(net.minecraft.world.level.Explosion) -> a
    M:net.minecraft.world.damagesource.DamageSource explosion(net.minecraft.world.entity.EntityLiving) -> d
    M:net.minecraft.world.damagesource.DamageSource sonicBoom(net.minecraft.world.entity.Entity) -> b
    M:net.minecraft.world.damagesource.DamageSource badRespawnPointExplosion() -> a
    M:boolean isProjectile() -> b
    M:net.minecraft.world.damagesource.DamageSource setProjectile() -> c
    M:boolean isExplosion() -> d
    M:net.minecraft.world.damagesource.DamageSource setExplosion() -> e
    M:boolean isBypassArmor() -> f
    M:boolean isDamageHelmet() -> g
    M:float getFoodExhaustion() -> h
    M:boolean isBypassInvul() -> i
    M:boolean isBypassMagic() -> j
    M:boolean isBypassEnchantments() -> k
    M:net.minecraft.world.entity.Entity getDirectEntity() -> l
    M:net.minecraft.world.entity.Entity getEntity() -> m
    M:net.minecraft.world.damagesource.DamageSource bypassArmor() -> n
    M:net.minecraft.world.damagesource.DamageSource damageHelmet() -> o
    M:net.minecraft.world.damagesource.DamageSource bypassInvul() -> p
    M:net.minecraft.world.damagesource.DamageSource bypassMagic() -> q
    M:net.minecraft.world.damagesource.DamageSource bypassEnchantments() -> r
    M:net.minecraft.world.damagesource.DamageSource setIsFire() -> s
    M:net.minecraft.world.damagesource.DamageSource setNoAggro() -> t
    M:net.minecraft.network.chat.IChatBaseComponent getLocalizedDeathMessage(net.minecraft.world.entity.EntityLiving) -> a
    M:boolean isFire() -> u
    M:boolean isNoAggro() -> v
    M:java.lang.String getMsgId() -> w
    M:net.minecraft.world.damagesource.DamageSource setScalesWithDifficulty() -> x
    M:boolean scalesWithDifficulty() -> y
    M:boolean isMagic() -> z
net.minecraft.world.damagesource.EntityDamageSource -> baa -> net.minecraft.world.damagesource.EntityDamageSource
    F:net.minecraft.world.entity.Entity entity -> z
    M:net.minecraft.world.entity.Entity getEntity() -> m
    M:net.minecraft.network.chat.IChatBaseComponent getLocalizedDeathMessage(net.minecraft.world.entity.EntityLiving) -> a
    M:boolean scalesWithDifficulty() -> y
net.minecraft.world.damagesource.IndirectEntityDamageSource -> bab -> net.minecraft.world.damagesource.EntityDamageSourceIndirect
    M:net.minecraft.world.entity.Entity getDirectEntity() -> l
    M:net.minecraft.world.entity.Entity getEntity() -> m
    M:net.minecraft.network.chat.IChatBaseComponent getLocalizedDeathMessage(net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.effect.AbsoptionMobEffect -> bad -> net.minecraft.world.effect.MobEffectAbsorption
    M:void removeAttributeModifiers(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.ai.attributes.AttributeMapBase,int) -> a
    M:void addAttributeModifiers(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.ai.attributes.AttributeMapBase,int) -> b
net.minecraft.world.effect.AttackDamageMobEffect -> bae -> net.minecraft.world.effect.MobEffectAttackDamage
    F:double multiplier -> a
    M:double getAttributeModifierValue(int,net.minecraft.world.entity.ai.attributes.AttributeModifier) -> a
net.minecraft.world.effect.HealthBoostMobEffect -> baf -> net.minecraft.world.effect.MobEffectHealthBoost
    M:void removeAttributeModifiers(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.ai.attributes.AttributeMapBase,int) -> a
net.minecraft.world.effect.InstantenousMobEffect -> bag -> net.minecraft.world.effect.InstantMobEffect
    M:boolean isInstantenous() -> a
    M:boolean isDurationEffectTick(int,int) -> a
net.minecraft.world.effect.MobEffect -> bah -> net.minecraft.world.effect.MobEffectList
    F:java.util.Map attributeModifiers -> a
    F:net.minecraft.world.effect.MobEffectInfo category -> b
    F:int color -> c
    F:java.lang.String descriptionId -> d
    F:java.util.function.Supplier factorDataFactory -> e
    M:net.minecraft.world.effect.MobEffectList byId(int) -> a
    M:int getId(net.minecraft.world.effect.MobEffectList) -> a
    M:int getIdFromNullable(net.minecraft.world.effect.MobEffectList) -> b
    M:java.util.Optional createFactorData() -> b
    M:void applyEffectTick(net.minecraft.world.entity.EntityLiving,int) -> a
    M:void applyInstantenousEffect(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity,net.minecraft.world.entity.EntityLiving,int,double) -> a
    M:boolean isDurationEffectTick(int,int) -> a
    M:boolean isInstantenous() -> a
    M:java.lang.String getOrCreateDescriptionId() -> c
    M:java.lang.String getDescriptionId() -> d
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName() -> e
    M:net.minecraft.world.effect.MobEffectInfo getCategory() -> f
    M:int getColor() -> g
    M:net.minecraft.world.effect.MobEffectList addAttributeModifier(net.minecraft.world.entity.ai.attributes.AttributeBase,java.lang.String,double,net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation) -> a
    M:net.minecraft.world.effect.MobEffectList setFactorDataFactory(java.util.function.Supplier) -> a
    M:java.util.Map getAttributeModifiers() -> h
    M:void removeAttributeModifiers(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.ai.attributes.AttributeMapBase,int) -> a
    M:void addAttributeModifiers(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.ai.attributes.AttributeMapBase,int) -> b
    M:double getAttributeModifierValue(int,net.minecraft.world.entity.ai.attributes.AttributeModifier) -> a
    M:boolean isBeneficial() -> i
net.minecraft.world.effect.MobEffectCategory -> bai -> net.minecraft.world.effect.MobEffectInfo
    F:net.minecraft.world.effect.MobEffectInfo BENEFICIAL -> a
    F:net.minecraft.world.effect.MobEffectInfo HARMFUL -> b
    F:net.minecraft.world.effect.MobEffectInfo NEUTRAL -> c
    F:net.minecraft.EnumChatFormat tooltipFormatting -> d
    M:net.minecraft.EnumChatFormat getTooltipFormatting() -> a
net.minecraft.world.effect.MobEffectInstance -> baj -> net.minecraft.world.effect.MobEffect
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.world.effect.MobEffectList effect -> b
    F:int duration -> c
    F:int amplifier -> d
    F:boolean ambient -> e
    F:boolean noCounter -> f
    F:boolean visible -> g
    F:boolean showIcon -> h
    F:net.minecraft.world.effect.MobEffect hiddenEffect -> i
    F:java.util.Optional factorData -> j
    M:java.util.Optional getFactorData() -> a
    M:void setDetailsFrom(net.minecraft.world.effect.MobEffect) -> a
    M:boolean update(net.minecraft.world.effect.MobEffect) -> b
    M:net.minecraft.world.effect.MobEffectList getEffect() -> b
    M:int getDuration() -> c
    M:int getAmplifier() -> d
    M:boolean isAmbient() -> e
    M:boolean isVisible() -> f
    M:boolean showIcon() -> g
    M:boolean tick(net.minecraft.world.entity.EntityLiving,java.lang.Runnable) -> a
    M:int tickDownDuration() -> j
    M:void applyEffect(net.minecraft.world.entity.EntityLiving) -> a
    M:java.lang.String getDescriptionId() -> h
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.nbt.NBTTagCompound save(net.minecraft.nbt.NBTTagCompound) -> a
    M:void writeDetailsTo(net.minecraft.nbt.NBTTagCompound) -> c
    M:net.minecraft.world.effect.MobEffect load(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.world.effect.MobEffect loadSpecifiedEffect(net.minecraft.world.effect.MobEffectList,net.minecraft.nbt.NBTTagCompound) -> a
    M:void setNoCounter(boolean) -> a
    M:boolean isNoCounter() -> i
    M:int compareTo(net.minecraft.world.effect.MobEffect) -> c
net.minecraft.world.effect.MobEffectInstance$FactorData -> baj$a -> net.minecraft.world.effect.MobEffect$a
    F:com.mojang.serialization.Codec CODEC -> a
    F:int paddingDuration -> b
    F:float factorStart -> c
    F:float factorTarget -> d
    F:float factorCurrent -> e
    F:int effectChangedTimestamp -> f
    F:float factorPreviousFrame -> g
    F:boolean hadEffectLastTick -> h
    M:void update(net.minecraft.world.effect.MobEffect) -> a
    M:float getFactor(net.minecraft.world.entity.EntityLiving,float) -> a
net.minecraft.world.effect.MobEffectUtil -> bak -> net.minecraft.world.effect.MobEffectUtil
    M:java.lang.String formatDuration(net.minecraft.world.effect.MobEffect,float) -> a
    M:boolean hasDigSpeed(net.minecraft.world.entity.EntityLiving) -> a
    M:int getDigSpeedAmplification(net.minecraft.world.entity.EntityLiving) -> b
    M:boolean hasWaterBreathing(net.minecraft.world.entity.EntityLiving) -> c
    M:java.util.List addEffectToPlayersAround(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.Entity,net.minecraft.world.phys.Vec3D,double,net.minecraft.world.effect.MobEffect,int) -> a
net.minecraft.world.effect.MobEffects -> bal -> net.minecraft.world.effect.MobEffects
    F:net.minecraft.world.effect.MobEffectList MOVEMENT_SPEED -> a
    F:net.minecraft.world.effect.MobEffectList MOVEMENT_SLOWDOWN -> b
    F:net.minecraft.world.effect.MobEffectList DIG_SPEED -> c
    F:net.minecraft.world.effect.MobEffectList DIG_SLOWDOWN -> d
    F:net.minecraft.world.effect.MobEffectList DAMAGE_BOOST -> e
    F:net.minecraft.world.effect.MobEffectList HEAL -> f
    F:net.minecraft.world.effect.MobEffectList HARM -> g
    F:net.minecraft.world.effect.MobEffectList JUMP -> h
    F:net.minecraft.world.effect.MobEffectList CONFUSION -> i
    F:net.minecraft.world.effect.MobEffectList REGENERATION -> j
    F:net.minecraft.world.effect.MobEffectList DAMAGE_RESISTANCE -> k
    F:net.minecraft.world.effect.MobEffectList FIRE_RESISTANCE -> l
    F:net.minecraft.world.effect.MobEffectList WATER_BREATHING -> m
    F:net.minecraft.world.effect.MobEffectList INVISIBILITY -> n
    F:net.minecraft.world.effect.MobEffectList BLINDNESS -> o
    F:net.minecraft.world.effect.MobEffectList NIGHT_VISION -> p
    F:net.minecraft.world.effect.MobEffectList HUNGER -> q
    F:net.minecraft.world.effect.MobEffectList WEAKNESS -> r
    F:net.minecraft.world.effect.MobEffectList POISON -> s
    F:net.minecraft.world.effect.MobEffectList WITHER -> t
    F:net.minecraft.world.effect.MobEffectList HEALTH_BOOST -> u
    F:net.minecraft.world.effect.MobEffectList ABSORPTION -> v
    F:net.minecraft.world.effect.MobEffectList SATURATION -> w
    F:net.minecraft.world.effect.MobEffectList GLOWING -> x
    F:net.minecraft.world.effect.MobEffectList LEVITATION -> y
    F:net.minecraft.world.effect.MobEffectList LUCK -> z
    M:net.minecraft.world.effect.MobEffectList register(int,java.lang.String,net.minecraft.world.effect.MobEffectList) -> a
    M:boolean isDurationEffectTick(int,int) -> a
    M:void applyEffectTick(net.minecraft.world.entity.EntityLiving,int) -> a
net.minecraft.world.entity.AgeableMob -> ban -> net.minecraft.world.entity.EntityAgeable
    F:int BABY_START_AGE -> b
    F:int age -> c
    F:int forcedAge -> d
    F:int forcedAgeTimer -> e
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean canBreed() -> g
    M:int getAge() -> j
    M:void ageUp(int,boolean) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:void ageBoundaryReached() -> n
    M:void setBaby(boolean) -> a
    M:int getSpeedUpSecondsWhenFeeding(int) -> c
net.minecraft.world.entity.AgeableMob$AgeableMobGroupData -> ban$a -> net.minecraft.world.entity.EntityAgeable$a
    F:int groupSize -> a
    F:boolean shouldSpawnBaby -> b
    F:float babySpawnChance -> c
    M:int getGroupSize() -> a
    M:void increaseGroupSizeByOne() -> b
    M:boolean isShouldSpawnBaby() -> c
    M:float getBabySpawnChance() -> d
net.minecraft.world.entity.AnimationState -> bao -> net.minecraft.world.entity.AnimationState
    F:long STOPPED -> a
    F:long lastTime -> b
    F:long accumulatedTime -> c
    M:void start(int) -> a
    M:void startIfStopped(int) -> b
    M:void stop() -> a
    M:void ifStarted(java.util.function.Consumer) -> a
    M:void updateTime(float,float) -> a
    M:long getAccumulatedTime() -> b
    M:boolean isStarted() -> c
net.minecraft.world.entity.AreaEffectCloud -> bap -> net.minecraft.world.entity.EntityAreaEffectCloud
    F:org.slf4j.Logger LOGGER -> b
    F:int TIME_BETWEEN_APPLICATIONS -> c
    F:net.minecraft.network.syncher.DataWatcherObject DATA_RADIUS -> d
    F:net.minecraft.network.syncher.DataWatcherObject DATA_COLOR -> e
    F:net.minecraft.network.syncher.DataWatcherObject DATA_WAITING -> f
    F:net.minecraft.network.syncher.DataWatcherObject DATA_PARTICLE -> ao
    F:float MAX_RADIUS -> ap
    F:net.minecraft.world.item.alchemy.PotionRegistry potion -> aq
    F:java.util.List effects -> ar
    F:java.util.Map victims -> as
    F:int duration -> at
    F:int waitTime -> au
    F:int reapplicationDelay -> av
    F:boolean fixedColor -> aw
    F:int durationOnUse -> ax
    F:float radiusOnUse -> ay
    F:float radiusPerTick -> az
    M:void setRadius(float) -> a
    M:float getRadius() -> h
    M:void setPotion(net.minecraft.world.item.alchemy.PotionRegistry) -> a
    M:void updateColor() -> w
    M:void addEffect(net.minecraft.world.effect.MobEffect) -> a
    M:int getColor() -> i
    M:void setFixedColor(int) -> a
    M:net.minecraft.core.particles.ParticleParam getParticle() -> j
    M:void setParticle(net.minecraft.core.particles.ParticleParam) -> a
    M:void setWaiting(boolean) -> a
    M:boolean isWaiting() -> l
    M:int getDuration() -> n
    M:void setDuration(int) -> b
    M:void tick() -> k
    M:float getRadiusOnUse() -> o
    M:void setRadiusOnUse(float) -> b
    M:float getRadiusPerTick() -> q
    M:void setRadiusPerTick(float) -> c
    M:int getDurationOnUse() -> r
    M:void setDurationOnUse(int) -> c
    M:int getWaitTime() -> s
    M:void setWaitTime(int) -> d
    M:void setOwner(net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.entity.EntityLiving getOwner() -> t
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:net.minecraft.world.item.alchemy.PotionRegistry getPotion() -> u
    M:net.minecraft.world.entity.EntitySize getDimensions(net.minecraft.world.entity.EntityPose) -> a
net.minecraft.world.entity.Entity -> baq -> net.minecraft.world.entity.Entity
    F:org.slf4j.Logger LOGGER -> b
    F:java.lang.String ID_TAG -> g
    F:java.lang.String PASSENGERS_TAG -> h
    F:java.util.concurrent.atomic.AtomicInteger ENTITY_COUNTER -> c
    F:java.util.List EMPTY_LIST -> d
    F:int BOARDING_COOLDOWN -> i
    F:int TOTAL_AIR_SUPPLY -> j
    F:int MAX_ENTITY_TAG_COUNT -> k
    F:double DELTA_AFFECTED_BY_BLOCKS_BELOW -> l
    F:float BREATHING_DISTANCE_BELOW_EYES -> m
    F:int BASE_TICKS_REQUIRED_TO_FREEZE -> n
    F:int FREEZE_HURT_FREQUENCY -> o
    F:net.minecraft.world.phys.AxisAlignedBB INITIAL_AABB -> e
    F:double WATER_FLOW_SCALE -> ao
    F:double LAVA_FAST_FLOW_SCALE -> ap
    F:double LAVA_SLOW_FLOW_SCALE -> aq
    F:java.lang.String UUID_TAG -> p
    F:double viewScale -> ar
    F:net.minecraft.world.entity.EntityTypes type -> as
    F:int id -> at
    F:boolean blocksBuilding -> q
    F:com.google.common.collect.ImmutableList passengers -> au
    F:int boardingCooldown -> r
    F:net.minecraft.world.entity.Entity vehicle -> av
    F:net.minecraft.world.level.World level -> s
    F:double xo -> t
    F:double yo -> u
    F:double zo -> v
    F:net.minecraft.world.phys.Vec3D position -> aw
    F:net.minecraft.core.BlockPosition blockPosition -> ax
    F:net.minecraft.world.level.ChunkCoordIntPair chunkPosition -> ay
    F:net.minecraft.world.phys.Vec3D deltaMovement -> az
    F:float yRotO -> w
    F:float xRotO -> x
    F:boolean onGround -> y
    F:boolean horizontalCollision -> z
    F:int FLAG_ONFIRE -> aa
    F:int FLAG_GLOWING -> ab
    F:int FLAG_FALL_FLYING -> ac
    F:net.minecraft.network.syncher.DataWatcherObject DATA_POSE -> ad
    F:boolean noCulling -> ae
    F:boolean hasImpulse -> af
    F:boolean isInsidePortal -> ag
    F:int portalTime -> ah
    F:net.minecraft.core.BlockPosition portalEntrancePos -> ai
    F:java.util.UUID uuid -> aj
    F:java.lang.String stringUUID -> ak
    F:float eyeHeight -> ba
    F:boolean isInPowderSnow -> al
    F:boolean wasInPowderSnow -> am
    F:boolean wasOnFire -> an
    F:float crystalSoundIntensity -> bb
    F:int lastCrystalSoundPlayTick -> bc
    F:boolean hasVisualFire -> bd
    F:net.minecraft.world.level.block.state.IBlockData feetBlockState -> be
    M:boolean isColliding(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:int getTeamColor() -> aa
    M:void unRide() -> ab
    M:void syncPacketPositionCodec(double,double,double) -> d
    M:net.minecraft.network.protocol.game.VecDeltaCodec getPositionCodec() -> ac
    M:net.minecraft.world.entity.EntityTypes getType() -> ad
    M:int getId() -> ae
    M:void setId(int) -> e
    M:java.util.Set getTags() -> af
    M:boolean addTag(java.lang.String) -> a
    M:boolean removeTag(java.lang.String) -> b
    M:void kill() -> ag
    M:void discard() -> ah
    M:net.minecraft.network.syncher.DataWatcher getEntityData() -> ai
    M:boolean equals(java.lang.Object) -> equals
    M:void remove(net.minecraft.world.entity.Entity$RemovalReason) -> a
    M:void onClientRemoval() -> aj
    M:void setPose(net.minecraft.world.entity.EntityPose) -> b
    M:net.minecraft.world.entity.EntityPose getPose() -> ak
    M:boolean hasPose(net.minecraft.world.entity.EntityPose) -> c
    M:boolean closerThan(net.minecraft.world.entity.Entity,double) -> a
    M:boolean closerThan(net.minecraft.world.entity.Entity,double,double) -> a
    M:void setRot(float,float) -> a
    M:void setPos(double,double,double) -> e
    M:net.minecraft.world.phys.AxisAlignedBB makeBoundingBox() -> al
    M:void reapplyPosition() -> am
    M:void turn(double,double) -> a
    M:void tick() -> k
    M:void baseTick() -> an
    M:void checkOutOfWorld() -> ao
    M:void setPortalCooldown() -> ap
    M:boolean isOnPortalCooldown() -> aq
    M:int getPortalWaitTime() -> ar
    M:void lavaHurt() -> as
    M:void setSecondsOnFire(int) -> f
    M:void setRemainingFireTicks(int) -> g
    M:int getRemainingFireTicks() -> at
    M:void clearFire() -> au
    M:void outOfWorld() -> av
    M:boolean isFree(double,double,double) -> f
    M:boolean isFree(net.minecraft.world.phys.AxisAlignedBB) -> b
    M:void setOnGround(boolean) -> c
    M:boolean isOnGround() -> aw
    M:void move(net.minecraft.world.entity.EnumMoveType,net.minecraft.world.phys.Vec3D) -> a
    M:boolean isHorizontalCollisionMinor(net.minecraft.world.phys.Vec3D) -> b
    M:void tryCheckInsideBlocks() -> ax
    M:void playEntityOnFireExtinguishedSound() -> ay
    M:void processFlappingMovement() -> az
    M:net.minecraft.core.BlockPosition getOnPos(float) -> a
    M:net.minecraft.world.phys.Vec3D maybeBackOffFromEdge(net.minecraft.world.phys.Vec3D,net.minecraft.world.entity.EnumMoveType) -> a
    M:net.minecraft.world.phys.Vec3D limitPistonMovement(net.minecraft.world.phys.Vec3D) -> c
    M:double applyPistonMovementRestriction(net.minecraft.core.EnumDirection$EnumAxis,double) -> a
    M:net.minecraft.world.phys.Vec3D collide(net.minecraft.world.phys.Vec3D) -> g
    M:net.minecraft.world.phys.Vec3D collideBoundingBox(net.minecraft.world.entity.Entity,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.AxisAlignedBB,net.minecraft.world.level.World,java.util.List) -> a
    M:net.minecraft.world.phys.Vec3D collideWithShapes(net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.AxisAlignedBB,java.util.List) -> a
    M:void onInsideBlock(net.minecraft.world.level.block.state.IBlockData) -> a
    M:void gameEvent(net.minecraft.world.level.gameevent.GameEvent,net.minecraft.world.entity.Entity) -> a
    M:void gameEvent(net.minecraft.world.level.gameevent.GameEvent) -> a
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void playAmethystStepSound(net.minecraft.world.level.block.state.IBlockData) -> b
    M:void playSwimSound(float) -> d
    M:void playSound(net.minecraft.sounds.SoundEffect,float,float) -> a
    M:void playSound(net.minecraft.sounds.SoundEffect) -> a
    M:void setSilent(boolean) -> d
    M:void setNoGravity(boolean) -> e
    M:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:boolean isInRain() -> j
    M:boolean isInBubbleColumn() -> l
    M:void updateInWaterStateAndDoWaterCurrentPushing() -> ba
    M:void updateFluidOnEyes() -> n
    M:void doWaterSplashEffect() -> bb
    M:net.minecraft.world.level.block.state.IBlockData getBlockStateOnLegacy() -> bc
    M:net.minecraft.world.level.block.state.IBlockData getBlockStateOn() -> bd
    M:boolean canSpawnSprintParticle() -> be
    M:void spawnSprintParticle() -> bf
    M:boolean isEyeInFluid(net.minecraft.tags.TagKey) -> a
    M:boolean isInLava() -> bg
    M:void moveRelative(float,net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.world.phys.Vec3D getInputVector(net.minecraft.world.phys.Vec3D,float,float) -> a
    M:float getLightLevelDependentMagicValue() -> bh
    M:void absMoveTo(double,double,double,float,float) -> a
    M:void absMoveTo(double,double,double) -> g
    M:void moveTo(net.minecraft.world.phys.Vec3D) -> d
    M:void moveTo(double,double,double) -> c
    M:void moveTo(net.minecraft.core.BlockPosition,float,float) -> a
    M:void moveTo(double,double,double,float,float) -> b
    M:void setOldPosAndRot() -> bi
    M:float distanceTo(net.minecraft.world.entity.Entity) -> e
    M:double distanceToSqr(double,double,double) -> h
    M:double distanceToSqr(net.minecraft.world.entity.Entity) -> f
    M:double distanceToSqr(net.minecraft.world.phys.Vec3D) -> e
    M:void push(net.minecraft.world.entity.Entity) -> g
    M:void push(double,double,double) -> i
    M:void markHurt() -> bj
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:net.minecraft.world.phys.Vec3D getViewVector(float) -> e
    M:float getViewXRot(float) -> f
    M:float getViewYRot(float) -> g
    M:net.minecraft.world.phys.Vec3D calculateViewVector(float,float) -> b
    M:net.minecraft.world.phys.Vec3D getUpVector(float) -> h
    M:net.minecraft.world.phys.Vec3D calculateUpVector(float,float) -> c
    M:net.minecraft.world.phys.Vec3D getEyePosition() -> bk
    M:net.minecraft.world.phys.Vec3D getEyePosition(float) -> i
    M:net.minecraft.world.phys.Vec3D getLightProbePosition(float) -> j
    M:net.minecraft.world.phys.Vec3D getPosition(float) -> k
    M:net.minecraft.world.phys.MovingObjectPosition pick(double,float,boolean) -> a
    M:boolean isPickable() -> bl
    M:boolean isPushable() -> bm
    M:void awardKillScore(net.minecraft.world.entity.Entity,int,net.minecraft.world.damagesource.DamageSource) -> a
    M:boolean shouldRender(double,double,double) -> j
    M:boolean shouldRenderAtSqrDistance(double) -> a
    M:boolean saveAsPassenger(net.minecraft.nbt.NBTTagCompound) -> d
    M:boolean save(net.minecraft.nbt.NBTTagCompound) -> e
    M:net.minecraft.nbt.NBTTagCompound saveWithoutId(net.minecraft.nbt.NBTTagCompound) -> f
    M:void load(net.minecraft.nbt.NBTTagCompound) -> g
    M:boolean repositionEntityAfterLoad() -> bn
    M:java.lang.String getEncodeId() -> bo
    M:net.minecraft.nbt.NBTTagList newDoubleList(double[]) -> a
    M:net.minecraft.nbt.NBTTagList newFloatList(float[]) -> a
    M:net.minecraft.world.entity.item.EntityItem spawnAtLocation(net.minecraft.world.level.IMaterial) -> a
    M:net.minecraft.world.entity.item.EntityItem spawnAtLocation(net.minecraft.world.level.IMaterial,int) -> a
    M:net.minecraft.world.entity.item.EntityItem spawnAtLocation(net.minecraft.world.item.ItemStack) -> b
    M:net.minecraft.world.entity.item.EntityItem spawnAtLocation(net.minecraft.world.item.ItemStack,float) -> a
    M:boolean isAlive() -> bp
    M:boolean isInWall() -> bq
    M:net.minecraft.world.EnumInteractionResult interact(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:boolean canCollideWith(net.minecraft.world.entity.Entity) -> h
    M:boolean canBeCollidedWith() -> br
    M:void rideTick() -> bs
    M:void positionRider(net.minecraft.world.entity.Entity) -> i
    M:void positionRider(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity$MoveFunction) -> a
    M:void onPassengerTurned(net.minecraft.world.entity.Entity) -> j
    M:double getMyRidingOffset() -> bt
    M:double getPassengersRidingOffset() -> bu
    M:boolean startRiding(net.minecraft.world.entity.Entity) -> k
    M:boolean showVehicleHealth() -> bv
    M:boolean startRiding(net.minecraft.world.entity.Entity,boolean) -> a
    M:boolean canRide(net.minecraft.world.entity.Entity) -> l
    M:boolean canEnterPose(net.minecraft.world.entity.EntityPose) -> d
    M:void ejectPassengers() -> bw
    M:void removeVehicle() -> bx
    M:void stopRiding() -> p
    M:void addPassenger(net.minecraft.world.entity.Entity) -> m
    M:void removePassenger(net.minecraft.world.entity.Entity) -> n
    M:boolean canAddPassenger(net.minecraft.world.entity.Entity) -> o
    M:void lerpTo(double,double,double,float,float,int,boolean) -> a
    M:void lerpHeadTo(float,int) -> a
    M:float getPickRadius() -> by
    M:net.minecraft.world.phys.Vec3D getLookAngle() -> bz
    M:net.minecraft.world.phys.Vec3D getHandHoldingItemAngle(net.minecraft.world.item.Item) -> a
    M:void handleInsidePortal(net.minecraft.core.BlockPosition) -> d
    M:void lerpMotion(double,double,double) -> k
    M:void handleEntityEvent(byte) -> a
    M:void setItemSlot(net.minecraft.world.entity.EnumItemSlot,net.minecraft.world.item.ItemStack) -> a
    M:void setShiftKeyDown(boolean) -> f
    M:void setSprinting(boolean) -> g
    M:void setSwimming(boolean) -> h
    M:void setGlowingTag(boolean) -> i
    M:boolean isInvisibleTo(net.minecraft.world.entity.player.EntityHuman) -> c
    M:void updateDynamicGameEventListener(java.util.function.BiConsumer) -> a
    M:boolean isAlliedTo(net.minecraft.world.entity.Entity) -> p
    M:boolean isAlliedTo(net.minecraft.world.scores.ScoreboardTeamBase) -> a
    M:void setInvisible(boolean) -> j
    M:boolean getSharedFlag(int) -> h
    M:void setSharedFlag(int,boolean) -> b
    M:int getMaxAirSupply() -> ca
    M:int getAirSupply() -> cb
    M:void setAirSupply(int) -> i
    M:int getTicksFrozen() -> cc
    M:void setTicksFrozen(int) -> j
    M:float getPercentFrozen() -> cd
    M:boolean isFullyFrozen() -> ce
    M:int getTicksRequiredToFreeze() -> cf
    M:void thunderHit(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLightning) -> a
    M:void onAboveBubbleCol(boolean) -> k
    M:void onInsideBubbleColumn(boolean) -> l
    M:boolean wasKilled(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void resetFallDistance() -> m
    M:void moveTowardsClosestSpace(double,double,double) -> l
    M:void makeStuckInBlock(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.network.chat.IChatBaseComponent removeAction(net.minecraft.network.chat.IChatBaseComponent) -> c
    M:net.minecraft.network.chat.IChatBaseComponent getTypeName() -> cg
    M:boolean is(net.minecraft.world.entity.Entity) -> q
    M:float getYHeadRot() -> ch
    M:void setYHeadRot(float) -> l
    M:void setYBodyRot(float) -> m
    M:boolean isAttackable() -> ci
    M:boolean skipAttackInteraction(net.minecraft.world.entity.Entity) -> r
    M:boolean isInvulnerableTo(net.minecraft.world.damagesource.DamageSource) -> b
    M:boolean isInvulnerable() -> cj
    M:void setInvulnerable(boolean) -> m
    M:void copyPosition(net.minecraft.world.entity.Entity) -> s
    M:void restoreFrom(net.minecraft.world.entity.Entity) -> t
    M:net.minecraft.world.entity.Entity changeDimension(net.minecraft.server.level.WorldServer) -> b
    M:void removeAfterChangingDimensions() -> ck
    M:net.minecraft.world.level.portal.ShapeDetectorShape findDimensionEntryPoint(net.minecraft.server.level.WorldServer) -> a
    M:net.minecraft.world.phys.Vec3D getRelativePortalPosition(net.minecraft.core.EnumDirection$EnumAxis,net.minecraft.BlockUtil$Rectangle) -> a
    M:java.util.Optional getExitPortal(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,boolean,net.minecraft.world.level.border.WorldBorder) -> a
    M:boolean canChangeDimensions() -> cl
    M:float getBlockExplosionResistance(net.minecraft.world.level.Explosion,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.Fluid,float) -> a
    M:boolean shouldBlockExplode(net.minecraft.world.level.Explosion,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,float) -> a
    M:int getMaxFallDistance() -> cm
    M:boolean isIgnoringBlockTriggers() -> cn
    M:void fillCrashReportCategory(net.minecraft.CrashReportSystemDetails) -> a
    M:boolean displayFireAnimation() -> co
    M:java.util.UUID getUUID() -> cp
    M:java.lang.String getStringUUID() -> cq
    M:java.lang.String getScoreboardName() -> cr
    M:boolean isPushedByFluid() -> cs
    M:double getViewScale() -> ct
    M:void setViewScale(double) -> b
    M:void setCustomName(net.minecraft.network.chat.IChatBaseComponent) -> b
    M:void setCustomNameVisible(boolean) -> n
    M:boolean isCustomNameVisible() -> cu
    M:void teleportToWithTicket(double,double,double) -> m
    M:void dismountTo(double,double,double) -> a
    M:void teleportTo(double,double,double) -> b
    M:boolean shouldShowName() -> cv
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:net.minecraft.core.EnumDirection getDirection() -> cw
    M:net.minecraft.core.EnumDirection getMotionDirection() -> cx
    M:net.minecraft.network.chat.ChatHoverable createHoverEvent() -> cy
    M:boolean broadcastToPlayer(net.minecraft.server.level.EntityPlayer) -> a
    M:net.minecraft.world.phys.AxisAlignedBB getBoundingBox() -> cz
    M:net.minecraft.world.phys.AxisAlignedBB getBoundingBoxForPose(net.minecraft.world.entity.EntityPose) -> e
    M:void setBoundingBox(net.minecraft.world.phys.AxisAlignedBB) -> a
    M:float getEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> a
    M:float getEyeHeight(net.minecraft.world.entity.EntityPose) -> f
    M:net.minecraft.world.entity.SlotAccess getSlot(int) -> k
    M:void sendSystemMessage(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:net.minecraft.world.EnumInteractionResult interactAt(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.phys.Vec3D,net.minecraft.world.EnumHand) -> a
    M:void doEnchantDamageEffects(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.Entity) -> a
    M:void startSeenByPlayer(net.minecraft.server.level.EntityPlayer) -> c
    M:void stopSeenByPlayer(net.minecraft.server.level.EntityPlayer) -> d
    M:float rotate(net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:float mirror(net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:boolean hasPassenger(net.minecraft.world.entity.Entity) -> u
    M:boolean hasPassenger(java.util.function.Predicate) -> a
    M:java.util.stream.Stream getIndirectPassengersStream() -> o
    M:boolean isPassengerOfSameVehicle(net.minecraft.world.entity.Entity) -> v
    M:boolean hasIndirectPassenger(net.minecraft.world.entity.Entity) -> w
    M:net.minecraft.world.phys.Vec3D getCollisionHorizontalEscapeVector(double,double,float) -> a
    M:net.minecraft.world.phys.Vec3D getDismountLocationForPassenger(net.minecraft.world.entity.EntityLiving) -> b
    M:boolean hasPermissions(int) -> l
    M:void lookAt(net.minecraft.commands.arguments.ArgumentAnchor$Anchor,net.minecraft.world.phys.Vec3D) -> a
    M:boolean updateFluidHeightAndDoFluidPushing(net.minecraft.tags.TagKey,double) -> a
    M:double getFluidHeight(net.minecraft.tags.TagKey) -> b
    M:net.minecraft.world.entity.EntitySize getDimensions(net.minecraft.world.entity.EntityPose) -> a
    M:net.minecraft.world.phys.Vec3D trackingPosition() -> da
    M:net.minecraft.core.BlockPosition blockPosition() -> db
    M:net.minecraft.world.level.block.state.IBlockData getFeetBlockState() -> dc
    M:net.minecraft.world.level.ChunkCoordIntPair chunkPosition() -> dd
    M:net.minecraft.world.phys.Vec3D getDeltaMovement() -> de
    M:void setDeltaMovement(net.minecraft.world.phys.Vec3D) -> f
    M:void setDeltaMovement(double,double,double) -> n
    M:int getBlockX() -> df
    M:double getX() -> dg
    M:double getX(double) -> c
    M:double getRandomX(double) -> d
    M:int getBlockY() -> dh
    M:double getY() -> di
    M:double getY(double) -> e
    M:double getRandomY() -> dj
    M:double getEyeY() -> dk
    M:int getBlockZ() -> dl
    M:double getZ() -> dm
    M:double getZ(double) -> f
    M:double getRandomZ(double) -> g
    M:void setPosRaw(double,double,double) -> o
    M:void checkDespawn() -> dn
    M:net.minecraft.world.phys.Vec3D getRopeHoldPosition(float) -> n
    M:void recreateFromPacket(net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity) -> a
    M:net.minecraft.world.item.ItemStack getPickResult() -> do
    M:void setIsInPowderSnow(boolean) -> o
    M:boolean canFreeze() -> dp
    M:boolean isFreezing() -> dq
    M:float getYRot() -> dr
    M:float getVisualRotationYInDegrees() -> ds
    M:void setYRot(float) -> o
    M:float getXRot() -> dt
    M:void setXRot(float) -> p
    M:boolean isRemoved() -> du
    M:net.minecraft.world.entity.Entity$RemovalReason getRemovalReason() -> dv
    M:void setRemoved(net.minecraft.world.entity.Entity$RemovalReason) -> b
    M:void unsetRemoved() -> dw
    M:void setLevelCallback(net.minecraft.world.level.entity.EntityInLevelCallback) -> a
    M:boolean shouldBeSaved() -> dx
    M:boolean isAlwaysTicking() -> dy
    M:boolean mayInteract(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.Entity$MoveFunction -> baq$a -> net.minecraft.world.entity.Entity$MoveFunction
net.minecraft.world.entity.Entity$MovementEmission -> baq$b -> net.minecraft.world.entity.Entity$MovementEmission
    F:net.minecraft.world.entity.Entity$MovementEmission NONE -> a
    F:net.minecraft.world.entity.Entity$MovementEmission SOUNDS -> b
    F:net.minecraft.world.entity.Entity$MovementEmission EVENTS -> c
    F:net.minecraft.world.entity.Entity$MovementEmission ALL -> d
    F:boolean sounds -> e
    F:boolean events -> f
    M:boolean emitsAnything() -> a
    M:boolean emitsEvents() -> b
    M:boolean emitsSounds() -> c
net.minecraft.world.entity.Entity$RemovalReason -> baq$c -> net.minecraft.world.entity.Entity$RemovalReason
    F:net.minecraft.world.entity.Entity$RemovalReason KILLED -> a
    F:net.minecraft.world.entity.Entity$RemovalReason DISCARDED -> b
    F:net.minecraft.world.entity.Entity$RemovalReason UNLOADED_TO_CHUNK -> c
    F:net.minecraft.world.entity.Entity$RemovalReason UNLOADED_WITH_PLAYER -> d
    F:net.minecraft.world.entity.Entity$RemovalReason CHANGED_DIMENSION -> e
    F:boolean destroy -> f
    F:boolean save -> g
    M:boolean shouldDestroy() -> a
    M:boolean shouldSave() -> b
net.minecraft.world.entity.EntityDimensions -> bar -> net.minecraft.world.entity.EntitySize
    F:float width -> a
    F:float height -> b
    F:boolean fixed -> c
    M:net.minecraft.world.phys.AxisAlignedBB makeBoundingBox(net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.world.phys.AxisAlignedBB makeBoundingBox(double,double,double) -> a
    M:net.minecraft.world.entity.EntitySize scale(float) -> a
    M:net.minecraft.world.entity.EntitySize scale(float,float) -> a
    M:net.minecraft.world.entity.EntitySize scalable(float,float) -> b
    M:net.minecraft.world.entity.EntitySize fixed(float,float) -> c
net.minecraft.world.entity.EntityEvent -> bas -> net.minecraft.world.entity.EntityEvent
    F:byte JUMP -> a
    F:byte HURT -> b
    F:byte DEATH -> c
    F:byte START_ATTACKING -> d
    F:byte STOP_ATTACKING -> e
    F:byte TAMING_FAILED -> f
    F:byte TAMING_SUCCEEDED -> g
    F:byte SHAKE_WETNESS -> h
    F:byte USE_ITEM_COMPLETE -> i
    F:byte EAT_GRASS -> j
    F:byte OFFER_FLOWER -> k
    F:byte LOVE_HEARTS -> l
    F:byte VILLAGER_ANGRY -> m
    F:byte VILLAGER_HAPPY -> n
    F:byte WITCH_HAT_MAGIC -> o
    F:byte ZOMBIE_CONVERTING -> p
    F:byte FIREWORKS_EXPLODE -> q
    F:byte IN_LOVE_HEARTS -> r
    F:byte SQUID_ANIM_SYNCH -> s
    F:byte SILVERFISH_MERGE_ANIM -> t
    F:byte GUARDIAN_ATTACK_SOUND -> u
    F:byte REDUCED_DEBUG_INFO -> v
    F:byte FULL_DEBUG_INFO -> w
    F:byte PERMISSION_LEVEL_ALL -> x
    F:byte PERMISSION_LEVEL_MODERATORS -> y
    F:byte PERMISSION_LEVEL_GAMEMASTERS -> z
    F:byte HONEY_SLIDE -> aa
    F:byte HONEY_JUMP -> ab
    F:byte SWAP_HANDS -> ac
    F:byte CANCEL_SHAKE_WETNESS -> ad
    F:byte FROZEN -> ae
    F:byte START_RAM -> af
    F:byte END_RAM -> ag
    F:byte POOF -> ah
    F:byte TENDRILS_SHIVER -> ai
    F:byte SONIC_CHARGE -> aj
net.minecraft.world.entity.EntitySelector -> bat -> net.minecraft.world.entity.IEntitySelector
    F:java.util.function.Predicate ENTITY_STILL_ALIVE -> a
    F:java.util.function.Predicate LIVING_ENTITY_STILL_ALIVE -> b
    F:java.util.function.Predicate ENTITY_NOT_BEING_RIDDEN -> c
    F:java.util.function.Predicate CONTAINER_ENTITY_SELECTOR -> d
    F:java.util.function.Predicate NO_CREATIVE_OR_SPECTATOR -> e
    F:java.util.function.Predicate NO_SPECTATORS -> f
    F:java.util.function.Predicate CAN_BE_COLLIDED_WITH -> g
    M:java.util.function.Predicate withinDistance(double,double,double,double) -> a
    M:java.util.function.Predicate pushableBy(net.minecraft.world.entity.Entity) -> a
    M:java.util.function.Predicate notRiding(net.minecraft.world.entity.Entity) -> b
net.minecraft.world.entity.EntitySelector$MobCanWearArmorEntitySelector -> bat$a -> net.minecraft.world.entity.IEntitySelector$EntitySelectorEquipable
    F:net.minecraft.world.item.ItemStack itemStack -> a
    M:boolean test(net.minecraft.world.entity.Entity) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.entity.EntityType -> bau -> net.minecraft.world.entity.EntityTypes
    F:org.slf4j.Logger LOGGER -> bp
    F:java.lang.String ENTITY_TAG -> a
    F:net.minecraft.core.Holder$Reference builtInRegistryHolder -> bq
    F:float MAGIC_HORSE_WIDTH -> br
    F:net.minecraft.world.entity.EntityTypes ALLAY -> b
    F:net.minecraft.world.entity.EntityTypes AREA_EFFECT_CLOUD -> c
    F:net.minecraft.world.entity.EntityTypes ARMOR_STAND -> d
    F:net.minecraft.world.entity.EntityTypes ARROW -> e
    F:net.minecraft.world.entity.EntityTypes AXOLOTL -> f
    F:net.minecraft.world.entity.EntityTypes BAT -> g
    F:net.minecraft.world.entity.EntityTypes BEE -> h
    F:net.minecraft.world.entity.EntityTypes BLAZE -> i
    F:net.minecraft.world.entity.EntityTypes BOAT -> j
    F:net.minecraft.world.entity.EntityTypes CHEST_BOAT -> k
    F:net.minecraft.world.entity.EntityTypes CAT -> l
    F:net.minecraft.world.entity.EntityTypes CAVE_SPIDER -> m
    F:net.minecraft.world.entity.EntityTypes CHICKEN -> n
    F:net.minecraft.world.entity.EntityTypes COD -> o
    F:net.minecraft.world.entity.EntityTypes COW -> p
    F:net.minecraft.world.entity.EntityTypes CREEPER -> q
    F:net.minecraft.world.entity.EntityTypes DOLPHIN -> r
    F:net.minecraft.world.entity.EntityTypes DONKEY -> s
    F:net.minecraft.world.entity.EntityTypes DRAGON_FIREBALL -> t
    F:net.minecraft.world.entity.EntityTypes DROWNED -> u
    F:net.minecraft.world.entity.EntityTypes ELDER_GUARDIAN -> v
    F:net.minecraft.world.entity.EntityTypes END_CRYSTAL -> w
    F:net.minecraft.world.entity.EntityTypes ENDER_DRAGON -> x
    F:net.minecraft.world.entity.EntityTypes ENDERMAN -> y
    F:net.minecraft.world.entity.EntityTypes ENDERMITE -> z
    F:net.minecraft.world.entity.EntityTypes MAGMA_CUBE -> aa
    F:net.minecraft.world.entity.EntityTypes MARKER -> ab
    F:net.minecraft.world.entity.EntityTypes MINECART -> ac
    F:net.minecraft.world.entity.EntityTypes CHEST_MINECART -> ad
    F:net.minecraft.world.entity.EntityTypes COMMAND_BLOCK_MINECART -> ae
    F:net.minecraft.world.entity.EntityTypes FURNACE_MINECART -> af
    F:net.minecraft.world.entity.EntityTypes HOPPER_MINECART -> ag
    F:net.minecraft.world.entity.EntityTypes SPAWNER_MINECART -> ah
    F:net.minecraft.world.entity.EntityTypes TNT_MINECART -> ai
    F:net.minecraft.world.entity.EntityTypes MULE -> aj
    F:net.minecraft.world.entity.EntityTypes MOOSHROOM -> ak
    F:net.minecraft.world.entity.EntityTypes OCELOT -> al
    F:net.minecraft.world.entity.EntityTypes PAINTING -> am
    F:net.minecraft.world.entity.EntityTypes PANDA -> an
    F:net.minecraft.world.entity.EntityTypes PARROT -> ao
    F:net.minecraft.world.entity.EntityTypes PHANTOM -> ap
    F:net.minecraft.world.entity.EntityTypes PIG -> aq
    F:net.minecraft.world.entity.EntityTypes PIGLIN -> ar
    F:net.minecraft.world.entity.EntityTypes PIGLIN_BRUTE -> as
    F:net.minecraft.world.entity.EntityTypes PILLAGER -> at
    F:net.minecraft.world.entity.EntityTypes POLAR_BEAR -> au
    F:net.minecraft.world.entity.EntityTypes TNT -> av
    F:net.minecraft.world.entity.EntityTypes PUFFERFISH -> aw
    F:net.minecraft.world.entity.EntityTypes RABBIT -> ax
    F:net.minecraft.world.entity.EntityTypes RAVAGER -> ay
    F:net.minecraft.world.entity.EntityTypes SALMON -> az
    F:net.minecraft.world.entity.EntityTypes VINDICATOR -> ba
    F:net.minecraft.world.entity.EntityTypes WANDERING_TRADER -> bb
    F:net.minecraft.world.entity.EntityTypes WARDEN -> bc
    F:net.minecraft.world.entity.EntityTypes WITCH -> bd
    F:net.minecraft.world.entity.EntityTypes WITHER -> be
    F:net.minecraft.world.entity.EntityTypes WITHER_SKELETON -> bf
    F:net.minecraft.world.entity.EntityTypes WITHER_SKULL -> bg
    F:net.minecraft.world.entity.EntityTypes WOLF -> bh
    F:net.minecraft.world.entity.EntityTypes ZOGLIN -> bi
    F:net.minecraft.world.entity.EntityTypes ZOMBIE -> bj
    F:net.minecraft.world.entity.EntityTypes ZOMBIE_HORSE -> bk
    F:net.minecraft.world.entity.EntityTypes ZOMBIE_VILLAGER -> bl
    F:net.minecraft.world.entity.EntityTypes ZOMBIFIED_PIGLIN -> bm
    F:net.minecraft.world.entity.EntityTypes PLAYER -> bn
    F:net.minecraft.world.entity.EntityTypes FISHING_BOBBER -> bo
    F:net.minecraft.world.entity.EntityType$EntityFactory factory -> bs
    F:net.minecraft.world.entity.EnumCreatureType category -> bt
    F:com.google.common.collect.ImmutableSet immuneTo -> bu
    F:boolean serialize -> bv
    F:boolean summon -> bw
    F:boolean fireImmune -> bx
    F:boolean canSpawnFarFromPlayer -> by
    F:int clientTrackingRange -> bz
    M:net.minecraft.world.entity.EntityTypes register(java.lang.String,net.minecraft.world.entity.EntityTypes$Builder) -> a
    M:net.minecraft.resources.MinecraftKey getKey(net.minecraft.world.entity.EntityTypes) -> a
    M:java.util.Optional byString(java.lang.String) -> a
    M:net.minecraft.world.entity.Entity spawn(net.minecraft.server.level.WorldServer,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.EntityHuman,net.minecraft.core.BlockPosition,net.minecraft.world.entity.EnumMobSpawn,boolean,boolean) -> a
    M:net.minecraft.world.entity.Entity spawn(net.minecraft.server.level.WorldServer,net.minecraft.nbt.NBTTagCompound,net.minecraft.network.chat.IChatBaseComponent,net.minecraft.world.entity.player.EntityHuman,net.minecraft.core.BlockPosition,net.minecraft.world.entity.EnumMobSpawn,boolean,boolean) -> a
    M:net.minecraft.world.entity.Entity create(net.minecraft.server.level.WorldServer,net.minecraft.nbt.NBTTagCompound,net.minecraft.network.chat.IChatBaseComponent,net.minecraft.world.entity.player.EntityHuman,net.minecraft.core.BlockPosition,net.minecraft.world.entity.EnumMobSpawn,boolean,boolean) -> b
    M:double getYOffset(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,boolean,net.minecraft.world.phys.AxisAlignedBB) -> a
    M:void updateCustomEntityTag(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.entity.Entity,net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean canSerialize() -> b
    M:boolean canSummon() -> c
    M:boolean fireImmune() -> d
    M:boolean canSpawnFarFromPlayer() -> e
    M:net.minecraft.world.entity.EnumCreatureType getCategory() -> f
    M:java.lang.String getDescriptionId() -> g
    M:net.minecraft.network.chat.IChatBaseComponent getDescription() -> h
    M:java.lang.String toShortString() -> i
    M:net.minecraft.resources.MinecraftKey getDefaultLootTable() -> j
    M:float getWidth() -> k
    M:float getHeight() -> l
    M:net.minecraft.world.entity.Entity create(net.minecraft.world.level.World) -> a
    M:java.util.Optional create(net.minecraft.nbt.NBTTagCompound,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.phys.AxisAlignedBB getAABB(double,double,double) -> a
    M:boolean isBlockDangerous(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.entity.EntitySize getDimensions() -> m
    M:java.util.Optional by(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.entity.Entity loadEntityRecursive(net.minecraft.nbt.NBTTagCompound,net.minecraft.world.level.World,java.util.function.Function) -> a
    M:java.util.stream.Stream loadEntitiesRecursive(java.util.List,net.minecraft.world.level.World) -> a
    M:java.util.Optional loadStaticEntity(net.minecraft.nbt.NBTTagCompound,net.minecraft.world.level.World) -> b
    M:int clientTrackingRange() -> n
    M:int updateInterval() -> o
    M:boolean trackDeltas() -> p
    M:boolean is(net.minecraft.tags.TagKey) -> a
    M:net.minecraft.world.entity.Entity tryCast(net.minecraft.world.entity.Entity) -> a
    M:java.lang.Class getBaseClass() -> a
    M:net.minecraft.core.Holder$Reference builtInRegistryHolder() -> q
    M:java.lang.Object tryCast(java.lang.Object) -> a
    M:int characteristics() -> characteristics
net.minecraft.world.entity.EntityType$Builder -> bau$a -> net.minecraft.world.entity.EntityTypes$Builder
    F:net.minecraft.world.entity.EntityType$EntityFactory factory -> a
    F:net.minecraft.world.entity.EnumCreatureType category -> b
    F:com.google.common.collect.ImmutableSet immuneTo -> c
    F:boolean serialize -> d
    F:boolean summon -> e
    F:boolean fireImmune -> f
    F:boolean canSpawnFarFromPlayer -> g
    F:int clientTrackingRange -> h
    F:int updateInterval -> i
    F:net.minecraft.world.entity.EntitySize dimensions -> j
    M:net.minecraft.world.entity.EntityTypes$Builder of(net.minecraft.world.entity.EntityType$EntityFactory,net.minecraft.world.entity.EnumCreatureType) -> a
    M:net.minecraft.world.entity.EntityTypes$Builder createNothing(net.minecraft.world.entity.EnumCreatureType) -> a
    M:net.minecraft.world.entity.EntityTypes$Builder sized(float,float) -> a
    M:net.minecraft.world.entity.EntityTypes$Builder noSummon() -> a
    M:net.minecraft.world.entity.EntityTypes$Builder noSave() -> b
    M:net.minecraft.world.entity.EntityTypes$Builder fireImmune() -> c
    M:net.minecraft.world.entity.EntityTypes$Builder immuneTo(net.minecraft.world.level.block.Block[]) -> a
    M:net.minecraft.world.entity.EntityTypes$Builder canSpawnFarFromPlayer() -> d
    M:net.minecraft.world.entity.EntityTypes$Builder clientTrackingRange(int) -> a
    M:net.minecraft.world.entity.EntityTypes$Builder updateInterval(int) -> b
    M:net.minecraft.world.entity.EntityTypes build(java.lang.String) -> a
net.minecraft.world.entity.EntityType$EntityFactory -> bau$b -> net.minecraft.world.entity.EntityTypes$b
net.minecraft.world.entity.EquipmentSlot -> bav -> net.minecraft.world.entity.EnumItemSlot
    F:net.minecraft.world.entity.EnumItemSlot MAINHAND -> a
    F:net.minecraft.world.entity.EnumItemSlot OFFHAND -> b
    F:net.minecraft.world.entity.EnumItemSlot FEET -> c
    F:net.minecraft.world.entity.EnumItemSlot LEGS -> d
    F:net.minecraft.world.entity.EnumItemSlot CHEST -> e
    F:net.minecraft.world.entity.EnumItemSlot HEAD -> f
    F:net.minecraft.world.entity.EnumItemSlot$Function type -> g
    F:int index -> h
    F:int filterFlag -> i
    F:java.lang.String name -> j
    M:net.minecraft.world.entity.EnumItemSlot$Function getType() -> a
    M:int getIndex() -> b
    M:int getIndex(int) -> a
    M:int getFilterFlag() -> c
    M:java.lang.String getName() -> d
    M:net.minecraft.world.entity.EnumItemSlot byName(java.lang.String) -> a
    M:net.minecraft.world.entity.EnumItemSlot byTypeAndIndex(net.minecraft.world.entity.EnumItemSlot$Function,int) -> a
net.minecraft.world.entity.EquipmentSlot$Type -> bav$a -> net.minecraft.world.entity.EnumItemSlot$Function
    F:net.minecraft.world.entity.EnumItemSlot$Function HAND -> a
    F:net.minecraft.world.entity.EnumItemSlot$Function ARMOR -> b
net.minecraft.world.entity.ExperienceOrb -> baw -> net.minecraft.world.entity.EntityExperienceOrb
    F:int LIFETIME -> b
    F:int ENTITY_SCAN_PERIOD -> c
    F:int MAX_FOLLOW_DIST -> d
    F:int ORB_GROUPS_PER_AREA -> e
    F:double ORB_MERGE_DISTANCE -> f
    F:int age -> ao
    F:int health -> ap
    F:int value -> aq
    F:int count -> ar
    F:net.minecraft.world.entity.player.EntityHuman followingPlayer -> as
    M:void tick() -> k
    M:void scanForEntities() -> j
    M:void award(net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D,int) -> a
    M:boolean tryMergeToExisting(net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D,int) -> b
    M:boolean canMerge(net.minecraft.world.entity.EntityExperienceOrb) -> a
    M:boolean canMerge(net.minecraft.world.entity.EntityExperienceOrb,int,int) -> a
    M:void merge(net.minecraft.world.entity.EntityExperienceOrb) -> b
    M:void setUnderwaterMovement() -> l
    M:void doWaterSplashEffect() -> bb
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:int repairPlayerItems(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:int durabilityToXp(int) -> b
    M:int xpToDurability(int) -> c
    M:int getValue() -> h
    M:int getIcon() -> i
    M:int getExperienceValue(int) -> a
    M:boolean isAttackable() -> ci
net.minecraft.world.entity.FlyingMob -> bax -> net.minecraft.world.entity.EntityFlying
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
    M:void travel(net.minecraft.world.phys.Vec3D) -> g
net.minecraft.world.entity.GlowSquid -> bay -> net.minecraft.world.entity.GlowSquid
    F:net.minecraft.network.syncher.DataWatcherObject DATA_DARK_TICKS_REMAINING -> cb
    M:net.minecraft.core.particles.ParticleParam getInkParticle() -> n
    M:net.minecraft.sounds.SoundEffect getSquirtSound() -> q
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void setDarkTicks(int) -> b
    M:int getDarkTicksRemaining() -> t
    M:boolean checkGlowSquideSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.WorldAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.entity.HasCustomInventoryScreen -> baz -> net.minecraft.world.entity.HasCustomInventoryScreen
net.minecraft.world.entity.HumanoidArm -> bba -> net.minecraft.world.entity.EnumMainHand
    F:net.minecraft.world.entity.EnumMainHand LEFT -> a
    F:net.minecraft.world.entity.EnumMainHand RIGHT -> b
    F:int id -> c
    F:java.lang.String name -> d
    M:net.minecraft.world.entity.EnumMainHand getOpposite() -> d
    M:int getId() -> a
    M:java.lang.String getKey() -> b
net.minecraft.world.entity.ItemBasedSteering -> bbb -> net.minecraft.world.entity.SaddleStorage
    F:int MIN_BOOST_TIME -> d
    F:int MAX_BOOST_TIME -> e
    F:net.minecraft.network.syncher.DataWatcher entityData -> f
    F:net.minecraft.network.syncher.DataWatcherObject boostTimeAccessor -> g
    F:net.minecraft.network.syncher.DataWatcherObject hasSaddleAccessor -> h
    F:boolean boosting -> a
    F:int boostTime -> b
    F:int boostTimeTotal -> c
    M:void onSynced() -> a
    M:boolean boost(net.minecraft.util.RandomSource) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void setSaddle(boolean) -> a
    M:boolean hasSaddle() -> b
net.minecraft.world.entity.ItemSteerable -> bbc -> net.minecraft.world.entity.ISteerable
    M:boolean travel(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.entity.SaddleStorage,net.minecraft.world.phys.Vec3D) -> a
net.minecraft.world.entity.LerpingModel -> bbd -> net.minecraft.world.entity.LerpingModel
net.minecraft.world.entity.LightningBolt -> bbe -> net.minecraft.world.entity.EntityLightning
    F:int START_LIFE -> c
    F:double DAMAGE_RADIUS -> d
    F:double DETECTION_RADIUS -> e
    F:int life -> f
    F:long seed -> b
    F:int flashes -> ao
    F:boolean visualOnly -> ap
    F:net.minecraft.server.level.EntityPlayer cause -> aq
    F:java.util.Set hitEntities -> ar
    F:int blocksSetOnFire -> as
    M:void setVisualOnly(boolean) -> a
    M:net.minecraft.server.level.EntityPlayer getCause() -> h
    M:void setCause(net.minecraft.server.level.EntityPlayer) -> b
    M:void powerLightningRod() -> l
    M:void tick() -> k
    M:net.minecraft.core.BlockPosition getStrikePosition() -> n
    M:void spawnFire(int) -> a
    M:void clearCopperOnLightningStrike(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:void randomWalkCleaningCopper(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition$MutableBlockPosition,int) -> a
    M:java.util.Optional randomStepCleaningCopper(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> c
    M:boolean shouldRenderAtSqrDistance(double) -> a
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:int getBlocksSetOnFire() -> i
    M:java.util.stream.Stream getHitEntities() -> j
net.minecraft.world.entity.LivingEntity -> bbf -> net.minecraft.world.entity.EntityLiving
    F:org.slf4j.Logger LOGGER -> b
    F:java.util.UUID SPEED_MODIFIER_SPRINTING_UUID -> c
    F:java.util.UUID SPEED_MODIFIER_SOUL_SPEED_UUID -> d
    F:java.util.UUID SPEED_MODIFIER_POWDER_SNOW_UUID -> e
    F:int HAND_SLOTS -> ao
    F:int ARMOR_SLOTS -> ap
    F:int EQUIPMENT_SLOT_OFFSET -> aq
    F:int ARMOR_SLOT_OFFSET -> ar
    F:int SWING_DURATION -> as
    F:int PLAYER_HURT_EXPERIENCE_TIME -> at
    F:double MIN_MOVEMENT_DISTANCE -> au
    F:double DEFAULT_BASE_GRAVITY -> av
    F:int DEATH_DURATION -> aw
    F:int USE_ITEM_INTERVAL -> ax
    F:int LIVING_ENTITY_FLAG_IS_USING -> ay
    F:int LIVING_ENTITY_FLAG_OFF_HAND -> az
    F:float yHeadRotO -> ba
    F:float flyingSpeed -> bb
    F:net.minecraft.world.entity.player.EntityHuman lastHurtByPlayer -> bc
    F:int lastHurtByPlayerTime -> bd
    F:boolean dead -> be
    F:int noActionTime -> bf
    F:float oRun -> bg
    F:float run -> bh
    F:float animStep -> bi
    F:float animStepO -> bj
    F:float rotOffs -> bk
    F:int deathScore -> bl
    F:float lastHurt -> bm
    F:boolean jumping -> bn
    F:float xxa -> bo
    F:float yya -> bp
    F:float zza -> bq
    F:int lerpSteps -> br
    F:double lerpX -> bs
    F:double lerpY -> bt
    F:double lerpZ -> bu
    F:double lerpYRot -> bv
    F:double lerpXRot -> bw
    F:double lyHeadRot -> bx
    F:int lerpHeadSteps -> by
    F:int lastHurtMobTimestamp -> ca
    F:float speed -> cb
    F:int noJumpDelay -> cc
    F:float absorptionAmount -> cd
    F:net.minecraft.world.item.ItemStack useItem -> bz
    F:net.minecraft.core.BlockPosition lastPos -> ce
    F:java.util.Optional lastClimbablePos -> cf
    F:net.minecraft.world.damagesource.DamageSource lastDamageSource -> cg
    F:long lastDamageStamp -> ch
    F:float swimAmount -> ci
    F:float swimAmountO -> cj
    F:boolean skipDropExperience -> ck
    M:net.minecraft.world.entity.ai.BehaviorController getBrain() -> dz
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(com.mojang.serialization.Dynamic) -> a
    M:void kill() -> ag
    M:boolean canAttackType(net.minecraft.world.entity.EntityTypes) -> a
    M:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
    M:float getSwimAmount(float) -> a
    M:void baseTick() -> an
    M:boolean shouldRemoveSoulSpeed(net.minecraft.world.level.block.state.IBlockData) -> b
    M:void onChangedBlock(net.minecraft.core.BlockPosition) -> c
    M:int decreaseAirSupply(int) -> m
    M:int increaseAirSupply(int) -> n
    M:void setLastHurtByPlayer(net.minecraft.world.entity.player.EntityHuman) -> d
    M:void setLastHurtByMob(net.minecraft.world.entity.EntityLiving) -> a
    M:void setLastHurtMob(net.minecraft.world.entity.Entity) -> x
    M:void setNoActionTime(int) -> o
    M:void setDiscardFriction(boolean) -> p
    M:boolean doesEmitEquipEvent(net.minecraft.world.entity.EnumItemSlot) -> a
    M:void onEquipItem(net.minecraft.world.entity.EnumItemSlot,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:void playEquipSound(net.minecraft.world.item.ItemStack) -> c
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void updateGlowingStatus() -> n
    M:double getVisibilityPercent(net.minecraft.world.entity.Entity) -> y
    M:boolean canAttack(net.minecraft.world.entity.EntityLiving) -> c
    M:boolean canAttack(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition) -> a
    M:boolean canBeSeenByAnyone() -> ea
    M:boolean areAllEffectsAmbient(java.util.Collection) -> c
    M:void removeEffectParticles() -> eb
    M:boolean removeAllEffects() -> ec
    M:java.util.Collection getActiveEffects() -> ed
    M:java.util.Map getActiveEffectsMap() -> ee
    M:boolean hasEffect(net.minecraft.world.effect.MobEffectList) -> a
    M:net.minecraft.world.effect.MobEffect getEffect(net.minecraft.world.effect.MobEffectList) -> b
    M:boolean addEffect(net.minecraft.world.effect.MobEffect) -> b
    M:boolean addEffect(net.minecraft.world.effect.MobEffect,net.minecraft.world.entity.Entity) -> b
    M:boolean canBeAffected(net.minecraft.world.effect.MobEffect) -> c
    M:void forceAddEffect(net.minecraft.world.effect.MobEffect,net.minecraft.world.entity.Entity) -> c
    M:boolean isInvertedHealAndHarm() -> ef
    M:net.minecraft.world.effect.MobEffect removeEffectNoUpdate(net.minecraft.world.effect.MobEffectList) -> c
    M:boolean removeEffect(net.minecraft.world.effect.MobEffectList) -> d
    M:void onEffectAdded(net.minecraft.world.effect.MobEffect,net.minecraft.world.entity.Entity) -> a
    M:void onEffectUpdated(net.minecraft.world.effect.MobEffect,boolean,net.minecraft.world.entity.Entity) -> a
    M:void onEffectRemoved(net.minecraft.world.effect.MobEffect) -> a
    M:void heal(float) -> b
    M:float getHealth() -> eg
    M:void setHealth(float) -> c
    M:boolean isDeadOrDying() -> eh
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void blockUsingShield(net.minecraft.world.entity.EntityLiving) -> d
    M:void blockedByShield(net.minecraft.world.entity.EntityLiving) -> e
    M:boolean checkTotemDeathProtection(net.minecraft.world.damagesource.DamageSource) -> g
    M:net.minecraft.world.damagesource.DamageSource getLastDamageSource() -> ei
    M:void playHurtSound(net.minecraft.world.damagesource.DamageSource) -> d
    M:boolean isDamageSourceBlocked(net.minecraft.world.damagesource.DamageSource) -> e
    M:void breakItem(net.minecraft.world.item.ItemStack) -> j
    M:void die(net.minecraft.world.damagesource.DamageSource) -> a
    M:void createWitherRose(net.minecraft.world.entity.EntityLiving) -> f
    M:void dropAllDeathLoot(net.minecraft.world.damagesource.DamageSource) -> f
    M:void dropEquipment() -> ej
    M:void dropExperience() -> ek
    M:void dropCustomDeathLoot(net.minecraft.world.damagesource.DamageSource,int,boolean) -> a
    M:net.minecraft.resources.MinecraftKey getLootTable() -> el
    M:void dropFromLootTable(net.minecraft.world.damagesource.DamageSource,boolean) -> a
    M:net.minecraft.world.level.storage.loot.LootTableInfo$Builder createLootContext(boolean,net.minecraft.world.damagesource.DamageSource) -> a
    M:void knockback(double,double,double) -> p
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.sounds.SoundEffect getFallDamageSound(int) -> c
    M:void skipDropExperience() -> em
    M:boolean wasExperienceConsumed() -> en
    M:net.minecraft.world.entity.LivingEntity$Fallsounds getFallSounds() -> eo
    M:net.minecraft.sounds.SoundEffect getDrinkingSound(net.minecraft.world.item.ItemStack) -> d
    M:net.minecraft.sounds.SoundEffect getEatingSound(net.minecraft.world.item.ItemStack) -> e
    M:void setOnGround(boolean) -> c
    M:java.util.Optional getLastClimbablePos() -> ep
    M:boolean trapdoorUsableAsLadder(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> c
    M:boolean isAlive() -> bp
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:int calculateFallDamage(float,float) -> d
    M:void playBlockFallSound() -> eq
    M:int getArmorValue() -> er
    M:void hurtArmor(net.minecraft.world.damagesource.DamageSource,float) -> b
    M:void hurtHelmet(net.minecraft.world.damagesource.DamageSource,float) -> c
    M:void hurtCurrentlyUsedShield(float) -> q
    M:float getDamageAfterArmorAbsorb(net.minecraft.world.damagesource.DamageSource,float) -> d
    M:float getDamageAfterMagicAbsorb(net.minecraft.world.damagesource.DamageSource,float) -> e
    M:void actuallyHurt(net.minecraft.world.damagesource.DamageSource,float) -> f
    M:net.minecraft.world.damagesource.CombatTracker getCombatTracker() -> es
    M:net.minecraft.world.entity.EntityLiving getKillCredit() -> et
    M:float getMaxHealth() -> eu
    M:int getArrowCount() -> ev
    M:void setArrowCount(int) -> p
    M:int getStingerCount() -> ew
    M:void setStingerCount(int) -> q
    M:int getCurrentSwingDuration() -> r
    M:void swing(net.minecraft.world.EnumHand) -> a
    M:void swing(net.minecraft.world.EnumHand,boolean) -> a
    M:void handleEntityEvent(byte) -> a
    M:void makePoofParticles() -> u
    M:void swapHandItems() -> w
    M:void outOfWorld() -> av
    M:void updateSwingTime() -> ex
    M:net.minecraft.world.entity.ai.attributes.AttributeModifiable getAttribute(net.minecraft.world.entity.ai.attributes.AttributeBase) -> a
    M:double getAttributeValue(net.minecraft.world.entity.ai.attributes.AttributeBase) -> b
    M:double getAttributeBaseValue(net.minecraft.world.entity.ai.attributes.AttributeBase) -> c
    M:net.minecraft.world.entity.ai.attributes.AttributeMapBase getAttributes() -> ey
    M:net.minecraft.world.entity.EnumMonsterType getMobType() -> ez
    M:boolean isHolding(net.minecraft.world.item.Item) -> b
    M:boolean isHolding(java.util.function.Predicate) -> b
    M:net.minecraft.world.item.ItemStack getItemInHand(net.minecraft.world.EnumHand) -> b
    M:void setItemInHand(net.minecraft.world.EnumHand,net.minecraft.world.item.ItemStack) -> a
    M:boolean hasItemInSlot(net.minecraft.world.entity.EnumItemSlot) -> b
    M:void verifyEquippedItem(net.minecraft.world.item.ItemStack) -> f
    M:void setSprinting(boolean) -> g
    M:void push(net.minecraft.world.entity.Entity) -> g
    M:void dismountVehicle(net.minecraft.world.entity.Entity) -> a
    M:boolean shouldShowName() -> cv
    M:void jumpInLiquid(net.minecraft.tags.TagKey) -> c
    M:boolean canStandOnFluid(net.minecraft.world.level.material.Fluid) -> a
    M:void travel(net.minecraft.world.phys.Vec3D) -> g
    M:void calculateEntityAnimation(net.minecraft.world.entity.EntityLiving,boolean) -> a
    M:net.minecraft.world.phys.Vec3D handleRelativeFrictionAndCalculateMovement(net.minecraft.world.phys.Vec3D,float) -> a
    M:net.minecraft.world.phys.Vec3D getFluidFallingAdjustedMovement(double,boolean,net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.world.phys.Vec3D handleOnClimbable(net.minecraft.world.phys.Vec3D) -> i
    M:float getFrictionInfluencedSpeed(float) -> u
    M:void setSpeed(float) -> r
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:void tick() -> k
    M:void detectEquipmentUpdates() -> x
    M:java.util.Map collectEquipmentChanges() -> y
    M:void handleHandSwap(java.util.Map) -> a
    M:void handleEquipmentChanges(java.util.Map) -> b
    M:net.minecraft.world.item.ItemStack getLastArmorItem(net.minecraft.world.entity.EnumItemSlot) -> e
    M:void setLastArmorItem(net.minecraft.world.entity.EnumItemSlot,net.minecraft.world.item.ItemStack) -> b
    M:net.minecraft.world.item.ItemStack getLastHandItem(net.minecraft.world.entity.EnumItemSlot) -> f
    M:void setLastHandItem(net.minecraft.world.entity.EnumItemSlot,net.minecraft.world.item.ItemStack) -> c
    M:float tickHeadTurn(float,float) -> e
    M:void updateFallFlying() -> z
    M:void checkAutoSpinAttack(net.minecraft.world.phys.AxisAlignedBB,net.minecraft.world.phys.AxisAlignedBB) -> a
    M:void doAutoAttackOnTouch(net.minecraft.world.entity.EntityLiving) -> g
    M:void stopRiding() -> p
    M:void rideTick() -> bs
    M:void lerpTo(double,double,double,float,float,int,boolean) -> a
    M:void lerpHeadTo(float,int) -> a
    M:void setJumping(boolean) -> q
    M:void onItemPickup(net.minecraft.world.entity.item.EntityItem) -> a
    M:void take(net.minecraft.world.entity.Entity,int) -> a
    M:float getViewYRot(float) -> g
    M:float getAttackAnim(float) -> s
    M:boolean isPickable() -> bl
    M:boolean isPushable() -> bm
    M:float getYHeadRot() -> ch
    M:void setYHeadRot(float) -> l
    M:void setYBodyRot(float) -> m
    M:net.minecraft.world.phys.Vec3D getRelativePortalPosition(net.minecraft.core.EnumDirection$EnumAxis,net.minecraft.BlockUtil$Rectangle) -> a
    M:net.minecraft.world.phys.Vec3D resetForwardDirectionOfRelativePortalPosition(net.minecraft.world.phys.Vec3D) -> h
    M:void setAbsorptionAmount(float) -> t
    M:void onEnterCombat() -> h
    M:void onLeaveCombat() -> i
    M:void updateUsingItem(net.minecraft.world.item.ItemStack) -> a
    M:void setLivingEntityFlag(int,boolean) -> c
    M:void startUsingItem(net.minecraft.world.EnumHand) -> c
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:void lookAt(net.minecraft.commands.arguments.ArgumentAnchor$Anchor,net.minecraft.world.phys.Vec3D) -> a
    M:void triggerItemUseEffects(net.minecraft.world.item.ItemStack,int) -> b
    M:void spawnItemParticles(net.minecraft.world.item.ItemStack,int) -> a
    M:void completeUsingItem() -> v
    M:void stopUsingItem() -> fa
    M:boolean isBlocking() -> fb
    M:boolean isSuppressingSlidingDownLadder() -> fc
    M:boolean isFallFlying() -> fd
    M:int getFallFlyingTicks() -> fe
    M:boolean randomTeleport(double,double,double,boolean) -> a
    M:boolean isAffectedByPotions() -> ff
    M:boolean attackable() -> fg
    M:void setRecordPlayingNearby(net.minecraft.core.BlockPosition,boolean) -> a
    M:boolean canTakeItem(net.minecraft.world.item.ItemStack) -> g
    M:net.minecraft.world.entity.EntitySize getDimensions(net.minecraft.world.entity.EntityPose) -> a
    M:com.google.common.collect.ImmutableList getDismountPoses() -> fh
    M:net.minecraft.world.phys.AxisAlignedBB getLocalBoundsForPose(net.minecraft.world.entity.EntityPose) -> g
    M:java.util.Optional getSleepingPos() -> fi
    M:void setSleepingPos(net.minecraft.core.BlockPosition) -> e
    M:void clearSleepingPos() -> fj
    M:boolean isSleeping() -> fk
    M:void startSleeping(net.minecraft.core.BlockPosition) -> b
    M:void setPosToBed(net.minecraft.core.BlockPosition) -> a
    M:void stopSleeping() -> fl
    M:net.minecraft.core.EnumDirection getBedOrientation() -> fm
    M:boolean isInWall() -> bq
    M:float getEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> a
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:net.minecraft.world.item.ItemStack getProjectile(net.minecraft.world.item.ItemStack) -> h
    M:net.minecraft.world.item.ItemStack eat(net.minecraft.world.level.World,net.minecraft.world.item.ItemStack) -> a
    M:void addEatEffect(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving) -> a
    M:byte entityEventForEquipmentBreak(net.minecraft.world.entity.EnumItemSlot) -> g
    M:void broadcastBreakEvent(net.minecraft.world.entity.EnumItemSlot) -> d
    M:void broadcastBreakEvent(net.minecraft.world.EnumHand) -> d
    M:net.minecraft.world.entity.EnumItemSlot getEquipmentSlotForItem(net.minecraft.world.item.ItemStack) -> i
    M:net.minecraft.world.entity.SlotAccess createEquipmentSlotAccess(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EnumItemSlot) -> a
    M:net.minecraft.world.entity.EnumItemSlot getEquipmentSlot(int) -> d
    M:net.minecraft.world.entity.SlotAccess getSlot(int) -> k
    M:boolean canFreeze() -> dp
    M:float getVisualRotationYInDegrees() -> ds
    M:void recreateFromPacket(net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity) -> a
    M:boolean canDisableShield() -> fn
net.minecraft.world.entity.LivingEntity$Fallsounds -> bbf$a -> net.minecraft.world.entity.EntityLiving$a
    F:net.minecraft.sounds.SoundEffect small -> a
    F:net.minecraft.sounds.SoundEffect big -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.sounds.SoundEffect small() -> a
    M:net.minecraft.sounds.SoundEffect big() -> b
net.minecraft.world.entity.Marker -> bbg -> net.minecraft.world.entity.Marker
    F:java.lang.String DATA_TAG -> b
    F:net.minecraft.nbt.NBTTagCompound data -> c
    M:void tick() -> k
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void addPassenger(net.minecraft.world.entity.Entity) -> m
net.minecraft.world.entity.Mob -> bbh -> net.minecraft.world.entity.EntityInsentient
    F:net.minecraft.network.syncher.DataWatcherObject DATA_MOB_FLAGS_ID -> b
    F:int MOB_FLAG_NO_AI -> c
    F:int MOB_FLAG_LEFTHANDED -> d
    F:int MOB_FLAG_AGGRESSIVE -> e
    F:int PICKUP_REACH -> f
    F:net.minecraft.core.NonNullList handItems -> ca
    F:net.minecraft.core.NonNullList armorItems -> cb
    F:boolean canPickUpLoot -> cc
    F:boolean persistenceRequired -> cd
    F:java.util.Map pathfindingMalus -> ce
    F:net.minecraft.resources.MinecraftKey lootTable -> cf
    F:long lootTableSeed -> cg
    F:net.minecraft.world.entity.Entity leashHolder -> ch
    F:int delayedLeashHolderId -> ci
    F:net.minecraft.nbt.NBTTagCompound leashInfoTag -> cj
    F:net.minecraft.core.BlockPosition restrictCenter -> ck
    F:float restrictRadius -> cl
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createMobAttributes() -> w
    M:net.minecraft.world.entity.ai.navigation.NavigationAbstract createNavigation(net.minecraft.world.level.World) -> a
    M:boolean shouldPassengersInheritMalus() -> x
    M:float getPathfindingMalus(net.minecraft.world.level.pathfinder.PathType) -> a
    M:void setPathfindingMalus(net.minecraft.world.level.pathfinder.PathType,float) -> a
    M:boolean canCutCorner(net.minecraft.world.level.pathfinder.PathType) -> b
    M:net.minecraft.world.entity.ai.control.EntityAIBodyControl createBodyControl() -> y
    M:net.minecraft.world.entity.ai.control.ControllerLook getLookControl() -> z
    M:void setTarget(net.minecraft.world.entity.EntityLiving) -> h
    M:boolean canAttackType(net.minecraft.world.entity.EntityTypes) -> a
    M:boolean canFireProjectileWeapon(net.minecraft.world.item.ItemProjectileWeapon) -> a
    M:void baseTick() -> an
    M:void playHurtSound(net.minecraft.world.damagesource.DamageSource) -> d
    M:void resetAmbientSoundTime() -> n
    M:void handleEntityEvent(byte) -> a
    M:void tick() -> k
    M:float tickHeadTurn(float,float) -> e
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void dropFromLootTable(net.minecraft.world.damagesource.DamageSource,boolean) -> a
    M:net.minecraft.world.level.storage.loot.LootTableInfo$Builder createLootContext(boolean,net.minecraft.world.damagesource.DamageSource) -> a
    M:net.minecraft.resources.MinecraftKey getLootTable() -> el
    M:void setZza(float) -> u
    M:void setYya(float) -> v
    M:void setXxa(float) -> w
    M:void setSpeed(float) -> r
    M:void pickUpItem(net.minecraft.world.entity.item.EntityItem) -> b
    M:boolean equipItemIfPossible(net.minecraft.world.item.ItemStack) -> j
    M:void setItemSlotAndDropWhenKilled(net.minecraft.world.entity.EnumItemSlot,net.minecraft.world.item.ItemStack) -> b
    M:void setGuaranteedDrop(net.minecraft.world.entity.EnumItemSlot) -> e
    M:boolean canReplaceCurrentItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:boolean canReplaceEqualItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> b
    M:boolean canHoldItem(net.minecraft.world.item.ItemStack) -> k
    M:boolean wantsToPickUp(net.minecraft.world.item.ItemStack) -> l
    M:boolean removeWhenFarAway(double) -> h
    M:void checkDespawn() -> dn
    M:int getHeadRotSpeed() -> fo
    M:void lookAt(net.minecraft.world.entity.Entity,float,float) -> a
    M:float rotlerp(float,float,float) -> a
    M:boolean checkMobSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean checkSpawnRules(net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn) -> a
    M:boolean checkSpawnObstruction(net.minecraft.world.level.IWorldReader) -> a
    M:int getMaxSpawnClusterSize() -> fp
    M:boolean isMaxGroupSizeReached(int) -> d
    M:int getMaxFallDistance() -> cm
    M:net.minecraft.world.item.ItemStack getItemBySlot(net.minecraft.world.entity.EnumItemSlot) -> c
    M:void setItemSlot(net.minecraft.world.entity.EnumItemSlot,net.minecraft.world.item.ItemStack) -> a
    M:void dropCustomDeathLoot(net.minecraft.world.damagesource.DamageSource,int,boolean) -> a
    M:float getEquipmentDropChance(net.minecraft.world.entity.EnumItemSlot) -> f
    M:void populateDefaultEquipmentSlots(net.minecraft.util.RandomSource,net.minecraft.world.DifficultyDamageScaler) -> a
    M:net.minecraft.world.item.Item getEquipmentForSlot(net.minecraft.world.entity.EnumItemSlot,int) -> a
    M:void populateDefaultEquipmentEnchantments(net.minecraft.util.RandomSource,net.minecraft.world.DifficultyDamageScaler) -> b
    M:void enchantSpawnedWeapon(net.minecraft.util.RandomSource,float) -> a
    M:void enchantSpawnedArmor(net.minecraft.util.RandomSource,float,net.minecraft.world.entity.EnumItemSlot) -> a
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:void setPersistenceRequired() -> fq
    M:void setDropChance(net.minecraft.world.entity.EnumItemSlot,float) -> a
    M:boolean canPickUpLoot() -> fr
    M:void setCanPickUpLoot(boolean) -> r
    M:boolean canTakeItem(net.minecraft.world.item.ItemStack) -> g
    M:boolean isPersistenceRequired() -> fs
    M:net.minecraft.world.EnumInteractionResult interact(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.world.EnumInteractionResult checkAndHandleImportantInteractions(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> c
    M:void onOffspringSpawnedFromEgg(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.entity.EntityInsentient) -> a
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:boolean isWithinRestriction() -> ft
    M:boolean isWithinRestriction(net.minecraft.core.BlockPosition) -> a
    M:void restrictTo(net.minecraft.core.BlockPosition,int) -> a
    M:net.minecraft.core.BlockPosition getRestrictCenter() -> fu
    M:float getRestrictRadius() -> fv
    M:void clearRestriction() -> fw
    M:boolean hasRestriction() -> fx
    M:net.minecraft.world.entity.EntityInsentient convertTo(net.minecraft.world.entity.EntityTypes,boolean) -> a
    M:void tickLeash() -> fy
    M:void dropLeash(boolean,boolean) -> a
    M:boolean canBeLeashed(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean isLeashed() -> fz
    M:void setLeashedTo(net.minecraft.world.entity.Entity,boolean) -> b
    M:void setDelayedLeashHolderId(int) -> r
    M:boolean startRiding(net.minecraft.world.entity.Entity,boolean) -> a
    M:void setNoAi(boolean) -> s
    M:void setLeftHanded(boolean) -> t
    M:void setAggressive(boolean) -> u
    M:void setBaby(boolean) -> a
    M:double getMeleeAttackRangeSqr(net.minecraft.world.entity.EntityLiving) -> i
    M:boolean isWithinMeleeAttackRange(net.minecraft.world.entity.EntityLiving) -> j
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:void maybeDisableShield(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:void jumpInLiquid(net.minecraft.tags.TagKey) -> c
    M:void removeAfterChangingDimensions() -> ck
    M:net.minecraft.world.item.ItemStack getPickResult() -> do
net.minecraft.world.entity.MobCategory -> bbi -> net.minecraft.world.entity.EnumCreatureType
    F:net.minecraft.world.entity.EnumCreatureType MONSTER -> a
    F:net.minecraft.world.entity.EnumCreatureType CREATURE -> b
    F:net.minecraft.world.entity.EnumCreatureType AMBIENT -> c
    F:net.minecraft.world.entity.EnumCreatureType AXOLOTLS -> d
    F:net.minecraft.world.entity.EnumCreatureType UNDERGROUND_WATER_CREATURE -> e
    F:net.minecraft.world.entity.EnumCreatureType WATER_CREATURE -> f
    F:net.minecraft.world.entity.EnumCreatureType WATER_AMBIENT -> g
    F:net.minecraft.world.entity.EnumCreatureType MISC -> h
    F:com.mojang.serialization.Codec CODEC -> i
    F:int max -> j
    F:boolean isFriendly -> k
    F:boolean isPersistent -> l
    F:java.lang.String name -> m
    F:int noDespawnDistance -> n
    F:int despawnDistance -> o
    M:java.lang.String getName() -> a
    M:java.lang.String getSerializedName() -> c
    M:int getMaxInstancesPerChunk() -> b
    M:boolean isFriendly() -> d
    M:boolean isPersistent() -> e
    M:int getDespawnDistance() -> f
    M:int getNoDespawnDistance() -> g
net.minecraft.world.entity.MobSpawnType -> bbj -> net.minecraft.world.entity.EnumMobSpawn
    F:net.minecraft.world.entity.EnumMobSpawn NATURAL -> a
    F:net.minecraft.world.entity.EnumMobSpawn CHUNK_GENERATION -> b
    F:net.minecraft.world.entity.EnumMobSpawn SPAWNER -> c
    F:net.minecraft.world.entity.EnumMobSpawn STRUCTURE -> d
    F:net.minecraft.world.entity.EnumMobSpawn BREEDING -> e
    F:net.minecraft.world.entity.EnumMobSpawn MOB_SUMMONED -> f
    F:net.minecraft.world.entity.EnumMobSpawn JOCKEY -> g
    F:net.minecraft.world.entity.EnumMobSpawn EVENT -> h
    F:net.minecraft.world.entity.EnumMobSpawn CONVERSION -> i
    F:net.minecraft.world.entity.EnumMobSpawn REINFORCEMENT -> j
    F:net.minecraft.world.entity.EnumMobSpawn TRIGGERED -> k
    F:net.minecraft.world.entity.EnumMobSpawn BUCKET -> l
    F:net.minecraft.world.entity.EnumMobSpawn SPAWN_EGG -> m
    F:net.minecraft.world.entity.EnumMobSpawn COMMAND -> n
    F:net.minecraft.world.entity.EnumMobSpawn DISPENSER -> o
    F:net.minecraft.world.entity.EnumMobSpawn PATROL -> p
net.minecraft.world.entity.MobType -> bbk -> net.minecraft.world.entity.EnumMonsterType
    F:net.minecraft.world.entity.EnumMonsterType UNDEFINED -> a
    F:net.minecraft.world.entity.EnumMonsterType UNDEAD -> b
    F:net.minecraft.world.entity.EnumMonsterType ARTHROPOD -> c
    F:net.minecraft.world.entity.EnumMonsterType ILLAGER -> d
    F:net.minecraft.world.entity.EnumMonsterType WATER -> e
net.minecraft.world.entity.MoverType -> bbl -> net.minecraft.world.entity.EnumMoveType
    F:net.minecraft.world.entity.EnumMoveType SELF -> a
    F:net.minecraft.world.entity.EnumMoveType PLAYER -> b
    F:net.minecraft.world.entity.EnumMoveType PISTON -> c
    F:net.minecraft.world.entity.EnumMoveType SHULKER_BOX -> d
    F:net.minecraft.world.entity.EnumMoveType SHULKER -> e
net.minecraft.world.entity.NeutralMob -> bbm -> net.minecraft.world.entity.IEntityAngerable
    M:void addPersistentAngerSaveData(net.minecraft.nbt.NBTTagCompound) -> c
    M:void readPersistentAngerSaveData(net.minecraft.world.level.World,net.minecraft.nbt.NBTTagCompound) -> a
    M:void updatePersistentAnger(net.minecraft.server.level.WorldServer,boolean) -> a
    M:boolean isAngryAtAllPlayers(net.minecraft.world.level.World) -> b
net.minecraft.world.entity.OwnableEntity -> bbn -> net.minecraft.world.entity.OwnableEntity
net.minecraft.world.entity.PathfinderMob -> bbo -> net.minecraft.world.entity.EntityCreature
    M:float getWalkTargetValue(net.minecraft.core.BlockPosition) -> f
    M:float getWalkTargetValue(net.minecraft.core.BlockPosition,net.minecraft.world.level.IWorldReader) -> a
    M:boolean checkSpawnRules(net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn) -> a
    M:void tickLeash() -> fy
    M:void onLeashDistance(float) -> x
net.minecraft.world.entity.PlayerRideable -> bbp -> net.minecraft.world.entity.PlayerRideable
net.minecraft.world.entity.PlayerRideableJumping -> bbq -> net.minecraft.world.entity.IJumpable
net.minecraft.world.entity.Pose -> bbr -> net.minecraft.world.entity.EntityPose
    F:net.minecraft.world.entity.EntityPose STANDING -> a
    F:net.minecraft.world.entity.EntityPose FALL_FLYING -> b
    F:net.minecraft.world.entity.EntityPose SLEEPING -> c
    F:net.minecraft.world.entity.EntityPose SWIMMING -> d
    F:net.minecraft.world.entity.EntityPose SPIN_ATTACK -> e
    F:net.minecraft.world.entity.EntityPose CROUCHING -> f
    F:net.minecraft.world.entity.EntityPose LONG_JUMPING -> g
    F:net.minecraft.world.entity.EntityPose DYING -> h
    F:net.minecraft.world.entity.EntityPose CROAKING -> i
    F:net.minecraft.world.entity.EntityPose USING_TONGUE -> j
    F:net.minecraft.world.entity.EntityPose ROARING -> k
    F:net.minecraft.world.entity.EntityPose SNIFFING -> l
    F:net.minecraft.world.entity.EntityPose EMERGING -> m
    F:net.minecraft.world.entity.EntityPose DIGGING -> n
net.minecraft.world.entity.PowerableMob -> bbs -> net.minecraft.world.entity.PowerableMob
net.minecraft.world.entity.ReputationEventHandler -> bbt -> net.minecraft.world.entity.ReputationHandler
net.minecraft.world.entity.Saddleable -> bbu -> net.minecraft.world.entity.ISaddleable
net.minecraft.world.entity.Shearable -> bbv -> net.minecraft.world.entity.IShearable
net.minecraft.world.entity.SlotAccess -> bbw -> net.minecraft.world.entity.SlotAccess
    F:net.minecraft.world.entity.SlotAccess NULL -> a
    M:net.minecraft.world.entity.SlotAccess forContainer(net.minecraft.world.IInventory,int,java.util.function.Predicate) -> a
    M:net.minecraft.world.entity.SlotAccess forContainer(net.minecraft.world.IInventory,int) -> a
    M:net.minecraft.world.entity.SlotAccess forEquipmentSlot(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EnumItemSlot,java.util.function.Predicate) -> a
    M:net.minecraft.world.entity.SlotAccess forEquipmentSlot(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EnumItemSlot) -> a
    M:net.minecraft.world.item.ItemStack get() -> a
    M:boolean set(net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack get() -> a
    M:boolean set(net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack get() -> a
    M:boolean set(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.entity.SpawnGroupData -> bbx -> net.minecraft.world.entity.GroupDataEntity
net.minecraft.world.entity.SpawnPlacements -> bby -> net.minecraft.world.entity.EntityPositionTypes
    F:java.util.Map DATA_BY_TYPE -> a
    M:void register(net.minecraft.world.entity.EntityTypes,net.minecraft.world.entity.EntityPositionTypes$Surface,net.minecraft.world.level.levelgen.HeightMap$Type,net.minecraft.world.entity.SpawnPlacements$SpawnPredicate) -> a
    M:net.minecraft.world.entity.EntityPositionTypes$Surface getPlacementType(net.minecraft.world.entity.EntityTypes) -> a
    M:net.minecraft.world.level.levelgen.HeightMap$Type getHeightmapType(net.minecraft.world.entity.EntityTypes) -> b
    M:boolean checkSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.WorldAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.entity.SpawnPlacements$Data -> bby$a -> net.minecraft.world.entity.EntityPositionTypes$a
    F:net.minecraft.world.level.levelgen.HeightMap$Type heightMap -> a
    F:net.minecraft.world.entity.EntityPositionTypes$Surface placement -> b
    F:net.minecraft.world.entity.SpawnPlacements$SpawnPredicate predicate -> c
net.minecraft.world.entity.SpawnPlacements$SpawnPredicate -> bby$b -> net.minecraft.world.entity.EntityPositionTypes$b
net.minecraft.world.entity.SpawnPlacements$Type -> bby$c -> net.minecraft.world.entity.EntityPositionTypes$Surface
    F:net.minecraft.world.entity.EntityPositionTypes$Surface ON_GROUND -> a
    F:net.minecraft.world.entity.EntityPositionTypes$Surface IN_WATER -> b
    F:net.minecraft.world.entity.EntityPositionTypes$Surface NO_RESTRICTIONS -> c
    F:net.minecraft.world.entity.EntityPositionTypes$Surface IN_LAVA -> d
net.minecraft.world.entity.TamableAnimal -> bbz -> net.minecraft.world.entity.EntityTameableAnimal
    F:boolean orderedToSit -> ca
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean canBeLeashed(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void spawnTamingParticles(boolean) -> v
    M:void handleEntityEvent(byte) -> a
    M:boolean isTame() -> q
    M:void setTame(boolean) -> w
    M:void reassessTameGoals() -> t
    M:void setInSittingPose(boolean) -> x
    M:java.util.UUID getOwnerUUID() -> d
    M:void setOwnerUUID(java.util.UUID) -> b
    M:void tame(net.minecraft.world.entity.player.EntityHuman) -> e
    M:boolean canAttack(net.minecraft.world.entity.EntityLiving) -> c
    M:boolean isOwnedBy(net.minecraft.world.entity.EntityLiving) -> k
    M:boolean wantsToAttack(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean isAlliedTo(net.minecraft.world.entity.Entity) -> p
    M:void die(net.minecraft.world.damagesource.DamageSource) -> a
    M:void setOrderedToSit(boolean) -> y
    M:net.minecraft.world.entity.Entity getOwner() -> e
net.minecraft.world.entity.ai.Brain -> bca -> net.minecraft.world.entity.ai.BehaviorController
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.function.Supplier codec -> b
    F:int SCHEDULE_UPDATE_DELAY -> c
    F:java.util.Map memories -> d
    F:java.util.Map sensors -> e
    F:java.util.Map availableBehaviorsByPriority -> f
    F:net.minecraft.world.entity.schedule.Schedule schedule -> g
    F:java.util.Map activityRequirements -> h
    F:java.util.Map activityMemoriesToEraseWhenStopped -> i
    F:java.util.Set coreActivities -> j
    F:java.util.Set activeActivities -> k
    F:net.minecraft.world.entity.schedule.Activity defaultActivity -> l
    F:long lastScheduleUpdate -> m
    M:net.minecraft.world.entity.ai.Brain$Provider provider(java.util.Collection,java.util.Collection) -> a
    M:com.mojang.serialization.Codec codec(java.util.Collection,java.util.Collection) -> b
    M:com.mojang.serialization.DataResult serializeStart(com.mojang.serialization.DynamicOps) -> a
    M:java.util.stream.Stream memories() -> i
    M:boolean hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType) -> a
    M:void eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType) -> b
    M:void setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType,java.lang.Object) -> a
    M:void setMemoryWithExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType,java.lang.Object,long) -> a
    M:void setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType,java.util.Optional) -> a
    M:void setMemoryInternal(net.minecraft.world.entity.ai.memory.MemoryModuleType,java.util.Optional) -> b
    M:java.util.Optional getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType) -> c
    M:long getTimeUntilExpiry(net.minecraft.world.entity.ai.memory.MemoryModuleType) -> d
    M:java.util.Map getMemories() -> a
    M:boolean isMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType,java.lang.Object) -> b
    M:boolean checkMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType,net.minecraft.world.entity.ai.memory.MemoryStatus) -> a
    M:net.minecraft.world.entity.schedule.Schedule getSchedule() -> b
    M:void setSchedule(net.minecraft.world.entity.schedule.Schedule) -> a
    M:void setCoreActivities(java.util.Set) -> a
    M:java.util.Set getActiveActivities() -> c
    M:java.util.List getRunningBehaviors() -> d
    M:void useDefaultActivity() -> e
    M:java.util.Optional getActiveNonCoreActivity() -> f
    M:void setActiveActivityIfPossible(net.minecraft.world.entity.schedule.Activity) -> a
    M:void setActiveActivity(net.minecraft.world.entity.schedule.Activity) -> d
    M:void eraseMemoriesForOtherActivitesThan(net.minecraft.world.entity.schedule.Activity) -> e
    M:void updateActivityFromSchedule(long,long) -> a
    M:void setActiveActivityToFirstValid(java.util.List) -> a
    M:void setDefaultActivity(net.minecraft.world.entity.schedule.Activity) -> b
    M:void addActivity(net.minecraft.world.entity.schedule.Activity,int,com.google.common.collect.ImmutableList) -> a
    M:void addActivityAndRemoveMemoryWhenStopped(net.minecraft.world.entity.schedule.Activity,int,com.google.common.collect.ImmutableList,net.minecraft.world.entity.ai.memory.MemoryModuleType) -> a
    M:void addActivity(net.minecraft.world.entity.schedule.Activity,com.google.common.collect.ImmutableList) -> a
    M:void addActivityWithConditions(net.minecraft.world.entity.schedule.Activity,com.google.common.collect.ImmutableList,java.util.Set) -> a
    M:void addActivityAndRemoveMemoriesWhenStopped(net.minecraft.world.entity.schedule.Activity,com.google.common.collect.ImmutableList,java.util.Set,java.util.Set) -> a
    M:void removeAllBehaviors() -> g
    M:boolean isActive(net.minecraft.world.entity.schedule.Activity) -> c
    M:net.minecraft.world.entity.ai.BehaviorController copyWithoutBehaviors() -> h
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void tickSensors(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> c
    M:void forgetOutdatedMemories() -> j
    M:void stopAll(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> b
    M:void startEachNonRunningBehavior(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> d
    M:void tickEachRunningBehavior(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> e
    M:boolean activityRequirementsAreMet(net.minecraft.world.entity.schedule.Activity) -> f
    M:boolean isEmptyCollection(java.lang.Object) -> a
    M:com.google.common.collect.ImmutableList createPriorityPairs(int,com.google.common.collect.ImmutableList) -> a
    M:java.util.stream.Stream keys(com.mojang.serialization.DynamicOps) -> keys
    M:com.mojang.serialization.DataResult decode(com.mojang.serialization.DynamicOps,com.mojang.serialization.MapLike) -> decode
    M:com.mojang.serialization.DataResult captureRead(net.minecraft.world.entity.ai.memory.MemoryModuleType,com.mojang.serialization.DynamicOps,java.lang.Object) -> a
    M:com.mojang.serialization.RecordBuilder encode(net.minecraft.world.entity.ai.BehaviorController,com.mojang.serialization.DynamicOps,com.mojang.serialization.RecordBuilder) -> a
    M:com.mojang.serialization.RecordBuilder encode(java.lang.Object,com.mojang.serialization.DynamicOps,com.mojang.serialization.RecordBuilder) -> encode
net.minecraft.world.entity.ai.Brain$MemoryValue -> bca$a -> net.minecraft.world.entity.ai.BehaviorController$a
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType type -> a
    F:java.util.Optional value -> b
    M:net.minecraft.world.entity.ai.Brain$MemoryValue createUnchecked(net.minecraft.world.entity.ai.memory.MemoryModuleType,java.util.Optional) -> a
    M:void setMemoryInternal(net.minecraft.world.entity.ai.BehaviorController) -> a
    M:void serialize(com.mojang.serialization.DynamicOps,com.mojang.serialization.RecordBuilder) -> a
net.minecraft.world.entity.ai.Brain$Provider -> bca$b -> net.minecraft.world.entity.ai.BehaviorController$b
    F:java.util.Collection memoryTypes -> a
    F:java.util.Collection sensorTypes -> b
    F:com.mojang.serialization.Codec codec -> c
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(com.mojang.serialization.Dynamic) -> a
net.minecraft.world.entity.ai.attributes.Attribute -> bcb -> net.minecraft.world.entity.ai.attributes.AttributeBase
    F:int MAX_NAME_LENGTH -> a
    F:double defaultValue -> b
    F:boolean syncable -> c
    F:java.lang.String descriptionId -> d
    M:double getDefaultValue() -> a
    M:boolean isClientSyncable() -> b
    M:net.minecraft.world.entity.ai.attributes.AttributeBase setSyncable(boolean) -> a
    M:double sanitizeValue(double) -> a
    M:java.lang.String getDescriptionId() -> c
net.minecraft.world.entity.ai.attributes.AttributeInstance -> bcc -> net.minecraft.world.entity.ai.attributes.AttributeModifiable
    F:net.minecraft.world.entity.ai.attributes.AttributeBase attribute -> a
    F:java.util.Map modifiersByOperation -> b
    F:java.util.Map modifierById -> c
    F:java.util.Set permanentModifiers -> d
    F:double baseValue -> e
    F:boolean dirty -> f
    F:double cachedValue -> g
    F:java.util.function.Consumer onDirty -> h
    M:net.minecraft.world.entity.ai.attributes.AttributeBase getAttribute() -> a
    M:double getBaseValue() -> b
    M:void setBaseValue(double) -> a
    M:java.util.Set getModifiers(net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation) -> a
    M:java.util.Set getModifiers() -> c
    M:net.minecraft.world.entity.ai.attributes.AttributeModifier getModifier(java.util.UUID) -> a
    M:boolean hasModifier(net.minecraft.world.entity.ai.attributes.AttributeModifier) -> a
    M:void addModifier(net.minecraft.world.entity.ai.attributes.AttributeModifier) -> e
    M:void addTransientModifier(net.minecraft.world.entity.ai.attributes.AttributeModifier) -> b
    M:void addPermanentModifier(net.minecraft.world.entity.ai.attributes.AttributeModifier) -> c
    M:void setDirty() -> d
    M:void removeModifier(net.minecraft.world.entity.ai.attributes.AttributeModifier) -> d
    M:void removeModifier(java.util.UUID) -> b
    M:boolean removePermanentModifier(java.util.UUID) -> c
    M:void removeModifiers() -> e
    M:double getValue() -> f
    M:double calculateValue() -> h
    M:java.util.Collection getModifiersOrEmpty(net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation) -> b
    M:void replaceFrom(net.minecraft.world.entity.ai.attributes.AttributeModifiable) -> a
    M:net.minecraft.nbt.NBTTagCompound save() -> g
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.entity.ai.attributes.AttributeMap -> bcd -> net.minecraft.world.entity.ai.attributes.AttributeMapBase
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.Map attributes -> b
    F:java.util.Set dirtyAttributes -> c
    F:net.minecraft.world.entity.ai.attributes.AttributeProvider supplier -> d
    M:void onAttributeModified(net.minecraft.world.entity.ai.attributes.AttributeModifiable) -> a
    M:java.util.Set getDirtyAttributes() -> a
    M:java.util.Collection getSyncableAttributes() -> b
    M:net.minecraft.world.entity.ai.attributes.AttributeModifiable getInstance(net.minecraft.world.entity.ai.attributes.AttributeBase) -> a
    M:boolean hasAttribute(net.minecraft.world.entity.ai.attributes.AttributeBase) -> b
    M:boolean hasModifier(net.minecraft.world.entity.ai.attributes.AttributeBase,java.util.UUID) -> a
    M:double getValue(net.minecraft.world.entity.ai.attributes.AttributeBase) -> c
    M:double getBaseValue(net.minecraft.world.entity.ai.attributes.AttributeBase) -> d
    M:double getModifierValue(net.minecraft.world.entity.ai.attributes.AttributeBase,java.util.UUID) -> b
    M:void removeAttributeModifiers(com.google.common.collect.Multimap) -> a
    M:void addTransientAttributeModifiers(com.google.common.collect.Multimap) -> b
    M:void assignValues(net.minecraft.world.entity.ai.attributes.AttributeMapBase) -> a
    M:net.minecraft.nbt.NBTTagList save() -> c
    M:void load(net.minecraft.nbt.NBTTagList) -> a
net.minecraft.world.entity.ai.attributes.AttributeModifier -> bce -> net.minecraft.world.entity.ai.attributes.AttributeModifier
    F:org.slf4j.Logger LOGGER -> a
    F:double amount -> b
    F:net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation operation -> c
    F:java.util.function.Supplier nameGetter -> d
    F:java.util.UUID id -> e
    M:java.util.UUID getId() -> a
    M:java.lang.String getName() -> b
    M:net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation getOperation() -> c
    M:double getAmount() -> d
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.nbt.NBTTagCompound save() -> e
    M:net.minecraft.world.entity.ai.attributes.AttributeModifier load(net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation -> bce$a -> net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation
    F:net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation ADDITION -> a
    F:net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation MULTIPLY_BASE -> b
    F:net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation MULTIPLY_TOTAL -> c
    F:int value -> e
    M:int toValue() -> a
    M:net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation fromValue(int) -> a
net.minecraft.world.entity.ai.attributes.AttributeSupplier -> bcf -> net.minecraft.world.entity.ai.attributes.AttributeProvider
    F:java.util.Map instances -> a
    M:net.minecraft.world.entity.ai.attributes.AttributeModifiable getAttributeInstance(net.minecraft.world.entity.ai.attributes.AttributeBase) -> d
    M:double getValue(net.minecraft.world.entity.ai.attributes.AttributeBase) -> a
    M:double getBaseValue(net.minecraft.world.entity.ai.attributes.AttributeBase) -> b
    M:double getModifierValue(net.minecraft.world.entity.ai.attributes.AttributeBase,java.util.UUID) -> a
    M:net.minecraft.world.entity.ai.attributes.AttributeModifiable createInstance(java.util.function.Consumer,net.minecraft.world.entity.ai.attributes.AttributeBase) -> a
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder builder() -> a
    M:boolean hasAttribute(net.minecraft.world.entity.ai.attributes.AttributeBase) -> c
    M:boolean hasModifier(net.minecraft.world.entity.ai.attributes.AttributeBase,java.util.UUID) -> b
net.minecraft.world.entity.ai.attributes.AttributeSupplier$Builder -> bcf$a -> net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder
    F:java.util.Map builder -> a
    F:boolean instanceFrozen -> b
    M:net.minecraft.world.entity.ai.attributes.AttributeModifiable create(net.minecraft.world.entity.ai.attributes.AttributeBase) -> b
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder add(net.minecraft.world.entity.ai.attributes.AttributeBase) -> a
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder add(net.minecraft.world.entity.ai.attributes.AttributeBase,double) -> a
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider build() -> a
net.minecraft.world.entity.ai.attributes.Attributes -> bcg -> net.minecraft.world.entity.ai.attributes.GenericAttributes
    F:net.minecraft.world.entity.ai.attributes.AttributeBase MAX_HEALTH -> a
    F:net.minecraft.world.entity.ai.attributes.AttributeBase FOLLOW_RANGE -> b
    F:net.minecraft.world.entity.ai.attributes.AttributeBase KNOCKBACK_RESISTANCE -> c
    F:net.minecraft.world.entity.ai.attributes.AttributeBase MOVEMENT_SPEED -> d
    F:net.minecraft.world.entity.ai.attributes.AttributeBase FLYING_SPEED -> e
    F:net.minecraft.world.entity.ai.attributes.AttributeBase ATTACK_DAMAGE -> f
    F:net.minecraft.world.entity.ai.attributes.AttributeBase ATTACK_KNOCKBACK -> g
    F:net.minecraft.world.entity.ai.attributes.AttributeBase ATTACK_SPEED -> h
    F:net.minecraft.world.entity.ai.attributes.AttributeBase ARMOR -> i
    F:net.minecraft.world.entity.ai.attributes.AttributeBase ARMOR_TOUGHNESS -> j
    F:net.minecraft.world.entity.ai.attributes.AttributeBase LUCK -> k
    F:net.minecraft.world.entity.ai.attributes.AttributeBase SPAWN_REINFORCEMENTS_CHANCE -> l
    F:net.minecraft.world.entity.ai.attributes.AttributeBase JUMP_STRENGTH -> m
    M:net.minecraft.world.entity.ai.attributes.AttributeBase register(java.lang.String,net.minecraft.world.entity.ai.attributes.AttributeBase) -> a
net.minecraft.world.entity.ai.attributes.DefaultAttributes -> bch -> net.minecraft.world.entity.ai.attributes.AttributeDefaults
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.Map SUPPLIERS -> b
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider getSupplier(net.minecraft.world.entity.EntityTypes) -> a
    M:boolean hasSupplier(net.minecraft.world.entity.EntityTypes) -> b
    M:void validate() -> a
net.minecraft.world.entity.ai.attributes.RangedAttribute -> bci -> net.minecraft.world.entity.ai.attributes.AttributeRanged
    F:double minValue -> b
    F:double maxValue -> c
    M:double getMinValue() -> d
    M:double getMaxValue() -> e
    M:double sanitizeValue(double) -> a
net.minecraft.world.entity.ai.behavior.AcquirePoi -> bck -> net.minecraft.world.entity.ai.behavior.BehaviorFindPosition
    F:int BATCH_SIZE -> d
    F:int RATE -> e
    F:int SCAN_RANGE -> a
    F:java.util.function.Predicate poiType -> f
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType memoryToAcquire -> g
    F:boolean onlyIfAdult -> h
    F:java.util.Optional onPoiAcquisitionEvent -> i
    F:long nextScheduledStart -> j
    F:it.unimi.dsi.fastutil.longs.Long2ObjectMap batchCache -> k
    M:com.google.common.collect.ImmutableMap constructEntryConditionMap(net.minecraft.world.entity.ai.memory.MemoryModuleType,net.minecraft.world.entity.ai.memory.MemoryModuleType) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> a
    M:net.minecraft.world.level.pathfinder.PathEntity findPathToPois(net.minecraft.world.entity.EntityInsentient,java.util.Set) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.AcquirePoi$JitteredLinearRetry -> bck$a -> net.minecraft.world.entity.ai.behavior.BehaviorFindPosition$a
    F:int MIN_INTERVAL_INCREASE -> a
    F:int MAX_INTERVAL_INCREASE -> b
    F:int MAX_RETRY_PATHFINDING_INTERVAL -> c
    F:net.minecraft.util.RandomSource random -> d
    F:long previousAttemptTimestamp -> e
    F:long nextScheduledAttemptTimestamp -> f
    F:int currentDelay -> g
    M:void markAttempt(long) -> a
    M:boolean isStillValid(long) -> b
    M:boolean shouldRetry(long) -> c
net.minecraft.world.entity.ai.behavior.AnimalMakeLove -> bcl -> net.minecraft.world.entity.ai.behavior.BehaviorMakeLoveAnimal
    F:int BREED_RANGE -> a
    F:int MIN_DURATION -> d
    F:int MAX_DURATION -> e
    F:net.minecraft.world.entity.EntityTypes partnerType -> f
    F:float speedModifier -> g
    F:long spawnChildAtTime -> h
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.EntityAnimal) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.EntityAnimal,long) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.EntityAnimal,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.EntityAnimal,long) -> c
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.EntityAnimal,long) -> d
    M:net.minecraft.world.entity.animal.EntityAnimal getBreedTarget(net.minecraft.world.entity.animal.EntityAnimal) -> a
    M:boolean hasBreedTargetOfRightType(net.minecraft.world.entity.animal.EntityAnimal) -> b
    M:java.util.Optional findValidBreedPartner(net.minecraft.world.entity.animal.EntityAnimal) -> c
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.AnimalPanic -> bcm -> net.minecraft.world.entity.ai.behavior.AnimalPanic
    F:int PANIC_MIN_DURATION -> a
    F:int PANIC_MAX_DURATION -> d
    F:int PANIC_DISTANCE_HORIZONTAL -> e
    F:int PANIC_DISTANCE_VERTICAL -> f
    F:float speedMultiplier -> g
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> d
    M:net.minecraft.world.phys.Vec3D getPanicPos(net.minecraft.world.entity.EntityCreature,net.minecraft.server.level.WorldServer) -> a
    M:java.util.Optional lookForWater(net.minecraft.world.level.IBlockAccess,net.minecraft.world.entity.Entity) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.AssignProfessionFromJobSite -> bcn -> net.minecraft.world.entity.ai.behavior.BehaviorCareer
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.BabyFollowAdult -> bco -> net.minecraft.world.entity.ai.behavior.BehaviorFollowAdult
    F:net.minecraft.util.valueproviders.UniformInt followRange -> a
    F:java.util.function.Function speedModifier -> d
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable,long) -> a
    M:net.minecraft.world.entity.EntityAgeable getNearestAdult(net.minecraft.world.entity.EntityAgeable) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.BackUpIfTooClose -> bcp -> net.minecraft.world.entity.ai.behavior.BehaviorRetreat
    F:int tooCloseDistance -> a
    F:float strafeSpeed -> d
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> a
    M:boolean isTargetVisible(net.minecraft.world.entity.EntityInsentient) -> a
    M:boolean isTargetTooClose(net.minecraft.world.entity.EntityInsentient) -> b
    M:net.minecraft.world.entity.EntityLiving getTarget(net.minecraft.world.entity.EntityInsentient) -> c
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.BecomePassiveIfMemoryPresent -> bcq -> net.minecraft.world.entity.ai.behavior.BehaviorPacify
    F:int pacifyDuration -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.Behavior -> bcr -> net.minecraft.world.entity.ai.behavior.Behavior
    F:int DEFAULT_DURATION -> b
    F:java.util.Map entryCondition -> c
    F:net.minecraft.world.entity.ai.behavior.Behavior$Status status -> a
    F:long endTimestamp -> d
    F:int minDuration -> e
    F:int maxDuration -> f
    M:net.minecraft.world.entity.ai.behavior.Behavior$Status getStatus() -> a
    M:boolean tryStart(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> e
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
    M:void tickOrStop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> f
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void doStop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> g
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:boolean timedOut(long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean hasRequiredMemories(net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.behavior.Behavior$Status -> bcr$a -> net.minecraft.world.entity.ai.behavior.Behavior$Status
    F:net.minecraft.world.entity.ai.behavior.Behavior$Status STOPPED -> a
    F:net.minecraft.world.entity.ai.behavior.Behavior$Status RUNNING -> b
net.minecraft.world.entity.ai.behavior.BehaviorUtils -> bcs -> net.minecraft.world.entity.ai.behavior.BehaviorUtil
    M:void lockGazeAndWalkToEachOther(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving,float) -> a
    M:boolean entityIsVisible(net.minecraft.world.entity.ai.BehaviorController,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean targetIsValid(net.minecraft.world.entity.ai.BehaviorController,net.minecraft.world.entity.ai.memory.MemoryModuleType,net.minecraft.world.entity.EntityTypes) -> a
    M:boolean targetIsValid(net.minecraft.world.entity.ai.BehaviorController,net.minecraft.world.entity.ai.memory.MemoryModuleType,java.util.function.Predicate) -> a
    M:void lookAtEachOther(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> c
    M:void lookAtEntity(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> a
    M:void setWalkAndLookTargetMemoriesToEachOther(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving,float) -> b
    M:void setWalkAndLookTargetMemories(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.Entity,float,int) -> a
    M:void setWalkAndLookTargetMemories(net.minecraft.world.entity.EntityLiving,net.minecraft.core.BlockPosition,float,int) -> a
    M:void setWalkAndLookTargetMemories(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.ai.behavior.BehaviorPosition,float,int) -> a
    M:void throwItem(net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack,net.minecraft.world.phys.Vec3D) -> a
    M:void throwItem(net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D,float) -> a
    M:net.minecraft.core.SectionPosition findSectionClosestToVillage(net.minecraft.server.level.WorldServer,net.minecraft.core.SectionPosition,int) -> a
    M:boolean isWithinAttackRange(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.entity.EntityLiving,int) -> a
    M:boolean isOtherTargetMuchFurtherAwayThanCurrentAttackTarget(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving,double) -> a
    M:boolean canSee(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> b
    M:net.minecraft.world.entity.EntityLiving getNearestTarget(net.minecraft.world.entity.EntityLiving,java.util.Optional,net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.entity.EntityLiving getTargetNearestMe(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> a
    M:java.util.Optional getLivingEntityFromUUIDMemory(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.ai.memory.MemoryModuleType) -> a
    M:java.util.stream.Stream getNearbyVillagersWithCondition(net.minecraft.world.entity.npc.EntityVillager,java.util.function.Predicate) -> a
    M:net.minecraft.world.phys.Vec3D getRandomSwimmablePos(net.minecraft.world.entity.EntityCreature,int,int) -> a
    M:boolean isBreeding(net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.behavior.BlockPosTracker -> bct -> net.minecraft.world.entity.ai.behavior.BehaviorTarget
    F:net.minecraft.core.BlockPosition blockPos -> a
    F:net.minecraft.world.phys.Vec3D centerPosition -> b
    M:net.minecraft.world.phys.Vec3D currentPosition() -> a
    M:net.minecraft.core.BlockPosition currentBlockPosition() -> b
    M:boolean isVisibleBy(net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.behavior.CelebrateVillagersSurvivedRaid -> bcu -> net.minecraft.world.entity.ai.behavior.BehaviorCelebrate
    F:net.minecraft.world.entity.raid.Raid currentRaid -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> c
    M:net.minecraft.world.item.ItemStack getFirework(net.minecraft.world.item.EnumColor,int) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
net.minecraft.world.entity.ai.behavior.CopyMemoryWithExpiry -> bcv -> net.minecraft.world.entity.ai.behavior.BehaviorExpirableMemory
    F:java.util.function.Predicate predicate -> a
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType sourceMemory -> d
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType targetMemory -> e
    F:net.minecraft.util.valueproviders.UniformInt durationOfCopy -> f
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.CountDownCooldownTicks -> bcw -> net.minecraft.world.entity.ai.behavior.CountDownCooldownTicks
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType cooldownTicks -> a
    M:java.util.Optional getCooldownTickMemory(net.minecraft.world.entity.EntityLiving) -> a
    M:boolean timedOut(long) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
net.minecraft.world.entity.ai.behavior.Croak -> bcx -> net.minecraft.world.entity.ai.behavior.Croak
    F:int CROAK_TICKS -> a
    F:int TIME_OUT_DURATION -> d
    F:int croakCounter -> e
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.frog.Frog) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.frog.Frog,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.frog.Frog,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.frog.Frog,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.frog.Frog,long) -> d
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.CrossbowAttack -> bcy -> net.minecraft.world.entity.ai.behavior.BehaviorCrossbowAttack
    F:int TIMEOUT -> a
    F:int attackDelay -> d
    F:net.minecraft.world.entity.ai.behavior.BehaviorCrossbowAttack$BowState crossbowState -> e
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> a
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> c
    M:void crossbowAttack(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.entity.EntityLiving) -> a
    M:void lookAtTarget(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.entity.EntityLiving) -> b
    M:net.minecraft.world.entity.EntityLiving getAttackTarget(net.minecraft.world.entity.EntityLiving) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
net.minecraft.world.entity.ai.behavior.CrossbowAttack$CrossbowState -> bcy$a -> net.minecraft.world.entity.ai.behavior.BehaviorCrossbowAttack$BowState
    F:net.minecraft.world.entity.ai.behavior.BehaviorCrossbowAttack$BowState UNCHARGED -> a
    F:net.minecraft.world.entity.ai.behavior.BehaviorCrossbowAttack$BowState CHARGING -> b
    F:net.minecraft.world.entity.ai.behavior.BehaviorCrossbowAttack$BowState CHARGED -> c
    F:net.minecraft.world.entity.ai.behavior.BehaviorCrossbowAttack$BowState READY_TO_ATTACK -> d
net.minecraft.world.entity.ai.behavior.DismountOrSkipMounting -> bcz -> net.minecraft.world.entity.ai.behavior.BehaviorStopRiding
    F:int maxWalkDistToRideTarget -> a
    F:java.util.function.BiPredicate dontRideIf -> d
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean isVehicleValid(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.Entity) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.DoNothing -> bda -> net.minecraft.world.entity.ai.behavior.BehaviorNop
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
net.minecraft.world.entity.ai.behavior.EntityTracker -> bdb -> net.minecraft.world.entity.ai.behavior.BehaviorPositionEntity
    F:net.minecraft.world.entity.Entity entity -> a
    F:boolean trackEyeHeight -> b
    M:net.minecraft.world.phys.Vec3D currentPosition() -> a
    M:net.minecraft.core.BlockPosition currentBlockPosition() -> b
    M:boolean isVisibleBy(net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.entity.Entity getEntity() -> c
net.minecraft.world.entity.ai.behavior.EraseMemoryIf -> bdc -> net.minecraft.world.entity.ai.behavior.BehaviorRemoveMemory
    F:java.util.function.Predicate predicate -> a
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType memoryType -> d
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.FlyingRandomStroll -> bdd -> net.minecraft.world.entity.ai.behavior.FlyingRandomStroll
    M:net.minecraft.world.phys.Vec3D getTargetPos(net.minecraft.world.entity.EntityCreature) -> a
net.minecraft.world.entity.ai.behavior.FollowTemptation -> bde -> net.minecraft.world.entity.ai.behavior.FollowTemptation
    F:int TEMPTATION_COOLDOWN -> a
    F:double CLOSE_ENOUGH_DIST -> d
    F:java.util.function.Function speedModifier -> e
    M:float getSpeedModifier(net.minecraft.world.entity.EntityCreature) -> a
    M:java.util.Optional getTemptingPlayer(net.minecraft.world.entity.EntityCreature) -> b
    M:boolean timedOut(long) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> d
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.GateBehavior -> bdf -> net.minecraft.world.entity.ai.behavior.BehaviorGate
    F:java.util.Set exitErasedMemories -> a
    F:net.minecraft.world.entity.ai.behavior.BehaviorGate$Order orderPolicy -> d
    F:net.minecraft.world.entity.ai.behavior.BehaviorGate$Execution runningPolicy -> e
    F:net.minecraft.world.entity.ai.behavior.ShufflingList behaviors -> f
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:boolean timedOut(long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
net.minecraft.world.entity.ai.behavior.GateBehavior$OrderPolicy -> bdf$a -> net.minecraft.world.entity.ai.behavior.BehaviorGate$Order
    F:net.minecraft.world.entity.ai.behavior.BehaviorGate$Order ORDERED -> a
    F:net.minecraft.world.entity.ai.behavior.BehaviorGate$Order SHUFFLED -> b
    F:java.util.function.Consumer consumer -> c
    M:void apply(net.minecraft.world.entity.ai.behavior.ShufflingList) -> a
net.minecraft.world.entity.ai.behavior.GateBehavior$RunningPolicy -> bdf$b -> net.minecraft.world.entity.ai.behavior.BehaviorGate$Execution
    F:net.minecraft.world.entity.ai.behavior.BehaviorGate$Execution RUN_ONE -> a
    F:net.minecraft.world.entity.ai.behavior.BehaviorGate$Execution TRY_ALL -> b
    M:void apply(java.util.stream.Stream,net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
    M:void apply(java.util.stream.Stream,net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.GiveGiftToHero -> bdg -> net.minecraft.world.entity.ai.behavior.BehaviorVillageHeroGift
    F:int THROW_GIFT_AT_DISTANCE -> a
    F:int MIN_TIME_BETWEEN_GIFTS -> d
    F:int MAX_TIME_BETWEEN_GIFTS -> e
    F:int TIME_TO_DELAY_FOR_HEAD_TO_FINISH_TURNING -> f
    F:java.util.Map GIFTS -> g
    F:float SPEED_MODIFIER -> h
    F:int timeUntilNextGift -> i
    F:boolean giftGivenDuringThisRun -> j
    F:long timeSinceStart -> k
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> c
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> d
    M:void throwGift(net.minecraft.world.entity.npc.EntityVillager,net.minecraft.world.entity.EntityLiving) -> a
    M:java.util.List getItemToThrow(net.minecraft.world.entity.npc.EntityVillager) -> a
    M:boolean isHeroVisible(net.minecraft.world.entity.npc.EntityVillager) -> b
    M:java.util.Optional getNearestTargetableHero(net.minecraft.world.entity.npc.EntityVillager) -> c
    M:boolean isHero(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean isWithinThrowingDistance(net.minecraft.world.entity.npc.EntityVillager,net.minecraft.world.entity.player.EntityHuman) -> a
    M:int calculateTimeUntilNextGift(net.minecraft.server.level.WorldServer) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.GoAndGiveItemsToTarget -> bdh -> net.minecraft.world.entity.ai.behavior.GoAndGiveItemsToTarget
    F:int CLOSE_ENOUGH_DISTANCE_TO_TARGET -> a
    F:int ITEM_PICKUP_COOLDOWN_AFTER_THROWING -> d
    F:java.util.function.Function targetPositionGetter -> e
    F:float speedModifier -> f
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void triggerDropItemOnBlock(net.minecraft.world.entity.ai.behavior.BehaviorPosition,net.minecraft.world.item.ItemStack,net.minecraft.server.level.EntityPlayer) -> a
    M:boolean canThrowItemToTarget(net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.phys.Vec3D getThrowPosition(net.minecraft.world.entity.ai.behavior.BehaviorPosition) -> a
    M:void throwItem(net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack,net.minecraft.world.phys.Vec3D) -> a
net.minecraft.world.entity.ai.behavior.GoOutsideToCelebrate -> bdi -> net.minecraft.world.entity.ai.behavior.BehaviorOutsideCelebrate
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.behavior.GoToClosestVillage -> bdj -> net.minecraft.world.entity.ai.behavior.BehaviorNearestVillage
    F:float speedModifier -> a
    F:int closeEnoughDistance -> d
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.GoToPotentialJobSite -> bdk -> net.minecraft.world.entity.ai.behavior.BehaviorPotentialJobSite
    F:int TICKS_UNTIL_TIMEOUT -> d
    F:float speedModifier -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> c
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
net.minecraft.world.entity.ai.behavior.GoToTargetLocation -> bdl -> net.minecraft.world.entity.ai.behavior.GoToTargetLocation
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType locationMemory -> a
    F:int closeEnoughDist -> d
    F:float speedModifier -> e
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> a
    M:net.minecraft.core.BlockPosition getNearbyPos(net.minecraft.world.entity.EntityInsentient,net.minecraft.core.BlockPosition) -> a
    M:int getRandomOffset(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.core.BlockPosition getTargetLocation(net.minecraft.world.entity.EntityInsentient) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.GoToWantedItem -> bdm -> net.minecraft.world.entity.ai.behavior.BehaviorFindAdmirableItem
    F:java.util.function.Predicate predicate -> a
    F:int maxDistToWalk -> d
    F:float speedModifier -> e
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
    M:boolean isOnPickupCooldown(net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.entity.item.EntityItem getClosestLovedItem(net.minecraft.world.entity.EntityLiving) -> b
net.minecraft.world.entity.ai.behavior.HarvestFarmland -> bdn -> net.minecraft.world.entity.ai.behavior.BehaviorFarm
    F:int HARVEST_DURATION -> d
    F:float SPEED_MODIFIER -> a
    F:net.minecraft.core.BlockPosition aboveFarmlandPos -> e
    F:long nextOkStartTime -> f
    F:int timeWorkedSoFar -> g
    F:java.util.List validFarmlandAroundVillager -> h
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:net.minecraft.core.BlockPosition getValidFarmland(net.minecraft.server.level.WorldServer) -> a
    M:boolean validPos(net.minecraft.core.BlockPosition,net.minecraft.server.level.WorldServer) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> c
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> d
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.InsideBrownianWalk -> bdo -> net.minecraft.world.entity.ai.behavior.BehaviorStrollInside
    F:float speedModifier -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.InteractWith -> bdp -> net.minecraft.world.entity.ai.behavior.BehaviorInteract
    F:int maxDist -> a
    F:float speedModifier -> d
    F:net.minecraft.world.entity.EntityTypes type -> e
    F:int interactionRangeSqr -> f
    F:java.util.function.Predicate targetFilter -> g
    F:java.util.function.Predicate selfFilter -> h
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType memory -> i
    M:net.minecraft.world.entity.ai.behavior.BehaviorInteract of(net.minecraft.world.entity.EntityTypes,int,net.minecraft.world.entity.ai.memory.MemoryModuleType,float,int) -> a
    M:net.minecraft.world.entity.ai.behavior.BehaviorInteract of(net.minecraft.world.entity.EntityTypes,int,java.util.function.Predicate,net.minecraft.world.entity.ai.memory.MemoryModuleType,float,int) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean seesAtLeastOneValidTarget(net.minecraft.world.entity.EntityLiving) -> a
    M:boolean isTargetValid(net.minecraft.world.entity.EntityLiving) -> b
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
    M:boolean canInteract(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.behavior.InteractWithDoor -> bdq -> net.minecraft.world.entity.ai.behavior.BehaviorInteractDoor
    F:int COOLDOWN_BEFORE_RERUNNING_IN_SAME_NODE -> a
    F:double SKIP_CLOSING_DOOR_IF_FURTHER_AWAY_THAN -> d
    F:double MAX_DISTANCE_TO_HOLD_DOOR_OPEN_FOR_OTHER_MOBS -> e
    F:net.minecraft.world.level.pathfinder.PathPoint lastCheckedNode -> f
    F:int remainingCooldown -> g
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
    M:void closeDoorsThatIHaveOpenedOrPassedThrough(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,net.minecraft.world.level.pathfinder.PathPoint,net.minecraft.world.level.pathfinder.PathPoint) -> a
    M:boolean areOtherMobsComingThroughDoor(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,net.minecraft.core.BlockPosition) -> a
    M:boolean isMobComingThroughDoor(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,net.minecraft.core.BlockPosition) -> b
    M:boolean isDoorTooFarAway(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,net.minecraft.core.GlobalPos) -> a
    M:void rememberDoorToClose(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,net.minecraft.core.BlockPosition) -> c
net.minecraft.world.entity.ai.behavior.JumpOnBed -> bdr -> net.minecraft.world.entity.ai.behavior.BehaviorBedJump
    F:int MAX_TIME_TO_REACH_BED -> a
    F:int MIN_JUMPS -> d
    F:int MAX_JUMPS -> e
    F:int COOLDOWN_BETWEEN_JUMPS -> f
    F:float speedModifier -> g
    F:net.minecraft.core.BlockPosition targetBed -> h
    F:int remainingTimeToReachBed -> i
    F:int remainingJumps -> j
    F:int remainingCooldownUntilNextJump -> k
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> a
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> b
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> c
    M:boolean timedOut(long) -> a
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> d
    M:void startWalkingTowardsBed(net.minecraft.world.entity.EntityInsentient,net.minecraft.core.BlockPosition) -> a
    M:boolean nearBed(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient) -> b
    M:boolean onOrOverBed(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient) -> c
    M:boolean onBedSurface(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient) -> d
    M:boolean isBed(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:java.util.Optional getNearestBed(net.minecraft.world.entity.EntityInsentient) -> a
    M:boolean tiredOfWalking(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient) -> e
    M:boolean tiredOfJumping(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient) -> f
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.LocateHidingPlace -> bds -> net.minecraft.world.entity.ai.behavior.BehaviorHome
    F:float speedModifier -> a
    F:int radius -> d
    F:int closeEnoughDist -> e
    F:java.util.Optional currentPos -> f
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.LocateHidingPlaceDuringRaid -> bdt -> net.minecraft.world.entity.ai.behavior.BehaviorHomeRaid
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.behavior.LongJumpMidJump -> bdu -> net.minecraft.world.entity.ai.behavior.LongJumpMidJump
    F:int TIME_OUT_DURATION -> a
    F:net.minecraft.util.valueproviders.UniformInt timeBetweenLongJumps -> d
    F:net.minecraft.sounds.SoundEffect landingSound -> e
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> c
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.LongJumpToPreferredBlock -> bdv -> net.minecraft.world.entity.ai.behavior.LongJumpToPreferredBlock
    F:net.minecraft.tags.TagKey preferredBlockTag -> m
    F:float preferredBlocksChance -> n
    F:java.util.List notPrefferedJumpCandidates -> o
    F:boolean currentlyWantingPreferredOnes -> p
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> a
    M:java.util.Optional getJumpCandidate(net.minecraft.server.level.WorldServer) -> a
    M:boolean isAcceptableLandingPosition(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,net.minecraft.core.BlockPosition) -> a
    M:boolean willNotLandInFluid(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.LongJumpToRandomPos -> bdw -> net.minecraft.world.entity.ai.behavior.LongJumpToRandomPos
    F:int FIND_JUMP_TRIES -> a
    F:int PREPARE_JUMP_DURATION -> m
    F:int MIN_PATHFIND_DISTANCE_TO_VALID_JUMP -> d
    F:int TIME_OUT_DURATION -> n
    F:java.util.List ALLOWED_ANGLES -> o
    F:net.minecraft.util.valueproviders.UniformInt timeBetweenLongJumps -> p
    F:int maxLongJumpHeight -> e
    F:int maxLongJumpWidth -> f
    F:float maxJumpVelocity -> g
    F:java.util.List jumpCandidates -> h
    F:java.util.Optional initialPosition -> i
    F:net.minecraft.world.phys.Vec3D chosenJump -> j
    F:int findJumpTries -> k
    F:long prepareJumpStart -> l
    F:java.util.function.Function getJumpSound -> q
    F:java.util.function.Predicate acceptableLandingSpot -> r
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> b
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> a
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> c
    M:void pickCandidate(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> d
    M:java.util.Optional getJumpCandidate(net.minecraft.server.level.WorldServer) -> a
    M:boolean isAcceptableLandingPosition(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.Vec3D calculateOptimalJumpVector(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.world.phys.Vec3D calculateJumpVectorForAngle(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.phys.Vec3D,int) -> a
    M:boolean isClearTransition(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.LongJumpToRandomPos$PossibleJump -> bdw$a -> net.minecraft.world.entity.ai.behavior.LongJumpToRandomPos$a
    F:net.minecraft.core.BlockPosition jumpTarget -> a
    M:net.minecraft.core.BlockPosition getJumpTarget() -> b
net.minecraft.world.entity.ai.behavior.LookAndFollowTradingPlayerSink -> bdx -> net.minecraft.world.entity.ai.behavior.BehaviorInteractPlayer
    F:float speedModifier -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> d
    M:boolean timedOut(long) -> a
    M:void followPlayer(net.minecraft.world.entity.npc.EntityVillager) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.LookAtTargetSink -> bdy -> net.minecraft.world.entity.ai.behavior.BehaviorLook
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> a
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> c
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
net.minecraft.world.entity.ai.behavior.MeleeAttack -> bdz -> net.minecraft.world.entity.ai.behavior.BehaviorAttack
    F:int cooldownBetweenAttacks -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient) -> a
    M:boolean isHoldingUsableProjectileWeapon(net.minecraft.world.entity.EntityInsentient) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> a
    M:net.minecraft.world.entity.EntityLiving getAttackTarget(net.minecraft.world.entity.EntityInsentient) -> b
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.Mount -> bea -> net.minecraft.world.entity.ai.behavior.BehaviorStartRiding
    F:int CLOSE_ENOUGH_TO_START_RIDING_DIST -> a
    F:float speedModifier -> d
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
    M:boolean isCloseEnoughToStartRiding(net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.entity.Entity getRidableEntity(net.minecraft.world.entity.EntityLiving) -> b
net.minecraft.world.entity.ai.behavior.MoveToSkySeeingSpot -> beb -> net.minecraft.world.entity.ai.behavior.BehaviorOutside
    F:float speedModifier -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.phys.Vec3D getOutdoorPosition(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> b
    M:boolean hasNoBlocksAbove(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.ai.behavior.MoveToTargetSink -> bec -> net.minecraft.world.entity.ai.behavior.BehavorMove
    F:int MAX_COOLDOWN_BEFORE_RETRYING -> a
    F:int remainingCooldown -> d
    F:net.minecraft.world.level.pathfinder.PathEntity path -> e
    F:net.minecraft.core.BlockPosition lastTargetPos -> f
    F:float speedModifier -> g
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> a
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> b
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> d
    M:boolean tryComputePath(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.entity.ai.memory.MemoryTarget,long) -> a
    M:boolean reachedTarget(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.entity.ai.memory.MemoryTarget) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.PlayTagWithOtherKids -> bed -> net.minecraft.world.entity.ai.behavior.BehaviorPlay
    F:int MAX_FLEE_XZ_DIST -> a
    F:int MAX_FLEE_Y_DIST -> d
    F:float FLEE_SPEED_MODIFIER -> e
    F:float CHASE_SPEED_MODIFIER -> f
    F:int MAX_CHASERS_PER_TARGET -> g
    F:int AVERAGE_WAIT_TIME_BETWEEN_RUNS -> h
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> a
    M:void fleeFromChaser(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,net.minecraft.world.entity.EntityLiving) -> a
    M:void chaseKid(net.minecraft.world.entity.EntityCreature,net.minecraft.world.entity.EntityLiving) -> a
    M:java.util.Optional findSomeoneToChase(net.minecraft.world.entity.EntityCreature) -> a
    M:java.util.Optional findSomeoneBeingChased(net.minecraft.world.entity.EntityCreature) -> b
    M:java.util.Map checkHowManyChasersEachFriendHas(net.minecraft.world.entity.EntityCreature) -> c
    M:java.util.List getFriendsNearby(net.minecraft.world.entity.EntityCreature) -> d
    M:net.minecraft.world.entity.EntityLiving whoAreYouChasing(net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.entity.EntityLiving seeIfSomeoneIsChasingMe(net.minecraft.world.entity.EntityLiving) -> b
    M:boolean isChasingSomeone(net.minecraft.world.entity.EntityLiving) -> c
    M:boolean isFriendChasingMe(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean hasFriendsNearby(net.minecraft.world.entity.EntityCreature) -> e
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.PoiCompetitorScan -> bee -> net.minecraft.world.entity.ai.behavior.BehaviorBetterJob
    F:net.minecraft.world.entity.npc.VillagerProfession profession -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:net.minecraft.world.entity.npc.EntityVillager selectWinner(net.minecraft.world.entity.npc.EntityVillager,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:boolean competesForSameJobsite(net.minecraft.core.GlobalPos,net.minecraft.core.Holder,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:boolean hasMatchingProfession(net.minecraft.core.Holder,net.minecraft.world.entity.npc.VillagerProfession) -> a
    M:boolean hasJobSite(net.minecraft.world.entity.npc.EntityVillager) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.PositionTracker -> bef -> net.minecraft.world.entity.ai.behavior.BehaviorPosition
net.minecraft.world.entity.ai.behavior.PrepareRamNearestTarget -> beg -> net.minecraft.world.entity.ai.behavior.PrepareRamNearestTarget
    F:int TIME_OUT_DURATION -> a
    F:java.util.function.ToIntFunction getCooldownOnFail -> d
    F:int minRamDistance -> e
    F:int maxRamDistance -> f
    F:float walkSpeed -> g
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition ramTargeting -> h
    F:int ramPrepareTime -> i
    F:java.util.function.Function getPrepareRamSound -> j
    F:java.util.Optional reachedRamPositionTimestamp -> k
    F:java.util.Optional ramCandidate -> l
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> a
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> b
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> d
    M:net.minecraft.world.phys.Vec3D getEdgeOfBlock(net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:java.util.Optional calculateRammingStartPosition(net.minecraft.world.entity.EntityCreature,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean isWalkableBlock(net.minecraft.world.entity.EntityCreature,net.minecraft.core.BlockPosition) -> a
    M:void chooseRamPosition(net.minecraft.world.entity.EntityCreature,net.minecraft.world.entity.EntityLiving) -> b
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.PrepareRamNearestTarget$RamCandidate -> beg$a -> net.minecraft.world.entity.ai.behavior.PrepareRamNearestTarget$a
    F:net.minecraft.core.BlockPosition startPosition -> a
    F:net.minecraft.core.BlockPosition targetPosition -> b
    F:net.minecraft.world.entity.EntityLiving target -> c
    M:net.minecraft.core.BlockPosition getStartPosition() -> a
    M:net.minecraft.core.BlockPosition getTargetPosition() -> b
    M:net.minecraft.world.entity.EntityLiving getTarget() -> c
net.minecraft.world.entity.ai.behavior.RamTarget -> beh -> net.minecraft.world.entity.ai.behavior.RamTarget
    F:int TIME_OUT_DURATION -> a
    F:float RAM_SPEED_FORCE_FACTOR -> d
    F:java.util.function.Function getTimeBetweenRams -> e
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition ramTargeting -> f
    F:float speed -> g
    F:java.util.function.ToDoubleFunction getKnockbackForce -> h
    F:net.minecraft.world.phys.Vec3D ramDirection -> i
    F:java.util.function.Function getImpactSound -> j
    F:java.util.function.Function getHornBreakSound -> k
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.goat.Goat) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.goat.Goat,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.goat.Goat,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.goat.Goat,long) -> c
    M:boolean hasRammedHornBreakingBlock(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.goat.Goat) -> c
    M:void finishRam(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.goat.Goat) -> b
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.RandomStroll -> bei -> net.minecraft.world.entity.ai.behavior.BehaviorStrollRandomUnconstrained
    F:int MAX_XZ_DIST -> e
    F:int MAX_Y_DIST -> f
    F:float speedModifier -> g
    F:int maxHorizontalDistance -> a
    F:int maxVerticalDistance -> d
    F:boolean mayStrollFromWater -> h
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> a
    M:net.minecraft.world.phys.Vec3D getTargetPos(net.minecraft.world.entity.EntityCreature) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.RandomSwim -> bej -> net.minecraft.world.entity.ai.behavior.RandomSwim
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature) -> a
    M:net.minecraft.world.phys.Vec3D getTargetPos(net.minecraft.world.entity.EntityCreature) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.behavior.ReactToBell -> bek -> net.minecraft.world.entity.ai.behavior.BehaviorBellAlert
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.ResetProfession -> bel -> net.minecraft.world.entity.ai.behavior.BehaviorProfession
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.ResetRaidStatus -> bem -> net.minecraft.world.entity.ai.behavior.BehaviorRaidReset
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.RingBell -> ben -> net.minecraft.world.entity.ai.behavior.BehaviorBellRing
    F:float BELL_RING_CHANCE -> d
    F:int RING_BELL_FROM_DISTANCE -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.RunIf -> beo -> net.minecraft.world.entity.ai.behavior.BehaviorRunIf
    F:java.util.function.Predicate predicate -> a
    F:net.minecraft.world.entity.ai.behavior.Behavior wrappedBehavior -> d
    F:boolean checkWhileRunningAlso -> e
    M:java.util.Map mergeMaps(java.util.Map,java.util.Map) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:boolean timedOut(long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
net.minecraft.world.entity.ai.behavior.RunOne -> bep -> net.minecraft.world.entity.ai.behavior.BehaviorGateSingle
net.minecraft.world.entity.ai.behavior.RunSometimes -> beq -> net.minecraft.world.entity.ai.behavior.BehaviorRunSometimes
    F:boolean resetTicks -> a
    F:boolean wasRunning -> d
    F:net.minecraft.util.valueproviders.UniformInt interval -> e
    F:net.minecraft.world.entity.ai.behavior.Behavior wrappedBehavior -> f
    F:int ticksUntilNextStart -> g
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void resetTicksUntilNextStart(net.minecraft.server.level.WorldServer) -> a
    M:boolean timedOut(long) -> a
net.minecraft.world.entity.ai.behavior.SetClosestHomeAsWalkTarget -> ber -> net.minecraft.world.entity.ai.behavior.BehaviorWalkHome
    F:int CACHE_TIMEOUT -> a
    F:int BATCH_SIZE -> d
    F:int RATE -> e
    F:int OK_DISTANCE_SQR -> f
    F:float speedModifier -> g
    F:it.unimi.dsi.fastutil.longs.Long2LongMap batchCache -> h
    F:int triedCount -> i
    F:long lastUpdate -> j
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.SetEntityLookTarget -> bes -> net.minecraft.world.entity.ai.behavior.BehaviorLookTarget
    F:java.util.function.Predicate predicate -> a
    F:float maxDistSqr -> d
    F:java.util.Optional nearestEntityMatchingTest -> e
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.SetHiddenState -> bet -> net.minecraft.world.entity.ai.behavior.BehaviorHide
    F:int HIDE_TIMEOUT -> a
    F:int closeEnoughDist -> d
    F:int stayHiddenTicks -> e
    F:int ticksHidden -> f
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.SetLookAndInteract -> beu -> net.minecraft.world.entity.ai.behavior.BehaviorLookInteract
    F:net.minecraft.world.entity.EntityTypes type -> a
    F:int interactionRangeSqr -> d
    F:java.util.function.Predicate targetFilter -> e
    F:java.util.function.Predicate selfFilter -> f
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
    M:boolean isMatchingTarget(net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities getVisibleEntities(net.minecraft.world.entity.EntityLiving) -> b
net.minecraft.world.entity.ai.behavior.SetRaidStatus -> bev -> net.minecraft.world.entity.ai.behavior.BehaviorRaid
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.SetWalkTargetAwayFrom -> bew -> net.minecraft.world.entity.ai.behavior.BehaviorWalkAway
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType walkAwayFromMemory -> a
    F:float speedModifier -> d
    F:int desiredDistance -> e
    F:java.util.function.Function toPosition -> f
    M:net.minecraft.world.entity.ai.behavior.BehaviorWalkAway pos(net.minecraft.world.entity.ai.memory.MemoryModuleType,float,int,boolean) -> a
    M:net.minecraft.world.entity.ai.behavior.BehaviorWalkAway entity(net.minecraft.world.entity.ai.memory.MemoryModuleType,float,int,boolean) -> b
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature) -> a
    M:net.minecraft.world.phys.Vec3D getPosToAvoid(net.minecraft.world.entity.EntityCreature) -> a
    M:boolean alreadyWalkingAwayFromPosWithSameSpeed(net.minecraft.world.entity.EntityCreature) -> b
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> a
    M:void moveAwayFrom(net.minecraft.world.entity.EntityCreature,net.minecraft.world.phys.Vec3D,float) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.SetWalkTargetFromAttackTargetIfTargetOutOfReach -> bex -> net.minecraft.world.entity.ai.behavior.BehaviorWalkAwayOutOfRange
    F:int PROJECTILE_ATTACK_RANGE_BUFFER -> a
    F:java.util.function.Function speedModifier -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> a
    M:void setWalkAndLookTarget(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> a
    M:void clearWalkTarget(net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.SetWalkTargetFromBlockMemory -> bey -> net.minecraft.world.entity.ai.behavior.BehaviorWalkAwayBlock
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType memoryType -> a
    F:float speedModifier -> d
    F:int closeEnoughDist -> e
    F:int tooFarDistance -> f
    F:int tooLongUnreachableDuration -> g
    M:void dropPOI(net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:boolean tiredOfTryingToFindTarget(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:boolean tooFar(net.minecraft.world.entity.npc.EntityVillager,net.minecraft.core.GlobalPos) -> a
    M:boolean wrongDimension(net.minecraft.server.level.WorldServer,net.minecraft.core.GlobalPos) -> a
    M:boolean closeEnough(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,net.minecraft.core.GlobalPos) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.SetWalkTargetFromLookTarget -> bez -> net.minecraft.world.entity.ai.behavior.BehaviorLookWalk
    F:java.util.function.Function speedModifier -> a
    F:int closeEnoughDistance -> d
    F:java.util.function.Predicate canSetWalkTargetPredicate -> e
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.ShowTradesToPlayer -> bfa -> net.minecraft.world.entity.ai.behavior.BehaviorTradePlayer
    F:int MAX_LOOK_TIME -> a
    F:int STARTING_LOOK_TIME -> d
    F:net.minecraft.world.item.ItemStack playerItemStack -> e
    F:java.util.List displayItems -> f
    F:int cycleCounter -> g
    F:int displayIndex -> h
    F:int lookTime -> i
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> c
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> d
    M:void findItemsToDisplay(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:void displayFirstItem(net.minecraft.world.entity.npc.EntityVillager) -> a
    M:void updateDisplayItems(net.minecraft.world.entity.npc.EntityVillager) -> b
    M:boolean playerItemStackMatchesCostOfOffer(net.minecraft.world.item.trading.MerchantRecipe) -> a
    M:void clearHeldItem(net.minecraft.world.entity.npc.EntityVillager) -> c
    M:void displayAsHeldItem(net.minecraft.world.entity.npc.EntityVillager,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.entity.EntityLiving lookAtTarget(net.minecraft.world.entity.npc.EntityVillager) -> d
    M:void displayCyclingItems(net.minecraft.world.entity.npc.EntityVillager) -> e
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.ShufflingList -> bfb -> net.minecraft.world.entity.ai.behavior.ShufflingList
    F:java.util.List entries -> a
    F:net.minecraft.util.RandomSource random -> b
    M:com.mojang.serialization.Codec codec(com.mojang.serialization.Codec) -> a
    M:net.minecraft.world.entity.ai.behavior.ShufflingList add(java.lang.Object,int) -> a
    M:net.minecraft.world.entity.ai.behavior.ShufflingList shuffle() -> a
    M:java.util.stream.Stream stream() -> b
net.minecraft.world.entity.ai.behavior.ShufflingList$WeightedEntry -> bfb$a -> net.minecraft.world.entity.ai.behavior.ShufflingList$a
    F:java.lang.Object data -> a
    F:int weight -> b
    F:double randWeight -> c
    M:double getRandWeight() -> c
    M:void setRandom(float) -> a
    M:java.lang.Object getData() -> a
    M:int getWeight() -> b
    M:com.mojang.serialization.Codec codec(com.mojang.serialization.Codec) -> a
    M:com.mojang.serialization.DataResult decode(com.mojang.serialization.DynamicOps,java.lang.Object) -> decode
    M:com.mojang.serialization.DataResult encode(net.minecraft.world.entity.ai.behavior.ShufflingList$WeightedEntry,com.mojang.serialization.DynamicOps,java.lang.Object) -> a
    M:com.mojang.serialization.DataResult encode(java.lang.Object,com.mojang.serialization.DynamicOps,java.lang.Object) -> encode
net.minecraft.world.entity.ai.behavior.SleepInBed -> bfc -> net.minecraft.world.entity.ai.behavior.BehaviorSleep
    F:int COOLDOWN_AFTER_BEING_WOKEN -> a
    F:long nextOkStartTime -> d
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
    M:boolean timedOut(long) -> a
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
net.minecraft.world.entity.ai.behavior.SocializeAtBell -> bfd -> net.minecraft.world.entity.ai.behavior.BehaviorBell
    F:float SPEED_MODIFIER -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.StartAttacking -> bfe -> net.minecraft.world.entity.ai.behavior.BehaviorAttackTargetSet
    F:java.util.function.Predicate canAttackPredicate -> a
    F:java.util.function.Function targetFinderFunction -> d
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> a
    M:void setAttackTarget(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.StartCelebratingIfTargetDead -> bff -> net.minecraft.world.entity.ai.behavior.BehaviorCelebrateDeath
    F:int celebrateDuration -> a
    F:java.util.function.BiPredicate dancePredicate -> d
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
    M:net.minecraft.world.entity.EntityLiving getAttackTarget(net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.behavior.StayCloseToTarget -> bfg -> net.minecraft.world.entity.ai.behavior.StayCloseToTarget
    F:java.util.function.Function targetPositionGetter -> a
    F:int closeEnough -> d
    F:int tooFar -> e
    F:float speedModifier -> f
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.StopAttackingIfTargetInvalid -> bfh -> net.minecraft.world.entity.ai.behavior.BehaviorAttackTargetForget
    F:int TIMEOUT_TO_GET_WITHIN_ATTACK_RANGE -> a
    F:java.util.function.Predicate stopAttackingWhen -> d
    F:java.util.function.BiConsumer onTargetErased -> e
    F:boolean canGrowTiredOfTryingToReachTarget -> f
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> a
    M:boolean isCurrentTargetInDifferentLevel(net.minecraft.world.entity.EntityInsentient) -> b
    M:net.minecraft.world.entity.EntityLiving getAttackTarget(net.minecraft.world.entity.EntityInsentient) -> c
    M:boolean isTiredOfTryingToReachTarget(net.minecraft.world.entity.EntityLiving) -> a
    M:boolean isCurrentTargetDeadOrRemoved(net.minecraft.world.entity.EntityInsentient) -> d
    M:void clearAttackTarget(net.minecraft.world.entity.EntityInsentient) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.StopBeingAngryIfTargetDead -> bfi -> net.minecraft.world.entity.ai.behavior.BehaviorForgetAnger
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.StrollAroundPoi -> bfj -> net.minecraft.world.entity.ai.behavior.BehaviorStrollPosition
    F:int MIN_TIME_BETWEEN_STROLLS -> a
    F:int STROLL_MAX_XZ_DIST -> d
    F:int STROLL_MAX_Y_DIST -> e
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType memoryType -> f
    F:long nextOkStartTime -> g
    F:int maxDistanceFromPoi -> h
    F:float speedModifier -> i
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.StrollToPoi -> bfk -> net.minecraft.world.entity.ai.behavior.BehaviorStrollPlace
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType memoryType -> a
    F:int closeEnoughDist -> d
    F:int maxDistanceFromPoi -> e
    F:float speedModifier -> f
    F:long nextOkStartTime -> g
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.StrollToPoiList -> bfl -> net.minecraft.world.entity.ai.behavior.BehaviorStrollPlaceList
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType strollToMemoryType -> a
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType mustBeCloseToMemoryType -> d
    F:float speedModifier -> e
    F:int closeEnoughDist -> f
    F:int maxDistanceFromPoi -> g
    F:long nextOkStartTime -> h
    F:net.minecraft.core.GlobalPos targetPos -> i
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.Swim -> bfm -> net.minecraft.world.entity.ai.behavior.BehaviorSwim
    F:float chance -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> a
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,long) -> b
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
net.minecraft.world.entity.ai.behavior.TradeWithVillager -> bfn -> net.minecraft.world.entity.ai.behavior.BehaviorTradeVillager
    F:int INTERACT_DIST_SQR -> a
    F:float SPEED_MODIFIER -> d
    F:java.util.Set trades -> e
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> c
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> d
    M:java.util.Set figureOutWhatIAmWillingToTrade(net.minecraft.world.entity.npc.EntityVillager,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:void throwHalfStack(net.minecraft.world.entity.npc.EntityVillager,java.util.Set,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.TryFindLand -> bfo -> net.minecraft.world.entity.ai.behavior.TryFindLand
    F:int COOLDOWN_TICKS -> a
    F:int range -> d
    F:float speedModifier -> e
    F:long nextOkStartTime -> f
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> b
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.TryFindLandNearWater -> bfp -> net.minecraft.world.entity.ai.behavior.TryFindLandNearWater
    F:int range -> a
    F:float speedModifier -> d
    F:long nextOkStartTime -> e
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> b
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.TryFindWater -> bfq -> net.minecraft.world.entity.ai.behavior.TryFindWater
    F:int range -> a
    F:float speedModifier -> d
    F:long nextOkStartTime -> e
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> b
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.TryLaySpawnOnWaterNearLand -> bfr -> net.minecraft.world.entity.ai.behavior.TryLaySpawnOnWaterNearLand
    F:net.minecraft.world.level.block.Block spawnBlock -> a
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType memoryModule -> d
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.frog.Frog) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.frog.Frog,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.UpdateActivityFromSchedule -> bfs -> net.minecraft.world.entity.ai.behavior.BehaviorSchedule
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.UseBonemeal -> bft -> net.minecraft.world.entity.ai.behavior.BehaviorBonemeal
    F:int BONEMEALING_DURATION -> a
    F:long nextWorkCycleTime -> d
    F:long lastBonemealingSession -> e
    F:int timeWorkedSoFar -> f
    F:java.util.Optional cropPos -> g
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:java.util.Optional pickNextTarget(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> b
    M:boolean validPos(net.minecraft.core.BlockPosition,net.minecraft.server.level.WorldServer) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> b
    M:void setCurrentCropAsTarget(net.minecraft.world.entity.npc.EntityVillager) -> a
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> d
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.ValidateNearbyPoi -> bfu -> net.minecraft.world.entity.ai.behavior.BehaviorPositionValidate
    F:int MAX_DISTANCE -> a
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType memoryType -> d
    F:java.util.function.Predicate poiPredicate -> e
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
    M:boolean bedIsOccupied(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean poiDoesntExist(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.ai.behavior.VictoryStroll -> bfv -> net.minecraft.world.entity.ai.behavior.BehaviorVictory
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.behavior.VillageBoundRandomStroll -> bfw -> net.minecraft.world.entity.ai.behavior.BehaviorStrollRandom
    F:int MAX_XZ_DIST -> a
    F:int MAX_Y_DIST -> d
    F:float speedModifier -> e
    F:int maxXyDist -> f
    F:int maxYDist -> g
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature,long) -> a
    M:void setTargetedPos(net.minecraft.world.entity.EntityCreature,net.minecraft.core.SectionPosition) -> a
    M:void setRandomPos(net.minecraft.world.entity.EntityCreature) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.VillagerCalmDown -> bfx -> net.minecraft.world.entity.ai.behavior.BehaviorCooldown
    F:int SAFE_DISTANCE_FROM_DANGER -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:boolean isCloseToEntityThatHurtMe(net.minecraft.world.entity.npc.EntityVillager) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.VillagerGoalPackages -> bfy -> net.minecraft.world.entity.ai.behavior.Behaviors
    F:float STROLL_SPEED_MODIFIER -> a
    M:com.google.common.collect.ImmutableList getCorePackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> a
    M:com.google.common.collect.ImmutableList getWorkPackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> b
    M:com.google.common.collect.ImmutableList getPlayPackage(float) -> a
    M:com.google.common.collect.ImmutableList getRestPackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> c
    M:com.google.common.collect.ImmutableList getMeetPackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> d
    M:com.google.common.collect.ImmutableList getIdlePackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> e
    M:com.google.common.collect.ImmutableList getPanicPackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> f
    M:com.google.common.collect.ImmutableList getPreRaidPackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> g
    M:com.google.common.collect.ImmutableList getRaidPackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> h
    M:com.google.common.collect.ImmutableList getHidePackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> i
    M:com.mojang.datafixers.util.Pair getFullLookBehavior() -> a
    M:com.mojang.datafixers.util.Pair getMinimalLookBehavior() -> b
net.minecraft.world.entity.ai.behavior.VillagerMakeLove -> bfz -> net.minecraft.world.entity.ai.behavior.BehaviorMakeLove
    F:int INTERACT_DIST_SQR -> a
    F:float SPEED_MODIFIER -> d
    F:long birthTimestamp -> e
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> c
    M:void tryToGiveBirth(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> d
    M:boolean isBreedingPossible(net.minecraft.world.entity.npc.EntityVillager) -> a
    M:java.util.Optional takeVacantBed(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> b
    M:boolean canReach(net.minecraft.world.entity.npc.EntityVillager,net.minecraft.core.BlockPosition,net.minecraft.core.Holder) -> a
    M:java.util.Optional breed(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,net.minecraft.world.entity.npc.EntityVillager) -> b
    M:void giveBedToChild(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,net.minecraft.core.BlockPosition) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.VillagerPanicTrigger -> bga -> net.minecraft.world.entity.ai.behavior.BehaviorPanic
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> c
    M:boolean hasHostile(net.minecraft.world.entity.EntityLiving) -> a
    M:boolean isHurt(net.minecraft.world.entity.EntityLiving) -> b
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.WakeUp -> bgb -> net.minecraft.world.entity.ai.behavior.BehaviorWake
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.WorkAtComposter -> bgc -> net.minecraft.world.entity.ai.behavior.BehaviorWorkComposter
    F:java.util.List COMPOSTABLE_ITEMS -> a
    M:void useWorkstation(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:void compostItems(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,net.minecraft.core.GlobalPos,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void spawnComposterFillEffects(net.minecraft.server.level.WorldServer,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void makeBread(net.minecraft.world.entity.npc.EntityVillager) -> a
net.minecraft.world.entity.ai.behavior.WorkAtPoi -> bgd -> net.minecraft.world.entity.ai.behavior.BehaviorWork
    F:int CHECK_COOLDOWN -> a
    F:double DISTANCE -> d
    F:long lastCheck -> e
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> b
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:void useWorkstation(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> b
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.YieldJobSite -> bge -> net.minecraft.world.entity.ai.behavior.BehaviorLeaveJob
    F:float speedModifier -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:boolean nearbyWantsJobsite(net.minecraft.core.Holder,net.minecraft.world.entity.npc.EntityVillager,net.minecraft.core.BlockPosition) -> a
    M:void yieldJobSite(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,net.minecraft.world.entity.npc.EntityVillager,net.minecraft.core.BlockPosition,boolean) -> a
    M:boolean canReachPos(net.minecraft.world.entity.npc.EntityVillager,net.minecraft.core.BlockPosition,net.minecraft.world.entity.ai.village.poi.VillagePlaceType) -> a
    M:void eraseMemories(net.minecraft.world.entity.npc.EntityVillager) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.warden.Digging -> bgg -> net.minecraft.world.entity.ai.behavior.warden.Digging
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> c
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.warden.Emerging -> bgh -> net.minecraft.world.entity.ai.behavior.warden.Emerging
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> c
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.warden.ForceUnmount -> bgi -> net.minecraft.world.entity.ai.behavior.warden.ForceUnmount
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.warden.Roar -> bgj -> net.minecraft.world.entity.ai.behavior.warden.Roar
    F:int TICKS_BEFORE_PLAYING_ROAR_SOUND -> a
    F:int ROAR_ANGER_INCREASE -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> c
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> d
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.warden.SetRoarTarget -> bgk -> net.minecraft.world.entity.ai.behavior.warden.SetRoarTarget
    F:java.util.function.Function targetFinderFunction -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.warden.SetWardenLookTarget -> bgl -> net.minecraft.world.entity.ai.behavior.warden.SetWardenLookTarget
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.warden.Sniffing -> bgm -> net.minecraft.world.entity.ai.behavior.warden.Sniffing
    F:double ANGER_FROM_SNIFFING_MAX_DISTANCE_XZ -> a
    F:double ANGER_FROM_SNIFFING_MAX_DISTANCE_Y -> d
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> c
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.warden.SonicBoom -> bgn -> net.minecraft.world.entity.ai.behavior.warden.SonicBoom
    F:int DISTANCE_XZ -> d
    F:int DISTANCE_Y -> e
    F:double KNOCKBACK_VERTICAL -> f
    F:double KNOCKBACK_HORIZONTAL -> g
    F:int COOLDOWN -> a
    F:int TICKS_BEFORE_PLAYING_SOUND -> h
    F:int DURATION -> i
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> c
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> d
    M:void setCooldown(net.minecraft.world.entity.EntityLiving,int) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.behavior.warden.TryToSniff -> bgo -> net.minecraft.world.entity.ai.behavior.warden.TryToSniff
    F:net.minecraft.util.valueproviders.IntProvider SNIFF_COOLDOWN -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.ai.control.BodyRotationControl -> bgq -> net.minecraft.world.entity.ai.control.EntityAIBodyControl
    F:net.minecraft.world.entity.EntityInsentient mob -> a
    F:int HEAD_STABLE_ANGLE -> b
    F:int DELAY_UNTIL_STARTING_TO_FACE_FORWARD -> c
    F:int HOW_LONG_IT_TAKES_TO_FACE_FORWARD -> d
    F:int headStableTime -> e
    F:float lastStableYHeadRot -> f
    M:void clientTick() -> a
    M:void rotateBodyIfNecessary() -> b
    M:void rotateHeadIfNecessary() -> c
    M:void rotateHeadTowardsFront() -> d
    M:boolean notCarryingMobPassengers() -> e
    M:boolean isMoving() -> f
net.minecraft.world.entity.ai.control.Control -> bgr -> net.minecraft.world.entity.ai.control.Control
net.minecraft.world.entity.ai.control.FlyingMoveControl -> bgs -> net.minecraft.world.entity.ai.control.ControllerMoveFlying
    F:int maxTurn -> l
    F:boolean hoversInPlace -> m
    M:void tick() -> a
net.minecraft.world.entity.ai.control.JumpControl -> bgt -> net.minecraft.world.entity.ai.control.ControllerJump
    F:net.minecraft.world.entity.EntityInsentient mob -> b
    F:boolean jump -> a
    M:void jump() -> a
    M:void tick() -> b
net.minecraft.world.entity.ai.control.LookControl -> bgu -> net.minecraft.world.entity.ai.control.ControllerLook
    F:net.minecraft.world.entity.EntityInsentient mob -> a
    F:float yMaxRotSpeed -> b
    F:float xMaxRotAngle -> c
    F:int lookAtCooldown -> d
    F:double wantedX -> e
    F:double wantedY -> f
    F:double wantedZ -> g
    M:void setLookAt(net.minecraft.world.phys.Vec3D) -> a
    M:void setLookAt(net.minecraft.world.entity.Entity) -> a
    M:void setLookAt(net.minecraft.world.entity.Entity,float,float) -> a
    M:void setLookAt(double,double,double) -> a
    M:void setLookAt(double,double,double,float,float) -> a
    M:void tick() -> a
    M:void clampHeadRotationToBody() -> b
    M:boolean resetXRotOnTick() -> c
    M:boolean isLookingAtTarget() -> d
    M:double getWantedX() -> e
    M:double getWantedY() -> f
    M:double getWantedZ() -> g
    M:java.util.Optional getXRotD() -> h
    M:java.util.Optional getYRotD() -> i
    M:float rotateTowards(float,float,float) -> a
    M:double getWantedY(net.minecraft.world.entity.Entity) -> b
net.minecraft.world.entity.ai.control.MoveControl -> bgv -> net.minecraft.world.entity.ai.control.ControllerMove
    F:float MIN_SPEED -> a
    F:float MIN_SPEED_SQR -> b
    F:int MAX_TURN -> c
    F:net.minecraft.world.entity.EntityInsentient mob -> d
    F:double wantedX -> e
    F:double wantedY -> f
    F:double wantedZ -> g
    F:double speedModifier -> h
    F:float strafeForwards -> i
    F:float strafeRight -> j
    F:net.minecraft.world.entity.ai.control.ControllerMove$Operation operation -> k
    M:boolean hasWanted() -> b
    M:double getSpeedModifier() -> c
    M:void setWantedPosition(double,double,double,double) -> a
    M:void strafe(float,float) -> a
    M:void tick() -> a
    M:boolean isWalkable(float,float) -> b
    M:float rotlerp(float,float,float) -> a
    M:double getWantedX() -> d
    M:double getWantedY() -> e
    M:double getWantedZ() -> f
net.minecraft.world.entity.ai.control.MoveControl$Operation -> bgv$a -> net.minecraft.world.entity.ai.control.ControllerMove$Operation
    F:net.minecraft.world.entity.ai.control.ControllerMove$Operation WAIT -> a
    F:net.minecraft.world.entity.ai.control.ControllerMove$Operation MOVE_TO -> b
    F:net.minecraft.world.entity.ai.control.ControllerMove$Operation STRAFE -> c
    F:net.minecraft.world.entity.ai.control.ControllerMove$Operation JUMPING -> d
net.minecraft.world.entity.ai.control.SmoothSwimmingLookControl -> bgw -> net.minecraft.world.entity.ai.control.SmoothSwimmingLookControl
    F:int maxYRotFromCenter -> h
    F:int HEAD_TILT_X -> i
    F:int HEAD_TILT_Y -> j
    M:void tick() -> a
net.minecraft.world.entity.ai.control.SmoothSwimmingMoveControl -> bgx -> net.minecraft.world.entity.ai.control.SmoothSwimmingMoveControl
    F:int maxTurnX -> l
    F:int maxTurnY -> m
    F:float inWaterSpeedModifier -> n
    F:float outsideWaterSpeedModifier -> o
    F:boolean applyGravity -> p
    M:void tick() -> a
net.minecraft.world.entity.ai.goal.AvoidEntityGoal -> bgz -> net.minecraft.world.entity.ai.goal.PathfinderGoalAvoidTarget
    F:net.minecraft.world.entity.EntityCreature mob -> a
    F:double walkSpeedModifier -> i
    F:double sprintSpeedModifier -> j
    F:net.minecraft.world.entity.EntityLiving toAvoid -> b
    F:float maxDist -> c
    F:net.minecraft.world.level.pathfinder.PathEntity path -> d
    F:net.minecraft.world.entity.ai.navigation.NavigationAbstract pathNav -> e
    F:java.lang.Class avoidClass -> f
    F:java.util.function.Predicate avoidPredicate -> g
    F:java.util.function.Predicate predicateOnAvoidEntity -> h
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition avoidEntityTargeting -> k
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.BegGoal -> bha -> net.minecraft.world.entity.ai.goal.PathfinderGoalBeg
    F:net.minecraft.world.entity.animal.EntityWolf wolf -> a
    F:net.minecraft.world.entity.player.EntityHuman player -> b
    F:net.minecraft.world.level.World level -> c
    F:float lookDistance -> d
    F:int lookTime -> e
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition begTargeting -> f
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
    M:boolean playerHoldingInteresting(net.minecraft.world.entity.player.EntityHuman) -> a
net.minecraft.world.entity.ai.goal.BoatGoals -> bhb -> net.minecraft.world.entity.ai.goal.PathfinderGoalBoat
    F:net.minecraft.world.entity.ai.goal.PathfinderGoalBoat GO_TO_BOAT -> a
    F:net.minecraft.world.entity.ai.goal.PathfinderGoalBoat GO_IN_BOAT_DIRECTION -> b
net.minecraft.world.entity.ai.goal.BreakDoorGoal -> bhc -> net.minecraft.world.entity.ai.goal.PathfinderGoalBreakDoor
    F:int DEFAULT_DOOR_BREAK_TIME -> g
    F:java.util.function.Predicate validDifficulties -> h
    F:int breakTime -> a
    F:int lastBreakProgress -> b
    F:int doorBreakTime -> c
    M:int getDoorBreakTime() -> f
    M:boolean canUse() -> a
    M:void start() -> c
    M:boolean canContinueToUse() -> b
    M:void stop() -> d
    M:void tick() -> e
    M:boolean isValidDifficulty(net.minecraft.world.EnumDifficulty) -> a
net.minecraft.world.entity.ai.goal.BreathAirGoal -> bhd -> net.minecraft.world.entity.ai.goal.PathfinderGoalBreath
    F:net.minecraft.world.entity.EntityCreature mob -> a
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void findAirPosition() -> h
    M:void tick() -> e
    M:boolean givesAir(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.ai.goal.BreedGoal -> bhe -> net.minecraft.world.entity.ai.goal.PathfinderGoalBreed
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition PARTNER_TARGETING -> d
    F:net.minecraft.world.entity.animal.EntityAnimal animal -> a
    F:java.lang.Class partnerClass -> e
    F:net.minecraft.world.level.World level -> b
    F:net.minecraft.world.entity.animal.EntityAnimal partner -> c
    F:int loveTime -> f
    F:double speedModifier -> g
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void stop() -> d
    M:void tick() -> e
    M:net.minecraft.world.entity.animal.EntityAnimal getFreePartner() -> h
    M:void breed() -> g
net.minecraft.world.entity.ai.goal.CatLieOnBedGoal -> bhf -> net.minecraft.world.entity.ai.goal.PathfinderGoalCatSitOnBed
    F:net.minecraft.world.entity.animal.EntityCat cat -> g
    M:boolean canUse() -> a
    M:void start() -> c
    M:int nextStartTick(net.minecraft.world.entity.EntityCreature) -> a
    M:void stop() -> d
    M:void tick() -> e
    M:boolean isValidTarget(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.ai.goal.CatSitOnBlockGoal -> bhg -> net.minecraft.world.entity.ai.goal.PathfinderGoalJumpOnBlock
    F:net.minecraft.world.entity.animal.EntityCat cat -> g
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
    M:boolean isValidTarget(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.ai.goal.ClimbOnTopOfPowderSnowGoal -> bhh -> net.minecraft.world.entity.ai.goal.ClimbOnTopOfPowderSnowGoal
    F:net.minecraft.world.entity.EntityInsentient mob -> a
    F:net.minecraft.world.level.World level -> b
    M:boolean canUse() -> a
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.DolphinJumpGoal -> bhi -> net.minecraft.world.entity.ai.goal.PathfinderGoalWaterJump
    F:net.minecraft.world.entity.animal.EntityDolphin dolphin -> b
    F:int interval -> c
    F:boolean breached -> d
    M:boolean canUse() -> a
    M:boolean waterIsClear(net.minecraft.core.BlockPosition,int,int,int) -> a
    M:boolean surfaceIsClear(net.minecraft.core.BlockPosition,int,int,int) -> b
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.DoorInteractGoal -> bhj -> net.minecraft.world.entity.ai.goal.PathfinderGoalDoorInteract
    F:net.minecraft.world.entity.EntityInsentient mob -> d
    F:net.minecraft.core.BlockPosition doorPos -> e
    F:boolean hasDoor -> f
    F:boolean passed -> a
    F:float doorOpenDirX -> b
    F:float doorOpenDirZ -> c
    M:boolean isOpen() -> h
    M:void setOpen(boolean) -> a
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.EatBlockGoal -> bhk -> net.minecraft.world.entity.ai.goal.PathfinderGoalEatTile
    F:int EAT_ANIMATION_TICKS -> a
    F:java.util.function.Predicate IS_TALL_GRASS -> b
    F:net.minecraft.world.entity.EntityInsentient mob -> c
    F:net.minecraft.world.level.World level -> d
    F:int eatAnimationTick -> e
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
    M:boolean canContinueToUse() -> b
    M:int getEatAnimationTick() -> h
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.FleeSunGoal -> bhl -> net.minecraft.world.entity.ai.goal.PathfinderGoalFleeSun
    F:net.minecraft.world.entity.EntityCreature mob -> a
    F:double wantedX -> b
    F:double wantedY -> c
    F:double wantedZ -> d
    F:double speedModifier -> e
    F:net.minecraft.world.level.World level -> f
    M:boolean canUse() -> a
    M:boolean setWantedPos() -> h
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:net.minecraft.world.phys.Vec3D getHidePos() -> i
net.minecraft.world.entity.ai.goal.FloatGoal -> bhm -> net.minecraft.world.entity.ai.goal.PathfinderGoalFloat
    F:net.minecraft.world.entity.EntityInsentient mob -> a
    M:boolean canUse() -> a
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.FollowBoatGoal -> bhn -> net.minecraft.world.entity.ai.goal.PathfinderGoalFollowBoat
    F:int timeToRecalcPath -> a
    F:net.minecraft.world.entity.EntityCreature mob -> b
    F:net.minecraft.world.entity.player.EntityHuman following -> c
    F:net.minecraft.world.entity.ai.goal.PathfinderGoalBoat currentGoal -> d
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.FollowFlockLeaderGoal -> bho -> net.minecraft.world.entity.ai.goal.PathfinderGoalFishSchool
    F:int INTERVAL_TICKS -> a
    F:net.minecraft.world.entity.animal.EntityFishSchool mob -> b
    F:int timeToRecalcPath -> c
    F:int nextStartTick -> d
    M:int nextStartTick(net.minecraft.world.entity.animal.EntityFishSchool) -> a
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.FollowMobGoal -> bhp -> net.minecraft.world.entity.ai.goal.PathfinderGoalFollowEntity
    F:net.minecraft.world.entity.EntityInsentient mob -> a
    F:java.util.function.Predicate followPredicate -> b
    F:net.minecraft.world.entity.EntityInsentient followingMob -> c
    F:double speedModifier -> d
    F:net.minecraft.world.entity.ai.navigation.NavigationAbstract navigation -> e
    F:int timeToRecalcPath -> f
    F:float stopDistance -> g
    F:float oldWaterCost -> h
    F:float areaSize -> i
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.FollowOwnerGoal -> bhq -> net.minecraft.world.entity.ai.goal.PathfinderGoalFollowOwner
    F:int TELEPORT_WHEN_DISTANCE_IS -> a
    F:int MIN_HORIZONTAL_DISTANCE_FROM_PLAYER_WHEN_TELEPORTING -> b
    F:int MAX_HORIZONTAL_DISTANCE_FROM_PLAYER_WHEN_TELEPORTING -> c
    F:int MAX_VERTICAL_DISTANCE_FROM_PLAYER_WHEN_TELEPORTING -> d
    F:net.minecraft.world.entity.EntityTameableAnimal tamable -> e
    F:net.minecraft.world.entity.EntityLiving owner -> f
    F:net.minecraft.world.level.IWorldReader level -> g
    F:double speedModifier -> h
    F:net.minecraft.world.entity.ai.navigation.NavigationAbstract navigation -> i
    F:int timeToRecalcPath -> j
    F:float stopDistance -> k
    F:float startDistance -> l
    F:float oldWaterCost -> m
    F:boolean canFly -> n
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
    M:void teleportToOwner() -> h
    M:boolean maybeTeleportTo(int,int,int) -> a
    M:boolean canTeleportTo(net.minecraft.core.BlockPosition) -> a
    M:int randomIntInclusive(int,int) -> a
net.minecraft.world.entity.ai.goal.FollowParentGoal -> bhr -> net.minecraft.world.entity.ai.goal.PathfinderGoalFollowParent
    F:int HORIZONTAL_SCAN_RANGE -> a
    F:int VERTICAL_SCAN_RANGE -> b
    F:int DONT_FOLLOW_IF_CLOSER_THAN -> c
    F:net.minecraft.world.entity.animal.EntityAnimal animal -> d
    F:net.minecraft.world.entity.animal.EntityAnimal parent -> e
    F:double speedModifier -> f
    F:int timeToRecalcPath -> g
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.Goal -> bhs -> net.minecraft.world.entity.ai.goal.PathfinderGoal
    F:java.util.EnumSet flags -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
    M:void setFlags(java.util.EnumSet) -> a
    M:java.util.EnumSet getFlags() -> j
    M:int adjustedTickDelay(int) -> a
    M:int reducedTickDelay(int) -> b
net.minecraft.world.entity.ai.goal.Goal$Flag -> bhs$a -> net.minecraft.world.entity.ai.goal.PathfinderGoal$Type
    F:net.minecraft.world.entity.ai.goal.PathfinderGoal$Type MOVE -> a
    F:net.minecraft.world.entity.ai.goal.PathfinderGoal$Type LOOK -> b
    F:net.minecraft.world.entity.ai.goal.PathfinderGoal$Type JUMP -> c
    F:net.minecraft.world.entity.ai.goal.PathfinderGoal$Type TARGET -> d
net.minecraft.world.entity.ai.goal.GoalSelector -> bht -> net.minecraft.world.entity.ai.goal.PathfinderGoalSelector
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.world.entity.ai.goal.PathfinderGoalWrapped NO_GOAL -> b
    F:java.util.Map lockedFlags -> c
    F:java.util.Set availableGoals -> d
    F:java.util.function.Supplier profiler -> e
    F:java.util.EnumSet disabledFlags -> f
    F:int tickCount -> g
    F:int newGoalRate -> h
    M:void addGoal(int,net.minecraft.world.entity.ai.goal.PathfinderGoal) -> a
    M:void removeAllGoals() -> a
    M:void removeGoal(net.minecraft.world.entity.ai.goal.PathfinderGoal) -> a
    M:boolean goalContainsAnyFlags(net.minecraft.world.entity.ai.goal.PathfinderGoalWrapped,java.util.EnumSet) -> a
    M:boolean goalCanBeReplacedForAllFlags(net.minecraft.world.entity.ai.goal.PathfinderGoalWrapped,java.util.Map) -> a
    M:void tick() -> b
    M:void tickRunningGoals(boolean) -> a
    M:java.util.Set getAvailableGoals() -> c
    M:java.util.stream.Stream getRunningGoals() -> d
    M:void setNewGoalRate(int) -> a
    M:void disableControlFlag(net.minecraft.world.entity.ai.goal.PathfinderGoal$Type) -> a
    M:void enableControlFlag(net.minecraft.world.entity.ai.goal.PathfinderGoal$Type) -> b
    M:void setControlFlag(net.minecraft.world.entity.ai.goal.PathfinderGoal$Type,boolean) -> a
    M:boolean canUse() -> a
    M:boolean isRunning() -> h
net.minecraft.world.entity.ai.goal.GolemRandomStrollInVillageGoal -> bhu -> net.minecraft.world.entity.ai.goal.PathfinderGoalStrollVillageGolem
    F:int POI_SECTION_SCAN_RADIUS -> i
    F:int VILLAGER_SCAN_RADIUS -> j
    F:int RANDOM_POS_XY_DISTANCE -> k
    F:int RANDOM_POS_Y_DISTANCE -> l
    M:net.minecraft.world.phys.Vec3D getPosition() -> h
    M:net.minecraft.world.phys.Vec3D getPositionTowardsAnywhere() -> k
    M:net.minecraft.world.phys.Vec3D getPositionTowardsVillagerWhoWantsGolem() -> l
    M:net.minecraft.world.phys.Vec3D getPositionTowardsPoi() -> m
    M:net.minecraft.core.SectionPosition getRandomVillageSection() -> n
    M:net.minecraft.core.BlockPosition getRandomPoiWithinSection(net.minecraft.core.SectionPosition) -> a
    M:boolean doesVillagerWantGolem(net.minecraft.world.entity.npc.EntityVillager) -> a
net.minecraft.world.entity.ai.goal.InteractGoal -> bhv -> net.minecraft.world.entity.ai.goal.PathfinderGoalInteract
net.minecraft.world.entity.ai.goal.JumpGoal -> bhw -> net.minecraft.world.entity.ai.goal.PathfinderGoalWaterJumpAbstract
net.minecraft.world.entity.ai.goal.LandOnOwnersShoulderGoal -> bhx -> net.minecraft.world.entity.ai.goal.PathfinderGoalPerch
    F:net.minecraft.world.entity.animal.EntityPerchable entity -> a
    F:net.minecraft.server.level.EntityPlayer owner -> b
    F:boolean isSittingOnShoulder -> c
    M:boolean canUse() -> a
    M:void start() -> c
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.LeapAtTargetGoal -> bhy -> net.minecraft.world.entity.ai.goal.PathfinderGoalLeapAtTarget
    F:net.minecraft.world.entity.EntityInsentient mob -> a
    F:net.minecraft.world.entity.EntityLiving target -> b
    F:float yd -> c
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
net.minecraft.world.entity.ai.goal.LlamaFollowCaravanGoal -> bhz -> net.minecraft.world.entity.ai.goal.PathfinderGoalLlamaFollow
    F:net.minecraft.world.entity.animal.horse.EntityLlama llama -> a
    F:double speedModifier -> b
    F:int CARAVAN_LIMIT -> c
    F:int distCheckCounter -> d
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void stop() -> d
    M:void tick() -> e
    M:boolean firstIsLeashed(net.minecraft.world.entity.animal.horse.EntityLlama,int) -> a
net.minecraft.world.entity.ai.goal.LookAtPlayerGoal -> bia -> net.minecraft.world.entity.ai.goal.PathfinderGoalLookAtPlayer
    F:float DEFAULT_PROBABILITY -> a
    F:net.minecraft.world.entity.EntityInsentient mob -> b
    F:net.minecraft.world.entity.Entity lookAt -> c
    F:float lookDistance -> d
    F:int lookTime -> h
    F:float probability -> e
    F:boolean onlyHorizontal -> i
    F:java.lang.Class lookAtType -> f
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition lookAtContext -> g
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.LookAtTradingPlayerGoal -> bib -> net.minecraft.world.entity.ai.goal.PathfinderGoalLookAtTradingPlayer
    F:net.minecraft.world.entity.npc.EntityVillagerAbstract villager -> h
    M:boolean canUse() -> a
net.minecraft.world.entity.ai.goal.MeleeAttackGoal -> bic -> net.minecraft.world.entity.ai.goal.PathfinderGoalMeleeAttack
    F:net.minecraft.world.entity.EntityCreature mob -> a
    F:double speedModifier -> b
    F:boolean followingTargetEvenIfNotSeen -> c
    F:net.minecraft.world.level.pathfinder.PathEntity path -> d
    F:double pathedTargetX -> e
    F:double pathedTargetY -> f
    F:double pathedTargetZ -> g
    F:int ticksUntilNextPathRecalculation -> h
    F:int ticksUntilNextAttack -> i
    F:int attackInterval -> j
    F:long lastCanUseCheck -> k
    F:long COOLDOWN_BETWEEN_CAN_USE_CHECKS -> l
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
    M:void checkAndPerformAttack(net.minecraft.world.entity.EntityLiving,double) -> a
    M:void resetAttackCooldown() -> h
    M:boolean isTimeToAttack() -> i
    M:int getTicksUntilNextAttack() -> k
    M:int getAttackInterval() -> l
    M:double getAttackReachSqr(net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.goal.MoveBackToVillageGoal -> bid -> net.minecraft.world.entity.ai.goal.PathfinderGoalStrollVillage
    F:int MAX_XZ_DIST -> i
    F:int MAX_Y_DIST -> j
    M:boolean canUse() -> a
    M:net.minecraft.world.phys.Vec3D getPosition() -> h
net.minecraft.world.entity.ai.goal.MoveThroughVillageGoal -> bie -> net.minecraft.world.entity.ai.goal.PathfinderGoalMoveThroughVillage
    F:net.minecraft.world.entity.EntityCreature mob -> a
    F:double speedModifier -> b
    F:net.minecraft.world.level.pathfinder.PathEntity path -> c
    F:net.minecraft.core.BlockPosition poiPos -> d
    F:boolean onlyAtNight -> e
    F:java.util.List visited -> f
    F:int distanceToPoi -> g
    F:java.util.function.BooleanSupplier canDealWithDoors -> h
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:boolean hasNotVisited(net.minecraft.core.BlockPosition) -> a
    M:void updateVisited() -> h
net.minecraft.world.entity.ai.goal.MoveToBlockGoal -> bif -> net.minecraft.world.entity.ai.goal.PathfinderGoalGotoTarget
    F:int GIVE_UP_TICKS -> g
    F:int STAY_TICKS -> h
    F:int INTERVAL_TICKS -> i
    F:net.minecraft.world.entity.EntityCreature mob -> a
    F:double speedModifier -> b
    F:int nextStartTick -> c
    F:int tryTicks -> d
    F:int maxStayTicks -> j
    F:net.minecraft.core.BlockPosition blockPos -> e
    F:boolean reachedTarget -> k
    F:int searchRange -> l
    F:int verticalSearchRange -> m
    F:int verticalSearchStart -> f
    M:boolean canUse() -> a
    M:int nextStartTick(net.minecraft.world.entity.EntityCreature) -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void moveMobToBlock() -> h
    M:double acceptedDistance() -> i
    M:net.minecraft.core.BlockPosition getMoveToTarget() -> k
    M:void tick() -> e
    M:boolean shouldRecalculatePath() -> l
    M:boolean isReachedTarget() -> m
    M:boolean findNearestBlock() -> n
net.minecraft.world.entity.ai.goal.MoveTowardsRestrictionGoal -> big -> net.minecraft.world.entity.ai.goal.PathfinderGoalMoveTowardsRestriction
    F:net.minecraft.world.entity.EntityCreature mob -> a
    F:double wantedX -> b
    F:double wantedY -> c
    F:double wantedZ -> d
    F:double speedModifier -> e
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
net.minecraft.world.entity.ai.goal.MoveTowardsTargetGoal -> bih -> net.minecraft.world.entity.ai.goal.PathfinderGoalMoveTowardsTarget
    F:net.minecraft.world.entity.EntityCreature mob -> a
    F:net.minecraft.world.entity.EntityLiving target -> b
    F:double wantedX -> c
    F:double wantedY -> d
    F:double wantedZ -> e
    F:double speedModifier -> f
    F:float within -> g
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void stop() -> d
    M:void start() -> c
net.minecraft.world.entity.ai.goal.OcelotAttackGoal -> bii -> net.minecraft.world.entity.ai.goal.PathfinderGoalOcelotAttack
    F:net.minecraft.world.entity.EntityInsentient mob -> a
    F:net.minecraft.world.entity.EntityLiving target -> b
    F:int attackTime -> c
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.OfferFlowerGoal -> bij -> net.minecraft.world.entity.ai.goal.PathfinderGoalOfferFlower
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition OFFER_TARGER_CONTEXT -> b
    F:int OFFER_TICKS -> a
    F:net.minecraft.world.entity.animal.EntityIronGolem golem -> c
    F:net.minecraft.world.entity.npc.EntityVillager villager -> d
    F:int tick -> e
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.OpenDoorGoal -> bik -> net.minecraft.world.entity.ai.goal.PathfinderGoalDoorOpen
    F:boolean closeDoor -> a
    F:int forgetTime -> b
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.PanicGoal -> bil -> net.minecraft.world.entity.ai.goal.PathfinderGoalPanic
    F:int WATER_CHECK_DISTANCE_VERTICAL -> a
    F:net.minecraft.world.entity.EntityCreature mob -> b
    F:double speedModifier -> c
    F:double posX -> d
    F:double posY -> e
    F:double posZ -> f
    F:boolean isRunning -> g
    M:boolean canUse() -> a
    M:boolean shouldPanic() -> h
    M:boolean findRandomPosition() -> i
    M:boolean isRunning() -> k
    M:void start() -> c
    M:void stop() -> d
    M:boolean canContinueToUse() -> b
    M:net.minecraft.core.BlockPosition lookForWater(net.minecraft.world.level.IBlockAccess,net.minecraft.world.entity.Entity,int) -> a
net.minecraft.world.entity.ai.goal.PathfindToRaidGoal -> bim -> net.minecraft.world.entity.ai.goal.PathfinderGoalRaid
    F:int RECRUITMENT_SEARCH_TICK_DELAY -> a
    F:float SPEED_MODIFIER -> b
    F:net.minecraft.world.entity.raid.EntityRaider mob -> c
    F:int recruitmentTick -> d
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void tick() -> e
    M:void recruitNearby(net.minecraft.world.entity.raid.Raid) -> a
net.minecraft.world.entity.ai.goal.RandomLookAroundGoal -> bin -> net.minecraft.world.entity.ai.goal.PathfinderGoalRandomLookaround
    F:net.minecraft.world.entity.EntityInsentient mob -> a
    F:double relX -> b
    F:double relZ -> c
    F:int lookTime -> d
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.RandomStrollGoal -> bio -> net.minecraft.world.entity.ai.goal.PathfinderGoalRandomStroll
    F:int DEFAULT_INTERVAL -> a
    F:net.minecraft.world.entity.EntityCreature mob -> b
    F:double wantedX -> c
    F:double wantedY -> d
    F:double wantedZ -> e
    F:double speedModifier -> f
    F:int interval -> g
    F:boolean forceTrigger -> h
    F:boolean checkNoActionTime -> i
    M:boolean canUse() -> a
    M:net.minecraft.world.phys.Vec3D getPosition() -> h
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void trigger() -> i
    M:void setInterval(int) -> c
net.minecraft.world.entity.ai.goal.RandomSwimmingGoal -> bip -> net.minecraft.world.entity.ai.goal.PathfinderGoalRandomSwim
    M:net.minecraft.world.phys.Vec3D getPosition() -> h
net.minecraft.world.entity.ai.goal.RangedAttackGoal -> biq -> net.minecraft.world.entity.ai.goal.PathfinderGoalArrowAttack
    F:net.minecraft.world.entity.EntityInsentient mob -> a
    F:net.minecraft.world.entity.monster.IRangedEntity rangedAttackMob -> b
    F:net.minecraft.world.entity.EntityLiving target -> c
    F:int attackTime -> d
    F:double speedModifier -> e
    F:int seeTime -> f
    F:int attackIntervalMin -> g
    F:int attackIntervalMax -> h
    F:float attackRadius -> i
    F:float attackRadiusSqr -> j
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.RangedBowAttackGoal -> bir -> net.minecraft.world.entity.ai.goal.PathfinderGoalBowShoot
    F:net.minecraft.world.entity.monster.EntityMonster mob -> a
    F:double speedModifier -> b
    F:int attackIntervalMin -> c
    F:float attackRadiusSqr -> d
    F:int attackTime -> e
    F:int seeTime -> f
    F:boolean strafingClockwise -> g
    F:boolean strafingBackwards -> h
    F:int strafingTime -> i
    M:void setMinAttackInterval(int) -> c
    M:boolean canUse() -> a
    M:boolean isHoldingBow() -> h
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.RangedCrossbowAttackGoal -> bis -> net.minecraft.world.entity.ai.goal.PathfinderGoalCrossbowAttack
    F:net.minecraft.util.valueproviders.UniformInt PATHFINDING_DELAY_RANGE -> a
    F:net.minecraft.world.entity.monster.EntityMonster mob -> b
    F:net.minecraft.world.entity.ai.goal.PathfinderGoalCrossbowAttack$State crossbowState -> c
    F:double speedModifier -> d
    F:float attackRadiusSqr -> e
    F:int seeTime -> f
    F:int attackDelay -> g
    F:int updatePathDelay -> h
    M:boolean canUse() -> a
    M:boolean isHoldingCrossbow() -> h
    M:boolean canContinueToUse() -> b
    M:boolean isValidTarget() -> i
    M:void stop() -> d
    M:void tick() -> e
    M:boolean canRun() -> k
net.minecraft.world.entity.ai.goal.RangedCrossbowAttackGoal$CrossbowState -> bis$a -> net.minecraft.world.entity.ai.goal.PathfinderGoalCrossbowAttack$State
    F:net.minecraft.world.entity.ai.goal.PathfinderGoalCrossbowAttack$State UNCHARGED -> a
    F:net.minecraft.world.entity.ai.goal.PathfinderGoalCrossbowAttack$State CHARGING -> b
    F:net.minecraft.world.entity.ai.goal.PathfinderGoalCrossbowAttack$State CHARGED -> c
    F:net.minecraft.world.entity.ai.goal.PathfinderGoalCrossbowAttack$State READY_TO_ATTACK -> d
net.minecraft.world.entity.ai.goal.RemoveBlockGoal -> bit -> net.minecraft.world.entity.ai.goal.PathfinderGoalRemoveBlock
    F:net.minecraft.world.level.block.Block blockToRemove -> g
    F:net.minecraft.world.entity.EntityInsentient removerMob -> h
    F:int ticksSinceReachedGoal -> i
    F:int WAIT_AFTER_BLOCK_FOUND -> j
    M:boolean canUse() -> a
    M:boolean tryFindBlock() -> o
    M:void stop() -> d
    M:void start() -> c
    M:void playDestroyProgressSound(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:void playBreakSound(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void tick() -> e
    M:net.minecraft.core.BlockPosition getPosWithBlock(net.minecraft.core.BlockPosition,net.minecraft.world.level.IBlockAccess) -> a
    M:boolean isValidTarget(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.ai.goal.RestrictSunGoal -> biu -> net.minecraft.world.entity.ai.goal.PathfinderGoalRestrictSun
    F:net.minecraft.world.entity.EntityCreature mob -> a
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
net.minecraft.world.entity.ai.goal.RunAroundLikeCrazyGoal -> biv -> net.minecraft.world.entity.ai.goal.PathfinderGoalTame
    F:net.minecraft.world.entity.animal.horse.EntityHorseAbstract horse -> a
    F:double speedModifier -> b
    F:double posX -> c
    F:double posY -> d
    F:double posZ -> e
    M:boolean canUse() -> a
    M:void start() -> c
    M:boolean canContinueToUse() -> b
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.SitWhenOrderedToGoal -> biw -> net.minecraft.world.entity.ai.goal.PathfinderGoalSit
    F:net.minecraft.world.entity.EntityTameableAnimal mob -> a
    M:boolean canContinueToUse() -> b
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
net.minecraft.world.entity.ai.goal.StrollThroughVillageGoal -> bix -> net.minecraft.world.entity.ai.goal.PathfinderGoalNearestVillage
    F:int DISTANCE_THRESHOLD -> a
    F:net.minecraft.world.entity.EntityCreature mob -> b
    F:int interval -> c
    F:net.minecraft.core.BlockPosition wantedPos -> d
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void tick() -> e
    M:void moveRandomly() -> h
net.minecraft.world.entity.ai.goal.SwellGoal -> biy -> net.minecraft.world.entity.ai.goal.PathfinderGoalSwell
    F:net.minecraft.world.entity.monster.EntityCreeper creeper -> a
    F:net.minecraft.world.entity.EntityLiving target -> b
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.TemptGoal -> biz -> net.minecraft.world.entity.ai.goal.PathfinderGoalTempt
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition TEMP_TARGETING -> c
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition targetingConditions -> d
    F:net.minecraft.world.entity.EntityCreature mob -> a
    F:double speedModifier -> e
    F:double px -> f
    F:double py -> g
    F:double pz -> h
    F:double pRotX -> i
    F:double pRotY -> j
    F:net.minecraft.world.entity.player.EntityHuman player -> b
    F:int calmDown -> k
    F:boolean isRunning -> l
    F:net.minecraft.world.item.crafting.RecipeItemStack items -> m
    F:boolean canScare -> n
    M:boolean canUse() -> a
    M:boolean shouldFollow(net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canContinueToUse() -> b
    M:boolean canScare() -> h
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
    M:boolean isRunning() -> i
net.minecraft.world.entity.ai.goal.TradeWithPlayerGoal -> bja -> net.minecraft.world.entity.ai.goal.PathfinderGoalTradeWithPlayer
    F:net.minecraft.world.entity.npc.EntityVillagerAbstract mob -> a
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
net.minecraft.world.entity.ai.goal.TryFindWaterGoal -> bjb -> net.minecraft.world.entity.ai.goal.PathfinderGoalWater
    F:net.minecraft.world.entity.EntityCreature mob -> a
    M:boolean canUse() -> a
    M:void start() -> c
net.minecraft.world.entity.ai.goal.UseItemGoal -> bjc -> net.minecraft.world.entity.ai.goal.PathfinderGoalUseItem
    F:net.minecraft.world.entity.EntityInsentient mob -> a
    F:net.minecraft.world.item.ItemStack item -> b
    F:java.util.function.Predicate canUseSelector -> c
    F:net.minecraft.sounds.SoundEffect finishUsingSound -> d
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
net.minecraft.world.entity.ai.goal.WaterAvoidingRandomFlyingGoal -> bjd -> net.minecraft.world.entity.ai.goal.PathfinderGoalRandomFly
    M:net.minecraft.world.phys.Vec3D getPosition() -> h
net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal -> bje -> net.minecraft.world.entity.ai.goal.PathfinderGoalRandomStrollLand
    F:float PROBABILITY -> i
    F:float probability -> j
    M:net.minecraft.world.phys.Vec3D getPosition() -> h
net.minecraft.world.entity.ai.goal.WrappedGoal -> bjf -> net.minecraft.world.entity.ai.goal.PathfinderGoalWrapped
    F:net.minecraft.world.entity.ai.goal.PathfinderGoal goal -> a
    F:int priority -> b
    F:boolean isRunning -> c
    M:boolean canBeReplacedBy(net.minecraft.world.entity.ai.goal.PathfinderGoalWrapped) -> a
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:int adjustedTickDelay(int) -> a
    M:void tick() -> e
    M:void setFlags(java.util.EnumSet) -> a
    M:java.util.EnumSet getFlags() -> j
    M:boolean isRunning() -> h
    M:int getPriority() -> i
    M:net.minecraft.world.entity.ai.goal.PathfinderGoal getGoal() -> k
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.world.entity.ai.goal.ZombieAttackGoal -> bjg -> net.minecraft.world.entity.ai.goal.PathfinderGoalZombieAttack
    F:net.minecraft.world.entity.monster.EntityZombie zombie -> b
    F:int raiseArmTicks -> c
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.ai.goal.target.DefendVillageTargetGoal -> bji -> net.minecraft.world.entity.ai.goal.target.PathfinderGoalDefendVillage
    F:net.minecraft.world.entity.animal.EntityIronGolem golem -> a
    F:net.minecraft.world.entity.EntityLiving potentialTarget -> b
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition attackTargeting -> c
    M:boolean canUse() -> a
    M:void start() -> c
net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal -> bjj -> net.minecraft.world.entity.ai.goal.target.PathfinderGoalHurtByTarget
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition HURT_BY_TARGETING -> a
    F:int ALERT_RANGE_Y -> b
    F:boolean alertSameType -> c
    F:int timestamp -> d
    M:boolean canUse() -> a
    M:net.minecraft.world.entity.ai.goal.target.PathfinderGoalHurtByTarget setAlertOthers(java.lang.Class[]) -> a
    M:void start() -> c
    M:void alertOthers() -> h
    M:void alertOther(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal -> bjk -> net.minecraft.world.entity.ai.goal.target.PathfinderGoalNearestAttackableTarget
    F:int DEFAULT_RANDOM_INTERVAL -> i
    F:java.lang.Class targetType -> a
    F:int randomInterval -> b
    F:net.minecraft.world.entity.EntityLiving target -> c
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition targetConditions -> d
    M:boolean canUse() -> a
    M:net.minecraft.world.phys.AxisAlignedBB getTargetSearchArea(double) -> a
    M:void findTarget() -> h
    M:void start() -> c
    M:void setTarget(net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.goal.target.NearestAttackableWitchTargetGoal -> bjl -> net.minecraft.world.entity.ai.goal.target.PathfinderGoalNearestAttackableTargetWitch
    F:boolean canAttack -> i
    M:void setCanAttack(boolean) -> a
    M:boolean canUse() -> a
net.minecraft.world.entity.ai.goal.target.NearestHealableRaiderTargetGoal -> bjm -> net.minecraft.world.entity.ai.goal.target.PathfinderGoalNearestHealableRaider
    F:int DEFAULT_COOLDOWN -> i
    F:int cooldown -> j
    M:int getCooldown() -> i
    M:void decrementCooldown() -> k
    M:boolean canUse() -> a
    M:void start() -> c
net.minecraft.world.entity.ai.goal.target.NonTameRandomTargetGoal -> bjn -> net.minecraft.world.entity.ai.goal.target.PathfinderGoalRandomTargetNonTamed
    F:net.minecraft.world.entity.EntityTameableAnimal tamableMob -> i
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
net.minecraft.world.entity.ai.goal.target.OwnerHurtByTargetGoal -> bjo -> net.minecraft.world.entity.ai.goal.target.PathfinderGoalOwnerHurtByTarget
    F:net.minecraft.world.entity.EntityTameableAnimal tameAnimal -> a
    F:net.minecraft.world.entity.EntityLiving ownerLastHurtBy -> b
    F:int timestamp -> c
    M:boolean canUse() -> a
    M:void start() -> c
net.minecraft.world.entity.ai.goal.target.OwnerHurtTargetGoal -> bjp -> net.minecraft.world.entity.ai.goal.target.PathfinderGoalOwnerHurtTarget
    F:net.minecraft.world.entity.EntityTameableAnimal tameAnimal -> a
    F:net.minecraft.world.entity.EntityLiving ownerLastHurt -> b
    F:int timestamp -> c
    M:boolean canUse() -> a
    M:void start() -> c
net.minecraft.world.entity.ai.goal.target.ResetUniversalAngerTargetGoal -> bjq -> net.minecraft.world.entity.ai.goal.target.PathfinderGoalUniversalAngerReset
    F:int ALERT_RANGE_Y -> a
    F:net.minecraft.world.entity.EntityInsentient mob -> b
    F:boolean alertOthersOfSameType -> c
    F:int lastHurtByPlayerTimestamp -> d
    M:boolean canUse() -> a
    M:boolean wasHurtByPlayer() -> h
    M:void start() -> c
    M:java.util.List getNearbyMobsOfSameType() -> i
net.minecraft.world.entity.ai.goal.target.TargetGoal -> bjr -> net.minecraft.world.entity.ai.goal.target.PathfinderGoalTarget
    F:int EMPTY_REACH_CACHE -> a
    F:int CAN_REACH_CACHE -> b
    F:int CANT_REACH_CACHE -> c
    F:net.minecraft.world.entity.EntityInsentient mob -> e
    F:boolean mustSee -> f
    F:boolean mustReach -> d
    F:int reachCache -> i
    F:int reachCacheTime -> j
    F:int unseenTicks -> k
    F:net.minecraft.world.entity.EntityLiving targetMob -> g
    F:int unseenMemoryTicks -> h
    M:boolean canContinueToUse() -> b
    M:double getFollowDistance() -> l
    M:void start() -> c
    M:void stop() -> d
    M:boolean canAttack(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition) -> a
    M:boolean canReach(net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.entity.ai.goal.target.PathfinderGoalTarget setUnseenMemoryTicks(int) -> c
net.minecraft.world.entity.ai.gossip.GossipContainer -> bjt -> net.minecraft.world.entity.ai.gossip.Reputation
    F:int DISCARD_THRESHOLD -> a
    F:java.util.Map gossips -> b
    M:java.util.Map getGossipEntries() -> a
    M:void decay() -> b
    M:java.util.stream.Stream unpack() -> c
    M:java.util.Collection selectGossipsForTransfer(net.minecraft.util.RandomSource,int) -> a
    M:net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips getOrCreate(java.util.UUID) -> a
    M:void transferFrom(net.minecraft.world.entity.ai.gossip.Reputation,net.minecraft.util.RandomSource,int) -> a
    M:int getReputation(java.util.UUID,java.util.function.Predicate) -> a
    M:long getCountForType(net.minecraft.world.entity.ai.gossip.ReputationType,java.util.function.DoublePredicate) -> a
    M:void add(java.util.UUID,net.minecraft.world.entity.ai.gossip.ReputationType,int) -> a
    M:void remove(java.util.UUID,net.minecraft.world.entity.ai.gossip.ReputationType,int) -> b
    M:void remove(java.util.UUID,net.minecraft.world.entity.ai.gossip.ReputationType) -> a
    M:void remove(net.minecraft.world.entity.ai.gossip.ReputationType) -> a
    M:com.mojang.serialization.Dynamic store(com.mojang.serialization.DynamicOps) -> a
    M:void update(com.mojang.serialization.Dynamic) -> a
    M:int mergeValuesForTransfer(int,int) -> a
    M:int mergeValuesForAddition(net.minecraft.world.entity.ai.gossip.ReputationType,int,int) -> a
net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips -> bjt$a -> net.minecraft.world.entity.ai.gossip.Reputation$a
    F:it.unimi.dsi.fastutil.objects.Object2IntMap entries -> a
    M:int weightedValue(java.util.function.Predicate) -> a
    M:java.util.stream.Stream unpack(java.util.UUID) -> a
    M:void decay() -> a
    M:boolean isEmpty() -> b
    M:void makeSureValueIsntTooLowOrTooHigh(net.minecraft.world.entity.ai.gossip.ReputationType) -> a
    M:void remove(net.minecraft.world.entity.ai.gossip.ReputationType) -> b
net.minecraft.world.entity.ai.gossip.GossipContainer$GossipEntry -> bjt$b -> net.minecraft.world.entity.ai.gossip.Reputation$b
    F:java.lang.String TAG_TARGET -> a
    F:java.lang.String TAG_TYPE -> b
    F:java.lang.String TAG_VALUE -> c
    F:java.util.UUID target -> d
    F:net.minecraft.world.entity.ai.gossip.ReputationType type -> e
    F:int value -> f
    M:int weightedValue() -> a
    M:com.mojang.serialization.Dynamic store(com.mojang.serialization.DynamicOps) -> a
    M:com.mojang.serialization.DataResult load(com.mojang.serialization.Dynamic) -> a
net.minecraft.world.entity.ai.gossip.GossipType -> bju -> net.minecraft.world.entity.ai.gossip.ReputationType
    F:net.minecraft.world.entity.ai.gossip.ReputationType MAJOR_NEGATIVE -> a
    F:net.minecraft.world.entity.ai.gossip.ReputationType MINOR_NEGATIVE -> b
    F:net.minecraft.world.entity.ai.gossip.ReputationType MINOR_POSITIVE -> c
    F:net.minecraft.world.entity.ai.gossip.ReputationType MAJOR_POSITIVE -> d
    F:net.minecraft.world.entity.ai.gossip.ReputationType TRADING -> e
    F:int REPUTATION_CHANGE_PER_EVENT -> f
    F:int REPUTATION_CHANGE_PER_EVERLASTING_MEMORY -> g
    F:int REPUTATION_CHANGE_PER_TRADE -> h
    F:java.lang.String id -> i
    F:int weight -> j
    F:int max -> k
    F:int decayPerDay -> l
    F:int decayPerTransfer -> m
    F:java.util.Map BY_ID -> n
    M:net.minecraft.world.entity.ai.gossip.ReputationType byId(java.lang.String) -> a
net.minecraft.world.entity.ai.memory.ExpirableValue -> bjw -> net.minecraft.world.entity.ai.memory.ExpirableMemory
    F:java.lang.Object value -> a
    F:long timeToLive -> b
    M:void tick() -> a
    M:net.minecraft.world.entity.ai.memory.ExpirableMemory of(java.lang.Object) -> a
    M:net.minecraft.world.entity.ai.memory.ExpirableMemory of(java.lang.Object,long) -> a
    M:long getTimeToLive() -> b
    M:java.lang.Object getValue() -> c
    M:boolean hasExpired() -> d
    M:boolean canExpire() -> e
    M:com.mojang.serialization.Codec codec(com.mojang.serialization.Codec) -> a
net.minecraft.world.entity.ai.memory.MemoryModuleType -> bjx -> net.minecraft.world.entity.ai.memory.MemoryModuleType
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType DUMMY -> a
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType HOME -> b
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType JOB_SITE -> c
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType POTENTIAL_JOB_SITE -> d
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType MEETING_POINT -> e
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType SECONDARY_JOB_SITE -> f
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_LIVING_ENTITIES -> g
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_VISIBLE_LIVING_ENTITIES -> h
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType VISIBLE_VILLAGER_BABIES -> i
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_PLAYERS -> j
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_VISIBLE_PLAYER -> k
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_VISIBLE_ATTACKABLE_PLAYER -> l
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType WALK_TARGET -> m
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType LOOK_TARGET -> n
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType ATTACK_TARGET -> o
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType ATTACK_COOLING_DOWN -> p
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType INTERACTION_TARGET -> q
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType BREED_TARGET -> r
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType RIDE_TARGET -> s
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType PATH -> t
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType INTERACTABLE_DOORS -> u
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType DOORS_TO_CLOSE -> v
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_BED -> w
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType HURT_BY -> x
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType HURT_BY_ENTITY -> y
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType AVOID_TARGET -> z
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType UNIVERSAL_ANGER -> aa
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType ADMIRING_ITEM -> ab
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType TIME_TRYING_TO_REACH_ADMIRE_ITEM -> ac
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType DISABLE_WALK_TO_ADMIRE_ITEM -> ad
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType ADMIRING_DISABLED -> ae
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType HUNTED_RECENTLY -> af
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType CELEBRATE_LOCATION -> ag
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType DANCING -> ah
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_VISIBLE_HUNTABLE_HOGLIN -> ai
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_VISIBLE_BABY_HOGLIN -> aj
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD -> ak
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType NEARBY_ADULT_PIGLINS -> al
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_VISIBLE_ADULT_PIGLINS -> am
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_VISIBLE_ADULT_HOGLINS -> an
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_VISIBLE_ADULT_PIGLIN -> ao
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_VISIBLE_ZOMBIFIED -> ap
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType VISIBLE_ADULT_PIGLIN_COUNT -> aq
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType VISIBLE_ADULT_HOGLIN_COUNT -> ar
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_PLAYER_HOLDING_WANTED_ITEM -> as
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType ATE_RECENTLY -> at
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_REPELLENT -> au
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType PACIFIED -> av
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType ROAR_TARGET -> aw
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType DISTURBANCE_LOCATION -> ax
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType RECENT_PROJECTILE -> ay
    F:net.minecraft.world.entity.ai.memory.MemoryModuleType IS_SNIFFING -> az
    M:java.util.Optional getCodec() -> a
    M:net.minecraft.world.entity.ai.memory.MemoryModuleType register(java.lang.String,com.mojang.serialization.Codec) -> a
    M:net.minecraft.world.entity.ai.memory.MemoryModuleType register(java.lang.String) -> a
net.minecraft.world.entity.ai.memory.MemoryStatus -> bjy -> net.minecraft.world.entity.ai.memory.MemoryStatus
    F:net.minecraft.world.entity.ai.memory.MemoryStatus VALUE_PRESENT -> a
    F:net.minecraft.world.entity.ai.memory.MemoryStatus VALUE_ABSENT -> b
    F:net.minecraft.world.entity.ai.memory.MemoryStatus REGISTERED -> c
net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities -> bjz -> net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities
    F:net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities EMPTY -> a
    F:java.util.List nearbyEntities -> b
    F:java.util.function.Predicate lineOfSightTest -> c
    M:net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities empty() -> a
    M:java.util.Optional findClosest(java.util.function.Predicate) -> a
    M:java.lang.Iterable findAll(java.util.function.Predicate) -> b
    M:java.util.stream.Stream find(java.util.function.Predicate) -> c
    M:boolean contains(net.minecraft.world.entity.EntityLiving) -> a
    M:boolean contains(java.util.function.Predicate) -> d
net.minecraft.world.entity.ai.memory.WalkTarget -> bka -> net.minecraft.world.entity.ai.memory.MemoryTarget
    F:net.minecraft.world.entity.ai.behavior.BehaviorPosition target -> a
    F:float speedModifier -> b
    F:int closeEnoughDist -> c
    M:net.minecraft.world.entity.ai.behavior.BehaviorPosition getTarget() -> a
    M:float getSpeedModifier() -> b
    M:int getCloseEnoughDist() -> c
net.minecraft.world.entity.ai.navigation.AmphibiousPathNavigation -> bkc -> net.minecraft.world.entity.ai.navigation.AmphibiousPathNavigation
    M:net.minecraft.world.level.pathfinder.Pathfinder createPathFinder(int) -> a
    M:boolean canUpdatePath() -> a
    M:net.minecraft.world.phys.Vec3D getTempMobPos() -> b
    M:double getGroundY(net.minecraft.world.phys.Vec3D) -> a
    M:boolean canMoveDirectly(net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D) -> a
    M:boolean isStableDestination(net.minecraft.core.BlockPosition) -> a
    M:void setCanFloat(boolean) -> a
net.minecraft.world.entity.ai.navigation.FlyingPathNavigation -> bkd -> net.minecraft.world.entity.ai.navigation.NavigationFlying
    M:net.minecraft.world.level.pathfinder.Pathfinder createPathFinder(int) -> a
    M:boolean canUpdatePath() -> a
    M:net.minecraft.world.phys.Vec3D getTempMobPos() -> b
    M:net.minecraft.world.level.pathfinder.PathEntity createPath(net.minecraft.world.entity.Entity,int) -> a
    M:void tick() -> c
    M:void setCanOpenDoors(boolean) -> b
    M:boolean canPassDoors() -> d
    M:void setCanPassDoors(boolean) -> c
    M:boolean canOpenDoors() -> e
    M:boolean isStableDestination(net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.ai.navigation.GroundPathNavigation -> bke -> net.minecraft.world.entity.ai.navigation.Navigation
    F:boolean avoidSun -> p
    M:net.minecraft.world.level.pathfinder.Pathfinder createPathFinder(int) -> a
    M:boolean canUpdatePath() -> a
    M:net.minecraft.world.phys.Vec3D getTempMobPos() -> b
    M:net.minecraft.world.level.pathfinder.PathEntity createPath(net.minecraft.core.BlockPosition,int) -> a
    M:net.minecraft.world.level.pathfinder.PathEntity createPath(net.minecraft.world.entity.Entity,int) -> a
    M:int getSurfaceY() -> t
    M:boolean hasValidPathType(net.minecraft.world.level.pathfinder.PathType) -> a
    M:void setCanOpenDoors(boolean) -> b
    M:boolean canPassDoors() -> e
    M:void setCanPassDoors(boolean) -> c
    M:boolean canOpenDoors() -> f
    M:void setAvoidSun(boolean) -> d
net.minecraft.world.entity.ai.navigation.PathNavigation -> bkf -> net.minecraft.world.entity.ai.navigation.NavigationAbstract
    F:int MAX_TIME_RECOMPUTE -> p
    F:net.minecraft.world.entity.EntityInsentient mob -> a
    F:net.minecraft.world.level.World level -> b
    F:net.minecraft.world.level.pathfinder.PathEntity path -> c
    F:double speedModifier -> d
    F:int tick -> e
    F:int lastStuckCheck -> f
    F:net.minecraft.world.phys.Vec3D lastStuckCheckPos -> g
    F:net.minecraft.core.BaseBlockPosition timeoutCachedNode -> h
    F:long timeoutTimer -> i
    F:long lastTimeoutCheck -> j
    F:double timeoutLimit -> k
    F:float maxDistanceToWaypoint -> l
    F:boolean hasDelayedRecomputation -> m
    F:long timeLastRecompute -> n
    F:net.minecraft.world.level.pathfinder.PathfinderAbstract nodeEvaluator -> o
    F:net.minecraft.core.BlockPosition targetPos -> q
    F:int reachRange -> r
    F:float maxVisitedNodesMultiplier -> s
    F:net.minecraft.world.level.pathfinder.Pathfinder pathFinder -> t
    F:boolean isStuck -> u
    M:void resetMaxVisitedNodesMultiplier() -> g
    M:void setMaxVisitedNodesMultiplier(float) -> a
    M:net.minecraft.core.BlockPosition getTargetPos() -> h
    M:void setSpeedModifier(double) -> a
    M:void recomputePath() -> i
    M:net.minecraft.world.level.pathfinder.PathEntity createPath(double,double,double,int) -> a
    M:net.minecraft.world.level.pathfinder.PathEntity createPath(java.util.stream.Stream,int) -> a
    M:net.minecraft.world.level.pathfinder.PathEntity createPath(java.util.Set,int) -> a
    M:net.minecraft.world.level.pathfinder.PathEntity createPath(net.minecraft.core.BlockPosition,int) -> a
    M:net.minecraft.world.level.pathfinder.PathEntity createPath(net.minecraft.core.BlockPosition,int,int) -> a
    M:net.minecraft.world.level.pathfinder.PathEntity createPath(net.minecraft.world.entity.Entity,int) -> a
    M:net.minecraft.world.level.pathfinder.PathEntity createPath(java.util.Set,int,boolean,int) -> a
    M:net.minecraft.world.level.pathfinder.PathEntity createPath(java.util.Set,int,boolean,int,float) -> a
    M:boolean moveTo(double,double,double,double) -> a
    M:boolean moveTo(net.minecraft.world.entity.Entity,double) -> a
    M:boolean moveTo(net.minecraft.world.level.pathfinder.PathEntity,double) -> a
    M:net.minecraft.world.level.pathfinder.PathEntity getPath() -> j
    M:void tick() -> c
    M:double getGroundY(net.minecraft.world.phys.Vec3D) -> a
    M:void followThePath() -> k
    M:boolean shouldTargetNextNodeInDirection(net.minecraft.world.phys.Vec3D) -> c
    M:void doStuckDetection(net.minecraft.world.phys.Vec3D) -> b
    M:void timeoutPath() -> e
    M:void resetStuckTimeout() -> f
    M:boolean isDone() -> l
    M:boolean isInProgress() -> m
    M:void stop() -> n
    M:boolean isInLiquid() -> o
    M:boolean canMoveDirectly(net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D) -> a
    M:boolean isClearForMovementBetween(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D) -> a
    M:boolean isStableDestination(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.pathfinder.PathfinderAbstract getNodeEvaluator() -> p
    M:void setCanFloat(boolean) -> a
    M:boolean canFloat() -> q
    M:boolean shouldRecomputePath(net.minecraft.core.BlockPosition) -> b
    M:float getMaxDistanceToWaypoint() -> r
    M:boolean isStuck() -> s
net.minecraft.world.entity.ai.navigation.WallClimberNavigation -> bkg -> net.minecraft.world.entity.ai.navigation.NavigationSpider
    F:net.minecraft.core.BlockPosition pathToPosition -> p
    M:net.minecraft.world.level.pathfinder.PathEntity createPath(net.minecraft.core.BlockPosition,int) -> a
    M:net.minecraft.world.level.pathfinder.PathEntity createPath(net.minecraft.world.entity.Entity,int) -> a
    M:boolean moveTo(net.minecraft.world.entity.Entity,double) -> a
    M:void tick() -> c
net.minecraft.world.entity.ai.navigation.WaterBoundPathNavigation -> bkh -> net.minecraft.world.entity.ai.navigation.NavigationGuardian
    F:boolean allowBreaching -> p
    M:net.minecraft.world.level.pathfinder.Pathfinder createPathFinder(int) -> a
    M:boolean canUpdatePath() -> a
    M:net.minecraft.world.phys.Vec3D getTempMobPos() -> b
    M:double getGroundY(net.minecraft.world.phys.Vec3D) -> a
    M:boolean canMoveDirectly(net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D) -> a
    M:boolean isStableDestination(net.minecraft.core.BlockPosition) -> a
    M:void setCanFloat(boolean) -> a
net.minecraft.world.entity.ai.sensing.AdultSensor -> bkk -> net.minecraft.world.entity.ai.sensing.SensorAdult
    M:java.util.Set requires() -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
    M:void setNearestVisibleAdult(net.minecraft.world.entity.EntityAgeable,net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities) -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.sensing.AxolotlAttackablesSensor -> bkl -> net.minecraft.world.entity.ai.sensing.AxolotlAttackablesSensor
    F:float TARGET_DETECTION_DISTANCE -> a
    M:boolean isMatchingEntity(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean isHuntTarget(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> e
    M:boolean isHostileTarget(net.minecraft.world.entity.EntityLiving) -> b
    M:boolean isClose(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> f
    M:net.minecraft.world.entity.ai.memory.MemoryModuleType getMemory() -> b
net.minecraft.world.entity.ai.sensing.DummySensor -> bkm -> net.minecraft.world.entity.ai.sensing.SensorDummy
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:java.util.Set requires() -> a
net.minecraft.world.entity.ai.sensing.FrogAttackablesSensor -> bkn -> net.minecraft.world.entity.ai.sensing.FrogAttackablesSensor
    F:float TARGET_DETECTION_DISTANCE -> a
    M:boolean isMatchingEntity(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean isUnreachableAttackTarget(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> e
    M:net.minecraft.world.entity.ai.memory.MemoryModuleType getMemory() -> b
net.minecraft.world.entity.ai.sensing.GolemSensor -> bko -> net.minecraft.world.entity.ai.sensing.SensorGolemLastSeen
    F:int GOLEM_SCAN_RATE -> a
    F:int MEMORY_TIME_TO_LIVE -> c
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:java.util.Set requires() -> a
    M:void checkForNearbyGolem(net.minecraft.world.entity.EntityLiving) -> a
    M:void golemDetected(net.minecraft.world.entity.EntityLiving) -> b
net.minecraft.world.entity.ai.sensing.HoglinSpecificSensor -> bkp -> net.minecraft.world.entity.ai.sensing.SensorHoglinSpecific
    M:java.util.Set requires() -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.hoglin.EntityHoglin) -> a
    M:java.util.Optional findNearestRepellent(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.hoglin.EntityHoglin) -> b
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.sensing.HurtBySensor -> bkq -> net.minecraft.world.entity.ai.sensing.SensorHurtBy
    M:java.util.Set requires() -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.sensing.IsInWaterSensor -> bkr -> net.minecraft.world.entity.ai.sensing.IsInWaterSensor
    M:java.util.Set requires() -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.sensing.NearestBedSensor -> bks -> net.minecraft.world.entity.ai.sensing.SensorNearestBed
    F:int CACHE_TIMEOUT -> a
    F:int BATCH_SIZE -> c
    F:int RATE -> d
    F:it.unimi.dsi.fastutil.longs.Long2LongMap batchCache -> e
    F:int triedCount -> f
    F:long lastUpdate -> g
    M:java.util.Set requires() -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient) -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.sensing.NearestItemSensor -> bkt -> net.minecraft.world.entity.ai.sensing.SensorNearestItems
    F:long XZ_RANGE -> c
    F:long Y_RANGE -> d
    F:int MAX_DISTANCE_TO_WANTED_ITEM -> a
    M:java.util.Set requires() -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient) -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.sensing.NearestLivingEntitySensor -> bku -> net.minecraft.world.entity.ai.sensing.SensorNearestLivingEntities
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:int radiusXZ() -> b
    M:int radiusY() -> c
    M:java.util.Set requires() -> a
net.minecraft.world.entity.ai.sensing.NearestVisibleLivingEntitySensor -> bkv -> net.minecraft.world.entity.ai.sensing.NearestVisibleLivingEntitySensor
    M:java.util.Set requires() -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:java.util.Optional getNearestEntity(net.minecraft.world.entity.EntityLiving) -> b
    M:java.util.Optional getVisibleEntities(net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.sensing.PiglinBruteSpecificSensor -> bkw -> net.minecraft.world.entity.ai.sensing.SensorPiglinBruteSpecific
    M:java.util.Set requires() -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.sensing.PiglinSpecificSensor -> bkx -> net.minecraft.world.entity.ai.sensing.SensorPiglinSpecific
    M:java.util.Set requires() -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:java.util.Optional findNearestRepellent(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> c
    M:boolean isValidRepellent(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.ai.sensing.PlayerSensor -> bky -> net.minecraft.world.entity.ai.sensing.SensorNearestPlayers
    M:java.util.Set requires() -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.sensing.SecondaryPoiSensor -> bkz -> net.minecraft.world.entity.ai.sensing.SensorSecondaryPlaces
    F:int SCAN_RATE -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager) -> a
    M:java.util.Set requires() -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.sensing.Sensing -> bla -> net.minecraft.world.entity.ai.sensing.EntitySenses
    F:net.minecraft.world.entity.EntityInsentient mob -> a
    F:it.unimi.dsi.fastutil.ints.IntSet seen -> b
    F:it.unimi.dsi.fastutil.ints.IntSet unseen -> c
    M:void tick() -> a
    M:boolean hasLineOfSight(net.minecraft.world.entity.Entity) -> a
net.minecraft.world.entity.ai.sensing.Sensor -> blb -> net.minecraft.world.entity.ai.sensing.Sensor
    F:net.minecraft.util.RandomSource RANDOM -> a
    F:int DEFAULT_SCAN_RATE -> c
    F:int TARGETING_RANGE -> b
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition TARGET_CONDITIONS -> d
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition TARGET_CONDITIONS_IGNORE_INVISIBILITY_TESTING -> e
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition ATTACK_TARGET_CONDITIONS -> f
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition ATTACK_TARGET_CONDITIONS_IGNORE_INVISIBILITY_TESTING -> g
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition ATTACK_TARGET_CONDITIONS_IGNORE_LINE_OF_SIGHT -> h
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition ATTACK_TARGET_CONDITIONS_IGNORE_INVISIBILITY_AND_LINE_OF_SIGHT -> i
    F:int scanRate -> j
    F:long timeToTick -> k
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> b
    M:boolean isEntityTargetable(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> b
    M:boolean isEntityAttackable(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> c
    M:boolean isEntityAttackableIgnoringLineOfSight(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> d
net.minecraft.world.entity.ai.sensing.SensorType -> blc -> net.minecraft.world.entity.ai.sensing.SensorType
    F:net.minecraft.world.entity.ai.sensing.SensorType DUMMY -> a
    F:net.minecraft.world.entity.ai.sensing.SensorType NEAREST_ITEMS -> b
    F:net.minecraft.world.entity.ai.sensing.SensorType NEAREST_LIVING_ENTITIES -> c
    F:net.minecraft.world.entity.ai.sensing.SensorType NEAREST_PLAYERS -> d
    F:net.minecraft.world.entity.ai.sensing.SensorType NEAREST_BED -> e
    F:net.minecraft.world.entity.ai.sensing.SensorType HURT_BY -> f
    F:net.minecraft.world.entity.ai.sensing.SensorType VILLAGER_HOSTILES -> g
    F:net.minecraft.world.entity.ai.sensing.SensorType VILLAGER_BABIES -> h
    F:net.minecraft.world.entity.ai.sensing.SensorType SECONDARY_POIS -> i
    F:net.minecraft.world.entity.ai.sensing.SensorType GOLEM_DETECTED -> j
    F:net.minecraft.world.entity.ai.sensing.SensorType PIGLIN_SPECIFIC_SENSOR -> k
    F:net.minecraft.world.entity.ai.sensing.SensorType PIGLIN_BRUTE_SPECIFIC_SENSOR -> l
    F:net.minecraft.world.entity.ai.sensing.SensorType HOGLIN_SPECIFIC_SENSOR -> m
    F:net.minecraft.world.entity.ai.sensing.SensorType NEAREST_ADULT -> n
    F:net.minecraft.world.entity.ai.sensing.SensorType AXOLOTL_ATTACKABLES -> o
    F:net.minecraft.world.entity.ai.sensing.SensorType AXOLOTL_TEMPTATIONS -> p
    F:net.minecraft.world.entity.ai.sensing.SensorType GOAT_TEMPTATIONS -> q
    F:net.minecraft.world.entity.ai.sensing.SensorType FROG_TEMPTATIONS -> r
    F:net.minecraft.world.entity.ai.sensing.SensorType FROG_ATTACKABLES -> s
    F:net.minecraft.world.entity.ai.sensing.SensorType IS_IN_WATER -> t
    F:net.minecraft.world.entity.ai.sensing.SensorType WARDEN_ENTITY_SENSOR -> u
    F:java.util.function.Supplier factory -> v
    M:net.minecraft.world.entity.ai.sensing.Sensor create() -> a
    M:net.minecraft.world.entity.ai.sensing.SensorType register(java.lang.String,java.util.function.Supplier) -> a
net.minecraft.world.entity.ai.sensing.TemptingSensor -> bld -> net.minecraft.world.entity.ai.sensing.TemptingSensor
    F:int TEMPTATION_RANGE -> a
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition TEMPT_TARGETING -> c
    F:net.minecraft.world.item.crafting.RecipeItemStack temptations -> d
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityCreature) -> a
    M:boolean playerHoldingTemptation(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean isTemptation(net.minecraft.world.item.ItemStack) -> a
    M:java.util.Set requires() -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.sensing.VillagerBabiesSensor -> ble -> net.minecraft.world.entity.ai.sensing.SensorVillagerBabies
    M:java.util.Set requires() -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:java.util.List getNearestVillagerBabies(net.minecraft.world.entity.EntityLiving) -> a
    M:boolean isVillagerBaby(net.minecraft.world.entity.EntityLiving) -> b
    M:net.minecraft.world.entity.ai.memory.NearestVisibleLivingEntities getVisibleEntities(net.minecraft.world.entity.EntityLiving) -> c
net.minecraft.world.entity.ai.sensing.VillagerHostilesSensor -> blf -> net.minecraft.world.entity.ai.sensing.SensorVillagerHostiles
    F:com.google.common.collect.ImmutableMap ACCEPTABLE_DISTANCE_FROM_HOSTILES -> a
    M:boolean isMatchingEntity(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean isClose(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> e
    M:net.minecraft.world.entity.ai.memory.MemoryModuleType getMemory() -> b
    M:boolean isHostile(net.minecraft.world.entity.EntityLiving) -> b
net.minecraft.world.entity.ai.sensing.WardenEntitySensor -> blg -> net.minecraft.world.entity.ai.sensing.WardenEntitySensor
    M:java.util.Set requires() -> a
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden) -> a
    M:java.util.Optional getClosest(net.minecraft.world.entity.monster.warden.Warden,java.util.function.Predicate) -> a
    M:int radiusXZ() -> b
    M:int radiusY() -> c
    M:void doTick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.targeting.TargetingConditions -> bli -> net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition DEFAULT -> a
    F:double MIN_VISIBILITY_DISTANCE_FOR_INVISIBLE_TARGET -> b
    F:boolean isCombat -> c
    F:double range -> d
    F:boolean checkLineOfSight -> e
    F:boolean testInvisible -> f
    F:java.util.function.Predicate selector -> g
    M:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition forCombat() -> a
    M:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition forNonCombat() -> b
    M:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition copy() -> c
    M:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition range(double) -> a
    M:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition ignoreLineOfSight() -> d
    M:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition ignoreInvisibilityTesting() -> e
    M:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition selector(java.util.function.Predicate) -> a
    M:boolean test(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.ai.util.AirAndWaterRandomPos -> blk -> net.minecraft.world.entity.ai.util.AirAndWaterRandomPos
    M:net.minecraft.world.phys.Vec3D getPos(net.minecraft.world.entity.EntityCreature,int,int,int,double,double,double) -> a
    M:net.minecraft.core.BlockPosition generateRandomPos(net.minecraft.world.entity.EntityCreature,int,int,int,double,double,double,boolean) -> a
net.minecraft.world.entity.ai.util.AirRandomPos -> bll -> net.minecraft.world.entity.ai.util.AirRandomPos
    M:net.minecraft.world.phys.Vec3D getPosTowards(net.minecraft.world.entity.EntityCreature,int,int,int,net.minecraft.world.phys.Vec3D,double) -> a
net.minecraft.world.entity.ai.util.DefaultRandomPos -> blm -> net.minecraft.world.entity.ai.util.DefaultRandomPos
    M:net.minecraft.world.phys.Vec3D getPos(net.minecraft.world.entity.EntityCreature,int,int) -> a
    M:net.minecraft.world.phys.Vec3D getPosTowards(net.minecraft.world.entity.EntityCreature,int,int,net.minecraft.world.phys.Vec3D,double) -> a
    M:net.minecraft.world.phys.Vec3D getPosAway(net.minecraft.world.entity.EntityCreature,int,int,net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.core.BlockPosition generateRandomPosTowardDirection(net.minecraft.world.entity.EntityCreature,int,boolean,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.ai.util.GoalUtils -> bln -> net.minecraft.world.entity.ai.util.PathfinderGoalUtil
    M:boolean hasGroundPathNavigation(net.minecraft.world.entity.EntityInsentient) -> a
    M:boolean mobRestricted(net.minecraft.world.entity.EntityCreature,int) -> a
    M:boolean isOutsideLimits(net.minecraft.core.BlockPosition,net.minecraft.world.entity.EntityCreature) -> a
    M:boolean isRestricted(boolean,net.minecraft.world.entity.EntityCreature,net.minecraft.core.BlockPosition) -> a
    M:boolean isNotStable(net.minecraft.world.entity.ai.navigation.NavigationAbstract,net.minecraft.core.BlockPosition) -> a
    M:boolean isWater(net.minecraft.world.entity.EntityCreature,net.minecraft.core.BlockPosition) -> a
    M:boolean hasMalus(net.minecraft.world.entity.EntityCreature,net.minecraft.core.BlockPosition) -> b
    M:boolean isSolid(net.minecraft.world.entity.EntityCreature,net.minecraft.core.BlockPosition) -> c
net.minecraft.world.entity.ai.util.HoverRandomPos -> blo -> net.minecraft.world.entity.ai.util.HoverRandomPos
    M:net.minecraft.world.phys.Vec3D getPos(net.minecraft.world.entity.EntityCreature,int,int,double,double,float,int,int) -> a
net.minecraft.world.entity.ai.util.LandRandomPos -> blp -> net.minecraft.world.entity.ai.util.LandRandomPos
    M:net.minecraft.world.phys.Vec3D getPos(net.minecraft.world.entity.EntityCreature,int,int) -> a
    M:net.minecraft.world.phys.Vec3D getPos(net.minecraft.world.entity.EntityCreature,int,int,java.util.function.ToDoubleFunction) -> a
    M:net.minecraft.world.phys.Vec3D getPosTowards(net.minecraft.world.entity.EntityCreature,int,int,net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.world.phys.Vec3D getPosAway(net.minecraft.world.entity.EntityCreature,int,int,net.minecraft.world.phys.Vec3D) -> b
    M:net.minecraft.world.phys.Vec3D getPosInDirection(net.minecraft.world.entity.EntityCreature,int,int,net.minecraft.world.phys.Vec3D,boolean) -> a
    M:net.minecraft.core.BlockPosition movePosUpOutOfSolid(net.minecraft.world.entity.EntityCreature,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.BlockPosition generateRandomPosTowardDirection(net.minecraft.world.entity.EntityCreature,int,boolean,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.ai.util.RandomPos -> blq -> net.minecraft.world.entity.ai.util.RandomPositionGenerator
    F:int RANDOM_POS_ATTEMPTS -> a
    M:net.minecraft.core.BlockPosition generateRandomDirection(net.minecraft.util.RandomSource,int,int) -> a
    M:net.minecraft.core.BlockPosition generateRandomDirectionWithinRadians(net.minecraft.util.RandomSource,int,int,int,double,double,double) -> a
    M:net.minecraft.core.BlockPosition moveUpOutOfSolid(net.minecraft.core.BlockPosition,int,java.util.function.Predicate) -> a
    M:net.minecraft.core.BlockPosition moveUpToAboveSolid(net.minecraft.core.BlockPosition,int,int,java.util.function.Predicate) -> a
    M:net.minecraft.world.phys.Vec3D generateRandomPos(net.minecraft.world.entity.EntityCreature,java.util.function.Supplier) -> a
    M:net.minecraft.world.phys.Vec3D generateRandomPos(java.util.function.Supplier,java.util.function.ToDoubleFunction) -> a
    M:net.minecraft.core.BlockPosition generateRandomPosTowardDirection(net.minecraft.world.entity.EntityCreature,int,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.ai.village.ReputationEventType -> bls -> net.minecraft.world.entity.ai.village.ReputationEvent
    F:net.minecraft.world.entity.ai.village.ReputationEvent ZOMBIE_VILLAGER_CURED -> a
    F:net.minecraft.world.entity.ai.village.ReputationEvent GOLEM_KILLED -> b
    F:net.minecraft.world.entity.ai.village.ReputationEvent VILLAGER_HURT -> c
    F:net.minecraft.world.entity.ai.village.ReputationEvent VILLAGER_KILLED -> d
    F:net.minecraft.world.entity.ai.village.ReputationEvent TRADE -> e
    M:net.minecraft.world.entity.ai.village.ReputationEvent register(java.lang.String) -> a
net.minecraft.world.entity.ai.village.VillageSiege -> blt -> net.minecraft.world.entity.ai.village.VillageSiege
    F:org.slf4j.Logger LOGGER -> a
    F:boolean hasSetupSiege -> b
    F:net.minecraft.world.entity.ai.village.VillageSiege$State siegeState -> c
    F:int zombiesToSpawn -> d
    F:int nextSpawnTime -> e
    F:int spawnX -> f
    F:int spawnY -> g
    F:int spawnZ -> h
    M:int tick(net.minecraft.server.level.WorldServer,boolean,boolean) -> a
    M:boolean tryToSetupSiege(net.minecraft.server.level.WorldServer) -> a
    M:void trySpawn(net.minecraft.server.level.WorldServer) -> b
    M:net.minecraft.world.phys.Vec3D findRandomSpawnPos(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.ai.village.VillageSiege$State -> blt$a -> net.minecraft.world.entity.ai.village.VillageSiege$State
    F:net.minecraft.world.entity.ai.village.VillageSiege$State SIEGE_CAN_ACTIVATE -> a
    F:net.minecraft.world.entity.ai.village.VillageSiege$State SIEGE_TONIGHT -> b
    F:net.minecraft.world.entity.ai.village.VillageSiege$State SIEGE_DONE -> c
net.minecraft.world.entity.ai.village.poi.PoiManager -> blv -> net.minecraft.world.entity.ai.village.poi.VillagePlace
    F:int MAX_VILLAGE_DISTANCE -> a
    F:int VILLAGE_SECTION_SIZE -> b
    F:net.minecraft.world.entity.ai.village.poi.PoiManager$DistanceTracker distanceTracker -> d
    F:it.unimi.dsi.fastutil.longs.LongSet loadedChunks -> e
    M:void add(net.minecraft.core.BlockPosition,net.minecraft.core.Holder) -> a
    M:void remove(net.minecraft.core.BlockPosition) -> a
    M:long getCountInRange(java.util.function.Predicate,net.minecraft.core.BlockPosition,int,net.minecraft.world.entity.ai.village.poi.VillagePlace$Occupancy) -> a
    M:boolean existsAtPosition(net.minecraft.resources.ResourceKey,net.minecraft.core.BlockPosition) -> a
    M:java.util.stream.Stream getInSquare(java.util.function.Predicate,net.minecraft.core.BlockPosition,int,net.minecraft.world.entity.ai.village.poi.VillagePlace$Occupancy) -> b
    M:java.util.stream.Stream getInRange(java.util.function.Predicate,net.minecraft.core.BlockPosition,int,net.minecraft.world.entity.ai.village.poi.VillagePlace$Occupancy) -> c
    M:java.util.stream.Stream getInChunk(java.util.function.Predicate,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.entity.ai.village.poi.VillagePlace$Occupancy) -> a
    M:java.util.stream.Stream findAll(java.util.function.Predicate,java.util.function.Predicate,net.minecraft.core.BlockPosition,int,net.minecraft.world.entity.ai.village.poi.VillagePlace$Occupancy) -> a
    M:java.util.stream.Stream findAllWithType(java.util.function.Predicate,java.util.function.Predicate,net.minecraft.core.BlockPosition,int,net.minecraft.world.entity.ai.village.poi.VillagePlace$Occupancy) -> b
    M:java.util.stream.Stream findAllClosestFirstWithType(java.util.function.Predicate,java.util.function.Predicate,net.minecraft.core.BlockPosition,int,net.minecraft.world.entity.ai.village.poi.VillagePlace$Occupancy) -> c
    M:java.util.Optional find(java.util.function.Predicate,java.util.function.Predicate,net.minecraft.core.BlockPosition,int,net.minecraft.world.entity.ai.village.poi.VillagePlace$Occupancy) -> d
    M:java.util.Optional findClosest(java.util.function.Predicate,net.minecraft.core.BlockPosition,int,net.minecraft.world.entity.ai.village.poi.VillagePlace$Occupancy) -> d
    M:java.util.Optional findClosestWithType(java.util.function.Predicate,net.minecraft.core.BlockPosition,int,net.minecraft.world.entity.ai.village.poi.VillagePlace$Occupancy) -> e
    M:java.util.Optional findClosest(java.util.function.Predicate,java.util.function.Predicate,net.minecraft.core.BlockPosition,int,net.minecraft.world.entity.ai.village.poi.VillagePlace$Occupancy) -> e
    M:java.util.Optional take(java.util.function.Predicate,java.util.function.BiPredicate,net.minecraft.core.BlockPosition,int) -> a
    M:java.util.Optional getRandom(java.util.function.Predicate,java.util.function.Predicate,net.minecraft.world.entity.ai.village.poi.VillagePlace$Occupancy,net.minecraft.core.BlockPosition,int,net.minecraft.util.RandomSource) -> a
    M:boolean release(net.minecraft.core.BlockPosition) -> b
    M:boolean exists(net.minecraft.core.BlockPosition,java.util.function.Predicate) -> a
    M:java.util.Optional getType(net.minecraft.core.BlockPosition) -> c
    M:int getFreeTickets(net.minecraft.core.BlockPosition) -> d
    M:int sectionsToVillage(net.minecraft.core.SectionPosition) -> a
    M:boolean isVillageCenter(long) -> g
    M:void tick(java.util.function.BooleanSupplier) -> a
    M:void setDirty(long) -> a
    M:void onSectionLoad(long) -> b
    M:void checkConsistencyWithBlocks(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.chunk.ChunkSection) -> a
    M:boolean mayHavePoi(net.minecraft.world.level.chunk.ChunkSection) -> a
    M:void updateFromSection(net.minecraft.world.level.chunk.ChunkSection,net.minecraft.core.SectionPosition,java.util.function.BiConsumer) -> a
    M:void ensureLoadedAndValid(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,int) -> a
net.minecraft.world.entity.ai.village.poi.PoiManager$DistanceTracker -> blv$a -> net.minecraft.world.entity.ai.village.poi.VillagePlace$a
    F:it.unimi.dsi.fastutil.longs.Long2ByteMap levels -> b
    M:int getLevelFromSource(long) -> b
    M:int getLevel(long) -> c
    M:void setLevel(long,int) -> a
    M:void runAllUpdates() -> a
net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy -> blv$b -> net.minecraft.world.entity.ai.village.poi.VillagePlace$Occupancy
    F:net.minecraft.world.entity.ai.village.poi.VillagePlace$Occupancy HAS_SPACE -> a
    F:net.minecraft.world.entity.ai.village.poi.VillagePlace$Occupancy IS_OCCUPIED -> b
    F:net.minecraft.world.entity.ai.village.poi.VillagePlace$Occupancy ANY -> c
    F:java.util.function.Predicate test -> d
    M:java.util.function.Predicate getTest() -> a
net.minecraft.world.entity.ai.village.poi.PoiRecord -> blw -> net.minecraft.world.entity.ai.village.poi.VillagePlaceRecord
    F:net.minecraft.core.BlockPosition pos -> a
    F:net.minecraft.core.Holder poiType -> b
    F:int freeTickets -> c
    F:java.lang.Runnable setDirty -> d
    M:com.mojang.serialization.Codec codec(java.lang.Runnable) -> a
    M:int getFreeTickets() -> a
    M:boolean acquireTicket() -> b
    M:boolean releaseTicket() -> c
    M:boolean hasSpace() -> d
    M:boolean isOccupied() -> e
    M:net.minecraft.core.BlockPosition getPos() -> f
    M:net.minecraft.core.Holder getPoiType() -> g
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.world.entity.ai.village.poi.PoiSection -> blx -> net.minecraft.world.entity.ai.village.poi.VillagePlaceSection
    F:org.slf4j.Logger LOGGER -> a
    F:it.unimi.dsi.fastutil.shorts.Short2ObjectMap records -> b
    F:java.util.Map byType -> c
    F:java.lang.Runnable setDirty -> d
    F:boolean isValid -> e
    M:com.mojang.serialization.Codec codec(java.lang.Runnable) -> a
    M:java.util.stream.Stream getRecords(java.util.function.Predicate,net.minecraft.world.entity.ai.village.poi.VillagePlace$Occupancy) -> a
    M:void add(net.minecraft.core.BlockPosition,net.minecraft.core.Holder) -> a
    M:boolean add(net.minecraft.world.entity.ai.village.poi.VillagePlaceRecord) -> a
    M:void remove(net.minecraft.core.BlockPosition) -> a
    M:int getFreeTickets(net.minecraft.core.BlockPosition) -> b
    M:boolean release(net.minecraft.core.BlockPosition) -> c
    M:boolean exists(net.minecraft.core.BlockPosition,java.util.function.Predicate) -> a
    M:java.util.Optional getType(net.minecraft.core.BlockPosition) -> d
    M:java.util.Optional getPoiRecord(net.minecraft.core.BlockPosition) -> e
    M:void refresh(java.util.function.Consumer) -> a
    M:void clear() -> b
    M:boolean isValid() -> a
net.minecraft.world.entity.ai.village.poi.PoiType -> bly -> net.minecraft.world.entity.ai.village.poi.VillagePlaceType
    F:java.util.Set matchingStates -> b
    F:int maxTickets -> c
    F:int validRange -> d
    F:java.util.function.Predicate NONE -> a
    M:boolean is(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.Set matchingStates() -> a
    M:int maxTickets() -> b
    M:int validRange() -> c
net.minecraft.world.entity.ai.village.poi.PoiTypes -> blz -> net.minecraft.world.entity.ai.village.poi.PoiTypes
    F:net.minecraft.resources.ResourceKey ARMORER -> a
    F:net.minecraft.resources.ResourceKey BUTCHER -> b
    F:net.minecraft.resources.ResourceKey CARTOGRAPHER -> c
    F:net.minecraft.resources.ResourceKey CLERIC -> d
    F:net.minecraft.resources.ResourceKey FARMER -> e
    F:net.minecraft.resources.ResourceKey FISHERMAN -> f
    F:net.minecraft.resources.ResourceKey FLETCHER -> g
    F:net.minecraft.resources.ResourceKey LEATHERWORKER -> h
    F:net.minecraft.resources.ResourceKey LIBRARIAN -> i
    F:net.minecraft.resources.ResourceKey MASON -> j
    F:net.minecraft.resources.ResourceKey SHEPHERD -> k
    F:net.minecraft.resources.ResourceKey TOOLSMITH -> l
    F:net.minecraft.resources.ResourceKey WEAPONSMITH -> m
    F:net.minecraft.resources.ResourceKey HOME -> n
    F:net.minecraft.resources.ResourceKey MEETING -> o
    F:net.minecraft.resources.ResourceKey BEEHIVE -> p
    F:net.minecraft.resources.ResourceKey BEE_NEST -> q
    F:net.minecraft.resources.ResourceKey NETHER_PORTAL -> r
    F:net.minecraft.resources.ResourceKey LODESTONE -> s
    F:net.minecraft.resources.ResourceKey LIGHTNING_ROD -> t
    F:java.util.Set BEDS -> v
    F:java.util.Set CAULDRONS -> w
    F:java.util.Map TYPE_BY_STATE -> x
    F:java.util.Set ALL_STATES -> u
    M:java.util.Set getBlockStates(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.resources.ResourceKey createKey(java.lang.String) -> a
    M:net.minecraft.world.entity.ai.village.poi.VillagePlaceType register(net.minecraft.core.IRegistry,net.minecraft.resources.ResourceKey,java.util.Set,int,int) -> a
    M:void registerBlockStates(net.minecraft.core.Holder) -> a
    M:java.util.Optional forState(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.entity.ai.village.poi.VillagePlaceType bootstrap(net.minecraft.core.IRegistry) -> a
net.minecraft.world.entity.ambient.AmbientCreature -> bmb -> net.minecraft.world.entity.ambient.EntityAmbient
    M:boolean canBeLeashed(net.minecraft.world.entity.player.EntityHuman) -> a
net.minecraft.world.entity.ambient.Bat -> bmc -> net.minecraft.world.entity.ambient.EntityBat
    F:float FLAP_DEGREES_PER_TICK -> b
    F:int TICKS_PER_FLAP -> c
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_FLAGS -> d
    F:int FLAG_RESTING -> e
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:boolean isPushable() -> bm
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:boolean isResting() -> q
    M:void setResting(boolean) -> v
    M:void tick() -> k
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
    M:boolean isIgnoringBlockTriggers() -> cn
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:boolean checkBatSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean isHalloween() -> t
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
net.minecraft.world.entity.animal.AbstractFish -> bme -> net.minecraft.world.entity.animal.EntityFish
    F:net.minecraft.network.syncher.DataWatcherObject FROM_BUCKET -> b
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:boolean removeWhenFarAway(double) -> h
    M:int getMaxSpawnClusterSize() -> fp
    M:boolean fromBucket() -> q
    M:void setFromBucket(boolean) -> v
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.navigation.NavigationAbstract createNavigation(net.minecraft.world.level.World) -> a
    M:void travel(net.minecraft.world.phys.Vec3D) -> g
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:void saveToBucketTag(net.minecraft.world.item.ItemStack) -> m
    M:void loadFromBucketTag(net.minecraft.nbt.NBTTagCompound) -> c
    M:net.minecraft.sounds.SoundEffect getPickupSound() -> t
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
net.minecraft.world.entity.animal.AbstractFish$FishMoveControl -> bme$a -> net.minecraft.world.entity.animal.EntityFish$a
    F:net.minecraft.world.entity.animal.EntityFish fish -> l
    M:void tick() -> a
net.minecraft.world.entity.animal.AbstractFish$FishSwimGoal -> bme$b -> net.minecraft.world.entity.animal.EntityFish$b
    F:net.minecraft.world.entity.animal.EntityFish fish -> i
    M:boolean canUse() -> a
net.minecraft.world.entity.animal.AbstractGolem -> bmf -> net.minecraft.world.entity.animal.EntityGolem
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:boolean removeWhenFarAway(double) -> h
net.minecraft.world.entity.animal.AbstractSchoolingFish -> bmg -> net.minecraft.world.entity.animal.EntityFishSchool
    F:net.minecraft.world.entity.animal.EntityFishSchool leader -> b
    F:int schoolSize -> c
    M:void registerGoals() -> u
    M:int getMaxSpawnClusterSize() -> fp
    M:net.minecraft.world.entity.animal.EntityFishSchool startFollowing(net.minecraft.world.entity.animal.EntityFishSchool) -> a
    M:void tick() -> k
    M:void addFollowers(java.util.stream.Stream) -> a
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.entity.animal.AbstractSchoolingFish$SchoolSpawnGroupData -> bmg$a -> net.minecraft.world.entity.animal.EntityFishSchool$a
    F:net.minecraft.world.entity.animal.EntityFishSchool leader -> a
net.minecraft.world.entity.animal.Animal -> bmh -> net.minecraft.world.entity.animal.EntityAnimal
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:float getWalkTargetValue(net.minecraft.core.BlockPosition,net.minecraft.world.level.IWorldReader) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:double getMyRidingOffset() -> bt
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean checkAnimalSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean isBrightEnoughToSpawn(net.minecraft.world.level.IBlockLightAccess,net.minecraft.core.BlockPosition) -> a
    M:boolean removeWhenFarAway(double) -> h
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:void usePlayerItem(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.item.ItemStack) -> a
    M:void setInLove(net.minecraft.world.entity.player.EntityHuman) -> f
    M:void setInLoveTime(int) -> s
    M:boolean canMate(net.minecraft.world.entity.animal.EntityAnimal) -> a
    M:void spawnChildFromBreeding(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.EntityAnimal) -> a
    M:void handleEntityEvent(byte) -> a
net.minecraft.world.entity.animal.Bee -> bmi -> net.minecraft.world.entity.animal.EntityBee
    F:net.minecraft.network.syncher.DataWatcherObject DATA_FLAGS_ID -> ch
    F:net.minecraft.network.syncher.DataWatcherObject DATA_REMAINING_ANGER_TIME -> ci
    F:int FLAG_ROLL -> cj
    F:int FLAG_HAS_STUNG -> ck
    F:int FLAG_HAS_NECTAR -> cl
    F:int STING_DEATH_COUNTDOWN -> cm
    F:int TICKS_BEFORE_GOING_TO_KNOWN_FLOWER -> cn
    F:int TICKS_WITHOUT_NECTAR_BEFORE_GOING_HOME -> co
    F:int MIN_ATTACK_DIST -> cp
    F:int MAX_CROPS_GROWABLE -> cq
    F:int POISON_SECONDS_NORMAL -> cr
    F:int POISON_SECONDS_HARD -> cs
    F:int TOO_FAR_DISTANCE -> ct
    F:int HIVE_CLOSE_ENOUGH_DISTANCE -> cu
    F:int PATHFIND_TO_HIVE_WHEN_CLOSER_THAN -> cv
    F:int HIVE_SEARCH_DISTANCE -> cw
    F:java.lang.String TAG_CROPS_GROWN_SINCE_POLLINATION -> ca
    F:java.lang.String TAG_CANNOT_ENTER_HIVE_TICKS -> cb
    F:java.lang.String TAG_TICKS_SINCE_POLLINATION -> cc
    F:java.lang.String TAG_HAS_STUNG -> cd
    F:java.lang.String TAG_HAS_NECTAR -> ce
    F:java.lang.String TAG_FLOWER_POS -> cf
    F:java.lang.String TAG_HIVE_POS -> cg
    F:net.minecraft.util.valueproviders.UniformInt PERSISTENT_ANGER_TIME -> cx
    F:java.util.UUID persistentAngerTarget -> cy
    F:float rollAmount -> cz
    M:float getWalkTargetValue(net.minecraft.core.BlockPosition,net.minecraft.world.level.IWorldReader) -> a
    M:void registerGoals() -> u
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:void tick() -> k
    M:void spawnFluidParticle(net.minecraft.world.level.World,double,double,double,double,double,net.minecraft.core.particles.ParticleParam) -> a
    M:void pathfindRandomlyTowards(net.minecraft.core.BlockPosition) -> h
    M:net.minecraft.core.BlockPosition getSavedFlowerPos() -> q
    M:boolean hasSavedFlowerPos() -> t
    M:void setSavedFlowerPos(net.minecraft.core.BlockPosition) -> g
    M:boolean isTiredOfLookingForNectar() -> ga
    M:boolean wantsToEnterHive() -> gb
    M:void setStayOutOfHiveCountdown(int) -> t
    M:float getRollAmount(float) -> y
    M:void updateRollAmount() -> gc
    M:boolean isHiveNearFire() -> gd
    M:int getRemainingPersistentAngerTime() -> a
    M:void setRemainingPersistentAngerTime(int) -> a
    M:java.util.UUID getPersistentAngerTarget() -> b
    M:void setPersistentAngerTarget(java.util.UUID) -> a
    M:void startPersistentAngerTimer() -> c
    M:boolean doesHiveHaveSpace(net.minecraft.core.BlockPosition) -> i
    M:int getCropsGrownSincePollination() -> ge
    M:void resetNumCropsGrownSincePollination() -> gf
    M:void incrementNumCropsGrownSincePollination() -> gg
    M:boolean isHiveValid() -> gh
    M:void setHasNectar(boolean) -> v
    M:void setHasStung(boolean) -> w
    M:boolean isRolling() -> gi
    M:void setRolling(boolean) -> x
    M:boolean isTooFarAway(net.minecraft.core.BlockPosition) -> j
    M:void setFlag(int,boolean) -> d
    M:boolean getFlag(int) -> u
    M:net.minecraft.world.entity.ai.navigation.NavigationAbstract createNavigation(net.minecraft.world.level.World) -> a
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:boolean isFlowerValid(net.minecraft.core.BlockPosition) -> k
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.world.entity.animal.EntityBee getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> b
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:net.minecraft.world.entity.EnumMonsterType getMobType() -> ez
    M:void jumpInLiquid(net.minecraft.tags.TagKey) -> c
    M:boolean closerThan(net.minecraft.core.BlockPosition,int) -> b
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
    M:boolean isStableDestination(net.minecraft.core.BlockPosition) -> a
    M:void tick() -> c
net.minecraft.world.entity.animal.Bee$BaseBeeGoal -> bmi$a -> net.minecraft.world.entity.animal.EntityBee$a
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
net.minecraft.world.entity.animal.Bee$BeeAttackGoal -> bmi$b -> net.minecraft.world.entity.animal.EntityBee$b
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
net.minecraft.world.entity.animal.Bee$BeeBecomeAngryTargetGoal -> bmi$c -> net.minecraft.world.entity.animal.EntityBee$c
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:boolean beeCanTarget() -> i
net.minecraft.world.entity.animal.Bee$BeeEnterHiveGoal -> bmi$d -> net.minecraft.world.entity.animal.EntityBee$d
    M:boolean canBeeUse() -> h
    M:boolean canBeeContinueToUse() -> i
    M:void start() -> c
net.minecraft.world.entity.animal.Bee$BeeGoToHiveGoal -> bmi$e -> net.minecraft.world.entity.animal.EntityBee$e
    F:int MAX_TRAVELLING_TICKS -> b
    F:int travellingTicks -> d
    F:int MAX_BLACKLISTED_TARGETS -> e
    F:java.util.List blacklistedTargets -> f
    F:net.minecraft.world.level.pathfinder.PathEntity lastPath -> g
    F:int TICKS_BEFORE_HIVE_DROP -> h
    F:int ticksStuck -> i
    M:boolean canBeeUse() -> h
    M:boolean canBeeContinueToUse() -> i
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
    M:boolean pathfindDirectlyTowards(net.minecraft.core.BlockPosition) -> a
    M:boolean isTargetBlacklisted(net.minecraft.core.BlockPosition) -> b
    M:void blacklistTarget(net.minecraft.core.BlockPosition) -> c
    M:void clearBlacklist() -> k
    M:void dropAndBlacklistHive() -> l
    M:void dropHive() -> m
    M:boolean hasReachedTarget(net.minecraft.core.BlockPosition) -> d
    M:boolean canContinueToUse() -> b
    M:boolean canUse() -> a
net.minecraft.world.entity.animal.Bee$BeeGoToKnownFlowerGoal -> bmi$f -> net.minecraft.world.entity.animal.EntityBee$f
    F:int MAX_TRAVELLING_TICKS -> c
    F:int travellingTicks -> d
    M:boolean canBeeUse() -> h
    M:boolean canBeeContinueToUse() -> i
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
    M:boolean wantsToGoToKnownFlower() -> k
    M:boolean canContinueToUse() -> b
    M:boolean canUse() -> a
net.minecraft.world.entity.animal.Bee$BeeGrowCropGoal -> bmi$g -> net.minecraft.world.entity.animal.EntityBee$g
    F:int GROW_CHANCE -> b
    M:boolean canBeeUse() -> h
    M:boolean canBeeContinueToUse() -> i
    M:void tick() -> e
net.minecraft.world.entity.animal.Bee$BeeHurtByOtherGoal -> bmi$h -> net.minecraft.world.entity.animal.EntityBee$h
    M:boolean canContinueToUse() -> b
    M:void alertOther(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.animal.Bee$BeeLocateHiveGoal -> bmi$i -> net.minecraft.world.entity.animal.EntityBee$i
    M:boolean canBeeUse() -> h
    M:boolean canBeeContinueToUse() -> i
    M:void start() -> c
    M:java.util.List findNearbyHivesWithSpace() -> k
net.minecraft.world.entity.animal.Bee$BeeLookControl -> bmi$j -> net.minecraft.world.entity.animal.EntityBee$j
    M:void tick() -> a
    M:boolean resetXRotOnTick() -> c
net.minecraft.world.entity.animal.Bee$BeePollinateGoal -> bmi$k -> net.minecraft.world.entity.animal.EntityBee$k
    F:int MIN_POLLINATION_TICKS -> c
    F:int MIN_FIND_FLOWER_RETRY_COOLDOWN -> d
    F:int MAX_FIND_FLOWER_RETRY_COOLDOWN -> e
    F:java.util.function.Predicate VALID_POLLINATION_BLOCKS -> f
    F:double ARRIVAL_THRESHOLD -> g
    F:int POSITION_CHANGE_CHANCE -> h
    F:float SPEED_MODIFIER -> i
    F:float HOVER_HEIGHT_WITHIN_FLOWER -> j
    F:float HOVER_POS_OFFSET -> k
    F:int successfulPollinatingTicks -> l
    F:int lastSoundPlayedTick -> m
    F:boolean pollinating -> n
    F:net.minecraft.world.phys.Vec3D hoverPos -> o
    F:int pollinatingTicks -> p
    F:int MAX_POLLINATING_TICKS -> q
    M:boolean canBeeUse() -> h
    M:boolean canBeeContinueToUse() -> i
    M:boolean hasPollinatedLongEnough() -> k
    M:boolean isPollinating() -> l
    M:void stopPollinating() -> m
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
    M:void setWantedPos() -> n
    M:float getOffset() -> o
    M:java.util.Optional findNearbyFlower() -> p
    M:java.util.Optional findNearestBlock(java.util.function.Predicate,double) -> a
net.minecraft.world.entity.animal.Bee$BeeWanderGoal -> bmi$l -> net.minecraft.world.entity.animal.EntityBee$l
    F:int WANDER_THRESHOLD -> b
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:net.minecraft.world.phys.Vec3D findPos() -> h
net.minecraft.world.entity.animal.Bucketable -> bmj -> net.minecraft.world.entity.animal.Bucketable
    M:void saveDefaultDataToBucketTag(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.item.ItemStack) -> a
    M:void loadDefaultDataFromBucketTag(net.minecraft.world.entity.EntityInsentient,net.minecraft.nbt.NBTTagCompound) -> a
    M:java.util.Optional bucketMobPickup(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.animal.Cat -> bmk -> net.minecraft.world.entity.animal.EntityCat
    F:double TEMPT_SPEED_MOD -> ca
    F:double WALK_SPEED_MOD -> cb
    F:double SPRINT_SPEED_MOD -> cc
    F:net.minecraft.world.item.crafting.RecipeItemStack TEMPT_INGREDIENT -> cd
    F:net.minecraft.network.syncher.DataWatcherObject DATA_VARIANT_ID -> ce
    F:net.minecraft.network.syncher.DataWatcherObject IS_LYING -> cf
    F:net.minecraft.network.syncher.DataWatcherObject RELAX_STATE_ONE -> cg
    F:net.minecraft.network.syncher.DataWatcherObject DATA_COLLAR_COLOR -> ch
    F:net.minecraft.world.entity.animal.Cat$CatAvoidEntityGoal avoidPlayersGoal -> ci
    F:net.minecraft.world.entity.ai.goal.PathfinderGoalTempt temptGoal -> cj
    F:float lieDownAmount -> ck
    F:float lieDownAmountO -> cl
    F:float lieDownAmountTail -> cm
    F:float lieDownAmountOTail -> cn
    F:float relaxStateOneAmount -> co
    F:float relaxStateOneAmountO -> cp
    M:void registerGoals() -> u
    M:void setCatVariant(net.minecraft.world.entity.animal.CatVariant) -> a
    M:void setLying(boolean) -> z
    M:void setCollarColor(net.minecraft.world.item.EnumColor) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:void usePlayerItem(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.item.ItemStack) -> a
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:void tick() -> k
    M:void handleLieDown() -> ga
    M:void updateLieDownAmount() -> gb
    M:void updateRelaxStateOneAmount() -> gc
    M:float getLieDownAmount(float) -> y
    M:float getLieDownAmountTail(float) -> z
    M:net.minecraft.world.entity.animal.EntityCat getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> b
    M:boolean canMate(net.minecraft.world.entity.animal.EntityAnimal) -> a
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:boolean removeWhenFarAway(double) -> h
    M:void reassessTameGoals() -> t
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
net.minecraft.world.entity.animal.Cat$CatAvoidEntityGoal -> bmk$a -> net.minecraft.world.entity.animal.EntityCat$a
    F:net.minecraft.world.entity.animal.EntityCat cat -> i
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
net.minecraft.world.entity.animal.Cat$CatRelaxOnOwnerGoal -> bmk$b -> net.minecraft.world.entity.animal.EntityCat$b
    F:net.minecraft.world.entity.animal.EntityCat cat -> a
    F:net.minecraft.world.entity.player.EntityHuman ownerPlayer -> b
    F:net.minecraft.core.BlockPosition goalPos -> c
    F:int onBedTicks -> d
    M:boolean canUse() -> a
    M:boolean spaceIsOccupied() -> h
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void giveMorningGift() -> i
    M:void tick() -> e
net.minecraft.world.entity.animal.Cat$CatTemptGoal -> bmk$c -> net.minecraft.world.entity.animal.EntityCat$PathfinderGoalTemptChance
    F:net.minecraft.world.entity.player.EntityHuman selectedPlayer -> c
    F:net.minecraft.world.entity.animal.EntityCat cat -> d
    M:void tick() -> e
    M:boolean canScare() -> h
    M:boolean canUse() -> a
net.minecraft.world.entity.animal.CatVariant -> bml -> net.minecraft.world.entity.animal.CatVariant
    F:net.minecraft.resources.MinecraftKey texture -> l
    F:net.minecraft.world.entity.animal.CatVariant TABBY -> a
    F:net.minecraft.world.entity.animal.CatVariant BLACK -> b
    F:net.minecraft.world.entity.animal.CatVariant RED -> c
    F:net.minecraft.world.entity.animal.CatVariant SIAMESE -> d
    F:net.minecraft.world.entity.animal.CatVariant BRITISH_SHORTHAIR -> e
    F:net.minecraft.world.entity.animal.CatVariant CALICO -> f
    F:net.minecraft.world.entity.animal.CatVariant PERSIAN -> g
    F:net.minecraft.world.entity.animal.CatVariant RAGDOLL -> h
    F:net.minecraft.world.entity.animal.CatVariant WHITE -> i
    F:net.minecraft.world.entity.animal.CatVariant JELLIE -> j
    F:net.minecraft.world.entity.animal.CatVariant ALL_BLACK -> k
    M:net.minecraft.world.entity.animal.CatVariant register(java.lang.String,java.lang.String) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.resources.MinecraftKey texture() -> a
net.minecraft.world.entity.animal.Chicken -> bmm -> net.minecraft.world.entity.animal.EntityChicken
    F:net.minecraft.world.item.crafting.RecipeItemStack FOOD_ITEMS -> cf
    F:float oFlapSpeed -> ca
    F:float oFlap -> cb
    F:float flapping -> cc
    F:float nextFlap -> cg
    F:int eggTime -> cd
    F:boolean isChickenJockey -> ce
    M:void registerGoals() -> u
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> q
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:net.minecraft.world.entity.animal.EntityChicken getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> b
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:boolean removeWhenFarAway(double) -> h
    M:void positionRider(net.minecraft.world.entity.Entity) -> i
    M:boolean isChickenJockey() -> t
    M:void setChickenJockey(boolean) -> v
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
net.minecraft.world.entity.animal.Cod -> bmn -> net.minecraft.world.entity.animal.EntityCod
    M:net.minecraft.world.item.ItemStack getBucketItemStack() -> b
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
net.minecraft.world.entity.animal.Cow -> bmo -> net.minecraft.world.entity.animal.EntityCow
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> q
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:net.minecraft.world.entity.animal.EntityCow getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> b
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
net.minecraft.world.entity.animal.Dolphin -> bmp -> net.minecraft.world.entity.animal.EntityDolphin
    F:net.minecraft.network.syncher.DataWatcherObject TREASURE_POS -> d
    F:net.minecraft.network.syncher.DataWatcherObject GOT_FISH -> e
    F:int TOTAL_AIR_SUPPLY -> b
    F:java.util.function.Predicate ALLOWED_ITEMS -> c
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:void handleAirSupply(int) -> a
    M:void setTreasurePos(net.minecraft.core.BlockPosition) -> g
    M:net.minecraft.core.BlockPosition getTreasurePos() -> n
    M:boolean gotFish() -> q
    M:void setGotFish(boolean) -> v
    M:int getMoistnessLevel() -> t
    M:void setMoisntessLevel(int) -> b
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.navigation.NavigationAbstract createNavigation(net.minecraft.world.level.World) -> a
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:int getMaxAirSupply() -> ca
    M:int increaseAirSupply(int) -> n
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:boolean canRide(net.minecraft.world.entity.Entity) -> l
    M:boolean canTakeItem(net.minecraft.world.item.ItemStack) -> g
    M:void pickUpItem(net.minecraft.world.entity.item.EntityItem) -> b
    M:void tick() -> k
    M:void handleEntityEvent(byte) -> a
    M:void addParticlesAroundSelf(net.minecraft.core.particles.ParticleParam) -> a
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:void travel(net.minecraft.world.phys.Vec3D) -> g
    M:boolean canBeLeashed(net.minecraft.world.entity.player.EntityHuman) -> a
net.minecraft.world.entity.animal.Dolphin$DolphinSwimToTreasureGoal -> bmp$a -> net.minecraft.world.entity.animal.EntityDolphin$a
    F:net.minecraft.world.entity.animal.EntityDolphin dolphin -> a
    F:boolean stuck -> b
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.animal.Dolphin$DolphinSwimWithPlayerGoal -> bmp$b -> net.minecraft.world.entity.animal.EntityDolphin$b
    F:net.minecraft.world.entity.animal.EntityDolphin dolphin -> a
    F:double speedModifier -> b
    F:net.minecraft.world.entity.player.EntityHuman player -> c
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.animal.Dolphin$PlayWithItemsGoal -> bmp$c -> net.minecraft.world.entity.animal.EntityDolphin$c
    F:int cooldown -> b
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
    M:void drop(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.entity.animal.FlyingAnimal -> bmq -> net.minecraft.world.entity.animal.EntityBird
net.minecraft.world.entity.animal.Fox -> bmr -> net.minecraft.world.entity.animal.EntityFox
    F:net.minecraft.network.syncher.DataWatcherObject DATA_TYPE_ID -> cb
    F:net.minecraft.network.syncher.DataWatcherObject DATA_FLAGS_ID -> cc
    F:int FLAG_SITTING -> cd
    F:int FLAG_POUNCING -> ca
    F:int FLAG_SLEEPING -> ce
    F:int FLAG_FACEPLANTED -> cf
    F:int FLAG_DEFENDING -> cg
    F:net.minecraft.network.syncher.DataWatcherObject DATA_TRUSTED_ID_0 -> ch
    F:net.minecraft.network.syncher.DataWatcherObject DATA_TRUSTED_ID_1 -> ci
    F:java.util.function.Predicate ALLOWED_ITEMS -> cj
    F:java.util.function.Predicate TRUSTED_TARGET_SELECTOR -> ck
    F:java.util.function.Predicate STALKABLE_PREY -> cl
    F:java.util.function.Predicate AVOID_PLAYERS -> cm
    F:int MIN_TICKS_BEFORE_EAT -> cn
    F:net.minecraft.world.entity.ai.goal.PathfinderGoal landTargetGoal -> co
    F:net.minecraft.world.entity.ai.goal.PathfinderGoal turtleEggTargetGoal -> cp
    F:net.minecraft.world.entity.ai.goal.PathfinderGoal fishTargetGoal -> cq
    F:float interestedAngle -> cr
    F:float interestedAngleO -> cs
    F:float crouchAmount -> ct
    F:float crouchAmountO -> cu
    F:int ticksSinceEaten -> cv
    M:void registerGoals() -> u
    M:net.minecraft.sounds.SoundEffect getEatingSound(net.minecraft.world.item.ItemStack) -> e
    M:boolean canEat(net.minecraft.world.item.ItemStack) -> m
    M:void populateDefaultEquipmentSlots(net.minecraft.util.RandomSource,net.minecraft.world.DifficultyDamageScaler) -> a
    M:void handleEntityEvent(byte) -> a
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> q
    M:net.minecraft.world.entity.animal.EntityFox getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> b
    M:boolean checkFoxSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> c
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:void usePlayerItem(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.item.ItemStack) -> a
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:net.minecraft.world.entity.animal.EntityFox$Type getFoxType() -> t
    M:void setFoxType(net.minecraft.world.entity.animal.EntityFox$Type) -> a
    M:void addTrustedUUID(java.util.UUID) -> b
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void setSitting(boolean) -> v
    M:void setFaceplanted(boolean) -> z
    M:boolean isSleeping() -> fk
    M:void setFlag(int,boolean) -> d
    M:boolean getFlag(int) -> t
    M:boolean canTakeItem(net.minecraft.world.item.ItemStack) -> g
    M:boolean canHoldItem(net.minecraft.world.item.ItemStack) -> k
    M:void spitOutItem(net.minecraft.world.item.ItemStack) -> o
    M:void dropItemStack(net.minecraft.world.item.ItemStack) -> p
    M:void pickUpItem(net.minecraft.world.entity.item.EntityItem) -> b
    M:void tick() -> k
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:void onOffspringSpawnedFromEgg(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.entity.EntityInsentient) -> a
    M:void setIsPouncing(boolean) -> w
    M:void setIsCrouching(boolean) -> x
    M:void setIsInterested(boolean) -> y
    M:float getHeadRollAngle(float) -> y
    M:float getCrouchAmount(float) -> z
    M:void setTarget(net.minecraft.world.entity.EntityLiving) -> h
    M:int calculateFallDamage(float,float) -> d
    M:boolean canMove() -> ga
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:boolean trusts(java.util.UUID) -> c
    M:void dropAllDeathLoot(net.minecraft.world.damagesource.DamageSource) -> f
    M:boolean isPathClear(net.minecraft.world.entity.animal.EntityFox,net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
net.minecraft.world.entity.animal.Fox$DefendTrustedTargetGoal -> bmr$a -> net.minecraft.world.entity.animal.EntityFox$a
    F:net.minecraft.world.entity.EntityLiving trustedLastHurtBy -> j
    F:net.minecraft.world.entity.EntityLiving trustedLastHurt -> k
    F:int timestamp -> l
    M:boolean canUse() -> a
    M:void start() -> c
net.minecraft.world.entity.animal.Fox$FaceplantGoal -> bmr$b -> net.minecraft.world.entity.animal.EntityFox$b
    F:int countdown -> a
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.animal.Fox$FoxAlertableEntitiesSelector -> bmr$c -> net.minecraft.world.entity.animal.EntityFox$c
    M:boolean test(net.minecraft.world.entity.EntityLiving) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.entity.animal.Fox$FoxBehaviorGoal -> bmr$d -> net.minecraft.world.entity.animal.EntityFox$d
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition alertableTargeting -> b
    M:boolean hasShelter() -> h
    M:boolean alertable() -> i
net.minecraft.world.entity.animal.Fox$FoxBreedGoal -> bmr$e -> net.minecraft.world.entity.animal.EntityFox$e
    M:void start() -> c
    M:void breed() -> g
net.minecraft.world.entity.animal.Fox$FoxEatBerriesGoal -> bmr$f -> net.minecraft.world.entity.animal.EntityFox$f
    F:int WAIT_TICKS -> i
    F:int ticksWaited -> g
    M:double acceptedDistance() -> i
    M:boolean shouldRecalculatePath() -> l
    M:boolean isValidTarget(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void tick() -> e
    M:void onReachedTarget() -> o
    M:void pickGlowBerry(net.minecraft.world.level.block.state.IBlockData) -> a
    M:void pickSweetBerries(net.minecraft.world.level.block.state.IBlockData) -> b
    M:boolean canUse() -> a
    M:void start() -> c
net.minecraft.world.entity.animal.Fox$FoxFloatGoal -> bmr$g -> net.minecraft.world.entity.animal.EntityFox$g
    M:void start() -> c
    M:boolean canUse() -> a
net.minecraft.world.entity.animal.Fox$FoxFollowParentGoal -> bmr$h -> net.minecraft.world.entity.animal.EntityFox$h
    F:net.minecraft.world.entity.animal.EntityFox fox -> e
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
net.minecraft.world.entity.animal.Fox$FoxGroupData -> bmr$i -> net.minecraft.world.entity.animal.EntityFox$i
    F:net.minecraft.world.entity.animal.EntityFox$Type type -> a
net.minecraft.world.entity.animal.Fox$FoxLookAtPlayerGoal -> bmr$j -> net.minecraft.world.entity.animal.EntityFox$j
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
net.minecraft.world.entity.animal.Fox$FoxLookControl -> bmr$k -> net.minecraft.world.entity.animal.EntityFox$k
    M:void tick() -> a
    M:boolean resetXRotOnTick() -> c
net.minecraft.world.entity.animal.Fox$FoxMeleeAttackGoal -> bmr$l -> net.minecraft.world.entity.animal.EntityFox$l
    M:void checkAndPerformAttack(net.minecraft.world.entity.EntityLiving,double) -> a
    M:void start() -> c
    M:boolean canUse() -> a
net.minecraft.world.entity.animal.Fox$FoxMoveControl -> bmr$m -> net.minecraft.world.entity.animal.EntityFox$m
    M:void tick() -> a
net.minecraft.world.entity.animal.Fox$FoxPanicGoal -> bmr$n -> net.minecraft.world.entity.animal.EntityFox$n
    M:boolean shouldPanic() -> h
net.minecraft.world.entity.animal.Fox$FoxPounceGoal -> bmr$o -> net.minecraft.world.entity.animal.EntityFox$o
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.animal.Fox$FoxSearchForItemsGoal -> bmr$p -> net.minecraft.world.entity.animal.EntityFox$p
    M:boolean canUse() -> a
    M:void tick() -> e
    M:void start() -> c
net.minecraft.world.entity.animal.Fox$FoxStrollThroughVillageGoal -> bmr$q -> net.minecraft.world.entity.animal.EntityFox$q
    M:void start() -> c
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:boolean canFoxMove() -> h
net.minecraft.world.entity.animal.Fox$PerchAndSearchGoal -> bmr$r -> net.minecraft.world.entity.animal.EntityFox$r
    F:double relX -> c
    F:double relZ -> d
    F:int lookTime -> e
    F:int looksRemaining -> f
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
    M:void resetLook() -> k
net.minecraft.world.entity.animal.Fox$SeekShelterGoal -> bmr$s -> net.minecraft.world.entity.animal.EntityFox$s
    F:int interval -> c
    M:boolean canUse() -> a
    M:void start() -> c
net.minecraft.world.entity.animal.Fox$SleepGoal -> bmr$t -> net.minecraft.world.entity.animal.EntityFox$t
    F:int WAIT_TIME_BEFORE_SLEEP -> c
    F:int countdown -> d
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:boolean canSleep() -> k
    M:void stop() -> d
    M:void start() -> c
net.minecraft.world.entity.animal.Fox$StalkPreyGoal -> bmr$u -> net.minecraft.world.entity.animal.EntityFox$u
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.animal.Fox$Type -> bmr$v -> net.minecraft.world.entity.animal.EntityFox$Type
    F:net.minecraft.world.entity.animal.EntityFox$Type RED -> a
    F:net.minecraft.world.entity.animal.EntityFox$Type SNOW -> b
    F:java.util.Map BY_NAME -> d
    F:int id -> e
    F:java.lang.String name -> f
    M:java.lang.String getName() -> a
    M:int getId() -> b
    M:net.minecraft.world.entity.animal.EntityFox$Type byName(java.lang.String) -> a
    M:net.minecraft.world.entity.animal.EntityFox$Type byId(int) -> a
    M:net.minecraft.world.entity.animal.EntityFox$Type byBiome(net.minecraft.core.Holder) -> a
net.minecraft.world.entity.animal.FrogVariant -> bms -> net.minecraft.world.entity.animal.FrogVariant
    F:net.minecraft.resources.MinecraftKey texture -> d
    F:net.minecraft.world.entity.animal.FrogVariant TEMPERATE -> a
    F:net.minecraft.world.entity.animal.FrogVariant WARM -> b
    F:net.minecraft.world.entity.animal.FrogVariant COLD -> c
    M:net.minecraft.world.entity.animal.FrogVariant register(java.lang.String,java.lang.String) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.resources.MinecraftKey texture() -> a
net.minecraft.world.entity.animal.IronGolem -> bmt -> net.minecraft.world.entity.animal.EntityIronGolem
    F:net.minecraft.network.syncher.DataWatcherObject DATA_FLAGS_ID -> c
    F:int IRON_INGOT_HEAL_AMOUNT -> d
    F:int attackAnimationTick -> e
    F:java.util.UUID persistentAngerTarget -> ca
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:int decreaseAirSupply(int) -> m
    M:boolean canAttackType(net.minecraft.world.entity.EntityTypes) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void startPersistentAngerTimer() -> c
    M:void setRemainingPersistentAngerTime(int) -> a
    M:int getRemainingPersistentAngerTime() -> a
    M:void setPersistentAngerTarget(java.util.UUID) -> a
    M:java.util.UUID getPersistentAngerTarget() -> b
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:net.minecraft.world.entity.animal.EntityIronGolem$CrackLevel getCrackiness() -> q
    M:void handleEntityEvent(byte) -> a
    M:int getAttackAnimationTick() -> t
    M:void offerFlower(boolean) -> v
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void setPlayerCreated(boolean) -> w
    M:void die(net.minecraft.world.damagesource.DamageSource) -> a
    M:boolean checkSpawnObstruction(net.minecraft.world.level.IWorldReader) -> a
net.minecraft.world.entity.animal.IronGolem$Crackiness -> bmt$a -> net.minecraft.world.entity.animal.EntityIronGolem$CrackLevel
    F:net.minecraft.world.entity.animal.EntityIronGolem$CrackLevel NONE -> a
    F:net.minecraft.world.entity.animal.EntityIronGolem$CrackLevel LOW -> b
    F:net.minecraft.world.entity.animal.EntityIronGolem$CrackLevel MEDIUM -> c
    F:net.minecraft.world.entity.animal.EntityIronGolem$CrackLevel HIGH -> d
    F:java.util.List BY_DAMAGE -> e
    F:float fraction -> f
    M:net.minecraft.world.entity.animal.EntityIronGolem$CrackLevel byFraction(float) -> a
net.minecraft.world.entity.animal.MushroomCow -> bmu -> net.minecraft.world.entity.animal.EntityMushroomCow
    F:net.minecraft.world.effect.MobEffectList effect -> ca
    F:int effectDuration -> cb
    F:java.util.UUID lastLightningBoltUUID -> cc
    M:float getWalkTargetValue(net.minecraft.core.BlockPosition,net.minecraft.world.level.IWorldReader) -> a
    M:boolean checkMushroomSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> c
    M:void thunderHit(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLightning) -> a
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:void shear(net.minecraft.sounds.SoundCategory) -> a
    M:boolean readyForShearing() -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:java.util.Optional getEffectFromItemStack(net.minecraft.world.item.ItemStack) -> m
    M:void setMushroomType(net.minecraft.world.entity.animal.EntityMushroomCow$Type) -> a
    M:net.minecraft.world.entity.animal.EntityMushroomCow$Type getMushroomType() -> t
    M:net.minecraft.world.entity.animal.EntityMushroomCow getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> c
    M:net.minecraft.world.entity.animal.EntityMushroomCow$Type getOffspringType(net.minecraft.world.entity.animal.EntityMushroomCow) -> a
    M:net.minecraft.world.entity.animal.EntityCow getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> b
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
net.minecraft.world.entity.animal.MushroomCow$MushroomType -> bmu$a -> net.minecraft.world.entity.animal.EntityMushroomCow$Type
    F:net.minecraft.world.entity.animal.EntityMushroomCow$Type RED -> a
    F:net.minecraft.world.entity.animal.EntityMushroomCow$Type BROWN -> b
    F:java.lang.String type -> c
    F:net.minecraft.world.level.block.state.IBlockData blockState -> d
    M:net.minecraft.world.level.block.state.IBlockData getBlockState() -> a
    M:net.minecraft.world.entity.animal.EntityMushroomCow$Type byType(java.lang.String) -> a
net.minecraft.world.entity.animal.Ocelot -> bmv -> net.minecraft.world.entity.animal.EntityOcelot
    F:double SPRINT_SPEED_MOD -> ca
    F:net.minecraft.world.item.crafting.RecipeItemStack TEMPT_INGREDIENT -> cb
    F:net.minecraft.network.syncher.DataWatcherObject DATA_TRUSTING -> cc
    F:net.minecraft.world.entity.animal.Ocelot$OcelotAvoidEntityGoal ocelotAvoidPlayersGoal -> cd
    F:net.minecraft.world.entity.animal.Ocelot$OcelotTemptGoal temptGoal -> ce
    M:void setTrusting(boolean) -> v
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void registerGoals() -> u
    M:boolean removeWhenFarAway(double) -> h
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> q
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:void handleEntityEvent(byte) -> a
    M:void spawnTrustingParticles(boolean) -> w
    M:void reassessTrustingGoals() -> t
    M:net.minecraft.world.entity.animal.EntityOcelot getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> b
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:boolean checkOcelotSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> c
    M:boolean checkSpawnObstruction(net.minecraft.world.level.IWorldReader) -> a
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
net.minecraft.world.entity.animal.Ocelot$OcelotAvoidEntityGoal -> bmv$a -> net.minecraft.world.entity.animal.EntityOcelot$a
    F:net.minecraft.world.entity.animal.EntityOcelot ocelot -> i
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
net.minecraft.world.entity.animal.Ocelot$OcelotTemptGoal -> bmv$b -> net.minecraft.world.entity.animal.EntityOcelot$b
    F:net.minecraft.world.entity.animal.EntityOcelot ocelot -> c
    M:boolean canScare() -> h
net.minecraft.world.entity.animal.Panda -> bmw -> net.minecraft.world.entity.animal.EntityPanda
    F:net.minecraft.network.syncher.DataWatcherObject UNHAPPY_COUNTER -> ca
    F:net.minecraft.network.syncher.DataWatcherObject SNEEZE_COUNTER -> cb
    F:net.minecraft.network.syncher.DataWatcherObject EAT_COUNTER -> cc
    F:net.minecraft.network.syncher.DataWatcherObject MAIN_GENE_ID -> cd
    F:net.minecraft.network.syncher.DataWatcherObject HIDDEN_GENE_ID -> ce
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_FLAGS -> cf
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition BREED_TARGETING -> cg
    F:int FLAG_SNEEZE -> ch
    F:int FLAG_ROLL -> ci
    F:int FLAG_SIT -> cj
    F:int FLAG_ON_BACK -> ck
    F:int EAT_TICK_INTERVAL -> cl
    F:int TOTAL_UNHAPPY_TIME -> cm
    F:boolean gotBamboo -> cn
    F:boolean didBite -> co
    F:net.minecraft.world.phys.Vec3D rollDelta -> cp
    F:float sitAmount -> cq
    F:float sitAmountO -> cr
    F:float onBackAmount -> cs
    F:float onBackAmountO -> ct
    F:float rollAmount -> cu
    F:float rollAmountO -> cv
    F:net.minecraft.world.entity.animal.Panda$PandaLookAtPlayerGoal lookAtPlayerGoal -> cw
    F:java.util.function.Predicate PANDA_ITEMS -> cx
    M:boolean canTakeItem(net.minecraft.world.item.ItemStack) -> g
    M:int getUnhappyCounter() -> q
    M:void setUnhappyCounter(int) -> t
    M:boolean isSneezing() -> t
    M:void sit(boolean) -> v
    M:void setOnBack(boolean) -> w
    M:void eat(boolean) -> x
    M:int getEatCounter() -> gg
    M:void setEatCounter(int) -> v
    M:void sneeze(boolean) -> y
    M:void setSneezeCounter(int) -> u
    M:void setMainGene(net.minecraft.world.entity.animal.EntityPanda$Gene) -> a
    M:void setHiddenGene(net.minecraft.world.entity.animal.EntityPanda$Gene) -> b
    M:void roll(boolean) -> z
    M:boolean getFlag(int) -> w
    M:void setFlag(int,boolean) -> d
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
    M:void registerGoals() -> u
    M:boolean isPlayful() -> ga
    M:boolean isBrown() -> gb
    M:boolean isWeak() -> gc
    M:boolean canBeLeashed(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:void tick() -> k
    M:boolean isScared() -> gd
    M:void handleEating() -> gh
    M:void addEatingParticles() -> gi
    M:void updateSitAmount() -> gj
    M:void updateOnBackAnimation() -> gk
    M:void updateRollAmount() -> gl
    M:float getSitAmount(float) -> y
    M:float getLieOnBackAmount(float) -> z
    M:void handleRoll() -> gm
    M:void afterSneeze() -> gn
    M:void pickUpItem(net.minecraft.world.entity.item.EntityItem) -> b
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:void setGeneFromParents(net.minecraft.world.entity.animal.EntityPanda,net.minecraft.world.entity.animal.EntityPanda) -> a
    M:net.minecraft.world.entity.animal.EntityPanda$Gene getOneOfGenesRandomly() -> go
    M:void setAttributes() -> ge
    M:void tryToSit() -> gp
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:boolean isFoodOrCake(net.minecraft.world.item.ItemStack) -> m
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:boolean canPerformAction() -> gf
net.minecraft.world.entity.animal.Panda$Gene -> bmw$a -> net.minecraft.world.entity.animal.EntityPanda$Gene
    F:net.minecraft.world.entity.animal.EntityPanda$Gene NORMAL -> a
    F:net.minecraft.world.entity.animal.EntityPanda$Gene LAZY -> b
    F:net.minecraft.world.entity.animal.EntityPanda$Gene WORRIED -> c
    F:net.minecraft.world.entity.animal.EntityPanda$Gene PLAYFUL -> d
    F:net.minecraft.world.entity.animal.EntityPanda$Gene BROWN -> e
    F:net.minecraft.world.entity.animal.EntityPanda$Gene WEAK -> f
    F:net.minecraft.world.entity.animal.EntityPanda$Gene AGGRESSIVE -> g
    F:int MAX_GENE -> i
    F:int id -> j
    F:java.lang.String name -> k
    F:boolean isRecessive -> l
    M:int getId() -> a
    M:java.lang.String getName() -> b
    M:boolean isRecessive() -> c
    M:net.minecraft.world.entity.animal.EntityPanda$Gene getVariantFromGenes(net.minecraft.world.entity.animal.EntityPanda$Gene,net.minecraft.world.entity.animal.EntityPanda$Gene) -> a
    M:net.minecraft.world.entity.animal.EntityPanda$Gene byId(int) -> a
    M:net.minecraft.world.entity.animal.EntityPanda$Gene byName(java.lang.String) -> a
    M:net.minecraft.world.entity.animal.EntityPanda$Gene getRandom(net.minecraft.util.RandomSource) -> a
net.minecraft.world.entity.animal.Panda$PandaAttackGoal -> bmw$b -> net.minecraft.world.entity.animal.EntityPanda$b
    F:net.minecraft.world.entity.animal.EntityPanda panda -> b
    M:boolean canUse() -> a
net.minecraft.world.entity.animal.Panda$PandaAvoidGoal -> bmw$c -> net.minecraft.world.entity.animal.EntityPanda$c
    F:net.minecraft.world.entity.animal.EntityPanda panda -> i
    M:boolean canUse() -> a
net.minecraft.world.entity.animal.Panda$PandaBreedGoal -> bmw$d -> net.minecraft.world.entity.animal.EntityPanda$d
    F:net.minecraft.world.entity.animal.EntityPanda panda -> d
    F:int unhappyCooldown -> e
    M:boolean canUse() -> a
    M:boolean canFindBamboo() -> h
net.minecraft.world.entity.animal.Panda$PandaHurtByTargetGoal -> bmw$e -> net.minecraft.world.entity.animal.EntityPanda$e
    F:net.minecraft.world.entity.animal.EntityPanda panda -> a
    M:boolean canContinueToUse() -> b
    M:void alertOther(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.animal.Panda$PandaLieOnBackGoal -> bmw$f -> net.minecraft.world.entity.animal.EntityPanda$f
    F:net.minecraft.world.entity.animal.EntityPanda panda -> a
    F:int cooldown -> b
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
net.minecraft.world.entity.animal.Panda$PandaLookAtPlayerGoal -> bmw$g -> net.minecraft.world.entity.animal.EntityPanda$g
    F:net.minecraft.world.entity.animal.EntityPanda panda -> h
    M:void setTarget(net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canContinueToUse() -> b
    M:boolean canUse() -> a
    M:void tick() -> e
net.minecraft.world.entity.animal.Panda$PandaMoveControl -> bmw$h -> net.minecraft.world.entity.animal.EntityPanda$h
    F:net.minecraft.world.entity.animal.EntityPanda panda -> l
    M:void tick() -> a
net.minecraft.world.entity.animal.Panda$PandaPanicGoal -> bmw$i -> net.minecraft.world.entity.animal.EntityPanda$i
    F:net.minecraft.world.entity.animal.EntityPanda panda -> h
    M:boolean shouldPanic() -> h
    M:boolean canContinueToUse() -> b
net.minecraft.world.entity.animal.Panda$PandaRollGoal -> bmw$j -> net.minecraft.world.entity.animal.EntityPanda$j
    F:net.minecraft.world.entity.animal.EntityPanda panda -> a
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
net.minecraft.world.entity.animal.Panda$PandaSitGoal -> bmw$k -> net.minecraft.world.entity.animal.EntityPanda$k
    F:int cooldown -> b
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void tick() -> e
    M:void start() -> c
    M:void stop() -> d
net.minecraft.world.entity.animal.Panda$PandaSneezeGoal -> bmw$l -> net.minecraft.world.entity.animal.EntityPanda$l
    F:net.minecraft.world.entity.animal.EntityPanda panda -> a
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
net.minecraft.world.entity.animal.Parrot -> bmx -> net.minecraft.world.entity.animal.EntityParrot
    F:net.minecraft.network.syncher.DataWatcherObject DATA_VARIANT_ID -> ce
    F:java.util.function.Predicate NOT_PARROT_PREDICATE -> cf
    F:net.minecraft.world.item.Item POISONOUS_FOOD -> cg
    F:java.util.Set TAME_FOOD -> ch
    F:int VARIANTS -> ci
    F:java.util.Map MOB_SOUND_MAP -> cj
    F:float flap -> ca
    F:float flapSpeed -> cb
    F:float oFlapSpeed -> cc
    F:float oFlap -> cd
    F:float flapping -> ck
    F:float nextFlap -> cl
    F:boolean partyParrot -> cm
    F:net.minecraft.core.BlockPosition jukebox -> cn
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.navigation.NavigationAbstract createNavigation(net.minecraft.world.level.World) -> a
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:void setRecordPlayingNearby(net.minecraft.core.BlockPosition,boolean) -> a
    M:boolean imitateNearbyMobs(net.minecraft.world.level.World,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:boolean checkParrotSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> c
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
    M:boolean canMate(net.minecraft.world.entity.animal.EntityAnimal) -> a
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getAmbient(net.minecraft.world.level.World,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.sounds.SoundEffect getImitatedSound(net.minecraft.world.entity.EntityTypes) -> b
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:float getPitch(net.minecraft.util.RandomSource) -> a
    M:boolean isPushable() -> bm
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void setVariant(int) -> t
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean test(net.minecraft.world.entity.EntityInsentient) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.entity.animal.Parrot$ParrotWanderGoal -> bmx$a -> net.minecraft.world.entity.animal.EntityParrot$a
    M:net.minecraft.world.phys.Vec3D getPosition() -> h
    M:net.minecraft.world.phys.Vec3D getTreePos() -> k
net.minecraft.world.entity.animal.Pig -> bmy -> net.minecraft.world.entity.animal.EntityPig
    F:net.minecraft.world.item.crafting.RecipeItemStack FOOD_ITEMS -> ca
    F:net.minecraft.world.entity.SaddleStorage steering -> cb
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> q
    M:boolean canBeControlledBy(net.minecraft.world.entity.Entity) -> a
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:boolean isSaddleable() -> c
    M:void dropEquipment() -> ej
    M:boolean isSaddled() -> d
    M:void equipSaddle(net.minecraft.sounds.SoundCategory) -> a
    M:net.minecraft.world.phys.Vec3D getDismountLocationForPassenger(net.minecraft.world.entity.EntityLiving) -> b
    M:void thunderHit(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLightning) -> a
    M:void travel(net.minecraft.world.phys.Vec3D) -> g
    M:float getSteeringSpeed() -> b
    M:void travelWithInput(net.minecraft.world.phys.Vec3D) -> a
    M:boolean boost() -> a
    M:net.minecraft.world.entity.animal.EntityPig getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> b
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
net.minecraft.world.entity.animal.PolarBear -> bmz -> net.minecraft.world.entity.animal.EntityPolarBear
    F:float clientSideStandAnimationO -> ca
    F:float clientSideStandAnimation -> cb
    F:int warningSoundTicks -> cc
    F:net.minecraft.util.valueproviders.UniformInt PERSISTENT_ANGER_TIME -> cd
    F:int remainingPersistentAngerTime -> ce
    F:java.util.UUID persistentAngerTarget -> cf
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> q
    M:boolean checkPolarBearSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> c
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void startPersistentAngerTimer() -> c
    M:void setRemainingPersistentAngerTime(int) -> a
    M:int getRemainingPersistentAngerTime() -> a
    M:void setPersistentAngerTarget(java.util.UUID) -> a
    M:java.util.UUID getPersistentAngerTarget() -> b
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void playWarningSound() -> t
    M:void tick() -> k
    M:net.minecraft.world.entity.EntitySize getDimensions(net.minecraft.world.entity.EntityPose) -> a
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:void setStanding(boolean) -> v
    M:float getStandingAnimationScale(float) -> y
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.entity.animal.PolarBear$PolarBearAttackPlayersGoal -> bmz$a -> net.minecraft.world.entity.animal.EntityPolarBear$a
    M:boolean canUse() -> a
    M:double getFollowDistance() -> l
net.minecraft.world.entity.animal.PolarBear$PolarBearHurtByTargetGoal -> bmz$b -> net.minecraft.world.entity.animal.EntityPolarBear$b
    M:void start() -> c
    M:void alertOther(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.animal.PolarBear$PolarBearMeleeAttackGoal -> bmz$c -> net.minecraft.world.entity.animal.EntityPolarBear$c
    M:void checkAndPerformAttack(net.minecraft.world.entity.EntityLiving,double) -> a
    M:void stop() -> d
    M:double getAttackReachSqr(net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.animal.PolarBear$PolarBearPanicGoal -> bmz$d -> net.minecraft.world.entity.animal.EntityPolarBear$d
    M:boolean shouldPanic() -> h
net.minecraft.world.entity.animal.Pufferfish -> bna -> net.minecraft.world.entity.animal.EntityPufferFish
    F:net.minecraft.network.syncher.DataWatcherObject PUFF_STATE -> e
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition targetingConditions -> ca
    F:int STATE_SMALL -> b
    F:int STATE_MID -> c
    F:int STATE_FULL -> d
    M:void setPuffState(int) -> b
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.item.ItemStack getBucketItemStack() -> b
    M:void registerGoals() -> u
    M:void tick() -> k
    M:void touch(net.minecraft.world.entity.EntityInsentient) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.world.entity.EntitySize getDimensions(net.minecraft.world.entity.EntityPose) -> a
    M:float getScale(int) -> c
net.minecraft.world.entity.animal.Pufferfish$PufferfishPuffGoal -> bna$a -> net.minecraft.world.entity.animal.EntityPufferFish$a
    F:net.minecraft.world.entity.animal.EntityPufferFish fish -> a
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
net.minecraft.world.entity.animal.Rabbit -> bnb -> net.minecraft.world.entity.animal.EntityRabbit
    F:double FOLLOW_SPEED_MOD -> ca
    F:double FLEE_SPEED_MOD -> cb
    F:double ATTACK_SPEED_MOD -> cc
    F:net.minecraft.network.syncher.DataWatcherObject DATA_TYPE_ID -> cm
    F:int TYPE_BROWN -> cd
    F:int TYPE_WHITE -> ce
    F:int TYPE_BLACK -> cf
    F:int TYPE_WHITE_SPLOTCHED -> cg
    F:int TYPE_GOLD -> ch
    F:int TYPE_SALT -> ci
    F:int TYPE_EVIL -> cj
    F:net.minecraft.resources.MinecraftKey KILLER_BUNNY -> cn
    F:int EVIL_ATTACK_POWER -> ck
    F:int EVIL_ARMOR_VALUE -> cl
    F:int MORE_CARROTS_DELAY -> co
    F:int jumpTicks -> cp
    F:int jumpDuration -> cq
    F:boolean wasOnGround -> cr
    F:int jumpDelayTicks -> cs
    F:int moreCarrotTicks -> ct
    M:void registerGoals() -> u
    M:float getJumpCompletion(float) -> y
    M:void setSpeedModifier(double) -> i
    M:void setJumping(boolean) -> q
    M:void startJumping() -> q
    M:boolean canSpawnSprintParticle() -> be
    M:void facePoint(double,double) -> b
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> t
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:boolean isTemptingItem(net.minecraft.world.item.ItemStack) -> m
    M:net.minecraft.world.entity.animal.EntityRabbit getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> b
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:void setRabbitType(int) -> t
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:int getRandomRabbitType(net.minecraft.world.level.GeneratorAccess) -> a
    M:boolean checkRabbitSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> c
    M:void handleEntityEvent(byte) -> a
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
net.minecraft.world.entity.animal.Rabbit$EvilRabbitAttackGoal -> bnb$a -> net.minecraft.world.entity.animal.EntityRabbit$PathfinderGoalKillerRabbitMeleeAttack
    M:double getAttackReachSqr(net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.animal.Rabbit$RabbitAvoidEntityGoal -> bnb$b -> net.minecraft.world.entity.animal.EntityRabbit$PathfinderGoalRabbitAvoidTarget
    F:net.minecraft.world.entity.animal.EntityRabbit rabbit -> i
    M:boolean canUse() -> a
net.minecraft.world.entity.animal.Rabbit$RabbitGroupData -> bnb$c -> net.minecraft.world.entity.animal.EntityRabbit$GroupDataRabbit
    F:int rabbitType -> a
net.minecraft.world.entity.animal.Rabbit$RabbitJumpControl -> bnb$d -> net.minecraft.world.entity.animal.EntityRabbit$ControllerJumpRabbit
    F:net.minecraft.world.entity.animal.EntityRabbit rabbit -> b
    F:boolean canJump -> c
    M:boolean wantJump() -> c
    M:boolean canJump() -> d
    M:void setCanJump(boolean) -> a
    M:void tick() -> b
net.minecraft.world.entity.animal.Rabbit$RabbitMoveControl -> bnb$e -> net.minecraft.world.entity.animal.EntityRabbit$ControllerMoveRabbit
    F:net.minecraft.world.entity.animal.EntityRabbit rabbit -> l
    F:double nextJumpSpeed -> m
    M:void tick() -> a
    M:void setWantedPosition(double,double,double,double) -> a
net.minecraft.world.entity.animal.Rabbit$RabbitPanicGoal -> bnb$f -> net.minecraft.world.entity.animal.EntityRabbit$PathfinderGoalRabbitPanic
    F:net.minecraft.world.entity.animal.EntityRabbit rabbit -> h
    M:void tick() -> e
net.minecraft.world.entity.animal.Rabbit$RaidGardenGoal -> bnb$g -> net.minecraft.world.entity.animal.EntityRabbit$PathfinderGoalEatCarrots
    F:net.minecraft.world.entity.animal.EntityRabbit rabbit -> g
    F:boolean wantsToRaid -> h
    F:boolean canRaid -> i
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void tick() -> e
    M:boolean isValidTarget(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.animal.Salmon -> bnc -> net.minecraft.world.entity.animal.EntitySalmon
    M:net.minecraft.world.item.ItemStack getBucketItemStack() -> b
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
net.minecraft.world.entity.animal.Sheep -> bnd -> net.minecraft.world.entity.animal.EntitySheep
    F:java.util.Map ITEM_BY_DYE -> ca
    F:java.util.Map COLORARRAY_BY_COLOR -> cb
    F:int eatAnimationTick -> cc
    F:net.minecraft.world.entity.ai.goal.PathfinderGoalEatTile eatBlockGoal -> cd
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> q
    M:void handleEntityEvent(byte) -> a
    M:float getHeadEatPositionScale(float) -> y
    M:float getHeadEatAngleScale(float) -> z
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:void shear(net.minecraft.sounds.SoundCategory) -> a
    M:boolean readyForShearing() -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:net.minecraft.world.item.EnumColor getColor() -> t
    M:void setColor(net.minecraft.world.item.EnumColor) -> b
    M:void setSheared(boolean) -> v
    M:net.minecraft.world.item.EnumColor getRandomSheepColor(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.entity.animal.EntitySheep getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> b
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.item.EnumColor getOffspringColor(net.minecraft.world.entity.animal.EntityAnimal,net.minecraft.world.entity.animal.EntityAnimal) -> a
    M:net.minecraft.world.inventory.InventoryCrafting makeContainer(net.minecraft.world.item.EnumColor,net.minecraft.world.item.EnumColor) -> a
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
net.minecraft.world.entity.animal.ShoulderRidingEntity -> bne -> net.minecraft.world.entity.animal.EntityPerchable
    F:int RIDE_COOLDOWN -> ca
    F:int rideCooldownCounter -> cb
    M:boolean setEntityOnShoulder(net.minecraft.server.level.EntityPlayer) -> b
    M:void tick() -> k
net.minecraft.world.entity.animal.SnowGolem -> bnf -> net.minecraft.world.entity.animal.EntitySnowman
    F:net.minecraft.network.syncher.DataWatcherObject DATA_PUMPKIN_ID -> b
    F:byte PUMPKIN_FLAG -> c
    F:float EYE_HEIGHT -> d
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void performRangedAttack(net.minecraft.world.entity.EntityLiving,float) -> a
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:void shear(net.minecraft.sounds.SoundCategory) -> a
    M:boolean readyForShearing() -> a
    M:boolean hasPumpkin() -> q
    M:void setPumpkin(boolean) -> v
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
net.minecraft.world.entity.animal.Squid -> bng -> net.minecraft.world.entity.animal.EntitySquid
    F:float xBodyRot -> b
    F:float xBodyRotO -> c
    F:float zBodyRot -> d
    F:float zBodyRotO -> e
    F:float oldTentacleAngle -> ca
    F:float speed -> cb
    F:float tentacleSpeed -> cc
    F:float rotateSpeed -> cd
    F:float tx -> ce
    F:float ty -> cf
    F:float tz -> cg
    M:void registerGoals() -> u
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.sounds.SoundEffect getSquirtSound() -> q
    M:boolean canBeLeashed(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:net.minecraft.world.phys.Vec3D rotateVector(net.minecraft.world.phys.Vec3D) -> i
    M:void spawnInk() -> t
    M:net.minecraft.core.particles.ParticleParam getInkParticle() -> n
    M:void travel(net.minecraft.world.phys.Vec3D) -> g
    M:void handleEntityEvent(byte) -> a
    M:void setMovementVector(float,float,float) -> a
net.minecraft.world.entity.animal.Squid$SquidFleeGoal -> bng$a -> net.minecraft.world.entity.animal.EntitySquid$a
    F:float SQUID_FLEE_SPEED -> b
    F:float SQUID_FLEE_MIN_DISTANCE -> c
    F:float SQUID_FLEE_MAX_DISTANCE -> d
    F:int fleeTicks -> e
    M:boolean canUse() -> a
    M:void start() -> c
    M:void tick() -> e
net.minecraft.world.entity.animal.Squid$SquidRandomMovementGoal -> bng$b -> net.minecraft.world.entity.animal.EntitySquid$PathfinderGoalSquid
    F:net.minecraft.world.entity.animal.EntitySquid squid -> b
    M:boolean canUse() -> a
    M:void tick() -> e
net.minecraft.world.entity.animal.TropicalFish -> bnh -> net.minecraft.world.entity.animal.EntityTropicalFish
    F:java.lang.String BUCKET_VARIANT_TAG -> b
    F:int BASE_SMALL -> c
    F:int BASE_LARGE -> d
    F:int PATTERNS -> cc
    F:int COLORS -> cd
    F:boolean isSchool -> ce
    M:int calculateVariant(net.minecraft.world.entity.animal.EntityTropicalFish$Variant,net.minecraft.world.item.EnumColor,net.minecraft.world.item.EnumColor) -> a
    M:java.lang.String getPredefinedName(int) -> b
    M:net.minecraft.world.item.EnumColor getBaseColor(int) -> c
    M:net.minecraft.world.item.EnumColor getPatternColor(int) -> s
    M:java.lang.String getFishTypeName(int) -> t
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void setVariant(int) -> u
    M:boolean isMaxGroupSizeReached(int) -> d
    M:void saveToBucketTag(net.minecraft.world.item.ItemStack) -> m
    M:net.minecraft.world.item.ItemStack getBucketItemStack() -> b
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:int getBaseColorIdx(int) -> w
    M:int getPatternColorIdx(int) -> x
    M:int getBaseVariant(int) -> v
    M:int getPatternVariant(int) -> y
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean checkTropicalFishSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
net.minecraft.world.entity.animal.TropicalFish$Pattern -> bnh$a -> net.minecraft.world.entity.animal.EntityTropicalFish$Variant
    F:net.minecraft.world.entity.animal.EntityTropicalFish$Variant KOB -> a
    F:net.minecraft.world.entity.animal.EntityTropicalFish$Variant SUNSTREAK -> b
    F:net.minecraft.world.entity.animal.EntityTropicalFish$Variant SNOOPER -> c
    F:net.minecraft.world.entity.animal.EntityTropicalFish$Variant DASHER -> d
    F:net.minecraft.world.entity.animal.EntityTropicalFish$Variant BRINELY -> e
    F:net.minecraft.world.entity.animal.EntityTropicalFish$Variant SPOTTY -> f
    F:net.minecraft.world.entity.animal.EntityTropicalFish$Variant FLOPPER -> g
    F:net.minecraft.world.entity.animal.EntityTropicalFish$Variant STRIPEY -> h
    F:net.minecraft.world.entity.animal.EntityTropicalFish$Variant GLITTER -> i
    F:net.minecraft.world.entity.animal.EntityTropicalFish$Variant BLOCKFISH -> j
    F:net.minecraft.world.entity.animal.EntityTropicalFish$Variant BETTY -> k
    F:net.minecraft.world.entity.animal.EntityTropicalFish$Variant CLAYFISH -> l
    F:int base -> m
    F:int index -> n
    M:int getBase() -> a
    M:int getIndex() -> b
    M:java.lang.String getPatternName(int,int) -> a
    M:java.lang.String getName() -> c
net.minecraft.world.entity.animal.TropicalFish$TropicalFishGroupData -> bnh$b -> net.minecraft.world.entity.animal.EntityTropicalFish$b
    F:int base -> b
    F:int pattern -> c
    F:int baseColor -> d
    F:int patternColor -> e
net.minecraft.world.entity.animal.Turtle -> bni -> net.minecraft.world.entity.animal.EntityTurtle
    F:net.minecraft.network.syncher.DataWatcherObject HOME_POS -> ca
    F:net.minecraft.network.syncher.DataWatcherObject HAS_EGG -> cb
    F:net.minecraft.network.syncher.DataWatcherObject LAYING_EGG -> cc
    F:net.minecraft.network.syncher.DataWatcherObject TRAVEL_POS -> cd
    F:net.minecraft.network.syncher.DataWatcherObject GOING_HOME -> ce
    F:net.minecraft.network.syncher.DataWatcherObject TRAVELLING -> cf
    F:int layEggCounter -> cg
    M:void setHomePos(net.minecraft.core.BlockPosition) -> g
    M:void setTravelPos(net.minecraft.core.BlockPosition) -> h
    M:boolean hasEgg() -> q
    M:void setHasEgg(boolean) -> v
    M:boolean isLayingEgg() -> t
    M:void setLayingEgg(boolean) -> w
    M:void setGoingHome(boolean) -> x
    M:void setTravelling(boolean) -> y
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean checkTurtleSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> c
    M:void registerGoals() -> u
    M:boolean isPushedByFluid() -> cs
    M:net.minecraft.world.entity.EnumMonsterType getMobType() -> ez
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:void playSwimSound(float) -> d
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:net.minecraft.world.entity.ai.navigation.NavigationAbstract createNavigation(net.minecraft.world.level.World) -> a
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:float getWalkTargetValue(net.minecraft.core.BlockPosition,net.minecraft.world.level.IWorldReader) -> a
    M:void ageBoundaryReached() -> n
    M:void travel(net.minecraft.world.phys.Vec3D) -> g
    M:boolean canBeLeashed(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void thunderHit(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLightning) -> a
net.minecraft.world.entity.animal.Turtle$TurtleBreedGoal -> bni$a -> net.minecraft.world.entity.animal.EntityTurtle$a
    F:net.minecraft.world.entity.animal.EntityTurtle turtle -> d
    M:boolean canUse() -> a
    M:void breed() -> g
net.minecraft.world.entity.animal.Turtle$TurtleGoHomeGoal -> bni$b -> net.minecraft.world.entity.animal.EntityTurtle$b
    F:net.minecraft.world.entity.animal.EntityTurtle turtle -> a
    F:double speedModifier -> b
    F:boolean stuck -> c
    F:int closeToHomeTryTicks -> d
    F:int GIVE_UP_TICKS -> e
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
    M:boolean canContinueToUse() -> b
    M:void tick() -> e
net.minecraft.world.entity.animal.Turtle$TurtleGoToWaterGoal -> bni$c -> net.minecraft.world.entity.animal.EntityTurtle$c
    F:int GIVE_UP_TICKS -> g
    F:net.minecraft.world.entity.animal.EntityTurtle turtle -> h
    M:boolean canContinueToUse() -> b
    M:boolean canUse() -> a
    M:boolean shouldRecalculatePath() -> l
    M:boolean isValidTarget(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.animal.Turtle$TurtleLayEggGoal -> bni$d -> net.minecraft.world.entity.animal.EntityTurtle$d
    F:net.minecraft.world.entity.animal.EntityTurtle turtle -> g
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void tick() -> e
    M:boolean isValidTarget(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.animal.Turtle$TurtleMoveControl -> bni$e -> net.minecraft.world.entity.animal.EntityTurtle$e
    F:net.minecraft.world.entity.animal.EntityTurtle turtle -> l
    M:void updateSpeed() -> g
    M:void tick() -> a
net.minecraft.world.entity.animal.Turtle$TurtlePanicGoal -> bni$f -> net.minecraft.world.entity.animal.EntityTurtle$f
    M:boolean canUse() -> a
net.minecraft.world.entity.animal.Turtle$TurtlePathNavigation -> bni$g -> net.minecraft.world.entity.animal.EntityTurtle$g
    M:boolean isStableDestination(net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.animal.Turtle$TurtleRandomStrollGoal -> bni$h -> net.minecraft.world.entity.animal.EntityTurtle$h
    F:net.minecraft.world.entity.animal.EntityTurtle turtle -> i
    M:boolean canUse() -> a
net.minecraft.world.entity.animal.Turtle$TurtleTravelGoal -> bni$i -> net.minecraft.world.entity.animal.EntityTurtle$i
    F:net.minecraft.world.entity.animal.EntityTurtle turtle -> a
    F:double speedModifier -> b
    F:boolean stuck -> c
    M:boolean canUse() -> a
    M:void start() -> c
    M:void tick() -> e
    M:boolean canContinueToUse() -> b
    M:void stop() -> d
net.minecraft.world.entity.animal.WaterAnimal -> bnj -> net.minecraft.world.entity.animal.EntityWaterAnimal
    M:net.minecraft.world.entity.EnumMonsterType getMobType() -> ez
    M:boolean checkSpawnObstruction(net.minecraft.world.level.IWorldReader) -> a
    M:void handleAirSupply(int) -> a
    M:void baseTick() -> an
    M:boolean isPushedByFluid() -> cs
    M:boolean canBeLeashed(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean checkSurfaceWaterAnimalSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> c
net.minecraft.world.entity.animal.Wolf -> bnk -> net.minecraft.world.entity.animal.EntityWolf
    F:net.minecraft.network.syncher.DataWatcherObject DATA_INTERESTED_ID -> cb
    F:net.minecraft.network.syncher.DataWatcherObject DATA_COLLAR_COLOR -> cc
    F:net.minecraft.network.syncher.DataWatcherObject DATA_REMAINING_ANGER_TIME -> cd
    F:java.util.function.Predicate PREY_SELECTOR -> ca
    F:float START_HEALTH -> ce
    F:float TAME_HEALTH -> cf
    F:float interestedAngle -> cg
    F:float interestedAngleO -> ch
    F:boolean isWet -> ci
    F:boolean isShaking -> cj
    F:float shakeAnim -> ck
    F:float shakeAnimO -> cl
    F:net.minecraft.util.valueproviders.UniformInt PERSISTENT_ANGER_TIME -> cm
    F:java.util.UUID persistentAngerTarget -> cn
    M:void registerGoals() -> u
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void tick() -> k
    M:void die(net.minecraft.world.damagesource.DamageSource) -> a
    M:float getWetShade(float) -> y
    M:float getBodyRollAngle(float,float) -> f
    M:float getHeadRollAngle(float) -> z
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:void setTame(boolean) -> w
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:void handleEntityEvent(byte) -> a
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:int getMaxSpawnClusterSize() -> fp
    M:int getRemainingPersistentAngerTime() -> a
    M:void setRemainingPersistentAngerTime(int) -> a
    M:void startPersistentAngerTimer() -> c
    M:java.util.UUID getPersistentAngerTarget() -> b
    M:void setPersistentAngerTarget(java.util.UUID) -> a
    M:void setCollarColor(net.minecraft.world.item.EnumColor) -> a
    M:net.minecraft.world.entity.animal.EntityWolf getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> b
    M:void setIsInterested(boolean) -> z
    M:boolean canMate(net.minecraft.world.entity.animal.EntityAnimal) -> a
    M:boolean wantsToAttack(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canBeLeashed(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean checkWolfSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> c
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
net.minecraft.world.entity.animal.Wolf$WolfAvoidEntityGoal -> bnk$a -> net.minecraft.world.entity.animal.EntityWolf$a
    F:net.minecraft.world.entity.animal.EntityWolf wolf -> j
    M:boolean canUse() -> a
    M:boolean avoidLlama(net.minecraft.world.entity.animal.horse.EntityLlama) -> a
    M:void start() -> c
    M:void tick() -> e
net.minecraft.world.entity.animal.Wolf$WolfPanicGoal -> bnk$b -> net.minecraft.world.entity.animal.EntityWolf$b
    M:boolean shouldPanic() -> h
net.minecraft.world.entity.animal.allay.Allay -> bnl -> net.minecraft.world.entity.animal.allay.Allay
    F:org.slf4j.Logger LOGGER -> e
    F:float PATHFINDING_BOUNDING_BOX_PADDING -> ca
    F:com.google.common.collect.ImmutableList SENSOR_TYPES -> b
    F:com.google.common.collect.ImmutableList MEMORY_TYPES -> c
    F:com.google.common.collect.ImmutableList THROW_SOUND_PITCHES -> d
    F:net.minecraft.world.level.gameevent.DynamicGameEventListener dynamicGameEventListener -> cb
    F:net.minecraft.world.InventorySubcontainer inventory -> cc
    F:float holdingItemAnimationTicks -> cd
    F:float holdingItemAnimationTicks0 -> ce
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(com.mojang.serialization.Dynamic) -> a
    M:net.minecraft.world.entity.ai.BehaviorController getBrain() -> dz
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:net.minecraft.world.entity.ai.navigation.NavigationAbstract createNavigation(net.minecraft.world.level.World) -> a
    M:void travel(net.minecraft.world.phys.Vec3D) -> g
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void tick() -> k
    M:boolean canPickUpLoot() -> fr
    M:boolean hasItemInHand() -> q
    M:boolean canTakeItem(net.minecraft.world.item.ItemStack) -> g
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:net.minecraft.world.InventorySubcontainer getInventory() -> t
    M:boolean wantsToPickUp(net.minecraft.world.item.ItemStack) -> l
    M:void pickUpItem(net.minecraft.world.entity.item.EntityItem) -> b
    M:void updateDynamicGameEventListener(java.util.function.BiConsumer) -> a
    M:float getHoldingItemAnimationProgress(float) -> y
    M:void dropEquipment() -> ej
    M:boolean removeWhenFarAway(double) -> h
    M:boolean shouldListen(net.minecraft.server.level.WorldServer,net.minecraft.world.level.gameevent.GameEventListener,net.minecraft.core.BlockPosition,net.minecraft.world.level.gameevent.GameEvent,net.minecraft.world.level.gameevent.GameEvent$Context) -> a
    M:void onSignalReceive(net.minecraft.server.level.WorldServer,net.minecraft.world.level.gameevent.GameEventListener,net.minecraft.core.BlockPosition,net.minecraft.world.level.gameevent.GameEvent,net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity,float) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.entity.animal.allay.AllayAi -> bnm -> net.minecraft.world.entity.animal.allay.AllayAi
    F:float SPEED_MULTIPLIER_WHEN_IDLING -> a
    F:float SPEED_MULTIPLIER_WHEN_FOLLOWING_DEPOSIT_TARGET -> b
    F:float SPEED_MULTIPLIER_WHEN_RETRIEVING_ITEM -> c
    F:float SPEED_MULTIPLIER_WHEN_PANICKING -> d
    F:int CLOSE_ENOUGH_TO_TARGET -> e
    F:int TOO_FAR_FROM_TARGET -> f
    F:int MAX_LOOK_DISTANCE -> g
    F:int MIN_WAIT_DURATION -> h
    F:int MAX_WAIT_DURATION -> i
    F:int TIME_TO_FORGET_NOTEBLOCK -> j
    F:int DISTANCE_TO_WANTED_ITEM -> k
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(net.minecraft.world.entity.ai.BehaviorController) -> a
    M:void initCoreActivity(net.minecraft.world.entity.ai.BehaviorController) -> b
    M:void initIdleActivity(net.minecraft.world.entity.ai.BehaviorController) -> c
    M:void updateActivity(net.minecraft.world.entity.animal.allay.Allay) -> a
    M:void hearNoteblock(net.minecraft.world.entity.EntityLiving,net.minecraft.core.BlockPosition) -> a
    M:java.util.Optional getItemDepositPosition(net.minecraft.world.entity.EntityLiving) -> b
    M:boolean shouldDepositItemsAtLikedNoteblock(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.ai.BehaviorController,net.minecraft.core.GlobalPos) -> a
    M:java.util.Optional getLikedPlayerPositionTracker(net.minecraft.world.entity.EntityLiving) -> c
    M:java.util.Optional getLikedPlayer(net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.animal.axolotl.Axolotl -> bno -> net.minecraft.world.entity.animal.axolotl.Axolotl
    F:org.slf4j.Logger LOGGER -> ce
    F:com.google.common.collect.ImmutableList MEMORY_TYPES -> ca
    F:net.minecraft.network.syncher.DataWatcherObject DATA_VARIANT -> cf
    F:net.minecraft.network.syncher.DataWatcherObject DATA_PLAYING_DEAD -> cg
    F:net.minecraft.network.syncher.DataWatcherObject FROM_BUCKET -> ch
    F:double PLAYER_REGEN_DETECTION_RANGE -> cb
    F:int RARE_VARIANT_CHANCE -> cc
    F:int AXOLOTL_TOTAL_AIR_SUPPLY -> ci
    F:java.lang.String VARIANT_TAG -> cd
    F:int REHYDRATE_AIR_SUPPLY -> cj
    F:int REGEN_BUFF_MAX_DURATION -> ck
    F:java.util.Map modelRotationValues -> cl
    F:int REGEN_BUFF_BASE_DURATION -> cm
    M:java.util.Map getModelRotationValues() -> a
    M:float getWalkTargetValue(net.minecraft.core.BlockPosition,net.minecraft.world.level.IWorldReader) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:void baseTick() -> an
    M:void handleAirSupply(int) -> t
    M:int getMaxAirSupply() -> ca
    M:void setVariant(net.minecraft.world.entity.animal.axolotl.Axolotl$Variant) -> a
    M:boolean useRareVariant(net.minecraft.util.RandomSource) -> a
    M:boolean checkSpawnObstruction(net.minecraft.world.level.IWorldReader) -> a
    M:boolean isPushedByFluid() -> cs
    M:net.minecraft.world.entity.EnumMonsterType getMobType() -> ez
    M:void setPlayingDead(boolean) -> w
    M:boolean fromBucket() -> q
    M:void setFromBucket(boolean) -> v
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
    M:double getMeleeAttackRangeSqr(net.minecraft.world.entity.EntityLiving) -> i
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:boolean canBeLeashed(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.entity.ai.navigation.NavigationAbstract createNavigation(net.minecraft.world.level.World) -> a
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:void saveToBucketTag(net.minecraft.world.item.ItemStack) -> m
    M:void loadFromBucketTag(net.minecraft.nbt.NBTTagCompound) -> c
    M:net.minecraft.world.item.ItemStack getBucketItemStack() -> b
    M:net.minecraft.sounds.SoundEffect getPickupSound() -> t
    M:void onStopAttacking(net.minecraft.world.entity.animal.axolotl.Axolotl,net.minecraft.world.entity.EntityLiving) -> a
    M:void applySupportingEffects(net.minecraft.world.entity.player.EntityHuman) -> e
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(com.mojang.serialization.Dynamic) -> a
    M:net.minecraft.world.entity.ai.BehaviorController getBrain() -> dz
    M:void travel(net.minecraft.world.phys.Vec3D) -> g
    M:void usePlayerItem(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.item.ItemStack) -> a
    M:boolean removeWhenFarAway(double) -> h
    M:boolean checkAxolotlSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.WorldAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.entity.animal.axolotl.Axolotl$AxolotlGroupData -> bno$a -> net.minecraft.world.entity.animal.axolotl.Axolotl$a
    M:net.minecraft.world.entity.animal.axolotl.Axolotl$Variant getVariant(net.minecraft.util.RandomSource) -> a
net.minecraft.world.entity.animal.axolotl.Axolotl$AxolotlLookControl -> bno$b -> net.minecraft.world.entity.animal.axolotl.Axolotl$b
    M:void tick() -> a
net.minecraft.world.entity.animal.axolotl.Axolotl$AxolotlMoveControl -> bno$c -> net.minecraft.world.entity.animal.axolotl.Axolotl$c
    F:net.minecraft.world.entity.animal.axolotl.Axolotl axolotl -> l
    M:void tick() -> a
net.minecraft.world.entity.animal.axolotl.Axolotl$Variant -> bno$d -> net.minecraft.world.entity.animal.axolotl.Axolotl$Variant
    F:net.minecraft.world.entity.animal.axolotl.Axolotl$Variant LUCY -> a
    F:net.minecraft.world.entity.animal.axolotl.Axolotl$Variant WILD -> b
    F:net.minecraft.world.entity.animal.axolotl.Axolotl$Variant GOLD -> c
    F:net.minecraft.world.entity.animal.axolotl.Axolotl$Variant CYAN -> d
    F:net.minecraft.world.entity.animal.axolotl.Axolotl$Variant BLUE -> e
    F:int id -> g
    F:java.lang.String name -> h
    F:boolean common -> i
    M:int getId() -> a
    M:java.lang.String getName() -> b
    M:net.minecraft.world.entity.animal.axolotl.Axolotl$Variant getCommonSpawnVariant(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.entity.animal.axolotl.Axolotl$Variant getRareSpawnVariant(net.minecraft.util.RandomSource) -> b
    M:net.minecraft.world.entity.animal.axolotl.Axolotl$Variant getSpawnVariant(net.minecraft.util.RandomSource,boolean) -> a
net.minecraft.world.entity.animal.axolotl.AxolotlAi -> bnp -> net.minecraft.world.entity.animal.axolotl.AxolotlAi
    F:net.minecraft.util.valueproviders.UniformInt ADULT_FOLLOW_RANGE -> a
    F:float SPEED_MULTIPLIER_WHEN_MAKING_LOVE -> b
    F:float SPEED_MULTIPLIER_ON_LAND -> c
    F:float SPEED_MULTIPLIER_WHEN_IDLING_IN_WATER -> d
    F:float SPEED_MULTIPLIER_WHEN_CHASING_IN_WATER -> e
    F:float SPEED_MULTIPLIER_WHEN_FOLLOWING_ADULT_IN_WATER -> f
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(net.minecraft.world.entity.ai.BehaviorController) -> a
    M:void initPlayDeadActivity(net.minecraft.world.entity.ai.BehaviorController) -> b
    M:void initFightActivity(net.minecraft.world.entity.ai.BehaviorController) -> c
    M:void initCoreActivity(net.minecraft.world.entity.ai.BehaviorController) -> d
    M:void initIdleActivity(net.minecraft.world.entity.ai.BehaviorController) -> e
    M:boolean canSetWalkTargetFromLookTarget(net.minecraft.world.entity.EntityLiving) -> a
    M:void updateActivity(net.minecraft.world.entity.animal.axolotl.Axolotl) -> a
    M:float getSpeedModifierChasing(net.minecraft.world.entity.EntityLiving) -> b
    M:float getSpeedModifierFollowingAdult(net.minecraft.world.entity.EntityLiving) -> c
    M:float getSpeedModifier(net.minecraft.world.entity.EntityLiving) -> d
    M:java.util.Optional findNearestValidAttackTarget(net.minecraft.world.entity.animal.axolotl.Axolotl) -> b
    M:net.minecraft.world.item.crafting.RecipeItemStack getTemptations() -> a
net.minecraft.world.entity.animal.axolotl.PlayDead -> bnq -> net.minecraft.world.entity.animal.axolotl.PlayDead
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.axolotl.Axolotl) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.axolotl.Axolotl,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.axolotl.Axolotl,long) -> b
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.animal.axolotl.ValidatePlayDead -> bnr -> net.minecraft.world.entity.animal.axolotl.ValidatePlayDead
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.axolotl.Axolotl,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.animal.frog.Frog -> bnt -> net.minecraft.world.entity.animal.frog.Frog
    F:com.google.common.collect.ImmutableList MEMORY_TYPES -> ca
    F:net.minecraft.network.syncher.DataWatcherObject DATA_VARIANT_ID -> ci
    F:net.minecraft.network.syncher.DataWatcherObject DATA_TONGUE_TARGET_ID -> cj
    F:int FROG_FALL_DAMAGE_REDUCTION -> ck
    F:java.lang.String VARIANT_KEY -> cb
    F:net.minecraft.world.entity.AnimationState jumpAnimationState -> cc
    F:net.minecraft.world.entity.AnimationState croakAnimationState -> cd
    F:net.minecraft.world.entity.AnimationState tongueAnimationState -> ce
    F:net.minecraft.world.entity.AnimationState walkAnimationState -> cf
    F:net.minecraft.world.entity.AnimationState swimAnimationState -> cg
    F:net.minecraft.world.entity.AnimationState swimIdleAnimationState -> ch
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(com.mojang.serialization.Dynamic) -> a
    M:net.minecraft.world.entity.ai.BehaviorController getBrain() -> dz
    M:void eraseTongueTarget() -> q
    M:java.util.Optional getTongueTarget() -> t
    M:void setTongueTarget(net.minecraft.world.entity.Entity) -> a
    M:int getHeadRotSpeed() -> fo
    M:void setVariant(net.minecraft.world.entity.animal.FrogVariant) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void tick() -> k
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
    M:void setBaby(boolean) -> a
    M:void spawnChildFromBreeding(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.EntityAnimal) -> a
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:boolean isPushedByFluid() -> cs
    M:int calculateFallDamage(float,float) -> d
    M:void travel(net.minecraft.world.phys.Vec3D) -> g
    M:boolean canCutCorner(net.minecraft.world.level.pathfinder.PathType) -> b
    M:boolean canEat(net.minecraft.world.entity.EntityLiving) -> k
    M:net.minecraft.world.entity.ai.navigation.NavigationAbstract createNavigation(net.minecraft.world.level.World) -> a
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:boolean checkFrogSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> c
net.minecraft.world.entity.animal.frog.Frog$FrogLookControl -> bnt$a -> net.minecraft.world.entity.animal.frog.Frog$a
    M:boolean resetXRotOnTick() -> c
net.minecraft.world.entity.animal.frog.Frog$FrogNodeEvaluator -> bnt$b -> net.minecraft.world.entity.animal.frog.Frog$b
    F:net.minecraft.core.BlockPosition$MutableBlockPosition belowPos -> l
    M:net.minecraft.world.level.pathfinder.PathPoint getStart() -> a
    M:net.minecraft.world.level.pathfinder.PathType getBlockPathType(net.minecraft.world.level.IBlockAccess,int,int,int) -> a
net.minecraft.world.entity.animal.frog.Frog$FrogPathNavigation -> bnt$c -> net.minecraft.world.entity.animal.frog.Frog$c
    M:net.minecraft.world.level.pathfinder.Pathfinder createPathFinder(int) -> a
net.minecraft.world.entity.animal.frog.FrogAi -> bnu -> net.minecraft.world.entity.animal.frog.FrogAi
    F:float SPEED_MULTIPLIER_WHEN_PANICKING -> a
    F:float SPEED_MULTIPLIER_WHEN_MAKING_LOVE -> b
    F:float SPEED_MULTIPLIER_WHEN_IDLING -> c
    F:float SPEED_MULTIPLIER_ON_LAND -> d
    F:float SPEED_MULTIPLIER_IN_WATER -> e
    F:net.minecraft.util.valueproviders.UniformInt TIME_BETWEEN_LONG_JUMPS -> f
    F:int MAX_LONG_JUMP_HEIGHT -> g
    F:int MAX_LONG_JUMP_WIDTH -> h
    F:float MAX_JUMP_VELOCITY -> i
    F:float SPEED_MULTIPLIER_WHEN_TEMPTED -> j
    M:void initMemories(net.minecraft.world.entity.animal.frog.Frog,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(net.minecraft.world.entity.ai.BehaviorController) -> a
    M:void initCoreActivity(net.minecraft.world.entity.ai.BehaviorController) -> b
    M:void initIdleActivity(net.minecraft.world.entity.ai.BehaviorController) -> c
    M:void initSwimActivity(net.minecraft.world.entity.ai.BehaviorController) -> d
    M:void initLaySpawnActivity(net.minecraft.world.entity.ai.BehaviorController) -> e
    M:void initJumpActivity(net.minecraft.world.entity.ai.BehaviorController) -> f
    M:void initTongueActivity(net.minecraft.world.entity.ai.BehaviorController) -> g
    M:boolean canAttack(net.minecraft.world.entity.animal.frog.Frog) -> b
    M:void updateActivity(net.minecraft.world.entity.animal.frog.Frog) -> a
    M:net.minecraft.world.item.crafting.RecipeItemStack getTemptations() -> a
net.minecraft.world.entity.animal.frog.ShootTongue -> bnv -> net.minecraft.world.entity.animal.frog.ShootTongue
    F:int TIME_OUT_DURATION -> a
    F:int CATCH_ANIMATION_DURATION -> d
    F:int TONGUE_ANIMATION_DURATION -> e
    F:float EATING_DISTANCE -> h
    F:float EATING_MOVEMENT_FACTOR -> i
    F:int UNREACHABLE_TONGUE_TARGETS_COOLDOWN_DURATION -> f
    F:int MAX_UNREACHBLE_TONGUE_TARGETS_IN_MEMORY -> g
    F:int eatAnimationTimer -> j
    F:int calculatePathCounter -> k
    F:net.minecraft.sounds.SoundEffect tongueSound -> l
    F:net.minecraft.sounds.SoundEffect eatSound -> m
    F:net.minecraft.world.phys.Vec3D itemSpawnPos -> n
    F:net.minecraft.world.entity.animal.frog.ShootTongue$State state -> o
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.frog.Frog) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.frog.Frog,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.frog.Frog,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.frog.Frog,long) -> c
    M:void eatEntity(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.frog.Frog) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.animal.frog.Frog,long) -> d
    M:boolean canPathfindToTarget(net.minecraft.world.entity.animal.frog.Frog,net.minecraft.world.entity.EntityLiving) -> a
    M:void addUnreachableTargetToMemory(net.minecraft.world.entity.animal.frog.Frog,net.minecraft.world.entity.EntityLiving) -> b
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean canStillUse(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> b
    M:void stop(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> c
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> d
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.animal.frog.ShootTongue$State -> bnv$a -> net.minecraft.world.entity.animal.frog.ShootTongue$a
    F:net.minecraft.world.entity.animal.frog.ShootTongue$State MOVE_TO_TARGET -> a
    F:net.minecraft.world.entity.animal.frog.ShootTongue$State CATCH_ANIMATION -> b
    F:net.minecraft.world.entity.animal.frog.ShootTongue$State EAT_ANIMATION -> c
    F:net.minecraft.world.entity.animal.frog.ShootTongue$State DONE -> d
net.minecraft.world.entity.animal.frog.Tadpole -> bnw -> net.minecraft.world.entity.animal.frog.Tadpole
    F:int ticksToBeFrog -> b
    F:float HITBOX_WIDTH -> c
    F:float HITBOX_HEIGHT -> d
    F:com.google.common.collect.ImmutableList SENSOR_TYPES -> e
    M:net.minecraft.world.entity.ai.navigation.NavigationAbstract createNavigation(net.minecraft.world.level.World) -> a
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(com.mojang.serialization.Dynamic) -> a
    M:net.minecraft.world.entity.ai.BehaviorController getBrain() -> dz
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:boolean fromBucket() -> q
    M:void setFromBucket(boolean) -> v
    M:void saveToBucketTag(net.minecraft.world.item.ItemStack) -> m
    M:void loadFromBucketTag(net.minecraft.nbt.NBTTagCompound) -> c
    M:net.minecraft.world.item.ItemStack getBucketItemStack() -> b
    M:net.minecraft.sounds.SoundEffect getPickupSound() -> t
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:void feed(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> a
    M:void usePlayerItem(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> b
    M:void ageUp(int) -> b
    M:void setAge(int) -> c
net.minecraft.world.entity.animal.frog.TadpoleAi -> bnx -> net.minecraft.world.entity.animal.frog.TadpoleAi
    F:float SPEED_MULTIPLIER_WHEN_PANICKING -> a
    F:float SPEED_MULTIPLIER_WHEN_IDLING_IN_WATER -> b
    F:float SPEED_MULTIPLIER_WHEN_TEMPTED -> c
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(net.minecraft.world.entity.ai.BehaviorController) -> a
    M:void initCoreActivity(net.minecraft.world.entity.ai.BehaviorController) -> b
    M:void initIdleActivity(net.minecraft.world.entity.ai.BehaviorController) -> c
    M:void updateActivity(net.minecraft.world.entity.animal.frog.Tadpole) -> a
net.minecraft.world.entity.animal.goat.Goat -> bnz -> net.minecraft.world.entity.animal.goat.Goat
    F:int ADULT_ATTACK_DAMAGE -> ce
    F:int BABY_ATTACK_DAMAGE -> cf
    F:com.google.common.collect.ImmutableList MEMORY_TYPES -> ca
    F:int GOAT_FALL_DAMAGE_REDUCTION -> cb
    F:double GOAT_SCREAMING_CHANCE -> cc
    F:double UNIHORN_CHANCE -> cd
    F:net.minecraft.network.syncher.DataWatcherObject DATA_IS_SCREAMING_GOAT -> cg
    F:net.minecraft.network.syncher.DataWatcherObject DATA_HAS_LEFT_HORN -> ch
    F:net.minecraft.network.syncher.DataWatcherObject DATA_HAS_RIGHT_HORN -> ci
    F:boolean isLoweringHead -> cj
    F:int lowerHeadTick -> ck
    M:net.minecraft.world.item.ItemStack createHorn() -> q
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(com.mojang.serialization.Dynamic) -> a
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> t
    M:void ageBoundaryReached() -> n
    M:int calculateFallDamage(float,float) -> d
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:net.minecraft.world.entity.animal.goat.Goat getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> b
    M:net.minecraft.world.entity.ai.BehaviorController getBrain() -> dz
    M:void setYHeadRot(float) -> l
    M:net.minecraft.sounds.SoundEffect getEatingSound(net.minecraft.world.item.ItemStack) -> e
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.entity.EntitySize getDimensions(net.minecraft.world.entity.EntityPose) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void handleEntityEvent(byte) -> a
    M:void setScreamingGoat(boolean) -> v
    M:boolean checkGoatSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> c
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
net.minecraft.world.entity.animal.goat.GoatAi -> boa -> net.minecraft.world.entity.animal.goat.GoatAi
    F:int RAM_PREPARE_TIME -> a
    F:int RAM_MAX_DISTANCE -> b
    F:net.minecraft.util.valueproviders.UniformInt ADULT_FOLLOW_RANGE -> i
    F:float SPEED_MULTIPLIER_WHEN_MAKING_LOVE -> j
    F:float SPEED_MULTIPLIER_WHEN_IDLING -> k
    F:float SPEED_MULTIPLIER_WHEN_FOLLOWING_ADULT -> l
    F:float SPEED_MULTIPLIER_WHEN_TEMPTED -> m
    F:float SPEED_MULTIPLIER_WHEN_PANICKING -> n
    F:float SPEED_MULTIPLIER_WHEN_PREPARING_TO_RAM -> o
    F:net.minecraft.util.valueproviders.UniformInt TIME_BETWEEN_LONG_JUMPS -> p
    F:int MAX_LONG_JUMP_HEIGHT -> c
    F:int MAX_LONG_JUMP_WIDTH -> d
    F:float MAX_JUMP_VELOCITY -> e
    F:net.minecraft.util.valueproviders.UniformInt TIME_BETWEEN_RAMS -> q
    F:net.minecraft.util.valueproviders.UniformInt TIME_BETWEEN_RAMS_SCREAMER -> r
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition RAM_TARGET_CONDITIONS -> s
    F:float SPEED_MULTIPLIER_WHEN_RAMMING -> t
    F:int RAM_MIN_DISTANCE -> f
    F:float ADULT_RAM_KNOCKBACK_FORCE -> g
    F:float BABY_RAM_KNOCKBACK_FORCE -> h
    M:void initMemories(net.minecraft.world.entity.animal.goat.Goat,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(net.minecraft.world.entity.ai.BehaviorController) -> a
    M:void initCoreActivity(net.minecraft.world.entity.ai.BehaviorController) -> b
    M:void initIdleActivity(net.minecraft.world.entity.ai.BehaviorController) -> c
    M:void initLongJumpActivity(net.minecraft.world.entity.ai.BehaviorController) -> d
    M:void initRamActivity(net.minecraft.world.entity.ai.BehaviorController) -> e
    M:void updateActivity(net.minecraft.world.entity.animal.goat.Goat) -> a
    M:net.minecraft.world.item.crafting.RecipeItemStack getTemptations() -> a
net.minecraft.world.entity.animal.horse.AbstractChestedHorse -> boc -> net.minecraft.world.entity.animal.horse.EntityHorseChestedAbstract
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_CHEST -> cn
    M:void randomizeAttributes(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createBaseChestedHorseAttributes() -> q
    M:boolean hasChest() -> t
    M:void setChest(boolean) -> v
    M:double getPassengersRidingOffset() -> bu
    M:void dropEquipment() -> ej
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.entity.SlotAccess getSlot(int) -> k
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:net.minecraft.world.item.ItemStack get() -> a
    M:boolean set(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.entity.animal.horse.AbstractHorse -> bod -> net.minecraft.world.entity.animal.horse.EntityHorseAbstract
    F:int CHEST_SLOT_OFFSET -> ca
    F:int INVENTORY_SLOT_OFFSET -> cb
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition MOMMY_TARGETING -> cn
    F:net.minecraft.world.item.crafting.RecipeItemStack FOOD_ITEMS -> co
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_FLAGS -> cp
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_OWNER_UUID -> cq
    F:int FLAG_TAME -> cr
    F:int FLAG_SADDLE -> cs
    F:int FLAG_BRED -> ct
    F:int FLAG_EATING -> cu
    F:int FLAG_STANDING -> cv
    F:int FLAG_OPEN_MOUTH -> cw
    F:int INV_SLOT_SADDLE -> cc
    F:int INV_SLOT_ARMOR -> cd
    F:int INV_BASE_COUNT -> ce
    F:int eatingCounter -> cx
    F:int mouthCounter -> cy
    F:int standCounter -> cz
    F:int tailCounter -> cf
    F:int sprintCounter -> cg
    F:boolean isJumping -> ch
    F:net.minecraft.world.InventorySubcontainer inventory -> ci
    F:int temper -> cj
    F:float playerJumpPendingScale -> ck
    F:boolean canGallop -> cl
    F:int gallopSoundCounter -> cm
    M:void registerGoals() -> u
    M:boolean getFlag(int) -> t
    M:void setFlag(int,boolean) -> d
    M:void setOwnerUUID(java.util.UUID) -> b
    M:void setTamed(boolean) -> w
    M:void setIsJumping(boolean) -> x
    M:void onLeashDistance(float) -> x
    M:void setBred(boolean) -> y
    M:boolean isSaddleable() -> c
    M:void equipSaddle(net.minecraft.sounds.SoundCategory) -> a
    M:boolean isSaddled() -> d
    M:void setTemper(int) -> u
    M:int modifyTemper(int) -> v
    M:boolean isPushable() -> bm
    M:void eating() -> q
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:int calculateFallDamage(float,float) -> d
    M:void createInventory() -> ga
    M:void updateContainerEquipment() -> gb
    M:void containerChanged(net.minecraft.world.IInventory) -> a
    M:double getCustomJump() -> gc
    M:net.minecraft.sounds.SoundEffect getEatingSound() -> gd
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getAngrySound() -> ge
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void playGallopSound(net.minecraft.world.level.block.SoundEffectType) -> a
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createBaseHorseAttributes() -> gf
    M:int getMaxSpawnClusterSize() -> fp
    M:int getMaxTemper() -> gg
    M:void openCustomInventoryScreen(net.minecraft.world.entity.player.EntityHuman) -> b
    M:net.minecraft.world.EnumInteractionResult fedFood(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> a
    M:boolean handleEating(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> b
    M:void doPlayerRide(net.minecraft.world.entity.player.EntityHuman) -> e
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:void moveTail() -> t
    M:void dropEquipment() -> ej
    M:void followMommy() -> gh
    M:boolean canEatGrass() -> gi
    M:void tick() -> k
    M:void setEating(boolean) -> z
    M:void makeMad() -> gj
    M:boolean tameWithName(net.minecraft.world.entity.player.EntityHuman) -> g
    M:void travel(net.minecraft.world.phys.Vec3D) -> g
    M:void playJumpSound() -> gk
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean canMate(net.minecraft.world.entity.animal.EntityAnimal) -> a
    M:boolean canParent() -> gl
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
    M:void setOffspringAttributes(net.minecraft.world.entity.EntityAgeable,net.minecraft.world.entity.animal.horse.EntityHorseAbstract) -> a
    M:float getEatAnim(float) -> y
    M:float getStandAnim(float) -> z
    M:void onPlayerJump(int) -> a
    M:boolean canJump() -> a
    M:void handleStartJump(int) -> b
    M:void handleStopJump() -> b
    M:void handleEntityEvent(byte) -> a
    M:void positionRider(net.minecraft.world.entity.Entity) -> i
    M:float generateRandomMaxHealth(net.minecraft.util.RandomSource) -> b
    M:double generateRandomJumpStrength(net.minecraft.util.RandomSource) -> c
    M:double generateRandomSpeed(net.minecraft.util.RandomSource) -> d
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:boolean canWearArmor() -> gm
    M:boolean isWearingArmor() -> gn
    M:boolean isArmor(net.minecraft.world.item.ItemStack) -> m
    M:net.minecraft.world.entity.SlotAccess createEquipmentSlotAccess(int,java.util.function.Predicate) -> a
    M:net.minecraft.world.entity.SlotAccess getSlot(int) -> k
    M:net.minecraft.world.entity.EntityLiving getControllingPassenger() -> go
    M:net.minecraft.world.phys.Vec3D getDismountLocationInDirection(net.minecraft.world.phys.Vec3D,net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.phys.Vec3D getDismountLocationForPassenger(net.minecraft.world.entity.EntityLiving) -> b
    M:void randomizeAttributes(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean hasInventoryChanged(net.minecraft.world.IInventory) -> b
    M:net.minecraft.world.item.ItemStack get() -> a
    M:boolean set(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.entity.animal.horse.Donkey -> boe -> net.minecraft.world.entity.animal.horse.EntityHorseDonkey
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getAngrySound() -> ge
    M:net.minecraft.sounds.SoundEffect getEatingSound() -> gd
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:boolean canMate(net.minecraft.world.entity.animal.EntityAnimal) -> a
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
net.minecraft.world.entity.animal.horse.Horse -> bof -> net.minecraft.world.entity.animal.horse.EntityHorse
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_TYPE_VARIANT -> cn
    M:void randomizeAttributes(net.minecraft.util.RandomSource) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.world.item.ItemStack getArmor() -> q
    M:void setArmor(net.minecraft.world.item.ItemStack) -> o
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void setTypeVariant(int) -> w
    M:void setVariantAndMarkings(net.minecraft.world.entity.animal.horse.HorseColor,net.minecraft.world.entity.animal.horse.HorseStyle) -> a
    M:net.minecraft.world.entity.animal.horse.HorseColor getVariant() -> t
    M:void updateContainerEquipment() -> gb
    M:void setArmorEquipment(net.minecraft.world.item.ItemStack) -> p
    M:void containerChanged(net.minecraft.world.IInventory) -> a
    M:void playGallopSound(net.minecraft.world.level.block.SoundEffectType) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getEatingSound() -> gd
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.sounds.SoundEffect getAngrySound() -> ge
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:boolean canMate(net.minecraft.world.entity.animal.EntityAnimal) -> a
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
    M:boolean canWearArmor() -> gm
    M:boolean isArmor(net.minecraft.world.item.ItemStack) -> m
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.entity.animal.horse.Horse$HorseGroupData -> bof$a -> net.minecraft.world.entity.animal.horse.EntityHorse$a
    F:net.minecraft.world.entity.animal.horse.HorseColor variant -> a
net.minecraft.world.entity.animal.horse.Llama -> bog -> net.minecraft.world.entity.animal.horse.EntityLlama
    F:int MAX_STRENGTH -> cn
    F:int VARIANTS -> co
    F:net.minecraft.world.item.crafting.RecipeItemStack FOOD_ITEMS -> cp
    F:net.minecraft.network.syncher.DataWatcherObject DATA_STRENGTH_ID -> cq
    F:net.minecraft.network.syncher.DataWatcherObject DATA_SWAG_ID -> cr
    F:net.minecraft.network.syncher.DataWatcherObject DATA_VARIANT_ID -> cs
    F:boolean didSpit -> ct
    F:net.minecraft.world.entity.animal.horse.EntityLlama caravanHead -> cu
    F:net.minecraft.world.entity.animal.horse.EntityLlama caravanTail -> cv
    M:boolean isTraderLlama() -> gp
    M:void setStrength(int) -> x
    M:void setRandomStrength(net.minecraft.util.RandomSource) -> e
    M:int getStrength() -> gq
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> gr
    M:int getVariant() -> gs
    M:void setVariant(int) -> w
    M:void positionRider(net.minecraft.world.entity.Entity) -> i
    M:double getPassengersRidingOffset() -> bu
    M:net.minecraft.world.entity.EntityLiving getControllingPassenger() -> go
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:boolean handleEating(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> b
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.sounds.SoundEffect getAngrySound() -> ge
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.sounds.SoundEffect getEatingSound() -> gd
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void makeMad() -> gj
    M:boolean canWearArmor() -> gm
    M:boolean isWearingArmor() -> gn
    M:boolean isArmor(net.minecraft.world.item.ItemStack) -> m
    M:boolean isSaddleable() -> c
    M:void containerChanged(net.minecraft.world.IInventory) -> a
    M:void updateContainerEquipment() -> gb
    M:void setSwag(net.minecraft.world.item.EnumColor) -> a
    M:net.minecraft.world.item.EnumColor getDyeColor(net.minecraft.world.item.ItemStack) -> o
    M:net.minecraft.world.item.EnumColor getSwag() -> gt
    M:int getMaxTemper() -> gg
    M:boolean canMate(net.minecraft.world.entity.animal.EntityAnimal) -> a
    M:net.minecraft.world.entity.animal.horse.EntityLlama getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> b
    M:net.minecraft.world.entity.animal.horse.EntityLlama makeBabyLlama() -> gu
    M:void spit(net.minecraft.world.entity.EntityLiving) -> k
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:void leaveCaravan() -> gv
    M:void joinCaravan(net.minecraft.world.entity.animal.horse.EntityLlama) -> a
    M:boolean hasCaravanTail() -> gw
    M:boolean inCaravan() -> gx
    M:net.minecraft.world.entity.animal.horse.EntityLlama getCaravanHead() -> gy
    M:void followMommy() -> gh
    M:boolean canEatGrass() -> gi
    M:void performRangedAttack(net.minecraft.world.entity.EntityLiving,float) -> a
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
net.minecraft.world.entity.animal.horse.Llama$LlamaAttackWolfGoal -> bog$a -> net.minecraft.world.entity.animal.horse.EntityLlama$a
    M:double getFollowDistance() -> l
net.minecraft.world.entity.animal.horse.Llama$LlamaGroupData -> bog$b -> net.minecraft.world.entity.animal.horse.EntityLlama$b
    F:int variant -> a
net.minecraft.world.entity.animal.horse.Llama$LlamaHurtByTargetGoal -> bog$c -> net.minecraft.world.entity.animal.horse.EntityLlama$c
    M:boolean canContinueToUse() -> b
net.minecraft.world.entity.animal.horse.Markings -> boh -> net.minecraft.world.entity.animal.horse.HorseStyle
    F:net.minecraft.world.entity.animal.horse.HorseStyle NONE -> a
    F:net.minecraft.world.entity.animal.horse.HorseStyle WHITE -> b
    F:net.minecraft.world.entity.animal.horse.HorseStyle WHITE_FIELD -> c
    F:net.minecraft.world.entity.animal.horse.HorseStyle WHITE_DOTS -> d
    F:net.minecraft.world.entity.animal.horse.HorseStyle BLACK_DOTS -> e
    F:int id -> g
    M:int getId() -> a
    M:net.minecraft.world.entity.animal.horse.HorseStyle byId(int) -> a
net.minecraft.world.entity.animal.horse.Mule -> boi -> net.minecraft.world.entity.animal.horse.EntityHorseMule
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getAngrySound() -> ge
    M:net.minecraft.sounds.SoundEffect getEatingSound() -> gd
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
net.minecraft.world.entity.animal.horse.SkeletonHorse -> boj -> net.minecraft.world.entity.animal.horse.EntityHorseSkeleton
    F:int TRAP_MAX_LIFE -> cn
    F:boolean isTrap -> co
    F:int trapTime -> cp
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> q
    M:void randomizeAttributes(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playSwimSound(float) -> d
    M:void playJumpSound() -> gk
    M:net.minecraft.world.entity.EnumMonsterType getMobType() -> ez
    M:double getPassengersRidingOffset() -> bu
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean isTrap() -> t
    M:void setTrap(boolean) -> v
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
net.minecraft.world.entity.animal.horse.SkeletonTrapGoal -> bok -> net.minecraft.world.entity.animal.horse.PathfinderGoalHorseTrap
    F:net.minecraft.world.entity.animal.horse.EntityHorseSkeleton horse -> a
    M:boolean canUse() -> a
    M:void tick() -> e
    M:net.minecraft.world.entity.animal.horse.EntityHorseAbstract createHorse(net.minecraft.world.DifficultyDamageScaler) -> a
    M:net.minecraft.world.entity.monster.EntitySkeleton createSkeleton(net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.animal.horse.EntityHorseAbstract) -> a
    M:net.minecraft.world.item.ItemStack disenchant(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.entity.animal.horse.TraderLlama -> bol -> net.minecraft.world.entity.animal.horse.EntityLlamaTrader
    F:int despawnDelay -> cn
    M:boolean isTraderLlama() -> gp
    M:net.minecraft.world.entity.animal.horse.EntityLlama makeBabyLlama() -> gu
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void registerGoals() -> u
    M:void setDespawnDelay(int) -> x
    M:void doPlayerRide(net.minecraft.world.entity.player.EntityHuman) -> e
    M:void maybeDespawn() -> gz
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.entity.animal.horse.TraderLlama$TraderLlamaDefendWanderingTraderGoal -> bol$a -> net.minecraft.world.entity.animal.horse.EntityLlamaTrader$a
    F:net.minecraft.world.entity.animal.horse.EntityLlama llama -> a
    F:net.minecraft.world.entity.EntityLiving ownerLastHurtBy -> b
    F:int timestamp -> c
    M:boolean canUse() -> a
    M:void start() -> c
net.minecraft.world.entity.animal.horse.Variant -> bom -> net.minecraft.world.entity.animal.horse.HorseColor
    F:net.minecraft.world.entity.animal.horse.HorseColor WHITE -> a
    F:net.minecraft.world.entity.animal.horse.HorseColor CREAMY -> b
    F:net.minecraft.world.entity.animal.horse.HorseColor CHESTNUT -> c
    F:net.minecraft.world.entity.animal.horse.HorseColor BROWN -> d
    F:net.minecraft.world.entity.animal.horse.HorseColor BLACK -> e
    F:net.minecraft.world.entity.animal.horse.HorseColor GRAY -> f
    F:net.minecraft.world.entity.animal.horse.HorseColor DARKBROWN -> g
    F:int id -> i
    M:int getId() -> a
    M:net.minecraft.world.entity.animal.horse.HorseColor byId(int) -> a
net.minecraft.world.entity.animal.horse.ZombieHorse -> bon -> net.minecraft.world.entity.animal.horse.EntityHorseZombie
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> q
    M:void randomizeAttributes(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.entity.EnumMonsterType getMobType() -> ez
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
net.minecraft.world.entity.boss.EnderDragonPart -> boq -> net.minecraft.world.entity.boss.EntityComplexPart
    F:net.minecraft.world.entity.boss.enderdragon.EntityEnderDragon parentMob -> b
    F:java.lang.String name -> c
    F:net.minecraft.world.entity.EntitySize size -> d
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:boolean isPickable() -> bl
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:boolean is(net.minecraft.world.entity.Entity) -> q
    M:net.minecraft.world.entity.EntitySize getDimensions(net.minecraft.world.entity.EntityPose) -> a
    M:boolean shouldBeSaved() -> dx
net.minecraft.world.entity.boss.enderdragon.EndCrystal -> bor -> net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal
    F:net.minecraft.network.syncher.DataWatcherObject DATA_BEAM_TARGET -> c
    F:net.minecraft.network.syncher.DataWatcherObject DATA_SHOW_BOTTOM -> d
    F:int time -> b
    M:void tick() -> k
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean isPickable() -> bl
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void kill() -> ag
    M:void onDestroyedBy(net.minecraft.world.damagesource.DamageSource) -> a
    M:void setBeamTarget(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.BlockPosition getBeamTarget() -> h
    M:void setShowBottom(boolean) -> a
    M:boolean showsBottom() -> i
    M:boolean shouldRenderAtSqrDistance(double) -> a
    M:net.minecraft.world.item.ItemStack getPickResult() -> do
net.minecraft.world.entity.boss.enderdragon.EnderDragon -> bos -> net.minecraft.world.entity.boss.enderdragon.EntityEnderDragon
    F:org.slf4j.Logger LOGGER -> cc
    F:net.minecraft.network.syncher.DataWatcherObject DATA_PHASE -> b
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition CRYSTAL_DESTROY_TARGETING -> cd
    F:int GROWL_INTERVAL_MIN -> ce
    F:int GROWL_INTERVAL_MAX -> cf
    F:float SITTING_ALLOWED_DAMAGE_PERCENTAGE -> cg
    F:java.lang.String DRAGON_DEATH_TIME_KEY -> ch
    F:java.lang.String DRAGON_PHASE_KEY -> ci
    F:int posPointer -> d
    F:net.minecraft.world.entity.boss.EntityComplexPart head -> e
    F:net.minecraft.world.entity.boss.EntityComplexPart neck -> ck
    F:net.minecraft.world.entity.boss.EntityComplexPart body -> cl
    F:net.minecraft.world.entity.boss.EntityComplexPart tail1 -> cm
    F:net.minecraft.world.entity.boss.EntityComplexPart tail2 -> cn
    F:net.minecraft.world.entity.boss.EntityComplexPart tail3 -> co
    F:net.minecraft.world.entity.boss.EntityComplexPart wing1 -> cp
    F:net.minecraft.world.entity.boss.EntityComplexPart wing2 -> cq
    F:float yRotA -> ca
    F:net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal nearestCrystal -> cb
    F:net.minecraft.world.level.dimension.end.EnderDragonBattle dragonFight -> cr
    F:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerManager phaseManager -> cs
    F:int growlTime -> ct
    F:float sittingDamageReceived -> cu
    F:net.minecraft.world.level.pathfinder.Path openSet -> cx
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:void tickPart(net.minecraft.world.entity.boss.EntityComplexPart,double,double,double) -> a
    M:void knockBack(java.util.List) -> a
    M:void hurt(java.util.List) -> b
    M:float rotWrap(double) -> i
    M:boolean checkWalls(net.minecraft.world.phys.AxisAlignedBB) -> b
    M:boolean hurt(net.minecraft.world.entity.boss.EntityComplexPart,net.minecraft.world.damagesource.DamageSource,float) -> a
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:boolean reallyHurt(net.minecraft.world.damagesource.DamageSource,float) -> g
    M:void kill() -> ag
    M:int findClosestNode() -> q
    M:int findClosestNode(double,double,double) -> q
    M:net.minecraft.world.level.pathfinder.PathEntity findPath(int,int,net.minecraft.world.level.pathfinder.PathPoint) -> a
    M:net.minecraft.world.level.pathfinder.PathEntity reconstructPath(net.minecraft.world.level.pathfinder.PathPoint,net.minecraft.world.level.pathfinder.PathPoint) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void checkDespawn() -> dn
    M:boolean isPickable() -> bl
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:float getHeadPartYOffset(int,double[],double[]) -> a
    M:net.minecraft.world.phys.Vec3D getHeadLookVector(float) -> x
    M:void onCrystalDestroyed(net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal,net.minecraft.core.BlockPosition,net.minecraft.world.damagesource.DamageSource) -> a
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:boolean addEffect(net.minecraft.world.effect.MobEffect,net.minecraft.world.entity.Entity) -> b
    M:boolean canRide(net.minecraft.world.entity.Entity) -> l
    M:boolean canChangeDimensions() -> cl
    M:void recreateFromPacket(net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity) -> a
    M:boolean canAttack(net.minecraft.world.entity.EntityLiving) -> c
net.minecraft.world.entity.boss.enderdragon.phases.AbstractDragonPhaseInstance -> bou -> net.minecraft.world.entity.boss.enderdragon.phases.AbstractDragonController
    F:net.minecraft.world.entity.boss.enderdragon.EntityEnderDragon dragon -> a
    M:boolean isSitting() -> a
    M:void doClientTick() -> b
    M:void doServerTick() -> c
    M:void onCrystalDestroyed(net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal,net.minecraft.core.BlockPosition,net.minecraft.world.damagesource.DamageSource,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void begin() -> d
    M:void end() -> e
    M:float getFlySpeed() -> f
    M:net.minecraft.world.phys.Vec3D getFlyTargetLocation() -> g
    M:float onHurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:float getTurnSpeed() -> h
net.minecraft.world.entity.boss.enderdragon.phases.AbstractDragonSittingPhase -> bov -> net.minecraft.world.entity.boss.enderdragon.phases.AbstractDragonControllerLanded
    M:boolean isSitting() -> a
    M:float onHurt(net.minecraft.world.damagesource.DamageSource,float) -> a
net.minecraft.world.entity.boss.enderdragon.phases.DragonChargePlayerPhase -> bow -> net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerCharge
    F:org.slf4j.Logger LOGGER -> b
    F:int CHARGE_RECOVERY_TIME -> c
    F:net.minecraft.world.phys.Vec3D targetLocation -> d
    F:int timeSinceCharge -> e
    M:void doServerTick() -> c
    M:void begin() -> d
    M:void setTarget(net.minecraft.world.phys.Vec3D) -> a
    M:float getFlySpeed() -> f
    M:net.minecraft.world.phys.Vec3D getFlyTargetLocation() -> g
    M:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase getPhase() -> i
net.minecraft.world.entity.boss.enderdragon.phases.DragonDeathPhase -> box -> net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerDying
    F:net.minecraft.world.phys.Vec3D targetLocation -> b
    F:int time -> c
    M:void doClientTick() -> b
    M:void doServerTick() -> c
    M:void begin() -> d
    M:float getFlySpeed() -> f
    M:net.minecraft.world.phys.Vec3D getFlyTargetLocation() -> g
    M:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase getPhase() -> i
net.minecraft.world.entity.boss.enderdragon.phases.DragonHoldingPatternPhase -> boy -> net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerHold
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition NEW_TARGET_TARGETING -> b
    F:net.minecraft.world.level.pathfinder.PathEntity currentPath -> c
    F:net.minecraft.world.phys.Vec3D targetLocation -> d
    F:boolean clockwise -> e
    M:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase getPhase() -> i
    M:void doServerTick() -> c
    M:void begin() -> d
    M:net.minecraft.world.phys.Vec3D getFlyTargetLocation() -> g
    M:void findNewTarget() -> j
    M:void strafePlayer(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void navigateToNextPathNode() -> k
    M:void onCrystalDestroyed(net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal,net.minecraft.core.BlockPosition,net.minecraft.world.damagesource.DamageSource,net.minecraft.world.entity.player.EntityHuman) -> a
net.minecraft.world.entity.boss.enderdragon.phases.DragonHoverPhase -> boz -> net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerHover
    F:net.minecraft.world.phys.Vec3D targetLocation -> b
    M:void doServerTick() -> c
    M:boolean isSitting() -> a
    M:void begin() -> d
    M:float getFlySpeed() -> f
    M:net.minecraft.world.phys.Vec3D getFlyTargetLocation() -> g
    M:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase getPhase() -> i
net.minecraft.world.entity.boss.enderdragon.phases.DragonLandingApproachPhase -> bpa -> net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerLandingFly
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition NEAR_EGG_TARGETING -> b
    F:net.minecraft.world.level.pathfinder.PathEntity currentPath -> c
    F:net.minecraft.world.phys.Vec3D targetLocation -> d
    M:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase getPhase() -> i
    M:void begin() -> d
    M:void doServerTick() -> c
    M:net.minecraft.world.phys.Vec3D getFlyTargetLocation() -> g
    M:void findNewTarget() -> j
    M:void navigateToNextPathNode() -> k
net.minecraft.world.entity.boss.enderdragon.phases.DragonLandingPhase -> bpb -> net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerLanding
    F:net.minecraft.world.phys.Vec3D targetLocation -> b
    M:void doClientTick() -> b
    M:void doServerTick() -> c
    M:float getFlySpeed() -> f
    M:float getTurnSpeed() -> h
    M:void begin() -> d
    M:net.minecraft.world.phys.Vec3D getFlyTargetLocation() -> g
    M:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase getPhase() -> i
net.minecraft.world.entity.boss.enderdragon.phases.DragonPhaseInstance -> bpc -> net.minecraft.world.entity.boss.enderdragon.phases.IDragonController
net.minecraft.world.entity.boss.enderdragon.phases.DragonSittingAttackingPhase -> bpd -> net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerLandedAttack
    F:int ROAR_DURATION -> b
    F:int attackingTicks -> c
    M:void doClientTick() -> b
    M:void doServerTick() -> c
    M:void begin() -> d
    M:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase getPhase() -> i
net.minecraft.world.entity.boss.enderdragon.phases.DragonSittingFlamingPhase -> bpe -> net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerLandedFlame
    F:int FLAME_DURATION -> b
    F:int SITTING_FLAME_ATTACKS_COUNT -> c
    F:int WARMUP_TIME -> d
    F:int flameTicks -> e
    F:int flameCount -> f
    F:net.minecraft.world.entity.EntityAreaEffectCloud flame -> g
    M:void doClientTick() -> b
    M:void doServerTick() -> c
    M:void begin() -> d
    M:void end() -> e
    M:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase getPhase() -> i
    M:void resetFlameCount() -> j
net.minecraft.world.entity.boss.enderdragon.phases.DragonSittingScanningPhase -> bpf -> net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerLandedSearch
    F:int SITTING_SCANNING_IDLE_TICKS -> b
    F:int SITTING_ATTACK_Y_VIEW_RANGE -> c
    F:int SITTING_ATTACK_VIEW_RANGE -> d
    F:int SITTING_CHARGE_VIEW_RANGE -> e
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition CHARGE_TARGETING -> f
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition scanTargeting -> g
    F:int scanningTime -> h
    M:void doServerTick() -> c
    M:void begin() -> d
    M:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase getPhase() -> i
net.minecraft.world.entity.boss.enderdragon.phases.DragonStrafePlayerPhase -> bpg -> net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerStrafe
    F:org.slf4j.Logger LOGGER -> b
    F:int FIREBALL_CHARGE_AMOUNT -> c
    F:int fireballCharge -> d
    F:net.minecraft.world.level.pathfinder.PathEntity currentPath -> e
    F:net.minecraft.world.phys.Vec3D targetLocation -> f
    F:net.minecraft.world.entity.EntityLiving attackTarget -> g
    F:boolean holdingPatternClockwise -> h
    M:void doServerTick() -> c
    M:void findNewTarget() -> j
    M:void navigateToNextPathNode() -> k
    M:void begin() -> d
    M:void setTarget(net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.phys.Vec3D getFlyTargetLocation() -> g
    M:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase getPhase() -> i
net.minecraft.world.entity.boss.enderdragon.phases.DragonTakeoffPhase -> bph -> net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerFly
    F:boolean firstTick -> b
    F:net.minecraft.world.level.pathfinder.PathEntity currentPath -> c
    F:net.minecraft.world.phys.Vec3D targetLocation -> d
    M:void doServerTick() -> c
    M:void begin() -> d
    M:void findNewTarget() -> j
    M:void navigateToNextPathNode() -> k
    M:net.minecraft.world.phys.Vec3D getFlyTargetLocation() -> g
    M:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase getPhase() -> i
net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase -> bpi -> net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase
    F:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase HOLDING_PATTERN -> a
    F:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase STRAFE_PLAYER -> b
    F:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase LANDING_APPROACH -> c
    F:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase LANDING -> d
    F:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase TAKEOFF -> e
    F:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase SITTING_FLAMING -> f
    F:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase SITTING_SCANNING -> g
    F:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase SITTING_ATTACKING -> h
    F:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase CHARGING_PLAYER -> i
    F:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase DYING -> j
    F:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase HOVERING -> k
    F:java.lang.Class instanceClass -> m
    F:int id -> n
    F:java.lang.String name -> o
    M:net.minecraft.world.entity.boss.enderdragon.phases.IDragonController createInstance(net.minecraft.world.entity.boss.enderdragon.EntityEnderDragon) -> a
    M:java.lang.reflect.Constructor getConstructor() -> a
    M:int getId() -> b
    M:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase getById(int) -> a
    M:int getCount() -> c
    M:net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase create(java.lang.Class,java.lang.String) -> a
net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhaseManager -> bpj -> net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerManager
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.world.entity.boss.enderdragon.EntityEnderDragon dragon -> b
    F:net.minecraft.world.entity.boss.enderdragon.phases.IDragonController currentPhase -> d
    M:void setPhase(net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase) -> a
    M:net.minecraft.world.entity.boss.enderdragon.phases.IDragonController getCurrentPhase() -> a
    M:net.minecraft.world.entity.boss.enderdragon.phases.IDragonController getPhase(net.minecraft.world.entity.boss.enderdragon.phases.DragonControllerPhase) -> b
net.minecraft.world.entity.boss.wither.WitherBoss -> bpm -> net.minecraft.world.entity.boss.wither.EntityWither
    F:net.minecraft.network.syncher.DataWatcherObject DATA_TARGET_A -> b
    F:net.minecraft.network.syncher.DataWatcherObject DATA_TARGET_B -> c
    F:net.minecraft.network.syncher.DataWatcherObject DATA_TARGET_C -> d
    F:java.util.List DATA_TARGETS -> e
    F:int destroyBlocksTick -> cf
    F:net.minecraft.server.level.BossBattleServer bossEvent -> cg
    F:java.util.function.Predicate LIVING_ENTITY_SELECTOR -> ch
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition TARGETING_CONDITIONS -> ci
    M:net.minecraft.world.entity.ai.navigation.NavigationAbstract createNavigation(net.minecraft.world.level.World) -> a
    M:void registerGoals() -> u
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void setCustomName(net.minecraft.network.chat.IChatBaseComponent) -> b
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:boolean canDestroy(net.minecraft.world.level.block.state.IBlockData) -> c
    M:void makeInvulnerable() -> n
    M:void makeStuckInBlock(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.Vec3D) -> a
    M:void startSeenByPlayer(net.minecraft.server.level.EntityPlayer) -> c
    M:void stopSeenByPlayer(net.minecraft.server.level.EntityPlayer) -> d
    M:double getHeadX(int) -> t
    M:double getHeadY(int) -> u
    M:double getHeadZ(int) -> v
    M:float rotlerp(float,float,float) -> a
    M:void performRangedAttack(int,net.minecraft.world.entity.EntityLiving) -> a
    M:void performRangedAttack(int,double,double,double,boolean) -> a
    M:void performRangedAttack(net.minecraft.world.entity.EntityLiving,float) -> a
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void dropCustomDeathLoot(net.minecraft.world.damagesource.DamageSource,int,boolean) -> a
    M:void checkDespawn() -> dn
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:boolean addEffect(net.minecraft.world.effect.MobEffect,net.minecraft.world.entity.Entity) -> b
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> q
    M:float getHeadYRot(int) -> a
    M:float getHeadXRot(int) -> b
    M:int getInvulnerableTicks() -> t
    M:void setInvulnerableTicks(int) -> c
    M:int getAlternativeTarget(int) -> s
    M:void setAlternativeTarget(int,int) -> a
    M:boolean isPowered() -> a
    M:net.minecraft.world.entity.EnumMonsterType getMobType() -> ez
    M:boolean canRide(net.minecraft.world.entity.Entity) -> l
    M:boolean canChangeDimensions() -> cl
    M:boolean canBeAffected(net.minecraft.world.effect.MobEffect) -> c
net.minecraft.world.entity.boss.wither.WitherBoss$WitherDoNothingGoal -> bpm$a -> net.minecraft.world.entity.boss.wither.EntityWither$a
    M:boolean canUse() -> a
net.minecraft.world.entity.decoration.ArmorStand -> bpo -> net.minecraft.world.entity.decoration.EntityArmorStand
    F:int WOBBLE_TIME -> b
    F:double HEAD_OFFSET -> ca
    F:int DISABLE_TAKING_OFFSET -> c
    F:int DISABLE_PUTTING_OFFSET -> d
    F:int CLIENT_FLAG_SMALL -> e
    F:int CLIENT_FLAG_SHOW_ARMS -> f
    F:java.util.function.Predicate RIDABLE_MINECARTS -> cb
    F:net.minecraft.core.NonNullList handItems -> cc
    F:net.minecraft.core.NonNullList armorItems -> cd
    F:boolean invisible -> ce
    F:int disabledSlots -> cf
    F:net.minecraft.core.Vector3f headPose -> cg
    F:net.minecraft.core.Vector3f bodyPose -> ch
    F:net.minecraft.core.Vector3f leftArmPose -> ci
    F:net.minecraft.core.Vector3f rightArmPose -> cj
    F:net.minecraft.core.Vector3f leftLegPose -> ck
    F:net.minecraft.core.Vector3f rightLegPose -> cl
    M:net.minecraft.world.item.ItemStack getItemBySlot(net.minecraft.world.entity.EnumItemSlot) -> c
    M:void setItemSlot(net.minecraft.world.entity.EnumItemSlot,net.minecraft.world.item.ItemStack) -> a
    M:boolean canTakeItem(net.minecraft.world.item.ItemStack) -> g
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void readPose(net.minecraft.nbt.NBTTagCompound) -> c
    M:boolean isPushable() -> bm
    M:net.minecraft.world.EnumInteractionResult interactAt(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.phys.Vec3D,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.world.entity.EnumItemSlot getClickedSlot(net.minecraft.world.phys.Vec3D) -> i
    M:boolean isDisabled(net.minecraft.world.entity.EnumItemSlot) -> e
    M:boolean swapItem(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.entity.EnumItemSlot,net.minecraft.world.item.ItemStack,net.minecraft.world.EnumHand) -> a
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void handleEntityEvent(byte) -> a
    M:boolean shouldRenderAtSqrDistance(double) -> a
    M:void causeDamage(net.minecraft.world.damagesource.DamageSource,float) -> g
    M:void brokenByPlayer(net.minecraft.world.damagesource.DamageSource) -> g
    M:void brokenByAnything(net.minecraft.world.damagesource.DamageSource) -> h
    M:float tickHeadTurn(float,float) -> e
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:double getMyRidingOffset() -> bt
    M:void travel(net.minecraft.world.phys.Vec3D) -> g
    M:void setYBodyRot(float) -> m
    M:void setYHeadRot(float) -> l
    M:void tick() -> k
    M:void setInvisible(boolean) -> j
    M:void kill() -> ag
    M:void setSmall(boolean) -> a
    M:boolean isSmall() -> n
    M:void setShowArms(boolean) -> r
    M:boolean isShowArms() -> q
    M:void setNoBasePlate(boolean) -> s
    M:boolean isNoBasePlate() -> r
    M:void setMarker(boolean) -> t
    M:boolean isMarker() -> t
    M:byte setBit(byte,int,boolean) -> a
    M:void setHeadPose(net.minecraft.core.Vector3f) -> a
    M:void setBodyPose(net.minecraft.core.Vector3f) -> b
    M:void setLeftArmPose(net.minecraft.core.Vector3f) -> c
    M:void setRightArmPose(net.minecraft.core.Vector3f) -> d
    M:void setLeftLegPose(net.minecraft.core.Vector3f) -> e
    M:void setRightLegPose(net.minecraft.core.Vector3f) -> f
    M:net.minecraft.core.Vector3f getHeadPose() -> u
    M:net.minecraft.core.Vector3f getBodyPose() -> w
    M:net.minecraft.core.Vector3f getLeftArmPose() -> x
    M:net.minecraft.core.Vector3f getRightArmPose() -> y
    M:net.minecraft.core.Vector3f getLeftLegPose() -> z
    M:boolean isPickable() -> bl
    M:boolean skipAttackInteraction(net.minecraft.world.entity.Entity) -> r
    M:net.minecraft.world.entity.LivingEntity$Fallsounds getFallSounds() -> eo
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void thunderHit(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLightning) -> a
    M:boolean isAffectedByPotions() -> ff
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:boolean attackable() -> fg
    M:net.minecraft.world.entity.EntitySize getDimensions(net.minecraft.world.entity.EntityPose) -> a
    M:net.minecraft.world.entity.EntitySize getDimensionsMarker(boolean) -> u
    M:net.minecraft.world.phys.Vec3D getLightProbePosition(float) -> j
    M:net.minecraft.world.item.ItemStack getPickResult() -> do
    M:boolean canBeSeenByAnyone() -> ea
net.minecraft.world.entity.decoration.GlowItemFrame -> bpp -> net.minecraft.world.entity.decoration.GlowItemFrame
    M:net.minecraft.sounds.SoundEffect getRemoveItemSound() -> h
    M:net.minecraft.sounds.SoundEffect getBreakSound() -> i
    M:net.minecraft.sounds.SoundEffect getPlaceSound() -> j
    M:net.minecraft.sounds.SoundEffect getAddItemSound() -> l
    M:net.minecraft.sounds.SoundEffect getRotateItemSound() -> n
    M:net.minecraft.world.item.ItemStack getFrameItemStack() -> o
net.minecraft.world.entity.decoration.HangingEntity -> bpq -> net.minecraft.world.entity.decoration.EntityHanging
    F:org.slf4j.Logger LOGGER -> e
    F:java.util.function.Predicate HANGING_ENTITY -> b
    F:int checkInterval -> f
    F:net.minecraft.core.BlockPosition pos -> c
    F:net.minecraft.core.EnumDirection direction -> d
    M:void setDirection(net.minecraft.core.EnumDirection) -> a
    M:void recalculateBoundingBox() -> q
    M:double offs(int) -> a
    M:void tick() -> k
    M:boolean survives() -> r
    M:boolean isPickable() -> bl
    M:boolean skipAttackInteraction(net.minecraft.world.entity.Entity) -> r
    M:net.minecraft.core.EnumDirection getDirection() -> cw
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void move(net.minecraft.world.entity.EnumMoveType,net.minecraft.world.phys.Vec3D) -> a
    M:void push(double,double,double) -> i
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.entity.item.EntityItem spawnAtLocation(net.minecraft.world.item.ItemStack,float) -> a
    M:boolean repositionEntityAfterLoad() -> bn
    M:void setPos(double,double,double) -> e
    M:net.minecraft.core.BlockPosition getPos() -> w
    M:float rotate(net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:float mirror(net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void thunderHit(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLightning) -> a
net.minecraft.world.entity.decoration.ItemFrame -> bpr -> net.minecraft.world.entity.decoration.EntityItemFrame
    F:org.slf4j.Logger LOGGER -> f
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ITEM -> ao
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ROTATION -> ap
    F:int NUM_ROTATIONS -> e
    F:float dropChance -> aq
    F:boolean fixed -> ar
    M:float getEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> a
    M:void setDirection(net.minecraft.core.EnumDirection) -> a
    M:void recalculateBoundingBox() -> q
    M:boolean survives() -> r
    M:void move(net.minecraft.world.entity.EnumMoveType,net.minecraft.world.phys.Vec3D) -> a
    M:void push(double,double,double) -> i
    M:float getPickRadius() -> by
    M:void kill() -> ag
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:net.minecraft.sounds.SoundEffect getRemoveItemSound() -> h
    M:int getWidth() -> s
    M:int getHeight() -> t
    M:boolean shouldRenderAtSqrDistance(double) -> a
    M:void dropItem(net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.sounds.SoundEffect getBreakSound() -> i
    M:void playPlacementSound() -> u
    M:net.minecraft.sounds.SoundEffect getPlaceSound() -> j
    M:void dropItem(net.minecraft.world.entity.Entity,boolean) -> b
    M:void removeFramedMap(net.minecraft.world.item.ItemStack) -> c
    M:net.minecraft.world.item.ItemStack getItem() -> x
    M:java.util.OptionalInt getFramedMapId() -> y
    M:boolean hasFramedMap() -> z
    M:void setItem(net.minecraft.world.item.ItemStack) -> a
    M:void setItem(net.minecraft.world.item.ItemStack,boolean) -> a
    M:net.minecraft.sounds.SoundEffect getAddItemSound() -> l
    M:net.minecraft.world.entity.SlotAccess getSlot(int) -> k
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:void onItemChanged(net.minecraft.world.item.ItemStack) -> d
    M:void setRotation(int) -> a
    M:void setRotation(int,boolean) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.EnumInteractionResult interact(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.sounds.SoundEffect getRotateItemSound() -> n
    M:void recreateFromPacket(net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity) -> a
    M:net.minecraft.world.item.ItemStack getPickResult() -> do
    M:net.minecraft.world.item.ItemStack getFrameItemStack() -> o
    M:float getVisualRotationYInDegrees() -> ds
    M:net.minecraft.world.item.ItemStack get() -> a
    M:boolean set(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.entity.decoration.LeashFenceKnotEntity -> bps -> net.minecraft.world.entity.decoration.EntityLeash
    F:double OFFSET_Y -> e
    M:void recalculateBoundingBox() -> q
    M:void setDirection(net.minecraft.core.EnumDirection) -> a
    M:int getWidth() -> s
    M:int getHeight() -> t
    M:float getEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> a
    M:boolean shouldRenderAtSqrDistance(double) -> a
    M:void dropItem(net.minecraft.world.entity.Entity) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.EnumInteractionResult interact(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:boolean survives() -> r
    M:net.minecraft.world.entity.decoration.EntityLeash getOrCreateKnot(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:void playPlacementSound() -> u
    M:net.minecraft.world.phys.Vec3D getRopeHoldPosition(float) -> n
    M:net.minecraft.world.item.ItemStack getPickResult() -> do
net.minecraft.world.entity.decoration.Painting -> bpt -> net.minecraft.world.entity.decoration.EntityPainting
    F:net.minecraft.network.syncher.DataWatcherObject DATA_PAINTING_VARIANT_ID -> e
    F:net.minecraft.resources.ResourceKey DEFAULT_VARIANT -> f
    M:net.minecraft.core.Holder getDefaultVariant() -> i
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:void setVariant(net.minecraft.core.Holder) -> a
    M:net.minecraft.core.Holder getVariant() -> h
    M:java.util.Optional create(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:int variantArea(net.minecraft.core.Holder) -> b
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:int getWidth() -> s
    M:int getHeight() -> t
    M:void dropItem(net.minecraft.world.entity.Entity) -> a
    M:void playPlacementSound() -> u
    M:void moveTo(double,double,double,float,float) -> b
    M:void lerpTo(double,double,double,float,float,int,boolean) -> a
    M:net.minecraft.world.phys.Vec3D trackingPosition() -> da
    M:void recreateFromPacket(net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity) -> a
    M:net.minecraft.world.item.ItemStack getPickResult() -> do
net.minecraft.world.entity.decoration.PaintingVariant -> bpu -> net.minecraft.world.entity.decoration.PaintingVariant
    F:int width -> a
    F:int height -> b
    M:int getWidth() -> a
    M:int getHeight() -> b
net.minecraft.world.entity.decoration.PaintingVariants -> bpv -> net.minecraft.world.entity.decoration.PaintingVariants
    F:net.minecraft.resources.ResourceKey KEBAB -> a
    F:net.minecraft.resources.ResourceKey AZTEC -> b
    F:net.minecraft.resources.ResourceKey ALBAN -> c
    F:net.minecraft.resources.ResourceKey AZTEC2 -> d
    F:net.minecraft.resources.ResourceKey BOMB -> e
    F:net.minecraft.resources.ResourceKey PLANT -> f
    F:net.minecraft.resources.ResourceKey WASTELAND -> g
    F:net.minecraft.resources.ResourceKey POOL -> h
    F:net.minecraft.resources.ResourceKey COURBET -> i
    F:net.minecraft.resources.ResourceKey SEA -> j
    F:net.minecraft.resources.ResourceKey SUNSET -> k
    F:net.minecraft.resources.ResourceKey CREEBET -> l
    F:net.minecraft.resources.ResourceKey WANDERER -> m
    F:net.minecraft.resources.ResourceKey GRAHAM -> n
    F:net.minecraft.resources.ResourceKey MATCH -> o
    F:net.minecraft.resources.ResourceKey BUST -> p
    F:net.minecraft.resources.ResourceKey STAGE -> q
    F:net.minecraft.resources.ResourceKey VOID -> r
    F:net.minecraft.resources.ResourceKey SKULL_AND_ROSES -> s
    F:net.minecraft.resources.ResourceKey WITHER -> t
    F:net.minecraft.resources.ResourceKey FIGHTERS -> u
    F:net.minecraft.resources.ResourceKey POINTER -> v
    F:net.minecraft.resources.ResourceKey PIGSCENE -> w
    F:net.minecraft.resources.ResourceKey BURNING_SKULL -> x
    F:net.minecraft.resources.ResourceKey SKELETON -> y
    F:net.minecraft.resources.ResourceKey DONKEY_KONG -> z
    M:net.minecraft.world.entity.decoration.PaintingVariant bootstrap(net.minecraft.core.IRegistry) -> a
    M:net.minecraft.resources.ResourceKey create(java.lang.String) -> a
net.minecraft.world.entity.item.FallingBlockEntity -> bpx -> net.minecraft.world.entity.item.EntityFallingBlock
    F:org.slf4j.Logger LOGGER -> f
    F:net.minecraft.world.level.block.state.IBlockData blockState -> ao
    F:int time -> b
    F:boolean dropItem -> c
    F:boolean cancelDrop -> ap
    F:boolean hurtEntities -> aq
    F:int fallDamageMax -> ar
    F:float fallDamagePerDistance -> as
    F:net.minecraft.nbt.NBTTagCompound blockData -> d
    F:net.minecraft.network.syncher.DataWatcherObject DATA_START_POS -> e
    M:net.minecraft.world.entity.item.EntityFallingBlock fall(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isAttackable() -> ci
    M:void setStartPos(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.BlockPosition getStartPos() -> h
    M:boolean isPickable() -> bl
    M:void tick() -> k
    M:void callOnBrokenAfterFall(net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition) -> a
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void setHurtsEntities(float,int) -> b
    M:boolean displayFireAnimation() -> co
    M:void fillCrashReportCategory(net.minecraft.CrashReportSystemDetails) -> a
    M:net.minecraft.world.level.block.state.IBlockData getBlockState() -> i
    M:void recreateFromPacket(net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity) -> a
net.minecraft.world.entity.item.ItemEntity -> bpy -> net.minecraft.world.entity.item.EntityItem
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ITEM -> c
    F:int LIFETIME -> d
    F:int INFINITE_PICKUP_DELAY -> e
    F:int INFINITE_LIFETIME -> f
    F:int age -> ao
    F:int pickupDelay -> ap
    F:int health -> aq
    F:java.util.UUID thrower -> ar
    F:java.util.UUID owner -> as
    F:float bobOffs -> b
    M:void tick() -> k
    M:void setUnderwaterMovement() -> x
    M:void setUnderLavaMovement() -> y
    M:void mergeWithNeighbours() -> z
    M:void tryToMerge(net.minecraft.world.entity.item.EntityItem) -> a
    M:boolean areMergable(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack merge(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,int) -> a
    M:void merge(net.minecraft.world.entity.item.EntityItem,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:void merge(net.minecraft.world.entity.item.EntityItem,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.item.EntityItem,net.minecraft.world.item.ItemStack) -> a
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean isAttackable() -> ci
    M:net.minecraft.world.entity.Entity changeDimension(net.minecraft.server.level.WorldServer) -> b
    M:net.minecraft.world.item.ItemStack getItem() -> h
    M:void setItem(net.minecraft.world.item.ItemStack) -> a
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:java.util.UUID getOwner() -> i
    M:void setOwner(java.util.UUID) -> b
    M:java.util.UUID getThrower() -> j
    M:void setThrower(java.util.UUID) -> c
    M:int getAge() -> l
    M:void setDefaultPickUpDelay() -> n
    M:void setNoPickUpDelay() -> o
    M:void setNeverPickUp() -> q
    M:void setPickUpDelay(int) -> a
    M:boolean hasPickUpDelay() -> r
    M:void setUnlimitedLifetime() -> s
    M:void setExtendedLifetime() -> t
    M:void makeFakeItem() -> u
    M:float getSpin(float) -> a
    M:net.minecraft.world.entity.item.EntityItem copy() -> w
    M:float getVisualRotationYInDegrees() -> ds
net.minecraft.world.entity.item.PrimedTnt -> bpz -> net.minecraft.world.entity.item.EntityTNTPrimed
    F:net.minecraft.network.syncher.DataWatcherObject DATA_FUSE_ID -> b
    F:int DEFAULT_FUSE_TIME -> c
    F:net.minecraft.world.entity.EntityLiving owner -> d
    M:boolean isPickable() -> bl
    M:void tick() -> k
    M:void explode() -> j
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.entity.EntityLiving getOwner() -> h
    M:float getEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> a
    M:void setFuse(int) -> a
    M:int getFuse() -> i
net.minecraft.world.entity.monster.AbstractIllager -> bqb -> net.minecraft.world.entity.monster.EntityIllagerAbstract
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.EnumMonsterType getMobType() -> ez
    M:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose getArmPose() -> n
    M:boolean canAttack(net.minecraft.world.entity.EntityLiving) -> c
net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose -> bqb$a -> net.minecraft.world.entity.monster.EntityIllagerAbstract$a
    F:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose CROSSED -> a
    F:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose ATTACKING -> b
    F:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose SPELLCASTING -> c
    F:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose BOW_AND_ARROW -> d
    F:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose CROSSBOW_HOLD -> e
    F:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose CROSSBOW_CHARGE -> f
    F:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose CELEBRATING -> g
    F:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose NEUTRAL -> h
net.minecraft.world.entity.monster.AbstractIllager$RaiderOpenDoorGoal -> bqb$b -> net.minecraft.world.entity.monster.EntityIllagerAbstract$b
    M:boolean canUse() -> a
net.minecraft.world.entity.monster.AbstractSkeleton -> bqc -> net.minecraft.world.entity.monster.EntitySkeletonAbstract
    F:net.minecraft.world.entity.ai.goal.PathfinderGoalBowShoot bowGoal -> b
    F:net.minecraft.world.entity.ai.goal.PathfinderGoalMeleeAttack meleeGoal -> c
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:net.minecraft.world.entity.EnumMonsterType getMobType() -> ez
    M:void rideTick() -> bs
    M:void populateDefaultEquipmentSlots(net.minecraft.util.RandomSource,net.minecraft.world.DifficultyDamageScaler) -> a
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:void reassessWeaponGoal() -> t
    M:void performRangedAttack(net.minecraft.world.entity.EntityLiving,float) -> a
    M:net.minecraft.world.entity.projectile.EntityArrow getArrow(net.minecraft.world.item.ItemStack,float) -> b
    M:boolean canFireProjectileWeapon(net.minecraft.world.item.ItemProjectileWeapon) -> a
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void setItemSlot(net.minecraft.world.entity.EnumItemSlot,net.minecraft.world.item.ItemStack) -> a
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:double getMyRidingOffset() -> bt
    M:void stop() -> d
    M:void start() -> c
net.minecraft.world.entity.monster.Blaze -> bqd -> net.minecraft.world.entity.monster.EntityBlaze
    F:float allowedHeightOffset -> b
    F:int nextHeightOffsetChangeTick -> c
    F:net.minecraft.network.syncher.DataWatcherObject DATA_FLAGS_ID -> d
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:float getLightLevelDependentMagicValue() -> bh
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:boolean isCharged() -> q
    M:void setCharged(boolean) -> v
net.minecraft.world.entity.monster.Blaze$BlazeAttackGoal -> bqd$a -> net.minecraft.world.entity.monster.EntityBlaze$PathfinderGoalBlazeFireball
    F:net.minecraft.world.entity.monster.EntityBlaze blaze -> a
    F:int attackStep -> b
    F:int attackTime -> c
    F:int lastSeen -> d
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
    M:double getFollowDistance() -> h
net.minecraft.world.entity.monster.CaveSpider -> bqe -> net.minecraft.world.entity.monster.EntityCaveSpider
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createCaveSpider() -> n
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
net.minecraft.world.entity.monster.Creeper -> bqf -> net.minecraft.world.entity.monster.EntityCreeper
    F:net.minecraft.network.syncher.DataWatcherObject DATA_SWELL_DIR -> b
    F:net.minecraft.network.syncher.DataWatcherObject DATA_IS_POWERED -> c
    F:net.minecraft.network.syncher.DataWatcherObject DATA_IS_IGNITED -> d
    F:int oldSwell -> e
    F:int droppedSkulls -> ca
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:int getMaxFallDistance() -> cm
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void tick() -> k
    M:void setTarget(net.minecraft.world.entity.EntityLiving) -> h
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void dropCustomDeathLoot(net.minecraft.world.damagesource.DamageSource,int,boolean) -> a
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:boolean isPowered() -> a
    M:float getSwelling(float) -> y
    M:int getSwellDir() -> q
    M:void setSwellDir(int) -> a
    M:void thunderHit(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLightning) -> a
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:boolean isIgnited() -> t
net.minecraft.world.entity.monster.CrossbowAttackMob -> bqg -> net.minecraft.world.entity.monster.ICrossbow
    M:void performCrossbowAttack(net.minecraft.world.entity.EntityLiving,float) -> b
    M:void shootCrossbowProjectile(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.projectile.IProjectile,float,float) -> a
    M:com.mojang.math.Vector3fa getProjectileShotVector(net.minecraft.world.entity.EntityLiving,net.minecraft.world.phys.Vec3D,float) -> a
net.minecraft.world.entity.monster.Drowned -> bqh -> net.minecraft.world.entity.monster.EntityDrowned
    F:float NAUTILUS_SHELL_CHANCE -> b
    F:boolean searchingForLand -> ca
    F:net.minecraft.world.entity.ai.navigation.NavigationGuardian waterNavigation -> c
    F:net.minecraft.world.entity.ai.navigation.Navigation groundNavigation -> d
    M:void addBehaviourGoals() -> n
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean checkDrownedSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.WorldAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean isDeepEnoughToSpawn(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:boolean supportsBreakDoorGoal() -> q
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.sounds.SoundEffect getStepSound() -> t
    M:void populateDefaultEquipmentSlots(net.minecraft.util.RandomSource,net.minecraft.world.DifficultyDamageScaler) -> a
    M:boolean canReplaceCurrentItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:boolean checkSpawnObstruction(net.minecraft.world.level.IWorldReader) -> a
    M:boolean okTarget(net.minecraft.world.entity.EntityLiving) -> k
    M:boolean isPushedByFluid() -> cs
    M:void travel(net.minecraft.world.phys.Vec3D) -> g
    M:void performRangedAttack(net.minecraft.world.entity.EntityLiving,float) -> a
    M:void setSearchingForLand(boolean) -> v
net.minecraft.world.entity.monster.Drowned$DrownedAttackGoal -> bqh$a -> net.minecraft.world.entity.monster.EntityDrowned$a
    F:net.minecraft.world.entity.monster.EntityDrowned drowned -> b
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
net.minecraft.world.entity.monster.Drowned$DrownedGoToBeachGoal -> bqh$b -> net.minecraft.world.entity.monster.EntityDrowned$b
    F:net.minecraft.world.entity.monster.EntityDrowned drowned -> g
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:boolean isValidTarget(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void start() -> c
    M:void stop() -> d
net.minecraft.world.entity.monster.Drowned$DrownedGoToWaterGoal -> bqh$c -> net.minecraft.world.entity.monster.EntityDrowned$c
    F:net.minecraft.world.entity.EntityCreature mob -> a
    F:double wantedX -> b
    F:double wantedY -> c
    F:double wantedZ -> d
    F:double speedModifier -> e
    F:net.minecraft.world.level.World level -> f
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:net.minecraft.world.phys.Vec3D getWaterPos() -> h
net.minecraft.world.entity.monster.Drowned$DrownedMoveControl -> bqh$d -> net.minecraft.world.entity.monster.EntityDrowned$d
    F:net.minecraft.world.entity.monster.EntityDrowned drowned -> l
    M:void tick() -> a
net.minecraft.world.entity.monster.Drowned$DrownedSwimUpGoal -> bqh$e -> net.minecraft.world.entity.monster.EntityDrowned$e
    F:net.minecraft.world.entity.monster.EntityDrowned drowned -> a
    F:double speedModifier -> b
    F:int seaLevel -> c
    F:boolean stuck -> d
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void tick() -> e
    M:void start() -> c
    M:void stop() -> d
net.minecraft.world.entity.monster.Drowned$DrownedTridentAttackGoal -> bqh$f -> net.minecraft.world.entity.monster.EntityDrowned$f
    F:net.minecraft.world.entity.monster.EntityDrowned drowned -> a
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
net.minecraft.world.entity.monster.ElderGuardian -> bqi -> net.minecraft.world.entity.monster.EntityGuardianElder
    F:float ELDER_SIZE_SCALE -> b
    F:int EFFECT_INTERVAL -> e
    F:int EFFECT_DISPLAY_LIMIT -> ca
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:int getAttackDuration() -> q
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.sounds.SoundEffect getFlopSound() -> t
net.minecraft.world.entity.monster.EnderMan -> bqj -> net.minecraft.world.entity.monster.EntityEnderman
    F:java.util.UUID SPEED_MODIFIER_ATTACKING_UUID -> c
    F:net.minecraft.world.entity.ai.attributes.AttributeModifier SPEED_MODIFIER_ATTACKING -> d
    F:int DELAY_BETWEEN_CREEPY_STARE_SOUND -> e
    F:net.minecraft.network.syncher.DataWatcherObject DATA_STARED_AT -> ca
    F:int lastStareSound -> cb
    F:int targetChangeTime -> cc
    F:net.minecraft.util.valueproviders.UniformInt PERSISTENT_ANGER_TIME -> cd
    F:int remainingPersistentAngerTime -> ce
    F:java.util.UUID persistentAngerTarget -> cf
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:void setTarget(net.minecraft.world.entity.EntityLiving) -> h
    M:void startPersistentAngerTimer() -> c
    M:void setRemainingPersistentAngerTime(int) -> a
    M:int getRemainingPersistentAngerTime() -> a
    M:void setPersistentAngerTarget(java.util.UUID) -> a
    M:java.util.UUID getPersistentAngerTarget() -> b
    M:void playStareSound() -> q
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean isLookingAtMe(net.minecraft.world.entity.player.EntityHuman) -> f
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:boolean teleport() -> t
    M:boolean teleportTowards(net.minecraft.world.entity.Entity) -> a
    M:boolean teleport(double,double,double) -> q
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void dropCustomDeathLoot(net.minecraft.world.damagesource.DamageSource,int,boolean) -> a
    M:void setCarriedBlock(net.minecraft.world.level.block.state.IBlockData) -> c
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:boolean hurtWithCleanWater(net.minecraft.world.damagesource.DamageSource,net.minecraft.world.entity.projectile.EntityPotion,float) -> a
net.minecraft.world.entity.monster.EnderMan$EndermanFreezeWhenLookedAt -> bqj$a -> net.minecraft.world.entity.monster.EntityEnderman$a
    F:net.minecraft.world.entity.monster.EntityEnderman enderman -> a
    F:net.minecraft.world.entity.EntityLiving target -> b
    M:boolean canUse() -> a
    M:void start() -> c
    M:void tick() -> e
net.minecraft.world.entity.monster.EnderMan$EndermanLeaveBlockGoal -> bqj$b -> net.minecraft.world.entity.monster.EntityEnderman$PathfinderGoalEndermanPlaceBlock
    F:net.minecraft.world.entity.monster.EntityEnderman enderman -> a
    M:boolean canUse() -> a
    M:void tick() -> e
    M:boolean canPlaceBlock(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.monster.EnderMan$EndermanLookForPlayerGoal -> bqj$c -> net.minecraft.world.entity.monster.EntityEnderman$PathfinderGoalPlayerWhoLookedAtTarget
    F:net.minecraft.world.entity.monster.EntityEnderman enderman -> i
    F:net.minecraft.world.entity.player.EntityHuman pendingTarget -> j
    F:int aggroTime -> k
    F:int teleportTime -> l
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition startAggroTargetConditions -> m
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition continueAggroTargetConditions -> n
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
    M:boolean canContinueToUse() -> b
    M:void tick() -> e
net.minecraft.world.entity.monster.EnderMan$EndermanTakeBlockGoal -> bqj$d -> net.minecraft.world.entity.monster.EntityEnderman$PathfinderGoalEndermanPickupBlock
    F:net.minecraft.world.entity.monster.EntityEnderman enderman -> a
    M:boolean canUse() -> a
    M:void tick() -> e
net.minecraft.world.entity.monster.Endermite -> bqk -> net.minecraft.world.entity.monster.EntityEndermite
    F:int MAX_LIFE -> b
    F:int life -> c
    M:void registerGoals() -> u
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void tick() -> k
    M:void setYBodyRot(float) -> m
    M:double getMyRidingOffset() -> bt
    M:boolean checkEndermiteSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:net.minecraft.world.entity.EnumMonsterType getMobType() -> ez
net.minecraft.world.entity.monster.Enemy -> bql -> net.minecraft.world.entity.monster.IMonster
net.minecraft.world.entity.monster.Evoker -> bqm -> net.minecraft.world.entity.monster.EntityEvoker
    F:net.minecraft.world.entity.animal.EntitySheep wololoTarget -> e
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> q
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:boolean isAlliedTo(net.minecraft.world.entity.Entity) -> p
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void setWololoTarget(net.minecraft.world.entity.animal.EntitySheep) -> a
    M:net.minecraft.world.entity.animal.EntitySheep getWololoTarget() -> gd
    M:void applyRaidBuffs(int,boolean) -> a
net.minecraft.world.entity.monster.Evoker$EvokerAttackSpellGoal -> bqm$a -> net.minecraft.world.entity.monster.EntityEvoker$a
    M:int getCastingTime() -> h
    M:int getCastingInterval() -> i
    M:void performSpellCasting() -> k
    M:void createSpellEntity(double,double,double,double,float,int) -> a
    M:net.minecraft.sounds.SoundEffect getSpellPrepareSound() -> l
    M:net.minecraft.world.entity.monster.EntityIllagerWizard$Spell getSpell() -> m
net.minecraft.world.entity.monster.Evoker$EvokerCastingSpellGoal -> bqm$b -> net.minecraft.world.entity.monster.EntityEvoker$b
    M:void tick() -> e
net.minecraft.world.entity.monster.Evoker$EvokerSummonSpellGoal -> bqm$c -> net.minecraft.world.entity.monster.EntityEvoker$c
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition vexCountTargeting -> e
    M:boolean canUse() -> a
    M:int getCastingTime() -> h
    M:int getCastingInterval() -> i
    M:void performSpellCasting() -> k
    M:net.minecraft.sounds.SoundEffect getSpellPrepareSound() -> l
    M:net.minecraft.world.entity.monster.EntityIllagerWizard$Spell getSpell() -> m
net.minecraft.world.entity.monster.Evoker$EvokerWololoSpellGoal -> bqm$d -> net.minecraft.world.entity.monster.EntityEvoker$d
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition wololoTargeting -> e
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void stop() -> d
    M:void performSpellCasting() -> k
    M:int getCastWarmupTime() -> n
    M:int getCastingTime() -> h
    M:int getCastingInterval() -> i
    M:net.minecraft.sounds.SoundEffect getSpellPrepareSound() -> l
    M:net.minecraft.world.entity.monster.EntityIllagerWizard$Spell getSpell() -> m
    M:void tick() -> e
    M:void start() -> c
net.minecraft.world.entity.monster.Ghast -> bqn -> net.minecraft.world.entity.monster.EntityGhast
    F:net.minecraft.network.syncher.DataWatcherObject DATA_IS_CHARGING -> b
    F:int explosionPower -> c
    M:void registerGoals() -> u
    M:boolean isCharging() -> n
    M:void setCharging(boolean) -> v
    M:int getExplosionPower() -> q
    M:boolean isReflectedFireball(net.minecraft.world.damagesource.DamageSource) -> g
    M:boolean isInvulnerableTo(net.minecraft.world.damagesource.DamageSource) -> b
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> t
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:boolean checkGhastSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:int getMaxSpawnClusterSize() -> fp
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
net.minecraft.world.entity.monster.Ghast$GhastLookGoal -> bqn$a -> net.minecraft.world.entity.monster.EntityGhast$PathfinderGoalGhastMoveTowardsTarget
    F:net.minecraft.world.entity.monster.EntityGhast ghast -> a
    M:boolean canUse() -> a
    M:void tick() -> e
net.minecraft.world.entity.monster.Ghast$GhastMoveControl -> bqn$b -> net.minecraft.world.entity.monster.EntityGhast$ControllerGhast
    F:net.minecraft.world.entity.monster.EntityGhast ghast -> l
    F:int floatDuration -> m
    M:void tick() -> a
    M:boolean canReach(net.minecraft.world.phys.Vec3D,int) -> a
net.minecraft.world.entity.monster.Ghast$GhastShootFireballGoal -> bqn$c -> net.minecraft.world.entity.monster.EntityGhast$PathfinderGoalGhastAttackTarget
    F:net.minecraft.world.entity.monster.EntityGhast ghast -> b
    F:int chargeTime -> a
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.monster.Ghast$RandomFloatAroundGoal -> bqn$d -> net.minecraft.world.entity.monster.EntityGhast$PathfinderGoalGhastIdleMove
    F:net.minecraft.world.entity.monster.EntityGhast ghast -> a
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
net.minecraft.world.entity.monster.Giant -> bqo -> net.minecraft.world.entity.monster.EntityGiantZombie
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:float getWalkTargetValue(net.minecraft.core.BlockPosition,net.minecraft.world.level.IWorldReader) -> a
net.minecraft.world.entity.monster.Guardian -> bqp -> net.minecraft.world.entity.monster.EntityGuardian
    F:int ATTACK_TIME -> c
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_MOVING -> b
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_ATTACK_TARGET -> e
    F:float clientSideSpikesAnimation -> ca
    F:float clientSideSpikesAnimationO -> cb
    F:net.minecraft.world.entity.EntityLiving clientSideCachedAttackTarget -> cc
    F:int clientSideAttackTime -> cd
    F:boolean clientSideTouchedGround -> ce
    F:net.minecraft.world.entity.ai.goal.PathfinderGoalRandomStroll randomStrollGoal -> d
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.navigation.NavigationAbstract createNavigation(net.minecraft.world.level.World) -> a
    M:net.minecraft.world.entity.EnumMonsterType getMobType() -> ez
    M:void setMoving(boolean) -> v
    M:int getAttackDuration() -> q
    M:void setActiveAttackTarget(int) -> a
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:float getWalkTargetValue(net.minecraft.core.BlockPosition,net.minecraft.world.level.IWorldReader) -> a
    M:net.minecraft.sounds.SoundEffect getFlopSound() -> t
    M:float getTailAnimation(float) -> y
    M:float getSpikesAnimation(float) -> z
    M:boolean checkSpawnObstruction(net.minecraft.world.level.IWorldReader) -> a
    M:boolean checkGuardianSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void travel(net.minecraft.world.phys.Vec3D) -> g
net.minecraft.world.entity.monster.Guardian$GuardianAttackGoal -> bqp$a -> net.minecraft.world.entity.monster.EntityGuardian$PathfinderGoalGuardianAttack
    F:net.minecraft.world.entity.monster.EntityGuardian guardian -> a
    F:int attackTime -> b
    F:boolean elder -> c
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.monster.Guardian$GuardianAttackSelector -> bqp$b -> net.minecraft.world.entity.monster.EntityGuardian$EntitySelectorGuardianTargetHumanSquid
    F:net.minecraft.world.entity.monster.EntityGuardian guardian -> a
    M:boolean test(net.minecraft.world.entity.EntityLiving) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.entity.monster.Guardian$GuardianMoveControl -> bqp$c -> net.minecraft.world.entity.monster.EntityGuardian$ControllerMoveGuardian
    F:net.minecraft.world.entity.monster.EntityGuardian guardian -> l
    M:void tick() -> a
net.minecraft.world.entity.monster.Husk -> bqq -> net.minecraft.world.entity.monster.EntityZombieHusk
    M:boolean checkHuskSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.WorldAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.sounds.SoundEffect getStepSound() -> t
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
net.minecraft.world.entity.monster.Illusioner -> bqr -> net.minecraft.world.entity.monster.EntityIllagerIllusioner
    F:int NUM_ILLUSIONS -> e
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> q
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean isAlliedTo(net.minecraft.world.entity.Entity) -> p
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void applyRaidBuffs(int,boolean) -> a
    M:void performRangedAttack(net.minecraft.world.entity.EntityLiving,float) -> a
    M:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose getArmPose() -> n
net.minecraft.world.entity.monster.Illusioner$IllusionerBlindnessSpellGoal -> bqr$a -> net.minecraft.world.entity.monster.EntityIllagerIllusioner$a
    F:int lastTargetId -> e
    M:boolean canUse() -> a
    M:void start() -> c
    M:int getCastingTime() -> h
    M:int getCastingInterval() -> i
    M:void performSpellCasting() -> k
    M:net.minecraft.sounds.SoundEffect getSpellPrepareSound() -> l
    M:net.minecraft.world.entity.monster.EntityIllagerWizard$Spell getSpell() -> m
net.minecraft.world.entity.monster.Illusioner$IllusionerMirrorSpellGoal -> bqr$b -> net.minecraft.world.entity.monster.EntityIllagerIllusioner$b
    M:boolean canUse() -> a
    M:int getCastingTime() -> h
    M:int getCastingInterval() -> i
    M:void performSpellCasting() -> k
    M:net.minecraft.sounds.SoundEffect getSpellPrepareSound() -> l
    M:net.minecraft.world.entity.monster.EntityIllagerWizard$Spell getSpell() -> m
net.minecraft.world.entity.monster.MagmaCube -> bqs -> net.minecraft.world.entity.monster.EntityMagmaCube
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:boolean checkMagmaCubeSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean checkSpawnObstruction(net.minecraft.world.level.IWorldReader) -> a
    M:void setSize(int,boolean) -> a
    M:float getLightLevelDependentMagicValue() -> bh
    M:net.minecraft.core.particles.ParticleParam getParticleType() -> q
    M:int getJumpDelay() -> t
    M:void jumpInLiquid(net.minecraft.tags.TagKey) -> c
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
net.minecraft.world.entity.monster.Monster -> bqt -> net.minecraft.world.entity.monster.EntityMonster
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.world.entity.LivingEntity$Fallsounds getFallSounds() -> eo
    M:float getWalkTargetValue(net.minecraft.core.BlockPosition,net.minecraft.world.level.IWorldReader) -> a
    M:boolean isDarkEnoughToSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean checkMonsterSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.WorldAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean checkAnyLightMonsterSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> c
    M:boolean isPreventingPlayerRest(net.minecraft.world.entity.player.EntityHuman) -> e
    M:net.minecraft.world.item.ItemStack getProjectile(net.minecraft.world.item.ItemStack) -> h
net.minecraft.world.entity.monster.PatrollingMonster -> bqu -> net.minecraft.world.entity.monster.EntityMonsterPatrolling
    F:net.minecraft.core.BlockPosition patrolTarget -> b
    F:boolean patrolLeader -> c
    F:boolean patrolling -> d
    M:void registerGoals() -> u
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:double getMyRidingOffset() -> bt
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean checkPatrollingMonsterSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean removeWhenFarAway(double) -> h
    M:void setPatrolTarget(net.minecraft.core.BlockPosition) -> g
    M:void setPatrolLeader(boolean) -> v
    M:void setPatrolling(boolean) -> w
net.minecraft.world.entity.monster.PatrollingMonster$LongDistancePatrolGoal -> bqu$a -> net.minecraft.world.entity.monster.EntityMonsterPatrolling$a
    F:int NAVIGATION_FAILED_COOLDOWN -> a
    F:net.minecraft.world.entity.monster.EntityMonsterPatrolling mob -> b
    F:double speedModifier -> c
    F:double leaderSpeedModifier -> d
    F:long cooldownUntil -> e
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
    M:java.util.List findPatrolCompanions() -> h
    M:boolean moveRandomly() -> i
net.minecraft.world.entity.monster.Phantom -> bqv -> net.minecraft.world.entity.monster.EntityPhantom
    F:float FLAP_DEGREES_PER_TICK -> b
    F:int TICKS_PER_FLAP -> c
    F:net.minecraft.network.syncher.DataWatcherObject ID_SIZE -> d
    F:net.minecraft.world.phys.Vec3D moveTargetPoint -> e
    M:net.minecraft.world.entity.ai.control.EntityAIBodyControl createBodyControl() -> y
    M:void registerGoals() -> u
    M:void setPhantomSize(int) -> a
    M:void updatePhantomSizeInfo() -> t
    M:int getPhantomSize() -> n
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:int getUniqueFlapTickOffset() -> q
    M:void tick() -> k
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:boolean shouldRenderAtSqrDistance(double) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.world.entity.EnumMonsterType getMobType() -> ez
    M:boolean canAttackType(net.minecraft.world.entity.EntityTypes) -> a
    M:net.minecraft.world.entity.EntitySize getDimensions(net.minecraft.world.entity.EntityPose) -> a
net.minecraft.world.entity.monster.Phantom$AttackPhase -> bqv$a -> net.minecraft.world.entity.monster.EntityPhantom$AttackPhase
    F:net.minecraft.world.entity.monster.EntityPhantom$AttackPhase CIRCLE -> a
    F:net.minecraft.world.entity.monster.EntityPhantom$AttackPhase SWOOP -> b
net.minecraft.world.entity.monster.Phantom$PhantomAttackPlayerTargetGoal -> bqv$b -> net.minecraft.world.entity.monster.EntityPhantom$b
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition attackTargeting -> b
    F:int nextScanTick -> c
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
net.minecraft.world.entity.monster.Phantom$PhantomAttackStrategyGoal -> bqv$c -> net.minecraft.world.entity.monster.EntityPhantom$c
    F:int nextSweepTick -> b
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
    M:void setAnchorAboveTarget() -> h
net.minecraft.world.entity.monster.Phantom$PhantomBodyRotationControl -> bqv$d -> net.minecraft.world.entity.monster.EntityPhantom$d
    M:void clientTick() -> a
net.minecraft.world.entity.monster.Phantom$PhantomCircleAroundAnchorGoal -> bqv$e -> net.minecraft.world.entity.monster.EntityPhantom$e
    F:float angle -> c
    F:float distance -> d
    F:float height -> e
    F:float clockwise -> f
    M:boolean canUse() -> a
    M:void start() -> c
    M:void tick() -> e
    M:void selectNext() -> i
net.minecraft.world.entity.monster.Phantom$PhantomLookControl -> bqv$f -> net.minecraft.world.entity.monster.EntityPhantom$f
    M:void tick() -> a
net.minecraft.world.entity.monster.Phantom$PhantomMoveControl -> bqv$g -> net.minecraft.world.entity.monster.EntityPhantom$g
    F:float speed -> m
    M:void tick() -> a
net.minecraft.world.entity.monster.Phantom$PhantomMoveTargetGoal -> bqv$h -> net.minecraft.world.entity.monster.EntityPhantom$h
    M:boolean touchingTarget() -> h
net.minecraft.world.entity.monster.Phantom$PhantomSweepAttackGoal -> bqv$i -> net.minecraft.world.entity.monster.EntityPhantom$i
    F:int CAT_SEARCH_TICK_DELAY -> c
    F:boolean isScaredOfCat -> d
    F:int catSearchTick -> e
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.monster.Pillager -> bqw -> net.minecraft.world.entity.monster.EntityPillager
    F:net.minecraft.network.syncher.DataWatcherObject IS_CHARGING_CROSSBOW -> b
    F:int INVENTORY_SIZE -> e
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> q
    M:boolean canFireProjectileWeapon(net.minecraft.world.item.ItemProjectileWeapon) -> a
    M:void setChargingCrossbow(boolean) -> b
    M:void onCrossbowAttackPerformed() -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose getArmPose() -> n
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:float getWalkTargetValue(net.minecraft.core.BlockPosition,net.minecraft.world.level.IWorldReader) -> a
    M:int getMaxSpawnClusterSize() -> fp
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:void populateDefaultEquipmentSlots(net.minecraft.util.RandomSource,net.minecraft.world.DifficultyDamageScaler) -> a
    M:void enchantSpawnedWeapon(net.minecraft.util.RandomSource,float) -> a
    M:boolean isAlliedTo(net.minecraft.world.entity.Entity) -> p
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void performRangedAttack(net.minecraft.world.entity.EntityLiving,float) -> a
    M:void shootCrossbowProjectile(net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.projectile.IProjectile,float) -> a
    M:net.minecraft.world.InventorySubcontainer getInventory() -> t
    M:void pickUpItem(net.minecraft.world.entity.item.EntityItem) -> b
    M:boolean wantsItem(net.minecraft.world.item.ItemStack) -> m
    M:net.minecraft.world.entity.SlotAccess getSlot(int) -> k
    M:void applyRaidBuffs(int,boolean) -> a
net.minecraft.world.entity.monster.RangedAttackMob -> bqx -> net.minecraft.world.entity.monster.IRangedEntity
net.minecraft.world.entity.monster.Ravager -> bqy -> net.minecraft.world.entity.monster.EntityRavager
    F:java.util.function.Predicate NO_RAVAGER_AND_ALIVE -> e
    F:double STUNNED_COLOR_BLUE -> ca
    F:double STUNNED_COLOR_GREEN -> cb
    F:double STUNNED_COLOR_RED -> cc
    F:int ATTACK_DURATION -> cd
    F:int STUN_DURATION -> b
    F:int attackTick -> ce
    F:int stunnedTick -> cf
    F:int roarTick -> cg
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.entity.ai.navigation.NavigationAbstract createNavigation(net.minecraft.world.level.World) -> a
    M:double getPassengersRidingOffset() -> bu
    M:boolean canBeControlledBy(net.minecraft.world.entity.Entity) -> a
    M:void blockedByShield(net.minecraft.world.entity.EntityLiving) -> e
    M:void strongKnockback(net.minecraft.world.entity.Entity) -> b
    M:void handleEntityEvent(byte) -> a
    M:int getAttackTick() -> q
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:boolean checkSpawnObstruction(net.minecraft.world.level.IWorldReader) -> a
    M:void applyRaidBuffs(int,boolean) -> a
net.minecraft.world.entity.monster.Ravager$RavagerMeleeAttackGoal -> bqy$a -> net.minecraft.world.entity.monster.EntityRavager$a
    M:double getAttackReachSqr(net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.monster.Ravager$RavagerNavigation -> bqy$b -> net.minecraft.world.entity.monster.EntityRavager$b
    M:net.minecraft.world.level.pathfinder.Pathfinder createPathFinder(int) -> a
net.minecraft.world.entity.monster.Ravager$RavagerNodeEvaluator -> bqy$c -> net.minecraft.world.entity.monster.EntityRavager$c
    M:net.minecraft.world.level.pathfinder.PathType evaluateBlockPathType(net.minecraft.world.level.IBlockAccess,boolean,boolean,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathType) -> a
net.minecraft.world.entity.monster.Shulker -> bqz -> net.minecraft.world.entity.monster.EntityShulker
    F:java.util.UUID COVERED_ARMOR_MODIFIER_UUID -> e
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ATTACH_FACE_ID -> b
    F:net.minecraft.network.syncher.DataWatcherObject DATA_PEEK_ID -> c
    F:net.minecraft.network.syncher.DataWatcherObject DATA_COLOR_ID -> d
    F:byte DEFAULT_COLOR -> ca
    F:int MAX_TELEPORT_DISTANCE -> cb
    F:int OTHER_SHULKER_SCAN_RADIUS -> cc
    F:int OTHER_SHULKER_LIMIT -> cd
    F:float PEEK_PER_TICK -> ce
    F:com.mojang.math.Vector3fa FORWARD -> cf
    F:float currentPeekAmountO -> cg
    F:float currentPeekAmount -> ch
    F:net.minecraft.core.BlockPosition clientOldAttachPosition -> ci
    F:int clientSideTeleportInterpolation -> cj
    F:float MAX_LID_OPEN -> ck
    M:void registerGoals() -> u
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:net.minecraft.world.entity.ai.control.EntityAIBodyControl createBodyControl() -> y
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void tick() -> k
    M:net.minecraft.world.phys.AxisAlignedBB makeBoundingBox() -> al
    M:net.minecraft.world.phys.AxisAlignedBB getProgressAabb(net.minecraft.core.EnumDirection,float) -> a
    M:net.minecraft.world.phys.AxisAlignedBB getProgressDeltaAabb(net.minecraft.core.EnumDirection,float,float) -> a
    M:double getMyRidingOffset() -> bt
    M:boolean startRiding(net.minecraft.world.entity.Entity,boolean) -> a
    M:void stopRiding() -> p
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:void move(net.minecraft.world.entity.EnumMoveType,net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.world.phys.Vec3D getDeltaMovement() -> de
    M:void setDeltaMovement(net.minecraft.world.phys.Vec3D) -> f
    M:void setPos(double,double,double) -> e
    M:net.minecraft.core.EnumDirection findAttachableSurface(net.minecraft.core.BlockPosition) -> g
    M:boolean canStayAt(net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:boolean isPositionBlocked(net.minecraft.core.BlockPosition) -> h
    M:boolean teleportSomewhere() -> q
    M:void lerpTo(double,double,double,float,float,int,boolean) -> a
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:boolean canBeCollidedWith() -> br
    M:net.minecraft.core.EnumDirection getAttachFace() -> t
    M:void setAttachFace(net.minecraft.core.EnumDirection) -> a
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:void setRawPeekAmount(int) -> a
    M:float getClientPeekAmount(float) -> y
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:void recreateFromPacket(net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity) -> a
    M:void push(net.minecraft.world.entity.Entity) -> g
    M:float getPickRadius() -> by
    M:java.util.Optional getRenderPosition(float) -> z
    M:void setColor(net.minecraft.world.item.EnumColor) -> a
net.minecraft.world.entity.monster.Shulker$ShulkerAttackGoal -> bqz$a -> net.minecraft.world.entity.monster.EntityShulker$a
    F:int attackTime -> b
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.monster.Shulker$ShulkerBodyRotationControl -> bqz$b -> net.minecraft.world.entity.monster.EntityShulker$b
    M:void clientTick() -> a
net.minecraft.world.entity.monster.Shulker$ShulkerDefenseAttackGoal -> bqz$c -> net.minecraft.world.entity.monster.EntityShulker$c
    M:boolean canUse() -> a
    M:net.minecraft.world.phys.AxisAlignedBB getTargetSearchArea(double) -> a
net.minecraft.world.entity.monster.Shulker$ShulkerLookControl -> bqz$d -> net.minecraft.world.entity.monster.EntityShulker$d
    M:void clampHeadRotationToBody() -> b
    M:java.util.Optional getYRotD() -> i
    M:java.util.Optional getXRotD() -> h
net.minecraft.world.entity.monster.Shulker$ShulkerNearestAttackGoal -> bqz$e -> net.minecraft.world.entity.monster.EntityShulker$e
    M:boolean canUse() -> a
    M:net.minecraft.world.phys.AxisAlignedBB getTargetSearchArea(double) -> a
net.minecraft.world.entity.monster.Shulker$ShulkerPeekGoal -> bqz$f -> net.minecraft.world.entity.monster.EntityShulker$f
    F:int peekTime -> b
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.monster.Silverfish -> bra -> net.minecraft.world.entity.monster.EntitySilverfish
    F:net.minecraft.world.entity.monster.EntitySilverfish$PathfinderGoalSilverfishWakeOthers friendsGoal -> b
    M:void registerGoals() -> u
    M:double getMyRidingOffset() -> bt
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void tick() -> k
    M:void setYBodyRot(float) -> m
    M:float getWalkTargetValue(net.minecraft.core.BlockPosition,net.minecraft.world.level.IWorldReader) -> a
    M:boolean checkSilverfishSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:net.minecraft.world.entity.EnumMonsterType getMobType() -> ez
net.minecraft.world.entity.monster.Silverfish$SilverfishMergeWithStoneGoal -> bra$a -> net.minecraft.world.entity.monster.EntitySilverfish$PathfinderGoalSilverfishHideInBlock
    F:net.minecraft.core.EnumDirection selectedDirection -> i
    F:boolean doMerge -> j
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
net.minecraft.world.entity.monster.Silverfish$SilverfishWakeUpFriendsGoal -> bra$b -> net.minecraft.world.entity.monster.EntitySilverfish$PathfinderGoalSilverfishWakeOthers
    F:net.minecraft.world.entity.monster.EntitySilverfish silverfish -> a
    F:int lookForFriends -> b
    M:void notifyHurt() -> h
    M:boolean canUse() -> a
    M:void tick() -> e
net.minecraft.world.entity.monster.Skeleton -> brb -> net.minecraft.world.entity.monster.EntitySkeleton
    F:net.minecraft.network.syncher.DataWatcherObject DATA_STRAY_CONVERSION_ID -> c
    F:java.lang.String CONVERSION_TAG -> b
    F:int inPowderSnowTime -> d
    F:int conversionTime -> e
    M:void setFreezeConverting(boolean) -> v
    M:void tick() -> k
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void startFreezeConversion(int) -> a
    M:boolean canFreeze() -> dp
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.sounds.SoundEffect getStepSound() -> q
    M:void dropCustomDeathLoot(net.minecraft.world.damagesource.DamageSource,int,boolean) -> a
net.minecraft.world.entity.monster.Slime -> brc -> net.minecraft.world.entity.monster.EntitySlime
    F:int MIN_SIZE -> b
    F:int MAX_SIZE -> c
    F:float targetSquish -> d
    F:float squish -> e
    M:void registerGoals() -> u
    M:void setSize(int,boolean) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.core.particles.ParticleParam getParticleType() -> q
    M:void tick() -> k
    M:int getJumpDelay() -> t
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:net.minecraft.world.entity.EntityTypes getType() -> ad
    M:void remove(net.minecraft.world.entity.Entity$RemovalReason) -> a
    M:void push(net.minecraft.world.entity.Entity) -> g
    M:void dealDamage(net.minecraft.world.entity.EntityLiving) -> k
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:boolean checkSlimeSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> c
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:float getSoundPitch() -> n
    M:net.minecraft.world.entity.EntitySize getDimensions(net.minecraft.world.entity.EntityPose) -> a
net.minecraft.world.entity.monster.Slime$SlimeAttackGoal -> brc$a -> net.minecraft.world.entity.monster.EntitySlime$PathfinderGoalSlimeNearestPlayer
    F:net.minecraft.world.entity.monster.EntitySlime slime -> a
    F:int growTiredTimer -> b
    M:boolean canUse() -> a
    M:void start() -> c
    M:boolean canContinueToUse() -> b
    M:void tick() -> e
net.minecraft.world.entity.monster.Slime$SlimeFloatGoal -> brc$b -> net.minecraft.world.entity.monster.EntitySlime$PathfinderGoalSlimeRandomJump
    F:net.minecraft.world.entity.monster.EntitySlime slime -> a
    M:boolean canUse() -> a
    M:void tick() -> e
net.minecraft.world.entity.monster.Slime$SlimeKeepOnJumpingGoal -> brc$c -> net.minecraft.world.entity.monster.EntitySlime$PathfinderGoalSlimeIdle
    F:net.minecraft.world.entity.monster.EntitySlime slime -> a
    M:boolean canUse() -> a
    M:void tick() -> e
net.minecraft.world.entity.monster.Slime$SlimeMoveControl -> brc$d -> net.minecraft.world.entity.monster.EntitySlime$ControllerMoveSlime
    F:float yRot -> l
    F:int jumpDelay -> m
    F:net.minecraft.world.entity.monster.EntitySlime slime -> n
    F:boolean isAggressive -> o
    M:void setDirection(float,boolean) -> a
    M:void setWantedMovement(double) -> a
    M:void tick() -> a
net.minecraft.world.entity.monster.Slime$SlimeRandomDirectionGoal -> brc$e -> net.minecraft.world.entity.monster.EntitySlime$PathfinderGoalSlimeRandomDirection
    F:net.minecraft.world.entity.monster.EntitySlime slime -> a
    F:float chosenDegrees -> b
    F:int nextRandomizeTime -> c
    M:boolean canUse() -> a
    M:void tick() -> e
net.minecraft.world.entity.monster.SpellcasterIllager -> brd -> net.minecraft.world.entity.monster.EntityIllagerWizard
    F:net.minecraft.network.syncher.DataWatcherObject DATA_SPELL_CASTING_ID -> e
    F:int spellCastingTickCount -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose getArmPose() -> n
    M:void setIsCastingSpell(net.minecraft.world.entity.monster.EntityIllagerWizard$Spell) -> a
    M:void tick() -> k
net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell -> brd$a -> net.minecraft.world.entity.monster.EntityIllagerWizard$Spell
    F:net.minecraft.world.entity.monster.EntityIllagerWizard$Spell NONE -> a
    F:net.minecraft.world.entity.monster.EntityIllagerWizard$Spell SUMMON_VEX -> b
    F:net.minecraft.world.entity.monster.EntityIllagerWizard$Spell FANGS -> c
    F:net.minecraft.world.entity.monster.EntityIllagerWizard$Spell WOLOLO -> d
    F:net.minecraft.world.entity.monster.EntityIllagerWizard$Spell DISAPPEAR -> e
    F:net.minecraft.world.entity.monster.EntityIllagerWizard$Spell BLINDNESS -> f
    F:int id -> g
    M:net.minecraft.world.entity.monster.EntityIllagerWizard$Spell byId(int) -> a
net.minecraft.world.entity.monster.SpellcasterIllager$SpellcasterCastingSpellGoal -> brd$b -> net.minecraft.world.entity.monster.EntityIllagerWizard$b
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.monster.SpellcasterIllager$SpellcasterUseSpellGoal -> brd$c -> net.minecraft.world.entity.monster.EntityIllagerWizard$PathfinderGoalCastSpell
    F:int attackWarmupDelay -> b
    F:int nextAttackTickCount -> c
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void tick() -> e
    M:int getCastWarmupTime() -> n
net.minecraft.world.entity.monster.Spider -> bre -> net.minecraft.world.entity.monster.EntitySpider
    F:net.minecraft.network.syncher.DataWatcherObject DATA_FLAGS_ID -> b
    F:float SPIDER_SPECIAL_EFFECT_CHANCE -> c
    M:void registerGoals() -> u
    M:double getPassengersRidingOffset() -> bu
    M:net.minecraft.world.entity.ai.navigation.NavigationAbstract createNavigation(net.minecraft.world.level.World) -> a
    M:void tick() -> k
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> q
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void makeStuckInBlock(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.world.entity.EnumMonsterType getMobType() -> ez
    M:boolean canBeAffected(net.minecraft.world.effect.MobEffect) -> c
    M:boolean isClimbing() -> t
    M:void setClimbing(boolean) -> v
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
net.minecraft.world.entity.monster.Spider$SpiderAttackGoal -> bre$a -> net.minecraft.world.entity.monster.EntitySpider$PathfinderGoalSpiderMeleeAttack
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:double getAttackReachSqr(net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.monster.Spider$SpiderEffectsGroupData -> bre$b -> net.minecraft.world.entity.monster.EntitySpider$GroupDataSpider
    F:net.minecraft.world.effect.MobEffectList effect -> a
    M:void setRandomEffect(net.minecraft.util.RandomSource) -> a
net.minecraft.world.entity.monster.Spider$SpiderTargetGoal -> bre$c -> net.minecraft.world.entity.monster.EntitySpider$PathfinderGoalSpiderNearestAttackableTarget
    M:boolean canUse() -> a
net.minecraft.world.entity.monster.Stray -> brf -> net.minecraft.world.entity.monster.EntitySkeletonStray
    M:boolean checkStraySpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.WorldAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.sounds.SoundEffect getStepSound() -> q
    M:net.minecraft.world.entity.projectile.EntityArrow getArrow(net.minecraft.world.item.ItemStack,float) -> b
net.minecraft.world.entity.monster.Strider -> brg -> net.minecraft.world.entity.monster.EntityStrider
    F:float STEERING_MODIFIER -> ca
    F:net.minecraft.world.item.crafting.RecipeItemStack FOOD_ITEMS -> cb
    F:net.minecraft.world.item.crafting.RecipeItemStack TEMPT_ITEMS -> cc
    F:net.minecraft.network.syncher.DataWatcherObject DATA_BOOST_TIME -> cd
    F:net.minecraft.network.syncher.DataWatcherObject DATA_SUFFOCATING -> ce
    F:net.minecraft.network.syncher.DataWatcherObject DATA_SADDLE_ID -> cf
    F:net.minecraft.world.entity.SaddleStorage steering -> cg
    F:net.minecraft.world.entity.ai.goal.PathfinderGoalTempt temptGoal -> ch
    F:net.minecraft.world.entity.ai.goal.PathfinderGoalPanic panicGoal -> ci
    M:boolean checkStriderSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> c
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean isSaddled() -> d
    M:boolean isSaddleable() -> c
    M:void equipSaddle(net.minecraft.sounds.SoundCategory) -> a
    M:void registerGoals() -> u
    M:void setSuffocating(boolean) -> v
    M:boolean isSuffocating() -> q
    M:boolean canStandOnFluid(net.minecraft.world.level.material.Fluid) -> a
    M:double getPassengersRidingOffset() -> bu
    M:boolean checkSpawnObstruction(net.minecraft.world.level.IWorldReader) -> a
    M:boolean canBeControlledBy(net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.phys.Vec3D getDismountLocationForPassenger(net.minecraft.world.entity.EntityLiving) -> b
    M:void travel(net.minecraft.world.phys.Vec3D) -> g
    M:float getMoveSpeed() -> t
    M:float getSteeringSpeed() -> b
    M:void travelWithInput(net.minecraft.world.phys.Vec3D) -> a
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:boolean boost() -> a
    M:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
    M:void tick() -> k
    M:boolean shouldPassengersInheritMalus() -> x
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:boolean canAddPassenger(net.minecraft.world.entity.Entity) -> o
    M:net.minecraft.world.entity.ai.navigation.NavigationAbstract createNavigation(net.minecraft.world.level.World) -> a
    M:float getWalkTargetValue(net.minecraft.core.BlockPosition,net.minecraft.world.level.IWorldReader) -> a
    M:net.minecraft.world.entity.monster.EntityStrider getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> b
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:void dropEquipment() -> ej
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.entity.GroupDataEntity spawnJockey(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EntityInsentient,net.minecraft.world.entity.GroupDataEntity) -> a
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
net.minecraft.world.entity.monster.Strider$StriderGoToLavaGoal -> brg$a -> net.minecraft.world.entity.monster.EntityStrider$a
    F:net.minecraft.world.entity.monster.EntityStrider strider -> g
    M:net.minecraft.core.BlockPosition getMoveToTarget() -> k
    M:boolean canContinueToUse() -> b
    M:boolean canUse() -> a
    M:boolean shouldRecalculatePath() -> l
    M:boolean isValidTarget(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.monster.Strider$StriderPathNavigation -> brg$b -> net.minecraft.world.entity.monster.EntityStrider$b
    M:net.minecraft.world.level.pathfinder.Pathfinder createPathFinder(int) -> a
    M:boolean hasValidPathType(net.minecraft.world.level.pathfinder.PathType) -> a
    M:boolean isStableDestination(net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.monster.Vex -> brh -> net.minecraft.world.entity.monster.EntityVex
    F:float FLAP_DEGREES_PER_TICK -> b
    F:int TICKS_PER_FLAP -> c
    F:net.minecraft.network.syncher.DataWatcherObject DATA_FLAGS_ID -> d
    F:int FLAG_IS_CHARGING -> e
    F:int limitedLifeTicks -> ca
    M:void move(net.minecraft.world.entity.EnumMoveType,net.minecraft.world.phys.Vec3D) -> a
    M:void tick() -> k
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.world.entity.EntityInsentient getOwner() -> q
    M:net.minecraft.core.BlockPosition getBoundOrigin() -> t
    M:void setBoundOrigin(net.minecraft.core.BlockPosition) -> g
    M:boolean getVexFlag(int) -> b
    M:void setVexFlag(int,boolean) -> a
    M:void setIsCharging(boolean) -> v
    M:void setOwner(net.minecraft.world.entity.EntityInsentient) -> a
    M:void setLimitedLife(int) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:float getLightLevelDependentMagicValue() -> bh
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:void populateDefaultEquipmentSlots(net.minecraft.util.RandomSource,net.minecraft.world.DifficultyDamageScaler) -> a
net.minecraft.world.entity.monster.Vex$VexChargeAttackGoal -> brh$a -> net.minecraft.world.entity.monster.EntityVex$a
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.monster.Vex$VexCopyOwnerTargetGoal -> brh$b -> net.minecraft.world.entity.monster.EntityVex$b
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition copyOwnerTargeting -> b
    M:boolean canUse() -> a
    M:void start() -> c
net.minecraft.world.entity.monster.Vex$VexMoveControl -> brh$c -> net.minecraft.world.entity.monster.EntityVex$c
    M:void tick() -> a
net.minecraft.world.entity.monster.Vex$VexRandomMoveGoal -> brh$d -> net.minecraft.world.entity.monster.EntityVex$d
    M:boolean canUse() -> a
    M:boolean canContinueToUse() -> b
    M:void tick() -> e
net.minecraft.world.entity.monster.Vindicator -> bri -> net.minecraft.world.entity.monster.EntityVindicator
    F:java.lang.String TAG_JOHNNY -> b
    F:java.util.function.Predicate DOOR_BREAKING_PREDICATE -> e
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> q
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose getArmPose() -> n
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:void populateDefaultEquipmentSlots(net.minecraft.util.RandomSource,net.minecraft.world.DifficultyDamageScaler) -> a
    M:boolean isAlliedTo(net.minecraft.world.entity.Entity) -> p
    M:void setCustomName(net.minecraft.network.chat.IChatBaseComponent) -> b
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void applyRaidBuffs(int,boolean) -> a
net.minecraft.world.entity.monster.Vindicator$VindicatorBreakDoorGoal -> bri$a -> net.minecraft.world.entity.monster.EntityVindicator$a
    M:boolean canContinueToUse() -> b
    M:boolean canUse() -> a
    M:void start() -> c
net.minecraft.world.entity.monster.Vindicator$VindicatorJohnnyAttackGoal -> bri$b -> net.minecraft.world.entity.monster.EntityVindicator$b
    M:boolean canUse() -> a
    M:void start() -> c
net.minecraft.world.entity.monster.Vindicator$VindicatorMeleeAttackGoal -> bri$c -> net.minecraft.world.entity.monster.EntityVindicator$c
    M:double getAttackReachSqr(net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.entity.monster.Witch -> brj -> net.minecraft.world.entity.monster.EntityWitch
    F:java.util.UUID SPEED_MODIFIER_DRINKING_UUID -> b
    F:net.minecraft.world.entity.ai.attributes.AttributeModifier SPEED_MODIFIER_DRINKING -> e
    F:net.minecraft.world.entity.ai.goal.target.PathfinderGoalNearestAttackableTargetWitch attackPlayersGoal -> ca
    M:void registerGoals() -> u
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void setUsingItem(boolean) -> x
    M:boolean isDrinkingPotion() -> n
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> q
    M:void handleEntityEvent(byte) -> a
    M:float getDamageAfterMagicAbsorb(net.minecraft.world.damagesource.DamageSource,float) -> e
    M:void performRangedAttack(net.minecraft.world.entity.EntityLiving,float) -> a
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:void applyRaidBuffs(int,boolean) -> a
net.minecraft.world.entity.monster.WitherSkeleton -> brk -> net.minecraft.world.entity.monster.EntitySkeletonWither
    M:void registerGoals() -> u
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.sounds.SoundEffect getStepSound() -> q
    M:void dropCustomDeathLoot(net.minecraft.world.damagesource.DamageSource,int,boolean) -> a
    M:void populateDefaultEquipmentSlots(net.minecraft.util.RandomSource,net.minecraft.world.DifficultyDamageScaler) -> a
    M:void populateDefaultEquipmentEnchantments(net.minecraft.util.RandomSource,net.minecraft.world.DifficultyDamageScaler) -> b
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:net.minecraft.world.entity.projectile.EntityArrow getArrow(net.minecraft.world.item.ItemStack,float) -> b
    M:boolean canBeAffected(net.minecraft.world.effect.MobEffect) -> c
net.minecraft.world.entity.monster.Zoglin -> brl -> net.minecraft.world.entity.monster.EntityZoglin
    F:net.minecraft.network.syncher.DataWatcherObject DATA_BABY_ID -> d
    F:int MAX_HEALTH -> e
    F:float BABY_ATTACK_DAMAGE -> ca
    F:int ATTACK_INTERVAL -> cb
    F:int BABY_ATTACK_INTERVAL -> cc
    F:int ATTACK_DURATION -> cd
    F:float MOVEMENT_SPEED_WHEN_FIGHTING -> ce
    F:float SPEED_MULTIPLIER_WHEN_IDLING -> cf
    F:int attackAnimationRemainingTicks -> cg
    F:com.google.common.collect.ImmutableList SENSOR_TYPES -> b
    F:com.google.common.collect.ImmutableList MEMORY_TYPES -> c
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(com.mojang.serialization.Dynamic) -> a
    M:void initCoreActivity(net.minecraft.world.entity.ai.BehaviorController) -> a
    M:void initIdleActivity(net.minecraft.world.entity.ai.BehaviorController) -> b
    M:void initFightActivity(net.minecraft.world.entity.ai.BehaviorController) -> c
    M:boolean isTargetable(net.minecraft.world.entity.EntityLiving) -> k
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:boolean isAdult() -> q
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:boolean canBeLeashed(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void blockedByShield(net.minecraft.world.entity.EntityLiving) -> e
    M:double getPassengersRidingOffset() -> bu
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void setAttackTarget(net.minecraft.world.entity.EntityLiving) -> l
    M:net.minecraft.world.entity.ai.BehaviorController getBrain() -> dz
    M:void updateActivity() -> t
    M:void setBaby(boolean) -> a
    M:void handleEntityEvent(byte) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:net.minecraft.world.entity.EnumMonsterType getMobType() -> ez
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.entity.monster.Zombie -> brm -> net.minecraft.world.entity.monster.EntityZombie
    F:java.util.UUID SPEED_MODIFIER_BABY_UUID -> b
    F:net.minecraft.world.entity.ai.attributes.AttributeModifier SPEED_MODIFIER_BABY -> c
    F:net.minecraft.network.syncher.DataWatcherObject DATA_BABY_ID -> d
    F:net.minecraft.network.syncher.DataWatcherObject DATA_SPECIAL_TYPE_ID -> ca
    F:net.minecraft.network.syncher.DataWatcherObject DATA_DROWNED_CONVERSION_ID -> cb
    F:float ZOMBIE_LEADER_CHANCE -> e
    F:float BREAK_DOOR_CHANCE -> cc
    F:java.util.function.Predicate DOOR_BREAKING_PREDICATE -> cd
    F:net.minecraft.world.entity.ai.goal.PathfinderGoalBreakDoor breakDoorGoal -> ce
    F:boolean canBreakDoors -> cf
    F:int inWaterTime -> cg
    F:int conversionTime -> ch
    M:void registerGoals() -> u
    M:void addBehaviourGoals() -> n
    M:void setCanBreakDoors(boolean) -> w
    M:boolean supportsBreakDoorGoal() -> q
    M:void setBaby(boolean) -> a
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:void tick() -> k
    M:void startUnderWaterConversion(int) -> a
    M:void convertToZombieType(net.minecraft.world.entity.EntityTypes) -> b
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.sounds.SoundEffect getStepSound() -> t
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:net.minecraft.world.entity.EnumMonsterType getMobType() -> ez
    M:void populateDefaultEquipmentSlots(net.minecraft.util.RandomSource,net.minecraft.world.DifficultyDamageScaler) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean wasKilled(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:boolean canHoldItem(net.minecraft.world.item.ItemStack) -> k
    M:boolean wantsToPickUp(net.minecraft.world.item.ItemStack) -> l
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean getSpawnAsBabyOdds(net.minecraft.util.RandomSource) -> a
    M:void handleAttributes(float) -> y
    M:double getMyRidingOffset() -> bt
    M:void dropCustomDeathLoot(net.minecraft.world.damagesource.DamageSource,int,boolean) -> a
net.minecraft.world.entity.monster.Zombie$ZombieAttackTurtleEggGoal -> brm$a -> net.minecraft.world.entity.monster.EntityZombie$a
    M:void playDestroyProgressSound(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:void playBreakSound(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:double acceptedDistance() -> i
net.minecraft.world.entity.monster.Zombie$ZombieGroupData -> brm$b -> net.minecraft.world.entity.monster.EntityZombie$GroupDataZombie
    F:boolean isBaby -> a
    F:boolean canSpawnJockey -> b
net.minecraft.world.entity.monster.ZombieVillager -> brn -> net.minecraft.world.entity.monster.EntityZombieVillager
    F:org.slf4j.Logger LOGGER -> b
    F:net.minecraft.network.syncher.DataWatcherObject DATA_CONVERTING_ID -> c
    F:net.minecraft.network.syncher.DataWatcherObject DATA_VILLAGER_DATA -> d
    F:int VILLAGER_CONVERSION_WAIT_MIN -> ca
    F:int VILLAGER_CONVERSION_WAIT_MAX -> cb
    F:int MAX_SPECIAL_BLOCKS_COUNT -> cc
    F:int SPECIAL_BLOCK_RADIUS -> cd
    F:int villagerConversionTime -> ce
    F:java.util.UUID conversionStarter -> cf
    F:net.minecraft.nbt.NBTBase gossips -> cg
    F:net.minecraft.nbt.NBTTagCompound tradeOffers -> ch
    F:int villagerXp -> ci
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void tick() -> k
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:boolean removeWhenFarAway(double) -> h
    M:void startConverting(java.util.UUID,int) -> a
    M:void handleEntityEvent(byte) -> a
    M:void finishConversion(net.minecraft.server.level.WorldServer) -> c
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.sounds.SoundEffect getStepSound() -> t
    M:void setTradeOffers(net.minecraft.nbt.NBTTagCompound) -> c
    M:void setGossips(net.minecraft.nbt.NBTBase) -> a
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:void setVillagerData(net.minecraft.world.entity.npc.VillagerData) -> a
    M:void setVillagerXp(int) -> a
net.minecraft.world.entity.monster.ZombifiedPiglin -> bro -> net.minecraft.world.entity.monster.EntityPigZombie
    F:java.util.UUID SPEED_MODIFIER_ATTACKING_UUID -> c
    F:net.minecraft.world.entity.ai.attributes.AttributeModifier SPEED_MODIFIER_ATTACKING -> d
    F:net.minecraft.util.valueproviders.UniformInt FIRST_ANGER_SOUND_DELAY -> ca
    F:int playFirstAngerSoundIn -> cb
    F:net.minecraft.util.valueproviders.UniformInt PERSISTENT_ANGER_TIME -> cc
    F:int remainingPersistentAngerTime -> cd
    F:java.util.UUID persistentAngerTarget -> ce
    F:int ALERT_RANGE_Y -> cf
    F:net.minecraft.util.valueproviders.UniformInt ALERT_INTERVAL -> cg
    F:int ticksUntilNextAlert -> ch
    M:void setPersistentAngerTarget(java.util.UUID) -> a
    M:double getMyRidingOffset() -> bt
    M:void addBehaviourGoals() -> n
    M:void setTarget(net.minecraft.world.entity.EntityLiving) -> h
    M:void startPersistentAngerTimer() -> c
    M:boolean checkZombifiedPiglinSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean checkSpawnObstruction(net.minecraft.world.level.IWorldReader) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void setRemainingPersistentAngerTime(int) -> a
    M:int getRemainingPersistentAngerTime() -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void populateDefaultEquipmentSlots(net.minecraft.util.RandomSource,net.minecraft.world.DifficultyDamageScaler) -> a
    M:java.util.UUID getPersistentAngerTarget() -> b
    M:boolean isPreventingPlayerRest(net.minecraft.world.entity.player.EntityHuman) -> e
    M:boolean wantsToPickUp(net.minecraft.world.item.ItemStack) -> l
net.minecraft.world.entity.monster.hoglin.Hoglin -> brp -> net.minecraft.world.entity.monster.hoglin.EntityHoglin
    F:net.minecraft.network.syncher.DataWatcherObject DATA_IMMUNE_TO_ZOMBIFICATION -> ca
    F:float PROBABILITY_OF_SPAWNING_AS_BABY -> cb
    F:int MAX_HEALTH -> cc
    F:float MOVEMENT_SPEED_WHEN_FIGHTING -> cd
    F:int ATTACK_KNOCKBACK -> ce
    F:float KNOCKBACK_RESISTANCE -> cf
    F:int ATTACK_DAMAGE -> cg
    F:float BABY_ATTACK_DAMAGE -> ch
    F:int CONVERSION_TIME -> ci
    F:int attackAnimationRemainingTicks -> cj
    F:int timeInOverworld -> ck
    F:boolean cannotBeHunted -> cl
    M:boolean canBeLeashed(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> q
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:void blockedByShield(net.minecraft.world.entity.EntityLiving) -> e
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(com.mojang.serialization.Dynamic) -> a
    M:net.minecraft.world.entity.ai.BehaviorController getBrain() -> dz
    M:void ageBoundaryReached() -> n
    M:boolean checkHoglinSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> c
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean removeWhenFarAway(double) -> h
    M:float getWalkTargetValue(net.minecraft.core.BlockPosition,net.minecraft.world.level.IWorldReader) -> a
    M:double getPassengersRidingOffset() -> bu
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:void handleEntityEvent(byte) -> a
    M:void finishConversion(net.minecraft.server.level.WorldServer) -> c
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> n
    M:boolean isAdult() -> t
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void setImmuneToZombification(boolean) -> v
    M:void setCannotBeHunted(boolean) -> w
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void playSoundEvent(net.minecraft.sounds.SoundEffect) -> b
net.minecraft.world.entity.monster.hoglin.HoglinAi -> brq -> net.minecraft.world.entity.monster.hoglin.HoglinAI
    F:int REPELLENT_DETECTION_RANGE_HORIZONTAL -> a
    F:int REPELLENT_DETECTION_RANGE_VERTICAL -> b
    F:net.minecraft.util.valueproviders.UniformInt RETREAT_DURATION -> c
    F:int ATTACK_DURATION -> d
    F:int DESIRED_DISTANCE_FROM_PIGLIN_WHEN_IDLING -> e
    F:int DESIRED_DISTANCE_FROM_PIGLIN_WHEN_RETREATING -> f
    F:int ATTACK_INTERVAL -> g
    F:int BABY_ATTACK_INTERVAL -> h
    F:int REPELLENT_PACIFY_TIME -> i
    F:net.minecraft.util.valueproviders.UniformInt ADULT_FOLLOW_RANGE -> j
    F:float SPEED_MULTIPLIER_WHEN_AVOIDING_REPELLENT -> k
    F:float SPEED_MULTIPLIER_WHEN_RETREATING -> l
    F:float SPEED_MULTIPLIER_WHEN_MAKING_LOVE -> m
    F:float SPEED_MULTIPLIER_WHEN_IDLING -> n
    F:float SPEED_MULTIPLIER_WHEN_FOLLOWING_ADULT -> o
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(net.minecraft.world.entity.ai.BehaviorController) -> a
    M:void initCoreActivity(net.minecraft.world.entity.ai.BehaviorController) -> b
    M:void initIdleActivity(net.minecraft.world.entity.ai.BehaviorController) -> c
    M:void initFightActivity(net.minecraft.world.entity.ai.BehaviorController) -> d
    M:void initRetreatActivity(net.minecraft.world.entity.ai.BehaviorController) -> e
    M:net.minecraft.world.entity.ai.behavior.BehaviorGateSingle createIdleMovementBehaviors() -> a
    M:void updateActivity(net.minecraft.world.entity.monster.hoglin.EntityHoglin) -> a
    M:void onHitTarget(net.minecraft.world.entity.monster.hoglin.EntityHoglin,net.minecraft.world.entity.EntityLiving) -> a
    M:void broadcastRetreat(net.minecraft.world.entity.monster.hoglin.EntityHoglin,net.minecraft.world.entity.EntityLiving) -> c
    M:void retreatFromNearestTarget(net.minecraft.world.entity.monster.hoglin.EntityHoglin,net.minecraft.world.entity.EntityLiving) -> d
    M:void setAvoidTarget(net.minecraft.world.entity.monster.hoglin.EntityHoglin,net.minecraft.world.entity.EntityLiving) -> e
    M:java.util.Optional findNearestValidAttackTarget(net.minecraft.world.entity.monster.hoglin.EntityHoglin) -> d
    M:boolean isPosNearNearestRepellent(net.minecraft.world.entity.monster.hoglin.EntityHoglin,net.minecraft.core.BlockPosition) -> a
    M:boolean wantsToStopFleeing(net.minecraft.world.entity.monster.hoglin.EntityHoglin) -> e
    M:boolean piglinsOutnumberHoglins(net.minecraft.world.entity.monster.hoglin.EntityHoglin) -> f
    M:void wasHurtBy(net.minecraft.world.entity.monster.hoglin.EntityHoglin,net.minecraft.world.entity.EntityLiving) -> b
    M:void maybeRetaliate(net.minecraft.world.entity.monster.hoglin.EntityHoglin,net.minecraft.world.entity.EntityLiving) -> f
    M:void setAttackTarget(net.minecraft.world.entity.monster.hoglin.EntityHoglin,net.minecraft.world.entity.EntityLiving) -> g
    M:void broadcastAttackTarget(net.minecraft.world.entity.monster.hoglin.EntityHoglin,net.minecraft.world.entity.EntityLiving) -> h
    M:void setAttackTargetIfCloserThanCurrent(net.minecraft.world.entity.monster.hoglin.EntityHoglin,net.minecraft.world.entity.EntityLiving) -> i
    M:java.util.Optional getSoundForCurrentActivity(net.minecraft.world.entity.monster.hoglin.EntityHoglin) -> b
    M:net.minecraft.sounds.SoundEffect getSoundForActivity(net.minecraft.world.entity.monster.hoglin.EntityHoglin,net.minecraft.world.entity.schedule.Activity) -> a
    M:java.util.List getVisibleAdultHoglins(net.minecraft.world.entity.monster.hoglin.EntityHoglin) -> g
    M:boolean isNearRepellent(net.minecraft.world.entity.monster.hoglin.EntityHoglin) -> h
    M:boolean isBreeding(net.minecraft.world.entity.monster.hoglin.EntityHoglin) -> i
    M:boolean isPacified(net.minecraft.world.entity.monster.hoglin.EntityHoglin) -> c
net.minecraft.world.entity.monster.hoglin.HoglinBase -> brr -> net.minecraft.world.entity.monster.hoglin.IOglin
    M:boolean hurtAndThrowTarget(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> a
    M:void throwTarget(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> b
net.minecraft.world.entity.monster.piglin.AbstractPiglin -> bru -> net.minecraft.world.entity.monster.piglin.EntityPiglinAbstract
    F:net.minecraft.network.syncher.DataWatcherObject DATA_IMMUNE_TO_ZOMBIFICATION -> b
    F:int CONVERSION_TIME -> c
    F:int timeInOverworld -> d
    M:void applyOpenDoorsAbility() -> t
    M:void setImmuneToZombification(boolean) -> v
    M:boolean isImmuneToZombification() -> q
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:double getMyRidingOffset() -> bt
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void finishConversion(net.minecraft.server.level.WorldServer) -> c
net.minecraft.world.entity.monster.piglin.Piglin -> brv -> net.minecraft.world.entity.monster.piglin.EntityPiglin
    F:net.minecraft.network.syncher.DataWatcherObject DATA_IS_DANCING -> ca
    F:java.util.UUID SPEED_MODIFIER_BABY_UUID -> cb
    F:net.minecraft.world.entity.ai.attributes.AttributeModifier SPEED_MODIFIER_BABY -> cc
    F:int MAX_HEALTH -> cd
    F:float MOVEMENT_SPEED_WHEN_FIGHTING -> ce
    F:int ATTACK_DAMAGE -> cf
    F:float CROSSBOW_POWER -> cg
    F:float CHANCE_OF_WEARING_EACH_ARMOUR_ITEM -> ch
    F:int MAX_PASSENGERS_ON_ONE_HOGLIN -> ci
    F:float PROBABILITY_OF_SPAWNING_AS_BABY -> cj
    F:float BABY_EYE_HEIGHT_ADJUSTMENT -> ck
    F:double PROBABILITY_OF_SPAWNING_WITH_CROSSBOW_INSTEAD_OF_SWORD -> cl
    F:net.minecraft.world.InventorySubcontainer inventory -> cm
    F:boolean cannotHunt -> cn
    F:com.google.common.collect.ImmutableList SENSOR_TYPES -> e
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.InventorySubcontainer getInventory() -> t
    M:void dropCustomDeathLoot(net.minecraft.world.damagesource.DamageSource,int,boolean) -> a
    M:net.minecraft.world.item.ItemStack addToInventory(net.minecraft.world.item.ItemStack) -> m
    M:boolean canAddToInventory(net.minecraft.world.item.ItemStack) -> n
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:boolean checkPiglinSpawnRules(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.GeneratorAccess,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean removeWhenFarAway(double) -> h
    M:void populateDefaultEquipmentSlots(net.minecraft.util.RandomSource,net.minecraft.world.DifficultyDamageScaler) -> a
    M:void maybeWearArmor(net.minecraft.world.entity.EnumItemSlot,net.minecraft.world.item.ItemStack,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(com.mojang.serialization.Dynamic) -> a
    M:net.minecraft.world.entity.ai.BehaviorController getBrain() -> dz
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:double getPassengersRidingOffset() -> bu
    M:void setBaby(boolean) -> a
    M:void setCannotHunt(boolean) -> x
    M:boolean canHunt() -> n
    M:void finishConversion(net.minecraft.server.level.WorldServer) -> c
    M:void setChargingCrossbow(boolean) -> b
    M:void onCrossbowAttackPerformed() -> a
    M:void setDancing(boolean) -> w
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void performRangedAttack(net.minecraft.world.entity.EntityLiving,float) -> a
    M:void shootCrossbowProjectile(net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.projectile.IProjectile,float) -> a
    M:boolean canFireProjectileWeapon(net.minecraft.world.item.ItemProjectileWeapon) -> a
    M:void holdInMainHand(net.minecraft.world.item.ItemStack) -> o
    M:void holdInOffHand(net.minecraft.world.item.ItemStack) -> p
    M:boolean wantsToPickUp(net.minecraft.world.item.ItemStack) -> l
    M:boolean canReplaceCurrentItem(net.minecraft.world.item.ItemStack) -> q
    M:boolean canReplaceCurrentItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:void pickUpItem(net.minecraft.world.entity.item.EntityItem) -> b
    M:boolean startRiding(net.minecraft.world.entity.Entity,boolean) -> a
    M:net.minecraft.world.entity.Entity getTopPassenger(net.minecraft.world.entity.Entity,int) -> b
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void playSoundEvent(net.minecraft.sounds.SoundEffect) -> b
net.minecraft.world.entity.monster.piglin.PiglinAi -> brw -> net.minecraft.world.entity.monster.piglin.PiglinAI
    F:int REPELLENT_DETECTION_RANGE_HORIZONTAL -> a
    F:int REPELLENT_DETECTION_RANGE_VERTICAL -> b
    F:net.minecraft.world.item.Item BARTERING_ITEM -> c
    F:int PLAYER_ANGER_RANGE -> d
    F:int ANGER_DURATION -> e
    F:int ADMIRE_DURATION -> f
    F:int MAX_DISTANCE_TO_WALK_TO_ITEM -> g
    F:int MAX_TIME_TO_WALK_TO_ITEM -> h
    F:int HOW_LONG_TIME_TO_DISABLE_ADMIRE_WALKING_IF_CANT_REACH_ITEM -> i
    F:int CELEBRATION_TIME -> j
    F:net.minecraft.util.valueproviders.UniformInt TIME_BETWEEN_HUNTS -> k
    F:int BABY_FLEE_DURATION_AFTER_GETTING_HIT -> l
    F:int HIT_BY_PLAYER_MEMORY_TIMEOUT -> m
    F:int MAX_WALK_DISTANCE_TO_START_RIDING -> n
    F:net.minecraft.util.valueproviders.UniformInt RIDE_START_INTERVAL -> o
    F:net.minecraft.util.valueproviders.UniformInt RIDE_DURATION -> p
    F:net.minecraft.util.valueproviders.UniformInt RETREAT_DURATION -> q
    F:int MELEE_ATTACK_COOLDOWN -> r
    F:int EAT_COOLDOWN -> s
    F:int DESIRED_DISTANCE_FROM_ENTITY_WHEN_AVOIDING -> t
    F:int MAX_LOOK_DIST -> u
    F:int MAX_LOOK_DIST_FOR_PLAYER_HOLDING_LOVED_ITEM -> v
    F:int INTERACTION_RANGE -> w
    F:int MIN_DESIRED_DIST_FROM_TARGET_WHEN_HOLDING_CROSSBOW -> x
    F:float SPEED_WHEN_STRAFING_BACK_FROM_TARGET -> y
    F:int DESIRED_DISTANCE_FROM_ZOMBIFIED -> z
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(net.minecraft.world.entity.monster.piglin.EntityPiglin,net.minecraft.world.entity.ai.BehaviorController) -> a
    M:void initMemories(net.minecraft.world.entity.monster.piglin.EntityPiglin,net.minecraft.util.RandomSource) -> a
    M:void initCoreActivity(net.minecraft.world.entity.ai.BehaviorController) -> a
    M:void initIdleActivity(net.minecraft.world.entity.ai.BehaviorController) -> b
    M:void initFightActivity(net.minecraft.world.entity.monster.piglin.EntityPiglin,net.minecraft.world.entity.ai.BehaviorController) -> b
    M:void initCelebrateActivity(net.minecraft.world.entity.ai.BehaviorController) -> c
    M:void initAdmireItemActivity(net.minecraft.world.entity.ai.BehaviorController) -> d
    M:void initRetreatActivity(net.minecraft.world.entity.ai.BehaviorController) -> e
    M:void initRideHoglinActivity(net.minecraft.world.entity.ai.BehaviorController) -> f
    M:net.minecraft.world.entity.ai.behavior.BehaviorGateSingle createIdleLookBehaviors() -> a
    M:net.minecraft.world.entity.ai.behavior.BehaviorGateSingle createIdleMovementBehaviors() -> b
    M:net.minecraft.world.entity.ai.behavior.BehaviorWalkAway avoidRepellent() -> c
    M:net.minecraft.world.entity.ai.behavior.BehaviorExpirableMemory babyAvoidNemesis() -> d
    M:net.minecraft.world.entity.ai.behavior.BehaviorExpirableMemory avoidZombified() -> e
    M:void updateActivity(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> a
    M:boolean isBabyRidingBaby(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> g
    M:void pickUpItem(net.minecraft.world.entity.monster.piglin.EntityPiglin,net.minecraft.world.entity.item.EntityItem) -> a
    M:void holdInOffhand(net.minecraft.world.entity.monster.piglin.EntityPiglin,net.minecraft.world.item.ItemStack) -> c
    M:net.minecraft.world.item.ItemStack removeOneItemFromItemEntity(net.minecraft.world.entity.item.EntityItem) -> a
    M:void stopHoldingOffHandItem(net.minecraft.world.entity.monster.piglin.EntityPiglin,boolean) -> a
    M:void cancelAdmiring(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> b
    M:void putInInventory(net.minecraft.world.entity.monster.piglin.EntityPiglin,net.minecraft.world.item.ItemStack) -> d
    M:void throwItems(net.minecraft.world.entity.monster.piglin.EntityPiglin,java.util.List) -> a
    M:void throwItemsTowardRandomPos(net.minecraft.world.entity.monster.piglin.EntityPiglin,java.util.List) -> b
    M:void throwItemsTowardPlayer(net.minecraft.world.entity.monster.piglin.EntityPiglin,net.minecraft.world.entity.player.EntityHuman,java.util.List) -> a
    M:void throwItemsTowardPos(net.minecraft.world.entity.monster.piglin.EntityPiglin,java.util.List,net.minecraft.world.phys.Vec3D) -> a
    M:java.util.List getBarterResponseItems(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> h
    M:boolean wantsToDance(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean wantsToPickup(net.minecraft.world.entity.monster.piglin.EntityPiglin,net.minecraft.world.item.ItemStack) -> a
    M:boolean isLovedItem(net.minecraft.world.item.ItemStack) -> a
    M:boolean wantsToStopRiding(net.minecraft.world.entity.monster.piglin.EntityPiglin,net.minecraft.world.entity.Entity) -> a
    M:boolean isNearestValidAttackTarget(net.minecraft.world.entity.monster.piglin.EntityPiglin,net.minecraft.world.entity.EntityLiving) -> b
    M:boolean isNearZombified(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> i
    M:java.util.Optional findNearestValidAttackTarget(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> j
    M:void angerNearbyPiglins(net.minecraft.world.entity.player.EntityHuman,boolean) -> a
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.monster.piglin.EntityPiglin,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:boolean canAdmire(net.minecraft.world.entity.monster.piglin.EntityPiglin,net.minecraft.world.item.ItemStack) -> b
    M:void wasHurtBy(net.minecraft.world.entity.monster.piglin.EntityPiglin,net.minecraft.world.entity.EntityLiving) -> a
    M:void maybeRetaliate(net.minecraft.world.entity.monster.piglin.EntityPiglinAbstract,net.minecraft.world.entity.EntityLiving) -> a
    M:java.util.Optional getSoundForCurrentActivity(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> c
    M:net.minecraft.sounds.SoundEffect getSoundForActivity(net.minecraft.world.entity.monster.piglin.EntityPiglin,net.minecraft.world.entity.schedule.Activity) -> a
    M:boolean isNearAvoidTarget(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> k
    M:boolean hasAnyoneNearbyHuntedRecently(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> d
    M:java.util.List getVisibleAdultPiglins(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> l
    M:java.util.List getAdultPiglins(net.minecraft.world.entity.monster.piglin.EntityPiglinAbstract) -> e
    M:boolean isWearingGold(net.minecraft.world.entity.EntityLiving) -> a
    M:void stopWalking(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> m
    M:net.minecraft.world.entity.ai.behavior.BehaviorRunSometimes babySometimesRideBabyHoglin() -> f
    M:void broadcastAngerTarget(net.minecraft.world.entity.monster.piglin.EntityPiglinAbstract,net.minecraft.world.entity.EntityLiving) -> b
    M:void broadcastUniversalAnger(net.minecraft.world.entity.monster.piglin.EntityPiglinAbstract) -> a
    M:void broadcastDontKillAnyMoreHoglinsForAWhile(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> e
    M:void setAngerTarget(net.minecraft.world.entity.monster.piglin.EntityPiglinAbstract,net.minecraft.world.entity.EntityLiving) -> c
    M:void setAngerTargetToNearestTargetablePlayerIfFound(net.minecraft.world.entity.monster.piglin.EntityPiglinAbstract,net.minecraft.world.entity.EntityLiving) -> d
    M:void setAngerTargetIfCloserThanCurrent(net.minecraft.world.entity.monster.piglin.EntityPiglinAbstract,net.minecraft.world.entity.EntityLiving) -> e
    M:java.util.Optional getAngerTarget(net.minecraft.world.entity.monster.piglin.EntityPiglinAbstract) -> f
    M:java.util.Optional getAvoidTarget(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> f
    M:java.util.Optional getNearestVisibleTargetablePlayer(net.minecraft.world.entity.monster.piglin.EntityPiglinAbstract) -> b
    M:void broadcastRetreat(net.minecraft.world.entity.monster.piglin.EntityPiglin,net.minecraft.world.entity.EntityLiving) -> c
    M:void retreatFromNearestTarget(net.minecraft.world.entity.monster.piglin.EntityPiglin,net.minecraft.world.entity.EntityLiving) -> d
    M:boolean wantsToStopFleeing(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> n
    M:boolean piglinsEqualOrOutnumberHoglins(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> o
    M:boolean hoglinsOutnumberPiglins(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> p
    M:void setAvoidTargetAndDontHuntForAWhile(net.minecraft.world.entity.monster.piglin.EntityPiglin,net.minecraft.world.entity.EntityLiving) -> e
    M:void dontKillAnyMoreHoglinsForAWhile(net.minecraft.world.entity.monster.piglin.EntityPiglinAbstract) -> c
    M:boolean seesPlayerHoldingWantedItem(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> q
    M:void eat(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> r
    M:net.minecraft.world.phys.Vec3D getRandomNearbyPos(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> s
    M:boolean hasEatenRecently(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> t
    M:boolean isIdle(net.minecraft.world.entity.monster.piglin.EntityPiglinAbstract) -> d
    M:boolean hasCrossbow(net.minecraft.world.entity.EntityLiving) -> c
    M:void admireGoldItem(net.minecraft.world.entity.EntityLiving) -> d
    M:boolean isAdmiringItem(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> u
    M:boolean isBarterCurrency(net.minecraft.world.item.ItemStack) -> b
    M:boolean isFood(net.minecraft.world.item.ItemStack) -> c
    M:boolean isNearRepellent(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> v
    M:boolean seesPlayerHoldingLovedItem(net.minecraft.world.entity.EntityLiving) -> e
    M:boolean doesntSeeAnyPlayerHoldingLovedItem(net.minecraft.world.entity.EntityLiving) -> f
    M:boolean isPlayerHoldingLovedItem(net.minecraft.world.entity.EntityLiving) -> b
    M:boolean isAdmiringDisabled(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> w
    M:boolean wasHurtRecently(net.minecraft.world.entity.EntityLiving) -> g
    M:boolean isHoldingItemInOffHand(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> x
    M:boolean isNotHoldingLovedItemInOffHand(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> y
    M:boolean isZombified(net.minecraft.world.entity.EntityTypes) -> a
net.minecraft.world.entity.monster.piglin.PiglinArmPose -> brx -> net.minecraft.world.entity.monster.piglin.EntityPiglinArmPose
    F:net.minecraft.world.entity.monster.piglin.EntityPiglinArmPose ATTACKING_WITH_MELEE_WEAPON -> a
    F:net.minecraft.world.entity.monster.piglin.EntityPiglinArmPose CROSSBOW_HOLD -> b
    F:net.minecraft.world.entity.monster.piglin.EntityPiglinArmPose CROSSBOW_CHARGE -> c
    F:net.minecraft.world.entity.monster.piglin.EntityPiglinArmPose ADMIRING_ITEM -> d
    F:net.minecraft.world.entity.monster.piglin.EntityPiglinArmPose DANCING -> e
    F:net.minecraft.world.entity.monster.piglin.EntityPiglinArmPose DEFAULT -> f
net.minecraft.world.entity.monster.piglin.PiglinBrute -> bry -> net.minecraft.world.entity.monster.piglin.EntityPiglinBrute
    F:int ATTACK_DAMAGE -> ca
    F:com.google.common.collect.ImmutableList SENSOR_TYPES -> e
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> t
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:void populateDefaultEquipmentSlots(net.minecraft.util.RandomSource,net.minecraft.world.DifficultyDamageScaler) -> a
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(com.mojang.serialization.Dynamic) -> a
    M:net.minecraft.world.entity.ai.BehaviorController getBrain() -> dz
    M:boolean canHunt() -> n
    M:boolean wantsToPickUp(net.minecraft.world.item.ItemStack) -> l
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
net.minecraft.world.entity.monster.piglin.PiglinBruteAi -> brz -> net.minecraft.world.entity.monster.piglin.PiglinBruteAI
    F:int ANGER_DURATION -> a
    F:int MELEE_ATTACK_COOLDOWN -> b
    F:double ACTIVITY_SOUND_LIKELIHOOD_PER_TICK -> c
    F:int MAX_LOOK_DIST -> d
    F:int INTERACTION_RANGE -> e
    F:double TARGETING_RANGE -> f
    F:float SPEED_MULTIPLIER_WHEN_IDLING -> g
    F:int HOME_CLOSE_ENOUGH_DISTANCE -> h
    F:int HOME_TOO_FAR_DISTANCE -> i
    F:int HOME_STROLL_AROUND_DISTANCE -> j
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(net.minecraft.world.entity.monster.piglin.EntityPiglinBrute,net.minecraft.world.entity.ai.BehaviorController) -> a
    M:void initMemories(net.minecraft.world.entity.monster.piglin.EntityPiglinBrute) -> a
    M:void initCoreActivity(net.minecraft.world.entity.monster.piglin.EntityPiglinBrute,net.minecraft.world.entity.ai.BehaviorController) -> b
    M:void initIdleActivity(net.minecraft.world.entity.monster.piglin.EntityPiglinBrute,net.minecraft.world.entity.ai.BehaviorController) -> c
    M:void initFightActivity(net.minecraft.world.entity.monster.piglin.EntityPiglinBrute,net.minecraft.world.entity.ai.BehaviorController) -> d
    M:net.minecraft.world.entity.ai.behavior.BehaviorGateSingle createIdleLookBehaviors() -> a
    M:net.minecraft.world.entity.ai.behavior.BehaviorGateSingle createIdleMovementBehaviors() -> b
    M:void updateActivity(net.minecraft.world.entity.monster.piglin.EntityPiglinBrute) -> b
    M:boolean isNearestValidAttackTarget(net.minecraft.world.entity.monster.piglin.EntityPiglinAbstract,net.minecraft.world.entity.EntityLiving) -> a
    M:java.util.Optional findNearestValidAttackTarget(net.minecraft.world.entity.monster.piglin.EntityPiglinAbstract) -> a
    M:java.util.Optional getTargetIfWithinRange(net.minecraft.world.entity.monster.piglin.EntityPiglinAbstract,net.minecraft.world.entity.ai.memory.MemoryModuleType) -> a
    M:void wasHurtBy(net.minecraft.world.entity.monster.piglin.EntityPiglinBrute,net.minecraft.world.entity.EntityLiving) -> a
    M:void setAngerTarget(net.minecraft.world.entity.monster.piglin.EntityPiglinBrute,net.minecraft.world.entity.EntityLiving) -> b
    M:void maybePlayActivitySound(net.minecraft.world.entity.monster.piglin.EntityPiglinBrute) -> c
    M:void playActivitySound(net.minecraft.world.entity.monster.piglin.EntityPiglinBrute) -> d
net.minecraft.world.entity.monster.piglin.RememberIfHoglinWasKilled -> bsa -> net.minecraft.world.entity.monster.piglin.BehaviorRememberHuntedHoglin
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.piglin.EntityPiglin,long) -> a
    M:boolean isAttackTargetDeadHoglin(net.minecraft.world.entity.monster.piglin.EntityPiglin) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.monster.piglin.StartAdmiringItemIfSeen -> bsb -> net.minecraft.world.entity.monster.piglin.BehaviorStartAdmiringItem
    F:int admireDuration -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.piglin.EntityPiglin) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.piglin.EntityPiglin,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.monster.piglin.StartHuntingHoglin -> bsc -> net.minecraft.world.entity.monster.piglin.BehaviorHuntHoglin
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.piglin.EntityPiglin) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.piglin.EntityPiglin,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.monster.piglin.StopAdmiringIfItemTooFarAway -> bsd -> net.minecraft.world.entity.monster.piglin.BehaviorStopAdmiringItem
    F:int maxDistanceToItem -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.piglin.EntityPiglin) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.piglin.EntityPiglin,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.monster.piglin.StopAdmiringIfTiredOfTryingToReachItem -> bse -> net.minecraft.world.entity.monster.piglin.BehaviorAdmireTimeout
    F:int maxTimeToReachItem -> a
    F:int disableTime -> d
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.piglin.EntityPiglin) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.piglin.EntityPiglin,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.monster.piglin.StopHoldingItemIfNoLongerAdmiring -> bsf -> net.minecraft.world.entity.monster.piglin.BehaviorStopAdmiring
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.piglin.EntityPiglin) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.piglin.EntityPiglin,long) -> a
    M:boolean checkExtraStartConditions(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.monster.warden.AngerLevel -> bsh -> net.minecraft.world.entity.monster.warden.AngerLevel
    F:net.minecraft.world.entity.monster.warden.AngerLevel CALM -> a
    F:net.minecraft.world.entity.monster.warden.AngerLevel AGITATED -> b
    F:net.minecraft.world.entity.monster.warden.AngerLevel ANGRY -> c
    F:int minimumAnger -> e
    F:net.minecraft.sounds.SoundEffect ambientSound -> f
    F:net.minecraft.sounds.SoundEffect listeningSound -> g
    M:int getMinimumAnger() -> a
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> b
    M:net.minecraft.sounds.SoundEffect getListeningSound() -> c
    M:net.minecraft.world.entity.monster.warden.AngerLevel byAnger(int) -> a
    M:boolean isAngry() -> d
net.minecraft.world.entity.monster.warden.AngerManagement -> bsi -> net.minecraft.world.entity.monster.warden.AngerManagement
    F:int CONVERSION_DELAY -> a
    F:int MAX_ANGER -> b
    F:int DEFAULT_ANGER_DECREASE -> f
    F:int conversionDelay -> g
    F:int highestAnger -> h
    F:com.mojang.serialization.Codec SUSPECT_ANGER_PAIR -> i
    F:java.util.function.Predicate filter -> j
    F:java.util.ArrayList suspects -> c
    F:net.minecraft.world.entity.monster.warden.AngerManagement$Sorter suspectSorter -> k
    F:it.unimi.dsi.fastutil.objects.Object2IntMap angerBySuspect -> d
    F:it.unimi.dsi.fastutil.objects.Object2IntMap angerByUuid -> e
    M:com.mojang.serialization.Codec codec(java.util.function.Predicate) -> a
    M:java.util.List createUuidAngerPairs() -> b
    M:void tick(net.minecraft.server.level.WorldServer,java.util.function.Predicate) -> a
    M:void sortAndUpdateHighestAnger() -> c
    M:void convertFromUuids(net.minecraft.server.level.WorldServer) -> a
    M:int increaseAnger(net.minecraft.world.entity.Entity,int) -> a
    M:void clearAnger(net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.entity.Entity getTopSuspect() -> d
    M:int getActiveAnger(net.minecraft.world.entity.Entity) -> b
    M:java.util.Optional getActiveEntity() -> a
net.minecraft.world.entity.monster.warden.AngerManagement$Sorter -> bsi$a -> net.minecraft.world.entity.monster.warden.AngerManagement$a
    F:net.minecraft.world.entity.monster.warden.AngerManagement angerManagement -> a
    M:int compare(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.entity.monster.warden.AngerManagement angerManagement() -> a
    M:int compare(java.lang.Object,java.lang.Object) -> compare
net.minecraft.world.entity.monster.warden.Warden -> bsj -> net.minecraft.world.entity.monster.warden.Warden
    F:int GAME_EVENT_LISTENER_RANGE -> ca
    F:int VIBRATION_COOLDOWN_TICKS -> cb
    F:int TIME_TO_USE_MELEE_UNTIL_SONIC_BOOM -> cc
    F:int MAX_HEALTH -> cd
    F:float MOVEMENT_SPEED_WHEN_FIGHTING -> ce
    F:float KNOCKBACK_RESISTANCE -> cf
    F:float ATTACK_KNOCKBACK -> cg
    F:int ATTACK_DAMAGE -> ch
    F:net.minecraft.network.syncher.DataWatcherObject CLIENT_ANGER_LEVEL -> ci
    F:int DARKNESS_DISPLAY_LIMIT -> cj
    F:int DARKNESS_DURATION -> ck
    F:int DARKNESS_RADIUS -> cl
    F:int DARKNESS_INTERVAL -> cm
    F:int ANGERMANAGEMENT_TICK_DELAY -> cn
    F:int DEFAULT_ANGER -> co
    F:int PROJECTILE_ANGER -> cp
    F:int ON_HURT_ANGER_BOOST -> cq
    F:int RECENT_PROJECTILE_TICK_THRESHOLD -> cr
    F:int TOUCH_COOLDOWN_TICKS -> cs
    F:int DIGGING_PARTICLES_AMOUNT -> ct
    F:float DIGGING_PARTICLES_DURATION -> cu
    F:float DIGGING_PARTICLES_OFFSET -> cv
    F:int PROJECTILE_ANGER_DISTANCE -> cw
    F:int tendrilAnimation -> cx
    F:int tendrilAnimationO -> cy
    F:int heartAnimation -> cz
    F:net.minecraft.world.entity.AnimationState roarAnimationState -> b
    F:net.minecraft.world.entity.AnimationState sniffAnimationState -> c
    F:net.minecraft.world.entity.AnimationState emergeAnimationState -> d
    F:net.minecraft.world.entity.AnimationState diggingAnimationState -> e
    M:void recreateFromPacket(net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity) -> a
    M:boolean checkSpawnObstruction(net.minecraft.world.level.IWorldReader) -> a
    M:float getWalkTargetValue(net.minecraft.core.BlockPosition,net.minecraft.world.level.IWorldReader) -> a
    M:boolean isInvulnerableTo(net.minecraft.world.damagesource.DamageSource) -> b
    M:boolean canRide(net.minecraft.world.entity.Entity) -> l
    M:boolean canDisableShield() -> fn
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> n
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playStepSound(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> z
    M:int getClientAngerLevel() -> q
    M:void tick() -> k
    M:void handleEntityEvent(byte) -> a
    M:float getTendrilAnimation(float) -> y
    M:float getHeartAnimation(float) -> z
    M:void clientDiggingParticles(net.minecraft.world.entity.AnimationState) -> a
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(com.mojang.serialization.Dynamic) -> a
    M:net.minecraft.world.entity.ai.BehaviorController getBrain() -> dz
    M:void updateDynamicGameEventListener(java.util.function.BiConsumer) -> a
    M:boolean canTargetEntity(net.minecraft.world.entity.Entity) -> a
    M:void applyDarknessAround(net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D,net.minecraft.world.entity.Entity,int) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void clearAnger(net.minecraft.world.entity.Entity) -> b
    M:void increaseAngerAt(net.minecraft.world.entity.Entity) -> c
    M:void increaseAngerAt(net.minecraft.world.entity.Entity,int,boolean) -> a
    M:boolean removeWhenFarAway(double) -> h
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void setAttackTarget(net.minecraft.world.entity.EntityLiving) -> k
    M:net.minecraft.world.entity.EntitySize getDimensions(net.minecraft.world.entity.EntityPose) -> a
    M:boolean isPushable() -> bm
    M:boolean shouldListen(net.minecraft.server.level.WorldServer,net.minecraft.world.level.gameevent.GameEventListener,net.minecraft.core.BlockPosition,net.minecraft.world.level.gameevent.GameEvent,net.minecraft.world.level.gameevent.GameEvent$Context) -> a
    M:void onSignalReceive(net.minecraft.server.level.WorldServer,net.minecraft.world.level.gameevent.GameEventListener,net.minecraft.core.BlockPosition,net.minecraft.world.level.gameevent.GameEvent,net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity,float) -> a
    M:net.minecraft.world.entity.ai.navigation.NavigationAbstract createNavigation(net.minecraft.world.level.World) -> a
    M:net.minecraft.world.level.pathfinder.Pathfinder createPathFinder(int) -> a
    M:float distance(net.minecraft.world.level.pathfinder.PathPoint,net.minecraft.world.level.pathfinder.PathPoint) -> a
net.minecraft.world.entity.monster.warden.WardenAi -> bsk -> net.minecraft.world.entity.monster.warden.WardenAi
    F:float SPEED_MULTIPLIER_WHEN_IDLING -> d
    F:float SPEED_MULTIPLIER_WHEN_INVESTIGATING -> e
    F:float SPEED_MULTIPLIER_WHEN_FIGHTING -> f
    F:int MELEE_ATTACK_COOLDOWN -> g
    F:int DIGGING_DURATION -> h
    F:int EMERGE_DURATION -> a
    F:int ROAR_DURATION -> b
    F:int SNIFFING_DURATION -> i
    F:int DIGGING_COOLDOWN -> c
    F:int DISTURBANCE_LOCATION_EXPIRY_TIME -> j
    F:java.util.List SENSOR_TYPES -> k
    F:java.util.List MEMORY_TYPES -> l
    F:net.minecraft.world.entity.ai.behavior.Behavior DIG_COOLDOWN_SETTER -> m
    M:void updateActivity(net.minecraft.world.entity.monster.warden.Warden) -> a
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(net.minecraft.world.entity.monster.warden.Warden,com.mojang.serialization.Dynamic) -> a
    M:void initCoreActivity(net.minecraft.world.entity.ai.BehaviorController) -> a
    M:void initEmergeActivity(net.minecraft.world.entity.ai.BehaviorController) -> b
    M:void initDiggingActivity(net.minecraft.world.entity.ai.BehaviorController) -> c
    M:void initIdleActivity(net.minecraft.world.entity.ai.BehaviorController) -> d
    M:void initInvestigateActivity(net.minecraft.world.entity.ai.BehaviorController) -> e
    M:void initSniffingActivity(net.minecraft.world.entity.ai.BehaviorController) -> f
    M:void initRoarActivity(net.minecraft.world.entity.ai.BehaviorController) -> g
    M:void initFightActivity(net.minecraft.world.entity.monster.warden.Warden,net.minecraft.world.entity.ai.BehaviorController) -> a
    M:boolean isTarget(net.minecraft.world.entity.monster.warden.Warden,net.minecraft.world.entity.EntityLiving) -> a
    M:void onTargetInvalid(net.minecraft.world.entity.monster.warden.Warden,net.minecraft.world.entity.EntityLiving) -> b
    M:void setDigCooldown(net.minecraft.world.entity.EntityLiving) -> a
    M:void setDisturbanceLocation(net.minecraft.world.entity.monster.warden.Warden,net.minecraft.core.BlockPosition) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.monster.warden.Warden,long) -> a
    M:void start(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving,long) -> a
net.minecraft.world.entity.monster.warden.WardenSpawnTracker -> bsl -> net.minecraft.world.entity.monster.warden.WardenSpawnTracker
    F:com.mojang.serialization.Codec CODEC -> a
    F:int MAX_WARNING_LEVEL -> b
    F:double PLAYER_SEARCH_RADIUS -> c
    F:int WARNING_CHECK_DIAMETER -> d
    F:int DECREASE_WARNING_LEVEL_EVERY_INTERVAL -> e
    F:int WARNING_LEVEL_INCREASE_COOLDOWN -> f
    F:int ticksSinceLastWarning -> g
    F:int warningLevel -> h
    F:int cooldownTicks -> i
    M:void tick() -> a
    M:void reset() -> b
    M:java.util.OptionalInt tryWarn(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.server.level.EntityPlayer) -> a
    M:boolean onCooldown() -> d
    M:boolean hasNearbyWarden(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:java.util.List getNearbyPlayers(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> b
    M:void increaseWarningLevel() -> e
    M:void decreaseWarningLevel() -> f
    M:void setWarningLevel(int) -> a
    M:int getWarningLevel() -> c
    M:void copyData(net.minecraft.world.entity.monster.warden.WardenSpawnTracker) -> a
net.minecraft.world.entity.npc.AbstractVillager -> bsn -> net.minecraft.world.entity.npc.EntityVillagerAbstract
    F:int VILLAGER_INVENTORY_SIZE -> ca
    F:net.minecraft.world.entity.player.EntityHuman tradingPlayer -> cb
    F:net.minecraft.world.InventorySubcontainer inventory -> cc
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:int getUnhappyCounter() -> q
    M:void setUnhappyCounter(int) -> s
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:void setTradingPlayer(net.minecraft.world.entity.player.EntityHuman) -> e
    M:void overrideOffers(net.minecraft.world.item.trading.MerchantRecipeList) -> a
    M:void overrideXp(int) -> t
    M:void notifyTrade(net.minecraft.world.item.trading.MerchantRecipe) -> a
    M:void notifyTradeUpdated(net.minecraft.world.item.ItemStack) -> m
    M:net.minecraft.sounds.SoundEffect getTradeUpdatedSound(boolean) -> v
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.entity.Entity changeDimension(net.minecraft.server.level.WorldServer) -> b
    M:void die(net.minecraft.world.damagesource.DamageSource) -> a
    M:void addParticlesAroundSelf(net.minecraft.core.particles.ParticleParam) -> a
    M:boolean canBeLeashed(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.InventorySubcontainer getInventory() -> t
    M:net.minecraft.world.entity.SlotAccess getSlot(int) -> k
    M:void addOffersFromItemListings(net.minecraft.world.item.trading.MerchantRecipeList,net.minecraft.world.entity.npc.VillagerTrades$ItemListing[],int) -> a
    M:net.minecraft.world.phys.Vec3D getRopeHoldPosition(float) -> n
net.minecraft.world.entity.npc.CatSpawner -> bso -> net.minecraft.world.entity.npc.MobSpawnerCat
    F:int TICK_DELAY -> a
    F:int nextTick -> b
    M:int tick(net.minecraft.server.level.WorldServer,boolean,boolean) -> a
    M:int spawnInVillage(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:int spawnInHut(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> b
    M:int spawnCat(net.minecraft.core.BlockPosition,net.minecraft.server.level.WorldServer) -> a
net.minecraft.world.entity.npc.ClientSideMerchant -> bsp -> net.minecraft.world.entity.npc.MerchantWrapper
    F:net.minecraft.world.entity.player.EntityHuman source -> a
    F:net.minecraft.world.item.trading.MerchantRecipeList offers -> b
    F:int xp -> c
    M:void setTradingPlayer(net.minecraft.world.entity.player.EntityHuman) -> e
    M:void overrideOffers(net.minecraft.world.item.trading.MerchantRecipeList) -> a
    M:void notifyTrade(net.minecraft.world.item.trading.MerchantRecipe) -> a
    M:void notifyTradeUpdated(net.minecraft.world.item.ItemStack) -> m
    M:void overrideXp(int) -> t
net.minecraft.world.entity.npc.InventoryCarrier -> bsq -> net.minecraft.world.entity.npc.InventoryCarrier
    M:void pickUpItem(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.entity.npc.InventoryCarrier,net.minecraft.world.entity.item.EntityItem) -> a
net.minecraft.world.entity.npc.Npc -> bsr -> net.minecraft.world.entity.npc.NPC
net.minecraft.world.entity.npc.Villager -> bss -> net.minecraft.world.entity.npc.EntityVillager
    F:org.slf4j.Logger LOGGER -> cd
    F:net.minecraft.network.syncher.DataWatcherObject DATA_VILLAGER_DATA -> ce
    F:java.util.Map FOOD_POINTS -> ca
    F:int TRADES_PER_LEVEL -> cf
    F:java.util.Set WANTED_ITEMS -> cg
    F:int MAX_GOSSIP_TOPICS -> ch
    F:int GOSSIP_COOLDOWN -> ci
    F:int GOSSIP_DECAY_INTERVAL -> cj
    F:int REPUTATION_CHANGE_PER_EVENT -> ck
    F:int HOW_FAR_AWAY_TO_TALK_TO_OTHER_VILLAGERS_ABOUT_GOLEMS -> cl
    F:int HOW_MANY_VILLAGERS_NEED_TO_AGREE_TO_SPAWN_A_GOLEM -> cm
    F:long TIME_SINCE_SLEEPING_FOR_GOLEM_SPAWNING -> cn
    F:float SPEED_MODIFIER -> cb
    F:int updateMerchantTimer -> co
    F:boolean increaseProfessionLevelOnUpdate -> cp
    F:net.minecraft.world.entity.player.EntityHuman lastTradedPlayer -> cq
    F:boolean chasing -> cr
    F:int foodLevel -> cs
    F:net.minecraft.world.entity.ai.gossip.Reputation gossips -> ct
    F:long lastGossipTime -> cu
    F:long lastGossipDecayTime -> cv
    F:int villagerXp -> cw
    F:long lastRestockGameTime -> cx
    F:int numberOfRestocksToday -> cy
    F:long lastRestockCheckDayTime -> cz
    F:java.util.Map POI_MEMORIES -> cc
    M:net.minecraft.world.entity.ai.BehaviorController getBrain() -> dz
    M:net.minecraft.world.entity.ai.BehaviorController makeBrain(com.mojang.serialization.Dynamic) -> a
    M:void refreshBrain(net.minecraft.server.level.WorldServer) -> c
    M:void registerBrainGoals(net.minecraft.world.entity.ai.BehaviorController) -> a
    M:void ageBoundaryReached() -> n
    M:void tick() -> k
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:void setUnhappy() -> gh
    M:void startTrading(net.minecraft.world.entity.player.EntityHuman) -> g
    M:void setTradingPlayer(net.minecraft.world.entity.player.EntityHuman) -> e
    M:void resetSpecialPrices() -> gi
    M:boolean needsToRestock() -> gj
    M:boolean allowedToRestock() -> gk
    M:void catchUpDemand() -> gl
    M:void updateDemand() -> gm
    M:void updateSpecialPrices(net.minecraft.world.entity.player.EntityHuman) -> h
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean removeWhenFarAway(double) -> h
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:void playWorkSound() -> ga
    M:void setVillagerData(net.minecraft.world.entity.npc.VillagerData) -> a
    M:void rewardTradeXp(net.minecraft.world.item.trading.MerchantRecipe) -> b
    M:void setChasing(boolean) -> w
    M:boolean isChasing() -> gb
    M:void setLastHurtByMob(net.minecraft.world.entity.EntityLiving) -> a
    M:void die(net.minecraft.world.damagesource.DamageSource) -> a
    M:void releaseAllPois() -> gn
    M:void tellWitnessesThatIWasMurdered(net.minecraft.world.entity.Entity) -> a
    M:void releasePoi(net.minecraft.world.entity.ai.memory.MemoryModuleType) -> a
    M:boolean canBreed() -> g
    M:boolean hungry() -> go
    M:void eatUntilFull() -> gp
    M:int getPlayerReputation(net.minecraft.world.entity.player.EntityHuman) -> f
    M:void digestFood(int) -> v
    M:void eatAndDigestFood() -> gc
    M:void setOffers(net.minecraft.world.item.trading.MerchantRecipeList) -> b
    M:boolean shouldIncreaseLevel() -> gq
    M:void increaseMerchantCareer() -> gr
    M:net.minecraft.network.chat.IChatBaseComponent getTypeName() -> cg
    M:void handleEntityEvent(byte) -> a
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.entity.npc.EntityVillager getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> b
    M:void thunderHit(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLightning) -> a
    M:void pickUpItem(net.minecraft.world.entity.item.EntityItem) -> b
    M:boolean wantsToPickUp(net.minecraft.world.item.ItemStack) -> l
    M:boolean hasExcessFood() -> gd
    M:boolean wantsMoreFood() -> ge
    M:int countFoodPointsInInventory() -> gs
    M:boolean hasFarmSeeds() -> gf
    M:void gossip(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillager,long) -> a
    M:void maybeDecayGossip() -> gt
    M:void spawnGolemIfNeeded(net.minecraft.server.level.WorldServer,long,int) -> a
    M:boolean wantsToSpawnGolem(long) -> a
    M:void onReputationEventFrom(net.minecraft.world.entity.ai.village.ReputationEvent,net.minecraft.world.entity.Entity) -> a
    M:void setVillagerXp(int) -> u
    M:void resetNumberOfRestocks() -> gu
    M:net.minecraft.world.entity.ai.gossip.Reputation getGossips() -> gg
    M:void setGossips(net.minecraft.nbt.NBTBase) -> a
    M:void startSleeping(net.minecraft.core.BlockPosition) -> b
    M:void stopSleeping() -> fl
    M:boolean golemSpawnConditionsMet(long) -> b
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
net.minecraft.world.entity.npc.VillagerData -> bst -> net.minecraft.world.entity.npc.VillagerData
    F:int MIN_VILLAGER_LEVEL -> a
    F:int MAX_VILLAGER_LEVEL -> b
    F:com.mojang.serialization.Codec CODEC -> c
    F:net.minecraft.world.entity.npc.VillagerType type -> e
    F:net.minecraft.world.entity.npc.VillagerProfession profession -> f
    F:int level -> g
    M:net.minecraft.world.entity.npc.VillagerType getType() -> a
    M:net.minecraft.world.entity.npc.VillagerProfession getProfession() -> b
    M:int getLevel() -> c
    M:net.minecraft.world.entity.npc.VillagerData setType(net.minecraft.world.entity.npc.VillagerType) -> a
    M:net.minecraft.world.entity.npc.VillagerData setProfession(net.minecraft.world.entity.npc.VillagerProfession) -> a
    M:net.minecraft.world.entity.npc.VillagerData setLevel(int) -> a
    M:int getMinXpPerLevel(int) -> b
    M:int getMaxXpPerLevel(int) -> c
    M:boolean canLevelUp(int) -> d
net.minecraft.world.entity.npc.VillagerDataHolder -> bsu -> net.minecraft.world.entity.npc.VillagerDataHolder
net.minecraft.world.entity.npc.VillagerProfession -> bsv -> net.minecraft.world.entity.npc.VillagerProfession
    F:java.lang.String name -> q
    F:java.util.function.Predicate heldJobSite -> r
    F:java.util.function.Predicate acquirableJobSite -> s
    F:com.google.common.collect.ImmutableSet requestedItems -> t
    F:com.google.common.collect.ImmutableSet secondaryPoi -> u
    F:net.minecraft.sounds.SoundEffect workSound -> v
    F:java.util.function.Predicate ALL_ACQUIRABLE_JOBS -> a
    F:net.minecraft.world.entity.npc.VillagerProfession NONE -> b
    F:net.minecraft.world.entity.npc.VillagerProfession ARMORER -> c
    F:net.minecraft.world.entity.npc.VillagerProfession BUTCHER -> d
    F:net.minecraft.world.entity.npc.VillagerProfession CARTOGRAPHER -> e
    F:net.minecraft.world.entity.npc.VillagerProfession CLERIC -> f
    F:net.minecraft.world.entity.npc.VillagerProfession FARMER -> g
    F:net.minecraft.world.entity.npc.VillagerProfession FISHERMAN -> h
    F:net.minecraft.world.entity.npc.VillagerProfession FLETCHER -> i
    F:net.minecraft.world.entity.npc.VillagerProfession LEATHERWORKER -> j
    F:net.minecraft.world.entity.npc.VillagerProfession LIBRARIAN -> k
    F:net.minecraft.world.entity.npc.VillagerProfession MASON -> l
    F:net.minecraft.world.entity.npc.VillagerProfession NITWIT -> m
    F:net.minecraft.world.entity.npc.VillagerProfession SHEPHERD -> n
    F:net.minecraft.world.entity.npc.VillagerProfession TOOLSMITH -> o
    F:net.minecraft.world.entity.npc.VillagerProfession WEAPONSMITH -> p
    M:net.minecraft.world.entity.npc.VillagerProfession register(java.lang.String,net.minecraft.resources.ResourceKey,net.minecraft.sounds.SoundEffect) -> a
    M:net.minecraft.world.entity.npc.VillagerProfession register(java.lang.String,java.util.function.Predicate,java.util.function.Predicate,net.minecraft.sounds.SoundEffect) -> a
    M:net.minecraft.world.entity.npc.VillagerProfession register(java.lang.String,net.minecraft.resources.ResourceKey,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet,net.minecraft.sounds.SoundEffect) -> a
    M:net.minecraft.world.entity.npc.VillagerProfession register(java.lang.String,java.util.function.Predicate,java.util.function.Predicate,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet,net.minecraft.sounds.SoundEffect) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String name() -> a
    M:java.util.function.Predicate heldJobSite() -> b
    M:java.util.function.Predicate acquirableJobSite() -> c
    M:com.google.common.collect.ImmutableSet requestedItems() -> d
    M:com.google.common.collect.ImmutableSet secondaryPoi() -> e
    M:net.minecraft.sounds.SoundEffect workSound() -> f
net.minecraft.world.entity.npc.VillagerTrades -> bsw -> net.minecraft.world.entity.npc.VillagerTrades
    F:int DEFAULT_SUPPLY -> c
    F:int COMMON_ITEMS_SUPPLY -> d
    F:int UNCOMMON_ITEMS_SUPPLY -> e
    F:int XP_LEVEL_1_SELL -> f
    F:int XP_LEVEL_1_BUY -> g
    F:int XP_LEVEL_2_SELL -> h
    F:int XP_LEVEL_2_BUY -> i
    F:int XP_LEVEL_3_SELL -> j
    F:int XP_LEVEL_3_BUY -> k
    F:int XP_LEVEL_4_SELL -> l
    F:int XP_LEVEL_4_BUY -> m
    F:int XP_LEVEL_5_TRADE -> n
    F:float LOW_TIER_PRICE_MULTIPLIER -> o
    F:float HIGH_TIER_PRICE_MULTIPLIER -> p
    F:java.util.Map TRADES -> a
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap WANDERING_TRADER_TRADES -> b
    M:it.unimi.dsi.fastutil.ints.Int2ObjectMap toIntMap(com.google.common.collect.ImmutableMap) -> a
net.minecraft.world.entity.npc.VillagerTrades$DyedArmorForEmeralds -> bsw$a -> net.minecraft.world.entity.npc.VillagerTrades$a
    F:net.minecraft.world.item.Item item -> a
    F:int value -> b
    F:int maxUses -> c
    F:int villagerXp -> d
    M:net.minecraft.world.item.trading.MerchantRecipe getOffer(net.minecraft.world.entity.Entity,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.item.ItemDye getRandomDye(net.minecraft.util.RandomSource) -> a
net.minecraft.world.entity.npc.VillagerTrades$EmeraldForItems -> bsw$b -> net.minecraft.world.entity.npc.VillagerTrades$b
    F:net.minecraft.world.item.Item item -> a
    F:int cost -> b
    F:int maxUses -> c
    F:int villagerXp -> d
    F:float priceMultiplier -> e
    M:net.minecraft.world.item.trading.MerchantRecipe getOffer(net.minecraft.world.entity.Entity,net.minecraft.util.RandomSource) -> a
net.minecraft.world.entity.npc.VillagerTrades$EmeraldsForVillagerTypeItem -> bsw$c -> net.minecraft.world.entity.npc.VillagerTrades$c
    F:java.util.Map trades -> a
    F:int cost -> b
    F:int maxUses -> c
    F:int villagerXp -> d
    M:net.minecraft.world.item.trading.MerchantRecipe getOffer(net.minecraft.world.entity.Entity,net.minecraft.util.RandomSource) -> a
net.minecraft.world.entity.npc.VillagerTrades$EnchantBookForEmeralds -> bsw$d -> net.minecraft.world.entity.npc.VillagerTrades$d
    F:int villagerXp -> a
    M:net.minecraft.world.item.trading.MerchantRecipe getOffer(net.minecraft.world.entity.Entity,net.minecraft.util.RandomSource) -> a
net.minecraft.world.entity.npc.VillagerTrades$EnchantedItemForEmeralds -> bsw$e -> net.minecraft.world.entity.npc.VillagerTrades$e
    F:net.minecraft.world.item.ItemStack itemStack -> a
    F:int baseEmeraldCost -> b
    F:int maxUses -> c
    F:int villagerXp -> d
    F:float priceMultiplier -> e
    M:net.minecraft.world.item.trading.MerchantRecipe getOffer(net.minecraft.world.entity.Entity,net.minecraft.util.RandomSource) -> a
net.minecraft.world.entity.npc.VillagerTrades$ItemListing -> bsw$f -> net.minecraft.world.entity.npc.VillagerTrades$IMerchantRecipeOption
net.minecraft.world.entity.npc.VillagerTrades$ItemsAndEmeraldsToItems -> bsw$g -> net.minecraft.world.entity.npc.VillagerTrades$g
    F:net.minecraft.world.item.ItemStack fromItem -> a
    F:int fromCount -> b
    F:int emeraldCost -> c
    F:net.minecraft.world.item.ItemStack toItem -> d
    F:int toCount -> e
    F:int maxUses -> f
    F:int villagerXp -> g
    F:float priceMultiplier -> h
    M:net.minecraft.world.item.trading.MerchantRecipe getOffer(net.minecraft.world.entity.Entity,net.minecraft.util.RandomSource) -> a
net.minecraft.world.entity.npc.VillagerTrades$ItemsForEmeralds -> bsw$h -> net.minecraft.world.entity.npc.VillagerTrades$h
    F:net.minecraft.world.item.ItemStack itemStack -> a
    F:int emeraldCost -> b
    F:int numberOfItems -> c
    F:int maxUses -> d
    F:int villagerXp -> e
    F:float priceMultiplier -> f
    M:net.minecraft.world.item.trading.MerchantRecipe getOffer(net.minecraft.world.entity.Entity,net.minecraft.util.RandomSource) -> a
net.minecraft.world.entity.npc.VillagerTrades$SuspiciousStewForEmerald -> bsw$i -> net.minecraft.world.entity.npc.VillagerTrades$i
    F:net.minecraft.world.effect.MobEffectList effect -> a
    F:int duration -> b
    F:int xp -> c
    F:float priceMultiplier -> d
    M:net.minecraft.world.item.trading.MerchantRecipe getOffer(net.minecraft.world.entity.Entity,net.minecraft.util.RandomSource) -> a
net.minecraft.world.entity.npc.VillagerTrades$TippedArrowForItemsAndEmeralds -> bsw$j -> net.minecraft.world.entity.npc.VillagerTrades$j
    F:net.minecraft.world.item.ItemStack toItem -> a
    F:int toCount -> b
    F:int emeraldCost -> c
    F:int maxUses -> d
    F:int villagerXp -> e
    F:net.minecraft.world.item.Item fromItem -> f
    F:int fromCount -> g
    F:float priceMultiplier -> h
    M:net.minecraft.world.item.trading.MerchantRecipe getOffer(net.minecraft.world.entity.Entity,net.minecraft.util.RandomSource) -> a
net.minecraft.world.entity.npc.VillagerTrades$TreasureMapForEmeralds -> bsw$k -> net.minecraft.world.entity.npc.VillagerTrades$k
    F:int emeraldCost -> a
    F:net.minecraft.tags.TagKey destination -> b
    F:java.lang.String displayName -> c
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type destinationType -> d
    F:int maxUses -> e
    F:int villagerXp -> f
    M:net.minecraft.world.item.trading.MerchantRecipe getOffer(net.minecraft.world.entity.Entity,net.minecraft.util.RandomSource) -> a
net.minecraft.world.entity.npc.VillagerType -> bsx -> net.minecraft.world.entity.npc.VillagerType
    F:net.minecraft.world.entity.npc.VillagerType DESERT -> a
    F:net.minecraft.world.entity.npc.VillagerType JUNGLE -> b
    F:net.minecraft.world.entity.npc.VillagerType PLAINS -> c
    F:net.minecraft.world.entity.npc.VillagerType SAVANNA -> d
    F:net.minecraft.world.entity.npc.VillagerType SNOW -> e
    F:net.minecraft.world.entity.npc.VillagerType SWAMP -> f
    F:net.minecraft.world.entity.npc.VillagerType TAIGA -> g
    F:java.lang.String name -> h
    F:java.util.Map BY_BIOME -> i
    M:net.minecraft.world.entity.npc.VillagerType register(java.lang.String) -> a
    M:net.minecraft.world.entity.npc.VillagerType byBiome(net.minecraft.core.Holder) -> a
net.minecraft.world.entity.npc.WanderingTrader -> bsy -> net.minecraft.world.entity.npc.EntityVillagerTrader
    F:net.minecraft.core.BlockPosition wanderTarget -> ca
    F:int despawnDelay -> cb
    M:void registerGoals() -> u
    M:net.minecraft.world.entity.EntityAgeable getBreedOffspring(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityAgeable) -> a
    M:net.minecraft.world.EnumInteractionResult mobInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> b
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean removeWhenFarAway(double) -> h
    M:void rewardTradeXp(net.minecraft.world.item.trading.MerchantRecipe) -> b
    M:net.minecraft.sounds.SoundEffect getAmbientSound() -> r
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.sounds.SoundEffect getDrinkingSound(net.minecraft.world.item.ItemStack) -> d
    M:net.minecraft.sounds.SoundEffect getTradeUpdatedSound(boolean) -> v
    M:void setDespawnDelay(int) -> u
    M:void setWanderTarget(net.minecraft.core.BlockPosition) -> g
net.minecraft.world.entity.npc.WanderingTrader$WanderToPositionGoal -> bsy$a -> net.minecraft.world.entity.npc.EntityVillagerTrader$a
    F:net.minecraft.world.entity.npc.EntityVillagerTrader trader -> a
    F:double stopDistance -> b
    F:double speedModifier -> c
    M:void stop() -> d
    M:boolean canUse() -> a
    M:void tick() -> e
    M:boolean isTooFarAway(net.minecraft.core.BlockPosition,double) -> a
net.minecraft.world.entity.npc.WanderingTraderSpawner -> bsz -> net.minecraft.world.entity.npc.MobSpawnerTrader
    F:int DEFAULT_TICK_DELAY -> b
    F:int DEFAULT_SPAWN_DELAY -> a
    F:int MIN_SPAWN_CHANCE -> c
    F:int MAX_SPAWN_CHANCE -> d
    F:int SPAWN_CHANCE_INCREASE -> e
    F:int SPAWN_ONE_IN_X_CHANCE -> f
    F:int NUMBER_OF_SPAWN_ATTEMPTS -> g
    F:net.minecraft.util.RandomSource random -> h
    F:net.minecraft.world.level.storage.IWorldDataServer serverLevelData -> i
    F:int tickDelay -> j
    F:int spawnDelay -> k
    F:int spawnChance -> l
    M:int tick(net.minecraft.server.level.WorldServer,boolean,boolean) -> a
    M:boolean spawn(net.minecraft.server.level.WorldServer) -> a
    M:void tryToSpawnLlamaFor(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.npc.EntityVillagerTrader,int) -> a
    M:net.minecraft.core.BlockPosition findSpawnPositionNear(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,int) -> a
    M:boolean hasEnoughSpace(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.player.Abilities -> btc -> net.minecraft.world.entity.player.PlayerAbilities
    F:boolean invulnerable -> a
    F:boolean flying -> b
    F:boolean mayfly -> c
    F:boolean instabuild -> d
    F:boolean mayBuild -> e
    F:float flyingSpeed -> f
    F:float walkingSpeed -> g
    M:void addSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void loadSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:float getFlyingSpeed() -> a
    M:void setFlyingSpeed(float) -> a
    M:float getWalkingSpeed() -> b
    M:void setWalkingSpeed(float) -> b
net.minecraft.world.entity.player.ChatVisiblity -> btd -> net.minecraft.world.entity.player.EnumChatVisibility
    F:net.minecraft.world.entity.player.EnumChatVisibility FULL -> a
    F:net.minecraft.world.entity.player.EnumChatVisibility SYSTEM -> b
    F:net.minecraft.world.entity.player.EnumChatVisibility HIDDEN -> c
    F:int id -> e
    F:java.lang.String key -> f
    M:int getId() -> a
    M:java.lang.String getKey() -> b
    M:net.minecraft.world.entity.player.EnumChatVisibility byId(int) -> a
net.minecraft.world.entity.player.Inventory -> bte -> net.minecraft.world.entity.player.PlayerInventory
    F:int POP_TIME_DURATION -> b
    F:int INVENTORY_SIZE -> c
    F:int SELECTION_SIZE -> m
    F:int SLOT_OFFHAND -> d
    F:int NOT_FOUND_INDEX -> e
    F:net.minecraft.core.NonNullList items -> h
    F:net.minecraft.core.NonNullList armor -> i
    F:net.minecraft.core.NonNullList offhand -> j
    F:java.util.List compartments -> n
    F:int selected -> k
    F:net.minecraft.world.entity.player.EntityHuman player -> l
    F:int timesChanged -> o
    M:net.minecraft.world.item.ItemStack getSelected() -> f
    M:int getSelectionSize() -> g
    M:boolean hasRemainingSpaceForItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:int getFreeSlot() -> h
    M:void setPickedItem(net.minecraft.world.item.ItemStack) -> a
    M:void pickSlot(int) -> c
    M:boolean isHotbarSlot(int) -> d
    M:int findSlotMatchingItem(net.minecraft.world.item.ItemStack) -> b
    M:int findSlotMatchingUnusedItem(net.minecraft.world.item.ItemStack) -> c
    M:int getSuitableHotbarSlot() -> i
    M:void swapPaint(double) -> a
    M:int clearOrCountMatchingItems(java.util.function.Predicate,int,net.minecraft.world.IInventory) -> a
    M:int addResource(net.minecraft.world.item.ItemStack) -> i
    M:int addResource(int,net.minecraft.world.item.ItemStack) -> d
    M:int getSlotWithRemainingSpace(net.minecraft.world.item.ItemStack) -> d
    M:void tick() -> j
    M:boolean add(net.minecraft.world.item.ItemStack) -> e
    M:boolean add(int,net.minecraft.world.item.ItemStack) -> c
    M:void placeItemBackInInventory(net.minecraft.world.item.ItemStack) -> f
    M:void placeItemBackInInventory(net.minecraft.world.item.ItemStack,boolean) -> a
    M:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    M:void removeItem(net.minecraft.world.item.ItemStack) -> g
    M:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    M:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    M:float getDestroySpeed(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.nbt.NBTTagList save(net.minecraft.nbt.NBTTagList) -> a
    M:void load(net.minecraft.nbt.NBTTagList) -> b
    M:int getContainerSize() -> b
    M:boolean isEmpty() -> c
    M:net.minecraft.world.item.ItemStack getItem(int) -> a
    M:net.minecraft.world.item.ItemStack getArmor(int) -> e
    M:void hurtArmor(net.minecraft.world.damagesource.DamageSource,float,int[]) -> a
    M:void dropAll() -> k
    M:void setChanged() -> e
    M:int getTimesChanged() -> l
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean contains(net.minecraft.world.item.ItemStack) -> h
    M:boolean contains(net.minecraft.tags.TagKey) -> a
    M:void replaceWith(net.minecraft.world.entity.player.PlayerInventory) -> a
    M:void clearContent() -> a
    M:void fillStackedContents(net.minecraft.world.entity.player.AutoRecipeStackManager) -> a
    M:net.minecraft.world.item.ItemStack removeFromSelected(boolean) -> a
net.minecraft.world.entity.player.Player -> btf -> net.minecraft.world.entity.player.EntityHuman
    F:org.slf4j.Logger LOGGER -> b
    F:java.util.Map POSES -> c
    F:int FLY_ACHIEVEMENT_SPEED -> d
    F:net.minecraft.network.syncher.DataWatcherObject DATA_PLAYER_ABSORPTION_ID -> e
    F:net.minecraft.network.syncher.DataWatcherObject DATA_SCORE_ID -> f
    F:long timeEntitySatOnShoulder -> co
    F:net.minecraft.world.entity.player.PlayerInventory inventory -> cp
    F:int takeXpDelay -> ca
    F:double xCloakO -> cb
    F:double yCloakO -> cc
    F:double zCloakO -> cd
    F:double xCloak -> ce
    F:double yCloak -> cf
    F:double zCloak -> cg
    F:int sleepCounter -> cq
    F:boolean wasUnderwater -> ch
    F:net.minecraft.world.entity.player.PlayerAbilities abilities -> cr
    F:int experienceLevel -> ci
    F:int totalExperience -> cj
    F:float experienceProgress -> ck
    F:int enchantmentSeed -> cl
    F:float defaultFlySpeed -> cm
    F:int lastLevelUpTime -> cs
    F:com.mojang.authlib.GameProfile gameProfile -> ct
    F:net.minecraft.world.entity.player.ProfilePublicKey profilePublicKey -> cu
    F:boolean reducedDebugInfo -> cv
    F:net.minecraft.world.item.ItemStack lastItemInMainHand -> cw
    F:net.minecraft.world.item.ItemCooldown cooldowns -> cx
    F:java.util.Optional lastDeathLocation -> cy
    F:net.minecraft.world.entity.projectile.EntityFishingHook fishing -> cn
    M:boolean blockActionRestricted(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.EnumGamemode) -> a
    M:net.minecraft.world.entity.ai.attributes.AttributeProvider$Builder createAttributes() -> fo
    M:void tick() -> k
    M:boolean isSecondaryUseActive() -> fp
    M:boolean wantsToStopRiding() -> fq
    M:boolean isStayingOnGroundSurface() -> fr
    M:boolean updateIsUnderwater() -> fs
    M:void turtleHelmetTick() -> n
    M:net.minecraft.world.item.ItemCooldown createItemCooldowns() -> j
    M:void moveCloak() -> r
    M:void updatePlayerPose() -> ft
    M:int getPortalWaitTime() -> ar
    M:void playSound(net.minecraft.sounds.SoundEffect,float,float) -> a
    M:void playNotifySound(net.minecraft.sounds.SoundEffect,net.minecraft.sounds.SoundCategory,float,float) -> a
    M:void handleEntityEvent(byte) -> a
    M:void addParticlesAroundSelf(net.minecraft.core.particles.ParticleParam) -> a
    M:void closeContainer() -> q
    M:void rideTick() -> bs
    M:void playShoulderEntityAmbientSound(net.minecraft.nbt.NBTTagCompound) -> c
    M:void touch(net.minecraft.world.entity.Entity) -> c
    M:int getScore() -> fu
    M:void setScore(int) -> r
    M:void increaseScore(int) -> s
    M:void startAutoSpinAttack(int) -> t
    M:void die(net.minecraft.world.damagesource.DamageSource) -> a
    M:void dropEquipment() -> ej
    M:void destroyVanishingCursedItems() -> fv
    M:net.minecraft.sounds.SoundEffect getHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    M:net.minecraft.world.entity.item.EntityItem drop(net.minecraft.world.item.ItemStack,boolean) -> a
    M:net.minecraft.world.entity.item.EntityItem drop(net.minecraft.world.item.ItemStack,boolean,boolean) -> a
    M:float getDestroySpeed(net.minecraft.world.level.block.state.IBlockData) -> c
    M:boolean hasCorrectToolForDrops(net.minecraft.world.level.block.state.IBlockData) -> d
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:boolean isInvulnerableTo(net.minecraft.world.damagesource.DamageSource) -> b
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void blockUsingShield(net.minecraft.world.entity.EntityLiving) -> d
    M:boolean canHarmPlayer(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void hurtArmor(net.minecraft.world.damagesource.DamageSource,float) -> b
    M:void hurtHelmet(net.minecraft.world.damagesource.DamageSource,float) -> c
    M:void hurtCurrentlyUsedShield(float) -> q
    M:void actuallyHurt(net.minecraft.world.damagesource.DamageSource,float) -> f
    M:void openTextEdit(net.minecraft.world.level.block.entity.TileEntitySign) -> a
    M:void openMinecartCommandBlock(net.minecraft.world.level.CommandBlockListenerAbstract) -> a
    M:void openCommandBlock(net.minecraft.world.level.block.entity.TileEntityCommand) -> a
    M:void openStructureBlock(net.minecraft.world.level.block.entity.TileEntityStructure) -> a
    M:void openJigsawBlock(net.minecraft.world.level.block.entity.TileEntityJigsaw) -> a
    M:void openHorseInventory(net.minecraft.world.entity.animal.horse.EntityHorseAbstract,net.minecraft.world.IInventory) -> a
    M:java.util.OptionalInt openMenu(net.minecraft.world.ITileInventory) -> a
    M:void sendMerchantOffers(int,net.minecraft.world.item.trading.MerchantRecipeList,int,int,boolean,boolean) -> a
    M:void openItemGui(net.minecraft.world.item.ItemStack,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.world.EnumInteractionResult interactOn(net.minecraft.world.entity.Entity,net.minecraft.world.EnumHand) -> a
    M:double getMyRidingOffset() -> bt
    M:void removeVehicle() -> bx
    M:net.minecraft.world.phys.Vec3D maybeBackOffFromEdge(net.minecraft.world.phys.Vec3D,net.minecraft.world.entity.EnumMoveType) -> a
    M:boolean isAboveGround() -> t
    M:void attack(net.minecraft.world.entity.Entity) -> d
    M:void doAutoAttackOnTouch(net.minecraft.world.entity.EntityLiving) -> g
    M:void disableShield(boolean) -> r
    M:void crit(net.minecraft.world.entity.Entity) -> a
    M:void magicCrit(net.minecraft.world.entity.Entity) -> b
    M:void sweepAttack() -> fw
    M:void respawn() -> fx
    M:void remove(net.minecraft.world.entity.Entity$RemovalReason) -> a
    M:boolean isLocalPlayer() -> fy
    M:com.mojang.authlib.GameProfile getGameProfile() -> fz
    M:void updateTutorialInventoryAction(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.ClickAction) -> a
    M:com.mojang.datafixers.util.Either startSleepInBed(net.minecraft.core.BlockPosition) -> a
    M:void stopSleepInBed(boolean,boolean) -> a
    M:void stopSleeping() -> fl
    M:java.util.Optional findRespawnPositionAndUseSpawnBlock(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,float,boolean,boolean) -> a
    M:void displayClientMessage(net.minecraft.network.chat.IChatBaseComponent,boolean) -> a
    M:void awardStat(net.minecraft.resources.MinecraftKey) -> a
    M:void awardStat(net.minecraft.resources.MinecraftKey,int) -> a
    M:void awardStat(net.minecraft.stats.Statistic) -> b
    M:void awardStat(net.minecraft.stats.Statistic,int) -> a
    M:void resetStat(net.minecraft.stats.Statistic) -> a
    M:int awardRecipes(java.util.Collection) -> a
    M:void awardRecipesByKey(net.minecraft.resources.ResourceLocation[]) -> a
    M:int resetRecipes(java.util.Collection) -> b
    M:void travel(net.minecraft.world.phys.Vec3D) -> g
    M:boolean freeAt(net.minecraft.core.BlockPosition) -> f
    M:void checkMovementStatistics(double,double,double) -> q
    M:void checkRidingStatistics(double,double,double) -> r
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:void doWaterSplashEffect() -> bb
    M:net.minecraft.world.entity.LivingEntity$Fallsounds getFallSounds() -> eo
    M:boolean wasKilled(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityLiving) -> a
    M:void makeStuckInBlock(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.Vec3D) -> a
    M:void giveExperiencePoints(int) -> d
    M:void onEnchantmentPerformed(net.minecraft.world.item.ItemStack,int) -> a
    M:void giveExperienceLevels(int) -> c
    M:void causeFoodExhaustion(float) -> u
    M:boolean canEat(boolean) -> s
    M:boolean mayUseItemAt(net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.world.item.ItemStack) -> a
    M:boolean shouldShowName() -> cv
    M:void onUpdateAbilities() -> w
    M:net.minecraft.world.item.ItemStack getItemBySlot(net.minecraft.world.entity.EnumItemSlot) -> c
    M:boolean doesEmitEquipEvent(net.minecraft.world.entity.EnumItemSlot) -> a
    M:void setItemSlot(net.minecraft.world.entity.EnumItemSlot,net.minecraft.world.item.ItemStack) -> a
    M:boolean addItem(net.minecraft.world.item.ItemStack) -> j
    M:boolean setEntityOnShoulder(net.minecraft.nbt.NBTTagCompound) -> h
    M:void respawnEntityOnShoulder(net.minecraft.nbt.NBTTagCompound) -> k
    M:boolean isPushedByFluid() -> cs
    M:net.minecraft.network.chat.IChatMutableComponent decorateDisplayNameComponent(net.minecraft.network.chat.IChatMutableComponent) -> a
    M:java.lang.String getScoreboardName() -> cr
    M:float getStandingEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> b
    M:void setAbsorptionAmount(float) -> t
    M:boolean isModelPartShown(net.minecraft.world.entity.player.PlayerModelPart) -> a
    M:net.minecraft.world.entity.SlotAccess getSlot(int) -> k
    M:void setReducedDebugInfo(boolean) -> t
    M:void setRemainingFireTicks(int) -> g
    M:void setMainArm(net.minecraft.world.entity.EnumMainHand) -> a
    M:void setShoulderEntityLeft(net.minecraft.nbt.NBTTagCompound) -> i
    M:void setShoulderEntityRight(net.minecraft.nbt.NBTTagCompound) -> j
    M:float getAttackStrengthScale(float) -> v
    M:boolean canTakeItem(net.minecraft.world.item.ItemStack) -> g
    M:net.minecraft.world.entity.EntitySize getDimensions(net.minecraft.world.entity.EntityPose) -> a
    M:com.google.common.collect.ImmutableList getDismountPoses() -> fh
    M:net.minecraft.world.item.ItemStack getProjectile(net.minecraft.world.item.ItemStack) -> h
    M:net.minecraft.world.item.ItemStack eat(net.minecraft.world.level.World,net.minecraft.world.item.ItemStack) -> a
    M:boolean shouldRemoveSoulSpeed(net.minecraft.world.level.block.state.IBlockData) -> b
    M:net.minecraft.world.phys.Vec3D getRopeHoldPosition(float) -> n
    M:boolean isAlwaysTicking() -> dy
    M:boolean shouldBeSaved() -> dx
    M:java.util.Optional getLastDeathLocation() -> ga
    M:void setLastDeathLocation(java.util.Optional) -> a
net.minecraft.world.entity.player.Player$BedSleepingProblem -> btf$a -> net.minecraft.world.entity.player.EntityHuman$EnumBedResult
    F:net.minecraft.world.entity.player.EntityHuman$EnumBedResult NOT_POSSIBLE_HERE -> a
    F:net.minecraft.world.entity.player.EntityHuman$EnumBedResult NOT_POSSIBLE_NOW -> b
    F:net.minecraft.world.entity.player.EntityHuman$EnumBedResult TOO_FAR_AWAY -> c
    F:net.minecraft.world.entity.player.EntityHuman$EnumBedResult OBSTRUCTED -> d
    F:net.minecraft.world.entity.player.EntityHuman$EnumBedResult OTHER_PROBLEM -> e
    F:net.minecraft.world.entity.player.EntityHuman$EnumBedResult NOT_SAFE -> f
    F:net.minecraft.network.chat.IChatBaseComponent message -> g
    M:net.minecraft.network.chat.IChatBaseComponent getMessage() -> a
net.minecraft.world.entity.player.PlayerModelPart -> btg -> net.minecraft.world.entity.player.PlayerModelPart
    F:net.minecraft.world.entity.player.PlayerModelPart CAPE -> a
    F:net.minecraft.world.entity.player.PlayerModelPart JACKET -> b
    F:net.minecraft.world.entity.player.PlayerModelPart LEFT_SLEEVE -> c
    F:net.minecraft.world.entity.player.PlayerModelPart RIGHT_SLEEVE -> d
    F:net.minecraft.world.entity.player.PlayerModelPart LEFT_PANTS_LEG -> e
    F:net.minecraft.world.entity.player.PlayerModelPart RIGHT_PANTS_LEG -> f
    F:net.minecraft.world.entity.player.PlayerModelPart HAT -> g
    F:int bit -> h
    F:int mask -> i
    F:java.lang.String id -> j
    F:net.minecraft.network.chat.IChatBaseComponent name -> k
    M:int getMask() -> a
    M:int getBit() -> b
    M:java.lang.String getId() -> c
    M:net.minecraft.network.chat.IChatBaseComponent getName() -> d
net.minecraft.world.entity.player.ProfileKeyPair -> bth -> net.minecraft.world.entity.player.ProfileKeyPair
    F:java.security.PrivateKey privateKey -> b
    F:net.minecraft.world.entity.player.ProfilePublicKey publicKey -> c
    F:java.time.Instant refreshedAfter -> d
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean dueRefresh() -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.security.PrivateKey privateKey() -> b
    M:net.minecraft.world.entity.player.ProfilePublicKey publicKey() -> c
    M:java.time.Instant refreshedAfter() -> d
net.minecraft.world.entity.player.ProfilePublicKey -> bti -> net.minecraft.world.entity.player.ProfilePublicKey
    F:net.minecraft.world.entity.player.ProfilePublicKey$Data data -> b
    F:com.mojang.serialization.Codec TRUSTED_CODEC -> a
    M:net.minecraft.world.entity.player.ProfilePublicKey createTrusted(net.minecraft.world.entity.player.ProfilePublicKey$Data) -> a
    M:net.minecraft.world.entity.player.ProfilePublicKey createValidated(net.minecraft.util.SignatureValidator,net.minecraft.world.entity.player.ProfilePublicKey$Data) -> a
    M:net.minecraft.util.SignatureValidator createSignatureValidator() -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.entity.player.ProfilePublicKey$Data data() -> b
net.minecraft.world.entity.player.ProfilePublicKey$Data -> bti$a -> net.minecraft.world.entity.player.ProfilePublicKey$a
    F:java.time.Instant expiresAt -> b
    F:java.security.PublicKey key -> c
    F:int MAX_KEY_SIGNATURE_SIZE -> e
    F:com.mojang.serialization.Codec CODEC -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:boolean validateSignature(net.minecraft.util.SignatureValidator) -> a
    M:java.lang.String signedPayload() -> e
    M:boolean hasExpired() -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.time.Instant expiresAt() -> b
    M:java.security.PublicKey key() -> c
net.minecraft.world.entity.player.StackedContents -> btj -> net.minecraft.world.entity.player.AutoRecipeStackManager
    F:int EMPTY -> b
    F:it.unimi.dsi.fastutil.ints.Int2IntMap contents -> a
    M:void accountSimpleStack(net.minecraft.world.item.ItemStack) -> a
    M:void accountStack(net.minecraft.world.item.ItemStack) -> b
    M:void accountStack(net.minecraft.world.item.ItemStack,int) -> a
    M:int getStackingIndex(net.minecraft.world.item.ItemStack) -> c
    M:boolean has(int) -> b
    M:int take(int,int) -> a
    M:void put(int,int) -> b
    M:boolean canCraft(net.minecraft.world.item.crafting.IRecipe,it.unimi.dsi.fastutil.ints.IntList) -> a
    M:boolean canCraft(net.minecraft.world.item.crafting.IRecipe,it.unimi.dsi.fastutil.ints.IntList,int) -> a
    M:int getBiggestCraftableStack(net.minecraft.world.item.crafting.IRecipe,it.unimi.dsi.fastutil.ints.IntList) -> b
    M:int getBiggestCraftableStack(net.minecraft.world.item.crafting.IRecipe,int,it.unimi.dsi.fastutil.ints.IntList) -> a
    M:net.minecraft.world.item.ItemStack fromStackingIndex(int) -> a
    M:void clear() -> a
net.minecraft.world.entity.player.StackedContents$RecipePicker -> btj$a -> net.minecraft.world.entity.player.AutoRecipeStackManager$a
    F:net.minecraft.world.item.crafting.IRecipe recipe -> b
    F:java.util.List ingredients -> c
    F:int ingredientCount -> d
    F:int itemCount -> f
    F:java.util.BitSet data -> g
    F:it.unimi.dsi.fastutil.ints.IntList path -> h
    M:boolean tryPick(int,it.unimi.dsi.fastutil.ints.IntList) -> a
    M:boolean dfs(int) -> a
    M:boolean isSatisfied(int) -> b
    M:void setSatisfied(int) -> c
    M:int getSatisfiedIndex(int) -> d
    M:boolean hasConnection(boolean,int,int) -> a
    M:boolean hasResidual(boolean,int,int) -> b
    M:void toggleResidual(boolean,int,int) -> c
    M:int getIndex(boolean,int,int) -> d
    M:void visit(boolean,int) -> a
    M:boolean hasVisited(boolean,int) -> b
    M:int getVisitedIndex(boolean,int) -> c
    M:int tryPickAll(int,it.unimi.dsi.fastutil.ints.IntList) -> b
    M:int getMinIngredientCount() -> b
net.minecraft.world.entity.projectile.AbstractArrow -> btl -> net.minecraft.world.entity.projectile.EntityArrow
    F:double ARROW_BASE_DAMAGE -> f
    F:net.minecraft.network.syncher.DataWatcherObject ID_FLAGS -> ao
    F:net.minecraft.network.syncher.DataWatcherObject PIERCE_LEVEL -> ap
    F:int FLAG_CRIT -> aq
    F:int FLAG_NOPHYSICS -> ar
    F:int FLAG_CROSSBOW -> as
    F:net.minecraft.world.level.block.state.IBlockData lastState -> at
    F:boolean inGround -> b
    F:int inGroundTime -> c
    F:net.minecraft.world.entity.projectile.EntityArrow$PickupStatus pickup -> d
    F:int shakeTime -> e
    F:int life -> au
    F:double baseDamage -> av
    F:int knockback -> aw
    F:net.minecraft.sounds.SoundEffect soundEvent -> ax
    F:it.unimi.dsi.fastutil.ints.IntOpenHashSet piercingIgnoreEntityIds -> ay
    F:java.util.List piercedAndKilledEntities -> az
    M:void setSoundEvent(net.minecraft.sounds.SoundEffect) -> b
    M:boolean shouldRenderAtSqrDistance(double) -> a
    M:void shoot(double,double,double,float,float) -> c
    M:void lerpTo(double,double,double,float,float,int,boolean) -> a
    M:void lerpMotion(double,double,double) -> k
    M:void tick() -> k
    M:boolean shouldFall() -> w
    M:void move(net.minecraft.world.entity.EnumMoveType,net.minecraft.world.phys.Vec3D) -> a
    M:void tickDespawn() -> h
    M:void onHitEntity(net.minecraft.world.phys.MovingObjectPositionEntity) -> a
    M:void onHitBlock(net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.sounds.SoundEffect getDefaultHitGroundSoundEvent() -> i
    M:net.minecraft.sounds.SoundEffect getHitGroundSoundEvent() -> j
    M:void doPostHurtEffects(net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.phys.MovingObjectPositionEntity findHitEntity(net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D) -> a
    M:boolean canHitEntity(net.minecraft.world.entity.Entity) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void setOwner(net.minecraft.world.entity.Entity) -> b
    M:boolean tryPickup(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void setBaseDamage(double) -> h
    M:double getBaseDamage() -> n
    M:void setKnockback(int) -> a
    M:int getKnockback() -> o
    M:boolean isAttackable() -> ci
    M:float getEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> a
    M:void setCritArrow(boolean) -> a
    M:void setPierceLevel(byte) -> b
    M:void setFlag(int,boolean) -> a
    M:boolean isCritArrow() -> q
    M:boolean shotFromCrossbow() -> r
    M:byte getPierceLevel() -> s
    M:void setEnchantmentEffectsFromEntity(net.minecraft.world.entity.EntityLiving,float) -> a
    M:float getWaterInertia() -> t
    M:void setNoPhysics(boolean) -> p
    M:boolean isNoPhysics() -> u
    M:void setShotFromCrossbow(boolean) -> q
net.minecraft.world.entity.projectile.AbstractArrow$Pickup -> btl$a -> net.minecraft.world.entity.projectile.EntityArrow$PickupStatus
    F:net.minecraft.world.entity.projectile.EntityArrow$PickupStatus DISALLOWED -> a
    F:net.minecraft.world.entity.projectile.EntityArrow$PickupStatus ALLOWED -> b
    F:net.minecraft.world.entity.projectile.EntityArrow$PickupStatus CREATIVE_ONLY -> c
    M:net.minecraft.world.entity.projectile.EntityArrow$PickupStatus byOrdinal(int) -> a
net.minecraft.world.entity.projectile.AbstractHurtingProjectile -> btm -> net.minecraft.world.entity.projectile.EntityFireball
    F:double xPower -> b
    F:double yPower -> c
    F:double zPower -> d
    M:boolean shouldRenderAtSqrDistance(double) -> a
    M:void tick() -> k
    M:boolean canHitEntity(net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.core.particles.ParticleParam getTrailParticle() -> i
    M:float getInertia() -> j
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean isPickable() -> bl
    M:float getPickRadius() -> by
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:float getLightLevelDependentMagicValue() -> bh
    M:void recreateFromPacket(net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity) -> a
net.minecraft.world.entity.projectile.Arrow -> btn -> net.minecraft.world.entity.projectile.EntityTippedArrow
    F:int EXPOSED_POTION_DECAY_TIME -> f
    F:int NO_EFFECT_COLOR -> ao
    F:net.minecraft.network.syncher.DataWatcherObject ID_EFFECT_COLOR -> ap
    F:byte EVENT_POTION_PUFF -> aq
    F:net.minecraft.world.item.alchemy.PotionRegistry potion -> ar
    F:java.util.Set effects -> as
    F:boolean fixedColor -> at
    M:void setEffectsFromItem(net.minecraft.world.item.ItemStack) -> a
    M:int getCustomColor(net.minecraft.world.item.ItemStack) -> c
    M:void addEffect(net.minecraft.world.effect.MobEffect) -> a
    M:void tick() -> k
    M:void makeParticle(int) -> b
    M:int getColor() -> w
    M:void setFixedColor(int) -> c
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void doPostHurtEffects(net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.item.ItemStack getPickupItem() -> l
    M:void handleEntityEvent(byte) -> a
net.minecraft.world.entity.projectile.DragonFireball -> bto -> net.minecraft.world.entity.projectile.EntityDragonFireball
    F:float SPLASH_RANGE -> e
    M:void onHit(net.minecraft.world.phys.MovingObjectPosition) -> a
    M:boolean isPickable() -> bl
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:net.minecraft.core.particles.ParticleParam getTrailParticle() -> i
net.minecraft.world.entity.projectile.EvokerFangs -> btp -> net.minecraft.world.entity.projectile.EntityEvokerFangs
    F:int ATTACK_DURATION -> b
    F:int LIFE_OFFSET -> c
    F:int ATTACK_TRIGGER_TICKS -> d
    F:int warmupDelayTicks -> e
    F:boolean sentSpikeEvent -> f
    F:int lifeTicks -> ao
    F:boolean clientSideAttackStarted -> ap
    F:net.minecraft.world.entity.EntityLiving owner -> aq
    F:java.util.UUID ownerUUID -> ar
    M:void setOwner(net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.entity.EntityLiving getOwner() -> h
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void tick() -> k
    M:void dealDamageTo(net.minecraft.world.entity.EntityLiving) -> c
    M:void handleEntityEvent(byte) -> a
    M:float getAnimationProgress(float) -> a
net.minecraft.world.entity.projectile.EyeOfEnder -> btq -> net.minecraft.world.entity.projectile.EntityEnderSignal
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ITEM_STACK -> b
    F:double tx -> c
    F:double ty -> d
    F:double tz -> e
    F:int life -> f
    F:boolean surviveAfterDeath -> ao
    M:void setItem(net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack getItemRaw() -> i
    M:net.minecraft.world.item.ItemStack getItem() -> h
    M:boolean shouldRenderAtSqrDistance(double) -> a
    M:void signalTo(net.minecraft.core.BlockPosition) -> a
    M:void lerpMotion(double,double,double) -> k
    M:void tick() -> k
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:float getLightLevelDependentMagicValue() -> bh
    M:boolean isAttackable() -> ci
net.minecraft.world.entity.projectile.Fireball -> btr -> net.minecraft.world.entity.projectile.EntityFireballFireball
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ITEM_STACK -> e
    M:void setItem(net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack getItemRaw() -> l
    M:net.minecraft.world.item.ItemStack getItem() -> h
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.entity.projectile.FireworkRocketEntity -> bts -> net.minecraft.world.entity.projectile.EntityFireworks
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_FIREWORKS_ITEM -> b
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ATTACHED_TO_TARGET -> c
    F:net.minecraft.network.syncher.DataWatcherObject DATA_SHOT_AT_ANGLE -> d
    F:int life -> e
    F:int lifetime -> f
    F:net.minecraft.world.entity.EntityLiving attachedToEntity -> ao
    M:boolean shouldRenderAtSqrDistance(double) -> a
    M:boolean shouldRender(double,double,double) -> j
    M:void tick() -> k
    M:void explode() -> j
    M:void onHitEntity(net.minecraft.world.phys.MovingObjectPositionEntity) -> a
    M:void onHitBlock(net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:boolean hasExplosion() -> l
    M:void dealExplosionDamage() -> n
    M:boolean isAttachedToEntity() -> o
    M:boolean isShotAtAngle() -> i
    M:void handleEntityEvent(byte) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.item.ItemStack getItem() -> h
    M:boolean isAttackable() -> ci
net.minecraft.world.entity.projectile.FishingHook -> btt -> net.minecraft.world.entity.projectile.EntityFishingHook
    F:org.slf4j.Logger LOGGER -> b
    F:net.minecraft.util.RandomSource syncronizedRandom -> c
    F:boolean biting -> d
    F:int outOfWaterTime -> e
    F:int MAX_OUT_OF_WATER_TIME -> f
    F:net.minecraft.network.syncher.DataWatcherObject DATA_HOOKED_ENTITY -> ao
    F:net.minecraft.network.syncher.DataWatcherObject DATA_BITING -> ap
    F:int life -> aq
    F:int nibble -> ar
    F:int timeUntilLured -> as
    F:int timeUntilHooked -> at
    F:float fishAngle -> au
    F:boolean openWater -> av
    F:net.minecraft.world.entity.Entity hookedIn -> aw
    F:net.minecraft.world.entity.projectile.EntityFishingHook$HookState currentState -> ax
    F:int luck -> ay
    F:int lureSpeed -> az
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
    M:boolean shouldRenderAtSqrDistance(double) -> a
    M:void lerpTo(double,double,double,float,float,int,boolean) -> a
    M:void tick() -> k
    M:boolean shouldStopFishing(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void checkCollision() -> l
    M:boolean canHitEntity(net.minecraft.world.entity.Entity) -> a
    M:void onHitEntity(net.minecraft.world.phys.MovingObjectPositionEntity) -> a
    M:void onHitBlock(net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void setHookedEntity(net.minecraft.world.entity.Entity) -> x
    M:void catchingFish(net.minecraft.core.BlockPosition) -> a
    M:boolean calculateOpenWater(net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.entity.projectile.EntityFishingHook$WaterPosition getOpenWaterTypeForArea(net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.entity.projectile.EntityFishingHook$WaterPosition getOpenWaterTypeForBlock(net.minecraft.core.BlockPosition) -> c
    M:boolean isOpenWaterFishing() -> h
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:int retrieve(net.minecraft.world.item.ItemStack) -> a
    M:void handleEntityEvent(byte) -> a
    M:void pullEntity(net.minecraft.world.entity.Entity) -> c
    M:void remove(net.minecraft.world.entity.Entity$RemovalReason) -> a
    M:void onClientRemoval() -> aj
    M:void setOwner(net.minecraft.world.entity.Entity) -> b
    M:void updateOwnerInfo(net.minecraft.world.entity.projectile.EntityFishingHook) -> a
    M:net.minecraft.world.entity.player.EntityHuman getPlayerOwner() -> i
    M:net.minecraft.world.entity.Entity getHookedIn() -> j
    M:boolean canChangeDimensions() -> cl
    M:void recreateFromPacket(net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity) -> a
net.minecraft.world.entity.projectile.FishingHook$FishHookState -> btt$a -> net.minecraft.world.entity.projectile.EntityFishingHook$HookState
    F:net.minecraft.world.entity.projectile.EntityFishingHook$HookState FLYING -> a
    F:net.minecraft.world.entity.projectile.EntityFishingHook$HookState HOOKED_IN_ENTITY -> b
    F:net.minecraft.world.entity.projectile.EntityFishingHook$HookState BOBBING -> c
net.minecraft.world.entity.projectile.FishingHook$OpenWaterType -> btt$b -> net.minecraft.world.entity.projectile.EntityFishingHook$WaterPosition
    F:net.minecraft.world.entity.projectile.EntityFishingHook$WaterPosition ABOVE_WATER -> a
    F:net.minecraft.world.entity.projectile.EntityFishingHook$WaterPosition INSIDE_WATER -> b
    F:net.minecraft.world.entity.projectile.EntityFishingHook$WaterPosition INVALID -> c
net.minecraft.world.entity.projectile.ItemSupplier -> btu -> net.minecraft.world.entity.projectile.ItemSupplier
net.minecraft.world.entity.projectile.LargeFireball -> btv -> net.minecraft.world.entity.projectile.EntityLargeFireball
    F:int explosionPower -> e
    M:void onHit(net.minecraft.world.phys.MovingObjectPosition) -> a
    M:void onHitEntity(net.minecraft.world.phys.MovingObjectPositionEntity) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.entity.projectile.LlamaSpit -> btw -> net.minecraft.world.entity.projectile.EntityLlamaSpit
    M:void tick() -> k
    M:void onHitEntity(net.minecraft.world.phys.MovingObjectPositionEntity) -> a
    M:void onHitBlock(net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void recreateFromPacket(net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity) -> a
net.minecraft.world.entity.projectile.Projectile -> btx -> net.minecraft.world.entity.projectile.IProjectile
    F:java.util.UUID ownerUUID -> b
    F:net.minecraft.world.entity.Entity cachedOwner -> c
    F:boolean leftOwner -> d
    F:boolean hasBeenShot -> e
    M:void setOwner(net.minecraft.world.entity.Entity) -> b
    M:net.minecraft.world.entity.Entity getOwner() -> x
    M:net.minecraft.world.entity.Entity getEffectSource() -> y
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:boolean ownedBy(net.minecraft.world.entity.Entity) -> d
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void tick() -> k
    M:boolean checkLeftOwner() -> i
    M:void shoot(double,double,double,float,float) -> c
    M:void shootFromRotation(net.minecraft.world.entity.Entity,float,float,float,float,float) -> a
    M:void onHit(net.minecraft.world.phys.MovingObjectPosition) -> a
    M:void onHitEntity(net.minecraft.world.phys.MovingObjectPositionEntity) -> a
    M:void onHitBlock(net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void lerpMotion(double,double,double) -> k
    M:boolean canHitEntity(net.minecraft.world.entity.Entity) -> a
    M:void updateRotation() -> z
    M:float lerpRotation(float,float) -> d
    M:void recreateFromPacket(net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity) -> a
    M:boolean mayInteract(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.projectile.ProjectileUtil -> bty -> net.minecraft.world.entity.projectile.ProjectileHelper
    M:net.minecraft.world.phys.MovingObjectPosition getHitResult(net.minecraft.world.entity.Entity,java.util.function.Predicate) -> a
    M:net.minecraft.world.phys.MovingObjectPositionEntity getEntityHitResult(net.minecraft.world.entity.Entity,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.AxisAlignedBB,java.util.function.Predicate,double) -> a
    M:net.minecraft.world.phys.MovingObjectPositionEntity getEntityHitResult(net.minecraft.world.level.World,net.minecraft.world.entity.Entity,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.AxisAlignedBB,java.util.function.Predicate) -> a
    M:net.minecraft.world.phys.MovingObjectPositionEntity getEntityHitResult(net.minecraft.world.level.World,net.minecraft.world.entity.Entity,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.AxisAlignedBB,java.util.function.Predicate,float) -> a
    M:void rotateTowardsMovement(net.minecraft.world.entity.Entity,float) -> a
    M:net.minecraft.world.EnumHand getWeaponHoldingHand(net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.Item) -> a
    M:net.minecraft.world.entity.projectile.EntityArrow getMobArrow(net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack,float) -> a
net.minecraft.world.entity.projectile.ShulkerBullet -> btz -> net.minecraft.world.entity.projectile.EntityShulkerBullet
    F:double SPEED -> b
    F:net.minecraft.world.entity.Entity finalTarget -> c
    F:net.minecraft.core.EnumDirection currentMoveDirection -> d
    F:int flightSteps -> e
    F:double targetDeltaX -> f
    F:double targetDeltaY -> ao
    F:double targetDeltaZ -> ap
    F:java.util.UUID targetId -> aq
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.core.EnumDirection getMoveDirection() -> h
    M:void setMoveDirection(net.minecraft.core.EnumDirection) -> a
    M:void selectNextMoveDirection(net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:void checkDespawn() -> dn
    M:void tick() -> k
    M:boolean canHitEntity(net.minecraft.world.entity.Entity) -> a
    M:boolean shouldRenderAtSqrDistance(double) -> a
    M:float getLightLevelDependentMagicValue() -> bh
    M:void onHitEntity(net.minecraft.world.phys.MovingObjectPositionEntity) -> a
    M:void onHitBlock(net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void onHit(net.minecraft.world.phys.MovingObjectPosition) -> a
    M:boolean isPickable() -> bl
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void recreateFromPacket(net.minecraft.network.protocol.game.PacketPlayOutSpawnEntity) -> a
net.minecraft.world.entity.projectile.SmallFireball -> bua -> net.minecraft.world.entity.projectile.EntitySmallFireball
    M:void onHitEntity(net.minecraft.world.phys.MovingObjectPositionEntity) -> a
    M:void onHitBlock(net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void onHit(net.minecraft.world.phys.MovingObjectPosition) -> a
    M:boolean isPickable() -> bl
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
net.minecraft.world.entity.projectile.Snowball -> bub -> net.minecraft.world.entity.projectile.EntitySnowball
    M:net.minecraft.world.item.Item getDefaultItem() -> i
    M:net.minecraft.core.particles.ParticleParam getParticle() -> n
    M:void handleEntityEvent(byte) -> a
    M:void onHitEntity(net.minecraft.world.phys.MovingObjectPositionEntity) -> a
    M:void onHit(net.minecraft.world.phys.MovingObjectPosition) -> a
net.minecraft.world.entity.projectile.SpectralArrow -> buc -> net.minecraft.world.entity.projectile.EntitySpectralArrow
    F:int duration -> f
    M:void tick() -> k
    M:net.minecraft.world.item.ItemStack getPickupItem() -> l
    M:void doPostHurtEffects(net.minecraft.world.entity.EntityLiving) -> a
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
net.minecraft.world.entity.projectile.ThrowableItemProjectile -> bud -> net.minecraft.world.entity.projectile.EntityProjectileThrowable
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ITEM_STACK -> b
    M:void setItem(net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack getItemRaw() -> j
    M:net.minecraft.world.item.ItemStack getItem() -> h
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.entity.projectile.ThrowableProjectile -> bue -> net.minecraft.world.entity.projectile.EntityProjectile
    M:boolean shouldRenderAtSqrDistance(double) -> a
    M:void tick() -> k
    M:float getGravity() -> l
net.minecraft.world.entity.projectile.ThrownEgg -> buf -> net.minecraft.world.entity.projectile.EntityEgg
    M:void handleEntityEvent(byte) -> a
    M:void onHitEntity(net.minecraft.world.phys.MovingObjectPositionEntity) -> a
    M:void onHit(net.minecraft.world.phys.MovingObjectPosition) -> a
    M:net.minecraft.world.item.Item getDefaultItem() -> i
net.minecraft.world.entity.projectile.ThrownEnderpearl -> bug -> net.minecraft.world.entity.projectile.EntityEnderPearl
    M:net.minecraft.world.item.Item getDefaultItem() -> i
    M:void onHitEntity(net.minecraft.world.phys.MovingObjectPositionEntity) -> a
    M:void onHit(net.minecraft.world.phys.MovingObjectPosition) -> a
    M:void tick() -> k
    M:net.minecraft.world.entity.Entity changeDimension(net.minecraft.server.level.WorldServer) -> b
net.minecraft.world.entity.projectile.ThrownExperienceBottle -> buh -> net.minecraft.world.entity.projectile.EntityThrownExpBottle
    M:net.minecraft.world.item.Item getDefaultItem() -> i
    M:float getGravity() -> l
    M:void onHit(net.minecraft.world.phys.MovingObjectPosition) -> a
net.minecraft.world.entity.projectile.ThrownPotion -> bui -> net.minecraft.world.entity.projectile.EntityPotion
    F:double SPLASH_RANGE -> b
    F:double SPLASH_RANGE_SQ -> d
    F:java.util.function.Predicate WATER_SENSITIVE -> c
    M:net.minecraft.world.item.Item getDefaultItem() -> i
    M:float getGravity() -> l
    M:void onHitBlock(net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void onHit(net.minecraft.world.phys.MovingObjectPosition) -> a
    M:void applyWater() -> n
    M:void applySplash(java.util.List,net.minecraft.world.entity.Entity) -> a
    M:void makeAreaOfEffectCloud(net.minecraft.world.item.ItemStack,net.minecraft.world.item.alchemy.PotionRegistry) -> a
    M:boolean isLingering() -> o
    M:void dowseFire(net.minecraft.core.BlockPosition) -> a
net.minecraft.world.entity.projectile.ThrownTrident -> buj -> net.minecraft.world.entity.projectile.EntityThrownTrident
    F:net.minecraft.network.syncher.DataWatcherObject ID_LOYALTY -> ao
    F:net.minecraft.network.syncher.DataWatcherObject ID_FOIL -> ap
    F:net.minecraft.world.item.ItemStack tridentItem -> aq
    F:boolean dealtDamage -> ar
    F:int clientSideReturnTridentTickCount -> f
    M:void tick() -> k
    M:net.minecraft.world.item.ItemStack getPickupItem() -> l
    M:boolean isFoil() -> w
    M:net.minecraft.world.phys.MovingObjectPositionEntity findHitEntity(net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D) -> a
    M:void onHitEntity(net.minecraft.world.phys.MovingObjectPositionEntity) -> a
    M:boolean tryPickup(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.sounds.SoundEffect getDefaultHitGroundSoundEvent() -> i
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void tickDespawn() -> h
    M:float getWaterInertia() -> t
    M:boolean shouldRender(double,double,double) -> j
net.minecraft.world.entity.projectile.WitherSkull -> buk -> net.minecraft.world.entity.projectile.EntityWitherSkull
    F:net.minecraft.network.syncher.DataWatcherObject DATA_DANGEROUS -> e
    M:float getInertia() -> j
    M:float getBlockExplosionResistance(net.minecraft.world.level.Explosion,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.Fluid,float) -> a
    M:void onHitEntity(net.minecraft.world.phys.MovingObjectPositionEntity) -> a
    M:void onHit(net.minecraft.world.phys.MovingObjectPosition) -> a
    M:boolean isPickable() -> bl
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:boolean isDangerous() -> l
    M:void setDangerous(boolean) -> a
net.minecraft.world.entity.raid.Raid -> bum -> net.minecraft.world.entity.raid.Raid
    F:int SECTION_RADIUS_FOR_FINDING_NEW_VILLAGE_CENTER -> h
    F:int ATTEMPT_RAID_FARTHEST -> i
    F:int ATTEMPT_RAID_CLOSE -> j
    F:int ATTEMPT_RAID_INSIDE -> k
    F:int VILLAGE_SEARCH_RADIUS -> l
    F:int RAID_TIMEOUT_TICKS -> m
    F:int NUM_SPAWN_ATTEMPTS -> n
    F:java.lang.String OMINOUS_BANNER_PATTERN_NAME -> o
    F:java.lang.String RAIDERS_REMAINING -> p
    F:int VILLAGE_RADIUS_BUFFER -> a
    F:int POST_RAID_TICK_LIMIT -> q
    F:int DEFAULT_PRE_RAID_TICKS -> r
    F:int MAX_NO_ACTION_TIME -> b
    F:int MAX_CELEBRATION_TICKS -> c
    F:int OUTSIDE_RAID_BOUNDS_TIMEOUT -> s
    F:int TICKS_PER_DAY -> d
    F:int DEFAULT_MAX_BAD_OMEN_LEVEL -> e
    F:int LOW_MOB_THRESHOLD -> t
    F:net.minecraft.network.chat.IChatBaseComponent RAID_NAME_COMPONENT -> u
    F:net.minecraft.network.chat.IChatBaseComponent VICTORY -> v
    F:net.minecraft.network.chat.IChatBaseComponent DEFEAT -> w
    F:net.minecraft.network.chat.IChatBaseComponent RAID_BAR_VICTORY_COMPONENT -> x
    F:net.minecraft.network.chat.IChatBaseComponent RAID_BAR_DEFEAT_COMPONENT -> y
    F:int HERO_OF_THE_VILLAGE_DURATION -> z
    F:int VALID_RAID_RADIUS_SQR -> f
    F:int RAID_REMOVAL_THRESHOLD_SQR -> g
    M:boolean isOver() -> a
    M:boolean isBetweenWaves() -> b
    M:boolean hasFirstWaveSpawned() -> c
    M:boolean isStopped() -> d
    M:boolean isVictory() -> e
    M:boolean isLoss() -> f
    M:float getTotalHealth() -> g
    M:java.util.Set getAllRaiders() -> h
    M:net.minecraft.world.level.World getLevel() -> i
    M:boolean isStarted() -> j
    M:int getGroupsSpawned() -> k
    M:java.util.function.Predicate validPlayer() -> x
    M:void updatePlayers() -> y
    M:int getMaxBadOmenLevel() -> l
    M:int getBadOmenLevel() -> m
    M:void setBadOmenLevel(int) -> a
    M:void absorbBadOmen(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void stop() -> n
    M:void tick() -> o
    M:void moveRaidCenterToNearbyVillageSection() -> z
    M:java.util.Optional getValidSpawnPos(int) -> d
    M:void playSound(net.minecraft.core.BlockPosition) -> a
    M:void spawnGroup(net.minecraft.core.BlockPosition) -> b
    M:void joinRaid(int,net.minecraft.world.entity.raid.EntityRaider,net.minecraft.core.BlockPosition,boolean) -> a
    M:void updateBossbar() -> p
    M:float getHealthOfLivingRaiders() -> q
    M:int getTotalRaidersAlive() -> r
    M:void removeFromRaid(net.minecraft.world.entity.raid.EntityRaider,boolean) -> a
    M:net.minecraft.world.item.ItemStack getLeaderBannerInstance() -> s
    M:net.minecraft.world.entity.raid.EntityRaider getLeader(int) -> b
    M:net.minecraft.core.BlockPosition findRandomSpawnPos(int,int) -> a
    M:boolean addWaveMob(int,net.minecraft.world.entity.raid.EntityRaider) -> b
    M:boolean addWaveMob(int,net.minecraft.world.entity.raid.EntityRaider,boolean) -> a
    M:void setLeader(int,net.minecraft.world.entity.raid.EntityRaider) -> a
    M:void removeLeader(int) -> c
    M:net.minecraft.core.BlockPosition getCenter() -> t
    M:void setCenter(net.minecraft.core.BlockPosition) -> c
    M:int getId() -> u
    M:int getDefaultNumSpawns(net.minecraft.world.entity.raid.Raid$Wave,int,boolean) -> a
    M:int getPotentialBonusSpawns(net.minecraft.world.entity.raid.Raid$Wave,net.minecraft.util.RandomSource,int,net.minecraft.world.DifficultyDamageScaler,boolean) -> a
    M:boolean isActive() -> v
    M:net.minecraft.nbt.NBTTagCompound save(net.minecraft.nbt.NBTTagCompound) -> a
    M:int getNumGroups(net.minecraft.world.EnumDifficulty) -> a
    M:float getEnchantOdds() -> w
    M:void addHeroOfTheVillage(net.minecraft.world.entity.Entity) -> a
net.minecraft.world.entity.raid.Raid$RaidStatus -> bum$a -> net.minecraft.world.entity.raid.Raid$Status
    F:net.minecraft.world.entity.raid.Raid$Status ONGOING -> a
    F:net.minecraft.world.entity.raid.Raid$Status VICTORY -> b
    F:net.minecraft.world.entity.raid.Raid$Status LOSS -> c
    F:net.minecraft.world.entity.raid.Raid$Status STOPPED -> d
    M:net.minecraft.world.entity.raid.Raid$Status getByName(java.lang.String) -> a
    M:java.lang.String getName() -> a
net.minecraft.world.entity.raid.Raid$RaiderType -> bum$b -> net.minecraft.world.entity.raid.Raid$Wave
    F:net.minecraft.world.entity.raid.Raid$Wave VINDICATOR -> a
    F:net.minecraft.world.entity.raid.Raid$Wave EVOKER -> b
    F:net.minecraft.world.entity.raid.Raid$Wave PILLAGER -> c
    F:net.minecraft.world.entity.raid.Raid$Wave WITCH -> d
    F:net.minecraft.world.entity.raid.Raid$Wave RAVAGER -> e
    F:net.minecraft.world.entity.EntityTypes entityType -> g
net.minecraft.world.entity.raid.Raider -> bun -> net.minecraft.world.entity.raid.EntityRaider
    F:net.minecraft.network.syncher.DataWatcherObject IS_CELEBRATING -> c
    F:java.util.function.Predicate ALLOWED_ITEMS -> b
    F:net.minecraft.world.entity.raid.Raid raid -> d
    F:int wave -> e
    M:void registerGoals() -> u
    M:void setCanJoinRaid(boolean) -> y
    M:void die(net.minecraft.world.damagesource.DamageSource) -> a
    M:void setCurrentRaid(net.minecraft.world.entity.raid.Raid) -> a
    M:void setWave(int) -> a
    M:int getWave() -> ga
    M:boolean isCelebrating() -> gb
    M:void setCelebrating(boolean) -> z
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void pickUpItem(net.minecraft.world.entity.item.EntityItem) -> b
    M:boolean removeWhenFarAway(double) -> h
    M:int getTicksOutsideRaid() -> gc
    M:void setTicksOutsideRaid(int) -> b
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:net.minecraft.world.entity.GroupDataEntity finalizeSpawn(net.minecraft.world.level.WorldAccess,net.minecraft.world.DifficultyDamageScaler,net.minecraft.world.entity.EnumMobSpawn,net.minecraft.world.entity.GroupDataEntity,net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.entity.raid.Raider$HoldGroundAttackGoal -> bun$a -> net.minecraft.world.entity.raid.EntityRaider$a
    F:net.minecraft.world.entity.raid.EntityRaider mob -> c
    F:float hostileRadiusSqr -> d
    F:net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition shoutTargeting -> a
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.raid.Raider$ObtainRaidLeaderBannerGoal -> bun$b -> net.minecraft.world.entity.raid.EntityRaider$b
    F:net.minecraft.world.entity.raid.EntityRaider mob -> b
    M:boolean canUse() -> a
    M:void tick() -> e
net.minecraft.world.entity.raid.Raider$RaiderCelebration -> bun$c -> net.minecraft.world.entity.raid.EntityRaider$c
    F:net.minecraft.world.entity.raid.EntityRaider mob -> b
    M:boolean canUse() -> a
    M:void start() -> c
    M:void stop() -> d
    M:void tick() -> e
net.minecraft.world.entity.raid.Raider$RaiderMoveThroughVillageGoal -> bun$d -> net.minecraft.world.entity.raid.EntityRaider$d
    F:net.minecraft.world.entity.raid.EntityRaider raider -> a
    F:double speedModifier -> b
    F:net.minecraft.core.BlockPosition poiPos -> c
    F:java.util.List visited -> d
    F:int distanceToPoi -> e
    F:boolean stuck -> f
    M:boolean canUse() -> a
    M:boolean isValidRaid() -> h
    M:boolean hasSuitablePoi() -> i
    M:boolean canContinueToUse() -> b
    M:void stop() -> d
    M:void start() -> c
    M:void tick() -> e
    M:boolean hasNotVisited(net.minecraft.core.BlockPosition) -> a
    M:void updateVisited() -> k
net.minecraft.world.entity.raid.Raids -> buo -> net.minecraft.world.entity.raid.PersistentRaid
    F:java.lang.String RAID_FILE_ID -> a
    F:java.util.Map raidMap -> b
    F:net.minecraft.server.level.WorldServer level -> c
    F:int nextAvailableID -> d
    F:int tick -> e
    M:net.minecraft.world.entity.raid.Raid get(int) -> a
    M:void tick() -> a
    M:boolean canJoinRaid(net.minecraft.world.entity.raid.EntityRaider,net.minecraft.world.entity.raid.Raid) -> a
    M:net.minecraft.world.entity.raid.Raid createOrExtendRaid(net.minecraft.server.level.EntityPlayer) -> a
    M:net.minecraft.world.entity.raid.Raid getOrCreateRaid(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.entity.raid.PersistentRaid load(net.minecraft.server.level.WorldServer,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagCompound save(net.minecraft.nbt.NBTTagCompound) -> a
    M:java.lang.String getFileId(net.minecraft.core.Holder) -> a
    M:int getUniqueId() -> d
    M:net.minecraft.world.entity.raid.Raid getNearbyRaid(net.minecraft.core.BlockPosition,int) -> a
net.minecraft.world.entity.schedule.Activity -> buq -> net.minecraft.world.entity.schedule.Activity
    F:net.minecraft.world.entity.schedule.Activity CORE -> a
    F:net.minecraft.world.entity.schedule.Activity IDLE -> b
    F:net.minecraft.world.entity.schedule.Activity WORK -> c
    F:net.minecraft.world.entity.schedule.Activity PLAY -> d
    F:net.minecraft.world.entity.schedule.Activity REST -> e
    F:net.minecraft.world.entity.schedule.Activity MEET -> f
    F:net.minecraft.world.entity.schedule.Activity PANIC -> g
    F:net.minecraft.world.entity.schedule.Activity RAID -> h
    F:net.minecraft.world.entity.schedule.Activity PRE_RAID -> i
    F:net.minecraft.world.entity.schedule.Activity HIDE -> j
    F:net.minecraft.world.entity.schedule.Activity FIGHT -> k
    F:net.minecraft.world.entity.schedule.Activity CELEBRATE -> l
    F:net.minecraft.world.entity.schedule.Activity ADMIRE_ITEM -> m
    F:net.minecraft.world.entity.schedule.Activity AVOID -> n
    F:net.minecraft.world.entity.schedule.Activity RIDE -> o
    F:net.minecraft.world.entity.schedule.Activity PLAY_DEAD -> p
    F:net.minecraft.world.entity.schedule.Activity LONG_JUMP -> q
    F:net.minecraft.world.entity.schedule.Activity RAM -> r
    F:net.minecraft.world.entity.schedule.Activity TONGUE -> s
    F:net.minecraft.world.entity.schedule.Activity SWIM -> t
    F:net.minecraft.world.entity.schedule.Activity LAY_SPAWN -> u
    F:net.minecraft.world.entity.schedule.Activity SNIFF -> v
    F:net.minecraft.world.entity.schedule.Activity INVESTIGATE -> w
    F:net.minecraft.world.entity.schedule.Activity ROAR -> x
    F:net.minecraft.world.entity.schedule.Activity EMERGE -> y
    F:net.minecraft.world.entity.schedule.Activity DIG -> z
    M:java.lang.String getName() -> a
    M:net.minecraft.world.entity.schedule.Activity register(java.lang.String) -> a
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.world.entity.schedule.Keyframe -> bur -> net.minecraft.world.entity.schedule.ActivityFrame
    F:int timeStamp -> a
    F:float value -> b
    M:int getTimeStamp() -> a
    M:float getValue() -> b
net.minecraft.world.entity.schedule.Schedule -> bus -> net.minecraft.world.entity.schedule.Schedule
    F:int WORK_START_TIME -> a
    F:int TOTAL_WORK_TIME -> b
    F:net.minecraft.world.entity.schedule.Schedule EMPTY -> c
    F:net.minecraft.world.entity.schedule.Schedule SIMPLE -> d
    F:net.minecraft.world.entity.schedule.Schedule VILLAGER_BABY -> e
    F:net.minecraft.world.entity.schedule.Schedule VILLAGER_DEFAULT -> f
    F:java.util.Map timelines -> g
    M:net.minecraft.world.entity.schedule.ScheduleBuilder register(java.lang.String) -> a
    M:void ensureTimelineExistsFor(net.minecraft.world.entity.schedule.Activity) -> a
    M:net.minecraft.world.entity.schedule.ScheduleActivity getTimelineFor(net.minecraft.world.entity.schedule.Activity) -> b
    M:java.util.List getAllTimelinesExceptFor(net.minecraft.world.entity.schedule.Activity) -> c
    M:net.minecraft.world.entity.schedule.Activity getActivityAt(int) -> a
net.minecraft.world.entity.schedule.ScheduleBuilder -> but -> net.minecraft.world.entity.schedule.ScheduleBuilder
    F:net.minecraft.world.entity.schedule.Schedule schedule -> a
    F:java.util.List transitions -> b
    M:net.minecraft.world.entity.schedule.ScheduleBuilder changeActivityAt(int,net.minecraft.world.entity.schedule.Activity) -> a
    M:net.minecraft.world.entity.schedule.Schedule build() -> a
net.minecraft.world.entity.schedule.ScheduleBuilder$ActivityTransition -> but$a -> net.minecraft.world.entity.schedule.ScheduleBuilder$a
    F:int time -> a
    F:net.minecraft.world.entity.schedule.Activity activity -> b
    M:int getTime() -> a
    M:net.minecraft.world.entity.schedule.Activity getActivity() -> b
net.minecraft.world.entity.schedule.Timeline -> buu -> net.minecraft.world.entity.schedule.ScheduleActivity
    F:java.util.List keyframes -> a
    F:int previousIndex -> b
    M:com.google.common.collect.ImmutableList getKeyframes() -> a
    M:net.minecraft.world.entity.schedule.ScheduleActivity addKeyframe(int,float) -> a
    M:net.minecraft.world.entity.schedule.ScheduleActivity addKeyframes(java.util.Collection) -> a
    M:void sortAndDeduplicateKeyframes() -> b
    M:float getValueAt(int) -> a
net.minecraft.world.entity.vehicle.AbstractMinecart -> buw -> net.minecraft.world.entity.vehicle.EntityMinecartAbstract
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_HURT -> c
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_HURTDIR -> d
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_DAMAGE -> e
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_DISPLAY_BLOCK -> f
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_DISPLAY_OFFSET -> ao
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_CUSTOM_DISPLAY -> ap
    F:com.google.common.collect.ImmutableMap POSE_DISMOUNT_HEIGHTS -> aq
    F:float WATER_SLOWDOWN_FACTOR -> b
    F:boolean flipped -> ar
    F:java.util.Map EXITS -> as
    F:int lSteps -> at
    F:double lx -> au
    F:double ly -> av
    F:double lz -> aw
    F:double lyr -> ax
    F:double lxr -> ay
    F:double lxd -> az
    M:net.minecraft.world.entity.vehicle.EntityMinecartAbstract createMinecart(net.minecraft.world.level.World,double,double,double,net.minecraft.world.entity.vehicle.EntityMinecartAbstract$EnumMinecartType) -> a
    M:boolean canCollideWith(net.minecraft.world.entity.Entity) -> h
    M:boolean isPushable() -> bm
    M:net.minecraft.world.phys.Vec3D getRelativePortalPosition(net.minecraft.core.EnumDirection$EnumAxis,net.minecraft.BlockUtil$Rectangle) -> a
    M:double getPassengersRidingOffset() -> bu
    M:net.minecraft.world.phys.Vec3D getDismountLocationForPassenger(net.minecraft.world.entity.EntityLiving) -> b
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void destroy(net.minecraft.world.damagesource.DamageSource) -> a
    M:boolean isPickable() -> bl
    M:com.mojang.datafixers.util.Pair exits(net.minecraft.world.level.block.state.properties.BlockPropertyTrackPosition) -> a
    M:net.minecraft.core.EnumDirection getMotionDirection() -> cx
    M:void tick() -> k
    M:double getMaxSpeed() -> i
    M:void activateMinecart(int,int,int,boolean) -> a
    M:void comeOffTrack() -> j
    M:void moveAlongTrack(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> c
    M:boolean isRedstoneConductor(net.minecraft.core.BlockPosition) -> a
    M:void applyNaturalSlowdown() -> l
    M:net.minecraft.world.phys.Vec3D getPosOffs(double,double,double,double) -> a
    M:net.minecraft.world.phys.Vec3D getPos(double,double,double) -> p
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void push(net.minecraft.world.entity.Entity) -> g
    M:void lerpTo(double,double,double,float,float,int,boolean) -> a
    M:void lerpMotion(double,double,double) -> k
    M:void setDamage(float) -> a
    M:float getDamage() -> n
    M:void setHurtTime(int) -> c
    M:int getHurtTime() -> o
    M:void setHurtDir(int) -> d
    M:int getHurtDir() -> q
    M:net.minecraft.world.level.block.state.IBlockData getDisplayBlockState() -> s
    M:net.minecraft.world.level.block.state.IBlockData getDefaultDisplayBlockState() -> t
    M:int getDisplayOffset() -> u
    M:int getDefaultDisplayOffset() -> w
    M:void setDisplayBlockState(net.minecraft.world.level.block.state.IBlockData) -> b
    M:void setDisplayOffset(int) -> m
    M:boolean hasCustomDisplay() -> x
    M:void setCustomDisplay(boolean) -> a
    M:net.minecraft.world.item.ItemStack getPickResult() -> do
net.minecraft.world.entity.vehicle.AbstractMinecart$Type -> buw$a -> net.minecraft.world.entity.vehicle.EntityMinecartAbstract$EnumMinecartType
    F:net.minecraft.world.entity.vehicle.EntityMinecartAbstract$EnumMinecartType RIDEABLE -> a
    F:net.minecraft.world.entity.vehicle.EntityMinecartAbstract$EnumMinecartType CHEST -> b
    F:net.minecraft.world.entity.vehicle.EntityMinecartAbstract$EnumMinecartType FURNACE -> c
    F:net.minecraft.world.entity.vehicle.EntityMinecartAbstract$EnumMinecartType TNT -> d
    F:net.minecraft.world.entity.vehicle.EntityMinecartAbstract$EnumMinecartType SPAWNER -> e
    F:net.minecraft.world.entity.vehicle.EntityMinecartAbstract$EnumMinecartType HOPPER -> f
    F:net.minecraft.world.entity.vehicle.EntityMinecartAbstract$EnumMinecartType COMMAND_BLOCK -> g
net.minecraft.world.entity.vehicle.AbstractMinecartContainer -> bux -> net.minecraft.world.entity.vehicle.EntityMinecartContainer
    F:net.minecraft.core.NonNullList itemStacks -> c
    F:net.minecraft.resources.MinecraftKey lootTable -> d
    F:long lootTableSeed -> e
    M:void destroy(net.minecraft.world.damagesource.DamageSource) -> a
    M:net.minecraft.world.item.ItemStack getItem(int) -> a
    M:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    M:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    M:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.entity.SlotAccess getSlot(int) -> k
    M:void setChanged() -> e
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void remove(net.minecraft.world.entity.Entity$RemovalReason) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.EnumInteractionResult interact(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:void applyNaturalSlowdown() -> l
    M:void clearContent() -> a
    M:void setLootTable(net.minecraft.resources.MinecraftKey,long) -> a
    M:net.minecraft.resources.MinecraftKey getLootTable() -> y
    M:void setLootTable(net.minecraft.resources.MinecraftKey) -> a
    M:long getLootTableSeed() -> z
    M:void setLootTableSeed(long) -> a
net.minecraft.world.entity.vehicle.Boat -> buy -> net.minecraft.world.entity.vehicle.EntityBoat
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_HURT -> f
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_HURTDIR -> ao
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_DAMAGE -> ap
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_TYPE -> aq
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_PADDLE_LEFT -> ar
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_PADDLE_RIGHT -> as
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_BUBBLE_TIME -> at
    F:int PADDLE_LEFT -> b
    F:int PADDLE_RIGHT -> c
    F:int TIME_TO_EJECT -> au
    F:float PADDLE_SPEED -> av
    F:double PADDLE_SOUND_TIME -> d
    F:int BUBBLE_TIME -> e
    F:float invFriction -> ax
    F:float outOfControlTicks -> ay
    F:float deltaRotation -> az
    M:float getEyeHeight(net.minecraft.world.entity.EntityPose,net.minecraft.world.entity.EntitySize) -> a
    M:boolean canCollideWith(net.minecraft.world.entity.Entity) -> h
    M:boolean canVehicleCollide(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> a
    M:boolean canBeCollidedWith() -> br
    M:boolean isPushable() -> bm
    M:net.minecraft.world.phys.Vec3D getRelativePortalPosition(net.minecraft.core.EnumDirection$EnumAxis,net.minecraft.BlockUtil$Rectangle) -> a
    M:double getPassengersRidingOffset() -> bu
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void destroy(net.minecraft.world.damagesource.DamageSource) -> a
    M:void onAboveBubbleCol(boolean) -> k
    M:void push(net.minecraft.world.entity.Entity) -> g
    M:net.minecraft.world.item.Item getDropItem() -> h
    M:boolean isPickable() -> bl
    M:void lerpTo(double,double,double,float,float,int,boolean) -> a
    M:net.minecraft.core.EnumDirection getMotionDirection() -> cx
    M:void tick() -> k
    M:void tickBubbleColumn() -> u
    M:net.minecraft.sounds.SoundEffect getPaddleSound() -> i
    M:void tickLerp() -> w
    M:void setPaddleState(boolean,boolean) -> a
    M:float getRowingTime(int,float) -> a
    M:net.minecraft.world.entity.vehicle.EntityBoat$EnumStatus getStatus() -> x
    M:float getWaterLevelAbove() -> j
    M:float getGroundFriction() -> l
    M:boolean checkInWater() -> y
    M:net.minecraft.world.entity.vehicle.EntityBoat$EnumStatus isUnderwater() -> z
    M:float getSinglePassengerXOffset() -> n
    M:void positionRider(net.minecraft.world.entity.Entity) -> i
    M:net.minecraft.world.phys.Vec3D getDismountLocationForPassenger(net.minecraft.world.entity.EntityLiving) -> b
    M:void clampRotation(net.minecraft.world.entity.Entity) -> a
    M:void onPassengerTurned(net.minecraft.world.entity.Entity) -> j
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.EnumInteractionResult interact(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
    M:boolean getPaddleState(int) -> c
    M:void setDamage(float) -> a
    M:float getDamage() -> o
    M:void setHurtTime(int) -> d
    M:int getHurtTime() -> q
    M:void setBubbleTime(int) -> a
    M:float getBubbleAngle(float) -> b
    M:void setHurtDir(int) -> m
    M:int getHurtDir() -> r
    M:void setType(net.minecraft.world.entity.vehicle.EntityBoat$EnumBoatType) -> a
    M:net.minecraft.world.entity.vehicle.EntityBoat$EnumBoatType getBoatType() -> s
    M:boolean canAddPassenger(net.minecraft.world.entity.Entity) -> o
    M:int getMaxPassengers() -> t
    M:void setInput(boolean,boolean,boolean,boolean) -> a
    M:net.minecraft.world.item.ItemStack getPickResult() -> do
net.minecraft.world.entity.vehicle.Boat$Status -> buy$a -> net.minecraft.world.entity.vehicle.EntityBoat$EnumStatus
    F:net.minecraft.world.entity.vehicle.EntityBoat$EnumStatus IN_WATER -> a
    F:net.minecraft.world.entity.vehicle.EntityBoat$EnumStatus UNDER_WATER -> b
    F:net.minecraft.world.entity.vehicle.EntityBoat$EnumStatus UNDER_FLOWING_WATER -> c
    F:net.minecraft.world.entity.vehicle.EntityBoat$EnumStatus ON_LAND -> d
    F:net.minecraft.world.entity.vehicle.EntityBoat$EnumStatus IN_AIR -> e
net.minecraft.world.entity.vehicle.Boat$Type -> buy$b -> net.minecraft.world.entity.vehicle.EntityBoat$EnumBoatType
    F:net.minecraft.world.entity.vehicle.EntityBoat$EnumBoatType OAK -> a
    F:net.minecraft.world.entity.vehicle.EntityBoat$EnumBoatType SPRUCE -> b
    F:net.minecraft.world.entity.vehicle.EntityBoat$EnumBoatType BIRCH -> c
    F:net.minecraft.world.entity.vehicle.EntityBoat$EnumBoatType JUNGLE -> d
    F:net.minecraft.world.entity.vehicle.EntityBoat$EnumBoatType ACACIA -> e
    F:net.minecraft.world.entity.vehicle.EntityBoat$EnumBoatType DARK_OAK -> f
    F:net.minecraft.world.entity.vehicle.EntityBoat$EnumBoatType MANGROVE -> g
    F:java.lang.String name -> h
    F:net.minecraft.world.level.block.Block planks -> i
    M:java.lang.String getName() -> a
    M:net.minecraft.world.level.block.Block getPlanks() -> b
    M:net.minecraft.world.entity.vehicle.EntityBoat$EnumBoatType byId(int) -> a
    M:net.minecraft.world.entity.vehicle.EntityBoat$EnumBoatType byName(java.lang.String) -> a
net.minecraft.world.entity.vehicle.ChestBoat -> buz -> net.minecraft.world.entity.vehicle.ChestBoat
    F:int CONTAINER_SIZE -> f
    F:net.minecraft.core.NonNullList itemStacks -> ao
    F:net.minecraft.resources.MinecraftKey lootTable -> ap
    F:long lootTableSeed -> aq
    M:float getSinglePassengerXOffset() -> n
    M:int getMaxPassengers() -> t
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void destroy(net.minecraft.world.damagesource.DamageSource) -> a
    M:void remove(net.minecraft.world.entity.Entity$RemovalReason) -> a
    M:net.minecraft.world.EnumInteractionResult interact(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:void openCustomInventoryScreen(net.minecraft.world.entity.player.EntityHuman) -> b
    M:net.minecraft.world.item.Item getDropItem() -> h
    M:void clearContent() -> a
    M:int getContainerSize() -> b
    M:net.minecraft.world.item.ItemStack getItem(int) -> a
    M:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    M:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    M:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.entity.SlotAccess getSlot(int) -> k
    M:void setChanged() -> e
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void unpackLootTable(net.minecraft.world.entity.player.EntityHuman) -> d
    M:net.minecraft.resources.MinecraftKey getLootTable() -> y
    M:void setLootTable(net.minecraft.resources.MinecraftKey) -> a
    M:long getLootTableSeed() -> z
    M:void setLootTableSeed(long) -> a
net.minecraft.world.entity.vehicle.ContainerEntity -> bva -> net.minecraft.world.entity.vehicle.ContainerEntity
    M:boolean isEmpty() -> c
    M:void addChestVehicleSaveData(net.minecraft.nbt.NBTTagCompound) -> c
    M:void chestVehicleDestroyed(net.minecraft.world.damagesource.DamageSource,net.minecraft.world.level.World,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.EnumInteractionResult interactWithChestVehicle(java.util.function.BiConsumer,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void unpackChestVehicleLootTable(net.minecraft.world.entity.player.EntityHuman) -> e
    M:void clearChestVehicleContent() -> f
    M:boolean isChestVehicleEmpty() -> g
    M:net.minecraft.world.item.ItemStack removeChestVehicleItem(int,int) -> b
    M:void setChestVehicleItem(int,net.minecraft.world.item.ItemStack) -> c
    M:boolean isChestVehicleStillValid(net.minecraft.world.entity.player.EntityHuman) -> f
    M:net.minecraft.world.item.ItemStack get() -> a
    M:boolean set(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.entity.vehicle.DismountHelper -> bvb -> net.minecraft.world.entity.vehicle.DismountUtil
    M:boolean isBlockFloorValid(double) -> a
    M:boolean canDismountTo(net.minecraft.world.level.ICollisionAccess,net.minecraft.world.entity.EntityLiving,net.minecraft.world.phys.AxisAlignedBB) -> a
    M:boolean canDismountTo(net.minecraft.world.level.ICollisionAccess,net.minecraft.world.phys.Vec3D,net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityPose) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape nonClimbableShape(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:double findCeilingFrom(net.minecraft.core.BlockPosition,int,java.util.function.Function) -> a
    M:net.minecraft.world.phys.Vec3D findSafeDismountLocation(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.ICollisionAccess,net.minecraft.core.BlockPosition,boolean) -> a
net.minecraft.world.entity.vehicle.Minecart -> bvc -> net.minecraft.world.entity.vehicle.EntityMinecartRideable
    M:net.minecraft.world.EnumInteractionResult interact(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.world.item.Item getDropItem() -> h
    M:void activateMinecart(int,int,int,boolean) -> a
    M:net.minecraft.world.entity.vehicle.EntityMinecartAbstract$EnumMinecartType getMinecartType() -> r
net.minecraft.world.entity.vehicle.MinecartChest -> bvd -> net.minecraft.world.entity.vehicle.EntityMinecartChest
    M:net.minecraft.world.item.Item getDropItem() -> h
    M:int getContainerSize() -> b
    M:net.minecraft.world.entity.vehicle.EntityMinecartAbstract$EnumMinecartType getMinecartType() -> r
    M:net.minecraft.world.level.block.state.IBlockData getDefaultDisplayBlockState() -> t
    M:int getDefaultDisplayOffset() -> w
    M:net.minecraft.world.inventory.Container createMenu(int,net.minecraft.world.entity.player.PlayerInventory) -> a
net.minecraft.world.entity.vehicle.MinecartCommandBlock -> bve -> net.minecraft.world.entity.vehicle.EntityMinecartCommandBlock
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_COMMAND_NAME -> c
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_LAST_OUTPUT -> d
    F:net.minecraft.world.level.CommandBlockListenerAbstract commandBlock -> e
    F:int ACTIVATION_DELAY -> f
    F:int lastActivated -> ao
    M:net.minecraft.world.item.Item getDropItem() -> h
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.world.entity.vehicle.EntityMinecartAbstract$EnumMinecartType getMinecartType() -> r
    M:net.minecraft.world.level.block.state.IBlockData getDefaultDisplayBlockState() -> t
    M:net.minecraft.world.level.CommandBlockListenerAbstract getCommandBlock() -> y
    M:void activateMinecart(int,int,int,boolean) -> a
    M:net.minecraft.world.EnumInteractionResult interact(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:void onSyncedDataUpdated(net.minecraft.network.syncher.DataWatcherObject) -> a
net.minecraft.world.entity.vehicle.MinecartCommandBlock$MinecartCommandBase -> bve$a -> net.minecraft.world.entity.vehicle.EntityMinecartCommandBlock$a
    M:net.minecraft.server.level.WorldServer getLevel() -> e
    M:void onUpdated() -> f
    M:net.minecraft.world.phys.Vec3D getPosition() -> g
    M:net.minecraft.world.entity.vehicle.EntityMinecartCommandBlock getMinecart() -> h
    M:net.minecraft.commands.CommandListenerWrapper createCommandSourceStack() -> i
net.minecraft.world.entity.vehicle.MinecartFurnace -> bvf -> net.minecraft.world.entity.vehicle.EntityMinecartFurnace
    F:net.minecraft.network.syncher.DataWatcherObject DATA_ID_FUEL -> e
    F:int fuel -> f
    F:double xPush -> c
    F:double zPush -> d
    F:net.minecraft.world.item.crafting.RecipeItemStack INGREDIENT -> ao
    M:net.minecraft.world.entity.vehicle.EntityMinecartAbstract$EnumMinecartType getMinecartType() -> r
    M:void tick() -> k
    M:double getMaxSpeed() -> i
    M:net.minecraft.world.item.Item getDropItem() -> h
    M:void moveAlongTrack(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> c
    M:void applyNaturalSlowdown() -> l
    M:net.minecraft.world.EnumInteractionResult interact(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean hasFuel() -> y
    M:void setHasFuel(boolean) -> p
    M:net.minecraft.world.level.block.state.IBlockData getDefaultDisplayBlockState() -> t
net.minecraft.world.entity.vehicle.MinecartHopper -> bvg -> net.minecraft.world.entity.vehicle.EntityMinecartHopper
    F:int MOVE_ITEM_SPEED -> c
    F:boolean enabled -> f
    F:int cooldownTime -> ao
    F:net.minecraft.core.BlockPosition lastPosition -> ap
    M:net.minecraft.world.entity.vehicle.EntityMinecartAbstract$EnumMinecartType getMinecartType() -> r
    M:net.minecraft.world.level.block.state.IBlockData getDefaultDisplayBlockState() -> t
    M:int getDefaultDisplayOffset() -> w
    M:int getContainerSize() -> b
    M:void activateMinecart(int,int,int,boolean) -> a
    M:void setEnabled(boolean) -> p
    M:void tick() -> k
    M:net.minecraft.world.item.Item getDropItem() -> h
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void setCooldown(int) -> n
    M:net.minecraft.world.inventory.Container createMenu(int,net.minecraft.world.entity.player.PlayerInventory) -> a
net.minecraft.world.entity.vehicle.MinecartSpawner -> bvh -> net.minecraft.world.entity.vehicle.EntityMinecartMobSpawner
    F:net.minecraft.world.level.MobSpawnerAbstract spawner -> c
    F:java.lang.Runnable ticker -> d
    M:net.minecraft.world.item.Item getDropItem() -> h
    M:java.lang.Runnable createTicker(net.minecraft.world.level.World) -> a
    M:net.minecraft.world.entity.vehicle.EntityMinecartAbstract$EnumMinecartType getMinecartType() -> r
    M:net.minecraft.world.level.block.state.IBlockData getDefaultDisplayBlockState() -> t
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:void handleEntityEvent(byte) -> a
    M:void tick() -> k
    M:net.minecraft.world.level.MobSpawnerAbstract getSpawner() -> y
    M:void broadcastEvent(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,int) -> a
net.minecraft.world.entity.vehicle.MinecartTNT -> bvi -> net.minecraft.world.entity.vehicle.EntityMinecartTNT
    F:byte EVENT_PRIME -> c
    F:int fuse -> d
    M:net.minecraft.world.entity.vehicle.EntityMinecartAbstract$EnumMinecartType getMinecartType() -> r
    M:net.minecraft.world.level.block.state.IBlockData getDefaultDisplayBlockState() -> t
    M:void tick() -> k
    M:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    M:void destroy(net.minecraft.world.damagesource.DamageSource) -> a
    M:net.minecraft.world.item.Item getDropItem() -> h
    M:void explode(double) -> h
    M:boolean causeFallDamage(float,float,net.minecraft.world.damagesource.DamageSource) -> a
    M:void activateMinecart(int,int,int,boolean) -> a
    M:void handleEntityEvent(byte) -> a
    M:void primeFuse() -> y
    M:int getFuse() -> z
    M:float getBlockExplosionResistance(net.minecraft.world.level.Explosion,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.Fluid,float) -> a
    M:boolean shouldBlockExplode(net.minecraft.world.level.Explosion,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,float) -> a
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
net.minecraft.world.food.FoodConstants -> bvk -> net.minecraft.world.food.FoodConstants
    F:int MAX_FOOD -> a
    F:float MAX_SATURATION -> b
    F:float START_SATURATION -> c
    F:float SATURATION_FLOOR -> d
    F:float EXHAUSTION_DROP -> e
    F:int HEALTH_TICK_COUNT -> f
    F:int HEALTH_TICK_COUNT_SATURATED -> g
    F:int HEAL_LEVEL -> h
    F:int SPRINT_LEVEL -> i
    F:int STARVE_LEVEL -> j
    F:float FOOD_SATURATION_POOR -> k
    F:float FOOD_SATURATION_LOW -> l
    F:float FOOD_SATURATION_NORMAL -> m
    F:float FOOD_SATURATION_GOOD -> n
    F:float FOOD_SATURATION_MAX -> o
    F:float FOOD_SATURATION_SUPERNATURAL -> p
    F:float EXHAUSTION_HEAL -> q
    F:float EXHAUSTION_JUMP -> r
    F:float EXHAUSTION_SPRINT_JUMP -> s
    F:float EXHAUSTION_MINE -> t
    F:float EXHAUSTION_ATTACK -> u
    F:float EXHAUSTION_DAMAGE -> v
    F:float EXHAUSTION_WALK -> w
    F:float EXHAUSTION_CROUCH -> x
    F:float EXHAUSTION_SPRINT -> y
    F:float EXHAUSTION_SWIM -> z
net.minecraft.world.food.FoodData -> bvl -> net.minecraft.world.food.FoodMetaData
    F:int foodLevel -> a
    F:float saturationLevel -> b
    F:float exhaustionLevel -> c
    F:int tickTimer -> d
    F:int lastFoodLevel -> e
    M:void eat(int,float) -> a
    M:void eat(net.minecraft.world.item.Item,net.minecraft.world.item.ItemStack) -> a
    M:void tick(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void readAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addAdditionalSaveData(net.minecraft.nbt.NBTTagCompound) -> b
    M:int getFoodLevel() -> a
    M:int getLastFoodLevel() -> b
    M:boolean needsFood() -> c
    M:void addExhaustion(float) -> a
    M:float getExhaustionLevel() -> d
    M:float getSaturationLevel() -> e
    M:void setFoodLevel(int) -> a
    M:void setSaturation(float) -> b
    M:void setExhaustion(float) -> c
net.minecraft.world.food.FoodProperties -> bvm -> net.minecraft.world.food.FoodInfo
    F:int nutrition -> a
    F:float saturationModifier -> b
    F:boolean isMeat -> c
    F:boolean canAlwaysEat -> d
    F:boolean fastFood -> e
    F:java.util.List effects -> f
    M:int getNutrition() -> a
    M:float getSaturationModifier() -> b
    M:boolean isMeat() -> c
    M:boolean canAlwaysEat() -> d
    M:boolean isFastFood() -> e
    M:java.util.List getEffects() -> f
net.minecraft.world.food.FoodProperties$Builder -> bvm$a -> net.minecraft.world.food.FoodInfo$a
    F:int nutrition -> a
    F:float saturationModifier -> b
    F:boolean isMeat -> c
    F:boolean canAlwaysEat -> d
    F:boolean fastFood -> e
    F:java.util.List effects -> f
    M:net.minecraft.world.food.FoodProperties$Builder nutrition(int) -> a
    M:net.minecraft.world.food.FoodProperties$Builder saturationMod(float) -> a
    M:net.minecraft.world.food.FoodProperties$Builder meat() -> a
    M:net.minecraft.world.food.FoodProperties$Builder alwaysEat() -> b
    M:net.minecraft.world.food.FoodProperties$Builder fast() -> c
    M:net.minecraft.world.food.FoodProperties$Builder effect(net.minecraft.world.effect.MobEffect,float) -> a
    M:net.minecraft.world.food.FoodInfo build() -> d
net.minecraft.world.food.Foods -> bvn -> net.minecraft.world.food.Foods
    F:net.minecraft.world.food.FoodInfo APPLE -> a
    F:net.minecraft.world.food.FoodInfo BAKED_POTATO -> b
    F:net.minecraft.world.food.FoodInfo BEEF -> c
    F:net.minecraft.world.food.FoodInfo BEETROOT -> d
    F:net.minecraft.world.food.FoodInfo BEETROOT_SOUP -> e
    F:net.minecraft.world.food.FoodInfo BREAD -> f
    F:net.minecraft.world.food.FoodInfo CARROT -> g
    F:net.minecraft.world.food.FoodInfo CHICKEN -> h
    F:net.minecraft.world.food.FoodInfo CHORUS_FRUIT -> i
    F:net.minecraft.world.food.FoodInfo COD -> j
    F:net.minecraft.world.food.FoodInfo COOKED_BEEF -> k
    F:net.minecraft.world.food.FoodInfo COOKED_CHICKEN -> l
    F:net.minecraft.world.food.FoodInfo COOKED_COD -> m
    F:net.minecraft.world.food.FoodInfo COOKED_MUTTON -> n
    F:net.minecraft.world.food.FoodInfo COOKED_PORKCHOP -> o
    F:net.minecraft.world.food.FoodInfo COOKED_RABBIT -> p
    F:net.minecraft.world.food.FoodInfo COOKED_SALMON -> q
    F:net.minecraft.world.food.FoodInfo COOKIE -> r
    F:net.minecraft.world.food.FoodInfo DRIED_KELP -> s
    F:net.minecraft.world.food.FoodInfo ENCHANTED_GOLDEN_APPLE -> t
    F:net.minecraft.world.food.FoodInfo GOLDEN_APPLE -> u
    F:net.minecraft.world.food.FoodInfo GOLDEN_CARROT -> v
    F:net.minecraft.world.food.FoodInfo HONEY_BOTTLE -> w
    F:net.minecraft.world.food.FoodInfo MELON_SLICE -> x
    F:net.minecraft.world.food.FoodInfo MUSHROOM_STEW -> y
    F:net.minecraft.world.food.FoodInfo MUTTON -> z
    M:net.minecraft.world.food.FoodProperties$Builder stew(int) -> a
net.minecraft.world.inventory.AbstractContainerMenu -> bvp -> net.minecraft.world.inventory.Container
    F:org.slf4j.Logger LOGGER -> k
    F:int SLOT_CLICKED_OUTSIDE -> a
    F:int QUICKCRAFT_TYPE_CHARITABLE -> b
    F:int QUICKCRAFT_TYPE_GREEDY -> c
    F:int QUICKCRAFT_TYPE_CLONE -> d
    F:int QUICKCRAFT_HEADER_START -> e
    F:int QUICKCRAFT_HEADER_CONTINUE -> f
    F:int QUICKCRAFT_HEADER_END -> g
    F:int CARRIED_SLOT_SIZE -> h
    F:net.minecraft.core.NonNullList lastSlots -> l
    F:net.minecraft.core.NonNullList slots -> i
    F:java.util.List dataSlots -> m
    F:net.minecraft.world.item.ItemStack carried -> n
    F:net.minecraft.core.NonNullList remoteSlots -> o
    F:it.unimi.dsi.fastutil.ints.IntList remoteDataSlots -> p
    F:net.minecraft.world.item.ItemStack remoteCarried -> q
    F:int stateId -> r
    F:net.minecraft.world.inventory.Containers menuType -> s
    F:int containerId -> j
    F:int quickcraftType -> t
    F:int quickcraftStatus -> u
    F:java.util.Set quickcraftSlots -> v
    F:java.util.List containerListeners -> w
    F:net.minecraft.world.inventory.ContainerSynchronizer synchronizer -> x
    F:boolean suppressRemoteUpdates -> y
    M:boolean stillValid(net.minecraft.world.inventory.ContainerAccess,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.world.inventory.Containers getType() -> a
    M:void checkContainerSize(net.minecraft.world.IInventory,int) -> a
    M:void checkContainerDataCount(net.minecraft.world.inventory.IContainerProperties,int) -> a
    M:boolean isValidSlotIndex(int) -> a
    M:net.minecraft.world.inventory.Slot addSlot(net.minecraft.world.inventory.Slot) -> a
    M:net.minecraft.world.inventory.ContainerProperty addDataSlot(net.minecraft.world.inventory.ContainerProperty) -> a
    M:void addDataSlots(net.minecraft.world.inventory.IContainerProperties) -> a
    M:void addSlotListener(net.minecraft.world.inventory.ICrafting) -> a
    M:void setSynchronizer(net.minecraft.world.inventory.ContainerSynchronizer) -> a
    M:void sendAllDataToRemote() -> b
    M:void removeSlotListener(net.minecraft.world.inventory.ICrafting) -> b
    M:net.minecraft.core.NonNullList getItems() -> c
    M:void broadcastChanges() -> d
    M:void broadcastFullState() -> e
    M:void updateDataSlotListeners(int,int) -> c
    M:void triggerSlotListeners(int,net.minecraft.world.item.ItemStack,java.util.function.Supplier) -> a
    M:void synchronizeSlotToRemote(int,net.minecraft.world.item.ItemStack,java.util.function.Supplier) -> b
    M:void synchronizeDataSlotToRemote(int,int) -> d
    M:void synchronizeCarriedToRemote() -> l
    M:void setRemoteSlot(int,net.minecraft.world.item.ItemStack) -> a
    M:void setRemoteSlotNoCopy(int,net.minecraft.world.item.ItemStack) -> b
    M:void setRemoteCarried(net.minecraft.world.item.ItemStack) -> a
    M:boolean clickMenuButton(net.minecraft.world.entity.player.EntityHuman,int) -> b
    M:net.minecraft.world.inventory.Slot getSlot(int) -> b
    M:void clicked(int,int,net.minecraft.world.inventory.InventoryClickType,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void doClick(int,int,net.minecraft.world.inventory.InventoryClickType,net.minecraft.world.entity.player.EntityHuman) -> b
    M:net.minecraft.world.entity.SlotAccess createCarriedSlotAccess() -> m
    M:boolean canTakeItemForPickAll(net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot) -> a
    M:void removed(net.minecraft.world.entity.player.EntityHuman) -> b
    M:void clearContainer(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.IInventory) -> a
    M:void slotsChanged(net.minecraft.world.IInventory) -> a
    M:void setItem(int,int,net.minecraft.world.item.ItemStack) -> a
    M:void initializeContents(int,java.util.List,net.minecraft.world.item.ItemStack) -> a
    M:void setData(int,int) -> a
    M:boolean moveItemStackTo(net.minecraft.world.item.ItemStack,int,int,boolean) -> a
    M:int getQuickcraftType(int) -> c
    M:int getQuickcraftHeader(int) -> d
    M:int getQuickcraftMask(int,int) -> b
    M:boolean isValidQuickcraftType(int,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void resetQuickCraft() -> f
    M:boolean canItemQuickReplace(net.minecraft.world.inventory.Slot,net.minecraft.world.item.ItemStack,boolean) -> a
    M:void getQuickCraftSlotCount(java.util.Set,int,net.minecraft.world.item.ItemStack,int) -> a
    M:boolean canDragTo(net.minecraft.world.inventory.Slot) -> b
    M:int getRedstoneSignalFromBlockEntity(net.minecraft.world.level.block.entity.TileEntity) -> a
    M:int getRedstoneSignalFromContainer(net.minecraft.world.IInventory) -> b
    M:void setCarried(net.minecraft.world.item.ItemStack) -> b
    M:net.minecraft.world.item.ItemStack getCarried() -> g
    M:void suppressRemoteUpdates() -> h
    M:void resumeRemoteUpdates() -> i
    M:void transferState(net.minecraft.world.inventory.Container) -> a
    M:java.util.OptionalInt findSlot(net.minecraft.world.IInventory,int) -> b
    M:int getStateId() -> j
    M:int incrementStateId() -> k
    M:net.minecraft.world.item.ItemStack get() -> a
    M:boolean set(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.AbstractFurnaceMenu -> bvq -> net.minecraft.world.inventory.ContainerFurnace
    F:int INGREDIENT_SLOT -> k
    F:int FUEL_SLOT -> l
    F:int RESULT_SLOT -> m
    F:int SLOT_COUNT -> n
    F:int DATA_COUNT -> o
    F:int INV_SLOT_START -> q
    F:int INV_SLOT_END -> r
    F:int USE_ROW_SLOT_START -> s
    F:int USE_ROW_SLOT_END -> t
    F:net.minecraft.world.IInventory container -> u
    F:net.minecraft.world.inventory.IContainerProperties data -> v
    F:net.minecraft.world.level.World level -> p
    F:net.minecraft.world.item.crafting.Recipes recipeType -> w
    F:net.minecraft.world.inventory.RecipeBookType recipeBookType -> x
    M:void fillCraftSlotsStackedContents(net.minecraft.world.entity.player.AutoRecipeStackManager) -> a
    M:void clearCraftingContent() -> l
    M:boolean recipeMatches(net.minecraft.world.item.crafting.IRecipe) -> a
    M:int getResultSlotIndex() -> m
    M:int getGridWidth() -> n
    M:int getGridHeight() -> o
    M:int getSize() -> p
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:boolean canSmelt(net.minecraft.world.item.ItemStack) -> c
    M:boolean isFuel(net.minecraft.world.item.ItemStack) -> d
    M:int getBurnProgress() -> q
    M:int getLitProgress() -> r
    M:boolean isLit() -> s
    M:net.minecraft.world.inventory.RecipeBookType getRecipeBookType() -> t
    M:boolean shouldMoveToInventory(int) -> e
net.minecraft.world.inventory.AnvilMenu -> bvr -> net.minecraft.world.inventory.ContainerAnvil
    F:org.slf4j.Logger LOGGER -> s
    F:boolean DEBUG_COST -> t
    F:int MAX_NAME_LENGTH -> k
    F:int repairItemCountCost -> u
    F:java.lang.String itemName -> v
    F:net.minecraft.world.inventory.ContainerProperty cost -> w
    F:int COST_FAIL -> x
    F:int COST_BASE -> y
    F:int COST_ADDED_BASE -> z
    M:boolean isValidBlock(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean mayPickup(net.minecraft.world.entity.player.EntityHuman,boolean) -> a
    M:void onTake(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> a
    M:void createResult() -> l
    M:int calculateIncreasedRepairCost(int) -> e
    M:void setItemName(java.lang.String) -> a
    M:int getCost() -> m
net.minecraft.world.inventory.BeaconMenu -> bvs -> net.minecraft.world.inventory.ContainerBeacon
    F:int PAYMENT_SLOT -> k
    F:int SLOT_COUNT -> l
    F:int DATA_COUNT -> m
    F:int INV_SLOT_START -> n
    F:int INV_SLOT_END -> o
    F:int USE_ROW_SLOT_START -> p
    F:int USE_ROW_SLOT_END -> q
    F:net.minecraft.world.IInventory beacon -> r
    F:net.minecraft.world.inventory.ContainerBeacon$SlotBeacon paymentSlot -> s
    F:net.minecraft.world.inventory.ContainerAccess access -> t
    F:net.minecraft.world.inventory.IContainerProperties beaconData -> u
    M:void removed(net.minecraft.world.entity.player.EntityHuman) -> b
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void setData(int,int) -> a
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:int getLevels() -> l
    M:net.minecraft.world.effect.MobEffectList getPrimaryEffect() -> m
    M:net.minecraft.world.effect.MobEffectList getSecondaryEffect() -> n
    M:void updateEffects(java.util.Optional,java.util.Optional) -> a
    M:boolean hasPayment() -> o
    M:boolean canPlaceItem(int,net.minecraft.world.item.ItemStack) -> b
net.minecraft.world.inventory.BeaconMenu$PaymentSlot -> bvs$a -> net.minecraft.world.inventory.ContainerBeacon$SlotBeacon
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:int getMaxStackSize() -> a
net.minecraft.world.inventory.BlastFurnaceMenu -> bvt -> net.minecraft.world.inventory.ContainerBlastFurnace
net.minecraft.world.inventory.BrewingStandMenu -> bvu -> net.minecraft.world.inventory.ContainerBrewingStand
    F:int BOTTLE_SLOT_START -> k
    F:int BOTTLE_SLOT_END -> l
    F:int INGREDIENT_SLOT -> m
    F:int FUEL_SLOT -> n
    F:int SLOT_COUNT -> o
    F:int DATA_COUNT -> p
    F:int INV_SLOT_START -> q
    F:int INV_SLOT_END -> r
    F:int USE_ROW_SLOT_START -> s
    F:int USE_ROW_SLOT_END -> t
    F:net.minecraft.world.IInventory brewingStand -> u
    F:net.minecraft.world.inventory.IContainerProperties brewingStandData -> v
    F:net.minecraft.world.inventory.Slot ingredientSlot -> w
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:int getFuel() -> l
    M:int getBrewingTicks() -> m
net.minecraft.world.inventory.BrewingStandMenu$FuelSlot -> bvu$a -> net.minecraft.world.inventory.ContainerBrewingStand$a
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:boolean mayPlaceItem(net.minecraft.world.item.ItemStack) -> b
    M:int getMaxStackSize() -> a
net.minecraft.world.inventory.BrewingStandMenu$IngredientsSlot -> bvu$b -> net.minecraft.world.inventory.ContainerBrewingStand$SlotBrewing
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:int getMaxStackSize() -> a
net.minecraft.world.inventory.BrewingStandMenu$PotionSlot -> bvu$c -> net.minecraft.world.inventory.ContainerBrewingStand$SlotPotionBottle
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:int getMaxStackSize() -> a
    M:void onTake(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> a
    M:boolean mayPlaceItem(net.minecraft.world.item.ItemStack) -> b
net.minecraft.world.inventory.CartographyTableMenu -> bvv -> net.minecraft.world.inventory.ContainerCartography
    F:int MAP_SLOT -> k
    F:int ADDITIONAL_SLOT -> l
    F:int RESULT_SLOT -> m
    F:int INV_SLOT_START -> o
    F:int INV_SLOT_END -> p
    F:int USE_ROW_SLOT_START -> q
    F:int USE_ROW_SLOT_END -> r
    F:net.minecraft.world.inventory.ContainerAccess access -> s
    F:long lastSoundTime -> t
    F:net.minecraft.world.IInventory container -> n
    F:net.minecraft.world.inventory.InventoryCraftResult resultContainer -> u
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void slotsChanged(net.minecraft.world.IInventory) -> a
    M:void setupResultSlot(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:boolean canTakeItemForPickAll(net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot) -> a
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:void removed(net.minecraft.world.entity.player.EntityHuman) -> b
    M:void setChanged() -> e
    M:void setChanged() -> e
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:void onTake(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.ChestMenu -> bvw -> net.minecraft.world.inventory.ContainerChest
    F:int SLOTS_PER_ROW -> k
    F:net.minecraft.world.IInventory container -> l
    F:int containerRows -> m
    M:net.minecraft.world.inventory.ContainerChest oneRow(int,net.minecraft.world.entity.player.PlayerInventory) -> a
    M:net.minecraft.world.inventory.ContainerChest twoRows(int,net.minecraft.world.entity.player.PlayerInventory) -> b
    M:net.minecraft.world.inventory.ContainerChest threeRows(int,net.minecraft.world.entity.player.PlayerInventory) -> c
    M:net.minecraft.world.inventory.ContainerChest fourRows(int,net.minecraft.world.entity.player.PlayerInventory) -> d
    M:net.minecraft.world.inventory.ContainerChest fiveRows(int,net.minecraft.world.entity.player.PlayerInventory) -> e
    M:net.minecraft.world.inventory.ContainerChest sixRows(int,net.minecraft.world.entity.player.PlayerInventory) -> f
    M:net.minecraft.world.inventory.ContainerChest threeRows(int,net.minecraft.world.entity.player.PlayerInventory,net.minecraft.world.IInventory) -> a
    M:net.minecraft.world.inventory.ContainerChest sixRows(int,net.minecraft.world.entity.player.PlayerInventory,net.minecraft.world.IInventory) -> b
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:void removed(net.minecraft.world.entity.player.EntityHuman) -> b
    M:net.minecraft.world.IInventory getContainer() -> l
    M:int getRowCount() -> m
net.minecraft.world.inventory.ClickAction -> bvx -> net.minecraft.world.inventory.ClickAction
    F:net.minecraft.world.inventory.ClickAction PRIMARY -> a
    F:net.minecraft.world.inventory.ClickAction SECONDARY -> b
net.minecraft.world.inventory.ClickType -> bvy -> net.minecraft.world.inventory.InventoryClickType
    F:net.minecraft.world.inventory.InventoryClickType PICKUP -> a
    F:net.minecraft.world.inventory.InventoryClickType QUICK_MOVE -> b
    F:net.minecraft.world.inventory.InventoryClickType SWAP -> c
    F:net.minecraft.world.inventory.InventoryClickType CLONE -> d
    F:net.minecraft.world.inventory.InventoryClickType THROW -> e
    F:net.minecraft.world.inventory.InventoryClickType QUICK_CRAFT -> f
    F:net.minecraft.world.inventory.InventoryClickType PICKUP_ALL -> g
net.minecraft.world.inventory.ContainerData -> bvz -> net.minecraft.world.inventory.IContainerProperties
net.minecraft.world.inventory.ContainerLevelAccess -> bwa -> net.minecraft.world.inventory.ContainerAccess
    F:net.minecraft.world.inventory.ContainerAccess NULL -> a
    M:net.minecraft.world.inventory.ContainerAccess create(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:java.lang.Object evaluate(java.util.function.BiFunction,java.lang.Object) -> a
    M:void execute(java.util.function.BiConsumer) -> a
    M:java.util.Optional evaluate(java.util.function.BiFunction) -> a
    M:java.util.Optional evaluate(java.util.function.BiFunction) -> a
net.minecraft.world.inventory.ContainerListener -> bwb -> net.minecraft.world.inventory.ICrafting
net.minecraft.world.inventory.ContainerSynchronizer -> bwc -> net.minecraft.world.inventory.ContainerSynchronizer
net.minecraft.world.inventory.CraftingContainer -> bwd -> net.minecraft.world.inventory.InventoryCrafting
    F:net.minecraft.core.NonNullList items -> b
    F:int width -> c
    F:int height -> d
    F:net.minecraft.world.inventory.Container menu -> e
    M:int getContainerSize() -> b
    M:boolean isEmpty() -> c
    M:net.minecraft.world.item.ItemStack getItem(int) -> a
    M:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    M:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    M:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    M:void setChanged() -> e
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void clearContent() -> a
    M:int getHeight() -> f
    M:int getWidth() -> g
    M:void fillStackedContents(net.minecraft.world.entity.player.AutoRecipeStackManager) -> a
net.minecraft.world.inventory.CraftingMenu -> bwe -> net.minecraft.world.inventory.ContainerWorkbench
    F:int RESULT_SLOT -> k
    F:int CRAFT_SLOT_START -> l
    F:int CRAFT_SLOT_END -> m
    F:int INV_SLOT_START -> n
    F:int INV_SLOT_END -> o
    F:int USE_ROW_SLOT_START -> p
    F:int USE_ROW_SLOT_END -> q
    F:net.minecraft.world.inventory.InventoryCrafting craftSlots -> r
    F:net.minecraft.world.inventory.InventoryCraftResult resultSlots -> s
    F:net.minecraft.world.inventory.ContainerAccess access -> t
    F:net.minecraft.world.entity.player.EntityHuman player -> u
    M:void slotChangedCraftingGrid(net.minecraft.world.inventory.Container,net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.inventory.InventoryCrafting,net.minecraft.world.inventory.InventoryCraftResult) -> a
    M:void slotsChanged(net.minecraft.world.IInventory) -> a
    M:void fillCraftSlotsStackedContents(net.minecraft.world.entity.player.AutoRecipeStackManager) -> a
    M:void clearCraftingContent() -> l
    M:boolean recipeMatches(net.minecraft.world.item.crafting.IRecipe) -> a
    M:void removed(net.minecraft.world.entity.player.EntityHuman) -> b
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:boolean canTakeItemForPickAll(net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot) -> a
    M:int getResultSlotIndex() -> m
    M:int getGridWidth() -> n
    M:int getGridHeight() -> o
    M:int getSize() -> p
    M:net.minecraft.world.inventory.RecipeBookType getRecipeBookType() -> t
    M:boolean shouldMoveToInventory(int) -> e
net.minecraft.world.inventory.DataSlot -> bwf -> net.minecraft.world.inventory.ContainerProperty
    F:int prevValue -> a
    F:int value -> a
    M:net.minecraft.world.inventory.ContainerProperty forContainer(net.minecraft.world.inventory.IContainerProperties,int) -> a
    M:net.minecraft.world.inventory.ContainerProperty shared(int[],int) -> a
    M:net.minecraft.world.inventory.ContainerProperty standalone() -> a
    M:boolean checkAndClearUpdateFlag() -> c
    M:int get() -> b
    M:void set(int) -> a
    M:int get() -> b
    M:void set(int) -> a
    M:int get() -> b
    M:void set(int) -> a
net.minecraft.world.inventory.DispenserMenu -> bwg -> net.minecraft.world.inventory.ContainerDispenser
    F:int SLOT_COUNT -> k
    F:int INV_SLOT_START -> l
    F:int INV_SLOT_END -> m
    F:int USE_ROW_SLOT_START -> n
    F:int USE_ROW_SLOT_END -> o
    F:net.minecraft.world.IInventory dispenser -> p
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:void removed(net.minecraft.world.entity.player.EntityHuman) -> b
net.minecraft.world.inventory.EnchantmentMenu -> bwh -> net.minecraft.world.inventory.ContainerEnchantTable
    F:net.minecraft.world.IInventory enchantSlots -> n
    F:net.minecraft.world.inventory.ContainerAccess access -> o
    F:net.minecraft.util.RandomSource random -> p
    F:net.minecraft.world.inventory.ContainerProperty enchantmentSeed -> q
    M:void slotsChanged(net.minecraft.world.IInventory) -> a
    M:boolean clickMenuButton(net.minecraft.world.entity.player.EntityHuman,int) -> b
    M:java.util.List getEnchantmentList(net.minecraft.world.item.ItemStack,int,int) -> a
    M:int getGoldCount() -> l
    M:int getEnchantmentSeed() -> m
    M:void removed(net.minecraft.world.entity.player.EntityHuman) -> b
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:void setChanged() -> e
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:int getMaxStackSize() -> a
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.FurnaceFuelSlot -> bwi -> net.minecraft.world.inventory.SlotFurnaceFuel
    F:net.minecraft.world.inventory.ContainerFurnace menu -> a
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:boolean isBucket(net.minecraft.world.item.ItemStack) -> c
net.minecraft.world.inventory.FurnaceMenu -> bwj -> net.minecraft.world.inventory.ContainerFurnaceFurnace
net.minecraft.world.inventory.FurnaceResultSlot -> bwk -> net.minecraft.world.inventory.SlotFurnaceResult
    F:net.minecraft.world.entity.player.EntityHuman player -> a
    F:int removeCount -> b
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack remove(int) -> a
    M:void onTake(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> a
    M:void onQuickCraft(net.minecraft.world.item.ItemStack,int) -> a
net.minecraft.world.inventory.GrindstoneMenu -> bwl -> net.minecraft.world.inventory.ContainerGrindstone
    F:int MAX_NAME_LENGTH -> k
    F:int INPUT_SLOT -> l
    F:int ADDITIONAL_SLOT -> m
    F:int RESULT_SLOT -> n
    F:int INV_SLOT_START -> o
    F:int INV_SLOT_END -> p
    F:int USE_ROW_SLOT_START -> q
    F:int USE_ROW_SLOT_END -> r
    F:net.minecraft.world.IInventory resultSlots -> s
    F:net.minecraft.world.IInventory repairSlots -> t
    F:net.minecraft.world.inventory.ContainerAccess access -> u
    M:void slotsChanged(net.minecraft.world.IInventory) -> a
    M:void createResult() -> l
    M:net.minecraft.world.item.ItemStack mergeEnchants(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack removeNonCurses(net.minecraft.world.item.ItemStack,int,int) -> a
    M:void removed(net.minecraft.world.entity.player.EntityHuman) -> b
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:void setChanged() -> e
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:void onTake(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> a
    M:int getExperienceAmount(net.minecraft.world.level.World) -> a
    M:int getExperienceFromItem(net.minecraft.world.item.ItemStack) -> g
net.minecraft.world.inventory.HopperMenu -> bwm -> net.minecraft.world.inventory.ContainerHopper
    F:int CONTAINER_SIZE -> k
    F:net.minecraft.world.IInventory hopper -> l
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:void removed(net.minecraft.world.entity.player.EntityHuman) -> b
net.minecraft.world.inventory.HorseInventoryMenu -> bwn -> net.minecraft.world.inventory.ContainerHorse
    F:net.minecraft.world.IInventory horseContainer -> k
    F:net.minecraft.world.entity.animal.horse.EntityHorseAbstract horse -> l
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean hasChest(net.minecraft.world.entity.animal.horse.EntityHorseAbstract) -> a
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:void removed(net.minecraft.world.entity.player.EntityHuman) -> b
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:boolean isActive() -> b
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:boolean isActive() -> b
    M:int getMaxStackSize() -> a
net.minecraft.world.inventory.InventoryMenu -> bwo -> net.minecraft.world.inventory.ContainerPlayer
    F:int CONTAINER_ID -> k
    F:int RESULT_SLOT -> l
    F:int CRAFT_SLOT_START -> m
    F:int CRAFT_SLOT_END -> n
    F:int ARMOR_SLOT_START -> o
    F:int ARMOR_SLOT_END -> p
    F:int INV_SLOT_START -> q
    F:int INV_SLOT_END -> r
    F:int USE_ROW_SLOT_START -> s
    F:int USE_ROW_SLOT_END -> t
    F:int SHIELD_SLOT -> u
    F:net.minecraft.resources.MinecraftKey BLOCK_ATLAS -> v
    F:net.minecraft.resources.MinecraftKey EMPTY_ARMOR_SLOT_HELMET -> w
    F:net.minecraft.resources.MinecraftKey EMPTY_ARMOR_SLOT_CHESTPLATE -> x
    F:net.minecraft.resources.MinecraftKey EMPTY_ARMOR_SLOT_LEGGINGS -> y
    F:net.minecraft.resources.MinecraftKey EMPTY_ARMOR_SLOT_BOOTS -> z
    M:boolean isHotbarSlot(int) -> f
    M:void fillCraftSlotsStackedContents(net.minecraft.world.entity.player.AutoRecipeStackManager) -> a
    M:void clearCraftingContent() -> l
    M:boolean recipeMatches(net.minecraft.world.item.crafting.IRecipe) -> a
    M:void slotsChanged(net.minecraft.world.IInventory) -> a
    M:void removed(net.minecraft.world.entity.player.EntityHuman) -> b
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:boolean canTakeItemForPickAll(net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot) -> a
    M:int getResultSlotIndex() -> m
    M:int getGridWidth() -> n
    M:int getGridHeight() -> o
    M:int getSize() -> p
    M:net.minecraft.world.inventory.InventoryCrafting getCraftSlots() -> q
    M:net.minecraft.world.inventory.RecipeBookType getRecipeBookType() -> t
    M:boolean shouldMoveToInventory(int) -> e
    M:void set(net.minecraft.world.item.ItemStack) -> d
    M:int getMaxStackSize() -> a
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:boolean mayPickup(net.minecraft.world.entity.player.EntityHuman) -> a
    M:com.mojang.datafixers.util.Pair getNoItemIcon() -> c
    M:com.mojang.datafixers.util.Pair getNoItemIcon() -> c
net.minecraft.world.inventory.ItemCombinerMenu -> bwp -> net.minecraft.world.inventory.ContainerAnvilAbstract
    F:int INPUT_SLOT -> l
    F:int ADDITIONAL_SLOT -> m
    F:int RESULT_SLOT -> n
    F:int INV_SLOT_START -> k
    F:int INV_SLOT_END -> s
    F:int USE_ROW_SLOT_START -> t
    F:int USE_ROW_SLOT_END -> u
    F:net.minecraft.world.inventory.InventoryCraftResult resultSlots -> o
    F:net.minecraft.world.IInventory inputSlots -> p
    F:net.minecraft.world.inventory.ContainerAccess access -> q
    F:net.minecraft.world.entity.player.EntityHuman player -> r
    M:void slotsChanged(net.minecraft.world.IInventory) -> a
    M:void removed(net.minecraft.world.entity.player.EntityHuman) -> b
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean shouldQuickMoveToAdditionalSlot(net.minecraft.world.item.ItemStack) -> c
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:void setChanged() -> e
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:boolean mayPickup(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void onTake(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.LecternMenu -> bwq -> net.minecraft.world.inventory.ContainerLectern
    F:int DATA_COUNT -> o
    F:int SLOT_COUNT -> p
    F:int BUTTON_PREV_PAGE -> k
    F:int BUTTON_NEXT_PAGE -> l
    F:int BUTTON_TAKE_BOOK -> m
    F:int BUTTON_PAGE_JUMP_RANGE_START -> n
    F:net.minecraft.world.IInventory lectern -> q
    F:net.minecraft.world.inventory.IContainerProperties lecternData -> r
    M:boolean clickMenuButton(net.minecraft.world.entity.player.EntityHuman,int) -> b
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:void setData(int,int) -> a
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.item.ItemStack getBook() -> l
    M:int getPage() -> m
    M:void setChanged() -> d
net.minecraft.world.inventory.LoomMenu -> bwr -> net.minecraft.world.inventory.ContainerLoom
    F:int PATTERN_NOT_SET -> k
    F:int INV_SLOT_START -> l
    F:int INV_SLOT_END -> m
    F:int USE_ROW_SLOT_START -> n
    F:int USE_ROW_SLOT_END -> o
    F:net.minecraft.world.inventory.ContainerAccess access -> p
    F:net.minecraft.world.inventory.ContainerProperty selectedBannerPatternIndex -> q
    F:java.util.List selectablePatterns -> r
    F:java.lang.Runnable slotUpdateListener -> s
    F:net.minecraft.world.inventory.Slot bannerSlot -> t
    F:net.minecraft.world.inventory.Slot dyeSlot -> u
    F:net.minecraft.world.inventory.Slot patternSlot -> v
    F:net.minecraft.world.inventory.Slot resultSlot -> w
    F:long lastSoundTime -> x
    F:net.minecraft.world.IInventory inputContainer -> y
    F:net.minecraft.world.IInventory outputContainer -> z
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean clickMenuButton(net.minecraft.world.entity.player.EntityHuman,int) -> b
    M:java.util.List getSelectablePatterns(net.minecraft.world.item.ItemStack) -> c
    M:void slotsChanged(net.minecraft.world.IInventory) -> a
    M:java.util.List getSelectablePatterns() -> l
    M:int getSelectedBannerPatternIndex() -> m
    M:void registerUpdateListener(java.lang.Runnable) -> a
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:void removed(net.minecraft.world.entity.player.EntityHuman) -> b
    M:void setupResultSlot(net.minecraft.core.Holder) -> a
    M:net.minecraft.world.inventory.Slot getBannerSlot() -> n
    M:net.minecraft.world.inventory.Slot getDyeSlot() -> o
    M:net.minecraft.world.inventory.Slot getPatternSlot() -> p
    M:net.minecraft.world.inventory.Slot getResultSlot() -> q
    M:void setChanged() -> e
    M:void setChanged() -> e
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:void onTake(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.MenuConstructor -> bws -> net.minecraft.world.inventory.ITileEntityContainer
net.minecraft.world.inventory.MenuType -> bwt -> net.minecraft.world.inventory.Containers
    F:net.minecraft.world.inventory.Containers GENERIC_9x1 -> a
    F:net.minecraft.world.inventory.Containers GENERIC_9x2 -> b
    F:net.minecraft.world.inventory.Containers GENERIC_9x3 -> c
    F:net.minecraft.world.inventory.Containers GENERIC_9x4 -> d
    F:net.minecraft.world.inventory.Containers GENERIC_9x5 -> e
    F:net.minecraft.world.inventory.Containers GENERIC_9x6 -> f
    F:net.minecraft.world.inventory.Containers GENERIC_3x3 -> g
    F:net.minecraft.world.inventory.Containers ANVIL -> h
    F:net.minecraft.world.inventory.Containers BEACON -> i
    F:net.minecraft.world.inventory.Containers BLAST_FURNACE -> j
    F:net.minecraft.world.inventory.Containers BREWING_STAND -> k
    F:net.minecraft.world.inventory.Containers CRAFTING -> l
    F:net.minecraft.world.inventory.Containers ENCHANTMENT -> m
    F:net.minecraft.world.inventory.Containers FURNACE -> n
    F:net.minecraft.world.inventory.Containers GRINDSTONE -> o
    F:net.minecraft.world.inventory.Containers HOPPER -> p
    F:net.minecraft.world.inventory.Containers LECTERN -> q
    F:net.minecraft.world.inventory.Containers LOOM -> r
    F:net.minecraft.world.inventory.Containers MERCHANT -> s
    F:net.minecraft.world.inventory.Containers SHULKER_BOX -> t
    F:net.minecraft.world.inventory.Containers SMITHING -> u
    F:net.minecraft.world.inventory.Containers SMOKER -> v
    F:net.minecraft.world.inventory.Containers CARTOGRAPHY_TABLE -> w
    F:net.minecraft.world.inventory.Containers STONECUTTER -> x
    F:net.minecraft.world.inventory.Containers$Supplier constructor -> y
    M:net.minecraft.world.inventory.Containers register(java.lang.String,net.minecraft.world.inventory.Containers$Supplier) -> a
    M:net.minecraft.world.inventory.Container create(int,net.minecraft.world.entity.player.PlayerInventory) -> a
net.minecraft.world.inventory.MenuType$MenuSupplier -> bwt$a -> net.minecraft.world.inventory.Containers$Supplier
net.minecraft.world.inventory.MerchantContainer -> bwu -> net.minecraft.world.inventory.InventoryMerchant
    F:net.minecraft.world.item.trading.IMerchant merchant -> b
    F:net.minecraft.core.NonNullList itemStacks -> c
    F:net.minecraft.world.item.trading.MerchantRecipe activeOffer -> d
    F:int selectionHint -> e
    F:int futureXp -> f
    M:int getContainerSize() -> b
    M:boolean isEmpty() -> c
    M:net.minecraft.world.item.ItemStack getItem(int) -> a
    M:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    M:boolean isPaymentSlot(int) -> d
    M:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    M:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void setChanged() -> e
    M:void updateSellItem() -> f
    M:net.minecraft.world.item.trading.MerchantRecipe getActiveOffer() -> g
    M:void setSelectionHint(int) -> c
    M:void clearContent() -> a
    M:int getFutureXp() -> h
net.minecraft.world.inventory.MerchantMenu -> bwv -> net.minecraft.world.inventory.ContainerMerchant
    F:int PAYMENT1_SLOT -> k
    F:int PAYMENT2_SLOT -> l
    F:int RESULT_SLOT -> m
    F:int INV_SLOT_START -> n
    F:int INV_SLOT_END -> o
    F:int USE_ROW_SLOT_START -> p
    F:int USE_ROW_SLOT_END -> q
    F:int SELLSLOT1_X -> r
    F:int SELLSLOT2_X -> s
    F:int BUYSLOT_X -> t
    F:int ROW_Y -> u
    F:net.minecraft.world.item.trading.IMerchant trader -> v
    F:net.minecraft.world.inventory.InventoryMerchant tradeContainer -> w
    F:int merchantLevel -> x
    F:boolean showProgressBar -> y
    F:boolean canRestock -> z
    M:void setShowProgressBar(boolean) -> a
    M:void slotsChanged(net.minecraft.world.IInventory) -> a
    M:void setSelectionHint(int) -> e
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:int getTraderXp() -> l
    M:int getFutureTraderXp() -> m
    M:void setXp(int) -> f
    M:int getTraderLevel() -> n
    M:void setMerchantLevel(int) -> g
    M:void setCanRestock(boolean) -> b
    M:boolean canRestock() -> o
    M:boolean canTakeItemForPickAll(net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot) -> a
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:void playTradeSound() -> r
    M:void removed(net.minecraft.world.entity.player.EntityHuman) -> b
    M:void tryMoveItems(int) -> h
    M:void moveFromInventoryToPaymentSlot(int,net.minecraft.world.item.ItemStack) -> c
    M:void setOffers(net.minecraft.world.item.trading.MerchantRecipeList) -> a
    M:net.minecraft.world.item.trading.MerchantRecipeList getOffers() -> p
    M:boolean showProgressBar() -> q
net.minecraft.world.inventory.MerchantResultSlot -> bww -> net.minecraft.world.inventory.SlotMerchantResult
    F:net.minecraft.world.inventory.InventoryMerchant slots -> a
    F:net.minecraft.world.entity.player.EntityHuman player -> b
    F:int removeCount -> c
    F:net.minecraft.world.item.trading.IMerchant merchant -> h
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack remove(int) -> a
    M:void onQuickCraft(net.minecraft.world.item.ItemStack,int) -> a
    M:void onTake(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.PlayerEnderChestContainer -> bwx -> net.minecraft.world.inventory.InventoryEnderChest
    F:net.minecraft.world.level.block.entity.TileEntityEnderChest activeChest -> b
    M:void setActiveChest(net.minecraft.world.level.block.entity.TileEntityEnderChest) -> a
    M:boolean isActiveChest(net.minecraft.world.level.block.entity.TileEntityEnderChest) -> b
    M:void fromTag(net.minecraft.nbt.NBTTagList) -> a
    M:net.minecraft.nbt.NBTTagList createTag() -> g
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
net.minecraft.world.inventory.RecipeBookMenu -> bwy -> net.minecraft.world.inventory.ContainerRecipeBook
    M:void handlePlacement(boolean,net.minecraft.world.item.crafting.IRecipe,net.minecraft.server.level.EntityPlayer) -> a
net.minecraft.world.inventory.RecipeBookType -> bwz -> net.minecraft.world.inventory.RecipeBookType
    F:net.minecraft.world.inventory.RecipeBookType CRAFTING -> a
    F:net.minecraft.world.inventory.RecipeBookType FURNACE -> b
    F:net.minecraft.world.inventory.RecipeBookType BLAST_FURNACE -> c
    F:net.minecraft.world.inventory.RecipeBookType SMOKER -> d
net.minecraft.world.inventory.RecipeHolder -> bxa -> net.minecraft.world.inventory.RecipeHolder
    M:void awardUsedRecipes(net.minecraft.world.entity.player.EntityHuman) -> b
    M:boolean setRecipeUsed(net.minecraft.world.level.World,net.minecraft.server.level.EntityPlayer,net.minecraft.world.item.crafting.IRecipe) -> a
net.minecraft.world.inventory.ResultContainer -> bxb -> net.minecraft.world.inventory.InventoryCraftResult
    F:net.minecraft.core.NonNullList itemStacks -> b
    F:net.minecraft.world.item.crafting.IRecipe recipeUsed -> c
    M:int getContainerSize() -> b
    M:boolean isEmpty() -> c
    M:net.minecraft.world.item.ItemStack getItem(int) -> a
    M:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    M:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    M:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    M:void setChanged() -> e
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void clearContent() -> a
    M:void setRecipeUsed(net.minecraft.world.item.crafting.IRecipe) -> a
    M:net.minecraft.world.item.crafting.IRecipe getRecipeUsed() -> d
net.minecraft.world.inventory.ResultSlot -> bxc -> net.minecraft.world.inventory.SlotResult
    F:net.minecraft.world.inventory.InventoryCrafting craftSlots -> a
    F:net.minecraft.world.entity.player.EntityHuman player -> b
    F:int removeCount -> c
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack remove(int) -> a
    M:void onQuickCraft(net.minecraft.world.item.ItemStack,int) -> a
    M:void onSwapCraft(int) -> b
    M:void onTake(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.ShulkerBoxMenu -> bxd -> net.minecraft.world.inventory.ContainerShulkerBox
    F:int CONTAINER_SIZE -> k
    F:net.minecraft.world.IInventory container -> l
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:void removed(net.minecraft.world.entity.player.EntityHuman) -> b
net.minecraft.world.inventory.ShulkerBoxSlot -> bxe -> net.minecraft.world.inventory.SlotShulkerBox
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.SimpleContainerData -> bxf -> net.minecraft.world.inventory.ContainerProperties
    M:int get(int) -> a
    M:void set(int,int) -> a
    M:int getCount() -> a
net.minecraft.world.inventory.Slot -> bxg -> net.minecraft.world.inventory.Slot
    F:int slot -> a
    F:net.minecraft.world.IInventory container -> d
    F:int index -> e
    F:int x -> f
    F:int y -> g
    M:void onQuickCraft(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:void onQuickCraft(net.minecraft.world.item.ItemStack,int) -> a
    M:void onSwapCraft(int) -> b
    M:void onTake(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> a
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack getItem() -> e
    M:boolean hasItem() -> f
    M:void set(net.minecraft.world.item.ItemStack) -> d
    M:void initialize(net.minecraft.world.item.ItemStack) -> e
    M:void setChanged() -> d
    M:int getMaxStackSize() -> a
    M:com.mojang.datafixers.util.Pair getNoItemIcon() -> c
    M:net.minecraft.world.item.ItemStack remove(int) -> a
    M:boolean mayPickup(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean isActive() -> b
    M:java.util.Optional tryRemove(int,int,net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.item.ItemStack safeTake(int,int,net.minecraft.world.entity.player.EntityHuman) -> b
    M:net.minecraft.world.item.ItemStack safeInsert(net.minecraft.world.item.ItemStack) -> f
    M:net.minecraft.world.item.ItemStack safeInsert(net.minecraft.world.item.ItemStack,int) -> b
    M:boolean allowModification(net.minecraft.world.entity.player.EntityHuman) -> b
    M:int getContainerSlot() -> g
net.minecraft.world.inventory.SmithingMenu -> bxh -> net.minecraft.world.inventory.ContainerSmithing
    F:net.minecraft.world.level.World level -> k
    F:net.minecraft.world.item.crafting.RecipeSmithing selectedRecipe -> s
    F:java.util.List recipes -> t
    M:boolean isValidBlock(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean mayPickup(net.minecraft.world.entity.player.EntityHuman,boolean) -> a
    M:void onTake(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> a
    M:void shrinkStackInSlot(int) -> e
    M:void createResult() -> l
    M:boolean shouldQuickMoveToAdditionalSlot(net.minecraft.world.item.ItemStack) -> c
    M:boolean canTakeItemForPickAll(net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot) -> a
net.minecraft.world.inventory.SmokerMenu -> bxi -> net.minecraft.world.inventory.ContainerSmoker
net.minecraft.world.inventory.StackedContentsCompatible -> bxj -> net.minecraft.world.inventory.AutoRecipeOutput
net.minecraft.world.inventory.StonecutterMenu -> bxk -> net.minecraft.world.inventory.ContainerStonecutter
    F:int INPUT_SLOT -> k
    F:int RESULT_SLOT -> l
    F:int INV_SLOT_START -> p
    F:int INV_SLOT_END -> q
    F:int USE_ROW_SLOT_START -> r
    F:int USE_ROW_SLOT_END -> s
    F:net.minecraft.world.inventory.ContainerAccess access -> t
    F:net.minecraft.world.inventory.ContainerProperty selectedRecipeIndex -> u
    F:net.minecraft.world.level.World level -> v
    F:java.util.List recipes -> w
    F:net.minecraft.world.item.ItemStack input -> x
    F:long lastSoundTime -> y
    F:net.minecraft.world.inventory.Slot inputSlot -> m
    F:net.minecraft.world.inventory.Slot resultSlot -> n
    F:java.lang.Runnable slotUpdateListener -> z
    F:net.minecraft.world.IInventory container -> o
    M:int getSelectedRecipeIndex() -> l
    M:java.util.List getRecipes() -> m
    M:int getNumRecipes() -> n
    M:boolean hasInputItem() -> o
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean clickMenuButton(net.minecraft.world.entity.player.EntityHuman,int) -> b
    M:boolean isValidRecipeIndex(int) -> e
    M:void slotsChanged(net.minecraft.world.IInventory) -> a
    M:void setupRecipeList(net.minecraft.world.IInventory,net.minecraft.world.item.ItemStack) -> a
    M:void setupResultSlot() -> p
    M:net.minecraft.world.inventory.Containers getType() -> a
    M:void registerUpdateListener(java.lang.Runnable) -> a
    M:boolean canTakeItemForPickAll(net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot) -> a
    M:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:void removed(net.minecraft.world.entity.player.EntityHuman) -> b
    M:void setChanged() -> e
    M:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    M:void onTake(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.tooltip.BundleTooltip -> bxm -> net.minecraft.world.inventory.tooltip.BundleTooltip
    F:net.minecraft.core.NonNullList items -> a
    F:int weight -> b
    M:net.minecraft.core.NonNullList getItems() -> a
    M:int getWeight() -> b
net.minecraft.world.inventory.tooltip.TooltipComponent -> bxn -> net.minecraft.world.inventory.tooltip.TooltipComponent
net.minecraft.world.item.AdventureModeCheck -> bxp -> net.minecraft.world.item.AdventureModeCheck
    F:java.lang.String tagName -> a
    F:net.minecraft.world.level.block.state.pattern.ShapeDetectorBlock lastCheckedBlock -> b
    F:boolean lastResult -> c
    F:boolean checksBlockEntity -> d
    M:boolean areSameBlocks(net.minecraft.world.level.block.state.pattern.ShapeDetectorBlock,net.minecraft.world.level.block.state.pattern.ShapeDetectorBlock,boolean) -> a
    M:boolean test(net.minecraft.world.item.ItemStack,net.minecraft.core.IRegistry,net.minecraft.world.level.block.state.pattern.ShapeDetectorBlock) -> a
net.minecraft.world.item.AirItem -> bxq -> net.minecraft.world.item.ItemAir
    F:net.minecraft.world.level.block.Block block -> a
    M:java.lang.String getDescriptionId() -> a
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
net.minecraft.world.item.ArmorItem -> bxr -> net.minecraft.world.item.ItemArmor
    F:net.minecraft.core.dispenser.IDispenseBehavior DISPENSE_ITEM_BEHAVIOR -> a
    F:net.minecraft.world.entity.EnumItemSlot slot -> b
    F:int defense -> f
    F:float toughness -> g
    F:float knockbackResistance -> c
    F:net.minecraft.world.item.ArmorMaterial material -> d
    F:com.google.common.collect.Multimap defaultModifiers -> h
    M:boolean dispenseArmor(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.entity.EnumItemSlot getSlot() -> b
    M:int getEnchantmentValue() -> c
    M:net.minecraft.world.item.ArmorMaterial getMaterial() -> d
    M:boolean isValidRepairItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:com.google.common.collect.Multimap getDefaultAttributeModifiers(net.minecraft.world.entity.EnumItemSlot) -> a
    M:int getDefense() -> e
    M:float getToughness() -> f
    M:net.minecraft.sounds.SoundEffect getEquipSound() -> g
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.item.ArmorMaterial -> bxs -> net.minecraft.world.item.ArmorMaterial
net.minecraft.world.item.ArmorMaterials -> bxt -> net.minecraft.world.item.EnumArmorMaterial
    F:net.minecraft.world.item.EnumArmorMaterial LEATHER -> a
    F:net.minecraft.world.item.EnumArmorMaterial CHAIN -> b
    F:net.minecraft.world.item.EnumArmorMaterial IRON -> c
    F:net.minecraft.world.item.EnumArmorMaterial GOLD -> d
    F:net.minecraft.world.item.EnumArmorMaterial DIAMOND -> e
    F:net.minecraft.world.item.EnumArmorMaterial TURTLE -> f
    F:net.minecraft.world.item.EnumArmorMaterial NETHERITE -> g
    F:java.lang.String name -> i
    F:int durabilityMultiplier -> j
    F:int enchantmentValue -> l
    F:net.minecraft.sounds.SoundEffect sound -> m
    F:float toughness -> n
    F:float knockbackResistance -> o
    F:net.minecraft.util.LazyInitVar repairIngredient -> p
    M:int getDurabilityForSlot(net.minecraft.world.entity.EnumItemSlot) -> a
    M:int getDefenseForSlot(net.minecraft.world.entity.EnumItemSlot) -> b
    M:int getEnchantmentValue() -> a
    M:net.minecraft.sounds.SoundEffect getEquipSound() -> b
    M:net.minecraft.world.item.crafting.RecipeItemStack getRepairIngredient() -> c
    M:java.lang.String getName() -> d
    M:float getToughness() -> e
    M:float getKnockbackResistance() -> f
net.minecraft.world.item.ArmorStandItem -> bxu -> net.minecraft.world.item.ItemArmorStand
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:void randomizePose(net.minecraft.world.entity.decoration.EntityArmorStand,net.minecraft.util.RandomSource) -> a
net.minecraft.world.item.ArrowItem -> bxv -> net.minecraft.world.item.ItemArrow
    M:net.minecraft.world.entity.projectile.EntityArrow createArrow(net.minecraft.world.level.World,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.item.AxeItem -> bxw -> net.minecraft.world.item.ItemAxe
    F:java.util.Map STRIPPABLES -> a
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:java.util.Optional getStripped(net.minecraft.world.level.block.state.IBlockData) -> b
net.minecraft.world.item.BannerItem -> bxx -> net.minecraft.world.item.ItemBanner
    F:java.lang.String PATTERN_PREFIX -> b
    M:void appendHoverTextFromBannerBlockEntityTag(net.minecraft.world.item.ItemStack,java.util.List) -> a
    M:net.minecraft.world.item.EnumColor getColor() -> b
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
net.minecraft.world.item.BannerPatternItem -> bxy -> net.minecraft.world.item.ItemBannerPattern
    F:net.minecraft.tags.TagKey bannerPattern -> a
    M:net.minecraft.tags.TagKey getBannerPattern() -> b
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:net.minecraft.network.chat.IChatMutableComponent getDisplayName() -> d
net.minecraft.world.item.BedItem -> bxz -> net.minecraft.world.item.ItemBed
    M:boolean placeBlock(net.minecraft.world.item.context.BlockActionContext,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.item.BlockItem -> bya -> net.minecraft.world.item.ItemBlock
    F:java.lang.String BLOCK_ENTITY_TAG -> b
    F:java.lang.String BLOCK_STATE_TAG -> a
    F:net.minecraft.world.level.block.Block block -> c
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:net.minecraft.world.EnumInteractionResult place(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.sounds.SoundEffect getPlaceSound(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.item.context.BlockActionContext updatePlacementContext(net.minecraft.world.item.context.BlockActionContext) -> b
    M:boolean updateCustomBlockEntityTag(net.minecraft.core.BlockPosition,net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData getPlacementState(net.minecraft.world.item.context.BlockActionContext) -> c
    M:net.minecraft.world.level.block.state.IBlockData updateBlockStateFromTag(net.minecraft.core.BlockPosition,net.minecraft.world.level.World,net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateState(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.properties.IBlockState,java.lang.String) -> a
    M:boolean canPlace(net.minecraft.world.item.context.BlockActionContext,net.minecraft.world.level.block.state.IBlockData) -> b
    M:boolean mustSurvive() -> d
    M:boolean placeBlock(net.minecraft.world.item.context.BlockActionContext,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean updateCustomBlockEntityTag(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack) -> a
    M:java.lang.String getDescriptionId() -> a
    M:void fillItemCategory(net.minecraft.world.item.CreativeModeTab,net.minecraft.core.NonNullList) -> a
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:net.minecraft.world.level.block.Block getBlock() -> e
    M:void registerBlocks(java.util.Map,net.minecraft.world.item.Item) -> a
    M:void onDestroyed(net.minecraft.world.entity.item.EntityItem) -> a
    M:net.minecraft.nbt.NBTTagCompound getBlockEntityData(net.minecraft.world.item.ItemStack) -> a
    M:void setBlockEntityData(net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.entity.TileEntityTypes,net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.item.BoatItem -> byb -> net.minecraft.world.item.ItemBoat
    F:java.util.function.Predicate ENTITY_PREDICATE -> a
    F:net.minecraft.world.entity.vehicle.EntityBoat$EnumBoatType type -> b
    F:boolean hasChest -> c
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.world.entity.vehicle.EntityBoat getBoat(net.minecraft.world.level.World,net.minecraft.world.phys.MovingObjectPosition) -> a
net.minecraft.world.item.BoneMealItem -> byc -> net.minecraft.world.item.ItemBoneMeal
    F:int GRASS_SPREAD_WIDTH -> a
    F:int GRASS_SPREAD_HEIGHT -> b
    F:int GRASS_COUNT_MULTIPLIER -> c
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:boolean growCrop(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:boolean growWaterPlant(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:void addGrowthParticles(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,int) -> a
net.minecraft.world.item.BookItem -> byd -> net.minecraft.world.item.ItemBook
    M:int getEnchantmentValue() -> c
net.minecraft.world.item.BottleItem -> bye -> net.minecraft.world.item.ItemGlassBottle
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.world.item.ItemStack turnBottleIntoItem(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.item.BowItem -> byf -> net.minecraft.world.item.ItemBow
    F:int MAX_DRAW_DURATION -> a
    F:int DEFAULT_RANGE -> b
    M:void releaseUsing(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving,int) -> a
    M:float getPowerForTime(int) -> a
    M:int getUseDuration(net.minecraft.world.item.ItemStack) -> b
    M:net.minecraft.world.item.EnumAnimation getUseAnimation(net.minecraft.world.item.ItemStack) -> c
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:java.util.function.Predicate getAllSupportedProjectiles() -> b
    M:int getDefaultProjectileRange() -> d
net.minecraft.world.item.BowlFoodItem -> byg -> net.minecraft.world.item.ItemSoup
    M:net.minecraft.world.item.ItemStack finishUsingItem(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.item.BucketItem -> byh -> net.minecraft.world.item.ItemBucket
    F:net.minecraft.world.level.material.FluidType content -> a
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.world.item.ItemStack getEmptySuccessItem(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void checkExtraContent(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.World,net.minecraft.world.item.ItemStack,net.minecraft.core.BlockPosition) -> a
    M:boolean emptyContents(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void playEmptySound(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.item.BundleItem -> byi -> net.minecraft.world.item.BundleItem
    F:java.lang.String TAG_ITEMS -> b
    F:int MAX_WEIGHT -> a
    F:int BUNDLE_IN_BUNDLE_WEIGHT -> c
    F:int BAR_COLOR -> d
    M:float getFullnessDisplay(net.minecraft.world.item.ItemStack) -> d
    M:boolean overrideStackedOnOther(net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot,net.minecraft.world.inventory.ClickAction,net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean overrideOtherStackedOnMe(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot,net.minecraft.world.inventory.ClickAction,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.entity.SlotAccess) -> a
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:boolean isBarVisible(net.minecraft.world.item.ItemStack) -> e
    M:int getBarWidth(net.minecraft.world.item.ItemStack) -> f
    M:int getBarColor(net.minecraft.world.item.ItemStack) -> g
    M:int add(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> b
    M:java.util.Optional getMatchingItem(net.minecraft.world.item.ItemStack,net.minecraft.nbt.NBTTagList) -> a
    M:int getWeight(net.minecraft.world.item.ItemStack) -> k
    M:int getContentWeight(net.minecraft.world.item.ItemStack) -> o
    M:java.util.Optional removeOne(net.minecraft.world.item.ItemStack) -> p
    M:boolean dropContents(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.EntityHuman) -> a
    M:java.util.stream.Stream getContents(net.minecraft.world.item.ItemStack) -> q
    M:java.util.Optional getTooltipImage(net.minecraft.world.item.ItemStack) -> h
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:void onDestroyed(net.minecraft.world.entity.item.EntityItem) -> a
    M:void playRemoveOneSound(net.minecraft.world.entity.Entity) -> a
    M:void playInsertSound(net.minecraft.world.entity.Entity) -> b
    M:void playDropContentsSound(net.minecraft.world.entity.Entity) -> c
net.minecraft.world.item.ChorusFruitItem -> byj -> net.minecraft.world.item.ItemChorusFruit
    M:net.minecraft.world.item.ItemStack finishUsingItem(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.item.CompassItem -> byk -> net.minecraft.world.item.ItemCompass
    F:org.slf4j.Logger LOGGER -> d
    F:java.lang.String TAG_LODESTONE_POS -> a
    F:java.lang.String TAG_LODESTONE_DIMENSION -> b
    F:java.lang.String TAG_LODESTONE_TRACKED -> c
    M:boolean isLodestoneCompass(net.minecraft.world.item.ItemStack) -> d
    M:java.util.Optional getLodestoneDimension(net.minecraft.nbt.NBTTagCompound) -> c
    M:net.minecraft.core.GlobalPos getLodestonePosition(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.core.GlobalPos getSpawnPosition(net.minecraft.world.level.World) -> a
    M:boolean isFoil(net.minecraft.world.item.ItemStack) -> i
    M:void inventoryTick(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.Entity,int,boolean) -> a
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:void addLodestoneTags(net.minecraft.resources.ResourceKey,net.minecraft.core.BlockPosition,net.minecraft.nbt.NBTTagCompound) -> a
    M:java.lang.String getDescriptionId(net.minecraft.world.item.ItemStack) -> j
net.minecraft.world.item.ComplexItem -> byl -> net.minecraft.world.item.ItemWorldMapBase
    M:net.minecraft.network.protocol.Packet getUpdatePacket(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman) -> a
net.minecraft.world.item.CreativeModeTab -> bym -> net.minecraft.world.item.CreativeModeTab
    F:net.minecraft.world.item.CreativeModeTab TAB_BUILDING_BLOCKS -> b
    F:net.minecraft.world.item.CreativeModeTab TAB_DECORATIONS -> c
    F:net.minecraft.world.item.CreativeModeTab TAB_REDSTONE -> d
    F:net.minecraft.world.item.CreativeModeTab TAB_TRANSPORTATION -> e
    F:net.minecraft.world.item.CreativeModeTab TAB_MISC -> f
    F:net.minecraft.world.item.CreativeModeTab TAB_SEARCH -> g
    F:net.minecraft.world.item.CreativeModeTab TAB_FOOD -> h
    F:net.minecraft.world.item.CreativeModeTab TAB_TOOLS -> i
    F:net.minecraft.world.item.CreativeModeTab TAB_COMBAT -> j
    F:net.minecraft.world.item.CreativeModeTab TAB_BREWING -> k
    F:net.minecraft.world.item.CreativeModeTab TAB_MATERIALS -> l
    F:net.minecraft.world.item.CreativeModeTab TAB_HOTBAR -> m
    F:net.minecraft.world.item.CreativeModeTab TAB_INVENTORY -> n
    F:int id -> o
    F:java.lang.String langId -> p
    F:net.minecraft.network.chat.IChatBaseComponent displayName -> q
    F:java.lang.String recipeFolderName -> r
    F:java.lang.String backgroundSuffix -> s
    F:boolean canScroll -> t
    F:boolean showTitle -> u
    F:net.minecraft.world.item.ItemStack iconItemStack -> w
    M:int getId() -> a
    M:java.lang.String getRecipeFolderName() -> b
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName() -> c
    M:net.minecraft.world.item.ItemStack getIconItem() -> d
    M:java.lang.String getBackgroundSuffix() -> f
    M:net.minecraft.world.item.CreativeModeTab setBackgroundSuffix(java.lang.String) -> a
    M:net.minecraft.world.item.CreativeModeTab setRecipeFolderName(java.lang.String) -> b
    M:boolean showTitle() -> g
    M:net.minecraft.world.item.CreativeModeTab hideTitle() -> h
    M:boolean canScroll() -> i
    M:net.minecraft.world.item.CreativeModeTab hideScroll() -> j
    M:int getColumn() -> k
    M:boolean isTopRow() -> l
    M:boolean isAlignedRight() -> m
    M:net.minecraft.world.item.CreativeModeTab setEnchantmentCategories(net.minecraft.world.item.enchantment.EnchantmentCategory[]) -> a
    M:boolean hasEnchantmentCategory(net.minecraft.world.item.enchantment.EnchantmentSlotType) -> a
    M:void fillItemList(net.minecraft.core.NonNullList) -> a
    M:net.minecraft.world.item.ItemStack makeIcon() -> e
    M:net.minecraft.world.item.ItemStack makeIcon() -> e
    M:net.minecraft.world.item.ItemStack makeIcon() -> e
    M:void fillItemList(net.minecraft.core.NonNullList) -> a
    M:boolean isAlignedRight() -> m
    M:net.minecraft.world.item.ItemStack makeIcon() -> e
    M:net.minecraft.world.item.ItemStack makeIcon() -> e
    M:net.minecraft.world.item.ItemStack makeIcon() -> e
    M:net.minecraft.world.item.ItemStack makeIcon() -> e
    M:net.minecraft.world.item.ItemStack makeIcon() -> e
    M:net.minecraft.world.item.ItemStack makeIcon() -> e
    M:net.minecraft.world.item.ItemStack makeIcon() -> e
    M:net.minecraft.world.item.ItemStack makeIcon() -> e
    M:net.minecraft.world.item.ItemStack makeIcon() -> e
net.minecraft.world.item.CrossbowItem -> byn -> net.minecraft.world.item.ItemCrossbow
    F:java.lang.String TAG_CHARGED -> b
    F:java.lang.String TAG_CHARGED_PROJECTILES -> e
    F:int MAX_CHARGE_DURATION -> f
    F:int DEFAULT_RANGE -> a
    F:boolean startSoundPlayed -> g
    F:boolean midLoadSoundPlayed -> h
    F:float START_SOUND_PERCENT -> i
    F:float MID_SOUND_PERCENT -> j
    F:float ARROW_POWER -> r
    F:float FIREWORK_POWER -> s
    M:java.util.function.Predicate getSupportedHeldProjectiles() -> e
    M:java.util.function.Predicate getAllSupportedProjectiles() -> b
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:float getShootingPower(net.minecraft.world.item.ItemStack) -> o
    M:void releaseUsing(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving,int) -> a
    M:boolean tryLoadProjectiles(net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:boolean loadProjectile(net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,boolean,boolean) -> a
    M:boolean isCharged(net.minecraft.world.item.ItemStack) -> d
    M:void setCharged(net.minecraft.world.item.ItemStack,boolean) -> a
    M:void addChargedProjectile(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> b
    M:java.util.List getChargedProjectiles(net.minecraft.world.item.ItemStack) -> p
    M:void clearChargedProjectiles(net.minecraft.world.item.ItemStack) -> q
    M:boolean containsChargedProjectile(net.minecraft.world.item.ItemStack,net.minecraft.world.item.Item) -> a
    M:void shootProjectile(net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving,net.minecraft.world.EnumHand,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,float,boolean,float,float,float) -> a
    M:net.minecraft.world.entity.projectile.EntityArrow getArrow(net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:void performShooting(net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving,net.minecraft.world.EnumHand,net.minecraft.world.item.ItemStack,float,float) -> a
    M:float getRandomShotPitch(boolean,net.minecraft.util.RandomSource) -> a
    M:void onCrossbowShot(net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:void onUseTick(net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack,int) -> a
    M:int getUseDuration(net.minecraft.world.item.ItemStack) -> b
    M:int getChargeDuration(net.minecraft.world.item.ItemStack) -> k
    M:net.minecraft.world.item.EnumAnimation getUseAnimation(net.minecraft.world.item.ItemStack) -> c
    M:net.minecraft.sounds.SoundEffect getStartSound(int) -> a
    M:float getPowerForTime(int,net.minecraft.world.item.ItemStack) -> a
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:boolean useOnRelease(net.minecraft.world.item.ItemStack) -> l
    M:int getDefaultProjectileRange() -> d
net.minecraft.world.item.DebugStickItem -> byo -> net.minecraft.world.item.ItemDebugStick
    M:boolean isFoil(net.minecraft.world.item.ItemStack) -> i
    M:boolean canAttackBlock(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:boolean handleInteraction(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,boolean,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.level.block.state.IBlockData cycleState(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.properties.IBlockState,boolean) -> a
    M:java.lang.Object getRelative(java.lang.Iterable,java.lang.Object,boolean) -> a
    M:void message(net.minecraft.world.entity.player.EntityHuman,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:java.lang.String getNameHelper(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.properties.IBlockState) -> a
net.minecraft.world.item.DiggerItem -> byp -> net.minecraft.world.item.ItemTool
    F:net.minecraft.tags.TagKey blocks -> a
    F:float speed -> b
    F:float attackDamageBaseline -> c
    F:com.google.common.collect.Multimap defaultModifiers -> d
    M:float getDestroySpeed(net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean hurtEnemy(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean mineBlock(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.EntityLiving) -> a
    M:com.google.common.collect.Multimap getDefaultAttributeModifiers(net.minecraft.world.entity.EnumItemSlot) -> a
    M:float getAttackDamage() -> d
net.minecraft.world.item.DiscFragmentItem -> byq -> net.minecraft.world.item.DiscFragmentItem
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:net.minecraft.network.chat.IChatMutableComponent getDisplayName() -> d
net.minecraft.world.item.DispensibleContainerItem -> byr -> net.minecraft.world.item.DispensibleContainerItem
    M:void checkExtraContent(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.World,net.minecraft.world.item.ItemStack,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.item.DoubleHighBlockItem -> bys -> net.minecraft.world.item.ItemBisected
    M:boolean placeBlock(net.minecraft.world.item.context.BlockActionContext,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.item.DyeColor -> byt -> net.minecraft.world.item.EnumColor
    F:net.minecraft.world.item.EnumColor WHITE -> a
    F:net.minecraft.world.item.EnumColor ORANGE -> b
    F:net.minecraft.world.item.EnumColor MAGENTA -> c
    F:net.minecraft.world.item.EnumColor LIGHT_BLUE -> d
    F:net.minecraft.world.item.EnumColor YELLOW -> e
    F:net.minecraft.world.item.EnumColor LIME -> f
    F:net.minecraft.world.item.EnumColor PINK -> g
    F:net.minecraft.world.item.EnumColor GRAY -> h
    F:net.minecraft.world.item.EnumColor LIGHT_GRAY -> i
    F:net.minecraft.world.item.EnumColor CYAN -> j
    F:net.minecraft.world.item.EnumColor PURPLE -> k
    F:net.minecraft.world.item.EnumColor BLUE -> l
    F:net.minecraft.world.item.EnumColor BROWN -> m
    F:net.minecraft.world.item.EnumColor GREEN -> n
    F:net.minecraft.world.item.EnumColor RED -> o
    F:net.minecraft.world.item.EnumColor BLACK -> p
    F:it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap BY_FIREWORK_COLOR -> r
    F:int id -> s
    F:java.lang.String name -> t
    F:net.minecraft.world.level.material.MaterialMapColor color -> u
    F:int fireworkColor -> w
    F:int textColor -> x
    M:int getId() -> a
    M:java.lang.String getName() -> b
    M:net.minecraft.world.level.material.MaterialMapColor getMaterialColor() -> e
    M:int getFireworkColor() -> f
    M:int getTextColor() -> g
    M:net.minecraft.world.item.EnumColor byId(int) -> a
    M:net.minecraft.world.item.EnumColor byName(java.lang.String,net.minecraft.world.item.EnumColor) -> a
    M:net.minecraft.world.item.EnumColor byFireworkColor(int) -> b
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.item.DyeItem -> byu -> net.minecraft.world.item.ItemDye
    F:java.util.Map ITEM_BY_COLOR -> a
    F:net.minecraft.world.item.EnumColor dyeColor -> b
    M:net.minecraft.world.EnumInteractionResult interactLivingEntity(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.entity.EntityLiving,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.world.item.EnumColor getDyeColor() -> d
    M:net.minecraft.world.item.ItemDye byColor(net.minecraft.world.item.EnumColor) -> a
net.minecraft.world.item.DyeableArmorItem -> byv -> net.minecraft.world.item.ItemArmorColorable
net.minecraft.world.item.DyeableHorseArmorItem -> byw -> net.minecraft.world.item.ItemHorseArmorDyeable
net.minecraft.world.item.DyeableLeatherItem -> byx -> net.minecraft.world.item.IDyeable
    M:boolean hasCustomColor(net.minecraft.world.item.ItemStack) -> a
    M:void setColor(net.minecraft.world.item.ItemStack,int) -> a
    M:net.minecraft.world.item.ItemStack dyeArmor(net.minecraft.world.item.ItemStack,java.util.List) -> a
net.minecraft.world.item.EggItem -> byy -> net.minecraft.world.item.ItemEgg
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
net.minecraft.world.item.ElytraItem -> byz -> net.minecraft.world.item.ItemElytra
    M:boolean isFlyEnabled(net.minecraft.world.item.ItemStack) -> d
    M:boolean isValidRepairItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.sounds.SoundEffect getEquipSound() -> g
net.minecraft.world.item.EmptyMapItem -> bza -> net.minecraft.world.item.ItemMapEmpty
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
net.minecraft.world.item.EnchantedBookItem -> bzb -> net.minecraft.world.item.ItemEnchantedBook
    F:java.lang.String TAG_STORED_ENCHANTMENTS -> a
    M:boolean isFoil(net.minecraft.world.item.ItemStack) -> i
    M:net.minecraft.nbt.NBTTagList getEnchantments(net.minecraft.world.item.ItemStack) -> d
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:void addEnchantment(net.minecraft.world.item.ItemStack,net.minecraft.world.item.enchantment.WeightedRandomEnchant) -> a
    M:net.minecraft.world.item.ItemStack createForEnchantment(net.minecraft.world.item.enchantment.WeightedRandomEnchant) -> a
    M:void fillItemCategory(net.minecraft.world.item.CreativeModeTab,net.minecraft.core.NonNullList) -> a
net.minecraft.world.item.EnchantedGoldenAppleItem -> bzc -> net.minecraft.world.item.ItemGoldenAppleEnchanted
    M:boolean isFoil(net.minecraft.world.item.ItemStack) -> i
net.minecraft.world.item.EndCrystalItem -> bzd -> net.minecraft.world.item.ItemEndCrystal
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:boolean isFoil(net.minecraft.world.item.ItemStack) -> i
net.minecraft.world.item.EnderEyeItem -> bze -> net.minecraft.world.item.ItemEnderEye
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
net.minecraft.world.item.EnderpearlItem -> bzf -> net.minecraft.world.item.ItemEnderPearl
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
net.minecraft.world.item.ExperienceBottleItem -> bzg -> net.minecraft.world.item.ItemExpBottle
    M:boolean isFoil(net.minecraft.world.item.ItemStack) -> i
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
net.minecraft.world.item.FireChargeItem -> bzh -> net.minecraft.world.item.ItemFireball
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:void playSound(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.item.FireworkRocketItem -> bzi -> net.minecraft.world.item.ItemFireworks
    F:java.lang.String TAG_FIREWORKS -> a
    F:java.lang.String TAG_EXPLOSION -> b
    F:java.lang.String TAG_EXPLOSIONS -> c
    F:java.lang.String TAG_FLIGHT -> d
    F:java.lang.String TAG_EXPLOSION_TYPE -> e
    F:java.lang.String TAG_EXPLOSION_TRAIL -> f
    F:java.lang.String TAG_EXPLOSION_FLICKER -> g
    F:java.lang.String TAG_EXPLOSION_COLORS -> h
    F:java.lang.String TAG_EXPLOSION_FADECOLORS -> i
    F:double ROCKET_PLACEMENT_OFFSET -> j
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
net.minecraft.world.item.FireworkRocketItem$Shape -> bzi$a -> net.minecraft.world.item.ItemFireworks$EffectType
    F:net.minecraft.world.item.ItemFireworks$EffectType SMALL_BALL -> a
    F:net.minecraft.world.item.ItemFireworks$EffectType LARGE_BALL -> b
    F:net.minecraft.world.item.ItemFireworks$EffectType STAR -> c
    F:net.minecraft.world.item.ItemFireworks$EffectType CREEPER -> d
    F:net.minecraft.world.item.ItemFireworks$EffectType BURST -> e
    F:int id -> g
    F:java.lang.String name -> h
    M:int getId() -> a
    M:java.lang.String getName() -> b
    M:net.minecraft.world.item.ItemFireworks$EffectType byId(int) -> a
net.minecraft.world.item.FireworkStarItem -> bzj -> net.minecraft.world.item.ItemFireworksCharge
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:void appendHoverText(net.minecraft.nbt.NBTTagCompound,java.util.List) -> a
    M:net.minecraft.network.chat.IChatBaseComponent appendColors(net.minecraft.network.chat.IChatMutableComponent,int[]) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getColorName(int) -> a
net.minecraft.world.item.FishingRodItem -> bzk -> net.minecraft.world.item.ItemFishingRod
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:int getEnchantmentValue() -> c
net.minecraft.world.item.FlintAndSteelItem -> bzl -> net.minecraft.world.item.ItemFlintAndSteel
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
net.minecraft.world.item.FoodOnAStickItem -> bzm -> net.minecraft.world.item.ItemCarrotStick
    F:net.minecraft.world.entity.EntityTypes canInteractWith -> a
    F:int consumeItemDamage -> b
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
net.minecraft.world.item.GameMasterBlockItem -> bzn -> net.minecraft.world.item.ItemRestricted
    M:net.minecraft.world.level.block.state.IBlockData getPlacementState(net.minecraft.world.item.context.BlockActionContext) -> c
net.minecraft.world.item.HangingEntityItem -> bzo -> net.minecraft.world.item.ItemHanging
    F:net.minecraft.world.entity.EntityTypes type -> a
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:boolean mayPlace(net.minecraft.world.entity.player.EntityHuman,net.minecraft.core.EnumDirection,net.minecraft.world.item.ItemStack,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.item.HoeItem -> bzp -> net.minecraft.world.item.ItemHoe
    F:java.util.Map TILLABLES -> a
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:java.util.function.Consumer changeIntoState(net.minecraft.world.level.block.state.IBlockData) -> b
    M:java.util.function.Consumer changeIntoStateAndDropItem(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IMaterial) -> a
    M:boolean onlyIfAirAbove(net.minecraft.world.item.context.ItemActionContext) -> b
net.minecraft.world.item.HoneyBottleItem -> bzq -> net.minecraft.world.item.ItemHoneyBottle
    F:int DRINK_DURATION -> a
    M:net.minecraft.world.item.ItemStack finishUsingItem(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving) -> a
    M:int getUseDuration(net.minecraft.world.item.ItemStack) -> b
    M:net.minecraft.world.item.EnumAnimation getUseAnimation(net.minecraft.world.item.ItemStack) -> c
    M:net.minecraft.sounds.SoundEffect getEatingSound() -> h
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
net.minecraft.world.item.HoneycombItem -> bzr -> net.minecraft.world.item.HoneycombItem
    F:java.util.function.Supplier WAXABLES -> a
    F:java.util.function.Supplier WAX_OFF_BY_BLOCK -> b
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:java.util.Optional getWaxed(net.minecraft.world.level.block.state.IBlockData) -> b
net.minecraft.world.item.HorseArmorItem -> bzs -> net.minecraft.world.item.ItemHorseArmor
    F:java.lang.String TEX_FOLDER -> a
    F:int protection -> b
    F:java.lang.String texture -> c
    M:net.minecraft.resources.MinecraftKey getTexture() -> i
    M:int getProtection() -> j
net.minecraft.world.item.Instrument -> bzt -> net.minecraft.world.item.Instrument
    F:net.minecraft.sounds.SoundEffect soundEvent -> b
    F:int useDuration -> c
    F:float range -> d
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.sounds.SoundEffect soundEvent() -> a
    M:int useDuration() -> b
    M:float range() -> c
net.minecraft.world.item.InstrumentItem -> bzu -> net.minecraft.world.item.InstrumentItem
    F:java.lang.String TAG_INSTRUMENT -> a
    F:net.minecraft.tags.TagKey instruments -> b
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:net.minecraft.world.item.ItemStack create(net.minecraft.world.item.Item,net.minecraft.core.Holder) -> a
    M:void setRandom(net.minecraft.world.item.ItemStack,net.minecraft.tags.TagKey,net.minecraft.util.RandomSource) -> a
    M:void setSoundVariantId(net.minecraft.world.item.ItemStack,net.minecraft.core.Holder) -> a
    M:void fillItemCategory(net.minecraft.world.item.CreativeModeTab,net.minecraft.core.NonNullList) -> a
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:int getUseDuration(net.minecraft.world.item.ItemStack) -> b
    M:java.util.Optional getInstrument(net.minecraft.world.item.ItemStack) -> d
    M:net.minecraft.world.item.EnumAnimation getUseAnimation(net.minecraft.world.item.ItemStack) -> c
    M:void play(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.Instrument) -> a
net.minecraft.world.item.Instruments -> bzv -> net.minecraft.world.item.Instruments
    F:int GOAT_HORN_RANGE_BLOCKS -> a
    F:int GOAT_HORN_DURATION -> b
    F:net.minecraft.resources.ResourceKey PONDER_GOAT_HORN -> c
    F:net.minecraft.resources.ResourceKey SING_GOAT_HORN -> d
    F:net.minecraft.resources.ResourceKey SEEK_GOAT_HORN -> e
    F:net.minecraft.resources.ResourceKey FEEL_GOAT_HORN -> f
    F:net.minecraft.resources.ResourceKey ADMIRE_GOAT_HORN -> g
    F:net.minecraft.resources.ResourceKey CALL_GOAT_HORN -> h
    F:net.minecraft.resources.ResourceKey YEARN_GOAT_HORN -> i
    F:net.minecraft.resources.ResourceKey DREAM_GOAT_HORN -> j
    M:net.minecraft.resources.ResourceKey create(java.lang.String) -> a
    M:net.minecraft.world.item.Instrument bootstrap(net.minecraft.core.IRegistry) -> a
net.minecraft.world.item.Item -> bzw -> net.minecraft.world.item.Item
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.Map BY_BLOCK -> k
    F:java.util.UUID BASE_ATTACK_DAMAGE_UUID -> l
    F:java.util.UUID BASE_ATTACK_SPEED_UUID -> m
    F:int MAX_STACK_SIZE -> n
    F:int EAT_DURATION -> o
    F:int MAX_BAR_WIDTH -> p
    F:net.minecraft.core.Holder$Reference builtInRegistryHolder -> b
    F:net.minecraft.world.item.CreativeModeTab category -> q
    F:net.minecraft.world.item.EnumItemRarity rarity -> c
    F:int maxStackSize -> d
    F:int maxDamage -> e
    F:boolean isFireResistant -> f
    F:net.minecraft.world.item.Item craftingRemainingItem -> g
    F:java.lang.String descriptionId -> h
    F:net.minecraft.world.food.FoodInfo foodProperties -> i
    M:int getId(net.minecraft.world.item.Item) -> a
    M:net.minecraft.world.item.Item byId(int) -> b
    M:net.minecraft.world.item.Item byBlock(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.core.Holder$Reference builtInRegistryHolder() -> k
    M:void onUseTick(net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack,int) -> a
    M:void onDestroyed(net.minecraft.world.entity.item.EntityItem) -> a
    M:void verifyTagAfterLoad(net.minecraft.nbt.NBTTagCompound) -> b
    M:boolean canAttackBlock(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.item.Item asItem() -> l
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:float getDestroySpeed(net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.world.item.ItemStack finishUsingItem(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving) -> a
    M:int getMaxStackSize() -> m
    M:int getMaxDamage() -> n
    M:boolean canBeDepleted() -> o
    M:boolean isBarVisible(net.minecraft.world.item.ItemStack) -> e
    M:int getBarWidth(net.minecraft.world.item.ItemStack) -> f
    M:int getBarColor(net.minecraft.world.item.ItemStack) -> g
    M:boolean overrideStackedOnOther(net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot,net.minecraft.world.inventory.ClickAction,net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean overrideOtherStackedOnMe(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot,net.minecraft.world.inventory.ClickAction,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.entity.SlotAccess) -> a
    M:boolean hurtEnemy(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean mineBlock(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.EnumInteractionResult interactLivingEntity(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.entity.EntityLiving,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getDescription() -> p
    M:java.lang.String getOrCreateDescriptionId() -> q
    M:java.lang.String getDescriptionId() -> a
    M:java.lang.String getDescriptionId(net.minecraft.world.item.ItemStack) -> j
    M:boolean shouldOverrideMultiplayerNbt() -> r
    M:net.minecraft.world.item.Item getCraftingRemainingItem() -> s
    M:boolean hasCraftingRemainingItem() -> t
    M:void inventoryTick(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.Entity,int,boolean) -> a
    M:void onCraftedBy(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman) -> b
    M:net.minecraft.world.item.EnumAnimation getUseAnimation(net.minecraft.world.item.ItemStack) -> c
    M:int getUseDuration(net.minecraft.world.item.ItemStack) -> b
    M:void releaseUsing(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving,int) -> a
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:java.util.Optional getTooltipImage(net.minecraft.world.item.ItemStack) -> h
    M:net.minecraft.network.chat.IChatBaseComponent getName(net.minecraft.world.item.ItemStack) -> m
    M:boolean isFoil(net.minecraft.world.item.ItemStack) -> i
    M:net.minecraft.world.item.EnumItemRarity getRarity(net.minecraft.world.item.ItemStack) -> n
    M:net.minecraft.world.phys.MovingObjectPositionBlock getPlayerPOVHitResult(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.RayTrace$FluidCollisionOption) -> a
    M:int getEnchantmentValue() -> c
    M:void fillItemCategory(net.minecraft.world.item.CreativeModeTab,net.minecraft.core.NonNullList) -> a
    M:boolean allowedIn(net.minecraft.world.item.CreativeModeTab) -> a
    M:net.minecraft.world.item.CreativeModeTab getItemCategory() -> u
    M:boolean isValidRepairItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:com.google.common.collect.Multimap getDefaultAttributeModifiers(net.minecraft.world.entity.EnumItemSlot) -> a
    M:boolean useOnRelease(net.minecraft.world.item.ItemStack) -> l
    M:boolean isEdible() -> v
    M:net.minecraft.world.food.FoodInfo getFoodProperties() -> w
    M:net.minecraft.sounds.SoundEffect getEatingSound() -> h
    M:boolean isFireResistant() -> x
    M:boolean canBeHurtBy(net.minecraft.world.damagesource.DamageSource) -> a
    M:net.minecraft.sounds.SoundEffect getEquipSound() -> g
net.minecraft.world.item.Item$Properties -> bzw$a -> net.minecraft.world.item.Item$Info
    F:int maxStackSize -> a
    F:int maxDamage -> b
    F:net.minecraft.world.item.Item craftingRemainingItem -> c
    F:net.minecraft.world.item.CreativeModeTab category -> d
    F:net.minecraft.world.item.EnumItemRarity rarity -> e
    F:net.minecraft.world.food.FoodInfo foodProperties -> f
    F:boolean isFireResistant -> g
    M:net.minecraft.world.item.Item$Info food(net.minecraft.world.food.FoodInfo) -> a
    M:net.minecraft.world.item.Item$Info stacksTo(int) -> a
    M:net.minecraft.world.item.Item$Info defaultDurability(int) -> b
    M:net.minecraft.world.item.Item$Info durability(int) -> c
    M:net.minecraft.world.item.Item$Info craftRemainder(net.minecraft.world.item.Item) -> a
    M:net.minecraft.world.item.Item$Info tab(net.minecraft.world.item.CreativeModeTab) -> a
    M:net.minecraft.world.item.Item$Info rarity(net.minecraft.world.item.EnumItemRarity) -> a
    M:net.minecraft.world.item.Item$Info fireResistant() -> a
net.minecraft.world.item.ItemCooldowns -> bzx -> net.minecraft.world.item.ItemCooldown
    F:java.util.Map cooldowns -> a
    F:int tickCount -> b
    M:boolean isOnCooldown(net.minecraft.world.item.Item) -> a
    M:float getCooldownPercent(net.minecraft.world.item.Item,float) -> a
    M:void tick() -> a
    M:void addCooldown(net.minecraft.world.item.Item,int) -> a
    M:void removeCooldown(net.minecraft.world.item.Item) -> b
    M:void onCooldownStarted(net.minecraft.world.item.Item,int) -> b
    M:void onCooldownEnded(net.minecraft.world.item.Item) -> c
net.minecraft.world.item.ItemCooldowns$CooldownInstance -> bzx$a -> net.minecraft.world.item.ItemCooldown$Info
    F:int startTime -> a
    F:int endTime -> b
net.minecraft.world.item.ItemFrameItem -> bzy -> net.minecraft.world.item.ItemItemFrame
    M:boolean mayPlace(net.minecraft.world.entity.player.EntityHuman,net.minecraft.core.EnumDirection,net.minecraft.world.item.ItemStack,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.item.ItemNameBlockItem -> bzz -> net.minecraft.world.item.ItemNamedBlock
    M:java.lang.String getDescriptionId() -> a
net.minecraft.world.item.ItemStack -> caa -> net.minecraft.world.item.ItemStack
    F:com.mojang.serialization.Codec CODEC -> a
    F:org.slf4j.Logger LOGGER -> j
    F:net.minecraft.world.item.ItemStack EMPTY -> b
    F:java.text.DecimalFormat ATTRIBUTE_MODIFIER_FORMAT -> c
    F:java.lang.String TAG_ENCH -> d
    F:java.lang.String TAG_DISPLAY -> e
    F:java.lang.String TAG_DISPLAY_NAME -> f
    F:java.lang.String TAG_LORE -> g
    F:java.lang.String TAG_DAMAGE -> h
    F:java.lang.String TAG_COLOR -> i
    F:java.lang.String TAG_UNBREAKABLE -> k
    F:java.lang.String TAG_REPAIR_COST -> l
    F:java.lang.String TAG_CAN_DESTROY_BLOCK_LIST -> m
    F:java.lang.String TAG_CAN_PLACE_ON_BLOCK_LIST -> n
    F:java.lang.String TAG_HIDE_FLAGS -> o
    F:int DONT_HIDE_TOOLTIP -> p
    F:net.minecraft.network.chat.ChatModifier LORE_STYLE -> q
    F:int count -> r
    F:int popTime -> s
    F:net.minecraft.world.item.Item item -> t
    F:net.minecraft.nbt.NBTTagCompound tag -> u
    F:boolean emptyCacheFlag -> v
    F:net.minecraft.world.entity.Entity entityRepresentation -> w
    F:net.minecraft.world.item.AdventureModeCheck adventureBreakCheck -> x
    F:net.minecraft.world.item.AdventureModeCheck adventurePlaceCheck -> y
    M:java.util.Optional getTooltipImage() -> a
    M:net.minecraft.world.item.ItemStack of(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean isEmpty() -> b
    M:net.minecraft.world.item.ItemStack split(int) -> a
    M:net.minecraft.world.item.Item getItem() -> c
    M:net.minecraft.core.Holder getItemHolder() -> d
    M:boolean is(net.minecraft.tags.TagKey) -> a
    M:boolean is(net.minecraft.world.item.Item) -> a
    M:boolean is(java.util.function.Predicate) -> a
    M:boolean is(net.minecraft.core.Holder) -> a
    M:java.util.stream.Stream getTags() -> e
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:float getDestroySpeed(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.world.item.ItemStack finishUsingItem(net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.nbt.NBTTagCompound save(net.minecraft.nbt.NBTTagCompound) -> b
    M:int getMaxStackSize() -> f
    M:boolean isStackable() -> g
    M:boolean isDamageableItem() -> h
    M:boolean isDamaged() -> i
    M:int getDamageValue() -> j
    M:void setDamageValue(int) -> b
    M:int getMaxDamage() -> k
    M:boolean hurt(int,net.minecraft.util.RandomSource,net.minecraft.server.level.EntityPlayer) -> a
    M:void hurtAndBreak(int,net.minecraft.world.entity.EntityLiving,java.util.function.Consumer) -> a
    M:boolean isBarVisible() -> l
    M:int getBarWidth() -> m
    M:int getBarColor() -> n
    M:boolean overrideStackedOnOther(net.minecraft.world.inventory.Slot,net.minecraft.world.inventory.ClickAction,net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean overrideOtherStackedOnMe(net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot,net.minecraft.world.inventory.ClickAction,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.entity.SlotAccess) -> a
    M:void hurtEnemy(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void mineBlock(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean isCorrectToolForDrops(net.minecraft.world.level.block.state.IBlockData) -> b
    M:net.minecraft.world.EnumInteractionResult interactLivingEntity(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.entity.EntityLiving,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.world.item.ItemStack copy() -> o
    M:boolean tagMatches(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:boolean matches(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> b
    M:boolean matches(net.minecraft.world.item.ItemStack) -> c
    M:boolean isSame(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> c
    M:boolean isSameIgnoreDurability(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> d
    M:boolean sameItem(net.minecraft.world.item.ItemStack) -> a
    M:boolean sameItemStackIgnoreDurability(net.minecraft.world.item.ItemStack) -> b
    M:boolean isSameItemSameTags(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> e
    M:java.lang.String getDescriptionId() -> p
    M:void inventoryTick(net.minecraft.world.level.World,net.minecraft.world.entity.Entity,int,boolean) -> a
    M:void onCraftedBy(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,int) -> a
    M:int getUseDuration() -> q
    M:net.minecraft.world.item.EnumAnimation getUseAnimation() -> r
    M:void releaseUsing(net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving,int) -> a
    M:boolean useOnRelease() -> s
    M:boolean hasTag() -> t
    M:net.minecraft.nbt.NBTTagCompound getTag() -> u
    M:net.minecraft.nbt.NBTTagCompound getOrCreateTag() -> v
    M:net.minecraft.nbt.NBTTagCompound getOrCreateTagElement(java.lang.String) -> a
    M:net.minecraft.nbt.NBTTagCompound getTagElement(java.lang.String) -> b
    M:void removeTagKey(java.lang.String) -> c
    M:net.minecraft.nbt.NBTTagList getEnchantmentTags() -> w
    M:void setTag(net.minecraft.nbt.NBTTagCompound) -> c
    M:net.minecraft.network.chat.IChatBaseComponent getHoverName() -> x
    M:net.minecraft.world.item.ItemStack setHoverName(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void resetHoverName() -> y
    M:boolean hasCustomHoverName() -> z
    M:java.util.List getTooltipLines(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.TooltipFlag) -> a
    M:boolean shouldShowInTooltip(int,net.minecraft.world.item.ItemStack$HideFlags) -> a
    M:void hideTooltipPart(net.minecraft.world.item.ItemStack$HideFlags) -> a
    M:void appendEnchantmentNames(java.util.List,net.minecraft.nbt.NBTTagList) -> a
    M:java.util.Collection expandBlockState(java.lang.String) -> d
    M:void enchant(net.minecraft.world.item.enchantment.Enchantment,int) -> a
    M:void addTagElement(java.lang.String,net.minecraft.nbt.NBTBase) -> a
    M:void setEntityRepresentation(net.minecraft.world.entity.Entity) -> a
    M:void setRepairCost(int) -> c
    M:com.google.common.collect.Multimap getAttributeModifiers(net.minecraft.world.entity.EnumItemSlot) -> a
    M:void addAttributeModifier(net.minecraft.world.entity.ai.attributes.AttributeBase,net.minecraft.world.entity.ai.attributes.AttributeModifier,net.minecraft.world.entity.EnumItemSlot) -> a
    M:boolean hasAdventureModePlaceTagForBlock(net.minecraft.core.IRegistry,net.minecraft.world.level.block.state.pattern.ShapeDetectorBlock) -> a
    M:boolean hasAdventureModeBreakTagForBlock(net.minecraft.core.IRegistry,net.minecraft.world.level.block.state.pattern.ShapeDetectorBlock) -> b
    M:void setPopTime(int) -> d
    M:void setCount(int) -> e
    M:void grow(int) -> f
    M:void shrink(int) -> g
    M:void onUseTick(net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving,int) -> b
    M:void onDestroyed(net.minecraft.world.entity.item.EntityItem) -> a
net.minecraft.world.item.ItemStack$TooltipPart -> caa$a -> net.minecraft.world.item.ItemStack$HideFlags
    F:net.minecraft.world.item.ItemStack$HideFlags ENCHANTMENTS -> a
    F:net.minecraft.world.item.ItemStack$HideFlags MODIFIERS -> b
    F:net.minecraft.world.item.ItemStack$HideFlags UNBREAKABLE -> c
    F:net.minecraft.world.item.ItemStack$HideFlags CAN_DESTROY -> d
    F:net.minecraft.world.item.ItemStack$HideFlags CAN_PLACE -> e
    F:net.minecraft.world.item.ItemStack$HideFlags ADDITIONAL -> f
    F:net.minecraft.world.item.ItemStack$HideFlags DYE -> g
    F:int mask -> h
    M:int getMask() -> a
net.minecraft.world.item.ItemUtils -> cab -> net.minecraft.world.item.ItemLiquidUtil
    M:net.minecraft.world.InteractionResultWrapper startUsingInstantly(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.world.item.ItemStack createFilledResult(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack,boolean) -> a
    M:net.minecraft.world.item.ItemStack createFilledResult(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> a
    M:void onContainerDestroyed(net.minecraft.world.entity.item.EntityItem,java.util.stream.Stream) -> a
net.minecraft.world.item.Items -> cac -> net.minecraft.world.item.Items
    F:net.minecraft.world.item.Item AIR -> a
    F:net.minecraft.world.item.Item STONE -> b
    F:net.minecraft.world.item.Item GRANITE -> c
    F:net.minecraft.world.item.Item POLISHED_GRANITE -> d
    F:net.minecraft.world.item.Item DIORITE -> e
    F:net.minecraft.world.item.Item POLISHED_DIORITE -> f
    F:net.minecraft.world.item.Item ANDESITE -> g
    F:net.minecraft.world.item.Item POLISHED_ANDESITE -> h
    F:net.minecraft.world.item.Item DEEPSLATE -> i
    F:net.minecraft.world.item.Item COBBLED_DEEPSLATE -> j
    F:net.minecraft.world.item.Item POLISHED_DEEPSLATE -> k
    F:net.minecraft.world.item.Item CALCITE -> l
    F:net.minecraft.world.item.Item TUFF -> m
    F:net.minecraft.world.item.Item DRIPSTONE_BLOCK -> n
    F:net.minecraft.world.item.Item GRASS_BLOCK -> o
    F:net.minecraft.world.item.Item DIRT -> p
    F:net.minecraft.world.item.Item COARSE_DIRT -> q
    F:net.minecraft.world.item.Item PODZOL -> r
    F:net.minecraft.world.item.Item ROOTED_DIRT -> s
    F:net.minecraft.world.item.Item MUD -> t
    F:net.minecraft.world.item.Item CRIMSON_NYLIUM -> u
    F:net.minecraft.world.item.Item WARPED_NYLIUM -> v
    F:net.minecraft.world.item.Item COBBLESTONE -> w
    F:net.minecraft.world.item.Item OAK_PLANKS -> x
    F:net.minecraft.world.item.Item SPRUCE_PLANKS -> y
    F:net.minecraft.world.item.Item BIRCH_PLANKS -> z
    F:net.minecraft.world.item.Item DEEPSLATE_REDSTONE_ORE -> aa
    F:net.minecraft.world.item.Item EMERALD_ORE -> ab
    F:net.minecraft.world.item.Item DEEPSLATE_EMERALD_ORE -> ac
    F:net.minecraft.world.item.Item LAPIS_ORE -> ad
    F:net.minecraft.world.item.Item DEEPSLATE_LAPIS_ORE -> ae
    F:net.minecraft.world.item.Item DIAMOND_ORE -> af
    F:net.minecraft.world.item.Item DEEPSLATE_DIAMOND_ORE -> ag
    F:net.minecraft.world.item.Item NETHER_GOLD_ORE -> ah
    F:net.minecraft.world.item.Item NETHER_QUARTZ_ORE -> ai
    F:net.minecraft.world.item.Item ANCIENT_DEBRIS -> aj
    F:net.minecraft.world.item.Item COAL_BLOCK -> ak
    F:net.minecraft.world.item.Item RAW_IRON_BLOCK -> al
    F:net.minecraft.world.item.Item RAW_COPPER_BLOCK -> am
    F:net.minecraft.world.item.Item RAW_GOLD_BLOCK -> an
    F:net.minecraft.world.item.Item AMETHYST_BLOCK -> ao
    F:net.minecraft.world.item.Item BUDDING_AMETHYST -> ap
    F:net.minecraft.world.item.Item IRON_BLOCK -> aq
    F:net.minecraft.world.item.Item COPPER_BLOCK -> ar
    F:net.minecraft.world.item.Item GOLD_BLOCK -> as
    F:net.minecraft.world.item.Item DIAMOND_BLOCK -> at
    F:net.minecraft.world.item.Item NETHERITE_BLOCK -> au
    F:net.minecraft.world.item.Item EXPOSED_COPPER -> av
    F:net.minecraft.world.item.Item WEATHERED_COPPER -> aw
    F:net.minecraft.world.item.Item OXIDIZED_COPPER -> ax
    F:net.minecraft.world.item.Item CUT_COPPER -> ay
    F:net.minecraft.world.item.Item EXPOSED_CUT_COPPER -> az
    F:net.minecraft.world.item.Item OAK_LOG -> ba
    F:net.minecraft.world.item.Item SPRUCE_LOG -> bb
    F:net.minecraft.world.item.Item BIRCH_LOG -> bc
    F:net.minecraft.world.item.Item JUNGLE_LOG -> bd
    F:net.minecraft.world.item.Item ACACIA_LOG -> be
    F:net.minecraft.world.item.Item DARK_OAK_LOG -> bf
    F:net.minecraft.world.item.Item MANGROVE_LOG -> bg
    F:net.minecraft.world.item.Item MANGROVE_ROOTS -> bh
    F:net.minecraft.world.item.Item MUDDY_MANGROVE_ROOTS -> bi
    F:net.minecraft.world.item.Item CRIMSON_STEM -> bj
    F:net.minecraft.world.item.Item WARPED_STEM -> bk
    F:net.minecraft.world.item.Item STRIPPED_OAK_LOG -> bl
    F:net.minecraft.world.item.Item STRIPPED_SPRUCE_LOG -> bm
    F:net.minecraft.world.item.Item STRIPPED_BIRCH_LOG -> bn
    F:net.minecraft.world.item.Item STRIPPED_JUNGLE_LOG -> bo
    F:net.minecraft.world.item.Item STRIPPED_ACACIA_LOG -> bp
    F:net.minecraft.world.item.Item STRIPPED_DARK_OAK_LOG -> bq
    F:net.minecraft.world.item.Item STRIPPED_MANGROVE_LOG -> br
    F:net.minecraft.world.item.Item STRIPPED_CRIMSON_STEM -> bs
    F:net.minecraft.world.item.Item STRIPPED_WARPED_STEM -> bt
    F:net.minecraft.world.item.Item STRIPPED_OAK_WOOD -> bu
    F:net.minecraft.world.item.Item STRIPPED_SPRUCE_WOOD -> bv
    F:net.minecraft.world.item.Item STRIPPED_BIRCH_WOOD -> bw
    F:net.minecraft.world.item.Item STRIPPED_JUNGLE_WOOD -> bx
    F:net.minecraft.world.item.Item STRIPPED_ACACIA_WOOD -> by
    F:net.minecraft.world.item.Item STRIPPED_DARK_OAK_WOOD -> bz
    F:net.minecraft.world.item.Item SANDSTONE -> ca
    F:net.minecraft.world.item.Item CHISELED_SANDSTONE -> cb
    F:net.minecraft.world.item.Item CUT_SANDSTONE -> cc
    F:net.minecraft.world.item.Item COBWEB -> cd
    F:net.minecraft.world.item.Item GRASS -> ce
    F:net.minecraft.world.item.Item FERN -> cf
    F:net.minecraft.world.item.Item AZALEA -> cg
    F:net.minecraft.world.item.Item FLOWERING_AZALEA -> ch
    F:net.minecraft.world.item.Item DEAD_BUSH -> ci
    F:net.minecraft.world.item.Item SEAGRASS -> cj
    F:net.minecraft.world.item.Item SEA_PICKLE -> ck
    F:net.minecraft.world.item.Item WHITE_WOOL -> cl
    F:net.minecraft.world.item.Item ORANGE_WOOL -> cm
    F:net.minecraft.world.item.Item MAGENTA_WOOL -> cn
    F:net.minecraft.world.item.Item LIGHT_BLUE_WOOL -> co
    F:net.minecraft.world.item.Item YELLOW_WOOL -> cp
    F:net.minecraft.world.item.Item LIME_WOOL -> cq
    F:net.minecraft.world.item.Item PINK_WOOL -> cr
    F:net.minecraft.world.item.Item GRAY_WOOL -> cs
    F:net.minecraft.world.item.Item LIGHT_GRAY_WOOL -> ct
    F:net.minecraft.world.item.Item CYAN_WOOL -> cu
    F:net.minecraft.world.item.Item PURPLE_WOOL -> cv
    F:net.minecraft.world.item.Item BLUE_WOOL -> cw
    F:net.minecraft.world.item.Item BROWN_WOOL -> cx
    F:net.minecraft.world.item.Item GREEN_WOOL -> cy
    F:net.minecraft.world.item.Item RED_WOOL -> cz
    F:net.minecraft.world.item.Item MOSS_CARPET -> da
    F:net.minecraft.world.item.Item MOSS_BLOCK -> db
    F:net.minecraft.world.item.Item HANGING_ROOTS -> dc
    F:net.minecraft.world.item.Item BIG_DRIPLEAF -> dd
    F:net.minecraft.world.item.Item SMALL_DRIPLEAF -> de
    F:net.minecraft.world.item.Item BAMBOO -> df
    F:net.minecraft.world.item.Item OAK_SLAB -> dg
    F:net.minecraft.world.item.Item SPRUCE_SLAB -> dh
    F:net.minecraft.world.item.Item BIRCH_SLAB -> di
    F:net.minecraft.world.item.Item JUNGLE_SLAB -> dj
    F:net.minecraft.world.item.Item ACACIA_SLAB -> dk
    F:net.minecraft.world.item.Item DARK_OAK_SLAB -> dl
    F:net.minecraft.world.item.Item MANGROVE_SLAB -> dm
    F:net.minecraft.world.item.Item CRIMSON_SLAB -> dn
    F:net.minecraft.world.item.Item WARPED_SLAB -> do
    F:net.minecraft.world.item.Item STONE_SLAB -> dp
    F:net.minecraft.world.item.Item SMOOTH_STONE_SLAB -> dq
    F:net.minecraft.world.item.Item SANDSTONE_SLAB -> dr
    F:net.minecraft.world.item.Item CUT_STANDSTONE_SLAB -> ds
    F:net.minecraft.world.item.Item PETRIFIED_OAK_SLAB -> dt
    F:net.minecraft.world.item.Item COBBLESTONE_SLAB -> du
    F:net.minecraft.world.item.Item BRICK_SLAB -> dv
    F:net.minecraft.world.item.Item STONE_BRICK_SLAB -> dw
    F:net.minecraft.world.item.Item MUD_BRICK_SLAB -> dx
    F:net.minecraft.world.item.Item NETHER_BRICK_SLAB -> dy
    F:net.minecraft.world.item.Item QUARTZ_SLAB -> dz
    F:net.minecraft.world.item.Item LADDER -> ea
    F:net.minecraft.world.item.Item COBBLESTONE_STAIRS -> eb
    F:net.minecraft.world.item.Item SNOW -> ec
    F:net.minecraft.world.item.Item ICE -> ed
    F:net.minecraft.world.item.Item SNOW_BLOCK -> ee
    F:net.minecraft.world.item.Item CACTUS -> ef
    F:net.minecraft.world.item.Item CLAY -> eg
    F:net.minecraft.world.item.Item JUKEBOX -> eh
    F:net.minecraft.world.item.Item OAK_FENCE -> ei
    F:net.minecraft.world.item.Item SPRUCE_FENCE -> ej
    F:net.minecraft.world.item.Item BIRCH_FENCE -> ek
    F:net.minecraft.world.item.Item JUNGLE_FENCE -> el
    F:net.minecraft.world.item.Item ACACIA_FENCE -> em
    F:net.minecraft.world.item.Item DARK_OAK_FENCE -> en
    F:net.minecraft.world.item.Item MANGROVE_FENCE -> eo
    F:net.minecraft.world.item.Item CRIMSON_FENCE -> ep
    F:net.minecraft.world.item.Item WARPED_FENCE -> eq
    F:net.minecraft.world.item.Item PUMPKIN -> er
    F:net.minecraft.world.item.Item CARVED_PUMPKIN -> es
    F:net.minecraft.world.item.Item JACK_O_LANTERN -> et
    F:net.minecraft.world.item.Item NETHERRACK -> eu
    F:net.minecraft.world.item.Item SOUL_SAND -> ev
    F:net.minecraft.world.item.Item SOUL_SOIL -> ew
    F:net.minecraft.world.item.Item BASALT -> ex
    F:net.minecraft.world.item.Item POLISHED_BASALT -> ey
    F:net.minecraft.world.item.Item SMOOTH_BASALT -> ez
    F:net.minecraft.world.item.Item GLASS_PANE -> fa
    F:net.minecraft.world.item.Item MELON -> fb
    F:net.minecraft.world.item.Item VINE -> fc
    F:net.minecraft.world.item.Item GLOW_LICHEN -> fd
    F:net.minecraft.world.item.Item BRICK_STAIRS -> fe
    F:net.minecraft.world.item.Item STONE_BRICK_STAIRS -> ff
    F:net.minecraft.world.item.Item MUD_BRICK_STAIRS -> fg
    F:net.minecraft.world.item.Item MYCELIUM -> fh
    F:net.minecraft.world.item.Item LILY_PAD -> fi
    F:net.minecraft.world.item.Item NETHER_BRICKS -> fj
    F:net.minecraft.world.item.Item CRACKED_NETHER_BRICKS -> fk
    F:net.minecraft.world.item.Item CHISELED_NETHER_BRICKS -> fl
    F:net.minecraft.world.item.Item NETHER_BRICK_FENCE -> fm
    F:net.minecraft.world.item.Item NETHER_BRICK_STAIRS -> fn
    F:net.minecraft.world.item.Item SCULK -> fo
    F:net.minecraft.world.item.Item SCULK_VEIN -> fp
    F:net.minecraft.world.item.Item SCULK_CATALYST -> fq
    F:net.minecraft.world.item.Item SCULK_SHRIEKER -> fr
    F:net.minecraft.world.item.Item ENCHANTING_TABLE -> fs
    F:net.minecraft.world.item.Item END_PORTAL_FRAME -> ft
    F:net.minecraft.world.item.Item END_STONE -> fu
    F:net.minecraft.world.item.Item END_STONE_BRICKS -> fv
    F:net.minecraft.world.item.Item DRAGON_EGG -> fw
    F:net.minecraft.world.item.Item SANDSTONE_STAIRS -> fx
    F:net.minecraft.world.item.Item ENDER_CHEST -> fy
    F:net.minecraft.world.item.Item EMERALD_BLOCK -> fz
    F:net.minecraft.world.item.Item BLACKSTONE_WALL -> ga
    F:net.minecraft.world.item.Item POLISHED_BLACKSTONE_WALL -> gb
    F:net.minecraft.world.item.Item POLISHED_BLACKSTONE_BRICK_WALL -> gc
    F:net.minecraft.world.item.Item COBBLED_DEEPSLATE_WALL -> gd
    F:net.minecraft.world.item.Item POLISHED_DEEPSLATE_WALL -> ge
    F:net.minecraft.world.item.Item DEEPSLATE_BRICK_WALL -> gf
    F:net.minecraft.world.item.Item DEEPSLATE_TILE_WALL -> gg
    F:net.minecraft.world.item.Item ANVIL -> gh
    F:net.minecraft.world.item.Item CHIPPED_ANVIL -> gi
    F:net.minecraft.world.item.Item DAMAGED_ANVIL -> gj
    F:net.minecraft.world.item.Item CHISELED_QUARTZ_BLOCK -> gk
    F:net.minecraft.world.item.Item QUARTZ_BLOCK -> gl
    F:net.minecraft.world.item.Item QUARTZ_BRICKS -> gm
    F:net.minecraft.world.item.Item QUARTZ_PILLAR -> gn
    F:net.minecraft.world.item.Item QUARTZ_STAIRS -> go
    F:net.minecraft.world.item.Item WHITE_TERRACOTTA -> gp
    F:net.minecraft.world.item.Item ORANGE_TERRACOTTA -> gq
    F:net.minecraft.world.item.Item MAGENTA_TERRACOTTA -> gr
    F:net.minecraft.world.item.Item LIGHT_BLUE_TERRACOTTA -> gs
    F:net.minecraft.world.item.Item YELLOW_TERRACOTTA -> gt
    F:net.minecraft.world.item.Item LIME_TERRACOTTA -> gu
    F:net.minecraft.world.item.Item PINK_TERRACOTTA -> gv
    F:net.minecraft.world.item.Item GRAY_TERRACOTTA -> gw
    F:net.minecraft.world.item.Item LIGHT_GRAY_TERRACOTTA -> gx
    F:net.minecraft.world.item.Item CYAN_TERRACOTTA -> gy
    F:net.minecraft.world.item.Item PURPLE_TERRACOTTA -> gz
    F:net.minecraft.world.item.Item DIRT_PATH -> ha
    F:net.minecraft.world.item.Item SUNFLOWER -> hb
    F:net.minecraft.world.item.Item LILAC -> hc
    F:net.minecraft.world.item.Item ROSE_BUSH -> hd
    F:net.minecraft.world.item.Item PEONY -> he
    F:net.minecraft.world.item.Item TALL_GRASS -> hf
    F:net.minecraft.world.item.Item LARGE_FERN -> hg
    F:net.minecraft.world.item.Item WHITE_STAINED_GLASS -> hh
    F:net.minecraft.world.item.Item ORANGE_STAINED_GLASS -> hi
    F:net.minecraft.world.item.Item MAGENTA_STAINED_GLASS -> hj
    F:net.minecraft.world.item.Item LIGHT_BLUE_STAINED_GLASS -> hk
    F:net.minecraft.world.item.Item YELLOW_STAINED_GLASS -> hl
    F:net.minecraft.world.item.Item LIME_STAINED_GLASS -> hm
    F:net.minecraft.world.item.Item PINK_STAINED_GLASS -> hn
    F:net.minecraft.world.item.Item GRAY_STAINED_GLASS -> ho
    F:net.minecraft.world.item.Item LIGHT_GRAY_STAINED_GLASS -> hp
    F:net.minecraft.world.item.Item CYAN_STAINED_GLASS -> hq
    F:net.minecraft.world.item.Item PURPLE_STAINED_GLASS -> hr
    F:net.minecraft.world.item.Item BLUE_STAINED_GLASS -> hs
    F:net.minecraft.world.item.Item BROWN_STAINED_GLASS -> ht
    F:net.minecraft.world.item.Item GREEN_STAINED_GLASS -> hu
    F:net.minecraft.world.item.Item RED_STAINED_GLASS -> hv
    F:net.minecraft.world.item.Item BLACK_STAINED_GLASS -> hw
    F:net.minecraft.world.item.Item WHITE_STAINED_GLASS_PANE -> hx
    F:net.minecraft.world.item.Item ORANGE_STAINED_GLASS_PANE -> hy
    F:net.minecraft.world.item.Item MAGENTA_STAINED_GLASS_PANE -> hz
    F:net.minecraft.world.item.Item MAGMA_BLOCK -> ia
    F:net.minecraft.world.item.Item NETHER_WART_BLOCK -> ib
    F:net.minecraft.world.item.Item WARPED_WART_BLOCK -> ic
    F:net.minecraft.world.item.Item RED_NETHER_BRICKS -> id
    F:net.minecraft.world.item.Item BONE_BLOCK -> ie
    F:net.minecraft.world.item.Item STRUCTURE_VOID -> if
    F:net.minecraft.world.item.Item SHULKER_BOX -> ig
    F:net.minecraft.world.item.Item WHITE_SHULKER_BOX -> ih
    F:net.minecraft.world.item.Item ORANGE_SHULKER_BOX -> ii
    F:net.minecraft.world.item.Item MAGENTA_SHULKER_BOX -> ij
    F:net.minecraft.world.item.Item LIGHT_BLUE_SHULKER_BOX -> ik
    F:net.minecraft.world.item.Item YELLOW_SHULKER_BOX -> il
    F:net.minecraft.world.item.Item LIME_SHULKER_BOX -> im
    F:net.minecraft.world.item.Item PINK_SHULKER_BOX -> in
    F:net.minecraft.world.item.Item GRAY_SHULKER_BOX -> io
    F:net.minecraft.world.item.Item LIGHT_GRAY_SHULKER_BOX -> ip
    F:net.minecraft.world.item.Item CYAN_SHULKER_BOX -> iq
    F:net.minecraft.world.item.Item PURPLE_SHULKER_BOX -> ir
    F:net.minecraft.world.item.Item BLUE_SHULKER_BOX -> is
    F:net.minecraft.world.item.Item BROWN_SHULKER_BOX -> it
    F:net.minecraft.world.item.Item GREEN_SHULKER_BOX -> iu
    F:net.minecraft.world.item.Item RED_SHULKER_BOX -> iv
    F:net.minecraft.world.item.Item BLACK_SHULKER_BOX -> iw
    F:net.minecraft.world.item.Item WHITE_GLAZED_TERRACOTTA -> ix
    F:net.minecraft.world.item.Item ORANGE_GLAZED_TERRACOTTA -> iy
    F:net.minecraft.world.item.Item MAGENTA_GLAZED_TERRACOTTA -> iz
    F:net.minecraft.world.item.Item GREEN_CONCRETE -> ja
    F:net.minecraft.world.item.Item RED_CONCRETE -> jb
    F:net.minecraft.world.item.Item BLACK_CONCRETE -> jc
    F:net.minecraft.world.item.Item WHITE_CONCRETE_POWDER -> jd
    F:net.minecraft.world.item.Item ORANGE_CONCRETE_POWDER -> je
    F:net.minecraft.world.item.Item MAGENTA_CONCRETE_POWDER -> jf
    F:net.minecraft.world.item.Item LIGHT_BLUE_CONCRETE_POWDER -> jg
    F:net.minecraft.world.item.Item YELLOW_CONCRETE_POWDER -> jh
    F:net.minecraft.world.item.Item LIME_CONCRETE_POWDER -> ji
    F:net.minecraft.world.item.Item PINK_CONCRETE_POWDER -> jj
    F:net.minecraft.world.item.Item GRAY_CONCRETE_POWDER -> jk
    F:net.minecraft.world.item.Item LIGHT_GRAY_CONCRETE_POWDER -> jl
    F:net.minecraft.world.item.Item CYAN_CONCRETE_POWDER -> jm
    F:net.minecraft.world.item.Item PURPLE_CONCRETE_POWDER -> jn
    F:net.minecraft.world.item.Item BLUE_CONCRETE_POWDER -> jo
    F:net.minecraft.world.item.Item BROWN_CONCRETE_POWDER -> jp
    F:net.minecraft.world.item.Item GREEN_CONCRETE_POWDER -> jq
    F:net.minecraft.world.item.Item RED_CONCRETE_POWDER -> jr
    F:net.minecraft.world.item.Item BLACK_CONCRETE_POWDER -> js
    F:net.minecraft.world.item.Item TURTLE_EGG -> jt
    F:net.minecraft.world.item.Item DEAD_TUBE_CORAL_BLOCK -> ju
    F:net.minecraft.world.item.Item DEAD_BRAIN_CORAL_BLOCK -> jv
    F:net.minecraft.world.item.Item DEAD_BUBBLE_CORAL_BLOCK -> jw
    F:net.minecraft.world.item.Item DEAD_FIRE_CORAL_BLOCK -> jx
    F:net.minecraft.world.item.Item DEAD_HORN_CORAL_BLOCK -> jy
    F:net.minecraft.world.item.Item TUBE_CORAL_BLOCK -> jz
    F:net.minecraft.world.item.Item POLISHED_GRANITE_STAIRS -> ka
    F:net.minecraft.world.item.Item SMOOTH_RED_SANDSTONE_STAIRS -> kb
    F:net.minecraft.world.item.Item MOSSY_STONE_BRICK_STAIRS -> kc
    F:net.minecraft.world.item.Item POLISHED_DIORITE_STAIRS -> kd
    F:net.minecraft.world.item.Item MOSSY_COBBLESTONE_STAIRS -> ke
    F:net.minecraft.world.item.Item END_STONE_BRICK_STAIRS -> kf
    F:net.minecraft.world.item.Item STONE_STAIRS -> kg
    F:net.minecraft.world.item.Item SMOOTH_SANDSTONE_STAIRS -> kh
    F:net.minecraft.world.item.Item SMOOTH_QUARTZ_STAIRS -> ki
    F:net.minecraft.world.item.Item GRANITE_STAIRS -> kj
    F:net.minecraft.world.item.Item ANDESITE_STAIRS -> kk
    F:net.minecraft.world.item.Item RED_NETHER_BRICK_STAIRS -> kl
    F:net.minecraft.world.item.Item POLISHED_ANDESITE_STAIRS -> km
    F:net.minecraft.world.item.Item DIORITE_STAIRS -> kn
    F:net.minecraft.world.item.Item COBBLED_DEEPSLATE_STAIRS -> ko
    F:net.minecraft.world.item.Item POLISHED_DEEPSLATE_STAIRS -> kp
    F:net.minecraft.world.item.Item DEEPSLATE_BRICK_STAIRS -> kq
    F:net.minecraft.world.item.Item DEEPSLATE_TILE_STAIRS -> kr
    F:net.minecraft.world.item.Item POLISHED_GRANITE_SLAB -> ks
    F:net.minecraft.world.item.Item SMOOTH_RED_SANDSTONE_SLAB -> kt
    F:net.minecraft.world.item.Item MOSSY_STONE_BRICK_SLAB -> ku
    F:net.minecraft.world.item.Item POLISHED_DIORITE_SLAB -> kv
    F:net.minecraft.world.item.Item MOSSY_COBBLESTONE_SLAB -> kw
    F:net.minecraft.world.item.Item END_STONE_BRICK_SLAB -> kx
    F:net.minecraft.world.item.Item SMOOTH_SANDSTONE_SLAB -> ky
    F:net.minecraft.world.item.Item SMOOTH_QUARTZ_SLAB -> kz
    F:net.minecraft.world.item.Item LIGHTNING_ROD -> la
    F:net.minecraft.world.item.Item DAYLIGHT_DETECTOR -> lb
    F:net.minecraft.world.item.Item SCULK_SENSOR -> lc
    F:net.minecraft.world.item.Item TRIPWIRE_HOOK -> ld
    F:net.minecraft.world.item.Item TRAPPED_CHEST -> le
    F:net.minecraft.world.item.Item TNT -> lf
    F:net.minecraft.world.item.Item REDSTONE_LAMP -> lg
    F:net.minecraft.world.item.Item NOTE_BLOCK -> lh
    F:net.minecraft.world.item.Item STONE_BUTTON -> li
    F:net.minecraft.world.item.Item POLISHED_BLACKSTONE_BUTTON -> lj
    F:net.minecraft.world.item.Item OAK_BUTTON -> lk
    F:net.minecraft.world.item.Item SPRUCE_BUTTON -> ll
    F:net.minecraft.world.item.Item BIRCH_BUTTON -> lm
    F:net.minecraft.world.item.Item JUNGLE_BUTTON -> ln
    F:net.minecraft.world.item.Item ACACIA_BUTTON -> lo
    F:net.minecraft.world.item.Item DARK_OAK_BUTTON -> lp
    F:net.minecraft.world.item.Item MANGROVE_BUTTON -> lq
    F:net.minecraft.world.item.Item CRIMSON_BUTTON -> lr
    F:net.minecraft.world.item.Item WARPED_BUTTON -> ls
    F:net.minecraft.world.item.Item STONE_PRESSURE_PLATE -> lt
    F:net.minecraft.world.item.Item POLISHED_BLACKSTONE_PRESSURE_PLATE -> lu
    F:net.minecraft.world.item.Item LIGHT_WEIGHTED_PRESSURE_PLATE -> lv
    F:net.minecraft.world.item.Item HEAVY_WEIGHTED_PRESSURE_PLATE -> lw
    F:net.minecraft.world.item.Item OAK_PRESSURE_PLATE -> lx
    F:net.minecraft.world.item.Item SPRUCE_PRESSURE_PLATE -> ly
    F:net.minecraft.world.item.Item BIRCH_PRESSURE_PLATE -> lz
    F:net.minecraft.world.item.Item OAK_FENCE_GATE -> ma
    F:net.minecraft.world.item.Item SPRUCE_FENCE_GATE -> mb
    F:net.minecraft.world.item.Item BIRCH_FENCE_GATE -> mc
    F:net.minecraft.world.item.Item JUNGLE_FENCE_GATE -> md
    F:net.minecraft.world.item.Item ACACIA_FENCE_GATE -> me
    F:net.minecraft.world.item.Item DARK_OAK_FENCE_GATE -> mf
    F:net.minecraft.world.item.Item MANGROVE_FENCE_GATE -> mg
    F:net.minecraft.world.item.Item CRIMSON_FENCE_GATE -> mh
    F:net.minecraft.world.item.Item WARPED_FENCE_GATE -> mi
    F:net.minecraft.world.item.Item POWERED_RAIL -> mj
    F:net.minecraft.world.item.Item DETECTOR_RAIL -> mk
    F:net.minecraft.world.item.Item RAIL -> ml
    F:net.minecraft.world.item.Item ACTIVATOR_RAIL -> mm
    F:net.minecraft.world.item.Item SADDLE -> mn
    F:net.minecraft.world.item.Item MINECART -> mo
    F:net.minecraft.world.item.Item CHEST_MINECART -> mp
    F:net.minecraft.world.item.Item FURNACE_MINECART -> mq
    F:net.minecraft.world.item.Item TNT_MINECART -> mr
    F:net.minecraft.world.item.Item HOPPER_MINECART -> ms
    F:net.minecraft.world.item.Item CARROT_ON_A_STICK -> mt
    F:net.minecraft.world.item.Item WARPED_FUNGUS_ON_A_STICK -> mu
    F:net.minecraft.world.item.Item ELYTRA -> mv
    F:net.minecraft.world.item.Item OAK_BOAT -> mw
    F:net.minecraft.world.item.Item OAK_CHEST_BOAT -> mx
    F:net.minecraft.world.item.Item SPRUCE_BOAT -> my
    F:net.minecraft.world.item.Item SPRUCE_CHEST_BOAT -> mz
    F:net.minecraft.world.item.Item IRON_INGOT -> na
    F:net.minecraft.world.item.Item RAW_COPPER -> nb
    F:net.minecraft.world.item.Item COPPER_INGOT -> nc
    F:net.minecraft.world.item.Item RAW_GOLD -> nd
    F:net.minecraft.world.item.Item GOLD_INGOT -> ne
    F:net.minecraft.world.item.Item NETHERITE_INGOT -> nf
    F:net.minecraft.world.item.Item NETHERITE_SCRAP -> ng
    F:net.minecraft.world.item.Item WOODEN_SWORD -> nh
    F:net.minecraft.world.item.Item WOODEN_SHOVEL -> ni
    F:net.minecraft.world.item.Item WOODEN_PICKAXE -> nj
    F:net.minecraft.world.item.Item WOODEN_AXE -> nk
    F:net.minecraft.world.item.Item WOODEN_HOE -> nl
    F:net.minecraft.world.item.Item STONE_SWORD -> nm
    F:net.minecraft.world.item.Item STONE_SHOVEL -> nn
    F:net.minecraft.world.item.Item STONE_PICKAXE -> no
    F:net.minecraft.world.item.Item STONE_AXE -> np
    F:net.minecraft.world.item.Item STONE_HOE -> nq
    F:net.minecraft.world.item.Item GOLDEN_SWORD -> nr
    F:net.minecraft.world.item.Item GOLDEN_SHOVEL -> ns
    F:net.minecraft.world.item.Item GOLDEN_PICKAXE -> nt
    F:net.minecraft.world.item.Item GOLDEN_AXE -> nu
    F:net.minecraft.world.item.Item GOLDEN_HOE -> nv
    F:net.minecraft.world.item.Item IRON_SWORD -> nw
    F:net.minecraft.world.item.Item IRON_SHOVEL -> nx
    F:net.minecraft.world.item.Item IRON_PICKAXE -> ny
    F:net.minecraft.world.item.Item IRON_AXE -> nz
    F:net.minecraft.world.item.Item CHAINMAIL_LEGGINGS -> oa
    F:net.minecraft.world.item.Item CHAINMAIL_BOOTS -> ob
    F:net.minecraft.world.item.Item IRON_HELMET -> oc
    F:net.minecraft.world.item.Item IRON_CHESTPLATE -> od
    F:net.minecraft.world.item.Item IRON_LEGGINGS -> oe
    F:net.minecraft.world.item.Item IRON_BOOTS -> of
    F:net.minecraft.world.item.Item DIAMOND_HELMET -> og
    F:net.minecraft.world.item.Item DIAMOND_CHESTPLATE -> oh
    F:net.minecraft.world.item.Item DIAMOND_LEGGINGS -> oi
    F:net.minecraft.world.item.Item DIAMOND_BOOTS -> oj
    F:net.minecraft.world.item.Item GOLDEN_HELMET -> ok
    F:net.minecraft.world.item.Item GOLDEN_CHESTPLATE -> ol
    F:net.minecraft.world.item.Item GOLDEN_LEGGINGS -> om
    F:net.minecraft.world.item.Item GOLDEN_BOOTS -> on
    F:net.minecraft.world.item.Item NETHERITE_HELMET -> oo
    F:net.minecraft.world.item.Item NETHERITE_CHESTPLATE -> op
    F:net.minecraft.world.item.Item NETHERITE_LEGGINGS -> oq
    F:net.minecraft.world.item.Item NETHERITE_BOOTS -> or
    F:net.minecraft.world.item.Item FLINT -> os
    F:net.minecraft.world.item.Item PORKCHOP -> ot
    F:net.minecraft.world.item.Item COOKED_PORKCHOP -> ou
    F:net.minecraft.world.item.Item PAINTING -> ov
    F:net.minecraft.world.item.Item GOLDEN_APPLE -> ow
    F:net.minecraft.world.item.Item ENCHANTED_GOLDEN_APPLE -> ox
    F:net.minecraft.world.item.Item OAK_SIGN -> oy
    F:net.minecraft.world.item.Item SPRUCE_SIGN -> oz
    F:net.minecraft.world.item.Item EGG -> pa
    F:net.minecraft.world.item.Item COMPASS -> pb
    F:net.minecraft.world.item.Item RECOVERY_COMPASS -> pc
    F:net.minecraft.world.item.Item BUNDLE -> pd
    F:net.minecraft.world.item.Item FISHING_ROD -> pe
    F:net.minecraft.world.item.Item CLOCK -> pf
    F:net.minecraft.world.item.Item SPYGLASS -> pg
    F:net.minecraft.world.item.Item GLOWSTONE_DUST -> ph
    F:net.minecraft.world.item.Item COD -> pi
    F:net.minecraft.world.item.Item SALMON -> pj
    F:net.minecraft.world.item.Item TROPICAL_FISH -> pk
    F:net.minecraft.world.item.Item PUFFERFISH -> pl
    F:net.minecraft.world.item.Item COOKED_COD -> pm
    F:net.minecraft.world.item.Item COOKED_SALMON -> pn
    F:net.minecraft.world.item.Item INK_SAC -> po
    F:net.minecraft.world.item.Item GLOW_INK_SAC -> pp
    F:net.minecraft.world.item.Item COCOA_BEANS -> pq
    F:net.minecraft.world.item.Item WHITE_DYE -> pr
    F:net.minecraft.world.item.Item ORANGE_DYE -> ps
    F:net.minecraft.world.item.Item MAGENTA_DYE -> pt
    F:net.minecraft.world.item.Item LIGHT_BLUE_DYE -> pu
    F:net.minecraft.world.item.Item YELLOW_DYE -> pv
    F:net.minecraft.world.item.Item LIME_DYE -> pw
    F:net.minecraft.world.item.Item PINK_DYE -> px
    F:net.minecraft.world.item.Item GRAY_DYE -> py
    F:net.minecraft.world.item.Item LIGHT_GRAY_DYE -> pz
    F:net.minecraft.world.item.Item BLACK_BED -> qa
    F:net.minecraft.world.item.Item COOKIE -> qb
    F:net.minecraft.world.item.Item FILLED_MAP -> qc
    F:net.minecraft.world.item.Item SHEARS -> qd
    F:net.minecraft.world.item.Item MELON_SLICE -> qe
    F:net.minecraft.world.item.Item DRIED_KELP -> qf
    F:net.minecraft.world.item.Item PUMPKIN_SEEDS -> qg
    F:net.minecraft.world.item.Item MELON_SEEDS -> qh
    F:net.minecraft.world.item.Item BEEF -> qi
    F:net.minecraft.world.item.Item COOKED_BEEF -> qj
    F:net.minecraft.world.item.Item CHICKEN -> qk
    F:net.minecraft.world.item.Item COOKED_CHICKEN -> ql
    F:net.minecraft.world.item.Item ROTTEN_FLESH -> qm
    F:net.minecraft.world.item.Item ENDER_PEARL -> qn
    F:net.minecraft.world.item.Item BLAZE_ROD -> qo
    F:net.minecraft.world.item.Item GHAST_TEAR -> qp
    F:net.minecraft.world.item.Item GOLD_NUGGET -> qq
    F:net.minecraft.world.item.Item NETHER_WART -> qr
    F:net.minecraft.world.item.Item POTION -> qs
    F:net.minecraft.world.item.Item GLASS_BOTTLE -> qt
    F:net.minecraft.world.item.Item SPIDER_EYE -> qu
    F:net.minecraft.world.item.Item FERMENTED_SPIDER_EYE -> qv
    F:net.minecraft.world.item.Item BLAZE_POWDER -> qw
    F:net.minecraft.world.item.Item MAGMA_CREAM -> qx
    F:net.minecraft.world.item.Item BREWING_STAND -> qy
    F:net.minecraft.world.item.Item CAULDRON -> qz
    F:net.minecraft.world.item.Item HOGLIN_SPAWN_EGG -> ra
    F:net.minecraft.world.item.Item HORSE_SPAWN_EGG -> rb
    F:net.minecraft.world.item.Item HUSK_SPAWN_EGG -> rc
    F:net.minecraft.world.item.Item LLAMA_SPAWN_EGG -> rd
    F:net.minecraft.world.item.Item MAGMA_CUBE_SPAWN_EGG -> re
    F:net.minecraft.world.item.Item MOOSHROOM_SPAWN_EGG -> rf
    F:net.minecraft.world.item.Item MULE_SPAWN_EGG -> rg
    F:net.minecraft.world.item.Item OCELOT_SPAWN_EGG -> rh
    F:net.minecraft.world.item.Item PANDA_SPAWN_EGG -> ri
    F:net.minecraft.world.item.Item PARROT_SPAWN_EGG -> rj
    F:net.minecraft.world.item.Item PHANTOM_SPAWN_EGG -> rk
    F:net.minecraft.world.item.Item PIG_SPAWN_EGG -> rl
    F:net.minecraft.world.item.Item PIGLIN_SPAWN_EGG -> rm
    F:net.minecraft.world.item.Item PIGLIN_BRUTE_SPAWN_EGG -> rn
    F:net.minecraft.world.item.Item PILLAGER_SPAWN_EGG -> ro
    F:net.minecraft.world.item.Item POLAR_BEAR_SPAWN_EGG -> rp
    F:net.minecraft.world.item.Item PUFFERFISH_SPAWN_EGG -> rq
    F:net.minecraft.world.item.Item RABBIT_SPAWN_EGG -> rr
    F:net.minecraft.world.item.Item RAVAGER_SPAWN_EGG -> rs
    F:net.minecraft.world.item.Item SALMON_SPAWN_EGG -> rt
    F:net.minecraft.world.item.Item SHEEP_SPAWN_EGG -> ru
    F:net.minecraft.world.item.Item SHULKER_SPAWN_EGG -> rv
    F:net.minecraft.world.item.Item SILVERFISH_SPAWN_EGG -> rw
    F:net.minecraft.world.item.Item SKELETON_SPAWN_EGG -> rx
    F:net.minecraft.world.item.Item SKELETON_HORSE_SPAWN_EGG -> ry
    F:net.minecraft.world.item.Item SLIME_SPAWN_EGG -> rz
    F:net.minecraft.world.item.Item GLOW_ITEM_FRAME -> sa
    F:net.minecraft.world.item.Item FLOWER_POT -> sb
    F:net.minecraft.world.item.Item CARROT -> sc
    F:net.minecraft.world.item.Item POTATO -> sd
    F:net.minecraft.world.item.Item BAKED_POTATO -> se
    F:net.minecraft.world.item.Item POISONOUS_POTATO -> sf
    F:net.minecraft.world.item.Item MAP -> sg
    F:net.minecraft.world.item.Item GOLDEN_CARROT -> sh
    F:net.minecraft.world.item.Item SKELETON_SKULL -> si
    F:net.minecraft.world.item.Item WITHER_SKELETON_SKULL -> sj
    F:net.minecraft.world.item.Item PLAYER_HEAD -> sk
    F:net.minecraft.world.item.Item ZOMBIE_HEAD -> sl
    F:net.minecraft.world.item.Item CREEPER_HEAD -> sm
    F:net.minecraft.world.item.Item DRAGON_HEAD -> sn
    F:net.minecraft.world.item.Item NETHER_STAR -> so
    F:net.minecraft.world.item.Item PUMPKIN_PIE -> sp
    F:net.minecraft.world.item.Item FIREWORK_ROCKET -> sq
    F:net.minecraft.world.item.Item FIREWORK_STAR -> sr
    F:net.minecraft.world.item.Item ENCHANTED_BOOK -> ss
    F:net.minecraft.world.item.Item NETHER_BRICK -> st
    F:net.minecraft.world.item.Item PRISMARINE_SHARD -> su
    F:net.minecraft.world.item.Item PRISMARINE_CRYSTALS -> sv
    F:net.minecraft.world.item.Item RABBIT -> sw
    F:net.minecraft.world.item.Item COOKED_RABBIT -> sx
    F:net.minecraft.world.item.Item RABBIT_STEW -> sy
    F:net.minecraft.world.item.Item RABBIT_FOOT -> sz
    F:net.minecraft.world.item.Item BLACK_BANNER -> ta
    F:net.minecraft.world.item.Item END_CRYSTAL -> tb
    F:net.minecraft.world.item.Item CHORUS_FRUIT -> tc
    F:net.minecraft.world.item.Item POPPED_CHORUS_FRUIT -> td
    F:net.minecraft.world.item.Item BEETROOT -> te
    F:net.minecraft.world.item.Item BEETROOT_SEEDS -> tf
    F:net.minecraft.world.item.Item BEETROOT_SOUP -> tg
    F:net.minecraft.world.item.Item DRAGON_BREATH -> th
    F:net.minecraft.world.item.Item SPLASH_POTION -> ti
    F:net.minecraft.world.item.Item SPECTRAL_ARROW -> tj
    F:net.minecraft.world.item.Item TIPPED_ARROW -> tk
    F:net.minecraft.world.item.Item LINGERING_POTION -> tl
    F:net.minecraft.world.item.Item SHIELD -> tm
    F:net.minecraft.world.item.Item TOTEM_OF_UNDYING -> tn
    F:net.minecraft.world.item.Item SHULKER_SHELL -> to
    F:net.minecraft.world.item.Item IRON_NUGGET -> tp
    F:net.minecraft.world.item.Item KNOWLEDGE_BOOK -> tq
    F:net.minecraft.world.item.Item DEBUG_STICK -> tr
    F:net.minecraft.world.item.Item MUSIC_DISC_13 -> ts
    F:net.minecraft.world.item.Item MUSIC_DISC_CAT -> tt
    F:net.minecraft.world.item.Item MUSIC_DISC_BLOCKS -> tu
    F:net.minecraft.world.item.Item MUSIC_DISC_CHIRP -> tv
    F:net.minecraft.world.item.Item MUSIC_DISC_FAR -> tw
    F:net.minecraft.world.item.Item MUSIC_DISC_MALL -> tx
    F:net.minecraft.world.item.Item MUSIC_DISC_MELLOHI -> ty
    F:net.minecraft.world.item.Item MUSIC_DISC_STAL -> tz
    F:net.minecraft.world.item.Item CARTOGRAPHY_TABLE -> ua
    F:net.minecraft.world.item.Item FLETCHING_TABLE -> ub
    F:net.minecraft.world.item.Item GRINDSTONE -> uc
    F:net.minecraft.world.item.Item SMITHING_TABLE -> ud
    F:net.minecraft.world.item.Item STONECUTTER -> ue
    F:net.minecraft.world.item.Item BELL -> uf
    F:net.minecraft.world.item.Item LANTERN -> ug
    F:net.minecraft.world.item.Item SOUL_LANTERN -> uh
    F:net.minecraft.world.item.Item SWEET_BERRIES -> ui
    F:net.minecraft.world.item.Item GLOW_BERRIES -> uj
    F:net.minecraft.world.item.Item CAMPFIRE -> uk
    F:net.minecraft.world.item.Item SOUL_CAMPFIRE -> ul
    F:net.minecraft.world.item.Item SHROOMLIGHT -> um
    F:net.minecraft.world.item.Item HONEYCOMB -> un
    F:net.minecraft.world.item.Item BEE_NEST -> uo
    F:net.minecraft.world.item.Item BEEHIVE -> up
    F:net.minecraft.world.item.Item HONEY_BOTTLE -> uq
    F:net.minecraft.world.item.Item HONEYCOMB_BLOCK -> ur
    F:net.minecraft.world.item.Item LODESTONE -> us
    F:net.minecraft.world.item.Item CRYING_OBSIDIAN -> ut
    F:net.minecraft.world.item.Item BLACKSTONE -> uu
    F:net.minecraft.world.item.Item BLACKSTONE_SLAB -> uv
    F:net.minecraft.world.item.Item BLACKSTONE_STAIRS -> uw
    F:net.minecraft.world.item.Item GILDED_BLACKSTONE -> ux
    F:net.minecraft.world.item.Item POLISHED_BLACKSTONE -> uy
    F:net.minecraft.world.item.Item POLISHED_BLACKSTONE_SLAB -> uz
    F:net.minecraft.world.item.Item LARGE_AMETHYST_BUD -> va
    F:net.minecraft.world.item.Item AMETHYST_CLUSTER -> vb
    F:net.minecraft.world.item.Item POINTED_DRIPSTONE -> vc
    F:net.minecraft.world.item.Item OCHRE_FROGLIGHT -> vd
    F:net.minecraft.world.item.Item VERDANT_FROGLIGHT -> ve
    F:net.minecraft.world.item.Item PEARLESCENT_FROGLIGHT -> vf
    F:net.minecraft.world.item.Item FROGSPAWN -> vg
    F:net.minecraft.world.item.Item ECHO_SHARD -> vh
    M:java.util.Optional ifPart2(java.lang.Object) -> a
    M:net.minecraft.world.item.Item registerBlock(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.world.item.Item registerBlock(net.minecraft.world.level.block.Block,net.minecraft.world.item.CreativeModeTab) -> a
    M:net.minecraft.world.item.Item registerBlock(net.minecraft.world.level.block.Block,java.util.Optional) -> a
    M:net.minecraft.world.item.Item registerBlock(net.minecraft.world.level.block.Block,net.minecraft.world.item.CreativeModeTab,net.minecraft.world.level.block.Block[]) -> a
    M:net.minecraft.world.item.Item registerBlock(net.minecraft.world.item.ItemBlock) -> a
    M:net.minecraft.world.item.Item registerBlock(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item) -> a
    M:net.minecraft.world.item.Item registerItem(java.lang.String,net.minecraft.world.item.Item) -> a
    M:net.minecraft.world.item.Item registerItem(net.minecraft.resources.MinecraftKey,net.minecraft.world.item.Item) -> a
net.minecraft.world.item.KnowledgeBookItem -> cad -> net.minecraft.world.item.ItemKnowledgeBook
    F:java.lang.String RECIPE_TAG -> a
    F:org.slf4j.Logger LOGGER -> b
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
net.minecraft.world.item.LeadItem -> cae -> net.minecraft.world.item.ItemLeash
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:net.minecraft.world.EnumInteractionResult bindPlayerMobs(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.item.LingeringPotionItem -> caf -> net.minecraft.world.item.ItemLingeringPotion
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
net.minecraft.world.item.MapItem -> cag -> net.minecraft.world.item.ItemWorldMap
    F:int IMAGE_WIDTH -> a
    F:int IMAGE_HEIGHT -> b
    F:int DEFAULT_MAP_COLOR -> c
    F:java.lang.String TAG_MAP -> d
    M:net.minecraft.world.item.ItemStack create(net.minecraft.world.level.World,int,int,byte,boolean,boolean) -> a
    M:net.minecraft.world.level.saveddata.maps.WorldMap getSavedData(java.lang.Integer,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.level.saveddata.maps.WorldMap getSavedData(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World) -> a
    M:java.lang.Integer getMapId(net.minecraft.world.item.ItemStack) -> d
    M:int createNewSavedData(net.minecraft.world.level.World,int,int,int,boolean,boolean,net.minecraft.resources.ResourceKey) -> a
    M:void storeMapData(net.minecraft.world.item.ItemStack,int) -> a
    M:void createAndStoreSavedData(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,int,int,int,boolean,boolean,net.minecraft.resources.ResourceKey) -> a
    M:java.lang.String makeKey(int) -> a
    M:void update(net.minecraft.world.level.World,net.minecraft.world.entity.Entity,net.minecraft.world.level.saveddata.maps.WorldMap) -> a
    M:net.minecraft.world.level.block.state.IBlockData getCorrectStateForFluidBlock(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
    M:boolean isBiomeWatery(boolean[],int,int) -> a
    M:void renderBiomePreviewMap(net.minecraft.server.level.WorldServer,net.minecraft.world.item.ItemStack) -> a
    M:void inventoryTick(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.Entity,int,boolean) -> a
    M:net.minecraft.network.protocol.Packet getUpdatePacket(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void onCraftedBy(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman) -> b
    M:void scaleMap(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,int) -> a
    M:void lockMap(net.minecraft.world.level.World,net.minecraft.world.item.ItemStack) -> a
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:int getColor(net.minecraft.world.item.ItemStack) -> k
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
net.minecraft.world.item.MilkBucketItem -> cah -> net.minecraft.world.item.ItemMilkBucket
    F:int DRINK_DURATION -> a
    M:net.minecraft.world.item.ItemStack finishUsingItem(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving) -> a
    M:int getUseDuration(net.minecraft.world.item.ItemStack) -> b
    M:net.minecraft.world.item.EnumAnimation getUseAnimation(net.minecraft.world.item.ItemStack) -> c
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
net.minecraft.world.item.MinecartItem -> cai -> net.minecraft.world.item.ItemMinecart
    F:net.minecraft.core.dispenser.IDispenseBehavior DISPENSE_ITEM_BEHAVIOR -> a
    F:net.minecraft.world.entity.vehicle.EntityMinecartAbstract$EnumMinecartType type -> b
    F:net.minecraft.core.dispenser.DispenseBehaviorItem defaultDispenseItemBehavior -> c
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:net.minecraft.world.item.ItemStack execute(net.minecraft.core.ISourceBlock,net.minecraft.world.item.ItemStack) -> a
    M:void playSound(net.minecraft.core.ISourceBlock) -> a
net.minecraft.world.item.MobBucketItem -> caj -> net.minecraft.world.item.MobBucketItem
    F:net.minecraft.world.entity.EntityTypes type -> a
    F:net.minecraft.sounds.SoundEffect emptySound -> b
    M:void checkExtraContent(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.World,net.minecraft.world.item.ItemStack,net.minecraft.core.BlockPosition) -> a
    M:void playEmptySound(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:void spawn(net.minecraft.server.level.WorldServer,net.minecraft.world.item.ItemStack,net.minecraft.core.BlockPosition) -> a
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
net.minecraft.world.item.NameTagItem -> cak -> net.minecraft.world.item.ItemNameTag
    M:net.minecraft.world.EnumInteractionResult interactLivingEntity(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.entity.EntityLiving,net.minecraft.world.EnumHand) -> a
net.minecraft.world.item.PickaxeItem -> cal -> net.minecraft.world.item.ItemPickaxe
net.minecraft.world.item.PlaceOnWaterBlockItem -> cam -> net.minecraft.world.item.PlaceOnWaterBlockItem
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
net.minecraft.world.item.PlayerHeadItem -> can -> net.minecraft.world.item.ItemSkullPlayer
    F:java.lang.String TAG_SKULL_OWNER -> b
    M:net.minecraft.network.chat.IChatBaseComponent getName(net.minecraft.world.item.ItemStack) -> m
    M:void verifyTagAfterLoad(net.minecraft.nbt.NBTTagCompound) -> b
net.minecraft.world.item.PotionItem -> cao -> net.minecraft.world.item.ItemPotion
    F:int DRINK_DURATION -> a
    M:net.minecraft.world.item.ItemStack finishUsingItem(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:int getUseDuration(net.minecraft.world.item.ItemStack) -> b
    M:net.minecraft.world.item.EnumAnimation getUseAnimation(net.minecraft.world.item.ItemStack) -> c
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:java.lang.String getDescriptionId(net.minecraft.world.item.ItemStack) -> j
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:boolean isFoil(net.minecraft.world.item.ItemStack) -> i
    M:void fillItemCategory(net.minecraft.world.item.CreativeModeTab,net.minecraft.core.NonNullList) -> a
net.minecraft.world.item.ProjectileWeaponItem -> cap -> net.minecraft.world.item.ItemProjectileWeapon
    F:java.util.function.Predicate ARROW_ONLY -> c
    F:java.util.function.Predicate ARROW_OR_FIREWORK -> d
    M:java.util.function.Predicate getSupportedHeldProjectiles() -> e
    M:net.minecraft.world.item.ItemStack getHeldProjectile(net.minecraft.world.entity.EntityLiving,java.util.function.Predicate) -> a
    M:int getEnchantmentValue() -> c
net.minecraft.world.item.Rarity -> caq -> net.minecraft.world.item.EnumItemRarity
    F:net.minecraft.world.item.EnumItemRarity COMMON -> a
    F:net.minecraft.world.item.EnumItemRarity UNCOMMON -> b
    F:net.minecraft.world.item.EnumItemRarity RARE -> c
    F:net.minecraft.world.item.EnumItemRarity EPIC -> d
    F:net.minecraft.EnumChatFormat color -> e
net.minecraft.world.item.RecordItem -> car -> net.minecraft.world.item.ItemRecord
    F:java.util.Map BY_NAME -> a
    F:int analogOutput -> b
    F:net.minecraft.sounds.SoundEffect sound -> c
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:int getAnalogOutput() -> i
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:net.minecraft.network.chat.IChatMutableComponent getDisplayName() -> j
    M:net.minecraft.world.item.ItemRecord getBySound(net.minecraft.sounds.SoundEffect) -> a
    M:net.minecraft.sounds.SoundEffect getSound() -> y
net.minecraft.world.item.SaddleItem -> cas -> net.minecraft.world.item.ItemSaddle
    M:net.minecraft.world.EnumInteractionResult interactLivingEntity(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.entity.EntityLiving,net.minecraft.world.EnumHand) -> a
net.minecraft.world.item.ScaffoldingBlockItem -> cat -> net.minecraft.world.item.ItemScaffolding
    M:net.minecraft.world.item.context.BlockActionContext updatePlacementContext(net.minecraft.world.item.context.BlockActionContext) -> b
    M:boolean mustSurvive() -> d
net.minecraft.world.item.ServerItemCooldowns -> cau -> net.minecraft.world.item.ItemCooldownPlayer
    F:net.minecraft.server.level.EntityPlayer player -> a
    M:void onCooldownStarted(net.minecraft.world.item.Item,int) -> b
    M:void onCooldownEnded(net.minecraft.world.item.Item) -> c
net.minecraft.world.item.ShearsItem -> cav -> net.minecraft.world.item.ItemShears
    M:boolean mineBlock(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.EntityLiving) -> a
    M:float getDestroySpeed(net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
net.minecraft.world.item.ShieldItem -> caw -> net.minecraft.world.item.ItemShield
    F:int EFFECTIVE_BLOCK_DELAY -> a
    F:float MINIMUM_DURABILITY_DAMAGE -> b
    F:java.lang.String TAG_BASE_COLOR -> c
    M:java.lang.String getDescriptionId(net.minecraft.world.item.ItemStack) -> j
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:net.minecraft.world.item.EnumAnimation getUseAnimation(net.minecraft.world.item.ItemStack) -> c
    M:int getUseDuration(net.minecraft.world.item.ItemStack) -> b
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:boolean isValidRepairItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.EnumColor getColor(net.minecraft.world.item.ItemStack) -> d
net.minecraft.world.item.ShovelItem -> cax -> net.minecraft.world.item.ItemSpade
    F:java.util.Map FLATTENABLES -> a
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
net.minecraft.world.item.SignItem -> cay -> net.minecraft.world.item.ItemSign
    M:boolean updateCustomBlockEntityTag(net.minecraft.core.BlockPosition,net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.item.SimpleFoiledItem -> caz -> net.minecraft.world.item.ItemNetherStar
    M:boolean isFoil(net.minecraft.world.item.ItemStack) -> i
net.minecraft.world.item.SnowballItem -> cba -> net.minecraft.world.item.ItemSnowball
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
net.minecraft.world.item.SolidBucketItem -> cbb -> net.minecraft.world.item.SolidBucketItem
    F:net.minecraft.sounds.SoundEffect placeSound -> b
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:java.lang.String getDescriptionId() -> a
    M:net.minecraft.sounds.SoundEffect getPlaceSound(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean emptyContents(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
net.minecraft.world.item.SpawnEggItem -> cbc -> net.minecraft.world.item.ItemMonsterEgg
    F:java.util.Map BY_ID -> a
    F:int backgroundColor -> b
    F:int highlightColor -> c
    F:net.minecraft.world.entity.EntityTypes defaultType -> d
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:boolean spawnsEntity(net.minecraft.nbt.NBTTagCompound,net.minecraft.world.entity.EntityTypes) -> a
    M:int getColor(int) -> a
    M:net.minecraft.world.item.ItemMonsterEgg byId(net.minecraft.world.entity.EntityTypes) -> a
    M:java.lang.Iterable eggs() -> i
    M:net.minecraft.world.entity.EntityTypes getType(net.minecraft.nbt.NBTTagCompound) -> a
    M:java.util.Optional spawnOffspringFromSpawnEgg(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.entity.EntityInsentient,net.minecraft.world.entity.EntityTypes,net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.item.SpectralArrowItem -> cbd -> net.minecraft.world.item.ItemSpectralArrow
    M:net.minecraft.world.entity.projectile.EntityArrow createArrow(net.minecraft.world.level.World,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.item.SplashPotionItem -> cbe -> net.minecraft.world.item.ItemSplashPotion
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
net.minecraft.world.item.SpyglassItem -> cbf -> net.minecraft.world.item.SpyglassItem
    F:int USE_DURATION -> a
    F:float ZOOM_FOV_MODIFIER -> b
    M:int getUseDuration(net.minecraft.world.item.ItemStack) -> b
    M:net.minecraft.world.item.EnumAnimation getUseAnimation(net.minecraft.world.item.ItemStack) -> c
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:net.minecraft.world.item.ItemStack finishUsingItem(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving) -> a
    M:void releaseUsing(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving,int) -> a
    M:void stopUsing(net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.item.StandingAndWallBlockItem -> cbg -> net.minecraft.world.item.ItemBlockWallable
    F:net.minecraft.world.level.block.Block wallBlock -> c
    M:net.minecraft.world.level.block.state.IBlockData getPlacementState(net.minecraft.world.item.context.BlockActionContext) -> c
    M:void registerBlocks(java.util.Map,net.minecraft.world.item.Item) -> a
net.minecraft.world.item.SuspiciousStewItem -> cbh -> net.minecraft.world.item.ItemSuspiciousStew
    F:java.lang.String EFFECTS_TAG -> a
    F:java.lang.String EFFECT_ID_TAG -> b
    F:java.lang.String EFFECT_DURATION_TAG -> c
    M:void saveMobEffect(net.minecraft.world.item.ItemStack,net.minecraft.world.effect.MobEffectList,int) -> a
    M:net.minecraft.world.item.ItemStack finishUsingItem(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.item.SwordItem -> cbi -> net.minecraft.world.item.ItemSword
    F:float attackDamage -> a
    F:com.google.common.collect.Multimap defaultModifiers -> b
    M:float getDamage() -> i
    M:boolean canAttackBlock(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman) -> a
    M:float getDestroySpeed(net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean hurtEnemy(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean mineBlock(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.EntityLiving) -> a
    M:com.google.common.collect.Multimap getDefaultAttributeModifiers(net.minecraft.world.entity.EnumItemSlot) -> a
net.minecraft.world.item.ThrowablePotionItem -> cbj -> net.minecraft.world.item.ItemPotionThrowable
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
net.minecraft.world.item.Tier -> cbk -> net.minecraft.world.item.ToolMaterial
net.minecraft.world.item.TieredItem -> cbl -> net.minecraft.world.item.ItemToolMaterial
    F:net.minecraft.world.item.ToolMaterial tier -> a
    M:net.minecraft.world.item.ToolMaterial getTier() -> j
    M:int getEnchantmentValue() -> c
    M:boolean isValidRepairItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.item.Tiers -> cbm -> net.minecraft.world.item.EnumToolMaterial
    F:net.minecraft.world.item.EnumToolMaterial WOOD -> a
    F:net.minecraft.world.item.EnumToolMaterial STONE -> b
    F:net.minecraft.world.item.EnumToolMaterial IRON -> c
    F:net.minecraft.world.item.EnumToolMaterial DIAMOND -> d
    F:net.minecraft.world.item.EnumToolMaterial GOLD -> e
    F:net.minecraft.world.item.EnumToolMaterial NETHERITE -> f
    F:int level -> g
    F:int uses -> h
    F:float speed -> i
    F:float damage -> j
    F:int enchantmentValue -> k
    F:net.minecraft.util.LazyInitVar repairIngredient -> l
    M:int getUses() -> a
    M:float getSpeed() -> b
    M:float getAttackDamageBonus() -> c
    M:int getLevel() -> d
    M:int getEnchantmentValue() -> e
    M:net.minecraft.world.item.crafting.RecipeItemStack getRepairIngredient() -> f
net.minecraft.world.item.TippedArrowItem -> cbn -> net.minecraft.world.item.ItemTippedArrow
    M:void fillItemCategory(net.minecraft.world.item.CreativeModeTab,net.minecraft.core.NonNullList) -> a
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:java.lang.String getDescriptionId(net.minecraft.world.item.ItemStack) -> j
net.minecraft.world.item.TooltipFlag -> cbo -> net.minecraft.world.item.TooltipFlag
net.minecraft.world.item.TooltipFlag$Default -> cbo$a -> net.minecraft.world.item.TooltipFlag$a
    F:net.minecraft.world.item.TooltipFlag$Default NORMAL -> a
    F:net.minecraft.world.item.TooltipFlag$Default ADVANCED -> b
    F:boolean advanced -> c
    M:boolean isAdvanced() -> a
net.minecraft.world.item.TridentItem -> cbp -> net.minecraft.world.item.ItemTrident
    F:int THROW_THRESHOLD_TIME -> a
    F:float BASE_DAMAGE -> b
    F:float SHOOT_POWER -> c
    F:com.google.common.collect.Multimap defaultModifiers -> d
    M:boolean canAttackBlock(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.item.EnumAnimation getUseAnimation(net.minecraft.world.item.ItemStack) -> c
    M:int getUseDuration(net.minecraft.world.item.ItemStack) -> b
    M:void releaseUsing(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.entity.EntityLiving,int) -> a
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:boolean hurtEnemy(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.EntityLiving) -> a
    M:boolean mineBlock(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.EntityLiving) -> a
    M:com.google.common.collect.Multimap getDefaultAttributeModifiers(net.minecraft.world.entity.EnumItemSlot) -> a
    M:int getEnchantmentValue() -> c
net.minecraft.world.item.UseAnim -> cbq -> net.minecraft.world.item.EnumAnimation
    F:net.minecraft.world.item.EnumAnimation NONE -> a
    F:net.minecraft.world.item.EnumAnimation EAT -> b
    F:net.minecraft.world.item.EnumAnimation DRINK -> c
    F:net.minecraft.world.item.EnumAnimation BLOCK -> d
    F:net.minecraft.world.item.EnumAnimation BOW -> e
    F:net.minecraft.world.item.EnumAnimation SPEAR -> f
    F:net.minecraft.world.item.EnumAnimation CROSSBOW -> g
    F:net.minecraft.world.item.EnumAnimation SPYGLASS -> h
    F:net.minecraft.world.item.EnumAnimation TOOT_HORN -> i
net.minecraft.world.item.Vanishable -> cbr -> net.minecraft.world.item.ItemVanishable
net.minecraft.world.item.Wearable -> cbs -> net.minecraft.world.item.ItemWearable
net.minecraft.world.item.WritableBookItem -> cbt -> net.minecraft.world.item.ItemBookAndQuill
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:boolean makeSureTagIsValid(net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.item.WrittenBookItem -> cbu -> net.minecraft.world.item.ItemWrittenBook
    F:int TITLE_LENGTH -> a
    F:int TITLE_MAX_LENGTH -> b
    F:int PAGE_EDIT_LENGTH -> c
    F:int PAGE_LENGTH -> d
    F:int MAX_PAGES -> e
    F:int MAX_GENERATION -> f
    F:java.lang.String TAG_TITLE -> g
    F:java.lang.String TAG_FILTERED_TITLE -> h
    F:java.lang.String TAG_AUTHOR -> i
    F:java.lang.String TAG_PAGES -> j
    F:java.lang.String TAG_FILTERED_PAGES -> r
    F:java.lang.String TAG_GENERATION -> s
    F:java.lang.String TAG_RESOLVED -> t
    M:boolean makeSureTagIsValid(net.minecraft.nbt.NBTTagCompound) -> a
    M:int getGeneration(net.minecraft.world.item.ItemStack) -> d
    M:int getPageCount(net.minecraft.world.item.ItemStack) -> k
    M:net.minecraft.network.chat.IChatBaseComponent getName(net.minecraft.world.item.ItemStack) -> m
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.World,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:net.minecraft.world.EnumInteractionResult useOn(net.minecraft.world.item.context.ItemActionContext) -> a
    M:net.minecraft.world.InteractionResultWrapper use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand) -> a
    M:boolean resolveBookComponents(net.minecraft.world.item.ItemStack,net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.player.EntityHuman) -> a
    M:java.lang.String resolvePage(net.minecraft.commands.CommandListenerWrapper,net.minecraft.world.entity.player.EntityHuman,java.lang.String) -> a
    M:boolean isFoil(net.minecraft.world.item.ItemStack) -> i
net.minecraft.world.item.alchemy.Potion -> cbv -> net.minecraft.world.item.alchemy.PotionRegistry
    F:java.lang.String name -> a
    F:com.google.common.collect.ImmutableList effects -> b
    M:net.minecraft.world.item.alchemy.PotionRegistry byName(java.lang.String) -> a
    M:java.lang.String getName(java.lang.String) -> b
    M:java.util.List getEffects() -> a
    M:boolean hasInstantEffects() -> b
net.minecraft.world.item.alchemy.PotionBrewing -> cbw -> net.minecraft.world.item.alchemy.PotionBrewer
    F:int BREWING_TIME_SECONDS -> a
    F:java.util.List POTION_MIXES -> b
    F:java.util.List CONTAINER_MIXES -> c
    F:java.util.List ALLOWED_CONTAINERS -> d
    F:java.util.function.Predicate ALLOWED_CONTAINER -> e
    M:boolean isIngredient(net.minecraft.world.item.ItemStack) -> a
    M:boolean isContainerIngredient(net.minecraft.world.item.ItemStack) -> b
    M:boolean isPotionIngredient(net.minecraft.world.item.ItemStack) -> c
    M:boolean isBrewablePotion(net.minecraft.world.item.alchemy.PotionRegistry) -> a
    M:boolean hasMix(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:boolean hasContainerMix(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> b
    M:boolean hasPotionMix(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> c
    M:net.minecraft.world.item.ItemStack mix(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> d
    M:void bootStrap() -> a
    M:void addContainerRecipe(net.minecraft.world.item.Item,net.minecraft.world.item.Item,net.minecraft.world.item.Item) -> a
    M:void addContainer(net.minecraft.world.item.Item) -> a
    M:void addMix(net.minecraft.world.item.alchemy.PotionRegistry,net.minecraft.world.item.Item,net.minecraft.world.item.alchemy.PotionRegistry) -> a
net.minecraft.world.item.alchemy.PotionBrewing$Mix -> cbw$a -> net.minecraft.world.item.alchemy.PotionBrewer$PredicatedCombination
    F:java.lang.Object from -> a
    F:net.minecraft.world.item.crafting.RecipeItemStack ingredient -> b
    F:java.lang.Object to -> c
net.minecraft.world.item.alchemy.PotionUtils -> cbx -> net.minecraft.world.item.alchemy.PotionUtil
    F:java.lang.String TAG_CUSTOM_POTION_EFFECTS -> a
    F:java.lang.String TAG_CUSTOM_POTION_COLOR -> b
    F:java.lang.String TAG_POTION -> c
    F:int EMPTY_COLOR -> d
    F:net.minecraft.network.chat.IChatBaseComponent NO_EFFECT -> e
    M:java.util.List getMobEffects(net.minecraft.world.item.ItemStack) -> a
    M:java.util.List getAllEffects(net.minecraft.world.item.alchemy.PotionRegistry,java.util.Collection) -> a
    M:java.util.List getAllEffects(net.minecraft.nbt.NBTTagCompound) -> a
    M:java.util.List getCustomEffects(net.minecraft.world.item.ItemStack) -> b
    M:java.util.List getCustomEffects(net.minecraft.nbt.NBTTagCompound) -> b
    M:void getCustomEffects(net.minecraft.nbt.NBTTagCompound,java.util.List) -> a
    M:int getColor(net.minecraft.world.item.ItemStack) -> c
    M:int getColor(net.minecraft.world.item.alchemy.PotionRegistry) -> a
    M:int getColor(java.util.Collection) -> a
    M:net.minecraft.world.item.alchemy.PotionRegistry getPotion(net.minecraft.world.item.ItemStack) -> d
    M:net.minecraft.world.item.alchemy.PotionRegistry getPotion(net.minecraft.nbt.NBTTagCompound) -> c
    M:net.minecraft.world.item.ItemStack setPotion(net.minecraft.world.item.ItemStack,net.minecraft.world.item.alchemy.PotionRegistry) -> a
    M:net.minecraft.world.item.ItemStack setCustomEffects(net.minecraft.world.item.ItemStack,java.util.Collection) -> a
    M:void addPotionTooltip(net.minecraft.world.item.ItemStack,java.util.List,float) -> a
net.minecraft.world.item.alchemy.Potions -> cby -> net.minecraft.world.item.alchemy.Potions
    F:net.minecraft.world.item.alchemy.PotionRegistry EMPTY -> a
    F:net.minecraft.world.item.alchemy.PotionRegistry WATER -> b
    F:net.minecraft.world.item.alchemy.PotionRegistry MUNDANE -> c
    F:net.minecraft.world.item.alchemy.PotionRegistry THICK -> d
    F:net.minecraft.world.item.alchemy.PotionRegistry AWKWARD -> e
    F:net.minecraft.world.item.alchemy.PotionRegistry NIGHT_VISION -> f
    F:net.minecraft.world.item.alchemy.PotionRegistry LONG_NIGHT_VISION -> g
    F:net.minecraft.world.item.alchemy.PotionRegistry INVISIBILITY -> h
    F:net.minecraft.world.item.alchemy.PotionRegistry LONG_INVISIBILITY -> i
    F:net.minecraft.world.item.alchemy.PotionRegistry LEAPING -> j
    F:net.minecraft.world.item.alchemy.PotionRegistry LONG_LEAPING -> k
    F:net.minecraft.world.item.alchemy.PotionRegistry STRONG_LEAPING -> l
    F:net.minecraft.world.item.alchemy.PotionRegistry FIRE_RESISTANCE -> m
    F:net.minecraft.world.item.alchemy.PotionRegistry LONG_FIRE_RESISTANCE -> n
    F:net.minecraft.world.item.alchemy.PotionRegistry SWIFTNESS -> o
    F:net.minecraft.world.item.alchemy.PotionRegistry LONG_SWIFTNESS -> p
    F:net.minecraft.world.item.alchemy.PotionRegistry STRONG_SWIFTNESS -> q
    F:net.minecraft.world.item.alchemy.PotionRegistry SLOWNESS -> r
    F:net.minecraft.world.item.alchemy.PotionRegistry LONG_SLOWNESS -> s
    F:net.minecraft.world.item.alchemy.PotionRegistry STRONG_SLOWNESS -> t
    F:net.minecraft.world.item.alchemy.PotionRegistry TURTLE_MASTER -> u
    F:net.minecraft.world.item.alchemy.PotionRegistry LONG_TURTLE_MASTER -> v
    F:net.minecraft.world.item.alchemy.PotionRegistry STRONG_TURTLE_MASTER -> w
    F:net.minecraft.world.item.alchemy.PotionRegistry WATER_BREATHING -> x
    F:net.minecraft.world.item.alchemy.PotionRegistry LONG_WATER_BREATHING -> y
    F:net.minecraft.world.item.alchemy.PotionRegistry HEALING -> z
    M:net.minecraft.world.item.alchemy.PotionRegistry register(java.lang.String,net.minecraft.world.item.alchemy.PotionRegistry) -> a
net.minecraft.world.item.context.BlockPlaceContext -> cca -> net.minecraft.world.item.context.BlockActionContext
    F:net.minecraft.core.BlockPosition relativePos -> b
    F:boolean replaceClicked -> a
    M:net.minecraft.world.item.context.BlockActionContext at(net.minecraft.world.item.context.BlockActionContext,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.core.BlockPosition getClickedPos() -> a
    M:boolean canPlace() -> b
    M:boolean replacingClickedOnBlock() -> c
    M:net.minecraft.core.EnumDirection getNearestLookingDirection() -> d
    M:net.minecraft.core.EnumDirection getNearestLookingVerticalDirection() -> e
net.minecraft.world.item.context.DirectionalPlaceContext -> ccb -> net.minecraft.world.item.context.BlockActionContextDirectional
    F:net.minecraft.core.EnumDirection direction -> b
    M:net.minecraft.core.BlockPosition getClickedPos() -> a
    M:boolean canPlace() -> b
    M:boolean replacingClickedOnBlock() -> c
    M:net.minecraft.core.EnumDirection getNearestLookingDirection() -> d
    M:net.minecraft.core.EnumDirection getHorizontalDirection() -> g
    M:boolean isSecondaryUseActive() -> h
    M:float getRotation() -> i
net.minecraft.world.item.context.UseOnContext -> ccc -> net.minecraft.world.item.context.ItemActionContext
    F:net.minecraft.world.entity.player.EntityHuman player -> a
    F:net.minecraft.world.EnumHand hand -> b
    F:net.minecraft.world.phys.MovingObjectPositionBlock hitResult -> c
    F:net.minecraft.world.level.World level -> d
    F:net.minecraft.world.item.ItemStack itemStack -> e
    M:net.minecraft.world.phys.MovingObjectPositionBlock getHitResult() -> j
    M:net.minecraft.core.BlockPosition getClickedPos() -> a
    M:net.minecraft.core.EnumDirection getClickedFace() -> k
    M:net.minecraft.world.phys.Vec3D getClickLocation() -> l
    M:boolean isInside() -> m
    M:net.minecraft.world.item.ItemStack getItemInHand() -> n
    M:net.minecraft.world.entity.player.EntityHuman getPlayer() -> o
    M:net.minecraft.world.EnumHand getHand() -> p
    M:net.minecraft.world.level.World getLevel() -> q
    M:net.minecraft.core.EnumDirection getHorizontalDirection() -> g
    M:boolean isSecondaryUseActive() -> h
    M:float getRotation() -> i
net.minecraft.world.item.crafting.AbstractCookingRecipe -> cce -> net.minecraft.world.item.crafting.RecipeCooking
    F:net.minecraft.world.item.crafting.Recipes type -> a
    F:net.minecraft.resources.MinecraftKey id -> b
    F:java.lang.String group -> c
    F:net.minecraft.world.item.crafting.RecipeItemStack ingredient -> d
    F:net.minecraft.world.item.ItemStack result -> e
    F:float experience -> f
    F:int cookingTime -> g
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
    M:boolean canCraftInDimensions(int,int) -> a
    M:net.minecraft.core.NonNullList getIngredients() -> a
    M:float getExperience() -> b
    M:net.minecraft.world.item.ItemStack getResultItem() -> c
    M:java.lang.String getGroup() -> d
    M:int getCookingTime() -> e
    M:net.minecraft.resources.MinecraftKey getId() -> f
    M:net.minecraft.world.item.crafting.Recipes getType() -> g
net.minecraft.world.item.crafting.ArmorDyeRecipe -> ccf -> net.minecraft.world.item.crafting.RecipeArmorDye
    M:boolean matches(net.minecraft.world.inventory.InventoryCrafting,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.InventoryCrafting) -> a
    M:boolean canCraftInDimensions(int,int) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
net.minecraft.world.item.crafting.BannerDuplicateRecipe -> ccg -> net.minecraft.world.item.crafting.RecipeBannerDuplicate
    M:boolean matches(net.minecraft.world.inventory.InventoryCrafting,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.InventoryCrafting) -> a
    M:net.minecraft.core.NonNullList getRemainingItems(net.minecraft.world.inventory.InventoryCrafting) -> b
    M:boolean canCraftInDimensions(int,int) -> a
    M:net.minecraft.core.NonNullList getRemainingItems(net.minecraft.world.IInventory) -> b
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
net.minecraft.world.item.crafting.BlastingRecipe -> cch -> net.minecraft.world.item.crafting.RecipeBlasting
    M:net.minecraft.world.item.ItemStack getToastSymbol() -> h
net.minecraft.world.item.crafting.BookCloningRecipe -> cci -> net.minecraft.world.item.crafting.RecipeBookClone
    M:boolean matches(net.minecraft.world.inventory.InventoryCrafting,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.InventoryCrafting) -> a
    M:net.minecraft.core.NonNullList getRemainingItems(net.minecraft.world.inventory.InventoryCrafting) -> b
    M:boolean canCraftInDimensions(int,int) -> a
    M:net.minecraft.core.NonNullList getRemainingItems(net.minecraft.world.IInventory) -> b
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
net.minecraft.world.item.crafting.CampfireCookingRecipe -> ccj -> net.minecraft.world.item.crafting.RecipeCampfire
    M:net.minecraft.world.item.ItemStack getToastSymbol() -> h
net.minecraft.world.item.crafting.CraftingRecipe -> cck -> net.minecraft.world.item.crafting.RecipeCrafting
    M:net.minecraft.world.item.crafting.Recipes getType() -> g
net.minecraft.world.item.crafting.CustomRecipe -> ccl -> net.minecraft.world.item.crafting.IRecipeComplex
    F:net.minecraft.resources.MinecraftKey id -> a
    M:net.minecraft.resources.MinecraftKey getId() -> f
    M:net.minecraft.world.item.ItemStack getResultItem() -> c
net.minecraft.world.item.crafting.FireworkRocketRecipe -> ccm -> net.minecraft.world.item.crafting.RecipeFireworks
    F:net.minecraft.world.item.crafting.RecipeItemStack PAPER_INGREDIENT -> a
    F:net.minecraft.world.item.crafting.RecipeItemStack GUNPOWDER_INGREDIENT -> b
    F:net.minecraft.world.item.crafting.RecipeItemStack STAR_INGREDIENT -> c
    M:boolean matches(net.minecraft.world.inventory.InventoryCrafting,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.InventoryCrafting) -> a
    M:boolean canCraftInDimensions(int,int) -> a
    M:net.minecraft.world.item.ItemStack getResultItem() -> c
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
net.minecraft.world.item.crafting.FireworkStarFadeRecipe -> ccn -> net.minecraft.world.item.crafting.RecipeFireworksFade
    F:net.minecraft.world.item.crafting.RecipeItemStack STAR_INGREDIENT -> a
    M:boolean matches(net.minecraft.world.inventory.InventoryCrafting,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.InventoryCrafting) -> a
    M:boolean canCraftInDimensions(int,int) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
net.minecraft.world.item.crafting.FireworkStarRecipe -> cco -> net.minecraft.world.item.crafting.RecipeFireworksStar
    F:net.minecraft.world.item.crafting.RecipeItemStack SHAPE_INGREDIENT -> a
    F:net.minecraft.world.item.crafting.RecipeItemStack TRAIL_INGREDIENT -> b
    F:net.minecraft.world.item.crafting.RecipeItemStack FLICKER_INGREDIENT -> c
    F:java.util.Map SHAPE_BY_ITEM -> d
    F:net.minecraft.world.item.crafting.RecipeItemStack GUNPOWDER_INGREDIENT -> e
    M:boolean matches(net.minecraft.world.inventory.InventoryCrafting,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.InventoryCrafting) -> a
    M:boolean canCraftInDimensions(int,int) -> a
    M:net.minecraft.world.item.ItemStack getResultItem() -> c
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
net.minecraft.world.item.crafting.Ingredient -> ccp -> net.minecraft.world.item.crafting.RecipeItemStack
    F:net.minecraft.world.item.crafting.RecipeItemStack EMPTY -> a
    F:it.unimi.dsi.fastutil.ints.IntList stackingIds -> d
    M:void dissolve() -> f
    M:boolean test(net.minecraft.world.item.ItemStack) -> a
    M:it.unimi.dsi.fastutil.ints.IntList getStackingIds() -> b
    M:void toNetwork(net.minecraft.network.PacketDataSerializer) -> a
    M:com.google.gson.JsonElement toJson() -> c
    M:boolean isEmpty() -> d
    M:net.minecraft.world.item.crafting.RecipeItemStack fromValues(java.util.stream.Stream) -> b
    M:net.minecraft.world.item.crafting.RecipeItemStack of() -> e
    M:net.minecraft.world.item.crafting.RecipeItemStack of(net.minecraft.world.level.ItemLike[]) -> a
    M:net.minecraft.world.item.crafting.RecipeItemStack of(net.minecraft.world.item.ItemStack[]) -> a
    M:net.minecraft.world.item.crafting.RecipeItemStack of(java.util.stream.Stream) -> a
    M:net.minecraft.world.item.crafting.RecipeItemStack of(net.minecraft.tags.TagKey) -> a
    M:net.minecraft.world.item.crafting.RecipeItemStack fromNetwork(net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.world.item.crafting.RecipeItemStack fromJson(com.google.gson.JsonElement) -> a
    M:net.minecraft.world.item.crafting.RecipeItemStack$Provider valueFromJson(com.google.gson.JsonObject) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.item.crafting.Ingredient$ItemValue -> ccp$a -> net.minecraft.world.item.crafting.RecipeItemStack$StackProvider
    F:net.minecraft.world.item.ItemStack item -> a
    M:java.util.Collection getItems() -> a
    M:com.google.gson.JsonObject serialize() -> b
net.minecraft.world.item.crafting.Ingredient$TagValue -> ccp$b -> net.minecraft.world.item.crafting.RecipeItemStack$b
    F:net.minecraft.tags.TagKey tag -> a
    M:java.util.Collection getItems() -> a
    M:com.google.gson.JsonObject serialize() -> b
net.minecraft.world.item.crafting.Ingredient$Value -> ccp$c -> net.minecraft.world.item.crafting.RecipeItemStack$Provider
net.minecraft.world.item.crafting.MapCloningRecipe -> ccq -> net.minecraft.world.item.crafting.RecipeMapClone
    M:boolean matches(net.minecraft.world.inventory.InventoryCrafting,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.InventoryCrafting) -> a
    M:boolean canCraftInDimensions(int,int) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
net.minecraft.world.item.crafting.MapExtendingRecipe -> ccr -> net.minecraft.world.item.crafting.RecipeMapExtend
    M:boolean matches(net.minecraft.world.inventory.InventoryCrafting,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.InventoryCrafting) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
net.minecraft.world.item.crafting.Recipe -> ccs -> net.minecraft.world.item.crafting.IRecipe
    M:net.minecraft.core.NonNullList getRemainingItems(net.minecraft.world.IInventory) -> b
    M:net.minecraft.core.NonNullList getIngredients() -> a
    M:java.lang.String getGroup() -> d
    M:net.minecraft.world.item.ItemStack getToastSymbol() -> h
    M:boolean isIncomplete() -> i
net.minecraft.world.item.crafting.RecipeManager -> cct -> net.minecraft.world.item.crafting.CraftingManager
    F:com.google.gson.Gson GSON -> a
    F:org.slf4j.Logger LOGGER -> b
    F:java.util.Map recipes -> c
    F:java.util.Map byName -> d
    F:boolean hasErrors -> e
    F:net.minecraft.resources.MinecraftKey lastRecipe -> b
    M:void apply(java.util.Map,net.minecraft.server.packs.resources.IResourceManager,net.minecraft.util.profiling.GameProfilerFiller) -> a
    M:boolean hadErrorsLoading() -> a
    M:java.util.Optional getRecipeFor(net.minecraft.world.item.crafting.Recipes,net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
    M:java.util.Optional getRecipeFor(net.minecraft.world.item.crafting.Recipes,net.minecraft.world.IInventory,net.minecraft.world.level.World,net.minecraft.resources.MinecraftKey) -> a
    M:java.util.List getAllRecipesFor(net.minecraft.world.item.crafting.Recipes) -> a
    M:java.util.List getRecipesFor(net.minecraft.world.item.crafting.Recipes,net.minecraft.world.IInventory,net.minecraft.world.level.World) -> b
    M:java.util.Map byType(net.minecraft.world.item.crafting.Recipes) -> c
    M:net.minecraft.core.NonNullList getRemainingItemsFor(net.minecraft.world.item.crafting.Recipes,net.minecraft.world.IInventory,net.minecraft.world.level.World) -> c
    M:java.util.Optional byKey(net.minecraft.resources.MinecraftKey) -> a
    M:java.util.Collection getRecipes() -> b
    M:java.util.stream.Stream getRecipeIds() -> d
    M:net.minecraft.world.item.crafting.IRecipe fromJson(net.minecraft.resources.MinecraftKey,com.google.gson.JsonObject) -> a
    M:void replaceRecipes(java.lang.Iterable) -> a
    M:net.minecraft.world.item.crafting.RecipeManager$CachedCheck createCheck(net.minecraft.world.item.crafting.Recipes) -> b
    M:void apply(java.lang.Object,net.minecraft.server.packs.resources.IResourceManager,net.minecraft.util.profiling.GameProfilerFiller) -> a
    M:java.util.Optional getRecipeFor(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
net.minecraft.world.item.crafting.RecipeManager$CachedCheck -> cct$a -> net.minecraft.world.item.crafting.CraftingManager$a
net.minecraft.world.item.crafting.RecipeSerializer -> ccu -> net.minecraft.world.item.crafting.RecipeSerializer
    F:net.minecraft.world.item.crafting.RecipeSerializer SHAPED_RECIPE -> a
    F:net.minecraft.world.item.crafting.RecipeSerializer SHAPELESS_RECIPE -> b
    F:net.minecraft.world.item.crafting.RecipeSerializerComplex ARMOR_DYE -> c
    F:net.minecraft.world.item.crafting.RecipeSerializerComplex BOOK_CLONING -> d
    F:net.minecraft.world.item.crafting.RecipeSerializerComplex MAP_CLONING -> e
    F:net.minecraft.world.item.crafting.RecipeSerializerComplex MAP_EXTENDING -> f
    F:net.minecraft.world.item.crafting.RecipeSerializerComplex FIREWORK_ROCKET -> g
    F:net.minecraft.world.item.crafting.RecipeSerializerComplex FIREWORK_STAR -> h
    F:net.minecraft.world.item.crafting.RecipeSerializerComplex FIREWORK_STAR_FADE -> i
    F:net.minecraft.world.item.crafting.RecipeSerializerComplex TIPPED_ARROW -> j
    F:net.minecraft.world.item.crafting.RecipeSerializerComplex BANNER_DUPLICATE -> k
    F:net.minecraft.world.item.crafting.RecipeSerializerComplex SHIELD_DECORATION -> l
    F:net.minecraft.world.item.crafting.RecipeSerializerComplex SHULKER_BOX_COLORING -> m
    F:net.minecraft.world.item.crafting.RecipeSerializerComplex SUSPICIOUS_STEW -> n
    F:net.minecraft.world.item.crafting.RecipeSerializerComplex REPAIR_ITEM -> o
    F:net.minecraft.world.item.crafting.RecipeSerializerCooking SMELTING_RECIPE -> p
    F:net.minecraft.world.item.crafting.RecipeSerializerCooking BLASTING_RECIPE -> q
    F:net.minecraft.world.item.crafting.RecipeSerializerCooking SMOKING_RECIPE -> r
    F:net.minecraft.world.item.crafting.RecipeSerializerCooking CAMPFIRE_COOKING_RECIPE -> s
    F:net.minecraft.world.item.crafting.RecipeSerializer STONECUTTER -> t
    F:net.minecraft.world.item.crafting.RecipeSerializer SMITHING -> u
    M:net.minecraft.world.item.crafting.RecipeSerializer register(java.lang.String,net.minecraft.world.item.crafting.RecipeSerializer) -> a
net.minecraft.world.item.crafting.RecipeType -> ccv -> net.minecraft.world.item.crafting.Recipes
    F:net.minecraft.world.item.crafting.Recipes CRAFTING -> a
    F:net.minecraft.world.item.crafting.Recipes SMELTING -> b
    F:net.minecraft.world.item.crafting.Recipes BLASTING -> c
    F:net.minecraft.world.item.crafting.Recipes SMOKING -> d
    F:net.minecraft.world.item.crafting.Recipes CAMPFIRE_COOKING -> e
    F:net.minecraft.world.item.crafting.Recipes STONECUTTING -> f
    F:net.minecraft.world.item.crafting.Recipes SMITHING -> g
    M:net.minecraft.world.item.crafting.Recipes register(java.lang.String) -> a
net.minecraft.world.item.crafting.RepairItemRecipe -> ccw -> net.minecraft.world.item.crafting.RecipeRepair
    M:boolean matches(net.minecraft.world.inventory.InventoryCrafting,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.InventoryCrafting) -> a
    M:boolean canCraftInDimensions(int,int) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
net.minecraft.world.item.crafting.ShapedRecipe -> ccx -> net.minecraft.world.item.crafting.ShapedRecipes
    F:int width -> a
    F:int height -> b
    F:net.minecraft.core.NonNullList recipeItems -> c
    F:net.minecraft.world.item.ItemStack result -> d
    F:net.minecraft.resources.MinecraftKey id -> e
    F:java.lang.String group -> f
    M:net.minecraft.resources.MinecraftKey getId() -> f
    M:java.lang.String getGroup() -> d
    M:net.minecraft.world.item.ItemStack getResultItem() -> c
    M:net.minecraft.core.NonNullList getIngredients() -> a
    M:boolean canCraftInDimensions(int,int) -> a
    M:boolean matches(net.minecraft.world.inventory.InventoryCrafting,net.minecraft.world.level.World) -> a
    M:boolean matches(net.minecraft.world.inventory.InventoryCrafting,int,int,boolean) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.InventoryCrafting) -> a
    M:int getWidth() -> j
    M:int getHeight() -> k
    M:net.minecraft.core.NonNullList dissolvePattern(java.lang.String[],java.util.Map,int,int) -> a
    M:boolean isIncomplete() -> i
    M:int firstNonSpace(java.lang.String) -> a
    M:int lastNonSpace(java.lang.String) -> b
    M:java.util.Map keyFromJson(com.google.gson.JsonObject) -> c
    M:net.minecraft.world.item.ItemStack itemStackFromJson(com.google.gson.JsonObject) -> a
    M:net.minecraft.world.item.Item itemFromJson(com.google.gson.JsonObject) -> b
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
net.minecraft.world.item.crafting.ShapedRecipe$Serializer -> ccx$a -> net.minecraft.world.item.crafting.ShapedRecipes$a
    M:net.minecraft.world.item.crafting.ShapedRecipes fromJson(net.minecraft.resources.MinecraftKey,com.google.gson.JsonObject) -> b
    M:net.minecraft.world.item.crafting.ShapedRecipes fromNetwork(net.minecraft.resources.MinecraftKey,net.minecraft.network.PacketDataSerializer) -> b
    M:void toNetwork(net.minecraft.network.PacketDataSerializer,net.minecraft.world.item.crafting.ShapedRecipes) -> a
    M:void toNetwork(net.minecraft.network.PacketDataSerializer,net.minecraft.world.item.crafting.IRecipe) -> a
    M:net.minecraft.world.item.crafting.IRecipe fromNetwork(net.minecraft.resources.MinecraftKey,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.world.item.crafting.IRecipe fromJson(net.minecraft.resources.MinecraftKey,com.google.gson.JsonObject) -> a
net.minecraft.world.item.crafting.ShapelessRecipe -> ccy -> net.minecraft.world.item.crafting.ShapelessRecipes
    F:net.minecraft.resources.MinecraftKey id -> a
    F:java.lang.String group -> b
    F:net.minecraft.world.item.ItemStack result -> c
    F:net.minecraft.core.NonNullList ingredients -> d
    M:net.minecraft.resources.MinecraftKey getId() -> f
    M:java.lang.String getGroup() -> d
    M:net.minecraft.world.item.ItemStack getResultItem() -> c
    M:net.minecraft.core.NonNullList getIngredients() -> a
    M:boolean matches(net.minecraft.world.inventory.InventoryCrafting,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.InventoryCrafting) -> a
    M:boolean canCraftInDimensions(int,int) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
net.minecraft.world.item.crafting.ShapelessRecipe$Serializer -> ccy$a -> net.minecraft.world.item.crafting.ShapelessRecipes$a
    M:net.minecraft.world.item.crafting.ShapelessRecipes fromJson(net.minecraft.resources.MinecraftKey,com.google.gson.JsonObject) -> b
    M:net.minecraft.core.NonNullList itemsFromJson(com.google.gson.JsonArray) -> a
    M:net.minecraft.world.item.crafting.ShapelessRecipes fromNetwork(net.minecraft.resources.MinecraftKey,net.minecraft.network.PacketDataSerializer) -> b
    M:void toNetwork(net.minecraft.network.PacketDataSerializer,net.minecraft.world.item.crafting.ShapelessRecipes) -> a
    M:void toNetwork(net.minecraft.network.PacketDataSerializer,net.minecraft.world.item.crafting.IRecipe) -> a
    M:net.minecraft.world.item.crafting.IRecipe fromNetwork(net.minecraft.resources.MinecraftKey,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.world.item.crafting.IRecipe fromJson(net.minecraft.resources.MinecraftKey,com.google.gson.JsonObject) -> a
net.minecraft.world.item.crafting.ShieldDecorationRecipe -> ccz -> net.minecraft.world.item.crafting.RecipiesShield
    M:boolean matches(net.minecraft.world.inventory.InventoryCrafting,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.InventoryCrafting) -> a
    M:boolean canCraftInDimensions(int,int) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
net.minecraft.world.item.crafting.ShulkerBoxColoring -> cda -> net.minecraft.world.item.crafting.RecipeShulkerBox
    M:boolean matches(net.minecraft.world.inventory.InventoryCrafting,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.InventoryCrafting) -> a
    M:boolean canCraftInDimensions(int,int) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
net.minecraft.world.item.crafting.SimpleCookingSerializer -> cdb -> net.minecraft.world.item.crafting.RecipeSerializerCooking
    F:int defaultCookingTime -> v
    F:net.minecraft.world.item.crafting.SimpleCookingSerializer$CookieBaker factory -> w
    M:net.minecraft.world.item.crafting.RecipeCooking fromJson(net.minecraft.resources.MinecraftKey,com.google.gson.JsonObject) -> b
    M:net.minecraft.world.item.crafting.RecipeCooking fromNetwork(net.minecraft.resources.MinecraftKey,net.minecraft.network.PacketDataSerializer) -> b
    M:void toNetwork(net.minecraft.network.PacketDataSerializer,net.minecraft.world.item.crafting.RecipeCooking) -> a
    M:void toNetwork(net.minecraft.network.PacketDataSerializer,net.minecraft.world.item.crafting.IRecipe) -> a
    M:net.minecraft.world.item.crafting.IRecipe fromNetwork(net.minecraft.resources.MinecraftKey,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.world.item.crafting.IRecipe fromJson(net.minecraft.resources.MinecraftKey,com.google.gson.JsonObject) -> a
net.minecraft.world.item.crafting.SimpleCookingSerializer$CookieBaker -> cdb$a -> net.minecraft.world.item.crafting.RecipeSerializerCooking$a
net.minecraft.world.item.crafting.SimpleRecipeSerializer -> cdc -> net.minecraft.world.item.crafting.RecipeSerializerComplex
    F:java.util.function.Function constructor -> v
    M:net.minecraft.world.item.crafting.IRecipe fromJson(net.minecraft.resources.MinecraftKey,com.google.gson.JsonObject) -> a
    M:net.minecraft.world.item.crafting.IRecipe fromNetwork(net.minecraft.resources.MinecraftKey,net.minecraft.network.PacketDataSerializer) -> a
    M:void toNetwork(net.minecraft.network.PacketDataSerializer,net.minecraft.world.item.crafting.IRecipe) -> a
net.minecraft.world.item.crafting.SingleItemRecipe -> cdd -> net.minecraft.world.item.crafting.RecipeSingleItem
    F:net.minecraft.world.item.crafting.RecipeItemStack ingredient -> a
    F:net.minecraft.world.item.ItemStack result -> b
    F:net.minecraft.world.item.crafting.Recipes type -> e
    F:net.minecraft.world.item.crafting.RecipeSerializer serializer -> f
    F:net.minecraft.resources.MinecraftKey id -> c
    F:java.lang.String group -> d
    M:net.minecraft.world.item.crafting.Recipes getType() -> g
    M:net.minecraft.resources.MinecraftKey getId() -> f
    M:java.lang.String getGroup() -> d
    M:net.minecraft.world.item.ItemStack getResultItem() -> c
    M:net.minecraft.core.NonNullList getIngredients() -> a
    M:boolean canCraftInDimensions(int,int) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
net.minecraft.world.item.crafting.SingleItemRecipe$Serializer -> cdd$a -> net.minecraft.world.item.crafting.RecipeSingleItem$a
    F:net.minecraft.world.item.crafting.SingleItemRecipe$Serializer$SingleItemMaker factory -> v
    M:net.minecraft.world.item.crafting.RecipeSingleItem fromJson(net.minecraft.resources.MinecraftKey,com.google.gson.JsonObject) -> b
    M:net.minecraft.world.item.crafting.RecipeSingleItem fromNetwork(net.minecraft.resources.MinecraftKey,net.minecraft.network.PacketDataSerializer) -> b
    M:void toNetwork(net.minecraft.network.PacketDataSerializer,net.minecraft.world.item.crafting.RecipeSingleItem) -> a
    M:void toNetwork(net.minecraft.network.PacketDataSerializer,net.minecraft.world.item.crafting.IRecipe) -> a
    M:net.minecraft.world.item.crafting.IRecipe fromNetwork(net.minecraft.resources.MinecraftKey,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.world.item.crafting.IRecipe fromJson(net.minecraft.resources.MinecraftKey,com.google.gson.JsonObject) -> a
net.minecraft.world.item.crafting.SingleItemRecipe$Serializer$SingleItemMaker -> cdd$a$a -> net.minecraft.world.item.crafting.RecipeSingleItem$a$a
net.minecraft.world.item.crafting.SmeltingRecipe -> cde -> net.minecraft.world.item.crafting.FurnaceRecipe
    M:net.minecraft.world.item.ItemStack getToastSymbol() -> h
net.minecraft.world.item.crafting.SmokingRecipe -> cdf -> net.minecraft.world.item.crafting.RecipeSmoking
    M:net.minecraft.world.item.ItemStack getToastSymbol() -> h
net.minecraft.world.item.crafting.StonecutterRecipe -> cdg -> net.minecraft.world.item.crafting.RecipeStonecutting
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.item.ItemStack getToastSymbol() -> h
net.minecraft.world.item.crafting.SuspiciousStewRecipe -> cdh -> net.minecraft.world.item.crafting.RecipeSuspiciousStew
    M:boolean matches(net.minecraft.world.inventory.InventoryCrafting,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.InventoryCrafting) -> a
    M:boolean canCraftInDimensions(int,int) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
net.minecraft.world.item.crafting.TippedArrowRecipe -> cdi -> net.minecraft.world.item.crafting.RecipeTippedArrow
    M:boolean matches(net.minecraft.world.inventory.InventoryCrafting,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.InventoryCrafting) -> a
    M:boolean canCraftInDimensions(int,int) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
net.minecraft.world.item.crafting.UpgradeRecipe -> cdj -> net.minecraft.world.item.crafting.RecipeSmithing
    F:net.minecraft.world.item.crafting.RecipeItemStack base -> a
    F:net.minecraft.world.item.crafting.RecipeItemStack addition -> b
    F:net.minecraft.world.item.ItemStack result -> c
    F:net.minecraft.resources.MinecraftKey id -> d
    M:boolean matches(net.minecraft.world.IInventory,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.IInventory) -> a
    M:boolean canCraftInDimensions(int,int) -> a
    M:net.minecraft.world.item.ItemStack getResultItem() -> c
    M:boolean isAdditionIngredient(net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack getToastSymbol() -> h
    M:net.minecraft.resources.MinecraftKey getId() -> f
    M:net.minecraft.world.item.crafting.Recipes getType() -> g
    M:boolean isIncomplete() -> i
net.minecraft.world.item.crafting.UpgradeRecipe$Serializer -> cdj$a -> net.minecraft.world.item.crafting.RecipeSmithing$a
    M:net.minecraft.world.item.crafting.RecipeSmithing fromJson(net.minecraft.resources.MinecraftKey,com.google.gson.JsonObject) -> b
    M:net.minecraft.world.item.crafting.RecipeSmithing fromNetwork(net.minecraft.resources.MinecraftKey,net.minecraft.network.PacketDataSerializer) -> b
    M:void toNetwork(net.minecraft.network.PacketDataSerializer,net.minecraft.world.item.crafting.RecipeSmithing) -> a
    M:void toNetwork(net.minecraft.network.PacketDataSerializer,net.minecraft.world.item.crafting.IRecipe) -> a
    M:net.minecraft.world.item.crafting.IRecipe fromNetwork(net.minecraft.resources.MinecraftKey,net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.world.item.crafting.IRecipe fromJson(net.minecraft.resources.MinecraftKey,com.google.gson.JsonObject) -> a
net.minecraft.world.item.enchantment.ArrowDamageEnchantment -> cdl -> net.minecraft.world.item.enchantment.EnchantmentArrowDamage
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.ArrowFireEnchantment -> cdm -> net.minecraft.world.item.enchantment.EnchantmentFlameArrows
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.ArrowInfiniteEnchantment -> cdn -> net.minecraft.world.item.enchantment.EnchantmentInfiniteArrows
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
    M:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.ArrowKnockbackEnchantment -> cdo -> net.minecraft.world.item.enchantment.EnchantmentArrowKnockback
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.ArrowPiercingEnchantment -> cdp -> net.minecraft.world.item.enchantment.EnchantmentPiercing
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
    M:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.BindingCurseEnchantment -> cdq -> net.minecraft.world.item.enchantment.EnchantmentBinding
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
    M:boolean isTreasureOnly() -> b
    M:boolean isCurse() -> c
net.minecraft.world.item.enchantment.DamageEnchantment -> cdr -> net.minecraft.world.item.enchantment.EnchantmentWeaponDamage
    F:int ALL -> a
    F:int UNDEAD -> b
    F:int ARTHROPODS -> c
    F:int type -> d
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
    M:float getDamageBonus(int,net.minecraft.world.entity.EnumMonsterType) -> a
    M:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
    M:boolean canEnchant(net.minecraft.world.item.ItemStack) -> a
    M:void doPostAttack(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.Entity,int) -> a
net.minecraft.world.item.enchantment.DigDurabilityEnchantment -> cds -> net.minecraft.world.item.enchantment.EnchantmentDurability
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
    M:boolean canEnchant(net.minecraft.world.item.ItemStack) -> a
    M:boolean shouldIgnoreDurabilityDrop(net.minecraft.world.item.ItemStack,int,net.minecraft.util.RandomSource) -> a
net.minecraft.world.item.enchantment.DiggingEnchantment -> cdt -> net.minecraft.world.item.enchantment.EnchantmentDigging
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
    M:boolean canEnchant(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.item.enchantment.Enchantment -> cdu -> net.minecraft.world.item.enchantment.Enchantment
    F:net.minecraft.world.item.enchantment.Enchantment$Rarity rarity -> b
    F:net.minecraft.world.item.enchantment.EnchantmentSlotType category -> e
    F:java.lang.String descriptionId -> f
    M:net.minecraft.world.item.enchantment.Enchantment byId(int) -> c
    M:java.util.Map getSlotItems(net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.item.enchantment.Enchantment$Rarity getRarity() -> d
    M:int getMinLevel() -> e
    M:int getMaxLevel() -> a
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getDamageProtection(int,net.minecraft.world.damagesource.DamageSource) -> a
    M:float getDamageBonus(int,net.minecraft.world.entity.EnumMonsterType) -> a
    M:boolean isCompatibleWith(net.minecraft.world.item.enchantment.Enchantment) -> b
    M:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
    M:java.lang.String getOrCreateDescriptionId() -> f
    M:java.lang.String getDescriptionId() -> g
    M:net.minecraft.network.chat.IChatBaseComponent getFullname(int) -> d
    M:boolean canEnchant(net.minecraft.world.item.ItemStack) -> a
    M:void doPostAttack(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.Entity,int) -> a
    M:void doPostHurt(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.Entity,int) -> b
    M:boolean isTreasureOnly() -> b
    M:boolean isCurse() -> c
    M:boolean isTradeable() -> h
    M:boolean isDiscoverable() -> i
net.minecraft.world.item.enchantment.Enchantment$Rarity -> cdu$a -> net.minecraft.world.item.enchantment.Enchantment$Rarity
    F:net.minecraft.world.item.enchantment.Enchantment$Rarity COMMON -> a
    F:net.minecraft.world.item.enchantment.Enchantment$Rarity UNCOMMON -> b
    F:net.minecraft.world.item.enchantment.Enchantment$Rarity RARE -> c
    F:net.minecraft.world.item.enchantment.Enchantment$Rarity VERY_RARE -> d
    F:int weight -> e
    M:int getWeight() -> a
net.minecraft.world.item.enchantment.EnchantmentCategory -> cdv -> net.minecraft.world.item.enchantment.EnchantmentSlotType
    F:net.minecraft.world.item.enchantment.EnchantmentSlotType ARMOR -> a
    F:net.minecraft.world.item.enchantment.EnchantmentSlotType ARMOR_FEET -> b
    F:net.minecraft.world.item.enchantment.EnchantmentSlotType ARMOR_LEGS -> c
    F:net.minecraft.world.item.enchantment.EnchantmentSlotType ARMOR_CHEST -> d
    F:net.minecraft.world.item.enchantment.EnchantmentSlotType ARMOR_HEAD -> e
    F:net.minecraft.world.item.enchantment.EnchantmentSlotType WEAPON -> f
    F:net.minecraft.world.item.enchantment.EnchantmentSlotType DIGGER -> g
    F:net.minecraft.world.item.enchantment.EnchantmentSlotType FISHING_ROD -> h
    F:net.minecraft.world.item.enchantment.EnchantmentSlotType TRIDENT -> i
    F:net.minecraft.world.item.enchantment.EnchantmentSlotType BREAKABLE -> j
    F:net.minecraft.world.item.enchantment.EnchantmentSlotType BOW -> k
    F:net.minecraft.world.item.enchantment.EnchantmentSlotType WEARABLE -> l
    F:net.minecraft.world.item.enchantment.EnchantmentSlotType CROSSBOW -> m
    F:net.minecraft.world.item.enchantment.EnchantmentSlotType VANISHABLE -> n
    M:boolean canEnchant(net.minecraft.world.item.Item) -> a
    M:boolean canEnchant(net.minecraft.world.item.Item) -> a
    M:boolean canEnchant(net.minecraft.world.item.Item) -> a
    M:boolean canEnchant(net.minecraft.world.item.Item) -> a
    M:boolean canEnchant(net.minecraft.world.item.Item) -> a
    M:boolean canEnchant(net.minecraft.world.item.Item) -> a
    M:boolean canEnchant(net.minecraft.world.item.Item) -> a
    M:boolean canEnchant(net.minecraft.world.item.Item) -> a
    M:boolean canEnchant(net.minecraft.world.item.Item) -> a
    M:boolean canEnchant(net.minecraft.world.item.Item) -> a
    M:boolean canEnchant(net.minecraft.world.item.Item) -> a
    M:boolean canEnchant(net.minecraft.world.item.Item) -> a
    M:boolean canEnchant(net.minecraft.world.item.Item) -> a
    M:boolean canEnchant(net.minecraft.world.item.Item) -> a
net.minecraft.world.item.enchantment.EnchantmentHelper -> cdw -> net.minecraft.world.item.enchantment.EnchantmentManager
    F:java.lang.String TAG_ENCH_ID -> a
    F:java.lang.String TAG_ENCH_LEVEL -> b
    F:float SWIFT_SNEAK_EXTRA_FACTOR -> c
    M:net.minecraft.nbt.NBTTagCompound storeEnchantment(net.minecraft.resources.MinecraftKey,int) -> a
    M:void setEnchantmentLevel(net.minecraft.nbt.NBTTagCompound,int) -> a
    M:int getEnchantmentLevel(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.resources.MinecraftKey getEnchantmentId(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.resources.MinecraftKey getEnchantmentId(net.minecraft.world.item.enchantment.Enchantment) -> a
    M:int getItemEnchantmentLevel(net.minecraft.world.item.enchantment.Enchantment,net.minecraft.world.item.ItemStack) -> a
    M:java.util.Map getEnchantments(net.minecraft.world.item.ItemStack) -> a
    M:java.util.Map deserializeEnchantments(net.minecraft.nbt.NBTTagList) -> a
    M:void setEnchantments(java.util.Map,net.minecraft.world.item.ItemStack) -> a
    M:void runIterationOnItem(net.minecraft.world.item.enchantment.EnchantmentHelper$EnchantmentVisitor,net.minecraft.world.item.ItemStack) -> a
    M:void runIterationOnInventory(net.minecraft.world.item.enchantment.EnchantmentHelper$EnchantmentVisitor,java.lang.Iterable) -> a
    M:int getDamageProtection(java.lang.Iterable,net.minecraft.world.damagesource.DamageSource) -> a
    M:float getDamageBonus(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.EnumMonsterType) -> a
    M:float getSweepingDamageRatio(net.minecraft.world.entity.EntityLiving) -> a
    M:void doPostHurtEffects(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.Entity) -> a
    M:void doPostDamageEffects(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.Entity) -> b
    M:int getEnchantmentLevel(net.minecraft.world.item.enchantment.Enchantment,net.minecraft.world.entity.EntityLiving) -> a
    M:float getSneakingSpeedBonus(net.minecraft.world.entity.EntityLiving) -> b
    M:int getKnockbackBonus(net.minecraft.world.entity.EntityLiving) -> c
    M:int getFireAspect(net.minecraft.world.entity.EntityLiving) -> d
    M:int getRespiration(net.minecraft.world.entity.EntityLiving) -> e
    M:int getDepthStrider(net.minecraft.world.entity.EntityLiving) -> f
    M:int getBlockEfficiency(net.minecraft.world.entity.EntityLiving) -> g
    M:int getFishingLuckBonus(net.minecraft.world.item.ItemStack) -> b
    M:int getFishingSpeedBonus(net.minecraft.world.item.ItemStack) -> c
    M:int getMobLooting(net.minecraft.world.entity.EntityLiving) -> h
    M:boolean hasAquaAffinity(net.minecraft.world.entity.EntityLiving) -> i
    M:boolean hasFrostWalker(net.minecraft.world.entity.EntityLiving) -> j
    M:boolean hasSoulSpeed(net.minecraft.world.entity.EntityLiving) -> k
    M:boolean hasBindingCurse(net.minecraft.world.item.ItemStack) -> d
    M:boolean hasVanishingCurse(net.minecraft.world.item.ItemStack) -> e
    M:int getLoyalty(net.minecraft.world.item.ItemStack) -> f
    M:int getRiptide(net.minecraft.world.item.ItemStack) -> g
    M:boolean hasChanneling(net.minecraft.world.item.ItemStack) -> h
    M:java.util.Map$Entry getRandomItemWith(net.minecraft.world.item.enchantment.Enchantment,net.minecraft.world.entity.EntityLiving) -> b
    M:java.util.Map$Entry getRandomItemWith(net.minecraft.world.item.enchantment.Enchantment,net.minecraft.world.entity.EntityLiving,java.util.function.Predicate) -> a
    M:int getEnchantmentCost(net.minecraft.util.RandomSource,int,int,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack enchantItem(net.minecraft.util.RandomSource,net.minecraft.world.item.ItemStack,int,boolean) -> a
    M:java.util.List selectEnchantment(net.minecraft.util.RandomSource,net.minecraft.world.item.ItemStack,int,boolean) -> b
    M:void filterCompatibleEnchantments(java.util.List,net.minecraft.world.item.enchantment.WeightedRandomEnchant) -> a
    M:boolean isEnchantmentCompatible(java.util.Collection,net.minecraft.world.item.enchantment.Enchantment) -> a
    M:java.util.List getAvailableEnchantmentResults(int,net.minecraft.world.item.ItemStack,boolean) -> a
net.minecraft.world.item.enchantment.EnchantmentHelper$EnchantmentVisitor -> cdw$a -> net.minecraft.world.item.enchantment.EnchantmentManager$a
net.minecraft.world.item.enchantment.EnchantmentInstance -> cdx -> net.minecraft.world.item.enchantment.WeightedRandomEnchant
    F:net.minecraft.world.item.enchantment.Enchantment enchantment -> a
    F:int level -> b
net.minecraft.world.item.enchantment.Enchantments -> cdy -> net.minecraft.world.item.enchantment.Enchantments
    F:net.minecraft.world.item.enchantment.Enchantment ALL_DAMAGE_PROTECTION -> a
    F:net.minecraft.world.item.enchantment.Enchantment FIRE_PROTECTION -> b
    F:net.minecraft.world.item.enchantment.Enchantment FALL_PROTECTION -> c
    F:net.minecraft.world.item.enchantment.Enchantment BLAST_PROTECTION -> d
    F:net.minecraft.world.item.enchantment.Enchantment PROJECTILE_PROTECTION -> e
    F:net.minecraft.world.item.enchantment.Enchantment RESPIRATION -> f
    F:net.minecraft.world.item.enchantment.Enchantment AQUA_AFFINITY -> g
    F:net.minecraft.world.item.enchantment.Enchantment THORNS -> h
    F:net.minecraft.world.item.enchantment.Enchantment DEPTH_STRIDER -> i
    F:net.minecraft.world.item.enchantment.Enchantment FROST_WALKER -> j
    F:net.minecraft.world.item.enchantment.Enchantment BINDING_CURSE -> k
    F:net.minecraft.world.item.enchantment.Enchantment SOUL_SPEED -> l
    F:net.minecraft.world.item.enchantment.Enchantment SWIFT_SNEAK -> m
    F:net.minecraft.world.item.enchantment.Enchantment SHARPNESS -> n
    F:net.minecraft.world.item.enchantment.Enchantment SMITE -> o
    F:net.minecraft.world.item.enchantment.Enchantment BANE_OF_ARTHROPODS -> p
    F:net.minecraft.world.item.enchantment.Enchantment KNOCKBACK -> q
    F:net.minecraft.world.item.enchantment.Enchantment FIRE_ASPECT -> r
    F:net.minecraft.world.item.enchantment.Enchantment MOB_LOOTING -> s
    F:net.minecraft.world.item.enchantment.Enchantment SWEEPING_EDGE -> t
    F:net.minecraft.world.item.enchantment.Enchantment BLOCK_EFFICIENCY -> u
    F:net.minecraft.world.item.enchantment.Enchantment SILK_TOUCH -> v
    F:net.minecraft.world.item.enchantment.Enchantment UNBREAKING -> w
    F:net.minecraft.world.item.enchantment.Enchantment BLOCK_FORTUNE -> x
    F:net.minecraft.world.item.enchantment.Enchantment POWER_ARROWS -> y
    F:net.minecraft.world.item.enchantment.Enchantment PUNCH_ARROWS -> z
    M:net.minecraft.world.item.enchantment.Enchantment register(java.lang.String,net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.FireAspectEnchantment -> cdz -> net.minecraft.world.item.enchantment.EnchantmentFire
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.FishingSpeedEnchantment -> cea -> net.minecraft.world.item.enchantment.EnchantmentLure
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.FrostWalkerEnchantment -> ceb -> net.minecraft.world.item.enchantment.EnchantmentFrostWalker
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:boolean isTreasureOnly() -> b
    M:int getMaxLevel() -> a
    M:void onEntityMoved(net.minecraft.world.entity.EntityLiving,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,int) -> a
    M:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.KnockbackEnchantment -> cec -> net.minecraft.world.item.enchantment.EnchantmentKnockback
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.LootBonusEnchantment -> ced -> net.minecraft.world.item.enchantment.EnchantmentLootBonus
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
    M:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.MendingEnchantment -> cee -> net.minecraft.world.item.enchantment.EnchantmentMending
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:boolean isTreasureOnly() -> b
    M:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.MultiShotEnchantment -> cef -> net.minecraft.world.item.enchantment.EnchantmentMultishot
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
    M:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.OxygenEnchantment -> ceg -> net.minecraft.world.item.enchantment.EnchantmentOxygen
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.ProtectionEnchantment -> ceh -> net.minecraft.world.item.enchantment.EnchantmentProtection
    F:net.minecraft.world.item.enchantment.EnchantmentProtection$DamageType type -> a
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
    M:int getDamageProtection(int,net.minecraft.world.damagesource.DamageSource) -> a
    M:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
    M:int getFireAfterDampener(net.minecraft.world.entity.EntityLiving,int) -> a
    M:double getExplosionKnockbackAfterDampener(net.minecraft.world.entity.EntityLiving,double) -> a
net.minecraft.world.item.enchantment.ProtectionEnchantment$Type -> ceh$a -> net.minecraft.world.item.enchantment.EnchantmentProtection$DamageType
    F:net.minecraft.world.item.enchantment.EnchantmentProtection$DamageType ALL -> a
    F:net.minecraft.world.item.enchantment.EnchantmentProtection$DamageType FIRE -> b
    F:net.minecraft.world.item.enchantment.EnchantmentProtection$DamageType FALL -> c
    F:net.minecraft.world.item.enchantment.EnchantmentProtection$DamageType EXPLOSION -> d
    F:net.minecraft.world.item.enchantment.EnchantmentProtection$DamageType PROJECTILE -> e
    F:int minCost -> f
    F:int levelCost -> g
    M:int getMinCost() -> a
    M:int getLevelCost() -> b
net.minecraft.world.item.enchantment.QuickChargeEnchantment -> cei -> net.minecraft.world.item.enchantment.EnchantmentQuickCharge
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.SoulSpeedEnchantment -> cej -> net.minecraft.world.item.enchantment.EnchantmentSoulSpeed
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:boolean isTreasureOnly() -> b
    M:boolean isTradeable() -> h
    M:boolean isDiscoverable() -> i
    M:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.SweepingEdgeEnchantment -> cek -> net.minecraft.world.item.enchantment.EnchantmentSweeping
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
    M:float getSweepingDamageRatio(int) -> e
net.minecraft.world.item.enchantment.SwiftSneakEnchantment -> cel -> net.minecraft.world.item.enchantment.SwiftSneakEnchantment
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:boolean isTreasureOnly() -> b
    M:boolean isTradeable() -> h
    M:boolean isDiscoverable() -> i
    M:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.ThornsEnchantment -> cem -> net.minecraft.world.item.enchantment.EnchantmentThorns
    F:float CHANCE_PER_LEVEL -> a
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
    M:boolean canEnchant(net.minecraft.world.item.ItemStack) -> a
    M:void doPostHurt(net.minecraft.world.entity.EntityLiving,net.minecraft.world.entity.Entity,int) -> b
    M:boolean shouldHit(int,net.minecraft.util.RandomSource) -> a
    M:int getDamage(int,net.minecraft.util.RandomSource) -> b
net.minecraft.world.item.enchantment.TridentChannelingEnchantment -> cen -> net.minecraft.world.item.enchantment.EnchantmentTridentChanneling
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.TridentImpalerEnchantment -> ceo -> net.minecraft.world.item.enchantment.EnchantmentTridentImpaling
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
    M:float getDamageBonus(int,net.minecraft.world.entity.EnumMonsterType) -> a
net.minecraft.world.item.enchantment.TridentLoyaltyEnchantment -> cep -> net.minecraft.world.item.enchantment.EnchantmentTridentLoyalty
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.TridentRiptideEnchantment -> ceq -> net.minecraft.world.item.enchantment.EnchantmentTridentRiptide
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
    M:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.UntouchingEnchantment -> cer -> net.minecraft.world.item.enchantment.EnchantmentSilkTouch
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
    M:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.VanishingCurseEnchantment -> ces -> net.minecraft.world.item.enchantment.EnchantmentVanishing
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
    M:boolean isTreasureOnly() -> b
    M:boolean isCurse() -> c
net.minecraft.world.item.enchantment.WaterWalkerEnchantment -> cet -> net.minecraft.world.item.enchantment.EnchantmentDepthStrider
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
    M:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.WaterWorkerEnchantment -> ceu -> net.minecraft.world.item.enchantment.EnchantmentWaterWorker
    M:int getMinCost(int) -> a
    M:int getMaxCost(int) -> b
    M:int getMaxLevel() -> a
net.minecraft.world.item.trading.Merchant -> cex -> net.minecraft.world.item.trading.IMerchant
    M:void openTradingScreen(net.minecraft.world.entity.player.EntityHuman,net.minecraft.network.chat.IChatBaseComponent,int) -> a
net.minecraft.world.item.trading.MerchantOffer -> cey -> net.minecraft.world.item.trading.MerchantRecipe
    F:net.minecraft.world.item.ItemStack baseCostA -> a
    F:net.minecraft.world.item.ItemStack costB -> b
    F:net.minecraft.world.item.ItemStack result -> c
    F:int uses -> d
    F:int maxUses -> e
    F:boolean rewardExp -> f
    F:int specialPriceDiff -> g
    F:int demand -> h
    F:float priceMultiplier -> i
    F:int xp -> j
    M:net.minecraft.world.item.ItemStack getBaseCostA() -> a
    M:net.minecraft.world.item.ItemStack getCostA() -> b
    M:net.minecraft.world.item.ItemStack getCostB() -> c
    M:net.minecraft.world.item.ItemStack getResult() -> d
    M:void updateDemand() -> e
    M:net.minecraft.world.item.ItemStack assemble() -> f
    M:int getUses() -> g
    M:void resetUses() -> h
    M:int getMaxUses() -> i
    M:void increaseUses() -> j
    M:int getDemand() -> k
    M:void addToSpecialPriceDiff(int) -> a
    M:void resetSpecialPriceDiff() -> l
    M:int getSpecialPriceDiff() -> m
    M:void setSpecialPriceDiff(int) -> b
    M:float getPriceMultiplier() -> n
    M:int getXp() -> o
    M:boolean isOutOfStock() -> p
    M:void setToOutOfStock() -> q
    M:boolean needsRestock() -> r
    M:boolean shouldRewardExp() -> s
    M:net.minecraft.nbt.NBTTagCompound createTag() -> t
    M:boolean satisfiedBy(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:boolean isRequiredItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> c
    M:boolean take(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> b
net.minecraft.world.item.trading.MerchantOffers -> cez -> net.minecraft.world.item.trading.MerchantRecipeList
    M:net.minecraft.world.item.trading.MerchantRecipe getRecipeFor(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,int) -> a
    M:void writeToStream(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.world.item.trading.MerchantRecipeList createFromStream(net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.nbt.NBTTagCompound createTag() -> a
net.minecraft.world.level.BaseCommandBlock -> cfb -> net.minecraft.world.level.CommandBlockListenerAbstract
    F:java.text.SimpleDateFormat TIME_FORMAT -> b
    F:net.minecraft.network.chat.IChatBaseComponent DEFAULT_NAME -> c
    F:long lastExecution -> d
    F:boolean updateLastExecution -> e
    F:int successCount -> f
    F:boolean trackOutput -> g
    F:net.minecraft.network.chat.IChatBaseComponent lastOutput -> h
    F:java.lang.String command -> i
    F:net.minecraft.network.chat.IChatBaseComponent name -> j
    M:int getSuccessCount() -> j
    M:void setSuccessCount(int) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getLastOutput() -> k
    M:net.minecraft.nbt.NBTTagCompound save(net.minecraft.nbt.NBTTagCompound) -> a
    M:void load(net.minecraft.nbt.NBTTagCompound) -> b
    M:void setCommand(java.lang.String) -> a
    M:java.lang.String getCommand() -> l
    M:boolean performCommand(net.minecraft.world.level.World) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getName() -> m
    M:void setName(net.minecraft.network.chat.IChatBaseComponent) -> b
    M:void sendSystemMessage(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void setLastOutput(net.minecraft.network.chat.IChatBaseComponent) -> c
    M:void setTrackOutput(boolean) -> a
    M:boolean isTrackOutput() -> n
    M:net.minecraft.world.EnumInteractionResult usedBy(net.minecraft.world.entity.player.EntityHuman) -> a
net.minecraft.world.level.BaseSpawner -> cfc -> net.minecraft.world.level.MobSpawnerAbstract
    F:org.slf4j.Logger LOGGER -> a
    F:int EVENT_SPAWN -> b
    F:int spawnDelay -> c
    F:net.minecraft.util.random.SimpleWeightedRandomList spawnPotentials -> d
    F:net.minecraft.world.level.MobSpawnerData nextSpawnData -> e
    F:double spin -> f
    F:double oSpin -> g
    F:int minSpawnDelay -> h
    F:int maxSpawnDelay -> i
    F:int spawnCount -> j
    F:net.minecraft.world.entity.Entity displayEntity -> k
    F:int maxNearbyEntities -> l
    F:int requiredPlayerRange -> m
    F:int spawnRange -> n
    M:void setEntityId(net.minecraft.world.entity.EntityTypes) -> a
    M:boolean isNearPlayer(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:void clientTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void serverTick(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:void delay(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> c
    M:void load(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagCompound save(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.entity.Entity getOrCreateDisplayEntity(net.minecraft.world.level.World) -> a
    M:boolean onEventTriggered(net.minecraft.world.level.World,int) -> a
    M:void setNextSpawnData(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.MobSpawnerData) -> a
    M:double getSpin() -> a
    M:double getoSpin() -> b
net.minecraft.world.level.BlockAndTintGetter -> cfd -> net.minecraft.world.level.IBlockLightAccess
    M:int getBrightness(net.minecraft.world.level.EnumSkyBlock,net.minecraft.core.BlockPosition) -> a
    M:int getRawBrightness(net.minecraft.core.BlockPosition,int) -> b
    M:boolean canSeeSky(net.minecraft.core.BlockPosition) -> g
net.minecraft.world.level.BlockCollisions -> cfe -> net.minecraft.world.level.VoxelShapeSpliterator
    F:net.minecraft.world.phys.AxisAlignedBB box -> a
    F:net.minecraft.world.phys.shapes.VoxelShapeCollision context -> b
    F:net.minecraft.core.CursorPosition cursor -> c
    F:net.minecraft.core.BlockPosition$MutableBlockPosition pos -> d
    F:net.minecraft.world.phys.shapes.VoxelShape entityShape -> e
    F:net.minecraft.world.level.ICollisionAccess collisionGetter -> f
    F:boolean onlySuffocatingBlocks -> g
    F:net.minecraft.world.level.IBlockAccess cachedBlockGetter -> h
    F:long cachedBlockGetterPos -> i
    M:net.minecraft.world.level.IBlockAccess getChunk(int,int) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape computeNext() -> a
net.minecraft.world.level.BlockEventData -> cff -> net.minecraft.world.level.BlockActionData
    F:net.minecraft.core.BlockPosition pos -> a
    F:net.minecraft.world.level.block.Block block -> b
    F:int paramA -> c
    F:int paramB -> d
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.BlockPosition pos() -> a
    M:net.minecraft.world.level.block.Block block() -> b
    M:int paramA() -> c
    M:int paramB() -> d
net.minecraft.world.level.BlockGetter -> cfg -> net.minecraft.world.level.IBlockAccess
    M:java.util.Optional getBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:int getLightEmission(net.minecraft.core.BlockPosition) -> h
    M:java.util.stream.Stream getBlockStates(net.minecraft.world.phys.AxisAlignedBB) -> a
    M:net.minecraft.world.phys.MovingObjectPositionBlock isBlockInLine(net.minecraft.world.level.ClipBlockStateContext) -> a
    M:net.minecraft.world.phys.MovingObjectPositionBlock clip(net.minecraft.world.level.RayTrace) -> a
    M:net.minecraft.world.phys.MovingObjectPositionBlock clipWithInteractionOverride(net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.level.block.state.IBlockData) -> a
    M:double getBlockFloorHeight(net.minecraft.world.phys.shapes.VoxelShape,java.util.function.Supplier) -> a
    M:double getBlockFloorHeight(net.minecraft.core.BlockPosition) -> i
    M:java.lang.Object traverseBlocks(net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D,java.lang.Object,java.util.function.BiFunction,java.util.function.Function) -> a
net.minecraft.world.level.ChunkPos -> cfh -> net.minecraft.world.level.ChunkCoordIntPair
    F:int SAFETY_MARGIN -> g
    F:long INVALID_CHUNK_POS -> a
    F:net.minecraft.world.level.ChunkCoordIntPair ZERO -> b
    F:long COORD_BITS -> h
    F:long COORD_MASK -> i
    F:int REGION_BITS -> j
    F:int REGION_SIZE -> c
    F:int REGION_MASK -> k
    F:int REGION_MAX_INDEX -> d
    F:int x -> e
    F:int z -> f
    F:int HASH_A -> l
    F:int HASH_C -> m
    F:int HASH_Z_XOR -> n
    F:net.minecraft.world.level.ChunkCoordIntPair pos -> e
    M:net.minecraft.world.level.ChunkCoordIntPair minFromRegion(int,int) -> a
    M:net.minecraft.world.level.ChunkCoordIntPair maxFromRegion(int,int) -> b
    M:long toLong() -> a
    M:long asLong(int,int) -> c
    M:long asLong(net.minecraft.core.BlockPosition) -> a
    M:int getX(long) -> a
    M:int getZ(long) -> b
    M:int hash(int,int) -> d
    M:boolean equals(java.lang.Object) -> equals
    M:int getMiddleBlockX() -> b
    M:int getMiddleBlockZ() -> c
    M:int getMinBlockX() -> d
    M:int getMinBlockZ() -> e
    M:int getMaxBlockX() -> f
    M:int getMaxBlockZ() -> g
    M:int getRegionX() -> h
    M:int getRegionZ() -> i
    M:int getRegionLocalX() -> j
    M:int getRegionLocalZ() -> k
    M:net.minecraft.core.BlockPosition getBlockAt(int,int,int) -> a
    M:int getBlockX(int) -> a
    M:int getBlockZ(int) -> b
    M:net.minecraft.core.BlockPosition getMiddleBlockPosition(int) -> c
    M:net.minecraft.core.BlockPosition getWorldPosition() -> l
    M:int getChessboardDistance(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:java.util.stream.Stream rangeClosed(net.minecraft.world.level.ChunkCoordIntPair,int) -> a
    M:java.util.stream.Stream rangeClosed(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.ChunkCoordIntPair) -> a
net.minecraft.world.level.ClipBlockStateContext -> cfi -> net.minecraft.world.level.ClipBlockStateContext
    F:net.minecraft.world.phys.Vec3D from -> a
    F:net.minecraft.world.phys.Vec3D to -> b
    F:java.util.function.Predicate block -> c
    M:net.minecraft.world.phys.Vec3D getTo() -> a
    M:net.minecraft.world.phys.Vec3D getFrom() -> b
    M:java.util.function.Predicate isTargetBlock() -> c
net.minecraft.world.level.ClipContext -> cfj -> net.minecraft.world.level.RayTrace
    F:net.minecraft.world.phys.Vec3D from -> a
    F:net.minecraft.world.phys.Vec3D to -> b
    F:net.minecraft.world.level.RayTrace$BlockCollisionOption block -> c
    F:net.minecraft.world.level.RayTrace$FluidCollisionOption fluid -> d
    F:net.minecraft.world.phys.shapes.VoxelShapeCollision collisionContext -> e
    M:net.minecraft.world.phys.Vec3D getTo() -> a
    M:net.minecraft.world.phys.Vec3D getFrom() -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getBlockShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getFluidShape(net.minecraft.world.level.material.Fluid,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.ClipContext$Block -> cfj$a -> net.minecraft.world.level.RayTrace$BlockCollisionOption
    F:net.minecraft.world.level.RayTrace$BlockCollisionOption COLLIDER -> a
    F:net.minecraft.world.level.RayTrace$BlockCollisionOption OUTLINE -> b
    F:net.minecraft.world.level.RayTrace$BlockCollisionOption VISUAL -> c
    F:net.minecraft.world.level.RayTrace$BlockCollisionOption FALLDAMAGE_RESETTING -> d
    F:net.minecraft.world.level.ClipContext$ShapeGetter shapeGetter -> e
    M:net.minecraft.world.phys.shapes.VoxelShape get(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> get
net.minecraft.world.level.ClipContext$Fluid -> cfj$b -> net.minecraft.world.level.RayTrace$FluidCollisionOption
    F:net.minecraft.world.level.RayTrace$FluidCollisionOption NONE -> a
    F:net.minecraft.world.level.RayTrace$FluidCollisionOption SOURCE_ONLY -> b
    F:net.minecraft.world.level.RayTrace$FluidCollisionOption ANY -> c
    F:net.minecraft.world.level.RayTrace$FluidCollisionOption WATER -> d
    F:java.util.function.Predicate canPick -> e
    M:boolean canPick(net.minecraft.world.level.material.Fluid) -> a
net.minecraft.world.level.ClipContext$ShapeGetter -> cfj$c -> net.minecraft.world.level.RayTrace$c
net.minecraft.world.level.CollisionGetter -> cfk -> net.minecraft.world.level.ICollisionAccess
    M:boolean isUnobstructed(net.minecraft.world.entity.Entity,net.minecraft.world.phys.shapes.VoxelShape) -> a
    M:boolean isUnobstructed(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean isUnobstructed(net.minecraft.world.entity.Entity) -> f
    M:boolean noCollision(net.minecraft.world.phys.AxisAlignedBB) -> b
    M:boolean noCollision(net.minecraft.world.entity.Entity) -> g
    M:boolean noCollision(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AxisAlignedBB) -> a
    M:java.lang.Iterable getCollisions(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AxisAlignedBB) -> c
    M:java.lang.Iterable getBlockCollisions(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AxisAlignedBB) -> d
    M:net.minecraft.world.phys.shapes.VoxelShape borderCollision(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AxisAlignedBB) -> f
    M:boolean collidesWithSuffocatingBlock(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AxisAlignedBB) -> e
    M:java.util.Optional findFreePosition(net.minecraft.world.entity.Entity,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.Vec3D,double,double,double) -> a
net.minecraft.world.level.ColorResolver -> cfl -> net.minecraft.world.level.ColorResolver
net.minecraft.world.level.CommonLevelAccessor -> cfm -> net.minecraft.world.level.ICombinedAccess
    M:java.util.Optional getBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:java.util.List getEntityCollisions(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AxisAlignedBB) -> b
    M:boolean isUnobstructed(net.minecraft.world.entity.Entity,net.minecraft.world.phys.shapes.VoxelShape) -> a
    M:net.minecraft.core.BlockPosition getHeightmapPos(net.minecraft.world.level.levelgen.HeightMap$Type,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.CustomSpawner -> cfn -> net.minecraft.world.level.MobSpawner
net.minecraft.world.level.DataPackConfig -> cfo -> net.minecraft.world.level.DataPackConfiguration
    F:net.minecraft.world.level.DataPackConfiguration DEFAULT -> a
    F:com.mojang.serialization.Codec CODEC -> b
    F:java.util.List enabled -> c
    F:java.util.List disabled -> d
    M:java.util.List getEnabled() -> a
    M:java.util.List getDisabled() -> b
net.minecraft.world.level.EmptyBlockGetter -> cfp -> net.minecraft.world.level.BlockAccessAir
    F:net.minecraft.world.level.BlockAccessAir INSTANCE -> a
net.minecraft.world.level.EntityBasedExplosionDamageCalculator -> cfq -> net.minecraft.world.level.ExplosionDamageCalculatorEntity
    F:net.minecraft.world.entity.Entity source -> a
    M:java.util.Optional getBlockExplosionResistance(net.minecraft.world.level.Explosion,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.Fluid) -> a
    M:boolean shouldBlockExplode(net.minecraft.world.level.Explosion,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,float) -> a
net.minecraft.world.level.EntityGetter -> cfr -> net.minecraft.world.level.IEntityAccess
    M:java.util.List getEntitiesOfClass(java.lang.Class,net.minecraft.world.phys.AxisAlignedBB,java.util.function.Predicate) -> a
    M:boolean isUnobstructed(net.minecraft.world.entity.Entity,net.minecraft.world.phys.shapes.VoxelShape) -> a
    M:java.util.List getEntitiesOfClass(java.lang.Class,net.minecraft.world.phys.AxisAlignedBB) -> a
    M:java.util.List getEntityCollisions(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AxisAlignedBB) -> b
    M:net.minecraft.world.entity.player.EntityHuman getNearestPlayer(double,double,double,double,java.util.function.Predicate) -> a
    M:net.minecraft.world.entity.player.EntityHuman getNearestPlayer(net.minecraft.world.entity.Entity,double) -> a
    M:net.minecraft.world.entity.player.EntityHuman getNearestPlayer(double,double,double,double,boolean) -> a
    M:boolean hasNearbyAlivePlayer(double,double,double,double) -> a
    M:net.minecraft.world.entity.player.EntityHuman getNearestPlayer(net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition,net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.entity.player.EntityHuman getNearestPlayer(net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition,net.minecraft.world.entity.EntityLiving,double,double,double) -> a
    M:net.minecraft.world.entity.player.EntityHuman getNearestPlayer(net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition,double,double,double) -> a
    M:net.minecraft.world.entity.EntityLiving getNearestEntity(java.lang.Class,net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition,net.minecraft.world.entity.EntityLiving,double,double,double,net.minecraft.world.phys.AxisAlignedBB) -> a
    M:net.minecraft.world.entity.EntityLiving getNearestEntity(java.util.List,net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition,net.minecraft.world.entity.EntityLiving,double,double,double) -> a
    M:java.util.List getNearbyPlayers(net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition,net.minecraft.world.entity.EntityLiving,net.minecraft.world.phys.AxisAlignedBB) -> a
    M:java.util.List getNearbyEntities(java.lang.Class,net.minecraft.world.entity.ai.targeting.PathfinderTargetCondition,net.minecraft.world.entity.EntityLiving,net.minecraft.world.phys.AxisAlignedBB) -> a
    M:net.minecraft.world.entity.player.EntityHuman getPlayerByUUID(java.util.UUID) -> b
net.minecraft.world.level.Explosion -> cfs -> net.minecraft.world.level.Explosion
    F:net.minecraft.world.level.ExplosionDamageCalculator EXPLOSION_DAMAGE_CALCULATOR -> a
    F:int MAX_DROPS_PER_COMBINED_STACK -> b
    F:boolean fire -> c
    F:net.minecraft.world.level.Explosion$Effect blockInteraction -> d
    F:net.minecraft.util.RandomSource random -> e
    F:net.minecraft.world.level.World level -> f
    F:double x -> g
    F:double y -> h
    F:double z -> i
    F:net.minecraft.world.entity.Entity source -> j
    F:float radius -> k
    F:net.minecraft.world.damagesource.DamageSource damageSource -> l
    F:net.minecraft.world.level.ExplosionDamageCalculator damageCalculator -> m
    F:it.unimi.dsi.fastutil.objects.ObjectArrayList toBlow -> n
    F:java.util.Map hitPlayers -> o
    M:net.minecraft.world.level.ExplosionDamageCalculator makeDamageCalculator(net.minecraft.world.entity.Entity) -> a
    M:float getSeenPercent(net.minecraft.world.phys.Vec3D,net.minecraft.world.entity.Entity) -> a
    M:void explode() -> a
    M:void finalizeExplosion(boolean) -> a
    M:void addBlockDrops(it.unimi.dsi.fastutil.objects.ObjectArrayList,net.minecraft.world.item.ItemStack,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.damagesource.DamageSource getDamageSource() -> b
    M:java.util.Map getHitPlayers() -> c
    M:net.minecraft.world.entity.EntityLiving getSourceMob() -> d
    M:void clearToBlow() -> e
    M:java.util.List getToBlow() -> f
net.minecraft.world.level.Explosion$BlockInteraction -> cfs$a -> net.minecraft.world.level.Explosion$Effect
    F:net.minecraft.world.level.Explosion$Effect NONE -> a
    F:net.minecraft.world.level.Explosion$Effect BREAK -> b
    F:net.minecraft.world.level.Explosion$Effect DESTROY -> c
net.minecraft.world.level.ExplosionDamageCalculator -> cft -> net.minecraft.world.level.ExplosionDamageCalculator
    M:java.util.Optional getBlockExplosionResistance(net.minecraft.world.level.Explosion,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.Fluid) -> a
    M:boolean shouldBlockExplode(net.minecraft.world.level.Explosion,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,float) -> a
net.minecraft.world.level.FoliageColor -> cfu -> net.minecraft.world.level.FoliageColor
    M:void init(int[]) -> a
    M:int get(double,double) -> a
    M:int getEvergreenColor() -> a
    M:int getBirchColor() -> b
    M:int getDefaultColor() -> c
    M:int getMangroveColor() -> d
net.minecraft.world.level.ForcedChunksSavedData -> cfv -> net.minecraft.world.level.ForcedChunk
    F:java.lang.String FILE_ID -> a
    F:java.lang.String TAG_FORCED -> b
    F:it.unimi.dsi.fastutil.longs.LongSet chunks -> c
    M:net.minecraft.world.level.ForcedChunk load(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.nbt.NBTTagCompound save(net.minecraft.nbt.NBTTagCompound) -> a
    M:it.unimi.dsi.fastutil.longs.LongSet getChunks() -> a
net.minecraft.world.level.GameRules -> cfw -> net.minecraft.world.level.GameRules
    F:int DEFAULT_RANDOM_TICK_SPEED -> a
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_DOFIRETICK -> b
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_MOBGRIEFING -> c
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_KEEPINVENTORY -> d
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_DOMOBSPAWNING -> e
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_DOMOBLOOT -> f
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_DOBLOCKDROPS -> g
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_DOENTITYDROPS -> h
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_COMMANDBLOCKOUTPUT -> i
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_NATURAL_REGENERATION -> j
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_DAYLIGHT -> k
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_LOGADMINCOMMANDS -> l
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_SHOWDEATHMESSAGES -> m
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_RANDOMTICKING -> n
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_SENDCOMMANDFEEDBACK -> o
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_REDUCEDDEBUGINFO -> p
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_SPECTATORSGENERATECHUNKS -> q
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_SPAWN_RADIUS -> r
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_DISABLE_ELYTRA_MOVEMENT_CHECK -> s
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_MAX_ENTITY_CRAMMING -> t
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_WEATHER_CYCLE -> u
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_LIMITED_CRAFTING -> v
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_MAX_COMMAND_CHAIN_LENGTH -> w
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_ANNOUNCE_ADVANCEMENTS -> x
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_DISABLE_RAIDS -> y
    F:net.minecraft.world.level.GameRules$GameRuleKey RULE_DOINSOMNIA -> z
    M:net.minecraft.world.level.GameRules$GameRuleKey register(java.lang.String,net.minecraft.world.level.GameRules$GameRuleCategory,net.minecraft.world.level.GameRules$GameRuleDefinition) -> a
    M:net.minecraft.world.level.GameRules$GameRuleValue getRule(net.minecraft.world.level.GameRules$GameRuleKey) -> a
    M:net.minecraft.nbt.NBTTagCompound createTag() -> a
    M:void loadFromTag(com.mojang.serialization.DynamicLike) -> a
    M:net.minecraft.world.level.GameRules copy() -> b
    M:void visitGameRuleTypes(net.minecraft.world.level.GameRules$GameRuleVisitor) -> a
    M:void callVisitorCap(net.minecraft.world.level.GameRules$GameRuleVisitor,net.minecraft.world.level.GameRules$GameRuleKey,net.minecraft.world.level.GameRules$GameRuleDefinition) -> a
    M:void assignFrom(net.minecraft.world.level.GameRules,net.minecraft.server.MinecraftServer) -> a
    M:void assignCap(net.minecraft.world.level.GameRules$GameRuleKey,net.minecraft.world.level.GameRules,net.minecraft.server.MinecraftServer) -> a
    M:boolean getBoolean(net.minecraft.world.level.GameRules$GameRuleKey) -> b
    M:int getInt(net.minecraft.world.level.GameRules$GameRuleKey) -> c
net.minecraft.world.level.GameRules$BooleanValue -> cfw$a -> net.minecraft.world.level.GameRules$GameRuleBoolean
    F:boolean value -> b
    M:net.minecraft.world.level.GameRules$GameRuleDefinition create(boolean,java.util.function.BiConsumer) -> a
    M:net.minecraft.world.level.GameRules$GameRuleDefinition create(boolean) -> a
    M:void updateFromArgument(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:boolean get() -> a
    M:void set(boolean,net.minecraft.server.MinecraftServer) -> a
    M:java.lang.String serialize() -> b
    M:void deserialize(java.lang.String) -> a
    M:int getCommandResult() -> c
    M:net.minecraft.world.level.GameRules$GameRuleBoolean getSelf() -> d
    M:net.minecraft.world.level.GameRules$GameRuleBoolean copy() -> e
    M:void setFrom(net.minecraft.world.level.GameRules$GameRuleBoolean,net.minecraft.server.MinecraftServer) -> a
    M:void setFrom(net.minecraft.world.level.GameRules$GameRuleValue,net.minecraft.server.MinecraftServer) -> a
    M:net.minecraft.world.level.GameRules$GameRuleValue copy() -> f
    M:net.minecraft.world.level.GameRules$GameRuleValue getSelf() -> g
net.minecraft.world.level.GameRules$Category -> cfw$b -> net.minecraft.world.level.GameRules$GameRuleCategory
    F:net.minecraft.world.level.GameRules$GameRuleCategory PLAYER -> a
    F:net.minecraft.world.level.GameRules$GameRuleCategory MOBS -> b
    F:net.minecraft.world.level.GameRules$GameRuleCategory SPAWNING -> c
    F:net.minecraft.world.level.GameRules$GameRuleCategory DROPS -> d
    F:net.minecraft.world.level.GameRules$GameRuleCategory UPDATES -> e
    F:net.minecraft.world.level.GameRules$GameRuleCategory CHAT -> f
    F:net.minecraft.world.level.GameRules$GameRuleCategory MISC -> g
    F:java.lang.String descriptionId -> h
    M:java.lang.String getDescriptionId() -> a
net.minecraft.world.level.GameRules$GameRuleTypeVisitor -> cfw$c -> net.minecraft.world.level.GameRules$GameRuleVisitor
    M:void visit(net.minecraft.world.level.GameRules$GameRuleKey,net.minecraft.world.level.GameRules$GameRuleDefinition) -> a
    M:void visitBoolean(net.minecraft.world.level.GameRules$GameRuleKey,net.minecraft.world.level.GameRules$GameRuleDefinition) -> b
    M:void visitInteger(net.minecraft.world.level.GameRules$GameRuleKey,net.minecraft.world.level.GameRules$GameRuleDefinition) -> c
net.minecraft.world.level.GameRules$IntegerValue -> cfw$d -> net.minecraft.world.level.GameRules$GameRuleInt
    F:int value -> b
    M:net.minecraft.world.level.GameRules$GameRuleDefinition create(int,java.util.function.BiConsumer) -> a
    M:net.minecraft.world.level.GameRules$GameRuleDefinition create(int) -> a
    M:void updateFromArgument(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    M:int get() -> a
    M:void set(int,net.minecraft.server.MinecraftServer) -> a
    M:java.lang.String serialize() -> b
    M:void deserialize(java.lang.String) -> a
    M:boolean tryDeserialize(java.lang.String) -> b
    M:int safeParse(java.lang.String) -> c
    M:int getCommandResult() -> c
    M:net.minecraft.world.level.GameRules$GameRuleInt getSelf() -> d
    M:net.minecraft.world.level.GameRules$GameRuleInt copy() -> e
    M:void setFrom(net.minecraft.world.level.GameRules$GameRuleInt,net.minecraft.server.MinecraftServer) -> a
    M:void setFrom(net.minecraft.world.level.GameRules$GameRuleValue,net.minecraft.server.MinecraftServer) -> a
    M:net.minecraft.world.level.GameRules$GameRuleValue copy() -> f
    M:net.minecraft.world.level.GameRules$GameRuleValue getSelf() -> g
net.minecraft.world.level.GameRules$Key -> cfw$e -> net.minecraft.world.level.GameRules$GameRuleKey
    F:java.lang.String id -> a
    F:net.minecraft.world.level.GameRules$GameRuleCategory category -> b
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.String getId() -> a
    M:java.lang.String getDescriptionId() -> b
    M:net.minecraft.world.level.GameRules$GameRuleCategory getCategory() -> c
net.minecraft.world.level.GameRules$Type -> cfw$f -> net.minecraft.world.level.GameRules$GameRuleDefinition
    F:java.util.function.Supplier argument -> a
    F:java.util.function.Function constructor -> b
    F:java.util.function.BiConsumer callback -> c
    F:net.minecraft.world.level.GameRules$VisitorCaller visitorCaller -> d
    M:com.mojang.brigadier.builder.RequiredArgumentBuilder createArgument(java.lang.String) -> a
    M:net.minecraft.world.level.GameRules$GameRuleValue createRule() -> a
    M:void callVisitor(net.minecraft.world.level.GameRules$GameRuleVisitor,net.minecraft.world.level.GameRules$GameRuleKey) -> a
net.minecraft.world.level.GameRules$Value -> cfw$g -> net.minecraft.world.level.GameRules$GameRuleValue
    F:net.minecraft.world.level.GameRules$GameRuleDefinition type -> a
    M:void setFromArgument(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    M:void onChanged(net.minecraft.server.MinecraftServer) -> a
net.minecraft.world.level.GameRules$VisitorCaller -> cfw$h -> net.minecraft.world.level.GameRules$h
net.minecraft.world.level.GameType -> cfx -> net.minecraft.world.level.EnumGamemode
    F:net.minecraft.world.level.EnumGamemode SURVIVAL -> a
    F:net.minecraft.world.level.EnumGamemode CREATIVE -> b
    F:net.minecraft.world.level.EnumGamemode ADVENTURE -> c
    F:net.minecraft.world.level.EnumGamemode SPECTATOR -> d
    F:net.minecraft.world.level.EnumGamemode DEFAULT_MODE -> e
    F:int NOT_SET -> f
    F:int id -> g
    F:java.lang.String name -> h
    F:net.minecraft.network.chat.IChatBaseComponent shortName -> i
    F:net.minecraft.network.chat.IChatBaseComponent longName -> j
    M:int getId() -> a
    M:java.lang.String getName() -> b
    M:net.minecraft.network.chat.IChatBaseComponent getLongDisplayName() -> c
    M:net.minecraft.network.chat.IChatBaseComponent getShortDisplayName() -> d
    M:void updatePlayerAbilities(net.minecraft.world.entity.player.PlayerAbilities) -> a
    M:boolean isBlockPlacingRestricted() -> e
    M:boolean isCreative() -> f
    M:boolean isSurvival() -> g
    M:net.minecraft.world.level.EnumGamemode byId(int) -> a
    M:net.minecraft.world.level.EnumGamemode byId(int,net.minecraft.world.level.EnumGamemode) -> a
    M:net.minecraft.world.level.EnumGamemode byName(java.lang.String) -> a
    M:net.minecraft.world.level.EnumGamemode byName(java.lang.String,net.minecraft.world.level.EnumGamemode) -> a
    M:int getNullableId(net.minecraft.world.level.EnumGamemode) -> a
    M:net.minecraft.world.level.EnumGamemode byNullableId(int) -> b
net.minecraft.world.level.GrassColor -> cfy -> net.minecraft.world.level.GrassColor
    M:void init(int[]) -> a
    M:int get(double,double) -> a
net.minecraft.world.level.ItemLike -> cfz -> net.minecraft.world.level.IMaterial
net.minecraft.world.level.Level -> cga -> net.minecraft.world.level.World
    F:com.mojang.serialization.Codec RESOURCE_KEY_CODEC -> d
    F:net.minecraft.resources.ResourceKey OVERWORLD -> e
    F:net.minecraft.resources.ResourceKey NETHER -> f
    F:net.minecraft.resources.ResourceKey END -> g
    F:int MAX_LEVEL_SIZE -> h
    F:int LONG_PARTICLE_CLIP_RANGE -> i
    F:int SHORT_PARTICLE_CLIP_RANGE -> j
    F:int MAX_BRIGHTNESS -> k
    F:int TICKS_PER_DAY -> l
    F:int MAX_ENTITY_SPAWN_Y -> m
    F:int MIN_ENTITY_SPAWN_Y -> n
    F:java.util.List blockEntityTickers -> o
    F:net.minecraft.world.level.redstone.NeighborUpdater neighborUpdater -> p
    F:java.util.List pendingBlockEntityTickers -> b
    F:boolean tickingBlockEntities -> c
    F:java.lang.Thread thread -> z
    F:int randValue -> q
    F:int addend -> r
    F:float oRainLevel -> s
    F:float rainLevel -> t
    F:float oThunderLevel -> u
    F:float thunderLevel -> v
    F:net.minecraft.util.RandomSource random -> w
    F:net.minecraft.world.level.storage.WorldDataMutable levelData -> x
    F:boolean isClientSide -> y
    M:net.minecraft.server.MinecraftServer getServer() -> n
    M:boolean isInWorldBounds(net.minecraft.core.BlockPosition) -> j
    M:boolean isInSpawnableBounds(net.minecraft.core.BlockPosition) -> k
    M:boolean isOutsideSpawnableHeight(int) -> b
    M:net.minecraft.world.level.chunk.Chunk getChunkAt(net.minecraft.core.BlockPosition) -> l
    M:net.minecraft.world.level.chunk.Chunk getChunk(int,int) -> d
    M:net.minecraft.world.level.chunk.IChunkAccess getChunk(int,int,net.minecraft.world.level.chunk.ChunkStatus,boolean) -> a
    M:boolean setBlock(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,int) -> a
    M:boolean setBlock(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,int,int) -> a
    M:void onBlockStateChange(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean removeBlock(net.minecraft.core.BlockPosition,boolean) -> a
    M:boolean destroyBlock(net.minecraft.core.BlockPosition,boolean,net.minecraft.world.entity.Entity,int) -> a
    M:void addDestroyBlockEffect(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean setBlockAndUpdate(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void setBlocksDirty(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void updateNeighborsAt(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block) -> a
    M:void updateNeighborsAtExceptFromFacing(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.EnumDirection) -> a
    M:void neighborChanged(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void neighborShapeChanged(net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,int,int) -> a
    M:int getHeight(net.minecraft.world.level.levelgen.HeightMap$Type,int,int) -> a
    M:void playSound(net.minecraft.world.entity.player.EntityHuman,net.minecraft.core.BlockPosition,net.minecraft.sounds.SoundEffect,net.minecraft.sounds.SoundCategory,float,float) -> a
    M:void playSound(net.minecraft.world.entity.player.EntityHuman,double,double,double,net.minecraft.sounds.SoundEffect,net.minecraft.sounds.SoundCategory,float,float) -> a
    M:void playSound(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.entity.Entity,net.minecraft.sounds.SoundEffect,net.minecraft.sounds.SoundCategory,float,float) -> a
    M:void playLocalSound(double,double,double,net.minecraft.sounds.SoundEffect,net.minecraft.sounds.SoundCategory,float,float,boolean) -> a
    M:void addParticle(net.minecraft.core.particles.ParticleParam,double,double,double,double,double,double) -> a
    M:void addParticle(net.minecraft.core.particles.ParticleParam,boolean,double,double,double,double,double,double) -> a
    M:void addAlwaysVisibleParticle(net.minecraft.core.particles.ParticleParam,double,double,double,double,double,double) -> b
    M:void addAlwaysVisibleParticle(net.minecraft.core.particles.ParticleParam,boolean,double,double,double,double,double,double) -> b
    M:float getSunAngle(float) -> a
    M:void addBlockEntityTicker(net.minecraft.world.level.block.entity.TickingBlockEntity) -> a
    M:void guardEntityTick(java.util.function.Consumer,net.minecraft.world.entity.Entity) -> a
    M:boolean shouldTickDeath(net.minecraft.world.entity.Entity) -> h
    M:boolean shouldTickBlocksAt(long) -> a
    M:boolean shouldTickBlocksAt(net.minecraft.core.BlockPosition) -> m
    M:net.minecraft.world.level.Explosion explode(net.minecraft.world.entity.Entity,double,double,double,float,net.minecraft.world.level.Explosion$Effect) -> a
    M:net.minecraft.world.level.Explosion explode(net.minecraft.world.entity.Entity,double,double,double,float,boolean,net.minecraft.world.level.Explosion$Effect) -> a
    M:net.minecraft.world.level.Explosion explode(net.minecraft.world.entity.Entity,net.minecraft.world.damagesource.DamageSource,net.minecraft.world.level.ExplosionDamageCalculator,double,double,double,float,boolean,net.minecraft.world.level.Explosion$Effect) -> a
    M:void setBlockEntity(net.minecraft.world.level.block.entity.TileEntity) -> a
    M:void removeBlockEntity(net.minecraft.core.BlockPosition) -> n
    M:boolean isLoaded(net.minecraft.core.BlockPosition) -> o
    M:boolean loadedAndEntityCanStandOnFace(net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity,net.minecraft.core.EnumDirection) -> a
    M:boolean loadedAndEntityCanStandOn(net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:void setSpawnSettings(boolean,boolean) -> b
    M:void close() -> close
    M:net.minecraft.world.level.IBlockAccess getChunkForCollisions(int,int) -> c
    M:java.util.List getEntities(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AxisAlignedBB,java.util.function.Predicate) -> a
    M:java.util.List getEntities(net.minecraft.world.level.entity.EntityTypeTest,net.minecraft.world.phys.AxisAlignedBB,java.util.function.Predicate) -> a
    M:void blockEntityChanged(net.minecraft.core.BlockPosition) -> p
    M:int getDirectSignalTo(net.minecraft.core.BlockPosition) -> q
    M:boolean hasSignal(net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:int getSignal(net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:boolean hasNeighborSignal(net.minecraft.core.BlockPosition) -> r
    M:int getBestNeighborSignal(net.minecraft.core.BlockPosition) -> s
    M:boolean mayInteract(net.minecraft.world.entity.player.EntityHuman,net.minecraft.core.BlockPosition) -> a
    M:void broadcastEntityEvent(net.minecraft.world.entity.Entity,byte) -> a
    M:void blockEvent(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,int,int) -> a
    M:float getThunderLevel(float) -> b
    M:void setThunderLevel(float) -> c
    M:float getRainLevel(float) -> d
    M:void setRainLevel(float) -> e
    M:boolean isRainingAt(net.minecraft.core.BlockPosition) -> t
    M:boolean isHumidAt(net.minecraft.core.BlockPosition) -> u
    M:void globalLevelEvent(int,net.minecraft.core.BlockPosition,int) -> b
    M:net.minecraft.CrashReportSystemDetails fillReportDetails(net.minecraft.CrashReport) -> a
    M:void createFireworks(double,double,double,double,double,double,net.minecraft.nbt.NBTTagCompound) -> a
    M:void updateNeighbourForOutputSignal(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block) -> c
    M:void setSkyFlashTime(int) -> c
    M:void sendPacketToServer(net.minecraft.network.protocol.Packet) -> a
    M:net.minecraft.core.Holder dimensionTypeRegistration() -> aa
    M:net.minecraft.resources.ResourceKey dimension() -> ab
    M:boolean isStateAtPosition(net.minecraft.core.BlockPosition,java.util.function.Predicate) -> a
    M:boolean isFluidAtPosition(net.minecraft.core.BlockPosition,java.util.function.Predicate) -> b
    M:net.minecraft.core.BlockPosition getBlockRandomPos(int,int,int,int) -> a
    M:boolean noSave() -> r
    M:net.minecraft.util.profiling.GameProfilerFiller getProfiler() -> ac
    M:java.util.function.Supplier getProfilerSupplier() -> ad
    M:boolean isDebug() -> ae
    M:net.minecraft.world.level.chunk.IChunkAccess getChunk(int,int) -> a
    M:double getCenterX() -> a
    M:double getCenterZ() -> b
net.minecraft.world.level.LevelAccessor -> cgb -> net.minecraft.world.level.GeneratorAccess
    M:long dayTime() -> af
    M:net.minecraft.world.ticks.NextTickListEntry createTick(net.minecraft.core.BlockPosition,java.lang.Object,int,net.minecraft.world.ticks.TickListPriority) -> a
    M:net.minecraft.world.ticks.NextTickListEntry createTick(net.minecraft.core.BlockPosition,java.lang.Object,int) -> a
    M:void scheduleTick(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,int,net.minecraft.world.ticks.TickListPriority) -> a
    M:void scheduleTick(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,int) -> a
    M:void scheduleTick(net.minecraft.core.BlockPosition,net.minecraft.world.level.material.FluidType,int,net.minecraft.world.ticks.TickListPriority) -> a
    M:void scheduleTick(net.minecraft.core.BlockPosition,net.minecraft.world.level.material.FluidType,int) -> a
    M:net.minecraft.world.EnumDifficulty getDifficulty() -> ag
    M:boolean hasChunk(int,int) -> b
    M:void blockUpdated(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block) -> b
    M:void neighborShapeChanged(net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,int,int) -> a
    M:void levelEvent(int,net.minecraft.core.BlockPosition,int) -> c
    M:void gameEvent(net.minecraft.world.entity.Entity,net.minecraft.world.level.gameevent.GameEvent,net.minecraft.world.phys.Vec3D) -> a
    M:void gameEvent(net.minecraft.world.entity.Entity,net.minecraft.world.level.gameevent.GameEvent,net.minecraft.core.BlockPosition) -> a
    M:void gameEvent(net.minecraft.world.level.gameevent.GameEvent,net.minecraft.core.BlockPosition,net.minecraft.world.level.gameevent.GameEvent$Context) -> a
net.minecraft.world.level.LevelHeightAccessor -> cgc -> net.minecraft.world.level.LevelHeightAccessor
    M:int getMaxBuildHeight() -> ah
    M:int getSectionsCount() -> ai
    M:int getMinSection() -> aj
    M:int getMaxSection() -> ak
    M:boolean isOutsideBuildHeight(net.minecraft.core.BlockPosition) -> v
    M:boolean isOutsideBuildHeight(int) -> d
    M:int getSectionIndex(int) -> e
    M:int getSectionIndexFromSectionY(int) -> f
    M:int getSectionYFromSectionIndex(int) -> g
    M:net.minecraft.world.level.LevelHeightAccessor create(int,int) -> e
net.minecraft.world.level.LevelReader -> cgd -> net.minecraft.world.level.IWorldReader
    M:net.minecraft.core.Holder getBiome(net.minecraft.core.BlockPosition) -> w
    M:java.util.stream.Stream getBlockStatesIfLoaded(net.minecraft.world.phys.AxisAlignedBB) -> c
    M:int getBlockTint(net.minecraft.core.BlockPosition,net.minecraft.world.level.ColorResolver) -> a
    M:net.minecraft.core.BlockPosition getHeightmapPos(net.minecraft.world.level.levelgen.HeightMap$Type,net.minecraft.core.BlockPosition) -> a
    M:boolean isEmptyBlock(net.minecraft.core.BlockPosition) -> x
    M:boolean canSeeSkyFromBelowWater(net.minecraft.core.BlockPosition) -> y
    M:float getPathfindingCostFromLightLevels(net.minecraft.core.BlockPosition) -> z
    M:int getDirectSignal(net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> c
    M:net.minecraft.world.level.chunk.IChunkAccess getChunk(int,int) -> a
    M:net.minecraft.world.level.chunk.IChunkAccess getChunk(int,int,net.minecraft.world.level.chunk.ChunkStatus) -> a
    M:net.minecraft.world.level.IBlockAccess getChunkForCollisions(int,int) -> c
    M:boolean containsAnyLiquid(net.minecraft.world.phys.AxisAlignedBB) -> d
    M:int getMaxLocalRawBrightness(net.minecraft.core.BlockPosition,int) -> c
    M:boolean hasChunkAt(int,int) -> f
    M:boolean hasChunksAt(net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean hasChunksAt(int,int,int,int,int,int) -> a
    M:boolean hasChunksAt(int,int,int,int) -> b
net.minecraft.world.level.LevelSettings -> cge -> net.minecraft.world.level.WorldSettings
    F:java.lang.String levelName -> a
    F:net.minecraft.world.level.EnumGamemode gameType -> b
    F:boolean hardcore -> c
    F:net.minecraft.world.EnumDifficulty difficulty -> d
    F:boolean allowCommands -> e
    F:net.minecraft.world.level.GameRules gameRules -> f
    F:net.minecraft.world.level.DataPackConfiguration dataPackConfig -> g
    M:net.minecraft.world.level.WorldSettings parse(com.mojang.serialization.Dynamic,net.minecraft.world.level.DataPackConfiguration) -> a
    M:java.lang.String levelName() -> a
    M:net.minecraft.world.level.EnumGamemode gameType() -> b
    M:boolean hardcore() -> c
    M:net.minecraft.world.EnumDifficulty difficulty() -> d
    M:boolean allowCommands() -> e
    M:net.minecraft.world.level.GameRules gameRules() -> f
    M:net.minecraft.world.level.DataPackConfiguration getDataPackConfig() -> g
    M:net.minecraft.world.level.WorldSettings withGameType(net.minecraft.world.level.EnumGamemode) -> a
    M:net.minecraft.world.level.WorldSettings withDifficulty(net.minecraft.world.EnumDifficulty) -> a
    M:net.minecraft.world.level.WorldSettings withDataPackConfig(net.minecraft.world.level.DataPackConfiguration) -> a
    M:net.minecraft.world.level.WorldSettings copy() -> h
net.minecraft.world.level.LevelSimulatedRW -> cgf -> net.minecraft.world.level.VirtualLevelWritable
net.minecraft.world.level.LevelSimulatedReader -> cgg -> net.minecraft.world.level.VirtualLevelReadable
net.minecraft.world.level.LevelTimeAccess -> cgh -> net.minecraft.world.level.IWorldTime
    M:float getMoonBrightness() -> al
    M:float getTimeOfDay(float) -> f
    M:int getMoonPhase() -> am
net.minecraft.world.level.LevelWriter -> cgi -> net.minecraft.world.level.IWorldWriter
    M:boolean setBlock(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,int) -> a
    M:boolean destroyBlock(net.minecraft.core.BlockPosition,boolean) -> b
    M:boolean destroyBlock(net.minecraft.core.BlockPosition,boolean,net.minecraft.world.entity.Entity) -> a
    M:boolean addFreshEntity(net.minecraft.world.entity.Entity) -> b
net.minecraft.world.level.LightLayer -> cgj -> net.minecraft.world.level.EnumSkyBlock
    F:net.minecraft.world.level.EnumSkyBlock SKY -> a
    F:net.minecraft.world.level.EnumSkyBlock BLOCK -> b
    F:int surrounding -> c
net.minecraft.world.level.LocalMobCapCalculator -> cgk -> net.minecraft.world.level.LocalMobCapCalculator
    F:it.unimi.dsi.fastutil.longs.Long2ObjectMap playersNearChunk -> a
    F:java.util.Map playerMobCounts -> b
    F:net.minecraft.server.level.PlayerChunkMap chunkMap -> c
    M:java.util.List getPlayersNear(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:void addMob(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.entity.EnumCreatureType) -> a
    M:boolean canSpawn(net.minecraft.world.entity.EnumCreatureType,net.minecraft.world.level.ChunkCoordIntPair) -> a
net.minecraft.world.level.LocalMobCapCalculator$MobCounts -> cgk$a -> net.minecraft.world.level.LocalMobCapCalculator$a
    F:it.unimi.dsi.fastutil.objects.Object2IntMap counts -> a
    M:void add(net.minecraft.world.entity.EnumCreatureType) -> a
    M:boolean canSpawn(net.minecraft.world.entity.EnumCreatureType) -> b
net.minecraft.world.level.NaturalSpawner -> cgl -> net.minecraft.world.level.SpawnerCreature
    F:org.slf4j.Logger LOGGER -> c
    F:int MIN_SPAWN_DISTANCE -> d
    F:int SPAWN_DISTANCE_CHUNK -> a
    F:int SPAWN_DISTANCE_BLOCK -> b
    F:int MAGIC_NUMBER -> e
    M:net.minecraft.world.level.NaturalSpawner$SpawnState createState(int,java.lang.Iterable,net.minecraft.world.level.NaturalSpawner$ChunkGetter,net.minecraft.world.level.LocalMobCapCalculator) -> a
    M:net.minecraft.world.level.biome.BiomeBase getRoughBiome(net.minecraft.core.BlockPosition,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:void spawnForChunk(net.minecraft.server.level.WorldServer,net.minecraft.world.level.chunk.Chunk,net.minecraft.world.level.NaturalSpawner$SpawnState,boolean,boolean,boolean) -> a
    M:void spawnCategoryForChunk(net.minecraft.world.entity.EnumCreatureType,net.minecraft.server.level.WorldServer,net.minecraft.world.level.chunk.Chunk,net.minecraft.world.level.NaturalSpawner$SpawnPredicate,net.minecraft.world.level.NaturalSpawner$AfterSpawnCallback) -> a
    M:void spawnCategoryForPosition(net.minecraft.world.entity.EnumCreatureType,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:void spawnCategoryForPosition(net.minecraft.world.entity.EnumCreatureType,net.minecraft.server.level.WorldServer,net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.NaturalSpawner$SpawnPredicate,net.minecraft.world.level.NaturalSpawner$AfterSpawnCallback) -> a
    M:boolean isRightDistanceToPlayerAndSpawnPoint(net.minecraft.server.level.WorldServer,net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.core.BlockPosition$MutableBlockPosition,double) -> a
    M:boolean isValidSpawnPostitionForType(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EnumCreatureType,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.biome.MobSpawnSettings$SpawnerData,net.minecraft.core.BlockPosition$MutableBlockPosition,double) -> a
    M:net.minecraft.world.entity.EntityInsentient getMobForSpawn(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityTypes) -> a
    M:boolean isValidPositionForMob(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EntityInsentient,double) -> a
    M:java.util.Optional getRandomSpawnMobAt(net.minecraft.server.level.WorldServer,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.entity.EnumCreatureType,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:boolean canSpawnMobAt(net.minecraft.server.level.WorldServer,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.entity.EnumCreatureType,net.minecraft.world.level.biome.MobSpawnSettings$SpawnerData,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.util.random.WeightedRandomList mobsAt(net.minecraft.server.level.WorldServer,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.entity.EnumCreatureType,net.minecraft.core.BlockPosition,net.minecraft.core.Holder) -> a
    M:boolean isInNetherFortressBounds(net.minecraft.core.BlockPosition,net.minecraft.server.level.WorldServer,net.minecraft.world.entity.EnumCreatureType,net.minecraft.world.level.StructureManager) -> a
    M:net.minecraft.core.BlockPosition getRandomPosWithin(net.minecraft.world.level.World,net.minecraft.world.level.chunk.Chunk) -> a
    M:boolean isValidEmptySpawnBlock(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.Fluid,net.minecraft.world.entity.EntityTypes) -> a
    M:boolean isSpawnPositionOk(net.minecraft.world.entity.EntityPositionTypes$Surface,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.world.entity.EntityTypes) -> a
    M:void spawnMobsForChunkGeneration(net.minecraft.world.level.WorldAccess,net.minecraft.core.Holder,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.core.BlockPosition getTopNonCollidingPos(net.minecraft.world.level.IWorldReader,net.minecraft.world.entity.EntityTypes,int,int) -> a
net.minecraft.world.level.NaturalSpawner$AfterSpawnCallback -> cgl$a -> net.minecraft.world.level.SpawnerCreature$a
net.minecraft.world.level.NaturalSpawner$ChunkGetter -> cgl$b -> net.minecraft.world.level.SpawnerCreature$b
net.minecraft.world.level.NaturalSpawner$SpawnPredicate -> cgl$c -> net.minecraft.world.level.SpawnerCreature$c
net.minecraft.world.level.NaturalSpawner$SpawnState -> cgl$d -> net.minecraft.world.level.SpawnerCreature$d
    F:int spawnableChunkCount -> a
    F:it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap mobCategoryCounts -> b
    F:net.minecraft.world.level.SpawnerCreatureProbabilities spawnPotential -> c
    F:it.unimi.dsi.fastutil.objects.Object2IntMap unmodifiableMobCategoryCounts -> d
    F:net.minecraft.world.level.LocalMobCapCalculator localMobCapCalculator -> e
    F:net.minecraft.core.BlockPosition lastCheckedPos -> f
    F:net.minecraft.world.entity.EntityTypes lastCheckedType -> g
    F:double lastCharge -> h
    M:boolean canSpawn(net.minecraft.world.entity.EntityTypes,net.minecraft.core.BlockPosition,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:void afterSpawn(net.minecraft.world.entity.EntityInsentient,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:int getSpawnableChunkCount() -> a
    M:it.unimi.dsi.fastutil.objects.Object2IntMap getMobCategoryCounts() -> b
    M:boolean canSpawnForCategory(net.minecraft.world.entity.EnumCreatureType,net.minecraft.world.level.ChunkCoordIntPair) -> a
net.minecraft.world.level.NoiseColumn -> cgm -> net.minecraft.world.level.BlockColumn
    F:int minY -> a
    M:net.minecraft.world.level.block.state.IBlockData getBlock(int) -> a
    M:void setBlock(int,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.PathNavigationRegion -> cgn -> net.minecraft.world.level.ChunkCache
    F:int centerX -> a
    F:int centerZ -> b
    F:boolean allEmpty -> d
    F:net.minecraft.world.level.World level -> e
    F:java.util.function.Supplier plains -> f
    M:net.minecraft.world.level.chunk.IChunkAccess getChunk(net.minecraft.core.BlockPosition) -> d
    M:net.minecraft.world.level.chunk.IChunkAccess getChunk(int,int) -> a
    M:net.minecraft.world.level.IBlockAccess getChunkForCollisions(int,int) -> c
    M:java.util.List getEntityCollisions(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AxisAlignedBB) -> b
    M:net.minecraft.util.profiling.GameProfilerFiller getProfiler() -> a
net.minecraft.world.level.PotentialCalculator -> cgo -> net.minecraft.world.level.SpawnerCreatureProbabilities
    F:java.util.List charges -> a
    M:void addCharge(net.minecraft.core.BlockPosition,double) -> a
    M:double getPotentialEnergyChange(net.minecraft.core.BlockPosition,double) -> b
net.minecraft.world.level.PotentialCalculator$PointCharge -> cgo$a -> net.minecraft.world.level.SpawnerCreatureProbabilities$a
    F:net.minecraft.core.BlockPosition pos -> a
    F:double charge -> b
    M:double getPotentialChange(net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.ServerLevelAccessor -> cgp -> net.minecraft.world.level.WorldAccess
net.minecraft.world.level.SpawnData -> cgq -> net.minecraft.world.level.MobSpawnerData
    F:net.minecraft.nbt.NBTTagCompound entityToSpawn -> d
    F:java.util.Optional customSpawnRules -> e
    F:com.mojang.serialization.Codec CODEC -> a
    F:com.mojang.serialization.Codec LIST_CODEC -> b
    F:java.lang.String DEFAULT_TYPE -> c
    M:net.minecraft.nbt.NBTTagCompound getEntityToSpawn() -> a
    M:java.util.Optional getCustomSpawnRules() -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.nbt.NBTTagCompound entityToSpawn() -> c
    M:java.util.Optional customSpawnRules() -> d
net.minecraft.world.level.SpawnData$CustomSpawnRules -> cgq$a -> net.minecraft.world.level.MobSpawnerData$a
    F:net.minecraft.util.InclusiveRange blockLightLimit -> b
    F:net.minecraft.util.InclusiveRange skyLightLimit -> c
    F:net.minecraft.util.InclusiveRange LIGHT_RANGE -> d
    F:com.mojang.serialization.Codec CODEC -> a
    M:com.mojang.serialization.DataResult checkLightBoundaries(net.minecraft.util.InclusiveRange) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.util.InclusiveRange blockLightLimit() -> a
    M:net.minecraft.util.InclusiveRange skyLightLimit() -> b
net.minecraft.world.level.StructureManager -> cgr -> net.minecraft.world.level.StructureManager
    F:net.minecraft.world.level.GeneratorAccess level -> a
    F:net.minecraft.world.level.levelgen.GeneratorSettings worldGenSettings -> b
    F:net.minecraft.world.level.levelgen.structure.StructureCheck structureCheck -> c
    M:net.minecraft.world.level.StructureManager forWorldGenRegion(net.minecraft.server.level.RegionLimitedWorldAccess) -> a
    M:java.util.List startsForStructure(net.minecraft.world.level.ChunkCoordIntPair,java.util.function.Predicate) -> a
    M:java.util.List startsForStructure(net.minecraft.core.SectionPosition,net.minecraft.world.level.levelgen.structure.Structure) -> a
    M:void fillStartsForStructure(net.minecraft.world.level.levelgen.structure.Structure,it.unimi.dsi.fastutil.longs.LongSet,java.util.function.Consumer) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureStart getStartForStructure(net.minecraft.core.SectionPosition,net.minecraft.world.level.levelgen.structure.Structure,net.minecraft.world.level.chunk.StructureAccess) -> a
    M:void setStartForStructure(net.minecraft.core.SectionPosition,net.minecraft.world.level.levelgen.structure.Structure,net.minecraft.world.level.levelgen.structure.StructureStart,net.minecraft.world.level.chunk.StructureAccess) -> a
    M:void addReferenceForStructure(net.minecraft.core.SectionPosition,net.minecraft.world.level.levelgen.structure.Structure,long,net.minecraft.world.level.chunk.StructureAccess) -> a
    M:boolean shouldGenerateStructures() -> a
    M:net.minecraft.world.level.levelgen.structure.StructureStart getStructureAt(net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.Structure) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureStart getStructureWithPieceAt(net.minecraft.core.BlockPosition,net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureStart getStructureWithPieceAt(net.minecraft.core.BlockPosition,net.minecraft.tags.TagKey) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureStart getStructureWithPieceAt(net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.Structure) -> b
    M:boolean structureHasPieceAt(net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.StructureStart) -> a
    M:boolean hasAnyStructureAt(net.minecraft.core.BlockPosition) -> a
    M:java.util.Map getAllStructuresAt(net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.level.levelgen.structure.StructureCheckResult checkStructurePresence(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.levelgen.structure.Structure,boolean) -> a
    M:void addReference(net.minecraft.world.level.levelgen.structure.StructureStart) -> a
    M:net.minecraft.core.IRegistryCustom registryAccess() -> b
net.minecraft.world.level.WorldGenLevel -> cgs -> net.minecraft.world.level.GeneratorAccessSeed
    M:void setCurrentlyGenerating(java.util.function.Supplier) -> a
net.minecraft.world.level.biome.AmbientAdditionsSettings -> cgt -> net.minecraft.world.level.biome.CaveSound
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.sounds.SoundEffect soundEvent -> b
    F:double tickChance -> c
    M:net.minecraft.sounds.SoundEffect getSoundEvent() -> a
    M:double getTickChance() -> b
net.minecraft.world.level.biome.AmbientMoodSettings -> cgu -> net.minecraft.world.level.biome.CaveSoundSettings
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.biome.CaveSoundSettings LEGACY_CAVE_SETTINGS -> b
    F:net.minecraft.sounds.SoundEffect soundEvent -> c
    F:int tickDelay -> d
    F:int blockSearchExtent -> e
    F:double soundPositionOffset -> f
    M:net.minecraft.sounds.SoundEffect getSoundEvent() -> a
    M:int getTickDelay() -> b
    M:int getBlockSearchExtent() -> c
    M:double getSoundPositionOffset() -> d
net.minecraft.world.level.biome.AmbientParticleSettings -> cgv -> net.minecraft.world.level.biome.BiomeParticles
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.core.particles.ParticleParam options -> b
    F:float probability -> c
    M:net.minecraft.core.particles.ParticleParam getOptions() -> a
    M:boolean canSpawn(net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.biome.Biome -> cgw -> net.minecraft.world.level.biome.BiomeBase
    F:com.mojang.serialization.Codec DIRECT_CODEC -> a
    F:com.mojang.serialization.Codec NETWORK_CODEC -> b
    F:com.mojang.serialization.Codec CODEC -> c
    F:com.mojang.serialization.Codec LIST_CODEC -> d
    F:net.minecraft.world.level.levelgen.synth.NoiseGenerator3 TEMPERATURE_NOISE -> f
    F:net.minecraft.world.level.levelgen.synth.NoiseGenerator3 FROZEN_TEMPERATURE_NOISE -> g
    F:net.minecraft.world.level.levelgen.synth.NoiseGenerator3 BIOME_INFO_NOISE -> e
    F:int TEMPERATURE_CACHE_SIZE -> h
    F:net.minecraft.world.level.biome.Biome$ClimateSettings climateSettings -> i
    F:net.minecraft.world.level.biome.BiomeSettingsGeneration generationSettings -> j
    F:net.minecraft.world.level.biome.BiomeSettingsMobs mobSettings -> k
    F:net.minecraft.world.level.biome.BiomeFog specialEffects -> l
    F:java.lang.ThreadLocal temperatureCache -> m
    M:int getSkyColor() -> a
    M:net.minecraft.world.level.biome.BiomeSettingsMobs getMobSettings() -> b
    M:net.minecraft.world.level.biome.BiomeBase$Precipitation getPrecipitation() -> c
    M:boolean isHumid() -> d
    M:float getHeightAdjustedTemperature(net.minecraft.core.BlockPosition) -> e
    M:float getTemperature(net.minecraft.core.BlockPosition) -> f
    M:boolean shouldFreeze(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:boolean shouldFreeze(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,boolean) -> a
    M:boolean coldEnoughToSnow(net.minecraft.core.BlockPosition) -> a
    M:boolean warmEnoughToRain(net.minecraft.core.BlockPosition) -> b
    M:boolean shouldMeltFrozenOceanIcebergSlightly(net.minecraft.core.BlockPosition) -> c
    M:boolean shouldSnowGolemBurn(net.minecraft.core.BlockPosition) -> d
    M:boolean shouldSnow(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.level.biome.BiomeSettingsGeneration getGenerationSettings() -> e
    M:int getFogColor() -> f
    M:int getGrassColor(double,double) -> a
    M:int getGrassColorFromTexture() -> r
    M:int getFoliageColor() -> g
    M:int getFoliageColorFromTexture() -> s
    M:float getDownfall() -> h
    M:float getBaseTemperature() -> i
    M:net.minecraft.world.level.biome.BiomeFog getSpecialEffects() -> j
    M:int getWaterColor() -> k
    M:int getWaterFogColor() -> l
    M:java.util.Optional getAmbientParticle() -> m
    M:java.util.Optional getAmbientLoop() -> n
    M:java.util.Optional getAmbientMood() -> o
    M:java.util.Optional getAmbientAdditions() -> p
    M:java.util.Optional getBackgroundMusic() -> q
    M:void rehash(int) -> rehash
net.minecraft.world.level.biome.Biome$BiomeBuilder -> cgw$a -> net.minecraft.world.level.biome.BiomeBase$a
    F:net.minecraft.world.level.biome.BiomeBase$Precipitation precipitation -> a
    F:java.lang.Float temperature -> b
    F:net.minecraft.world.level.biome.BiomeBase$TemperatureModifier temperatureModifier -> c
    F:java.lang.Float downfall -> d
    F:net.minecraft.world.level.biome.BiomeFog specialEffects -> e
    F:net.minecraft.world.level.biome.BiomeSettingsMobs mobSpawnSettings -> f
    F:net.minecraft.world.level.biome.BiomeSettingsGeneration generationSettings -> g
    M:net.minecraft.world.level.biome.Biome$BiomeBuilder precipitation(net.minecraft.world.level.biome.BiomeBase$Precipitation) -> a
    M:net.minecraft.world.level.biome.Biome$BiomeBuilder temperature(float) -> a
    M:net.minecraft.world.level.biome.Biome$BiomeBuilder downfall(float) -> b
    M:net.minecraft.world.level.biome.Biome$BiomeBuilder specialEffects(net.minecraft.world.level.biome.BiomeFog) -> a
    M:net.minecraft.world.level.biome.Biome$BiomeBuilder mobSpawnSettings(net.minecraft.world.level.biome.BiomeSettingsMobs) -> a
    M:net.minecraft.world.level.biome.Biome$BiomeBuilder generationSettings(net.minecraft.world.level.biome.BiomeSettingsGeneration) -> a
    M:net.minecraft.world.level.biome.Biome$BiomeBuilder temperatureAdjustment(net.minecraft.world.level.biome.BiomeBase$TemperatureModifier) -> a
    M:net.minecraft.world.level.biome.BiomeBase build() -> a
net.minecraft.world.level.biome.Biome$ClimateSettings -> cgw$b -> net.minecraft.world.level.biome.BiomeBase$b
    F:net.minecraft.world.level.biome.BiomeBase$Precipitation precipitation -> b
    F:float temperature -> c
    F:net.minecraft.world.level.biome.BiomeBase$TemperatureModifier temperatureModifier -> d
    F:float downfall -> e
    F:com.mojang.serialization.MapCodec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.biome.BiomeBase$Precipitation precipitation() -> a
    M:float temperature() -> b
    M:net.minecraft.world.level.biome.BiomeBase$TemperatureModifier temperatureModifier() -> c
    M:float downfall() -> d
net.minecraft.world.level.biome.Biome$Precipitation -> cgw$c -> net.minecraft.world.level.biome.BiomeBase$Precipitation
    F:net.minecraft.world.level.biome.BiomeBase$Precipitation NONE -> a
    F:net.minecraft.world.level.biome.BiomeBase$Precipitation RAIN -> b
    F:net.minecraft.world.level.biome.BiomeBase$Precipitation SNOW -> c
    F:com.mojang.serialization.Codec CODEC -> d
    F:java.lang.String name -> e
    M:java.lang.String getName() -> a
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.biome.Biome$TemperatureModifier -> cgw$d -> net.minecraft.world.level.biome.BiomeBase$TemperatureModifier
    F:net.minecraft.world.level.biome.BiomeBase$TemperatureModifier NONE -> a
    F:net.minecraft.world.level.biome.BiomeBase$TemperatureModifier FROZEN -> b
    F:java.lang.String name -> d
    F:com.mojang.serialization.Codec CODEC -> c
    M:java.lang.String getName() -> a
    M:java.lang.String getSerializedName() -> c
    M:float modifyTemperature(net.minecraft.core.BlockPosition,float) -> a
    M:float modifyTemperature(net.minecraft.core.BlockPosition,float) -> a
net.minecraft.world.level.biome.BiomeGenerationSettings -> cgx -> net.minecraft.world.level.biome.BiomeSettingsGeneration
    F:org.slf4j.Logger LOGGER -> c
    F:net.minecraft.world.level.biome.BiomeSettingsGeneration EMPTY -> a
    F:com.mojang.serialization.MapCodec CODEC -> b
    F:java.util.Map carvers -> d
    F:java.util.List features -> e
    F:java.util.function.Supplier flowerFeatures -> f
    F:java.util.function.Supplier featureSet -> g
    M:java.lang.Iterable getCarvers(net.minecraft.world.level.levelgen.WorldGenStage$Features) -> a
    M:java.util.List getFlowerFeatures() -> a
    M:java.util.List features() -> b
    M:boolean hasFeature(net.minecraft.world.level.levelgen.placement.PlacedFeature) -> a
net.minecraft.world.level.biome.BiomeGenerationSettings$Builder -> cgx$a -> net.minecraft.world.level.biome.BiomeSettingsGeneration$a
    F:java.util.Map carvers -> a
    F:java.util.List features -> b
    M:net.minecraft.world.level.biome.BiomeGenerationSettings$Builder addFeature(net.minecraft.world.level.levelgen.WorldGenStage$Decoration,net.minecraft.core.Holder) -> a
    M:net.minecraft.world.level.biome.BiomeGenerationSettings$Builder addFeature(int,net.minecraft.core.Holder) -> a
    M:net.minecraft.world.level.biome.BiomeGenerationSettings$Builder addCarver(net.minecraft.world.level.levelgen.WorldGenStage$Features,net.minecraft.core.Holder) -> a
    M:void addFeatureStepsUpTo(int) -> a
    M:net.minecraft.world.level.biome.BiomeSettingsGeneration build() -> a
net.minecraft.world.level.biome.BiomeManager -> cgy -> net.minecraft.world.level.biome.BiomeManager
    F:int CHUNK_CENTER_QUART -> a
    F:int ZOOM_BITS -> b
    F:int ZOOM -> c
    F:int ZOOM_MASK -> d
    F:net.minecraft.world.level.biome.BiomeManager$Provider noiseBiomeSource -> e
    F:long biomeZoomSeed -> f
    M:long obfuscateSeed(long) -> a
    M:net.minecraft.world.level.biome.BiomeManager withDifferentSource(net.minecraft.world.level.biome.BiomeManager$Provider) -> a
    M:net.minecraft.core.Holder getBiome(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.Holder getNoiseBiomeAtPosition(double,double,double) -> a
    M:net.minecraft.core.Holder getNoiseBiomeAtPosition(net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.core.Holder getNoiseBiomeAtQuart(int,int,int) -> a
    M:double getFiddledDistance(long,int,int,int,double,double,double) -> a
    M:double getFiddle(long) -> b
net.minecraft.world.level.biome.BiomeManager$NoiseBiomeSource -> cgy$a -> net.minecraft.world.level.biome.BiomeManager$Provider
net.minecraft.world.level.biome.BiomeResolver -> cgz -> net.minecraft.world.level.biome.BiomeResolver
net.minecraft.world.level.biome.BiomeSource -> cha -> net.minecraft.world.level.biome.WorldChunkManager
    F:com.mojang.serialization.Codec CODEC -> a
    F:java.util.Set possibleBiomes -> b
    M:java.util.Set possibleBiomes() -> b
    M:java.util.Set getBiomesWithin(int,int,int,int,net.minecraft.world.level.biome.Climate$Sampler) -> a
    M:com.mojang.datafixers.util.Pair findBiomeHorizontal(int,int,int,int,java.util.function.Predicate,net.minecraft.util.RandomSource,net.minecraft.world.level.biome.Climate$Sampler) -> a
    M:com.mojang.datafixers.util.Pair findClosestBiome3d(net.minecraft.core.BlockPosition,int,int,int,java.util.function.Predicate,net.minecraft.world.level.biome.Climate$Sampler,net.minecraft.world.level.IWorldReader) -> a
    M:com.mojang.datafixers.util.Pair findBiomeHorizontal(int,int,int,int,int,java.util.function.Predicate,net.minecraft.util.RandomSource,boolean,net.minecraft.world.level.biome.Climate$Sampler) -> a
    M:void addDebugInfo(java.util.List,net.minecraft.core.BlockPosition,net.minecraft.world.level.biome.Climate$Sampler) -> a
net.minecraft.world.level.biome.BiomeSources -> chb -> net.minecraft.world.level.biome.BiomeSources
    M:com.mojang.serialization.Codec bootstrap(net.minecraft.core.IRegistry) -> a
net.minecraft.world.level.biome.BiomeSpecialEffects -> chc -> net.minecraft.world.level.biome.BiomeFog
    F:com.mojang.serialization.Codec CODEC -> a
    F:int fogColor -> b
    F:int waterColor -> c
    F:int waterFogColor -> d
    F:int skyColor -> e
    F:java.util.Optional foliageColorOverride -> f
    F:java.util.Optional grassColorOverride -> g
    F:net.minecraft.world.level.biome.BiomeFog$GrassColor grassColorModifier -> h
    F:java.util.Optional ambientParticleSettings -> i
    F:java.util.Optional ambientLoopSoundEvent -> j
    F:java.util.Optional ambientMoodSettings -> k
    F:java.util.Optional ambientAdditionsSettings -> l
    F:java.util.Optional backgroundMusic -> m
    M:int getFogColor() -> a
    M:int getWaterColor() -> b
    M:int getWaterFogColor() -> c
    M:int getSkyColor() -> d
    M:java.util.Optional getFoliageColorOverride() -> e
    M:java.util.Optional getGrassColorOverride() -> f
    M:net.minecraft.world.level.biome.BiomeFog$GrassColor getGrassColorModifier() -> g
    M:java.util.Optional getAmbientParticleSettings() -> h
    M:java.util.Optional getAmbientLoopSoundEvent() -> i
    M:java.util.Optional getAmbientMoodSettings() -> j
    M:java.util.Optional getAmbientAdditionsSettings() -> k
    M:java.util.Optional getBackgroundMusic() -> l
net.minecraft.world.level.biome.BiomeSpecialEffects$Builder -> chc$a -> net.minecraft.world.level.biome.BiomeFog$a
    F:java.util.OptionalInt fogColor -> a
    F:java.util.OptionalInt waterColor -> b
    F:java.util.OptionalInt waterFogColor -> c
    F:java.util.OptionalInt skyColor -> d
    F:java.util.Optional foliageColorOverride -> e
    F:java.util.Optional grassColorOverride -> f
    F:net.minecraft.world.level.biome.BiomeFog$GrassColor grassColorModifier -> g
    F:java.util.Optional ambientParticle -> h
    F:java.util.Optional ambientLoopSoundEvent -> i
    F:java.util.Optional ambientMoodSettings -> j
    F:java.util.Optional ambientAdditionsSettings -> k
    F:java.util.Optional backgroundMusic -> l
    M:net.minecraft.world.level.biome.BiomeSpecialEffects$Builder fogColor(int) -> a
    M:net.minecraft.world.level.biome.BiomeSpecialEffects$Builder waterColor(int) -> b
    M:net.minecraft.world.level.biome.BiomeSpecialEffects$Builder waterFogColor(int) -> c
    M:net.minecraft.world.level.biome.BiomeSpecialEffects$Builder skyColor(int) -> d
    M:net.minecraft.world.level.biome.BiomeSpecialEffects$Builder foliageColorOverride(int) -> e
    M:net.minecraft.world.level.biome.BiomeSpecialEffects$Builder grassColorOverride(int) -> f
    M:net.minecraft.world.level.biome.BiomeSpecialEffects$Builder grassColorModifier(net.minecraft.world.level.biome.BiomeFog$GrassColor) -> a
    M:net.minecraft.world.level.biome.BiomeSpecialEffects$Builder ambientParticle(net.minecraft.world.level.biome.BiomeParticles) -> a
    M:net.minecraft.world.level.biome.BiomeSpecialEffects$Builder ambientLoopSound(net.minecraft.sounds.SoundEffect) -> a
    M:net.minecraft.world.level.biome.BiomeSpecialEffects$Builder ambientMoodSound(net.minecraft.world.level.biome.CaveSoundSettings) -> a
    M:net.minecraft.world.level.biome.BiomeSpecialEffects$Builder ambientAdditionsSound(net.minecraft.world.level.biome.CaveSound) -> a
    M:net.minecraft.world.level.biome.BiomeSpecialEffects$Builder backgroundMusic(net.minecraft.sounds.Music) -> a
    M:net.minecraft.world.level.biome.BiomeFog build() -> a
net.minecraft.world.level.biome.BiomeSpecialEffects$GrassColorModifier -> chc$b -> net.minecraft.world.level.biome.BiomeFog$GrassColor
    F:net.minecraft.world.level.biome.BiomeFog$GrassColor NONE -> a
    F:net.minecraft.world.level.biome.BiomeFog$GrassColor DARK_FOREST -> b
    F:net.minecraft.world.level.biome.BiomeFog$GrassColor SWAMP -> c
    F:java.lang.String name -> e
    F:com.mojang.serialization.Codec CODEC -> d
    M:java.lang.String getName() -> a
    M:java.lang.String getSerializedName() -> c
    M:int modifyColor(double,double,int) -> a
    M:int modifyColor(double,double,int) -> a
    M:int modifyColor(double,double,int) -> a
net.minecraft.world.level.biome.Biomes -> chd -> net.minecraft.world.level.biome.Biomes
    F:net.minecraft.resources.ResourceKey THE_VOID -> a
    F:net.minecraft.resources.ResourceKey PLAINS -> b
    F:net.minecraft.resources.ResourceKey SUNFLOWER_PLAINS -> c
    F:net.minecraft.resources.ResourceKey SNOWY_PLAINS -> d
    F:net.minecraft.resources.ResourceKey ICE_SPIKES -> e
    F:net.minecraft.resources.ResourceKey DESERT -> f
    F:net.minecraft.resources.ResourceKey SWAMP -> g
    F:net.minecraft.resources.ResourceKey MANGROVE_SWAMP -> h
    F:net.minecraft.resources.ResourceKey FOREST -> i
    F:net.minecraft.resources.ResourceKey FLOWER_FOREST -> j
    F:net.minecraft.resources.ResourceKey BIRCH_FOREST -> k
    F:net.minecraft.resources.ResourceKey DARK_FOREST -> l
    F:net.minecraft.resources.ResourceKey OLD_GROWTH_BIRCH_FOREST -> m
    F:net.minecraft.resources.ResourceKey OLD_GROWTH_PINE_TAIGA -> n
    F:net.minecraft.resources.ResourceKey OLD_GROWTH_SPRUCE_TAIGA -> o
    F:net.minecraft.resources.ResourceKey TAIGA -> p
    F:net.minecraft.resources.ResourceKey SNOWY_TAIGA -> q
    F:net.minecraft.resources.ResourceKey SAVANNA -> r
    F:net.minecraft.resources.ResourceKey SAVANNA_PLATEAU -> s
    F:net.minecraft.resources.ResourceKey WINDSWEPT_HILLS -> t
    F:net.minecraft.resources.ResourceKey WINDSWEPT_GRAVELLY_HILLS -> u
    F:net.minecraft.resources.ResourceKey WINDSWEPT_FOREST -> v
    F:net.minecraft.resources.ResourceKey WINDSWEPT_SAVANNA -> w
    F:net.minecraft.resources.ResourceKey JUNGLE -> x
    F:net.minecraft.resources.ResourceKey SPARSE_JUNGLE -> y
    F:net.minecraft.resources.ResourceKey BAMBOO_JUNGLE -> z
    F:net.minecraft.resources.ResourceKey DEEP_DARK -> aa
    F:net.minecraft.resources.ResourceKey NETHER_WASTES -> ab
    F:net.minecraft.resources.ResourceKey WARPED_FOREST -> ac
    F:net.minecraft.resources.ResourceKey CRIMSON_FOREST -> ad
    F:net.minecraft.resources.ResourceKey SOUL_SAND_VALLEY -> ae
    F:net.minecraft.resources.ResourceKey BASALT_DELTAS -> af
    F:net.minecraft.resources.ResourceKey THE_END -> ag
    F:net.minecraft.resources.ResourceKey END_HIGHLANDS -> ah
    F:net.minecraft.resources.ResourceKey END_MIDLANDS -> ai
    F:net.minecraft.resources.ResourceKey SMALL_END_ISLANDS -> aj
    F:net.minecraft.resources.ResourceKey END_BARRENS -> ak
    M:net.minecraft.resources.ResourceKey register(java.lang.String) -> a
net.minecraft.world.level.biome.CheckerboardColumnBiomeSource -> che -> net.minecraft.world.level.biome.WorldChunkManagerCheckerBoard
    F:com.mojang.serialization.Codec CODEC -> b
    F:net.minecraft.core.HolderSet allowedBiomes -> c
    F:int bitShift -> d
    F:int size -> e
    M:com.mojang.serialization.Codec codec() -> a
net.minecraft.world.level.biome.Climate -> chf -> net.minecraft.world.level.biome.Climate
    F:boolean DEBUG_SLOW_BIOME_SEARCH -> b
    F:float QUANTIZATION_FACTOR -> c
    F:int PARAMETER_COUNT -> a
    M:net.minecraft.world.level.biome.Climate$TargetPoint target(float,float,float,float,float,float) -> a
    M:net.minecraft.world.level.biome.Climate$ParameterPoint parameters(float,float,float,float,float,float,float) -> a
    M:net.minecraft.world.level.biome.Climate$ParameterPoint parameters(net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter,float) -> a
    M:long quantizeCoord(float) -> a
    M:float unquantizeCoord(long) -> a
    M:net.minecraft.world.level.biome.Climate$Sampler empty() -> a
    M:net.minecraft.core.BlockPosition findSpawnPosition(java.util.List,net.minecraft.world.level.biome.Climate$Sampler) -> a
net.minecraft.world.level.biome.Climate$DistanceMetric -> chf$a -> net.minecraft.world.level.biome.Climate$a
net.minecraft.world.level.biome.Climate$Parameter -> chf$b -> net.minecraft.world.level.biome.Climate$b
    F:long min -> b
    F:long max -> c
    F:com.mojang.serialization.Codec CODEC -> a
    M:net.minecraft.world.level.biome.Climate$Parameter point(float) -> a
    M:net.minecraft.world.level.biome.Climate$Parameter span(float,float) -> a
    M:net.minecraft.world.level.biome.Climate$Parameter span(net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter) -> a
    M:long distance(long) -> a
    M:long distance(net.minecraft.world.level.biome.Climate$Parameter) -> a
    M:net.minecraft.world.level.biome.Climate$Parameter span(net.minecraft.world.level.biome.Climate$Parameter) -> b
    M:boolean equals(java.lang.Object) -> equals
    M:long min() -> a
    M:long max() -> b
net.minecraft.world.level.biome.Climate$ParameterList -> chf$c -> net.minecraft.world.level.biome.Climate$c
    F:java.util.List values -> a
    F:net.minecraft.world.level.biome.Climate$RTree index -> b
    M:java.util.List values() -> a
    M:java.lang.Object findValue(net.minecraft.world.level.biome.Climate$TargetPoint) -> a
    M:java.lang.Object findValueBruteForce(net.minecraft.world.level.biome.Climate$TargetPoint) -> b
    M:java.lang.Object findValueIndex(net.minecraft.world.level.biome.Climate$TargetPoint) -> c
    M:java.lang.Object findValueIndex(net.minecraft.world.level.biome.Climate$TargetPoint,net.minecraft.world.level.biome.Climate$DistanceMetric) -> a
net.minecraft.world.level.biome.Climate$ParameterPoint -> chf$d -> net.minecraft.world.level.biome.Climate$d
    F:net.minecraft.world.level.biome.Climate$Parameter temperature -> b
    F:net.minecraft.world.level.biome.Climate$Parameter humidity -> c
    F:net.minecraft.world.level.biome.Climate$Parameter continentalness -> d
    F:net.minecraft.world.level.biome.Climate$Parameter erosion -> e
    F:net.minecraft.world.level.biome.Climate$Parameter depth -> f
    F:net.minecraft.world.level.biome.Climate$Parameter weirdness -> g
    F:long offset -> h
    F:com.mojang.serialization.Codec CODEC -> a
    M:long fitness(net.minecraft.world.level.biome.Climate$TargetPoint) -> a
    M:java.util.List parameterSpace() -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.biome.Climate$Parameter temperature() -> b
    M:net.minecraft.world.level.biome.Climate$Parameter humidity() -> c
    M:net.minecraft.world.level.biome.Climate$Parameter continentalness() -> d
    M:net.minecraft.world.level.biome.Climate$Parameter erosion() -> e
    M:net.minecraft.world.level.biome.Climate$Parameter depth() -> f
    M:net.minecraft.world.level.biome.Climate$Parameter weirdness() -> g
    M:long offset() -> h
net.minecraft.world.level.biome.Climate$RTree -> chf$e -> net.minecraft.world.level.biome.Climate$e
    F:int CHILDREN_PER_NODE -> a
    F:net.minecraft.world.level.biome.Climate$RTree$Node root -> b
    F:java.lang.ThreadLocal lastResult -> c
    M:net.minecraft.world.level.biome.Climate$RTree create(java.util.List) -> a
    M:net.minecraft.world.level.biome.Climate$RTree$Node build(int,java.util.List) -> a
    M:void sort(java.util.List,int,int,boolean) -> a
    M:java.util.Comparator comparator(int,boolean) -> a
    M:java.util.List bucketize(java.util.List) -> b
    M:long cost(net.minecraft.world.level.biome.Climate$Parameter[]) -> a
    M:java.util.List buildParameterSpace(java.util.List) -> c
    M:java.lang.Object search(net.minecraft.world.level.biome.Climate$TargetPoint,net.minecraft.world.level.biome.Climate$DistanceMetric) -> a
net.minecraft.world.level.biome.Climate$RTree$Leaf -> chf$e$a -> net.minecraft.world.level.biome.Climate$e$a
    F:java.lang.Object value -> b
    M:net.minecraft.world.level.biome.Climate$RTree$Leaf search(long[],net.minecraft.world.level.biome.Climate$RTree$Leaf,net.minecraft.world.level.biome.Climate$DistanceMetric) -> a
net.minecraft.world.level.biome.Climate$RTree$Node -> chf$e$b -> net.minecraft.world.level.biome.Climate$e$b
    M:long distance(long[]) -> a
net.minecraft.world.level.biome.Climate$RTree$SubTree -> chf$e$c -> net.minecraft.world.level.biome.Climate$e$c
    M:net.minecraft.world.level.biome.Climate$RTree$Leaf search(long[],net.minecraft.world.level.biome.Climate$RTree$Leaf,net.minecraft.world.level.biome.Climate$DistanceMetric) -> a
net.minecraft.world.level.biome.Climate$Sampler -> chf$f -> net.minecraft.world.level.biome.Climate$Sampler
    F:net.minecraft.world.level.levelgen.DensityFunction temperature -> a
    F:net.minecraft.world.level.levelgen.DensityFunction humidity -> b
    F:net.minecraft.world.level.levelgen.DensityFunction continentalness -> c
    F:net.minecraft.world.level.levelgen.DensityFunction erosion -> d
    F:net.minecraft.world.level.levelgen.DensityFunction depth -> e
    F:net.minecraft.world.level.levelgen.DensityFunction weirdness -> f
    F:java.util.List spawnTarget -> g
    M:net.minecraft.world.level.biome.Climate$TargetPoint sample(int,int,int) -> a
    M:net.minecraft.core.BlockPosition findSpawnPosition() -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.DensityFunction temperature() -> b
    M:net.minecraft.world.level.levelgen.DensityFunction humidity() -> c
    M:net.minecraft.world.level.levelgen.DensityFunction continentalness() -> d
    M:net.minecraft.world.level.levelgen.DensityFunction erosion() -> e
    M:net.minecraft.world.level.levelgen.DensityFunction depth() -> f
    M:net.minecraft.world.level.levelgen.DensityFunction weirdness() -> g
    M:java.util.List spawnTarget() -> h
net.minecraft.world.level.biome.Climate$SpawnFinder -> chf$g -> net.minecraft.world.level.biome.Climate$g
    F:net.minecraft.world.level.biome.Climate$SpawnFinder$Result result -> a
    M:void radialSearch(java.util.List,net.minecraft.world.level.biome.Climate$Sampler,float,float) -> a
    M:net.minecraft.world.level.biome.Climate$SpawnFinder$Result getSpawnPositionAndFitness(java.util.List,net.minecraft.world.level.biome.Climate$Sampler,int,int) -> a
net.minecraft.world.level.biome.Climate$SpawnFinder$Result -> chf$g$a -> net.minecraft.world.level.biome.Climate$g$a
    F:net.minecraft.core.BlockPosition location -> a
    F:long fitness -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.BlockPosition location() -> a
    M:long fitness() -> b
net.minecraft.world.level.biome.Climate$TargetPoint -> chf$h -> net.minecraft.world.level.biome.Climate$h
    F:long temperature -> a
    F:long humidity -> b
    F:long continentalness -> c
    F:long erosion -> d
    F:long depth -> e
    F:long weirdness -> f
    M:boolean equals(java.lang.Object) -> equals
    M:long temperature() -> b
    M:long humidity() -> c
    M:long continentalness() -> d
    M:long erosion() -> e
    M:long depth() -> f
    M:long weirdness() -> g
net.minecraft.world.level.biome.FeatureSorter -> chg -> net.minecraft.world.level.biome.FeatureSorter
    M:java.util.List buildFeaturesPerStep(java.util.List,java.util.function.Function,boolean) -> a
net.minecraft.world.level.biome.FeatureSorter$1FeatureData -> chg$a -> net.minecraft.world.level.biome.FeatureSorter$a
    F:int featureIndex -> a
    F:int step -> b
    F:net.minecraft.world.level.levelgen.placement.PlacedFeature feature -> c
    M:boolean equals(java.lang.Object) -> equals
    M:int featureIndex() -> a
    M:int step() -> b
    M:net.minecraft.world.level.levelgen.placement.PlacedFeature feature() -> c
net.minecraft.world.level.biome.FeatureSorter$StepFeatureData -> chg$b -> net.minecraft.world.level.biome.FeatureSorter$b
    F:java.util.List features -> a
    F:java.util.function.ToIntFunction indexMapping -> b
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.List features() -> a
    M:java.util.function.ToIntFunction indexMapping() -> b
net.minecraft.world.level.biome.FixedBiomeSource -> chh -> net.minecraft.world.level.biome.WorldChunkManagerHell
    F:com.mojang.serialization.Codec CODEC -> b
    F:net.minecraft.core.Holder biome -> c
    M:com.mojang.serialization.Codec codec() -> a
    M:com.mojang.datafixers.util.Pair findBiomeHorizontal(int,int,int,int,int,java.util.function.Predicate,net.minecraft.util.RandomSource,boolean,net.minecraft.world.level.biome.Climate$Sampler) -> a
    M:com.mojang.datafixers.util.Pair findClosestBiome3d(net.minecraft.core.BlockPosition,int,int,int,java.util.function.Predicate,net.minecraft.world.level.biome.Climate$Sampler,net.minecraft.world.level.IWorldReader) -> a
    M:java.util.Set getBiomesWithin(int,int,int,int,net.minecraft.world.level.biome.Climate$Sampler) -> a
net.minecraft.world.level.biome.MobSpawnSettings -> chi -> net.minecraft.world.level.biome.BiomeSettingsMobs
    F:org.slf4j.Logger LOGGER -> d
    F:float DEFAULT_CREATURE_SPAWN_PROBABILITY -> e
    F:net.minecraft.util.random.WeightedRandomList EMPTY_MOB_LIST -> a
    F:net.minecraft.world.level.biome.BiomeSettingsMobs EMPTY -> b
    F:com.mojang.serialization.MapCodec CODEC -> c
    F:float creatureGenerationProbability -> f
    F:java.util.Map spawners -> g
    F:java.util.Map mobSpawnCosts -> h
    M:net.minecraft.util.random.WeightedRandomList getMobs(net.minecraft.world.entity.EnumCreatureType) -> a
    M:net.minecraft.world.level.biome.MobSpawnSettings$MobSpawnCost getMobSpawnCost(net.minecraft.world.entity.EntityTypes) -> a
    M:float getCreatureProbability() -> a
net.minecraft.world.level.biome.MobSpawnSettings$Builder -> chi$a -> net.minecraft.world.level.biome.BiomeSettingsMobs$a
    F:java.util.Map spawners -> a
    F:java.util.Map mobSpawnCosts -> b
    F:float creatureGenerationProbability -> c
    M:net.minecraft.world.level.biome.MobSpawnSettings$Builder addSpawn(net.minecraft.world.entity.EnumCreatureType,net.minecraft.world.level.biome.MobSpawnSettings$SpawnerData) -> a
    M:net.minecraft.world.level.biome.MobSpawnSettings$Builder addMobCharge(net.minecraft.world.entity.EntityTypes,double,double) -> a
    M:net.minecraft.world.level.biome.MobSpawnSettings$Builder creatureGenerationProbability(float) -> a
    M:net.minecraft.world.level.biome.BiomeSettingsMobs build() -> a
net.minecraft.world.level.biome.MobSpawnSettings$MobSpawnCost -> chi$b -> net.minecraft.world.level.biome.BiomeSettingsMobs$b
    F:com.mojang.serialization.Codec CODEC -> a
    F:double energyBudget -> b
    F:double charge -> c
    M:double getEnergyBudget() -> a
    M:double getCharge() -> b
net.minecraft.world.level.biome.MobSpawnSettings$SpawnerData -> chi$c -> net.minecraft.world.level.biome.BiomeSettingsMobs$c
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.entity.EntityTypes type -> b
    F:int minCount -> c
    F:int maxCount -> d
net.minecraft.world.level.biome.MultiNoiseBiomeSource -> chj -> net.minecraft.world.level.biome.WorldChunkManagerMultiNoise
    F:com.mojang.serialization.MapCodec DIRECT_CODEC -> b
    F:com.mojang.serialization.Codec CODEC -> c
    F:net.minecraft.world.level.biome.Climate$ParameterList parameters -> d
    F:java.util.Optional preset -> e
    M:com.mojang.serialization.Codec codec() -> a
    M:java.util.Optional preset() -> c
    M:boolean stable(net.minecraft.world.level.biome.MultiNoiseBiomeSource$Preset) -> a
    M:net.minecraft.core.Holder getNoiseBiome(net.minecraft.world.level.biome.Climate$TargetPoint) -> a
    M:void addDebugInfo(java.util.List,net.minecraft.core.BlockPosition,net.minecraft.world.level.biome.Climate$Sampler) -> a
net.minecraft.world.level.biome.MultiNoiseBiomeSource$Preset -> chj$a -> net.minecraft.world.level.biome.WorldChunkManagerMultiNoise$a
    F:java.util.Map BY_NAME -> c
    F:net.minecraft.world.level.biome.MultiNoiseBiomeSource$Preset NETHER -> a
    F:net.minecraft.world.level.biome.MultiNoiseBiomeSource$Preset OVERWORLD -> b
    F:net.minecraft.resources.MinecraftKey name -> d
    F:java.util.function.Function parameterSource -> e
    M:java.util.stream.Stream getPresets() -> a
    M:net.minecraft.world.level.biome.WorldChunkManagerMultiNoise biomeSource(net.minecraft.world.level.biome.MultiNoiseBiomeSource$PresetInstance,boolean) -> a
    M:net.minecraft.world.level.biome.WorldChunkManagerMultiNoise biomeSource(net.minecraft.core.IRegistry,boolean) -> a
    M:net.minecraft.world.level.biome.WorldChunkManagerMultiNoise biomeSource(net.minecraft.core.IRegistry) -> a
    M:java.util.stream.Stream possibleBiomes() -> b
net.minecraft.world.level.biome.MultiNoiseBiomeSource$PresetInstance -> chj$b -> net.minecraft.world.level.biome.WorldChunkManagerMultiNoise$b
    F:net.minecraft.world.level.biome.MultiNoiseBiomeSource$Preset preset -> b
    F:net.minecraft.core.IRegistry biomes -> c
    F:com.mojang.serialization.MapCodec CODEC -> a
    M:net.minecraft.world.level.biome.WorldChunkManagerMultiNoise biomeSource() -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.biome.MultiNoiseBiomeSource$Preset preset() -> b
    M:net.minecraft.core.IRegistry biomes() -> c
net.minecraft.world.level.biome.OverworldBiomeBuilder -> chk -> net.minecraft.world.level.biome.OverworldBiomeBuilder
    F:float VALLEY_SIZE -> h
    F:float LOW_START -> i
    F:float HIGH_START -> a
    F:float HIGH_END -> j
    F:float PEAK_SIZE -> k
    F:float PEAK_START -> b
    F:float PEAK_END -> l
    F:float NEAR_INLAND_START -> c
    F:float MID_INLAND_START -> d
    F:float FAR_INLAND_START -> e
    F:float EROSION_INDEX_1_START -> f
    F:float EROSION_INDEX_2_START -> g
    F:float EROSION_DEEP_DARK_DRYNESS_THRESHOLD -> m
    F:float DEPTH_DEEP_DARK_DRYNESS_THRESHOLD -> n
    F:net.minecraft.world.level.biome.Climate$Parameter FULL_RANGE -> o
    F:net.minecraft.world.level.biome.Climate$Parameter FROZEN_RANGE -> s
    F:net.minecraft.world.level.biome.Climate$Parameter UNFROZEN_RANGE -> t
    F:net.minecraft.world.level.biome.Climate$Parameter mushroomFieldsContinentalness -> u
    F:net.minecraft.world.level.biome.Climate$Parameter deepOceanContinentalness -> v
    F:net.minecraft.world.level.biome.Climate$Parameter oceanContinentalness -> w
    F:net.minecraft.world.level.biome.Climate$Parameter coastContinentalness -> x
    F:net.minecraft.world.level.biome.Climate$Parameter inlandContinentalness -> y
    F:net.minecraft.world.level.biome.Climate$Parameter nearInlandContinentalness -> z
    M:java.util.List spawnTarget() -> a
    M:void addBiomes(java.util.function.Consumer) -> a
    M:void addOffCoastBiomes(java.util.function.Consumer) -> b
    M:void addInlandBiomes(java.util.function.Consumer) -> c
    M:void addPeaks(java.util.function.Consumer,net.minecraft.world.level.biome.Climate$Parameter) -> a
    M:void addHighSlice(java.util.function.Consumer,net.minecraft.world.level.biome.Climate$Parameter) -> b
    M:void addMidSlice(java.util.function.Consumer,net.minecraft.world.level.biome.Climate$Parameter) -> c
    M:void addLowSlice(java.util.function.Consumer,net.minecraft.world.level.biome.Climate$Parameter) -> d
    M:void addValleys(java.util.function.Consumer,net.minecraft.world.level.biome.Climate$Parameter) -> e
    M:void addUndergroundBiomes(java.util.function.Consumer) -> d
    M:net.minecraft.resources.ResourceKey pickMiddleBiome(int,int,net.minecraft.world.level.biome.Climate$Parameter) -> a
    M:net.minecraft.resources.ResourceKey pickMiddleBiomeOrBadlandsIfHot(int,int,net.minecraft.world.level.biome.Climate$Parameter) -> b
    M:net.minecraft.resources.ResourceKey pickMiddleBiomeOrBadlandsIfHotOrSlopeIfCold(int,int,net.minecraft.world.level.biome.Climate$Parameter) -> c
    M:net.minecraft.resources.ResourceKey maybePickWindsweptSavannaBiome(int,int,net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.resources.ResourceKey pickShatteredCoastBiome(int,int,net.minecraft.world.level.biome.Climate$Parameter) -> d
    M:net.minecraft.resources.ResourceKey pickBeachBiome(int,int) -> a
    M:net.minecraft.resources.ResourceKey pickBadlandsBiome(int,net.minecraft.world.level.biome.Climate$Parameter) -> a
    M:net.minecraft.resources.ResourceKey pickPlateauBiome(int,int,net.minecraft.world.level.biome.Climate$Parameter) -> e
    M:net.minecraft.resources.ResourceKey pickPeakBiome(int,int,net.minecraft.world.level.biome.Climate$Parameter) -> f
    M:net.minecraft.resources.ResourceKey pickSlopeBiome(int,int,net.minecraft.world.level.biome.Climate$Parameter) -> g
    M:net.minecraft.resources.ResourceKey pickShatteredBiome(int,int,net.minecraft.world.level.biome.Climate$Parameter) -> h
    M:void addSurfaceBiome(java.util.function.Consumer,net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter,float,net.minecraft.resources.ResourceKey) -> a
    M:void addUndergroundBiome(java.util.function.Consumer,net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter,float,net.minecraft.resources.ResourceKey) -> b
    M:void addBottomBiome(java.util.function.Consumer,net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter,net.minecraft.world.level.biome.Climate$Parameter,float,net.minecraft.resources.ResourceKey) -> c
    M:boolean isDeepDarkRegion(double,double) -> a
    M:java.lang.String getDebugStringForPeaksAndValleys(double) -> a
    M:java.lang.String getDebugStringForContinentalness(double) -> b
    M:java.lang.String getDebugStringForErosion(double) -> c
    M:java.lang.String getDebugStringForTemperature(double) -> d
    M:java.lang.String getDebugStringForHumidity(double) -> e
    M:java.lang.String getDebugStringForNoiseValue(double,net.minecraft.world.level.biome.Climate$Parameter[]) -> a
net.minecraft.world.level.biome.TheEndBiomeSource -> chl -> net.minecraft.world.level.biome.WorldChunkManagerTheEnd
    F:com.mojang.serialization.Codec CODEC -> b
    F:net.minecraft.core.Holder end -> c
    F:net.minecraft.core.Holder highlands -> d
    F:net.minecraft.core.Holder midlands -> e
    F:net.minecraft.core.Holder islands -> f
    F:net.minecraft.core.Holder barrens -> g
    M:com.mojang.serialization.Codec codec() -> a
net.minecraft.world.level.block.AbstractBannerBlock -> chn -> net.minecraft.world.level.block.BlockBannerAbstract
    F:net.minecraft.world.item.EnumColor color -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.item.EnumColor getColor() -> b
net.minecraft.world.level.block.AbstractCandleBlock -> cho -> net.minecraft.world.level.block.AbstractCandleBlock
    F:int LIGHT_PER_CANDLE -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean LIT -> b
    M:boolean isLit(net.minecraft.world.level.block.state.IBlockData) -> b
    M:void onProjectileHit(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.MovingObjectPositionBlock,net.minecraft.world.entity.projectile.IProjectile) -> a
    M:boolean canBeLit(net.minecraft.world.level.block.state.IBlockData) -> c
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void addParticlesAndSound(net.minecraft.world.level.World,net.minecraft.world.phys.Vec3D,net.minecraft.util.RandomSource) -> a
    M:void extinguish(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:void setLit(net.minecraft.world.level.GeneratorAccess,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,boolean) -> a
net.minecraft.world.level.block.AbstractCauldronBlock -> chp -> net.minecraft.world.level.block.AbstractCauldronBlock
    F:int SIDE_THICKNESS -> c
    F:int LEG_WIDTH -> d
    F:int LEG_HEIGHT -> e
    F:int LEG_DEPTH -> f
    F:int FLOOR_LEVEL -> a
    F:net.minecraft.world.phys.shapes.VoxelShape INSIDE -> g
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    F:java.util.Map interactions -> h
    M:double getContentHeight(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isEntityInsideContent(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getInteractionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean canReceiveStalactiteDrip(net.minecraft.world.level.material.FluidType) -> a
    M:void receiveStalactiteDrip(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.FluidType) -> a
net.minecraft.world.level.block.AbstractChestBlock -> chq -> net.minecraft.world.level.block.BlockChestAbstract
    F:java.util.function.Supplier blockEntityType -> a
net.minecraft.world.level.block.AbstractFurnaceBlock -> chr -> net.minecraft.world.level.block.BlockFurnace
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean LIT -> b
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker createFurnaceTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.entity.TileEntityTypes,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
net.minecraft.world.level.block.AbstractGlassBlock -> chs -> net.minecraft.world.level.block.BlockGlassAbstract
    M:net.minecraft.world.phys.shapes.VoxelShape getVisualShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> b
    M:float getShadeBrightness(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
    M:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> c
net.minecraft.world.level.block.AbstractSkullBlock -> cht -> net.minecraft.world.level.block.BlockSkullAbstract
    F:net.minecraft.world.level.block.SkullBlock$Type type -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:net.minecraft.world.level.block.SkullBlock$Type getType() -> b
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.AirBlock -> chu -> net.minecraft.world.level.block.BlockAir
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
net.minecraft.world.level.block.AmethystBlock -> chv -> net.minecraft.world.level.block.AmethystBlock
    M:void onProjectileHit(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.MovingObjectPositionBlock,net.minecraft.world.entity.projectile.IProjectile) -> a
net.minecraft.world.level.block.AmethystClusterBlock -> chw -> net.minecraft.world.level.block.AmethystClusterBlock
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> b
    F:net.minecraft.world.phys.shapes.VoxelShape northAabb -> c
    F:net.minecraft.world.phys.shapes.VoxelShape southAabb -> d
    F:net.minecraft.world.phys.shapes.VoxelShape eastAabb -> e
    F:net.minecraft.world.phys.shapes.VoxelShape westAabb -> f
    F:net.minecraft.world.phys.shapes.VoxelShape upAabb -> g
    F:net.minecraft.world.phys.shapes.VoxelShape downAabb -> h
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.material.EnumPistonReaction getPistonPushReaction(net.minecraft.world.level.block.state.IBlockData) -> d
net.minecraft.world.level.block.AnvilBlock -> chx -> net.minecraft.world.level.block.BlockAnvil
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:net.minecraft.world.phys.shapes.VoxelShape BASE -> b
    F:net.minecraft.world.phys.shapes.VoxelShape X_LEG1 -> c
    F:net.minecraft.world.phys.shapes.VoxelShape X_LEG2 -> d
    F:net.minecraft.world.phys.shapes.VoxelShape X_TOP -> e
    F:net.minecraft.world.phys.shapes.VoxelShape Z_LEG1 -> f
    F:net.minecraft.world.phys.shapes.VoxelShape Z_LEG2 -> g
    F:net.minecraft.world.phys.shapes.VoxelShape Z_TOP -> h
    F:net.minecraft.world.phys.shapes.VoxelShape X_AXIS_AABB -> i
    F:net.minecraft.world.phys.shapes.VoxelShape Z_AXIS_AABB -> j
    F:net.minecraft.network.chat.IChatBaseComponent CONTAINER_TITLE -> k
    F:float FALL_DAMAGE_PER_DISTANCE -> l
    F:int FALL_DAMAGE_MAX -> m
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.ITileInventory getMenuProvider(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void falling(net.minecraft.world.entity.item.EntityFallingBlock) -> a
    M:void onLand(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.item.EntityFallingBlock) -> a
    M:void onBrokenAfterFall(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.item.EntityFallingBlock) -> a
    M:net.minecraft.world.damagesource.DamageSource getFallDamageSource() -> b
    M:net.minecraft.world.level.block.state.IBlockData damage(net.minecraft.world.level.block.state.IBlockData) -> e
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:int getDustColor(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
net.minecraft.world.level.block.AttachedStemBlock -> chy -> net.minecraft.world.level.block.BlockStemAttached
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:float AABB_OFFSET -> b
    F:java.util.Map AABBS -> c
    F:net.minecraft.world.level.block.BlockStemmed fruit -> d
    F:java.util.function.Supplier seedSupplier -> e
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.AzaleaBlock -> chz -> net.minecraft.world.level.block.AzaleaBlock
    F:net.minecraft.world.level.block.grower.AzaleaTreeGrower TREE_GROWER -> a
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.BambooBlock -> cia -> net.minecraft.world.level.block.BlockBamboo
    F:float SMALL_LEAVES_AABB_OFFSET -> a
    F:float LARGE_LEAVES_AABB_OFFSET -> b
    F:float COLLISION_AABB_OFFSET -> c
    F:net.minecraft.world.phys.shapes.VoxelShape SMALL_SHAPE -> d
    F:net.minecraft.world.phys.shapes.VoxelShape LARGE_SHAPE -> e
    F:net.minecraft.world.phys.shapes.VoxelShape COLLISION_SHAPE -> f
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE -> g
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum LEAVES -> h
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger STAGE -> i
    F:int MAX_HEIGHT -> j
    F:int STAGE_GROWING -> k
    F:int STAGE_DONE_GROWING -> l
    F:int AGE_THIN_BAMBOO -> m
    F:int AGE_THICK_BAMBOO -> n
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:float getDestroyProgress(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:void growBamboo(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource,int) -> a
    M:int getHeightAboveUpToMax(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:int getHeightBelowUpToMax(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
net.minecraft.world.level.block.BambooSaplingBlock -> cib -> net.minecraft.world.level.block.BlockBambooSapling
    F:float SAPLING_AABB_OFFSET -> a
    F:net.minecraft.world.phys.shapes.VoxelShape SAPLING_SHAPE -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:float getDestroyProgress(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:void growBamboo(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.block.BannerBlock -> cic -> net.minecraft.world.level.block.BlockBanner
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger ROTATION -> a
    F:java.util.Map BY_COLOR -> b
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> c
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.Block byColor(net.minecraft.world.item.EnumColor) -> a
net.minecraft.world.level.block.BarrelBlock -> cid -> net.minecraft.world.level.block.BlockBarrel
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean OPEN -> b
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
net.minecraft.world.level.block.BarrierBlock -> cie -> net.minecraft.world.level.block.BlockBarrier
    M:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> c
    M:float getShadeBrightness(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
net.minecraft.world.level.block.BaseCoralFanBlock -> cif -> net.minecraft.world.level.block.BlockCoralFanAbstract
    F:net.minecraft.world.phys.shapes.VoxelShape AABB -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
net.minecraft.world.level.block.BaseCoralPlantBlock -> cig -> net.minecraft.world.level.block.BlockCoralDead
    F:float AABB_OFFSET -> a
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
net.minecraft.world.level.block.BaseCoralPlantTypeBlock -> cih -> net.minecraft.world.level.block.BlockCoralBase
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> c
    F:net.minecraft.world.phys.shapes.VoxelShape AABB -> a
    M:void tryScheduleDieTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:boolean scanForWater(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> e
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.BaseCoralWallFanBlock -> cii -> net.minecraft.world.level.block.BlockCoralFanWallAbstract
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:java.util.Map SHAPES -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
net.minecraft.world.level.block.BaseEntityBlock -> cij -> net.minecraft.world.level.block.BlockTileEntity
    M:boolean triggerEvent(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,int,int) -> a
    M:net.minecraft.world.ITileInventory getMenuProvider(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.level.block.entity.BlockEntityTicker createTickerHelper(net.minecraft.world.level.block.entity.TileEntityTypes,net.minecraft.world.level.block.entity.TileEntityTypes,net.minecraft.world.level.block.entity.BlockEntityTicker) -> a
net.minecraft.world.level.block.BaseFireBlock -> cik -> net.minecraft.world.level.block.BlockFireAbstract
    F:int SECONDS_ON_FIRE -> c
    F:float fireDamage -> d
    F:float AABB_OFFSET -> a
    F:net.minecraft.world.phys.shapes.VoxelShape DOWN_AABB -> b
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData getState(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:boolean inPortalDimension(net.minecraft.world.level.World) -> a
    M:void spawnDestroyParticles(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void playerWillDestroy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean canBePlacedAt(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:boolean isPortal(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
net.minecraft.world.level.block.BasePressurePlateBlock -> cil -> net.minecraft.world.level.block.BlockPressurePlateAbstract
    F:net.minecraft.world.phys.shapes.VoxelShape PRESSED_AABB -> a
    F:net.minecraft.world.phys.shapes.VoxelShape AABB -> b
    F:net.minecraft.world.phys.AxisAlignedBB TOUCH_AABB -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:int getPressedTime() -> b
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:void checkPressed(net.minecraft.world.entity.Entity,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,int) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void updateNeighbours(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:int getDirectSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:net.minecraft.world.level.material.EnumPistonReaction getPistonPushReaction(net.minecraft.world.level.block.state.IBlockData) -> d
net.minecraft.world.level.block.BaseRailBlock -> cim -> net.minecraft.world.level.block.BlockMinecartTrackAbstract
    F:net.minecraft.world.phys.shapes.VoxelShape FLAT_AABB -> a
    F:net.minecraft.world.phys.shapes.VoxelShape HALF_BLOCK_AABB -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> c
    F:boolean isStraight -> d
    M:boolean isRail(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:boolean isRail(net.minecraft.world.level.block.state.IBlockData) -> g
    M:boolean isStraight() -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:net.minecraft.world.level.block.state.IBlockData updateState(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,boolean) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:boolean shouldBeRemoved(net.minecraft.core.BlockPosition,net.minecraft.world.level.World,net.minecraft.world.level.block.state.properties.BlockPropertyTrackPosition) -> a
    M:void updateState(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateDir(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:net.minecraft.world.level.material.EnumPistonReaction getPistonPushReaction(net.minecraft.world.level.block.state.IBlockData) -> d
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.block.BeaconBeamBlock -> cin -> net.minecraft.world.level.block.IBeaconBeam
net.minecraft.world.level.block.BeaconBlock -> cio -> net.minecraft.world.level.block.BlockBeacon
    M:net.minecraft.world.item.EnumColor getColor() -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.level.block.BedBlock -> cip -> net.minecraft.world.level.block.BlockBed
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum PART -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean OCCUPIED -> b
    F:int HEIGHT -> c
    F:net.minecraft.world.phys.shapes.VoxelShape BASE -> d
    F:int LEG_WIDTH -> m
    F:net.minecraft.world.phys.shapes.VoxelShape LEG_NORTH_WEST -> e
    F:net.minecraft.world.phys.shapes.VoxelShape LEG_SOUTH_WEST -> f
    F:net.minecraft.world.phys.shapes.VoxelShape LEG_NORTH_EAST -> g
    F:net.minecraft.world.phys.shapes.VoxelShape LEG_SOUTH_EAST -> h
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_SHAPE -> i
    F:net.minecraft.world.phys.shapes.VoxelShape SOUTH_SHAPE -> j
    F:net.minecraft.world.phys.shapes.VoxelShape WEST_SHAPE -> k
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_SHAPE -> l
    F:net.minecraft.world.item.EnumColor color -> n
    M:net.minecraft.core.EnumDirection getBedOrientation(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:boolean canSetSpawn(net.minecraft.world.level.World) -> a
    M:boolean kickVillagerOutOfBed(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void fallOn(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity,float) -> a
    M:void updateEntityAfterFallOn(net.minecraft.world.level.IBlockAccess,net.minecraft.world.entity.Entity) -> a
    M:void bounceUp(net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.EnumDirection getNeighbourDirection(net.minecraft.world.level.block.state.properties.BlockPropertyBedPart,net.minecraft.core.EnumDirection) -> a
    M:void playerWillDestroy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.core.EnumDirection getConnectedDirection(net.minecraft.world.level.block.state.IBlockData) -> g
    M:net.minecraft.world.level.block.DoubleBlockFinder$BlockType getBlockType(net.minecraft.world.level.block.state.IBlockData) -> h
    M:boolean isBunkBed(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
    M:java.util.Optional findStandUpPosition(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.ICollisionAccess,net.minecraft.core.BlockPosition,float) -> a
    M:java.util.Optional findBunkBedStandUpPosition(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.ICollisionAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.core.EnumDirection) -> a
    M:java.util.Optional findStandUpPositionAtOffset(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.ICollisionAccess,net.minecraft.core.BlockPosition,int[][],boolean) -> a
    M:net.minecraft.world.level.material.EnumPistonReaction getPistonPushReaction(net.minecraft.world.level.block.state.IBlockData) -> d
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.item.EnumColor getColor() -> b
    M:long getSeed(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.BeehiveBlock -> ciq -> net.minecraft.world.level.block.BlockBeehive
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger HONEY_LEVEL -> b
    F:int MAX_HONEY_LEVELS -> c
    F:int SHEARED_HONEYCOMB_COUNT -> d
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void playerDestroy(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntity,net.minecraft.world.item.ItemStack) -> a
    M:void angerNearbyBees(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:void dropHoneycomb(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:boolean hiveContainsBees(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> c
    M:void releaseBeesAndResetHoneyLevel(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.block.entity.TileEntityBeehive$ReleaseStatus) -> a
    M:void resetHoneyLevel(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void trySpawnDripParticles(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void spawnParticle(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShape,double) -> a
    M:void spawnFluidParticle(net.minecraft.world.level.World,double,double,double,double,double) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:void playerWillDestroy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.player.EntityHuman) -> a
    M:java.util.List getDrops(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.storage.loot.LootTableInfo$Builder) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.block.BeetrootBlock -> cir -> net.minecraft.world.level.block.BlockBeetroot
    F:int MAX_AGE -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE -> b
    M:net.minecraft.world.level.block.state.properties.BlockStateInteger getAgeProperty() -> b
    M:int getMaxAge() -> c
    M:net.minecraft.world.level.IMaterial getBaseSeedId() -> d
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:int getBonemealAgeIncrease(net.minecraft.world.level.World) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
net.minecraft.world.level.block.BellBlock -> cis -> net.minecraft.world.level.block.BlockBell
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum ATTACHMENT -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean POWERED -> c
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_SOUTH_FLOOR_SHAPE -> e
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_WEST_FLOOR_SHAPE -> f
    F:net.minecraft.world.phys.shapes.VoxelShape BELL_TOP_SHAPE -> g
    F:net.minecraft.world.phys.shapes.VoxelShape BELL_BOTTOM_SHAPE -> h
    F:net.minecraft.world.phys.shapes.VoxelShape BELL_SHAPE -> i
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_SOUTH_BETWEEN -> j
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_WEST_BETWEEN -> k
    F:net.minecraft.world.phys.shapes.VoxelShape TO_WEST -> l
    F:net.minecraft.world.phys.shapes.VoxelShape TO_EAST -> m
    F:net.minecraft.world.phys.shapes.VoxelShape TO_NORTH -> n
    F:int EVENT_BELL_RING -> d
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void onProjectileHit(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.MovingObjectPositionBlock,net.minecraft.world.entity.projectile.IProjectile) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:boolean onHit(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.MovingObjectPositionBlock,net.minecraft.world.entity.player.EntityHuman,boolean) -> a
    M:boolean isProperHit(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,double) -> a
    M:boolean attemptToRing(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:boolean attemptToRing(net.minecraft.world.entity.Entity,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getVoxelShape(net.minecraft.world.level.block.state.IBlockData) -> h
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.EnumDirection getConnectedDirection(net.minecraft.world.level.block.state.IBlockData) -> n
    M:net.minecraft.world.level.material.EnumPistonReaction getPistonPushReaction(net.minecraft.world.level.block.state.IBlockData) -> d
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.BigDripleafBlock -> cit -> net.minecraft.world.level.block.BigDripleafBlock
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum TILT -> b
    F:int NO_TICK -> c
    F:it.unimi.dsi.fastutil.objects.Object2IntMap DELAY_UNTIL_NEXT_TILT_STATE -> d
    F:int MAX_GEN_HEIGHT -> e
    F:int STEM_WIDTH -> f
    F:int ENTITY_DETECTION_MIN_Y -> g
    F:int LOWEST_LEAF_TOP -> h
    F:java.util.Map LEAF_SHAPES -> i
    F:net.minecraft.world.phys.shapes.VoxelShape STEM_SLICER -> j
    F:java.util.Map STEM_SHAPES -> k
    F:java.util.Map shapesCache -> l
    M:net.minecraft.world.phys.shapes.VoxelShape calculateShape(net.minecraft.world.level.block.state.IBlockData) -> h
    M:void placeWithRandomHeight(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:boolean canReplace(net.minecraft.world.level.block.state.IBlockData) -> n
    M:boolean canPlaceAt(net.minecraft.world.level.LevelHeightAccessor,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean place(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.Fluid,net.minecraft.core.EnumDirection) -> a
    M:void onProjectileHit(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.MovingObjectPositionBlock,net.minecraft.world.entity.projectile.IProjectile) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void playTiltSound(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.sounds.SoundEffect) -> a
    M:boolean canEntityTilt(net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:void setTiltAndScheduleTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.properties.Tilt,net.minecraft.sounds.SoundEffect) -> a
    M:void resetTilt(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> d
    M:void setTilt(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.properties.Tilt) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.BigDripleafStemBlock -> ciu -> net.minecraft.world.level.block.BigDripleafStemBlock
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> e
    F:int STEM_WIDTH -> f
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_SHAPE -> a
    F:net.minecraft.world.phys.shapes.VoxelShape SOUTH_SHAPE -> b
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_SHAPE -> c
    F:net.minecraft.world.phys.shapes.VoxelShape WEST_SHAPE -> d
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:boolean place(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.Fluid,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.BlastFurnaceBlock -> civ -> net.minecraft.world.level.block.BlockBlastFurnace
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:void openContainer(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.block.Block -> ciw -> net.minecraft.world.level.block.Block
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.core.Holder$Reference builtInRegistryHolder -> b
    F:net.minecraft.core.RegistryBlockID BLOCK_STATE_REGISTRY -> o
    F:com.google.common.cache.LoadingCache SHAPE_FULL_BLOCK_CACHE -> c
    F:int UPDATE_NEIGHBORS -> p
    F:int UPDATE_CLIENTS -> q
    F:int UPDATE_INVISIBLE -> r
    F:int UPDATE_IMMEDIATE -> s
    F:int UPDATE_KNOWN_SHAPE -> t
    F:int UPDATE_SUPPRESS_DROPS -> u
    F:int UPDATE_MOVE_BY_PISTON -> v
    F:int UPDATE_SUPPRESS_LIGHT -> w
    F:int UPDATE_NONE -> x
    F:int UPDATE_ALL -> y
    F:int UPDATE_ALL_IMMEDIATE -> z
    F:net.minecraft.world.level.block.state.IBlockData defaultBlockState -> d
    F:java.lang.String descriptionId -> e
    F:net.minecraft.world.item.Item item -> f
    F:int CACHE_SIZE -> g
    F:java.lang.ThreadLocal OCCLUSION_CACHE -> h
    M:int getId(net.minecraft.world.level.block.state.IBlockData) -> i
    M:net.minecraft.world.level.block.state.IBlockData stateById(int) -> a
    M:net.minecraft.world.level.block.Block byItem(net.minecraft.world.item.Item) -> a
    M:net.minecraft.world.level.block.state.IBlockData pushEntitiesUp(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape box(double,double,double,double,double,double) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateFromNeighbourShapes(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> b
    M:void updateOrDestroy(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,int) -> a
    M:void updateOrDestroy(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,int,int) -> a
    M:boolean isExceptionForConnection(net.minecraft.world.level.block.state.IBlockData) -> j
    M:boolean shouldRenderFace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.core.BlockPosition) -> a
    M:boolean canSupportRigidBlock(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> c
    M:boolean canSupportCenter(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:boolean isFaceFull(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.core.EnumDirection) -> a
    M:boolean isShapeFullBlock(net.minecraft.world.phys.shapes.VoxelShape) -> a
    M:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> c
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void destroy(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:java.util.List getDrops(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.entity.TileEntity) -> a
    M:java.util.List getDrops(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.entity.TileEntity,net.minecraft.world.entity.Entity,net.minecraft.world.item.ItemStack) -> a
    M:void dropResources(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.storage.loot.LootTableInfo$Builder) -> b
    M:void dropResources(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> c
    M:void dropResources(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.entity.TileEntity) -> a
    M:void dropResources(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.entity.TileEntity,net.minecraft.world.entity.Entity,net.minecraft.world.item.ItemStack) -> a
    M:void popResource(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack) -> a
    M:void popResourceFromFace(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.world.item.ItemStack) -> a
    M:void popResource(net.minecraft.world.level.World,java.util.function.Supplier,net.minecraft.world.item.ItemStack) -> a
    M:void popExperience(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,int) -> a
    M:float getExplosionResistance() -> e
    M:void wasExploded(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.Explosion) -> a
    M:void stepOn(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void playerDestroy(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntity,net.minecraft.world.item.ItemStack) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.network.chat.IChatMutableComponent getName() -> f
    M:java.lang.String getDescriptionId() -> g
    M:void fallOn(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity,float) -> a
    M:void updateEntityAfterFallOn(net.minecraft.world.level.IBlockAccess,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void fillItemCategory(net.minecraft.world.item.CreativeModeTab,net.minecraft.core.NonNullList) -> a
    M:float getFriction() -> h
    M:float getSpeedFactor() -> i
    M:float getJumpFactor() -> j
    M:void spawnDestroyParticles(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void playerWillDestroy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void handlePrecipitation(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.biome.BiomeBase$Precipitation) -> a
    M:boolean dropFromExplosion(net.minecraft.world.level.Explosion) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.BlockStateList getStateDefinition() -> k
    M:void registerDefaultState(net.minecraft.world.level.block.state.IBlockData) -> k
    M:net.minecraft.world.level.block.state.IBlockData defaultBlockState() -> m
    M:net.minecraft.world.level.block.state.IBlockData withPropertiesOf(net.minecraft.world.level.block.state.IBlockData) -> l
    M:net.minecraft.world.level.block.state.IBlockData copyProperty(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.properties.IBlockState) -> a
    M:net.minecraft.world.level.block.SoundEffectType getSoundType(net.minecraft.world.level.block.state.IBlockData) -> m
    M:net.minecraft.world.item.Item asItem() -> l
    M:boolean hasDynamicShape() -> n
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.IBlockAccess,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:net.minecraft.world.level.block.Block asBlock() -> o
    M:com.google.common.collect.ImmutableMap getShapeForEachState(java.util.function.Function) -> a
    M:net.minecraft.core.Holder$Reference builtInRegistryHolder() -> p
    M:void tryDropExperience(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack,net.minecraft.util.valueproviders.IntProvider) -> a
    M:java.lang.Boolean load(net.minecraft.world.phys.shapes.VoxelShape) -> a
    M:java.lang.Object load(java.lang.Object) -> load
    M:void rehash(int) -> rehash
net.minecraft.world.level.block.Block$BlockStatePairKey -> ciw$a -> net.minecraft.world.level.block.Block$a
    F:net.minecraft.world.level.block.state.IBlockData first -> a
    F:net.minecraft.world.level.block.state.IBlockData second -> b
    F:net.minecraft.core.EnumDirection direction -> c
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.world.level.block.Blocks -> cix -> net.minecraft.world.level.block.Blocks
    F:net.minecraft.world.level.block.Block AIR -> a
    F:net.minecraft.world.level.block.Block STONE -> b
    F:net.minecraft.world.level.block.Block GRANITE -> c
    F:net.minecraft.world.level.block.Block POLISHED_GRANITE -> d
    F:net.minecraft.world.level.block.Block DIORITE -> e
    F:net.minecraft.world.level.block.Block POLISHED_DIORITE -> f
    F:net.minecraft.world.level.block.Block ANDESITE -> g
    F:net.minecraft.world.level.block.Block POLISHED_ANDESITE -> h
    F:net.minecraft.world.level.block.Block GRASS_BLOCK -> i
    F:net.minecraft.world.level.block.Block DIRT -> j
    F:net.minecraft.world.level.block.Block COARSE_DIRT -> k
    F:net.minecraft.world.level.block.Block PODZOL -> l
    F:net.minecraft.world.level.block.Block COBBLESTONE -> m
    F:net.minecraft.world.level.block.Block OAK_PLANKS -> n
    F:net.minecraft.world.level.block.Block SPRUCE_PLANKS -> o
    F:net.minecraft.world.level.block.Block BIRCH_PLANKS -> p
    F:net.minecraft.world.level.block.Block JUNGLE_PLANKS -> q
    F:net.minecraft.world.level.block.Block ACACIA_PLANKS -> r
    F:net.minecraft.world.level.block.Block DARK_OAK_PLANKS -> s
    F:net.minecraft.world.level.block.Block MANGROVE_PLANKS -> t
    F:net.minecraft.world.level.block.Block OAK_SAPLING -> u
    F:net.minecraft.world.level.block.Block SPRUCE_SAPLING -> v
    F:net.minecraft.world.level.block.Block BIRCH_SAPLING -> w
    F:net.minecraft.world.level.block.Block JUNGLE_SAPLING -> x
    F:net.minecraft.world.level.block.Block ACACIA_SAPLING -> y
    F:net.minecraft.world.level.block.Block DARK_OAK_SAPLING -> z
    F:net.minecraft.world.level.block.Block STRIPPED_ACACIA_LOG -> aa
    F:net.minecraft.world.level.block.Block STRIPPED_DARK_OAK_LOG -> ab
    F:net.minecraft.world.level.block.Block STRIPPED_OAK_LOG -> ac
    F:net.minecraft.world.level.block.Block STRIPPED_MANGROVE_LOG -> ad
    F:net.minecraft.world.level.block.Block OAK_WOOD -> ae
    F:net.minecraft.world.level.block.Block SPRUCE_WOOD -> af
    F:net.minecraft.world.level.block.Block BIRCH_WOOD -> ag
    F:net.minecraft.world.level.block.Block JUNGLE_WOOD -> ah
    F:net.minecraft.world.level.block.Block ACACIA_WOOD -> ai
    F:net.minecraft.world.level.block.Block DARK_OAK_WOOD -> aj
    F:net.minecraft.world.level.block.Block MANGROVE_WOOD -> ak
    F:net.minecraft.world.level.block.Block STRIPPED_OAK_WOOD -> al
    F:net.minecraft.world.level.block.Block STRIPPED_SPRUCE_WOOD -> am
    F:net.minecraft.world.level.block.Block STRIPPED_BIRCH_WOOD -> an
    F:net.minecraft.world.level.block.Block STRIPPED_JUNGLE_WOOD -> ao
    F:net.minecraft.world.level.block.Block STRIPPED_ACACIA_WOOD -> ap
    F:net.minecraft.world.level.block.Block STRIPPED_DARK_OAK_WOOD -> aq
    F:net.minecraft.world.level.block.Block STRIPPED_MANGROVE_WOOD -> ar
    F:net.minecraft.world.level.block.Block OAK_LEAVES -> as
    F:net.minecraft.world.level.block.Block SPRUCE_LEAVES -> at
    F:net.minecraft.world.level.block.Block BIRCH_LEAVES -> au
    F:net.minecraft.world.level.block.Block JUNGLE_LEAVES -> av
    F:net.minecraft.world.level.block.Block ACACIA_LEAVES -> aw
    F:net.minecraft.world.level.block.Block DARK_OAK_LEAVES -> ax
    F:net.minecraft.world.level.block.Block MANGROVE_LEAVES -> ay
    F:net.minecraft.world.level.block.Block AZALEA_LEAVES -> az
    F:net.minecraft.world.level.block.Block RED_BED -> ba
    F:net.minecraft.world.level.block.Block BLACK_BED -> bb
    F:net.minecraft.world.level.block.Block POWERED_RAIL -> bc
    F:net.minecraft.world.level.block.Block DETECTOR_RAIL -> bd
    F:net.minecraft.world.level.block.Block STICKY_PISTON -> be
    F:net.minecraft.world.level.block.Block COBWEB -> bf
    F:net.minecraft.world.level.block.Block GRASS -> bg
    F:net.minecraft.world.level.block.Block FERN -> bh
    F:net.minecraft.world.level.block.Block DEAD_BUSH -> bi
    F:net.minecraft.world.level.block.Block SEAGRASS -> bj
    F:net.minecraft.world.level.block.Block TALL_SEAGRASS -> bk
    F:net.minecraft.world.level.block.Block PISTON -> bl
    F:net.minecraft.world.level.block.Block PISTON_HEAD -> bm
    F:net.minecraft.world.level.block.Block WHITE_WOOL -> bn
    F:net.minecraft.world.level.block.Block ORANGE_WOOL -> bo
    F:net.minecraft.world.level.block.Block MAGENTA_WOOL -> bp
    F:net.minecraft.world.level.block.Block LIGHT_BLUE_WOOL -> bq
    F:net.minecraft.world.level.block.Block YELLOW_WOOL -> br
    F:net.minecraft.world.level.block.Block LIME_WOOL -> bs
    F:net.minecraft.world.level.block.Block PINK_WOOL -> bt
    F:net.minecraft.world.level.block.Block GRAY_WOOL -> bu
    F:net.minecraft.world.level.block.Block LIGHT_GRAY_WOOL -> bv
    F:net.minecraft.world.level.block.Block CYAN_WOOL -> bw
    F:net.minecraft.world.level.block.Block PURPLE_WOOL -> bx
    F:net.minecraft.world.level.block.Block BLUE_WOOL -> by
    F:net.minecraft.world.level.block.Block BROWN_WOOL -> bz
    F:net.minecraft.world.level.block.Block TORCH -> ca
    F:net.minecraft.world.level.block.Block WALL_TORCH -> cb
    F:net.minecraft.world.level.block.Block FIRE -> cc
    F:net.minecraft.world.level.block.Block SOUL_FIRE -> cd
    F:net.minecraft.world.level.block.Block SPAWNER -> ce
    F:net.minecraft.world.level.block.Block OAK_STAIRS -> cf
    F:net.minecraft.world.level.block.Block CHEST -> cg
    F:net.minecraft.world.level.block.Block REDSTONE_WIRE -> ch
    F:net.minecraft.world.level.block.Block DIAMOND_ORE -> ci
    F:net.minecraft.world.level.block.Block DEEPSLATE_DIAMOND_ORE -> cj
    F:net.minecraft.world.level.block.Block DIAMOND_BLOCK -> ck
    F:net.minecraft.world.level.block.Block CRAFTING_TABLE -> cl
    F:net.minecraft.world.level.block.Block WHEAT -> cm
    F:net.minecraft.world.level.block.Block FARMLAND -> cn
    F:net.minecraft.world.level.block.Block FURNACE -> co
    F:net.minecraft.world.level.block.Block OAK_SIGN -> cp
    F:net.minecraft.world.level.block.Block SPRUCE_SIGN -> cq
    F:net.minecraft.world.level.block.Block BIRCH_SIGN -> cr
    F:net.minecraft.world.level.block.Block ACACIA_SIGN -> cs
    F:net.minecraft.world.level.block.Block JUNGLE_SIGN -> ct
    F:net.minecraft.world.level.block.Block DARK_OAK_SIGN -> cu
    F:net.minecraft.world.level.block.Block MANGROVE_SIGN -> cv
    F:net.minecraft.world.level.block.Block OAK_DOOR -> cw
    F:net.minecraft.world.level.block.Block LADDER -> cx
    F:net.minecraft.world.level.block.Block RAIL -> cy
    F:net.minecraft.world.level.block.Block COBBLESTONE_STAIRS -> cz
    F:net.minecraft.world.level.block.Block CLAY -> da
    F:net.minecraft.world.level.block.Block SUGAR_CANE -> db
    F:net.minecraft.world.level.block.Block JUKEBOX -> dc
    F:net.minecraft.world.level.block.Block OAK_FENCE -> dd
    F:net.minecraft.world.level.block.Block PUMPKIN -> de
    F:net.minecraft.world.level.block.Block NETHERRACK -> df
    F:net.minecraft.world.level.block.Block SOUL_SAND -> dg
    F:net.minecraft.world.level.block.Block SOUL_SOIL -> dh
    F:net.minecraft.world.level.block.Block BASALT -> di
    F:net.minecraft.world.level.block.Block POLISHED_BASALT -> dj
    F:net.minecraft.world.level.block.Block SOUL_TORCH -> dk
    F:net.minecraft.world.level.block.Block SOUL_WALL_TORCH -> dl
    F:net.minecraft.world.level.block.Block GLOWSTONE -> dm
    F:net.minecraft.world.level.block.Block NETHER_PORTAL -> dn
    F:net.minecraft.world.level.block.Block CARVED_PUMPKIN -> do
    F:net.minecraft.world.level.block.Block JACK_O_LANTERN -> dp
    F:net.minecraft.world.level.block.Block CAKE -> dq
    F:net.minecraft.world.level.block.Block REPEATER -> dr
    F:net.minecraft.world.level.block.Block WHITE_STAINED_GLASS -> ds
    F:net.minecraft.world.level.block.Block ORANGE_STAINED_GLASS -> dt
    F:net.minecraft.world.level.block.Block MAGENTA_STAINED_GLASS -> du
    F:net.minecraft.world.level.block.Block LIGHT_BLUE_STAINED_GLASS -> dv
    F:net.minecraft.world.level.block.Block YELLOW_STAINED_GLASS -> dw
    F:net.minecraft.world.level.block.Block LIME_STAINED_GLASS -> dx
    F:net.minecraft.world.level.block.Block PINK_STAINED_GLASS -> dy
    F:net.minecraft.world.level.block.Block GRAY_STAINED_GLASS -> dz
    F:net.minecraft.world.level.block.Block INFESTED_CHISELED_STONE_BRICKS -> ea
    F:net.minecraft.world.level.block.Block BROWN_MUSHROOM_BLOCK -> eb
    F:net.minecraft.world.level.block.Block RED_MUSHROOM_BLOCK -> ec
    F:net.minecraft.world.level.block.Block MUSHROOM_STEM -> ed
    F:net.minecraft.world.level.block.Block IRON_BARS -> ee
    F:net.minecraft.world.level.block.Block CHAIN -> ef
    F:net.minecraft.world.level.block.Block GLASS_PANE -> eg
    F:net.minecraft.world.level.block.Block MELON -> eh
    F:net.minecraft.world.level.block.Block ATTACHED_PUMPKIN_STEM -> ei
    F:net.minecraft.world.level.block.Block ATTACHED_MELON_STEM -> ej
    F:net.minecraft.world.level.block.Block PUMPKIN_STEM -> ek
    F:net.minecraft.world.level.block.Block MELON_STEM -> el
    F:net.minecraft.world.level.block.Block VINE -> em
    F:net.minecraft.world.level.block.Block GLOW_LICHEN -> en
    F:net.minecraft.world.level.block.Block OAK_FENCE_GATE -> eo
    F:net.minecraft.world.level.block.Block BRICK_STAIRS -> ep
    F:net.minecraft.world.level.block.Block STONE_BRICK_STAIRS -> eq
    F:net.minecraft.world.level.block.Block MUD_BRICK_STAIRS -> er
    F:net.minecraft.world.level.block.Block MYCELIUM -> es
    F:net.minecraft.world.level.block.Block LILY_PAD -> et
    F:net.minecraft.world.level.block.Block NETHER_BRICKS -> eu
    F:net.minecraft.world.level.block.Block NETHER_BRICK_FENCE -> ev
    F:net.minecraft.world.level.block.Block NETHER_BRICK_STAIRS -> ew
    F:net.minecraft.world.level.block.Block NETHER_WART -> ex
    F:net.minecraft.world.level.block.Block ENCHANTING_TABLE -> ey
    F:net.minecraft.world.level.block.Block BREWING_STAND -> ez
    F:net.minecraft.world.level.block.Block POTTED_SPRUCE_SAPLING -> fa
    F:net.minecraft.world.level.block.Block POTTED_BIRCH_SAPLING -> fb
    F:net.minecraft.world.level.block.Block POTTED_JUNGLE_SAPLING -> fc
    F:net.minecraft.world.level.block.Block POTTED_ACACIA_SAPLING -> fd
    F:net.minecraft.world.level.block.Block POTTED_DARK_OAK_SAPLING -> fe
    F:net.minecraft.world.level.block.Block POTTED_MANGROVE_PROPAGULE -> ff
    F:net.minecraft.world.level.block.Block POTTED_FERN -> fg
    F:net.minecraft.world.level.block.Block POTTED_DANDELION -> fh
    F:net.minecraft.world.level.block.Block POTTED_POPPY -> fi
    F:net.minecraft.world.level.block.Block POTTED_BLUE_ORCHID -> fj
    F:net.minecraft.world.level.block.Block POTTED_ALLIUM -> fk
    F:net.minecraft.world.level.block.Block POTTED_AZURE_BLUET -> fl
    F:net.minecraft.world.level.block.Block POTTED_RED_TULIP -> fm
    F:net.minecraft.world.level.block.Block POTTED_ORANGE_TULIP -> fn
    F:net.minecraft.world.level.block.Block POTTED_WHITE_TULIP -> fo
    F:net.minecraft.world.level.block.Block POTTED_PINK_TULIP -> fp
    F:net.minecraft.world.level.block.Block POTTED_OXEYE_DAISY -> fq
    F:net.minecraft.world.level.block.Block POTTED_CORNFLOWER -> fr
    F:net.minecraft.world.level.block.Block POTTED_LILY_OF_THE_VALLEY -> fs
    F:net.minecraft.world.level.block.Block POTTED_WITHER_ROSE -> ft
    F:net.minecraft.world.level.block.Block POTTED_RED_MUSHROOM -> fu
    F:net.minecraft.world.level.block.Block POTTED_BROWN_MUSHROOM -> fv
    F:net.minecraft.world.level.block.Block POTTED_DEAD_BUSH -> fw
    F:net.minecraft.world.level.block.Block POTTED_CACTUS -> fx
    F:net.minecraft.world.level.block.Block CARROTS -> fy
    F:net.minecraft.world.level.block.Block POTATOES -> fz
    F:net.minecraft.world.level.block.Block DAYLIGHT_DETECTOR -> ga
    F:net.minecraft.world.level.block.Block REDSTONE_BLOCK -> gb
    F:net.minecraft.world.level.block.Block NETHER_QUARTZ_ORE -> gc
    F:net.minecraft.world.level.block.Block HOPPER -> gd
    F:net.minecraft.world.level.block.Block QUARTZ_BLOCK -> ge
    F:net.minecraft.world.level.block.Block CHISELED_QUARTZ_BLOCK -> gf
    F:net.minecraft.world.level.block.Block QUARTZ_PILLAR -> gg
    F:net.minecraft.world.level.block.Block QUARTZ_STAIRS -> gh
    F:net.minecraft.world.level.block.Block ACTIVATOR_RAIL -> gi
    F:net.minecraft.world.level.block.Block DROPPER -> gj
    F:net.minecraft.world.level.block.Block WHITE_TERRACOTTA -> gk
    F:net.minecraft.world.level.block.Block ORANGE_TERRACOTTA -> gl
    F:net.minecraft.world.level.block.Block MAGENTA_TERRACOTTA -> gm
    F:net.minecraft.world.level.block.Block LIGHT_BLUE_TERRACOTTA -> gn
    F:net.minecraft.world.level.block.Block YELLOW_TERRACOTTA -> go
    F:net.minecraft.world.level.block.Block LIME_TERRACOTTA -> gp
    F:net.minecraft.world.level.block.Block PINK_TERRACOTTA -> gq
    F:net.minecraft.world.level.block.Block GRAY_TERRACOTTA -> gr
    F:net.minecraft.world.level.block.Block LIGHT_GRAY_TERRACOTTA -> gs
    F:net.minecraft.world.level.block.Block CYAN_TERRACOTTA -> gt
    F:net.minecraft.world.level.block.Block PURPLE_TERRACOTTA -> gu
    F:net.minecraft.world.level.block.Block BLUE_TERRACOTTA -> gv
    F:net.minecraft.world.level.block.Block BROWN_TERRACOTTA -> gw
    F:net.minecraft.world.level.block.Block GREEN_TERRACOTTA -> gx
    F:net.minecraft.world.level.block.Block RED_TERRACOTTA -> gy
    F:net.minecraft.world.level.block.Block BLACK_TERRACOTTA -> gz
    F:net.minecraft.world.level.block.Block PRISMARINE_STAIRS -> ha
    F:net.minecraft.world.level.block.Block PRISMARINE_BRICK_STAIRS -> hb
    F:net.minecraft.world.level.block.Block DARK_PRISMARINE_STAIRS -> hc
    F:net.minecraft.world.level.block.Block PRISMARINE_SLAB -> hd
    F:net.minecraft.world.level.block.Block PRISMARINE_BRICK_SLAB -> he
    F:net.minecraft.world.level.block.Block DARK_PRISMARINE_SLAB -> hf
    F:net.minecraft.world.level.block.Block SEA_LANTERN -> hg
    F:net.minecraft.world.level.block.Block HAY_BLOCK -> hh
    F:net.minecraft.world.level.block.Block WHITE_CARPET -> hi
    F:net.minecraft.world.level.block.Block ORANGE_CARPET -> hj
    F:net.minecraft.world.level.block.Block MAGENTA_CARPET -> hk
    F:net.minecraft.world.level.block.Block LIGHT_BLUE_CARPET -> hl
    F:net.minecraft.world.level.block.Block YELLOW_CARPET -> hm
    F:net.minecraft.world.level.block.Block LIME_CARPET -> hn
    F:net.minecraft.world.level.block.Block PINK_CARPET -> ho
    F:net.minecraft.world.level.block.Block GRAY_CARPET -> hp
    F:net.minecraft.world.level.block.Block LIGHT_GRAY_CARPET -> hq
    F:net.minecraft.world.level.block.Block CYAN_CARPET -> hr
    F:net.minecraft.world.level.block.Block PURPLE_CARPET -> hs
    F:net.minecraft.world.level.block.Block BLUE_CARPET -> ht
    F:net.minecraft.world.level.block.Block BROWN_CARPET -> hu
    F:net.minecraft.world.level.block.Block GREEN_CARPET -> hv
    F:net.minecraft.world.level.block.Block RED_CARPET -> hw
    F:net.minecraft.world.level.block.Block BLACK_CARPET -> hx
    F:net.minecraft.world.level.block.Block TERRACOTTA -> hy
    F:net.minecraft.world.level.block.Block COAL_BLOCK -> hz
    F:net.minecraft.world.level.block.Block LIGHT_BLUE_WALL_BANNER -> ia
    F:net.minecraft.world.level.block.Block YELLOW_WALL_BANNER -> ib
    F:net.minecraft.world.level.block.Block LIME_WALL_BANNER -> ic
    F:net.minecraft.world.level.block.Block PINK_WALL_BANNER -> id
    F:net.minecraft.world.level.block.Block GRAY_WALL_BANNER -> ie
    F:net.minecraft.world.level.block.Block LIGHT_GRAY_WALL_BANNER -> if
    F:net.minecraft.world.level.block.Block CYAN_WALL_BANNER -> ig
    F:net.minecraft.world.level.block.Block PURPLE_WALL_BANNER -> ih
    F:net.minecraft.world.level.block.Block BLUE_WALL_BANNER -> ii
    F:net.minecraft.world.level.block.Block BROWN_WALL_BANNER -> ij
    F:net.minecraft.world.level.block.Block GREEN_WALL_BANNER -> ik
    F:net.minecraft.world.level.block.Block RED_WALL_BANNER -> il
    F:net.minecraft.world.level.block.Block BLACK_WALL_BANNER -> im
    F:net.minecraft.world.level.block.Block RED_SANDSTONE -> in
    F:net.minecraft.world.level.block.Block CHISELED_RED_SANDSTONE -> io
    F:net.minecraft.world.level.block.Block CUT_RED_SANDSTONE -> ip
    F:net.minecraft.world.level.block.Block RED_SANDSTONE_STAIRS -> iq
    F:net.minecraft.world.level.block.Block OAK_SLAB -> ir
    F:net.minecraft.world.level.block.Block SPRUCE_SLAB -> is
    F:net.minecraft.world.level.block.Block BIRCH_SLAB -> it
    F:net.minecraft.world.level.block.Block JUNGLE_SLAB -> iu
    F:net.minecraft.world.level.block.Block ACACIA_SLAB -> iv
    F:net.minecraft.world.level.block.Block DARK_OAK_SLAB -> iw
    F:net.minecraft.world.level.block.Block MANGROVE_SLAB -> ix
    F:net.minecraft.world.level.block.Block STONE_SLAB -> iy
    F:net.minecraft.world.level.block.Block SMOOTH_STONE_SLAB -> iz
    F:net.minecraft.world.level.block.Block DARK_OAK_FENCE -> ja
    F:net.minecraft.world.level.block.Block MANGROVE_FENCE -> jb
    F:net.minecraft.world.level.block.Block SPRUCE_DOOR -> jc
    F:net.minecraft.world.level.block.Block BIRCH_DOOR -> jd
    F:net.minecraft.world.level.block.Block JUNGLE_DOOR -> je
    F:net.minecraft.world.level.block.Block ACACIA_DOOR -> jf
    F:net.minecraft.world.level.block.Block DARK_OAK_DOOR -> jg
    F:net.minecraft.world.level.block.Block MANGROVE_DOOR -> jh
    F:net.minecraft.world.level.block.Block END_ROD -> ji
    F:net.minecraft.world.level.block.Block CHORUS_PLANT -> jj
    F:net.minecraft.world.level.block.Block CHORUS_FLOWER -> jk
    F:net.minecraft.world.level.block.Block PURPUR_BLOCK -> jl
    F:net.minecraft.world.level.block.Block PURPUR_PILLAR -> jm
    F:net.minecraft.world.level.block.Block PURPUR_STAIRS -> jn
    F:net.minecraft.world.level.block.Block END_STONE_BRICKS -> jo
    F:net.minecraft.world.level.block.Block BEETROOTS -> jp
    F:net.minecraft.world.level.block.Block DIRT_PATH -> jq
    F:net.minecraft.world.level.block.Block END_GATEWAY -> jr
    F:net.minecraft.world.level.block.Block REPEATING_COMMAND_BLOCK -> js
    F:net.minecraft.world.level.block.Block CHAIN_COMMAND_BLOCK -> jt
    F:net.minecraft.world.level.block.Block FROSTED_ICE -> ju
    F:net.minecraft.world.level.block.Block MAGMA_BLOCK -> jv
    F:net.minecraft.world.level.block.Block NETHER_WART_BLOCK -> jw
    F:net.minecraft.world.level.block.Block RED_NETHER_BRICKS -> jx
    F:net.minecraft.world.level.block.Block BONE_BLOCK -> jy
    F:net.minecraft.world.level.block.Block STRUCTURE_VOID -> jz
    F:net.minecraft.world.level.block.Block LIGHT_GRAY_GLAZED_TERRACOTTA -> ka
    F:net.minecraft.world.level.block.Block CYAN_GLAZED_TERRACOTTA -> kb
    F:net.minecraft.world.level.block.Block PURPLE_GLAZED_TERRACOTTA -> kc
    F:net.minecraft.world.level.block.Block BLUE_GLAZED_TERRACOTTA -> kd
    F:net.minecraft.world.level.block.Block BROWN_GLAZED_TERRACOTTA -> ke
    F:net.minecraft.world.level.block.Block GREEN_GLAZED_TERRACOTTA -> kf
    F:net.minecraft.world.level.block.Block RED_GLAZED_TERRACOTTA -> kg
    F:net.minecraft.world.level.block.Block BLACK_GLAZED_TERRACOTTA -> kh
    F:net.minecraft.world.level.block.Block WHITE_CONCRETE -> ki
    F:net.minecraft.world.level.block.Block ORANGE_CONCRETE -> kj
    F:net.minecraft.world.level.block.Block MAGENTA_CONCRETE -> kk
    F:net.minecraft.world.level.block.Block LIGHT_BLUE_CONCRETE -> kl
    F:net.minecraft.world.level.block.Block YELLOW_CONCRETE -> km
    F:net.minecraft.world.level.block.Block LIME_CONCRETE -> kn
    F:net.minecraft.world.level.block.Block PINK_CONCRETE -> ko
    F:net.minecraft.world.level.block.Block GRAY_CONCRETE -> kp
    F:net.minecraft.world.level.block.Block LIGHT_GRAY_CONCRETE -> kq
    F:net.minecraft.world.level.block.Block CYAN_CONCRETE -> kr
    F:net.minecraft.world.level.block.Block PURPLE_CONCRETE -> ks
    F:net.minecraft.world.level.block.Block BLUE_CONCRETE -> kt
    F:net.minecraft.world.level.block.Block BROWN_CONCRETE -> ku
    F:net.minecraft.world.level.block.Block GREEN_CONCRETE -> kv
    F:net.minecraft.world.level.block.Block RED_CONCRETE -> kw
    F:net.minecraft.world.level.block.Block BLACK_CONCRETE -> kx
    F:net.minecraft.world.level.block.Block WHITE_CONCRETE_POWDER -> ky
    F:net.minecraft.world.level.block.Block ORANGE_CONCRETE_POWDER -> kz
    F:net.minecraft.world.level.block.Block FIRE_CORAL_BLOCK -> la
    F:net.minecraft.world.level.block.Block HORN_CORAL_BLOCK -> lb
    F:net.minecraft.world.level.block.Block DEAD_TUBE_CORAL -> lc
    F:net.minecraft.world.level.block.Block DEAD_BRAIN_CORAL -> ld
    F:net.minecraft.world.level.block.Block DEAD_BUBBLE_CORAL -> le
    F:net.minecraft.world.level.block.Block DEAD_FIRE_CORAL -> lf
    F:net.minecraft.world.level.block.Block DEAD_HORN_CORAL -> lg
    F:net.minecraft.world.level.block.Block TUBE_CORAL -> lh
    F:net.minecraft.world.level.block.Block BRAIN_CORAL -> li
    F:net.minecraft.world.level.block.Block BUBBLE_CORAL -> lj
    F:net.minecraft.world.level.block.Block FIRE_CORAL -> lk
    F:net.minecraft.world.level.block.Block HORN_CORAL -> ll
    F:net.minecraft.world.level.block.Block DEAD_TUBE_CORAL_FAN -> lm
    F:net.minecraft.world.level.block.Block DEAD_BRAIN_CORAL_FAN -> ln
    F:net.minecraft.world.level.block.Block DEAD_BUBBLE_CORAL_FAN -> lo
    F:net.minecraft.world.level.block.Block DEAD_FIRE_CORAL_FAN -> lp
    F:net.minecraft.world.level.block.Block DEAD_HORN_CORAL_FAN -> lq
    F:net.minecraft.world.level.block.Block TUBE_CORAL_FAN -> lr
    F:net.minecraft.world.level.block.Block BRAIN_CORAL_FAN -> ls
    F:net.minecraft.world.level.block.Block BUBBLE_CORAL_FAN -> lt
    F:net.minecraft.world.level.block.Block FIRE_CORAL_FAN -> lu
    F:net.minecraft.world.level.block.Block HORN_CORAL_FAN -> lv
    F:net.minecraft.world.level.block.Block DEAD_TUBE_CORAL_WALL_FAN -> lw
    F:net.minecraft.world.level.block.Block DEAD_BRAIN_CORAL_WALL_FAN -> lx
    F:net.minecraft.world.level.block.Block DEAD_BUBBLE_CORAL_WALL_FAN -> ly
    F:net.minecraft.world.level.block.Block DEAD_FIRE_CORAL_WALL_FAN -> lz
    F:net.minecraft.world.level.block.Block RED_NETHER_BRICK_STAIRS -> ma
    F:net.minecraft.world.level.block.Block POLISHED_ANDESITE_STAIRS -> mb
    F:net.minecraft.world.level.block.Block DIORITE_STAIRS -> mc
    F:net.minecraft.world.level.block.Block POLISHED_GRANITE_SLAB -> md
    F:net.minecraft.world.level.block.Block SMOOTH_RED_SANDSTONE_SLAB -> me
    F:net.minecraft.world.level.block.Block MOSSY_STONE_BRICK_SLAB -> mf
    F:net.minecraft.world.level.block.Block POLISHED_DIORITE_SLAB -> mg
    F:net.minecraft.world.level.block.Block MOSSY_COBBLESTONE_SLAB -> mh
    F:net.minecraft.world.level.block.Block END_STONE_BRICK_SLAB -> mi
    F:net.minecraft.world.level.block.Block SMOOTH_SANDSTONE_SLAB -> mj
    F:net.minecraft.world.level.block.Block SMOOTH_QUARTZ_SLAB -> mk
    F:net.minecraft.world.level.block.Block GRANITE_SLAB -> ml
    F:net.minecraft.world.level.block.Block ANDESITE_SLAB -> mm
    F:net.minecraft.world.level.block.Block RED_NETHER_BRICK_SLAB -> mn
    F:net.minecraft.world.level.block.Block POLISHED_ANDESITE_SLAB -> mo
    F:net.minecraft.world.level.block.Block DIORITE_SLAB -> mp
    F:net.minecraft.world.level.block.Block BRICK_WALL -> mq
    F:net.minecraft.world.level.block.Block PRISMARINE_WALL -> mr
    F:net.minecraft.world.level.block.Block RED_SANDSTONE_WALL -> ms
    F:net.minecraft.world.level.block.Block MOSSY_STONE_BRICK_WALL -> mt
    F:net.minecraft.world.level.block.Block GRANITE_WALL -> mu
    F:net.minecraft.world.level.block.Block STONE_BRICK_WALL -> mv
    F:net.minecraft.world.level.block.Block MUD_BRICK_WALL -> mw
    F:net.minecraft.world.level.block.Block NETHER_BRICK_WALL -> mx
    F:net.minecraft.world.level.block.Block ANDESITE_WALL -> my
    F:net.minecraft.world.level.block.Block RED_NETHER_BRICK_WALL -> mz
    F:net.minecraft.world.level.block.Block WARPED_WART_BLOCK -> na
    F:net.minecraft.world.level.block.Block WARPED_ROOTS -> nb
    F:net.minecraft.world.level.block.Block NETHER_SPROUTS -> nc
    F:net.minecraft.world.level.block.Block CRIMSON_STEM -> nd
    F:net.minecraft.world.level.block.Block STRIPPED_CRIMSON_STEM -> ne
    F:net.minecraft.world.level.block.Block CRIMSON_HYPHAE -> nf
    F:net.minecraft.world.level.block.Block STRIPPED_CRIMSON_HYPHAE -> ng
    F:net.minecraft.world.level.block.Block CRIMSON_NYLIUM -> nh
    F:net.minecraft.world.level.block.Block CRIMSON_FUNGUS -> ni
    F:net.minecraft.world.level.block.Block SHROOMLIGHT -> nj
    F:net.minecraft.world.level.block.Block WEEPING_VINES -> nk
    F:net.minecraft.world.level.block.Block WEEPING_VINES_PLANT -> nl
    F:net.minecraft.world.level.block.Block TWISTING_VINES -> nm
    F:net.minecraft.world.level.block.Block TWISTING_VINES_PLANT -> nn
    F:net.minecraft.world.level.block.Block CRIMSON_ROOTS -> no
    F:net.minecraft.world.level.block.Block CRIMSON_PLANKS -> np
    F:net.minecraft.world.level.block.Block WARPED_PLANKS -> nq
    F:net.minecraft.world.level.block.Block CRIMSON_SLAB -> nr
    F:net.minecraft.world.level.block.Block WARPED_SLAB -> ns
    F:net.minecraft.world.level.block.Block CRIMSON_PRESSURE_PLATE -> nt
    F:net.minecraft.world.level.block.Block WARPED_PRESSURE_PLATE -> nu
    F:net.minecraft.world.level.block.Block CRIMSON_FENCE -> nv
    F:net.minecraft.world.level.block.Block WARPED_FENCE -> nw
    F:net.minecraft.world.level.block.Block CRIMSON_TRAPDOOR -> nx
    F:net.minecraft.world.level.block.Block WARPED_TRAPDOOR -> ny
    F:net.minecraft.world.level.block.Block CRIMSON_FENCE_GATE -> nz
    F:net.minecraft.world.level.block.Block POTTED_WARPED_ROOTS -> oa
    F:net.minecraft.world.level.block.Block LODESTONE -> ob
    F:net.minecraft.world.level.block.Block BLACKSTONE -> oc
    F:net.minecraft.world.level.block.Block BLACKSTONE_STAIRS -> od
    F:net.minecraft.world.level.block.Block BLACKSTONE_WALL -> oe
    F:net.minecraft.world.level.block.Block BLACKSTONE_SLAB -> of
    F:net.minecraft.world.level.block.Block POLISHED_BLACKSTONE -> og
    F:net.minecraft.world.level.block.Block POLISHED_BLACKSTONE_BRICKS -> oh
    F:net.minecraft.world.level.block.Block CRACKED_POLISHED_BLACKSTONE_BRICKS -> oi
    F:net.minecraft.world.level.block.Block CHISELED_POLISHED_BLACKSTONE -> oj
    F:net.minecraft.world.level.block.Block POLISHED_BLACKSTONE_BRICK_SLAB -> ok
    F:net.minecraft.world.level.block.Block POLISHED_BLACKSTONE_BRICK_STAIRS -> ol
    F:net.minecraft.world.level.block.Block POLISHED_BLACKSTONE_BRICK_WALL -> om
    F:net.minecraft.world.level.block.Block GILDED_BLACKSTONE -> on
    F:net.minecraft.world.level.block.Block POLISHED_BLACKSTONE_STAIRS -> oo
    F:net.minecraft.world.level.block.Block POLISHED_BLACKSTONE_SLAB -> op
    F:net.minecraft.world.level.block.Block POLISHED_BLACKSTONE_PRESSURE_PLATE -> oq
    F:net.minecraft.world.level.block.Block POLISHED_BLACKSTONE_BUTTON -> or
    F:net.minecraft.world.level.block.Block POLISHED_BLACKSTONE_WALL -> os
    F:net.minecraft.world.level.block.Block CHISELED_NETHER_BRICKS -> ot
    F:net.minecraft.world.level.block.Block CRACKED_NETHER_BRICKS -> ou
    F:net.minecraft.world.level.block.Block QUARTZ_BRICKS -> ov
    F:net.minecraft.world.level.block.Block CANDLE -> ow
    F:net.minecraft.world.level.block.Block WHITE_CANDLE -> ox
    F:net.minecraft.world.level.block.Block ORANGE_CANDLE -> oy
    F:net.minecraft.world.level.block.Block MAGENTA_CANDLE -> oz
    F:net.minecraft.world.level.block.Block BROWN_CANDLE_CAKE -> pa
    F:net.minecraft.world.level.block.Block GREEN_CANDLE_CAKE -> pb
    F:net.minecraft.world.level.block.Block RED_CANDLE_CAKE -> pc
    F:net.minecraft.world.level.block.Block BLACK_CANDLE_CAKE -> pd
    F:net.minecraft.world.level.block.Block AMETHYST_BLOCK -> pe
    F:net.minecraft.world.level.block.Block BUDDING_AMETHYST -> pf
    F:net.minecraft.world.level.block.Block AMETHYST_CLUSTER -> pg
    F:net.minecraft.world.level.block.Block LARGE_AMETHYST_BUD -> ph
    F:net.minecraft.world.level.block.Block MEDIUM_AMETHYST_BUD -> pi
    F:net.minecraft.world.level.block.Block SMALL_AMETHYST_BUD -> pj
    F:net.minecraft.world.level.block.Block TUFF -> pk
    F:net.minecraft.world.level.block.Block CALCITE -> pl
    F:net.minecraft.world.level.block.Block TINTED_GLASS -> pm
    F:net.minecraft.world.level.block.Block POWDER_SNOW -> pn
    F:net.minecraft.world.level.block.Block SCULK_SENSOR -> po
    F:net.minecraft.world.level.block.Block SCULK -> pp
    F:net.minecraft.world.level.block.Block SCULK_VEIN -> pq
    F:net.minecraft.world.level.block.Block SCULK_CATALYST -> pr
    F:net.minecraft.world.level.block.Block SCULK_SHRIEKER -> ps
    F:net.minecraft.world.level.block.Block OXIDIZED_COPPER -> pt
    F:net.minecraft.world.level.block.Block WEATHERED_COPPER -> pu
    F:net.minecraft.world.level.block.Block EXPOSED_COPPER -> pv
    F:net.minecraft.world.level.block.Block COPPER_BLOCK -> pw
    F:net.minecraft.world.level.block.Block COPPER_ORE -> px
    F:net.minecraft.world.level.block.Block DEEPSLATE_COPPER_ORE -> py
    F:net.minecraft.world.level.block.Block OXIDIZED_CUT_COPPER -> pz
    F:net.minecraft.world.level.block.Block WAXED_CUT_COPPER_SLAB -> qa
    F:net.minecraft.world.level.block.Block LIGHTNING_ROD -> qb
    F:net.minecraft.world.level.block.Block POINTED_DRIPSTONE -> qc
    F:net.minecraft.world.level.block.Block DRIPSTONE_BLOCK -> qd
    F:net.minecraft.world.level.block.Block CAVE_VINES -> qe
    F:net.minecraft.world.level.block.Block CAVE_VINES_PLANT -> qf
    F:net.minecraft.world.level.block.Block SPORE_BLOSSOM -> qg
    F:net.minecraft.world.level.block.Block AZALEA -> qh
    F:net.minecraft.world.level.block.Block FLOWERING_AZALEA -> qi
    F:net.minecraft.world.level.block.Block MOSS_CARPET -> qj
    F:net.minecraft.world.level.block.Block MOSS_BLOCK -> qk
    F:net.minecraft.world.level.block.Block BIG_DRIPLEAF -> ql
    F:net.minecraft.world.level.block.Block BIG_DRIPLEAF_STEM -> qm
    F:net.minecraft.world.level.block.Block SMALL_DRIPLEAF -> qn
    F:net.minecraft.world.level.block.Block HANGING_ROOTS -> qo
    F:net.minecraft.world.level.block.Block ROOTED_DIRT -> qp
    F:net.minecraft.world.level.block.Block MUD -> qq
    F:net.minecraft.world.level.block.Block DEEPSLATE -> qr
    F:net.minecraft.world.level.block.Block COBBLED_DEEPSLATE -> qs
    F:net.minecraft.world.level.block.Block COBBLED_DEEPSLATE_STAIRS -> qt
    F:net.minecraft.world.level.block.Block COBBLED_DEEPSLATE_SLAB -> qu
    F:net.minecraft.world.level.block.Block COBBLED_DEEPSLATE_WALL -> qv
    F:net.minecraft.world.level.block.Block POLISHED_DEEPSLATE -> qw
    F:net.minecraft.world.level.block.Block POLISHED_DEEPSLATE_STAIRS -> qx
    F:net.minecraft.world.level.block.Block POLISHED_DEEPSLATE_SLAB -> qy
    F:net.minecraft.world.level.block.Block POLISHED_DEEPSLATE_WALL -> qz
    M:java.util.function.ToIntFunction litBlockEmission(int) -> a
    M:java.lang.Boolean never(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.entity.EntityTypes) -> a
    M:java.lang.Boolean always(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.entity.EntityTypes) -> b
    M:java.lang.Boolean ocelotOrParrot(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.entity.EntityTypes) -> c
    M:net.minecraft.world.level.block.BlockBed bed(net.minecraft.world.item.EnumColor) -> a
    M:net.minecraft.world.level.block.BlockRotatable log(net.minecraft.world.level.material.MaterialMapColor,net.minecraft.world.level.material.MaterialMapColor) -> a
    M:net.minecraft.world.level.block.Block netherStem(net.minecraft.world.level.material.MaterialMapColor) -> a
    M:boolean always(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:boolean never(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.level.block.BlockStainedGlass stainedGlass(net.minecraft.world.item.EnumColor) -> b
    M:net.minecraft.world.level.block.BlockLeaves leaves(net.minecraft.world.level.block.SoundEffectType) -> a
    M:net.minecraft.world.level.block.BlockShulkerBox shulkerBox(net.minecraft.world.item.EnumColor,net.minecraft.world.level.block.state.BlockBase$Info) -> a
    M:net.minecraft.world.level.block.piston.BlockPiston pistonBase(boolean) -> a
    M:net.minecraft.world.level.block.Block register(java.lang.String,net.minecraft.world.level.block.Block) -> a
    M:void rebuildCache() -> a
net.minecraft.world.level.block.BonemealableBlock -> ciy -> net.minecraft.world.level.block.IBlockFragilePlantElement
net.minecraft.world.level.block.BrewingStandBlock -> ciz -> net.minecraft.world.level.block.BlockBrewingStand
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.BubbleColumnBlock -> cja -> net.minecraft.world.level.block.BlockBubbleColumn
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean DRAG_DOWN -> a
    F:int CHECK_PERIOD -> b
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void updateColumn(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void updateColumn(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean canExistIn(net.minecraft.world.level.block.state.IBlockData) -> h
    M:net.minecraft.world.level.block.state.IBlockData getColumnState(net.minecraft.world.level.block.state.IBlockData) -> n
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.item.ItemStack pickupBlock(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> c
net.minecraft.world.level.block.BucketPickup -> cjb -> net.minecraft.world.level.block.IFluidSource
net.minecraft.world.level.block.BuddingAmethystBlock -> cjc -> net.minecraft.world.level.block.BuddingAmethystBlock
    F:int GROWTH_CHANCE -> a
    M:net.minecraft.world.level.material.EnumPistonReaction getPistonPushReaction(net.minecraft.world.level.block.state.IBlockData) -> d
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean canClusterGrowAtState(net.minecraft.world.level.block.state.IBlockData) -> g
net.minecraft.world.level.block.BushBlock -> cjd -> net.minecraft.world.level.block.BlockPlant
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> c
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.ButtonBlock -> cje -> net.minecraft.world.level.block.BlockButtonAbstract
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean POWERED -> a
    F:int HALF_AABB_HEIGHT -> b
    F:int HALF_AABB_WIDTH -> c
    F:net.minecraft.world.phys.shapes.VoxelShape CEILING_AABB_X -> d
    F:net.minecraft.world.phys.shapes.VoxelShape CEILING_AABB_Z -> e
    F:net.minecraft.world.phys.shapes.VoxelShape FLOOR_AABB_X -> f
    F:net.minecraft.world.phys.shapes.VoxelShape FLOOR_AABB_Z -> g
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> h
    F:net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> i
    F:net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> j
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> k
    F:net.minecraft.world.phys.shapes.VoxelShape PRESSED_CEILING_AABB_X -> l
    F:net.minecraft.world.phys.shapes.VoxelShape PRESSED_CEILING_AABB_Z -> m
    F:net.minecraft.world.phys.shapes.VoxelShape PRESSED_FLOOR_AABB_X -> n
    M:int getPressDuration() -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void press(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> d
    M:void playSound(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,boolean) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:int getDirectSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:void checkPressed(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> e
    M:void updateNeighbours(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> f
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.CactusBlock -> cjf -> net.minecraft.world.level.block.BlockCactus
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE -> a
    F:int MAX_AGE -> b
    F:int AABB_OFFSET -> c
    F:net.minecraft.world.phys.shapes.VoxelShape COLLISION_SHAPE -> d
    F:net.minecraft.world.phys.shapes.VoxelShape OUTLINE_SHAPE -> e
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.CakeBlock -> cjg -> net.minecraft.world.level.block.BlockCake
    F:int MAX_BITES -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger BITES -> b
    F:int FULL_CAKE_SIGNAL -> c
    F:float AABB_OFFSET -> d
    F:float AABB_SIZE_PER_BITE -> e
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.EnumInteractionResult eat(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:int getOutputSignal(int) -> b
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.CampfireBlock -> cjh -> net.minecraft.world.level.block.BlockCampfire
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean LIT -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean SIGNAL_FIRE -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> e
    F:net.minecraft.world.phys.shapes.VoxelShape VIRTUAL_FENCE_POST -> f
    F:int SMOKE_DISTANCE -> g
    F:boolean spawnParticles -> h
    F:int fireDamage -> i
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean isSmokeSource(net.minecraft.world.level.block.state.IBlockData) -> n
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void dowse(net.minecraft.world.entity.Entity,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean placeLiquid(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.Fluid) -> a
    M:void onProjectileHit(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.MovingObjectPositionBlock,net.minecraft.world.entity.projectile.IProjectile) -> a
    M:void makeParticles(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,boolean,boolean) -> a
    M:boolean isSmokeyPos(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:boolean isLitCampfire(net.minecraft.world.level.block.state.IBlockData) -> g
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:boolean canLight(net.minecraft.world.level.block.state.IBlockData) -> h
net.minecraft.world.level.block.CandleBlock -> cji -> net.minecraft.world.level.block.CandleBlock
    F:int MIN_CANDLES -> c
    F:int MAX_CANDLES -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger CANDLES -> e
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean LIT -> f
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> g
    F:java.util.function.ToIntFunction LIGHT_EMISSION -> h
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap PARTICLE_OFFSETS -> i
    F:net.minecraft.world.phys.shapes.VoxelShape ONE_AABB -> j
    F:net.minecraft.world.phys.shapes.VoxelShape TWO_AABB -> k
    F:net.minecraft.world.phys.shapes.VoxelShape THREE_AABB -> l
    F:net.minecraft.world.phys.shapes.VoxelShape FOUR_AABB -> m
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:boolean canBeReplaced(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean placeLiquid(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.Fluid) -> a
    M:boolean canLight(net.minecraft.world.level.block.state.IBlockData) -> g
    M:java.lang.Iterable getParticleOffsets(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean canBeLit(net.minecraft.world.level.block.state.IBlockData) -> c
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.block.CandleCakeBlock -> cjj -> net.minecraft.world.level.block.CandleCakeBlock
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean LIT -> c
    F:float AABB_OFFSET -> d
    F:net.minecraft.world.phys.shapes.VoxelShape CAKE_SHAPE -> e
    F:net.minecraft.world.phys.shapes.VoxelShape CANDLE_SHAPE -> f
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> g
    F:java.util.Map BY_CANDLE -> h
    F:java.lang.Iterable PARTICLE_OFFSETS -> i
    M:java.lang.Iterable getParticleOffsets(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:boolean candleHit(net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:net.minecraft.world.level.block.state.IBlockData byCandle(net.minecraft.world.level.block.Block) -> a
    M:boolean canLight(net.minecraft.world.level.block.state.IBlockData) -> g
net.minecraft.world.level.block.CarpetBlock -> cjk -> net.minecraft.world.level.block.CarpetBlock
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.block.CarrotBlock -> cjl -> net.minecraft.world.level.block.BlockCarrots
    M:net.minecraft.world.level.IMaterial getBaseSeedId() -> d
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
net.minecraft.world.level.block.CartographyTableBlock -> cjm -> net.minecraft.world.level.block.BlockCartographyTable
    F:net.minecraft.network.chat.IChatBaseComponent CONTAINER_TITLE -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.ITileInventory getMenuProvider(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
net.minecraft.world.level.block.CarvedPumpkinBlock -> cjn -> net.minecraft.world.level.block.BlockPumpkinCarved
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:net.minecraft.world.level.block.state.pattern.ShapeDetector snowGolemBase -> b
    F:net.minecraft.world.level.block.state.pattern.ShapeDetector snowGolemFull -> c
    F:net.minecraft.world.level.block.state.pattern.ShapeDetector ironGolemBase -> d
    F:net.minecraft.world.level.block.state.pattern.ShapeDetector ironGolemFull -> e
    F:java.util.function.Predicate PUMPKINS_PREDICATE -> f
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:boolean canSpawnGolem(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void trySpawnGolem(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.pattern.ShapeDetector getOrCreateSnowGolemBase() -> b
    M:net.minecraft.world.level.block.state.pattern.ShapeDetector getOrCreateSnowGolemFull() -> q
    M:net.minecraft.world.level.block.state.pattern.ShapeDetector getOrCreateIronGolemBase() -> u
    M:net.minecraft.world.level.block.state.pattern.ShapeDetector getOrCreateIronGolemFull() -> v
net.minecraft.world.level.block.CauldronBlock -> cjo -> net.minecraft.world.level.block.BlockCauldron
    F:float RAIN_FILL_CHANCE -> c
    F:float POWDER_SNOW_FILL_CHANCE -> d
    M:boolean isFull(net.minecraft.world.level.block.state.IBlockData) -> c
    M:boolean shouldHandlePrecipitation(net.minecraft.world.level.World,net.minecraft.world.level.biome.BiomeBase$Precipitation) -> a
    M:void handlePrecipitation(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.biome.BiomeBase$Precipitation) -> a
    M:boolean canReceiveStalactiteDrip(net.minecraft.world.level.material.FluidType) -> a
    M:void receiveStalactiteDrip(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.FluidType) -> a
net.minecraft.world.level.block.CaveVines -> cjp -> net.minecraft.world.level.block.CaveVines
    M:boolean hasGlowBerries(net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.CaveVinesBlock -> cjq -> net.minecraft.world.level.block.CaveVinesBlock
    F:float CHANCE_OF_BERRIES_ON_GROWTH -> f
    M:int getBlocksToGrowWhenBonemealed(net.minecraft.util.RandomSource) -> a
    M:boolean canGrowInto(net.minecraft.world.level.block.state.IBlockData) -> g
    M:net.minecraft.world.level.block.Block getBodyBlock() -> b
    M:net.minecraft.world.level.block.state.IBlockData updateBodyAfterConvertedFromHead(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData getGrowIntoState(net.minecraft.world.level.block.state.IBlockData,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.CaveVinesPlantBlock -> cjr -> net.minecraft.world.level.block.CaveVinesPlantBlock
    M:net.minecraft.world.level.block.BlockGrowingTop getHeadBlock() -> c
    M:net.minecraft.world.level.block.state.IBlockData updateHeadAfterConvertedFromBody(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.ChainBlock -> cjs -> net.minecraft.world.level.block.BlockChain
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> a
    F:float AABB_MIN -> b
    F:float AABB_MAX -> c
    F:net.minecraft.world.phys.shapes.VoxelShape Y_AXIS_AABB -> d
    F:net.minecraft.world.phys.shapes.VoxelShape Z_AXIS_AABB -> e
    F:net.minecraft.world.phys.shapes.VoxelShape X_AXIS_AABB -> f
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.ChangeOverTimeBlock -> cjt -> net.minecraft.world.level.block.ChangeOverTimeBlock
    M:void applyChangeOverTime(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> c
net.minecraft.world.level.block.ChestBlock -> cju -> net.minecraft.world.level.block.BlockChest
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum TYPE -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> d
    F:int EVENT_SET_OPEN_COUNT -> e
    F:int AABB_OFFSET -> f
    F:int AABB_HEIGHT -> g
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> h
    F:net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> i
    F:net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> j
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> k
    F:net.minecraft.world.phys.shapes.VoxelShape AABB -> l
    F:net.minecraft.world.level.block.DoubleBlockFinder$Combiner CHEST_COMBINER -> m
    F:net.minecraft.world.level.block.DoubleBlockFinder$Combiner MENU_PROVIDER_COMBINER -> n
    M:net.minecraft.world.level.block.DoubleBlockFinder$BlockType getBlockType(net.minecraft.world.level.block.state.IBlockData) -> g
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.core.EnumDirection getConnectedDirection(net.minecraft.world.level.block.state.IBlockData) -> h
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.core.EnumDirection candidatePartnerFacing(net.minecraft.world.item.context.BlockActionContext,net.minecraft.core.EnumDirection) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.stats.Statistic getOpenChestStat() -> c
    M:net.minecraft.world.level.block.entity.TileEntityTypes blockEntityType() -> d
    M:net.minecraft.world.IInventory getContainer(net.minecraft.world.level.block.BlockChest,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,boolean) -> a
    M:net.minecraft.world.level.block.DoubleBlockFinder$Result combine(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,boolean) -> a
    M:net.minecraft.world.ITileInventory getMenuProvider(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.level.block.DoubleBlockFinder$Combiner opennessCombiner(net.minecraft.world.level.block.entity.LidBlockEntity) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:boolean isChestBlockedAt(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:boolean isBlockedChestByBlock(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:boolean isCatSittingOnChest(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> b
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:java.util.Optional acceptDouble(net.minecraft.world.level.block.entity.TileEntityChest,net.minecraft.world.level.block.entity.TileEntityChest) -> a
    M:java.util.Optional acceptSingle(net.minecraft.world.level.block.entity.TileEntityChest) -> a
    M:java.util.Optional acceptNone() -> a
    M:java.lang.Object acceptNone() -> b
    M:java.lang.Object acceptSingle(java.lang.Object) -> a
    M:java.lang.Object acceptDouble(java.lang.Object,java.lang.Object) -> a
    M:java.util.Optional acceptDouble(net.minecraft.world.level.block.entity.TileEntityChest,net.minecraft.world.level.block.entity.TileEntityChest) -> a
    M:java.util.Optional acceptSingle(net.minecraft.world.level.block.entity.TileEntityChest) -> a
    M:java.util.Optional acceptNone() -> a
    M:java.lang.Object acceptNone() -> b
    M:java.lang.Object acceptSingle(java.lang.Object) -> a
    M:java.lang.Object acceptDouble(java.lang.Object,java.lang.Object) -> a
    M:it.unimi.dsi.fastutil.floats.Float2FloatFunction acceptDouble(net.minecraft.world.level.block.entity.TileEntityChest,net.minecraft.world.level.block.entity.TileEntityChest) -> a
    M:it.unimi.dsi.fastutil.floats.Float2FloatFunction acceptSingle(net.minecraft.world.level.block.entity.TileEntityChest) -> a
    M:it.unimi.dsi.fastutil.floats.Float2FloatFunction acceptNone() -> a
    M:java.lang.Object acceptNone() -> b
    M:java.lang.Object acceptSingle(java.lang.Object) -> a
    M:java.lang.Object acceptDouble(java.lang.Object,java.lang.Object) -> a
net.minecraft.world.level.block.ChorusFlowerBlock -> cjv -> net.minecraft.world.level.block.BlockChorusFlower
    F:int DEAD_AGE -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE -> b
    F:net.minecraft.world.level.block.BlockChorusFruit plant -> c
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:void placeGrownFlower(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,int) -> a
    M:void placeDeadFlower(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:boolean allNeighborsEmpty(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:void generatePlant(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource,int) -> a
    M:void growTreeRecursive(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,int,int) -> a
    M:void onProjectileHit(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.MovingObjectPositionBlock,net.minecraft.world.entity.projectile.IProjectile) -> a
net.minecraft.world.level.block.ChorusPlantBlock -> cjw -> net.minecraft.world.level.block.BlockChorusFruit
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.CocoaBlock -> cjx -> net.minecraft.world.level.block.BlockCocoa
    F:int MAX_AGE -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE -> b
    F:int AGE_0_WIDTH -> c
    F:int AGE_0_HEIGHT -> d
    F:int AGE_0_HALFWIDTH -> e
    F:int AGE_1_WIDTH -> f
    F:int AGE_1_HEIGHT -> g
    F:int AGE_1_HALFWIDTH -> h
    F:int AGE_2_WIDTH -> i
    F:int AGE_2_HEIGHT -> j
    F:int AGE_2_HALFWIDTH -> k
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.CommandBlock -> cjy -> net.minecraft.world.level.block.BlockCommand
    F:org.slf4j.Logger LOGGER -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean CONDITIONAL -> b
    F:boolean automatic -> d
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void execute(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.CommandBlockListenerAbstract,boolean) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void executeChain(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
net.minecraft.world.level.block.ComparatorBlock -> cjz -> net.minecraft.world.level.block.BlockRedstoneComparator
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum MODE -> a
    M:int getDelay(net.minecraft.world.level.block.state.IBlockData) -> g
    M:int getOutputSignal(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:int calculateOutputSignal(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> e
    M:boolean shouldTurnOn(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:int getInputSignal(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:net.minecraft.world.entity.decoration.EntityItemFrame getItemFrame(net.minecraft.world.level.World,net.minecraft.core.EnumDirection,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void checkTickOnNeighbor(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> c
    M:void refreshOutputState(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> f
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean triggerEvent(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,int,int) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.ComposterBlock -> cka -> net.minecraft.world.level.block.BlockComposter
    F:int READY -> a
    F:int MIN_LEVEL -> b
    F:int MAX_LEVEL -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger LEVEL -> d
    F:it.unimi.dsi.fastutil.objects.Object2FloatMap COMPOSTABLES -> e
    F:int AABB_SIDE_THICKNESS -> f
    F:net.minecraft.world.phys.shapes.VoxelShape OUTER_SHAPE -> g
    M:void bootStrap() -> b
    M:void add(float,net.minecraft.world.level.IMaterial) -> a
    M:void handleFill(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,boolean) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getInteractionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.level.block.state.IBlockData insertItem(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.world.item.ItemStack,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData extractProduce(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> d
    M:net.minecraft.world.level.block.state.IBlockData empty(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> c
    M:net.minecraft.world.level.block.state.IBlockData addItem(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:net.minecraft.world.IWorldInventory getContainer(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.block.ComposterBlock$EmptyContainer -> cka$a -> net.minecraft.world.level.block.BlockComposter$ContainerEmpty
    M:boolean canPlaceItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.EnumDirection) -> a
    M:boolean canTakeItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.EnumDirection) -> b
net.minecraft.world.level.block.ComposterBlock$InputContainer -> cka$b -> net.minecraft.world.level.block.BlockComposter$ContainerInput
    F:net.minecraft.world.level.block.state.IBlockData state -> b
    F:net.minecraft.world.level.GeneratorAccess level -> c
    F:net.minecraft.core.BlockPosition pos -> d
    F:boolean changed -> e
    M:boolean canPlaceItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.EnumDirection) -> a
    M:boolean canTakeItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.EnumDirection) -> b
    M:void setChanged() -> e
net.minecraft.world.level.block.ComposterBlock$OutputContainer -> cka$c -> net.minecraft.world.level.block.BlockComposter$ContainerOutput
    F:net.minecraft.world.level.block.state.IBlockData state -> b
    F:net.minecraft.world.level.GeneratorAccess level -> c
    F:net.minecraft.core.BlockPosition pos -> d
    F:boolean changed -> e
    M:boolean canPlaceItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.EnumDirection) -> a
    M:boolean canTakeItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.EnumDirection) -> b
    M:void setChanged() -> e
net.minecraft.world.level.block.ConcretePowderBlock -> ckb -> net.minecraft.world.level.block.BlockConcretePowder
    F:net.minecraft.world.level.block.state.IBlockData concrete -> a
    M:void onLand(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.item.EntityFallingBlock) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:boolean shouldSolidify(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:boolean touchesLiquid(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:boolean canSolidify(net.minecraft.world.level.block.state.IBlockData) -> n
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:int getDustColor(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
net.minecraft.world.level.block.ConduitBlock -> ckc -> net.minecraft.world.level.block.BlockConduit
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> a
    F:int SIZE -> c
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.CoralBlock -> ckd -> net.minecraft.world.level.block.BlockCoral
    F:net.minecraft.world.level.block.Block deadBlock -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean scanForWater(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
net.minecraft.world.level.block.CoralFanBlock -> cke -> net.minecraft.world.level.block.BlockCoralFan
    F:net.minecraft.world.level.block.Block deadBlock -> a
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.block.CoralPlantBlock -> ckf -> net.minecraft.world.level.block.BlockCoralPlant
    F:net.minecraft.world.level.block.Block deadBlock -> d
    F:float AABB_OFFSET -> a
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
net.minecraft.world.level.block.CoralWallFanBlock -> ckg -> net.minecraft.world.level.block.BlockCoralFanWall
    F:net.minecraft.world.level.block.Block deadBlock -> b
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.block.CraftingTableBlock -> ckh -> net.minecraft.world.level.block.BlockWorkbench
    F:net.minecraft.network.chat.IChatBaseComponent CONTAINER_TITLE -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.ITileInventory getMenuProvider(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
net.minecraft.world.level.block.CropBlock -> cki -> net.minecraft.world.level.block.BlockCrops
    F:int MAX_AGE -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE -> d
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
    M:net.minecraft.world.level.block.state.properties.BlockStateInteger getAgeProperty() -> b
    M:int getMaxAge() -> c
    M:int getAge(net.minecraft.world.level.block.state.IBlockData) -> g
    M:net.minecraft.world.level.block.state.IBlockData getStateForAge(int) -> b
    M:boolean isMaxAge(net.minecraft.world.level.block.state.IBlockData) -> h
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:void growCrops(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:int getBonemealAgeIncrease(net.minecraft.world.level.World) -> a
    M:float getGrowthSpeed(net.minecraft.world.level.block.Block,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.level.IMaterial getBaseSeedId() -> d
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.CrossCollisionBlock -> ckj -> net.minecraft.world.level.block.BlockTall
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean NORTH -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean EAST -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean SOUTH -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WEST -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> e
    F:java.util.Map PROPERTY_BY_DIRECTION -> f
    F:it.unimi.dsi.fastutil.objects.Object2IntMap stateToIndex -> i
    M:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:int indexFor(net.minecraft.core.EnumDirection) -> a
    M:int getAABBIndex(net.minecraft.world.level.block.state.IBlockData) -> g
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
net.minecraft.world.level.block.CryingObsidianBlock -> ckk -> net.minecraft.world.level.block.BlockCryingObsidian
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.block.DaylightDetectorBlock -> ckl -> net.minecraft.world.level.block.BlockDaylightDetector
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger POWER -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean INVERTED -> b
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:void updateSignalStrength(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> d
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:void tickEntity(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityLightDetector) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.DeadBushBlock -> ckm -> net.minecraft.world.level.block.BlockDeadBush
    F:float AABB_OFFSET -> a
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
net.minecraft.world.level.block.DetectorRailBlock -> ckn -> net.minecraft.world.level.block.BlockMinecartDetector
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum SHAPE -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean POWERED -> e
    F:int PRESSED_CHECK_PERIOD -> f
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:int getDirectSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:void checkPressed(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void updatePowerToConnected(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:net.minecraft.world.level.block.state.properties.IBlockState getShapeProperty() -> c
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:java.util.List getInteractingMinecartOfType(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,java.lang.Class,java.util.function.Predicate) -> a
    M:net.minecraft.world.phys.AxisAlignedBB getSearchBB(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.DiodeBlock -> cko -> net.minecraft.world.level.block.BlockDiodeAbstract
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean POWERED -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:int getDirectSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void checkTickOnNeighbor(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> c
    M:boolean isLocked(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean shouldTurnOn(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:int getInputSignal(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:int getAlternateSignal(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:int getAlternateSignalAt(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void updateNeighborsInFront(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> d
    M:boolean isAlternateInput(net.minecraft.world.level.block.state.IBlockData) -> h
    M:int getOutputSignal(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:boolean isDiode(net.minecraft.world.level.block.state.IBlockData) -> n
    M:boolean shouldPrioritize(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> c
net.minecraft.world.level.block.DirectionalBlock -> ckp -> net.minecraft.world.level.block.BlockDirectional
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
net.minecraft.world.level.block.DirtPathBlock -> ckq -> net.minecraft.world.level.block.BlockGrassPath
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.DispenserBlock -> ckr -> net.minecraft.world.level.block.BlockDispenser
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean TRIGGERED -> b
    F:java.util.Map DISPENSER_REGISTRY -> c
    F:int TRIGGER_DURATION -> d
    M:void registerBehavior(net.minecraft.world.level.IMaterial,net.minecraft.core.dispenser.IDispenseBehavior) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void dispenseFrom(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.dispenser.IDispenseBehavior getDispenseMethod(net.minecraft.world.item.ItemStack) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:net.minecraft.core.IPosition getDispensePosition(net.minecraft.core.ISourceBlock) -> a
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.DoorBlock -> cks -> net.minecraft.world.level.block.BlockDoor
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean OPEN -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum HINGE -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean POWERED -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum HALF -> e
    F:float AABB_DOOR_THICKNESS -> f
    F:net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> g
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> h
    F:net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> i
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> j
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void playerWillDestroy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:int getCloseSound() -> b
    M:int getOpenSound() -> q
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.level.block.state.properties.BlockPropertyDoorHinge getHinge(net.minecraft.world.item.context.BlockActionContext) -> b
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:boolean isOpen(net.minecraft.world.level.block.state.IBlockData) -> h
    M:void setOpen(net.minecraft.world.entity.Entity,net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,boolean) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void playSound(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,boolean) -> a
    M:net.minecraft.world.level.material.EnumPistonReaction getPistonPushReaction(net.minecraft.world.level.block.state.IBlockData) -> d
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:long getSeed(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isWoodenDoor(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:boolean isWoodenDoor(net.minecraft.world.level.block.state.IBlockData) -> n
net.minecraft.world.level.block.DoubleBlockCombiner -> ckt -> net.minecraft.world.level.block.DoubleBlockFinder
    M:net.minecraft.world.level.block.DoubleBlockFinder$Result combineWithNeigbour(net.minecraft.world.level.block.entity.TileEntityTypes,java.util.function.Function,java.util.function.Function,net.minecraft.world.level.block.state.properties.BlockStateDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,java.util.function.BiPredicate) -> a
net.minecraft.world.level.block.DoubleBlockCombiner$BlockType -> ckt$a -> net.minecraft.world.level.block.DoubleBlockFinder$BlockType
    F:net.minecraft.world.level.block.DoubleBlockFinder$BlockType SINGLE -> a
    F:net.minecraft.world.level.block.DoubleBlockFinder$BlockType FIRST -> b
    F:net.minecraft.world.level.block.DoubleBlockFinder$BlockType SECOND -> c
net.minecraft.world.level.block.DoubleBlockCombiner$Combiner -> ckt$b -> net.minecraft.world.level.block.DoubleBlockFinder$Combiner
net.minecraft.world.level.block.DoubleBlockCombiner$NeighborCombineResult -> ckt$c -> net.minecraft.world.level.block.DoubleBlockFinder$Result
net.minecraft.world.level.block.DoubleBlockCombiner$NeighborCombineResult$Double -> ckt$c$a -> net.minecraft.world.level.block.DoubleBlockFinder$Result$Double
    F:java.lang.Object first -> a
    F:java.lang.Object second -> b
    M:java.lang.Object apply(net.minecraft.world.level.block.DoubleBlockFinder$Combiner) -> apply
net.minecraft.world.level.block.DoubleBlockCombiner$NeighborCombineResult$Single -> ckt$c$b -> net.minecraft.world.level.block.DoubleBlockFinder$Result$Single
    F:java.lang.Object single -> a
    M:java.lang.Object apply(net.minecraft.world.level.block.DoubleBlockFinder$Combiner) -> apply
net.minecraft.world.level.block.DoublePlantBlock -> cku -> net.minecraft.world.level.block.BlockTallPlant
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum HALF -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void placeAt(net.minecraft.world.level.GeneratorAccess,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,int) -> a
    M:net.minecraft.world.level.block.state.IBlockData copyWaterloggedFrom(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void playerWillDestroy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void playerDestroy(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntity,net.minecraft.world.item.ItemStack) -> a
    M:void preventCreativeDropFromBottomPart(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.player.EntityHuman) -> b
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:long getSeed(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.block.DragonEggBlock -> ckv -> net.minecraft.world.level.block.BlockDragonEgg
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void attack(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void teleport(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> d
    M:int getDelayAfterPlace() -> c
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.DropExperienceBlock -> ckw -> net.minecraft.world.level.block.DropExperienceBlock
    F:net.minecraft.util.valueproviders.IntProvider xpRange -> a
    M:void spawnAfterBreak(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack,boolean) -> a
net.minecraft.world.level.block.DropperBlock -> ckx -> net.minecraft.world.level.block.BlockDropper
    F:net.minecraft.core.dispenser.IDispenseBehavior DISPENSE_BEHAVIOUR -> c
    M:net.minecraft.core.dispenser.IDispenseBehavior getDispenseMethod(net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void dispenseFrom(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.block.EnchantmentTableBlock -> cky -> net.minecraft.world.level.block.BlockEnchantmentTable
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    F:java.util.List BOOKSHELF_OFFSETS -> b
    M:boolean isValidBookShelf(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.ITileInventory getMenuProvider(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.EndGatewayBlock -> ckz -> net.minecraft.world.level.block.BlockEndGateway
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean canBeReplaced(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.FluidType) -> a
net.minecraft.world.level.block.EndPortalBlock -> cla -> net.minecraft.world.level.block.BlockEnderPortal
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean canBeReplaced(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.FluidType) -> a
net.minecraft.world.level.block.EndPortalFrameBlock -> clb -> net.minecraft.world.level.block.BlockEnderPortalFrame
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean HAS_EYE -> b
    F:net.minecraft.world.phys.shapes.VoxelShape BASE_SHAPE -> c
    F:net.minecraft.world.phys.shapes.VoxelShape EYE_SHAPE -> d
    F:net.minecraft.world.phys.shapes.VoxelShape FULL_SHAPE -> e
    F:net.minecraft.world.level.block.state.pattern.ShapeDetector portalShape -> f
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.pattern.ShapeDetector getOrCreatePortalShape() -> b
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.EndRodBlock -> clc -> net.minecraft.world.level.block.BlockEndRod
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.material.EnumPistonReaction getPistonPushReaction(net.minecraft.world.level.block.state.IBlockData) -> d
net.minecraft.world.level.block.EnderChestBlock -> cld -> net.minecraft.world.level.block.BlockEnderChest
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> c
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> d
    F:net.minecraft.network.chat.IChatBaseComponent CONTAINER_TITLE -> e
    M:net.minecraft.world.level.block.DoubleBlockFinder$Result combine(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,boolean) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.block.EntityBlock -> cle -> net.minecraft.world.level.block.ITileEntity
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:net.minecraft.world.level.gameevent.GameEventListener getListener(net.minecraft.server.level.WorldServer,net.minecraft.world.level.block.entity.TileEntity) -> a
net.minecraft.world.level.block.FaceAttachedHorizontalDirectionalBlock -> clf -> net.minecraft.world.level.block.BlockAttachable
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:boolean canAttach(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.EnumDirection getConnectedDirection(net.minecraft.world.level.block.state.IBlockData) -> h
net.minecraft.world.level.block.Fallable -> clg -> net.minecraft.world.level.block.Fallable
    M:void onLand(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.item.EntityFallingBlock) -> a
    M:void onBrokenAfterFall(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.item.EntityFallingBlock) -> a
    M:net.minecraft.world.damagesource.DamageSource getFallDamageSource() -> b
net.minecraft.world.level.block.FallingBlock -> clh -> net.minecraft.world.level.block.BlockFalling
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void falling(net.minecraft.world.entity.item.EntityFallingBlock) -> a
    M:int getDelayAfterPlace() -> c
    M:boolean isFree(net.minecraft.world.level.block.state.IBlockData) -> h
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:int getDustColor(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
net.minecraft.world.level.block.FarmBlock -> cli -> net.minecraft.world.level.block.BlockSoil
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger MOISTURE -> a
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    F:int MAX_MOISTURE -> c
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:void fallOn(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity,float) -> a
    M:void turnToDirt(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> d
    M:boolean isUnderCrops(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:boolean isNearWater(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.FenceBlock -> clj -> net.minecraft.world.level.block.BlockFence
    M:net.minecraft.world.phys.shapes.VoxelShape getVisualShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> b
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:boolean connectsTo(net.minecraft.world.level.block.state.IBlockData,boolean,net.minecraft.core.EnumDirection) -> a
    M:boolean isSameFence(net.minecraft.world.level.block.state.IBlockData) -> h
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.FenceGateBlock -> clk -> net.minecraft.world.level.block.BlockFenceGate
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean OPEN -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean POWERED -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean IN_WALL -> c
    F:net.minecraft.world.phys.shapes.VoxelShape Z_SHAPE -> d
    F:net.minecraft.world.phys.shapes.VoxelShape X_SHAPE -> e
    F:net.minecraft.world.phys.shapes.VoxelShape Z_SHAPE_LOW -> f
    F:net.minecraft.world.phys.shapes.VoxelShape X_SHAPE_LOW -> g
    F:net.minecraft.world.phys.shapes.VoxelShape Z_COLLISION_SHAPE -> h
    F:net.minecraft.world.phys.shapes.VoxelShape X_COLLISION_SHAPE -> i
    F:net.minecraft.world.phys.shapes.VoxelShape Z_OCCLUSION_SHAPE -> j
    F:net.minecraft.world.phys.shapes.VoxelShape X_OCCLUSION_SHAPE -> k
    F:net.minecraft.world.phys.shapes.VoxelShape Z_OCCLUSION_SHAPE_LOW -> l
    F:net.minecraft.world.phys.shapes.VoxelShape X_OCCLUSION_SHAPE_LOW -> m
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:boolean isWall(net.minecraft.world.level.block.state.IBlockData) -> h
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean connectsToDirection(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection) -> a
net.minecraft.world.level.block.FireBlock -> cll -> net.minecraft.world.level.block.BlockFire
    F:int MAX_AGE -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean NORTH -> e
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean EAST -> f
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean SOUTH -> g
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WEST -> h
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean UP -> i
    F:java.util.Map PROPERTY_BY_DIRECTION -> j
    F:net.minecraft.world.phys.shapes.VoxelShape UP_AABB -> k
    F:net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> l
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> m
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> n
    M:net.minecraft.world.phys.shapes.VoxelShape calculateShape(net.minecraft.world.level.block.state.IBlockData) -> h
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean isNearRain(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:int getBurnOdds(net.minecraft.world.level.block.state.IBlockData) -> n
    M:int getIgniteOdds(net.minecraft.world.level.block.state.IBlockData) -> o
    M:void checkBurnOut(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,int,net.minecraft.util.RandomSource,int) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateWithAge(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,int) -> a
    M:boolean isValidFireLocation(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
    M:int getIgniteOdds(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:boolean canBurn(net.minecraft.world.level.block.state.IBlockData) -> f
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:int getFireTickDelay(net.minecraft.util.RandomSource) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:void setFlammable(net.minecraft.world.level.block.Block,int,int) -> a
    M:void bootStrap() -> b
net.minecraft.world.level.block.FletchingTableBlock -> clm -> net.minecraft.world.level.block.BlockFletchingTable
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
net.minecraft.world.level.block.FlowerBlock -> cln -> net.minecraft.world.level.block.BlockFlowers
    F:float AABB_OFFSET -> a
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    F:net.minecraft.world.effect.MobEffectList suspiciousStewEffect -> c
    F:int effectDuration -> d
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.effect.MobEffectList getSuspiciousStewEffect() -> b
    M:int getEffectDuration() -> c
net.minecraft.world.level.block.FlowerPotBlock -> clo -> net.minecraft.world.level.block.BlockFlowerPot
    F:java.util.Map POTTED_BY_CONTENT -> c
    F:float AABB_SIZE -> a
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    F:net.minecraft.world.level.block.Block content -> d
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isEmpty() -> q
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.Block getContent() -> b
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.FrogspawnBlock -> clp -> net.minecraft.world.level.block.FrogspawnBlock
    F:int MIN_TADPOLES_SPAWN -> b
    F:int MAX_TADPOLES_SPAWN -> c
    F:int DEFAULT_MIN_HATCH_TICK_DELAY -> d
    F:int DEFAULT_MAX_HATCH_TICK_DELAY -> e
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    F:int minHatchTickDelay -> f
    F:int maxHatchTickDelay -> g
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:int getFrogspawnHatchDelay(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:boolean mayPlaceOn(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:void hatchFrogspawn(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void destroyBlock(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void spawnTadpoles(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:double getRandomTadpolePositionOffset(net.minecraft.util.RandomSource) -> b
    M:void setHatchDelay(int,int) -> a
    M:void setDefaultHatchDelay() -> b
net.minecraft.world.level.block.FrostedIceBlock -> clq -> net.minecraft.world.level.block.BlockIceFrost
    F:int MAX_AGE -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE -> b
    F:int NEIGHBORS_TO_AGE -> c
    F:int NEIGHBORS_TO_MELT -> d
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean slightlyMelt(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> e
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:boolean fewerNeigboursThan(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,int) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.FungusBlock -> clr -> net.minecraft.world.level.block.BlockFungi
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    F:double BONEMEAL_SUCCESS_PROBABILITY -> b
    F:java.util.function.Supplier feature -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.FurnaceBlock -> cls -> net.minecraft.world.level.block.BlockFurnaceFurace
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:void openContainer(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.block.GameMasterBlock -> clt -> net.minecraft.world.level.block.GameMasterBlock
net.minecraft.world.level.block.GlassBlock -> clu -> net.minecraft.world.level.block.BlockGlass
net.minecraft.world.level.block.GlazedTerracottaBlock -> clv -> net.minecraft.world.level.block.BlockGlazedTerracotta
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.material.EnumPistonReaction getPistonPushReaction(net.minecraft.world.level.block.state.IBlockData) -> d
net.minecraft.world.level.block.GlowLichenBlock -> clw -> net.minecraft.world.level.block.GlowLichenBlock
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> b
    F:net.minecraft.world.level.block.MultifaceSpreader spreader -> c
    M:java.util.function.ToIntFunction emission(int) -> b
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canBeReplaced(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.context.BlockActionContext) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> c
    M:net.minecraft.world.level.block.MultifaceSpreader getSpreader() -> c
net.minecraft.world.level.block.GrassBlock -> clx -> net.minecraft.world.level.block.BlockGrass
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.GravelBlock -> cly -> net.minecraft.world.level.block.BlockGravel
    M:int getDustColor(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
net.minecraft.world.level.block.GrindstoneBlock -> clz -> net.minecraft.world.level.block.BlockGrindstone
    F:net.minecraft.world.phys.shapes.VoxelShape FLOOR_NORTH_SOUTH_LEFT_POST -> a
    F:net.minecraft.world.phys.shapes.VoxelShape FLOOR_NORTH_SOUTH_RIGHT_POST -> b
    F:net.minecraft.world.phys.shapes.VoxelShape FLOOR_NORTH_SOUTH_LEFT_PIVOT -> c
    F:net.minecraft.world.phys.shapes.VoxelShape FLOOR_NORTH_SOUTH_RIGHT_PIVOT -> d
    F:net.minecraft.world.phys.shapes.VoxelShape FLOOR_NORTH_SOUTH_LEFT_LEG -> e
    F:net.minecraft.world.phys.shapes.VoxelShape FLOOR_NORTH_SOUTH_RIGHT_LEG -> f
    F:net.minecraft.world.phys.shapes.VoxelShape FLOOR_NORTH_SOUTH_ALL_LEGS -> g
    F:net.minecraft.world.phys.shapes.VoxelShape FLOOR_NORTH_SOUTH_GRINDSTONE -> h
    F:net.minecraft.world.phys.shapes.VoxelShape FLOOR_EAST_WEST_LEFT_POST -> i
    F:net.minecraft.world.phys.shapes.VoxelShape FLOOR_EAST_WEST_RIGHT_POST -> j
    F:net.minecraft.world.phys.shapes.VoxelShape FLOOR_EAST_WEST_LEFT_PIVOT -> k
    F:net.minecraft.world.phys.shapes.VoxelShape FLOOR_EAST_WEST_RIGHT_PIVOT -> l
    F:net.minecraft.world.phys.shapes.VoxelShape FLOOR_EAST_WEST_LEFT_LEG -> m
    F:net.minecraft.world.phys.shapes.VoxelShape FLOOR_EAST_WEST_RIGHT_LEG -> n
    F:net.minecraft.world.phys.shapes.VoxelShape WALL_WEST_RIGHT_PIVOT -> aa
    F:net.minecraft.world.phys.shapes.VoxelShape WALL_WEST_LEFT_LEG -> ab
    F:net.minecraft.world.phys.shapes.VoxelShape WALL_WEST_RIGHT_LEG -> ac
    F:net.minecraft.world.phys.shapes.VoxelShape WALL_WEST_ALL_LEGS -> ad
    F:net.minecraft.world.phys.shapes.VoxelShape WALL_WEST_GRINDSTONE -> ae
    F:net.minecraft.world.phys.shapes.VoxelShape WALL_EAST_LEFT_POST -> af
    F:net.minecraft.world.phys.shapes.VoxelShape WALL_EAST_RIGHT_POST -> ag
    F:net.minecraft.world.phys.shapes.VoxelShape WALL_EAST_LEFT_PIVOT -> ah
    F:net.minecraft.world.phys.shapes.VoxelShape WALL_EAST_RIGHT_PIVOT -> ai
    F:net.minecraft.world.phys.shapes.VoxelShape WALL_EAST_LEFT_LEG -> aj
    F:net.minecraft.world.phys.shapes.VoxelShape WALL_EAST_RIGHT_LEG -> ak
    F:net.minecraft.world.phys.shapes.VoxelShape WALL_EAST_ALL_LEGS -> al
    F:net.minecraft.world.phys.shapes.VoxelShape WALL_EAST_GRINDSTONE -> am
    F:net.minecraft.world.phys.shapes.VoxelShape CEILING_NORTH_SOUTH_LEFT_POST -> an
    F:net.minecraft.world.phys.shapes.VoxelShape CEILING_NORTH_SOUTH_RIGHT_POST -> ao
    F:net.minecraft.world.phys.shapes.VoxelShape CEILING_NORTH_SOUTH_LEFT_PIVOT -> ap
    F:net.minecraft.world.phys.shapes.VoxelShape CEILING_NORTH_SOUTH_RIGHT_PIVOT -> aq
    F:net.minecraft.world.phys.shapes.VoxelShape CEILING_NORTH_SOUTH_LEFT_LEG -> ar
    F:net.minecraft.world.phys.shapes.VoxelShape CEILING_NORTH_SOUTH_RIGHT_LEG -> as
    F:net.minecraft.world.phys.shapes.VoxelShape CEILING_NORTH_SOUTH_ALL_LEGS -> at
    F:net.minecraft.world.phys.shapes.VoxelShape CEILING_NORTH_SOUTH_GRINDSTONE -> au
    F:net.minecraft.world.phys.shapes.VoxelShape CEILING_EAST_WEST_LEFT_POST -> av
    F:net.minecraft.world.phys.shapes.VoxelShape CEILING_EAST_WEST_RIGHT_POST -> aw
    F:net.minecraft.world.phys.shapes.VoxelShape CEILING_EAST_WEST_LEFT_PIVOT -> ax
    F:net.minecraft.world.phys.shapes.VoxelShape CEILING_EAST_WEST_RIGHT_PIVOT -> ay
    F:net.minecraft.world.phys.shapes.VoxelShape CEILING_EAST_WEST_LEFT_LEG -> az
    M:net.minecraft.world.phys.shapes.VoxelShape getVoxelShape(net.minecraft.world.level.block.state.IBlockData) -> n
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.ITileInventory getMenuProvider(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.GrowingPlantBlock -> cma -> net.minecraft.world.level.block.BlockGrowingAbstract
    F:net.minecraft.core.EnumDirection growthDirection -> a
    F:boolean scheduleFluidTicks -> b
    F:net.minecraft.world.phys.shapes.VoxelShape shape -> c
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.level.GeneratorAccess) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean canAttachTo(net.minecraft.world.level.block.state.IBlockData) -> h
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
net.minecraft.world.level.block.GrowingPlantBodyBlock -> cmb -> net.minecraft.world.level.block.BlockGrowingStem
    M:net.minecraft.world.level.block.state.IBlockData updateHeadAfterConvertedFromBody(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:java.util.Optional getHeadPos(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block) -> a
    M:boolean canBeReplaced(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.Block getBodyBlock() -> b
net.minecraft.world.level.block.GrowingPlantHeadBlock -> cmc -> net.minecraft.world.level.block.BlockGrowingTop
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE -> d
    F:int MAX_AGE -> e
    F:double growPerTickProbability -> f
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.level.GeneratorAccess) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:net.minecraft.world.level.block.state.IBlockData getGrowIntoState(net.minecraft.world.level.block.state.IBlockData,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.state.IBlockData getMaxAgeState(net.minecraft.world.level.block.state.IBlockData) -> n
    M:boolean isMaxAge(net.minecraft.world.level.block.state.IBlockData) -> o
    M:net.minecraft.world.level.block.state.IBlockData updateBodyAfterConvertedFromHead(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.BlockGrowingTop getHeadBlock() -> c
net.minecraft.world.level.block.HalfTransparentBlock -> cmd -> net.minecraft.world.level.block.BlockHalfTransparent
    M:boolean skipRendering(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection) -> a
net.minecraft.world.level.block.HangingRootsBlock -> cme -> net.minecraft.world.level.block.HangingRootsBlock
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> b
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.block.HayBlock -> cmf -> net.minecraft.world.level.block.BlockHay
    M:void fallOn(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity,float) -> a
net.minecraft.world.level.block.HoneyBlock -> cmg -> net.minecraft.world.level.block.BlockHoney
    F:double SLIDE_STARTS_WHEN_VERTICAL_SPEED_IS_AT_LEAST -> b
    F:double MIN_FALL_SPEED_TO_BE_CONSIDERED_SLIDING -> c
    F:double THROTTLE_SLIDE_SPEED_TO -> d
    F:int SLIDE_ADVANCEMENT_CHECK_INTERVAL -> e
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    M:boolean doesEntityDoHoneyBlockSlideEffects(net.minecraft.world.entity.Entity) -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:void fallOn(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity,float) -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:boolean isSlidingDown(net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:void maybeDoSlideAchievement(net.minecraft.world.entity.Entity,net.minecraft.core.BlockPosition) -> a
    M:void doSlideMovement(net.minecraft.world.entity.Entity) -> d
    M:void maybeDoSlideEffects(net.minecraft.world.level.World,net.minecraft.world.entity.Entity) -> a
    M:void showSlideParticles(net.minecraft.world.entity.Entity) -> a
    M:void showJumpParticles(net.minecraft.world.entity.Entity) -> b
    M:void showParticles(net.minecraft.world.entity.Entity,int) -> a
net.minecraft.world.level.block.HopperBlock -> cmh -> net.minecraft.world.level.block.BlockHopper
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean ENABLED -> b
    F:net.minecraft.world.phys.shapes.VoxelShape TOP -> c
    F:net.minecraft.world.phys.shapes.VoxelShape FUNNEL -> d
    F:net.minecraft.world.phys.shapes.VoxelShape CONVEX_BASE -> e
    F:net.minecraft.world.phys.shapes.VoxelShape BASE -> f
    F:net.minecraft.world.phys.shapes.VoxelShape DOWN_SHAPE -> g
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_SHAPE -> h
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_SHAPE -> i
    F:net.minecraft.world.phys.shapes.VoxelShape SOUTH_SHAPE -> j
    F:net.minecraft.world.phys.shapes.VoxelShape WEST_SHAPE -> k
    F:net.minecraft.world.phys.shapes.VoxelShape DOWN_INTERACTION_SHAPE -> l
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_INTERACTION_SHAPE -> m
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_INTERACTION_SHAPE -> n
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getInteractionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void checkPoweredState(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.HorizontalDirectionalBlock -> cmi -> net.minecraft.world.level.block.BlockFacingHorizontal
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
net.minecraft.world.level.block.HugeMushroomBlock -> cmj -> net.minecraft.world.level.block.BlockHugeMushroom
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean NORTH -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean EAST -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean SOUTH -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WEST -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean UP -> e
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean DOWN -> f
    F:java.util.Map PROPERTY_BY_DIRECTION -> g
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.IceBlock -> cmk -> net.minecraft.world.level.block.BlockIce
    M:void playerDestroy(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntity,net.minecraft.world.item.ItemStack) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:void melt(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> d
    M:net.minecraft.world.level.material.EnumPistonReaction getPistonPushReaction(net.minecraft.world.level.block.state.IBlockData) -> d
net.minecraft.world.level.block.InfestedBlock -> cml -> net.minecraft.world.level.block.BlockMonsterEggs
    F:net.minecraft.world.level.block.Block hostBlock -> a
    F:java.util.Map BLOCK_BY_HOST_BLOCK -> b
    F:java.util.Map HOST_TO_INFESTED_STATES -> c
    F:java.util.Map INFESTED_TO_HOST_STATES -> d
    M:net.minecraft.world.level.block.Block getHostBlock() -> b
    M:boolean isCompatibleHostBlock(net.minecraft.world.level.block.state.IBlockData) -> h
    M:void spawnInfestation(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:void spawnAfterBreak(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack,boolean) -> a
    M:net.minecraft.world.level.block.state.IBlockData infestedStateByHost(net.minecraft.world.level.block.state.IBlockData) -> n
    M:net.minecraft.world.level.block.state.IBlockData hostStateByInfested(net.minecraft.world.level.block.state.IBlockData) -> o
    M:net.minecraft.world.level.block.state.IBlockData getNewStateWithProperties(java.util.Map,net.minecraft.world.level.block.state.IBlockData,java.util.function.Supplier) -> a
net.minecraft.world.level.block.InfestedRotatedPillarBlock -> cmm -> net.minecraft.world.level.block.InfestedRotatedPillarBlock
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
net.minecraft.world.level.block.IronBarsBlock -> cmn -> net.minecraft.world.level.block.BlockIronBars
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getVisualShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> b
    M:boolean skipRendering(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection) -> a
    M:boolean attachsTo(net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.JigsawBlock -> cmo -> net.minecraft.world.level.block.BlockJigsaw
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum ORIENTATION -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:boolean canAttach(net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo) -> a
    M:net.minecraft.core.EnumDirection getFrontFacing(net.minecraft.world.level.block.state.IBlockData) -> h
    M:net.minecraft.core.EnumDirection getTopFacing(net.minecraft.world.level.block.state.IBlockData) -> n
net.minecraft.world.level.block.JukeboxBlock -> cmp -> net.minecraft.world.level.block.BlockJukeBox
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean HAS_RECORD -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void setRecord(net.minecraft.world.entity.Entity,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.ItemStack) -> a
    M:void dropRecording(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.KelpBlock -> cmq -> net.minecraft.world.level.block.BlockKelp
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> f
    F:double GROW_PER_TICK_PROBABILITY -> g
    M:boolean canGrowInto(net.minecraft.world.level.block.state.IBlockData) -> g
    M:net.minecraft.world.level.block.Block getBodyBlock() -> b
    M:boolean canAttachTo(net.minecraft.world.level.block.state.IBlockData) -> h
    M:boolean canPlaceLiquid(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.FluidType) -> a
    M:boolean placeLiquid(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.Fluid) -> a
    M:int getBlocksToGrowWhenBonemealed(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
net.minecraft.world.level.block.KelpPlantBlock -> cmr -> net.minecraft.world.level.block.BlockKelpPlant
    M:net.minecraft.world.level.block.BlockGrowingTop getHeadBlock() -> c
    M:boolean canAttachTo(net.minecraft.world.level.block.state.IBlockData) -> h
    M:boolean canPlaceLiquid(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.FluidType) -> a
    M:boolean placeLiquid(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.Fluid) -> a
net.minecraft.world.level.block.LadderBlock -> cms -> net.minecraft.world.level.block.BlockLadder
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> b
    F:float AABB_OFFSET -> c
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> d
    F:net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> e
    F:net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> f
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> g
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean canAttachTo(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.LanternBlock -> cmt -> net.minecraft.world.level.block.BlockLantern
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean HANGING -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> b
    F:net.minecraft.world.phys.shapes.VoxelShape AABB -> c
    F:net.minecraft.world.phys.shapes.VoxelShape HANGING_AABB -> d
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.EnumDirection getConnectedDirection(net.minecraft.world.level.block.state.IBlockData) -> h
    M:net.minecraft.world.level.material.EnumPistonReaction getPistonPushReaction(net.minecraft.world.level.block.state.IBlockData) -> d
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.LavaCauldronBlock -> cmu -> net.minecraft.world.level.block.LavaCauldronBlock
    M:double getContentHeight(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isFull(net.minecraft.world.level.block.state.IBlockData) -> c
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.block.LayeredCauldronBlock -> cmv -> net.minecraft.world.level.block.LayeredCauldronBlock
    F:int MIN_FILL_LEVEL -> c
    F:int MAX_FILL_LEVEL -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger LEVEL -> e
    F:int BASE_CONTENT_HEIGHT -> h
    F:double HEIGHT_PER_LEVEL -> i
    F:java.util.function.Predicate RAIN -> f
    F:java.util.function.Predicate SNOW -> g
    F:java.util.function.Predicate fillPredicate -> j
    M:boolean isFull(net.minecraft.world.level.block.state.IBlockData) -> c
    M:boolean canReceiveStalactiteDrip(net.minecraft.world.level.material.FluidType) -> a
    M:double getContentHeight(net.minecraft.world.level.block.state.IBlockData) -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:void handleEntityOnFireInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> d
    M:void lowerFillLevel(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> e
    M:void handlePrecipitation(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.biome.BiomeBase$Precipitation) -> a
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:void receiveStalactiteDrip(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.FluidType) -> a
net.minecraft.world.level.block.LeavesBlock -> cmw -> net.minecraft.world.level.block.BlockLeaves
    F:int DECAY_DISTANCE -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger DISTANCE -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean PERSISTENT -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> d
    F:int TICK_DELAY -> e
    M:net.minecraft.world.phys.shapes.VoxelShape getBlockSupportShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> f
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean decaying(net.minecraft.world.level.block.state.IBlockData) -> h
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:int getLightBlock(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> g
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateDistance(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:int getDistanceAt(net.minecraft.world.level.block.state.IBlockData) -> n
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
net.minecraft.world.level.block.LecternBlock -> cmx -> net.minecraft.world.level.block.BlockLectern
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean POWERED -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean HAS_BOOK -> c
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE_BASE -> d
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE_POST -> e
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE_COMMON -> f
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE_TOP_PLATE -> g
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE_COLLISION -> h
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE_WEST -> i
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE_NORTH -> j
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE_EAST -> k
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE_SOUTH -> l
    F:int PAGE_CHANGE_IMPULSE_TICKS -> m
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean tryPlaceBook(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.ItemStack) -> a
    M:void placeBook(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.ItemStack) -> b
    M:void resetBookState(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void signalPageChange(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void changePowered(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void updateBelow(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void popBook(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> d
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:int getDirectSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.ITileInventory getMenuProvider(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:void openScreen(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.LevelEvent -> cmy -> net.minecraft.world.level.block.LevelEvent
    F:int SOUND_DISPENSER_DISPENSE -> a
    F:int SOUND_DISPENSER_FAIL -> b
    F:int SOUND_DISPENSER_PROJECTILE_LAUNCH -> c
    F:int SOUND_ENDER_EYE_LAUNCH -> d
    F:int SOUND_FIREWORK_SHOOT -> e
    F:int SOUND_OPEN_IRON_DOOR -> f
    F:int SOUND_OPEN_WOODEN_DOOR -> g
    F:int SOUND_OPEN_WOODEN_TRAP_DOOR -> h
    F:int SOUND_OPEN_FENCE_GATE -> i
    F:int SOUND_EXTINGUISH_FIRE -> j
    F:int SOUND_PLAY_RECORDING -> k
    F:int SOUND_CLOSE_IRON_DOOR -> l
    F:int SOUND_CLOSE_WOODEN_DOOR -> m
    F:int SOUND_CLOSE_WOODEN_TRAP_DOOR -> n
    F:int SOUND_CLOSE_FENCE_GATE -> o
    F:int SOUND_GHAST_WARNING -> p
    F:int SOUND_GHAST_FIREBALL -> q
    F:int SOUND_DRAGON_FIREBALL -> r
    F:int SOUND_BLAZE_FIREBALL -> s
    F:int SOUND_ZOMBIE_WOODEN_DOOR -> t
    F:int SOUND_ZOMBIE_IRON_DOOR -> u
    F:int SOUND_ZOMBIE_DOOR_CRASH -> v
    F:int SOUND_WITHER_BLOCK_BREAK -> w
    F:int SOUND_WITHER_BOSS_SPAWN -> x
    F:int SOUND_WITHER_BOSS_SHOOT -> y
    F:int SOUND_BAT_LIFTOFF -> z
    F:int END_PORTAL_FRAME_FILL -> aa
    F:int DRIPSTONE_DRIP -> ab
    F:int PARTICLES_AND_SOUND_PLANT_GROWTH -> ac
    F:int PARTICLES_SHOOT -> ad
    F:int PARTICLES_DESTROY_BLOCK -> ae
    F:int PARTICLES_SPELL_POTION_SPLASH -> af
    F:int PARTICLES_EYE_OF_ENDER_DEATH -> ag
    F:int PARTICLES_MOBBLOCK_SPAWN -> ah
    F:int PARTICLES_PLANT_GROWTH -> ai
    F:int PARTICLES_DRAGON_FIREBALL_SPLASH -> aj
    F:int PARTICLES_INSTANT_POTION_SPLASH -> ak
    F:int PARTICLES_DRAGON_BLOCK_BREAK -> al
    F:int PARTICLES_WATER_EVAPORATING -> am
    F:int ANIMATION_END_GATEWAY_SPAWN -> an
    F:int ANIMATION_DRAGON_SUMMON_ROAR -> ao
    F:int PARTICLES_ELECTRIC_SPARK -> ap
    F:int PARTICLES_AND_SOUND_WAX_ON -> aq
    F:int PARTICLES_WAX_OFF -> ar
    F:int PARTICLES_SCRAPE -> as
    F:int PARTICLES_SCULK_CHARGE -> at
    F:int PARTICLES_SCULK_SHRIEK -> au
net.minecraft.world.level.block.LeverBlock -> cmz -> net.minecraft.world.level.block.BlockLever
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean POWERED -> a
    F:int DEPTH -> b
    F:int WIDTH -> c
    F:int HEIGHT -> d
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> e
    F:net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> f
    F:net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> g
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> h
    F:net.minecraft.world.phys.shapes.VoxelShape UP_AABB_Z -> i
    F:net.minecraft.world.phys.shapes.VoxelShape UP_AABB_X -> j
    F:net.minecraft.world.phys.shapes.VoxelShape DOWN_AABB_Z -> k
    F:net.minecraft.world.phys.shapes.VoxelShape DOWN_AABB_X -> l
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.level.block.state.IBlockData pull(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> d
    M:void makeParticle(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,float) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:int getDirectSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:void updateNeighbours(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> e
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.LightBlock -> cna -> net.minecraft.world.level.block.LightBlock
    F:int MAX_LEVEL -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger LEVEL -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> c
    F:java.util.function.ToIntFunction LIGHT_EMISSION -> d
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> c
    M:float getShadeBrightness(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.LightningRodBlock -> cnb -> net.minecraft.world.level.block.LightningRodBlock
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean POWERED -> c
    F:int ACTIVATION_TICKS -> j
    F:int RANGE -> d
    F:int SPARK_CYCLE -> k
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:int getDirectSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:void onLightningStrike(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> d
    M:void updateNeighbours(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> e
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void onProjectileHit(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.MovingObjectPositionBlock,net.minecraft.world.entity.projectile.IProjectile) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.LiquidBlock -> cnc -> net.minecraft.world.level.block.BlockFluids
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger LEVEL -> a
    F:net.minecraft.world.level.material.FluidTypeFlowing fluid -> b
    F:java.util.List stateCache -> e
    F:net.minecraft.world.phys.shapes.VoxelShape STABLE_SHAPE -> c
    F:com.google.common.collect.ImmutableList POSSIBLE_FLOW_DIRECTIONS -> d
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> c
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:boolean skipRendering(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection) -> a
    M:java.util.List getDrops(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.storage.loot.LootTableInfo$Builder) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:boolean shouldSpreadLiquid(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void fizz(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.item.ItemStack pickupBlock(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> c
net.minecraft.world.level.block.LiquidBlockContainer -> cnd -> net.minecraft.world.level.block.IFluidContainer
net.minecraft.world.level.block.LoomBlock -> cne -> net.minecraft.world.level.block.BlockLoom
    F:net.minecraft.network.chat.IChatBaseComponent CONTAINER_TITLE -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.ITileInventory getMenuProvider(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.MagmaBlock -> cnf -> net.minecraft.world.level.block.BlockMagma
    F:int BUBBLE_COLUMN_CHECK_DELAY -> a
    M:void stepOn(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.Entity) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
net.minecraft.world.level.block.MangroveLeavesBlock -> cng -> net.minecraft.world.level.block.MangroveLeavesBlock
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.MangrovePropaguleBlock -> cnh -> net.minecraft.world.level.block.MangrovePropaguleBlock
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE -> a
    F:int MAX_AGE -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> h
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean HANGING -> c
    F:float GROW_TALL_MANGROVE_PROBABILITY -> i
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isHanging(net.minecraft.world.level.block.state.IBlockData) -> h
    M:boolean isFullyGrown(net.minecraft.world.level.block.state.IBlockData) -> n
    M:net.minecraft.world.level.block.state.IBlockData createNewHangingPropagule() -> c
    M:net.minecraft.world.level.block.state.IBlockData createNewHangingPropagule(int) -> b
net.minecraft.world.level.block.MangroveRootsBlock -> cni -> net.minecraft.world.level.block.MangroveRootsBlock
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> a
    M:boolean skipRendering(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.MelonBlock -> cnj -> net.minecraft.world.level.block.BlockMelon
    M:net.minecraft.world.level.block.BlockStem getStem() -> b
    M:net.minecraft.world.level.block.BlockStemAttached getAttachedStem() -> c
net.minecraft.world.level.block.Mirror -> cnk -> net.minecraft.world.level.block.EnumBlockMirror
    F:net.minecraft.world.level.block.EnumBlockMirror NONE -> a
    F:net.minecraft.world.level.block.EnumBlockMirror LEFT_RIGHT -> b
    F:net.minecraft.world.level.block.EnumBlockMirror FRONT_BACK -> c
    F:com.mojang.serialization.Codec CODEC -> d
    F:java.lang.String id -> e
    F:net.minecraft.network.chat.IChatBaseComponent symbol -> f
    F:com.mojang.math.PointGroupO rotation -> g
    M:int mirror(int,int) -> a
    M:net.minecraft.world.level.block.EnumBlockRotation getRotation(net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.core.EnumDirection mirror(net.minecraft.core.EnumDirection) -> b
    M:com.mojang.math.PointGroupO rotation() -> a
    M:net.minecraft.network.chat.IChatBaseComponent symbol() -> b
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.block.MossBlock -> cnl -> net.minecraft.world.level.block.MossBlock
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.MudBlock -> cnm -> net.minecraft.world.level.block.MudBlock
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getBlockSupportShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> f
    M:net.minecraft.world.phys.shapes.VoxelShape getVisualShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> b
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:float getShadeBrightness(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
net.minecraft.world.level.block.MultifaceBlock -> cnn -> net.minecraft.world.level.block.MultifaceBlock
    F:float AABB_OFFSET -> b
    F:net.minecraft.world.phys.shapes.VoxelShape UP_AABB -> c
    F:net.minecraft.world.phys.shapes.VoxelShape DOWN_AABB -> d
    F:net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> e
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> f
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> g
    F:net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> h
    F:java.util.Map PROPERTY_BY_DIRECTION -> i
    F:java.util.Map SHAPE_BY_DIRECTION -> j
    F:com.google.common.collect.ImmutableMap shapesCache -> k
    F:boolean canRotate -> l
    F:boolean canMirrorX -> m
    F:boolean canMirrorZ -> n
    M:java.util.Set availableFaces(net.minecraft.world.level.block.state.IBlockData) -> h
    M:java.util.Set unpack(byte) -> a
    M:byte pack(java.util.Collection) -> a
    M:boolean isFaceSupported(net.minecraft.core.EnumDirection) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:boolean canBeReplaced(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:boolean isValidStateForPlacement(net.minecraft.world.level.IBlockAccess,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> c
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:net.minecraft.world.level.block.state.IBlockData mapDirections(net.minecraft.world.level.block.state.IBlockData,java.util.function.Function) -> a
    M:boolean hasFace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection) -> a
    M:boolean canAttachTo(net.minecraft.world.level.IBlockAccess,net.minecraft.core.EnumDirection,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isWaterloggable() -> q
    M:net.minecraft.world.level.block.state.IBlockData removeFace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.properties.BlockStateBoolean) -> a
    M:net.minecraft.world.level.block.state.properties.BlockStateBoolean getFaceProperty(net.minecraft.core.EnumDirection) -> b
    M:net.minecraft.world.level.block.state.IBlockData getDefaultMultifaceState(net.minecraft.world.level.block.state.BlockStateList) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape calculateMultifaceShape(net.minecraft.world.level.block.state.IBlockData) -> o
    M:boolean hasAnyFace(net.minecraft.world.level.block.state.IBlockData) -> n
    M:boolean hasAnyVacantFace(net.minecraft.world.level.block.state.IBlockData) -> p
net.minecraft.world.level.block.MultifaceSpreader -> cno -> net.minecraft.world.level.block.MultifaceSpreader
    F:net.minecraft.world.level.block.MultifaceSpreader$SpreadConfig config -> b
    M:boolean canSpreadInAnyDirection(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:java.util.Optional spreadFromRandomFaceTowardRandomDirection(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:long spreadAll(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,boolean) -> a
    M:java.util.Optional spreadFromFaceTowardRandomDirection(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.util.RandomSource,boolean) -> a
    M:long spreadFromFaceTowardAllDirections(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,boolean) -> a
    M:java.util.Optional spreadFromFaceTowardDirection(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.core.EnumDirection,boolean) -> a
    M:java.util.Optional getSpreadFromFaceTowardDirection(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.MultifaceSpreader$SpreadPredicate) -> a
    M:java.util.Optional spreadToFace(net.minecraft.world.level.GeneratorAccess,net.minecraft.world.level.block.MultifaceSpreader$SpreadPos,boolean) -> a
net.minecraft.world.level.block.MultifaceSpreader$DefaultSpreaderConfig -> cno$a -> net.minecraft.world.level.block.MultifaceSpreader$a
    F:net.minecraft.world.level.block.MultifaceBlock block -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:boolean stateCanBeReplaced(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean canSpreadInto(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.MultifaceSpreader$SpreadPos) -> a
net.minecraft.world.level.block.MultifaceSpreader$SpreadConfig -> cno$b -> net.minecraft.world.level.block.MultifaceSpreader$b
    M:boolean hasFace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection) -> a
    M:boolean isOtherBlockValidAsSource(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean canSpreadFrom(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection) -> b
    M:boolean placeBlock(net.minecraft.world.level.GeneratorAccess,net.minecraft.world.level.block.MultifaceSpreader$SpreadPos,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
net.minecraft.world.level.block.MultifaceSpreader$SpreadPos -> cno$c -> net.minecraft.world.level.block.MultifaceSpreader$c
    F:net.minecraft.core.BlockPosition pos -> a
    F:net.minecraft.core.EnumDirection face -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.BlockPosition pos() -> a
    M:net.minecraft.core.EnumDirection face() -> b
net.minecraft.world.level.block.MultifaceSpreader$SpreadPredicate -> cno$d -> net.minecraft.world.level.block.MultifaceSpreader$d
net.minecraft.world.level.block.MultifaceSpreader$SpreadType -> cno$e -> net.minecraft.world.level.block.MultifaceSpreader$e
    F:net.minecraft.world.level.block.MultifaceSpreader$SpreadType SAME_POSITION -> a
    F:net.minecraft.world.level.block.MultifaceSpreader$SpreadType SAME_PLANE -> b
    F:net.minecraft.world.level.block.MultifaceSpreader$SpreadType WRAP_AROUND -> c
    M:net.minecraft.world.level.block.MultifaceSpreader$SpreadPos getSpreadPos(net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.level.block.MultifaceSpreader$SpreadPos getSpreadPos(net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.level.block.MultifaceSpreader$SpreadPos getSpreadPos(net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.core.EnumDirection) -> a
net.minecraft.world.level.block.MushroomBlock -> cnp -> net.minecraft.world.level.block.BlockMushroom
    F:float AABB_OFFSET -> a
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    F:java.util.function.Supplier featureSupplier -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:boolean growMushroom(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.util.RandomSource) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.MyceliumBlock -> cnq -> net.minecraft.world.level.block.BlockMycel
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.block.NetherPortalBlock -> cnr -> net.minecraft.world.level.block.BlockPortal
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum AXIS -> a
    F:int AABB_OFFSET -> b
    F:net.minecraft.world.phys.shapes.VoxelShape X_AXIS_AABB -> c
    F:net.minecraft.world.phys.shapes.VoxelShape Z_AXIS_AABB -> d
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.NetherSproutsBlock -> cns -> net.minecraft.world.level.block.BlockNetherSprouts
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
net.minecraft.world.level.block.NetherVines -> cnt -> net.minecraft.world.level.block.BlockNetherVinesUtil
    F:double BONEMEAL_GROW_PROBABILITY_DECREASE_RATE -> b
    F:double GROW_PER_TICK_PROBABILITY -> a
    M:boolean isValidGrowthState(net.minecraft.world.level.block.state.IBlockData) -> a
    M:int getBlocksToGrowWhenBonemealed(net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.block.NetherWartBlock -> cnu -> net.minecraft.world.level.block.BlockNetherWart
    F:int MAX_AGE -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.NetherrackBlock -> cnv -> net.minecraft.world.level.block.BlockNetherrack
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.NoteBlock -> cnw -> net.minecraft.world.level.block.BlockNote
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum INSTRUMENT -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean POWERED -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger NOTE -> c
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void playNote(net.minecraft.world.entity.Entity,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void attack(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean triggerEvent(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,int,int) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.NyliumBlock -> cnx -> net.minecraft.world.level.block.BlockNylium
    M:boolean canBeNylium(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> b
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.ObserverBlock -> cny -> net.minecraft.world.level.block.BlockObserver
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean POWERED -> b
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void startSignal(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:void updateNeighborsInFront(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:int getDirectSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
net.minecraft.world.level.block.PipeBlock -> cnz -> net.minecraft.world.level.block.BlockSprawling
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean NORTH -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean EAST -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean SOUTH -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WEST -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean UP -> e
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean DOWN -> f
    F:java.util.Map PROPERTY_BY_DIRECTION -> g
    M:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:int getAABBIndex(net.minecraft.world.level.block.state.IBlockData) -> h
net.minecraft.world.level.block.PlayerHeadBlock -> coa -> net.minecraft.world.level.block.BlockSkullPlayer
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.level.block.PlayerWallHeadBlock -> cob -> net.minecraft.world.level.block.BlockSkullPlayerWall
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:java.util.List getDrops(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.storage.loot.LootTableInfo$Builder) -> a
net.minecraft.world.level.block.PointedDripstoneBlock -> coc -> net.minecraft.world.level.block.PointedDripstoneBlock
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection TIP_DIRECTION -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum THICKNESS -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> c
    F:int MAX_SEARCH_LENGTH_WHEN_CHECKING_DRIP_TYPE -> d
    F:int DELAY_BEFORE_FALLING -> e
    F:float DRIP_PROBABILITY_PER_ANIMATE_TICK -> f
    F:float DRIP_PROBABILITY_PER_ANIMATE_TICK_IF_UNDER_LIQUID_SOURCE -> g
    F:int MAX_SEARCH_LENGTH_BETWEEN_STALACTITE_TIP_AND_CAULDRON -> h
    F:float WATER_TRANSFER_PROBABILITY_PER_RANDOM_TICK -> i
    F:float LAVA_TRANSFER_PROBABILITY_PER_RANDOM_TICK -> j
    F:double MIN_TRIDENT_VELOCITY_TO_BREAK_DRIPSTONE -> k
    F:float STALACTITE_DAMAGE_PER_FALL_DISTANCE_AND_SIZE -> l
    F:int STALACTITE_MAX_DAMAGE -> m
    F:int MAX_STALACTITE_HEIGHT_FOR_DAMAGE_CALCULATION -> n
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void onProjectileHit(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.MovingObjectPositionBlock,net.minecraft.world.entity.projectile.IProjectile) -> a
    M:void fallOn(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity,float) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:void maybeTransferFluid(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,float) -> a
    M:net.minecraft.world.level.material.EnumPistonReaction getPistonPushReaction(net.minecraft.world.level.block.state.IBlockData) -> d
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void onBrokenAfterFall(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.item.EntityFallingBlock) -> a
    M:net.minecraft.world.damagesource.DamageSource getFallDamageSource() -> b
    M:void spawnFallingStalactite(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:void growStalactiteOrStalagmiteIfPossible(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> c
    M:void growStalagmiteBelow(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> b
    M:void grow(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:void createDripstone(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.properties.DripstoneThickness) -> a
    M:void createMergedTips(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:void spawnDripParticle(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void spawnDripParticle(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.FluidType) -> a
    M:net.minecraft.core.BlockPosition findTip(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,int,boolean) -> a
    M:net.minecraft.core.EnumDirection calculateTipDirection(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:net.minecraft.world.level.block.state.properties.DripstoneThickness calculateDripstoneThickness(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,boolean) -> a
    M:boolean canDrip(net.minecraft.world.level.block.state.IBlockData) -> h
    M:boolean canTipGrow(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> b
    M:java.util.Optional findRootBlock(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,int) -> a
    M:boolean isValidPointedDripstonePlacement(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> c
    M:boolean isTip(net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isUnmergedTipWithDirection(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection) -> a
    M:boolean isStalactite(net.minecraft.world.level.block.state.IBlockData) -> n
    M:boolean isStalagmite(net.minecraft.world.level.block.state.IBlockData) -> o
    M:boolean isStalactiteStartPos(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> b
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:boolean isPointedDripstoneWithDirection(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection) -> b
    M:net.minecraft.core.BlockPosition findFillableCauldronBelowStalactiteTip(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.FluidType) -> a
    M:net.minecraft.core.BlockPosition findStalactiteTipAboveCauldron(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.material.FluidType getCauldronFillFluidType(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:java.util.Optional getFluidAboveStalactite(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:boolean canFillCauldron(net.minecraft.world.level.material.FluidType) -> a
    M:boolean canGrow(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.material.FluidType getDripFluid(net.minecraft.world.level.World,net.minecraft.world.level.material.FluidType) -> a
    M:java.util.Optional findBlockVertical(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection$EnumAxisDirection,java.util.function.BiPredicate,java.util.function.Predicate,int) -> a
    M:boolean canDripThrough(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
net.minecraft.world.level.block.PointedDripstoneBlock$FluidInfo -> coc$a -> net.minecraft.world.level.block.PointedDripstoneBlock$a
    F:net.minecraft.core.BlockPosition pos -> a
    F:net.minecraft.world.level.material.FluidType fluid -> b
    F:net.minecraft.world.level.block.state.IBlockData sourceState -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.BlockPosition pos() -> a
    M:net.minecraft.world.level.material.FluidType fluid() -> b
    M:net.minecraft.world.level.block.state.IBlockData sourceState() -> c
net.minecraft.world.level.block.PotatoBlock -> cod -> net.minecraft.world.level.block.BlockPotatoes
    M:net.minecraft.world.level.IMaterial getBaseSeedId() -> d
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
net.minecraft.world.level.block.PowderSnowBlock -> coe -> net.minecraft.world.level.block.PowderSnowBlock
    F:float HORIZONTAL_PARTICLE_MOMENTUM_FACTOR -> a
    F:float IN_BLOCK_HORIZONTAL_SPEED_MULTIPLIER -> b
    F:float IN_BLOCK_VERTICAL_SPEED_MULTIPLIER -> c
    F:float NUM_BLOCKS_TO_FALL_INTO_BLOCK -> d
    F:net.minecraft.world.phys.shapes.VoxelShape FALLING_COLLISION_SHAPE -> e
    F:double MINIMUM_FALL_DISTANCE_FOR_SOUND -> f
    F:double MINIMUM_FALL_DISTANCE_FOR_BIG_SOUND -> g
    M:boolean skipRendering(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection) -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:void fallOn(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity,float) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getVisualShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> b
    M:boolean canEntityWalkOnPowderSnow(net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.item.ItemStack pickupBlock(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> c
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.PowderSnowCauldronBlock -> cof -> net.minecraft.world.level.block.PowderSnowCauldronBlock
    M:void handleEntityOnFireInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> d
net.minecraft.world.level.block.PoweredBlock -> cog -> net.minecraft.world.level.block.BlockPowered
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
net.minecraft.world.level.block.PoweredRailBlock -> coh -> net.minecraft.world.level.block.BlockPoweredRail
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum SHAPE -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean POWERED -> e
    M:boolean findPoweredRailSignal(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean,int) -> a
    M:boolean isSameRailWithPower(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,boolean,int,net.minecraft.world.level.block.state.properties.BlockPropertyTrackPosition) -> a
    M:void updateState(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.world.level.block.state.properties.IBlockState getShapeProperty() -> c
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.PressurePlateBlock -> coi -> net.minecraft.world.level.block.BlockPressurePlateBinary
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean POWERED -> d
    F:net.minecraft.world.level.block.BlockPressurePlateBinary$EnumMobType sensitivity -> e
    M:int getSignalForState(net.minecraft.world.level.block.state.IBlockData) -> g
    M:net.minecraft.world.level.block.state.IBlockData setSignalForState(net.minecraft.world.level.block.state.IBlockData,int) -> a
    M:void playOnSound(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:void playOffSound(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> b
    M:int getSignalStrength(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.PressurePlateBlock$Sensitivity -> coi$a -> net.minecraft.world.level.block.BlockPressurePlateBinary$EnumMobType
    F:net.minecraft.world.level.block.BlockPressurePlateBinary$EnumMobType EVERYTHING -> a
    F:net.minecraft.world.level.block.BlockPressurePlateBinary$EnumMobType MOBS -> b
net.minecraft.world.level.block.PumpkinBlock -> coj -> net.minecraft.world.level.block.BlockPumpkin
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.level.block.BlockStem getStem() -> b
    M:net.minecraft.world.level.block.BlockStemAttached getAttachedStem() -> c
net.minecraft.world.level.block.RailBlock -> cok -> net.minecraft.world.level.block.BlockMinecartTrack
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum SHAPE -> d
    M:void updateState(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.world.level.block.state.properties.IBlockState getShapeProperty() -> c
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.RailState -> col -> net.minecraft.world.level.block.MinecartTrackLogic
    F:net.minecraft.world.level.World level -> a
    F:net.minecraft.core.BlockPosition pos -> b
    F:net.minecraft.world.level.block.BlockMinecartTrackAbstract block -> c
    F:net.minecraft.world.level.block.state.IBlockData state -> d
    F:boolean isStraight -> e
    F:java.util.List connections -> f
    M:java.util.List getConnections() -> a
    M:void updateConnections(net.minecraft.world.level.block.state.properties.BlockPropertyTrackPosition) -> a
    M:void removeSoftConnections() -> d
    M:boolean hasRail(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.MinecartTrackLogic getRail(net.minecraft.core.BlockPosition) -> b
    M:boolean connectsTo(net.minecraft.world.level.block.MinecartTrackLogic) -> a
    M:boolean hasConnection(net.minecraft.core.BlockPosition) -> c
    M:int countPotentialConnections() -> b
    M:boolean canConnectTo(net.minecraft.world.level.block.MinecartTrackLogic) -> b
    M:void connectTo(net.minecraft.world.level.block.MinecartTrackLogic) -> c
    M:boolean hasNeighborRail(net.minecraft.core.BlockPosition) -> d
    M:net.minecraft.world.level.block.MinecartTrackLogic place(boolean,boolean,net.minecraft.world.level.block.state.properties.BlockPropertyTrackPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getState() -> c
net.minecraft.world.level.block.RedStoneOreBlock -> com -> net.minecraft.world.level.block.BlockRedstoneOre
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean LIT -> a
    M:void attack(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void stepOn(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void interact(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> d
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:void spawnAfterBreak(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack,boolean) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void spawnParticles(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.RedStoneWireBlock -> coo -> net.minecraft.world.level.block.BlockRedstoneWire
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum NORTH -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum EAST -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum SOUTH -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum WEST -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger POWER -> e
    F:java.util.Map PROPERTY_BY_DIRECTION -> f
    F:int H -> g
    F:int W -> h
    F:int E -> i
    F:int N -> j
    F:int S -> k
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE_DOT -> l
    F:java.util.Map SHAPES_FLOOR -> m
    F:java.util.Map SHAPES_UP -> n
    M:net.minecraft.world.phys.shapes.VoxelShape calculateShape(net.minecraft.world.level.block.state.IBlockData) -> n
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData getConnectionState(net.minecraft.world.level.IBlockAccess,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getMissingConnections(net.minecraft.world.level.IBlockAccess,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean isCross(net.minecraft.world.level.block.state.IBlockData) -> o
    M:boolean isDot(net.minecraft.world.level.block.state.IBlockData) -> p
    M:void updateIndirectNeighbourShapes(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,int,int) -> a
    M:net.minecraft.world.level.block.state.properties.BlockPropertyRedstoneSide getConnectingSide(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.level.block.state.properties.BlockPropertyRedstoneSide getConnectingSide(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,boolean) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurviveOn(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void updatePowerStrength(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:int calculateTargetStrength(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:int getWireSignal(net.minecraft.world.level.block.state.IBlockData) -> q
    M:void checkCornerChangeAt(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void updateNeighborsOfNeighboringWires(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> c
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:int getDirectSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:boolean shouldConnectTo(net.minecraft.world.level.block.state.IBlockData) -> h
    M:boolean shouldConnectTo(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection) -> a
    M:int getColorForPower(int) -> b
    M:void spawnParticlesAlongLine(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.phys.Vec3D,net.minecraft.core.EnumDirection,net.minecraft.core.EnumDirection,float,float) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void updatesOnShapeChange(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.RedstoneLampBlock -> cop -> net.minecraft.world.level.block.BlockRedstoneLamp
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean LIT -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.RedstoneTorchBlock -> coq -> net.minecraft.world.level.block.BlockRedstoneTorch
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean LIT -> a
    F:java.util.Map RECENT_TOGGLES -> e
    F:int RECENT_TOGGLE_TIMER -> b
    F:int MAX_RECENT_TOGGLES -> c
    F:int RESTART_DELAY -> d
    F:int TOGGLE_DELAY -> f
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:boolean hasNeighborSignal(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:int getDirectSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isToggledTooFrequently(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,boolean) -> a
net.minecraft.world.level.block.RedstoneTorchBlock$Toggle -> coq$a -> net.minecraft.world.level.block.BlockRedstoneTorch$RedstoneUpdateInfo
    F:net.minecraft.core.BlockPosition pos -> a
    F:long when -> b
net.minecraft.world.level.block.RedstoneWallTorchBlock -> cor -> net.minecraft.world.level.block.BlockRedstoneTorchWall
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> e
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean LIT -> f
    M:java.lang.String getDescriptionId() -> g
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean hasNeighborSignal(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.RenderShape -> cos -> net.minecraft.world.level.block.EnumRenderType
    F:net.minecraft.world.level.block.EnumRenderType INVISIBLE -> a
    F:net.minecraft.world.level.block.EnumRenderType ENTITYBLOCK_ANIMATED -> b
    F:net.minecraft.world.level.block.EnumRenderType MODEL -> c
net.minecraft.world.level.block.RepeaterBlock -> cot -> net.minecraft.world.level.block.BlockRepeater
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean LOCKED -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger DELAY -> d
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:int getDelay(net.minecraft.world.level.block.state.IBlockData) -> g
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean isLocked(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isAlternateInput(net.minecraft.world.level.block.state.IBlockData) -> h
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.RespawnAnchorBlock -> cou -> net.minecraft.world.level.block.BlockRespawnAnchor
    F:int MIN_CHARGES -> a
    F:int MAX_CHARGES -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger CHARGE -> c
    F:com.google.common.collect.ImmutableList RESPAWN_HORIZONTAL_OFFSETS -> d
    F:com.google.common.collect.ImmutableList RESPAWN_OFFSETS -> e
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:boolean isRespawnFuel(net.minecraft.world.item.ItemStack) -> a
    M:boolean canBeCharged(net.minecraft.world.level.block.state.IBlockData) -> h
    M:boolean isWaterThatWouldFlow(net.minecraft.core.BlockPosition,net.minecraft.world.level.World) -> a
    M:void explode(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> d
    M:boolean canSetSpawn(net.minecraft.world.level.World) -> a
    M:void charge(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:int getScaledChargeLevel(net.minecraft.world.level.block.state.IBlockData,int) -> a
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:java.util.Optional findStandUpPosition(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.ICollisionAccess,net.minecraft.core.BlockPosition) -> a
    M:java.util.Optional findStandUpPosition(net.minecraft.world.entity.EntityTypes,net.minecraft.world.level.ICollisionAccess,net.minecraft.core.BlockPosition,boolean) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:java.util.Optional getBlockExplosionResistance(net.minecraft.world.level.Explosion,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.Fluid) -> a
net.minecraft.world.level.block.RodBlock -> cov -> net.minecraft.world.level.block.RodBlock
    F:float AABB_MIN -> e
    F:float AABB_MAX -> f
    F:net.minecraft.world.phys.shapes.VoxelShape Y_AXIS_AABB -> g
    F:net.minecraft.world.phys.shapes.VoxelShape Z_AXIS_AABB -> h
    F:net.minecraft.world.phys.shapes.VoxelShape X_AXIS_AABB -> i
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.RootedDirtBlock -> cow -> net.minecraft.world.level.block.RootedDirtBlock
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.RootsBlock -> cox -> net.minecraft.world.level.block.BlockRoots
    F:float AABB_OFFSET -> a
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
net.minecraft.world.level.block.RotatedPillarBlock -> coy -> net.minecraft.world.level.block.BlockRotatable
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum AXIS -> g
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotatePillar(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> b
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
net.minecraft.world.level.block.Rotation -> coz -> net.minecraft.world.level.block.EnumBlockRotation
    F:net.minecraft.world.level.block.EnumBlockRotation NONE -> a
    F:net.minecraft.world.level.block.EnumBlockRotation CLOCKWISE_90 -> b
    F:net.minecraft.world.level.block.EnumBlockRotation CLOCKWISE_180 -> c
    F:net.minecraft.world.level.block.EnumBlockRotation COUNTERCLOCKWISE_90 -> d
    F:com.mojang.serialization.Codec CODEC -> e
    F:java.lang.String id -> f
    F:com.mojang.math.PointGroupO rotation -> g
    M:net.minecraft.world.level.block.EnumBlockRotation getRotated(net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:com.mojang.math.PointGroupO rotation() -> a
    M:net.minecraft.core.EnumDirection rotate(net.minecraft.core.EnumDirection) -> a
    M:int rotate(int,int) -> a
    M:net.minecraft.world.level.block.EnumBlockRotation getRandom(net.minecraft.util.RandomSource) -> a
    M:java.util.List getShuffled(net.minecraft.util.RandomSource) -> b
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.block.SandBlock -> cpa -> net.minecraft.world.level.block.BlockSand
    F:int dustColor -> a
    M:int getDustColor(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
net.minecraft.world.level.block.SaplingBlock -> cpb -> net.minecraft.world.level.block.BlockSapling
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger STAGE -> d
    F:float AABB_OFFSET -> e
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> f
    F:net.minecraft.world.level.block.grower.WorldGenTreeProvider treeGrower -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:void advanceTree(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.util.RandomSource) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.ScaffoldingBlock -> cpc -> net.minecraft.world.level.block.BlockScaffolding
    F:int TICK_DELAY -> e
    F:net.minecraft.world.phys.shapes.VoxelShape STABLE_SHAPE -> f
    F:net.minecraft.world.phys.shapes.VoxelShape UNSTABLE_SHAPE -> g
    F:net.minecraft.world.phys.shapes.VoxelShape UNSTABLE_SHAPE_BOTTOM -> h
    F:net.minecraft.world.phys.shapes.VoxelShape BELOW_BLOCK -> i
    F:int STABILITY_MAX_DISTANCE -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger DISTANCE -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean BOTTOM -> d
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getInteractionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:boolean canBeReplaced(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:boolean isBottom(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,int) -> a
    M:int getDistance(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.block.SculkBehaviour -> cpd -> net.minecraft.world.level.block.SculkBehaviour
    M:byte getSculkSpreadDelay() -> a
    M:void onDischarged(net.minecraft.world.level.GeneratorAccess,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean depositCharge(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean attemptSpreadVein(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,java.util.Collection,boolean) -> a
    M:boolean canChangeBlockStateOnSpread() -> b
    M:boolean attemptSpreadVein(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,java.util.Collection,boolean) -> a
    M:int attemptUseCharge(net.minecraft.world.level.block.SculkSpreader$ChargeCursor,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource,net.minecraft.world.level.block.SculkSpreader,boolean) -> a
net.minecraft.world.level.block.SculkBlock -> cpe -> net.minecraft.world.level.block.SculkBlock
    M:int attemptUseCharge(net.minecraft.world.level.block.SculkSpreader$ChargeCursor,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource,net.minecraft.world.level.block.SculkSpreader,boolean) -> a
    M:int getDecayPenalty(net.minecraft.world.level.block.SculkSpreader,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,int) -> a
    M:net.minecraft.world.level.block.state.IBlockData getRandomGrowthState(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource,boolean) -> a
    M:boolean canPlaceGrowth(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:boolean canChangeBlockStateOnSpread() -> b
net.minecraft.world.level.block.SculkCatalystBlock -> cpf -> net.minecraft.world.level.block.SculkCatalystBlock
    F:int PULSE_TICKS -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean PULSE -> b
    F:net.minecraft.util.valueproviders.IntProvider xpRange -> c
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void bloom(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.gameevent.GameEventListener getListener(net.minecraft.server.level.WorldServer,net.minecraft.world.level.block.entity.TileEntity) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:void spawnAfterBreak(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack,boolean) -> a
net.minecraft.world.level.block.SculkSensorBlock -> cpg -> net.minecraft.world.level.block.SculkSensorBlock
    F:int ACTIVE_TICKS -> a
    F:int COOLDOWN_TICKS -> b
    F:it.unimi.dsi.fastutil.objects.Object2IntMap VIBRATION_FREQUENCY_FOR_EVENT -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum PHASE -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger POWER -> e
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> f
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> g
    F:int listenerRange -> h
    M:int getListenerRange() -> d
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void stepOn(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.Entity) -> a
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void updateNeighbours(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.gameevent.GameEventListener getListener(net.minecraft.server.level.WorldServer,net.minecraft.world.level.block.entity.TileEntity) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.level.block.state.properties.SculkSensorPhase getPhase(net.minecraft.world.level.block.state.IBlockData) -> h
    M:boolean canActivate(net.minecraft.world.level.block.state.IBlockData) -> n
    M:void deactivate(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void activate(net.minecraft.world.entity.Entity,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,int) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:void spawnAfterBreak(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack,boolean) -> a
net.minecraft.world.level.block.SculkShriekerBlock -> cph -> net.minecraft.world.level.block.SculkShriekerBlock
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean SHRIEKING -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean CAN_SUMMON -> c
    F:net.minecraft.world.phys.shapes.VoxelShape COLLIDER -> d
    F:double TOP_Y -> e
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:void stepOn(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.Entity) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void spawnAfterBreak(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack,boolean) -> a
    M:net.minecraft.world.level.gameevent.GameEventListener getListener(net.minecraft.server.level.WorldServer,net.minecraft.world.level.block.entity.TileEntity) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
net.minecraft.world.level.block.SculkSpreader -> cpi -> net.minecraft.world.level.block.SculkSpreader
    F:int MAX_GROWTH_RATE_RADIUS -> a
    F:int MAX_CHARGE -> b
    F:float MAX_DECAY_FACTOR -> c
    F:int MAX_CURSORS -> e
    F:int SHRIEKER_PLACEMENT_RATE -> d
    F:boolean isWorldGeneration -> f
    F:net.minecraft.tags.TagKey replaceableBlocks -> g
    F:int growthSpawnCost -> h
    F:int noGrowthRadius -> i
    F:int chargeDecayRate -> j
    F:int additionalDecayRate -> k
    F:java.util.List cursors -> l
    F:org.slf4j.Logger LOGGER -> m
    M:net.minecraft.world.level.block.SculkSpreader createLevelSpreader() -> a
    M:net.minecraft.world.level.block.SculkSpreader createWorldGenSpreader() -> b
    M:net.minecraft.tags.TagKey replaceableBlocks() -> c
    M:int growthSpawnCost() -> d
    M:int noGrowthRadius() -> e
    M:int chargeDecayRate() -> f
    M:int additionalDecayRate() -> g
    M:boolean isWorldGeneration() -> h
    M:java.util.List getCursors() -> i
    M:void clear() -> j
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void save(net.minecraft.nbt.NBTTagCompound) -> b
    M:void addCursors(net.minecraft.core.BlockPosition,int) -> a
    M:void addCursor(net.minecraft.world.level.block.SculkSpreader$ChargeCursor) -> a
    M:void updateCursors(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource,boolean) -> a
net.minecraft.world.level.block.SculkSpreader$ChargeCursor -> cpi$a -> net.minecraft.world.level.block.SculkSpreader$a
    F:it.unimi.dsi.fastutil.objects.ObjectArrayList NON_CORNER_NEIGHBOURS -> c
    F:int MAX_CURSOR_DECAY_DELAY -> a
    F:net.minecraft.core.BlockPosition pos -> d
    F:int charge -> e
    F:int updateDelay -> f
    F:int decayDelay -> g
    F:java.util.Set facings -> h
    F:com.mojang.serialization.Codec DIRECTION_SET -> i
    F:com.mojang.serialization.Codec CODEC -> b
    M:net.minecraft.core.BlockPosition getPos() -> a
    M:int getCharge() -> b
    M:int getDecayDelay() -> c
    M:java.util.Set getFacingData() -> d
    M:boolean shouldUpdate(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,boolean) -> a
    M:void update(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource,net.minecraft.world.level.block.SculkSpreader,boolean) -> a
    M:void mergeWith(net.minecraft.world.level.block.SculkSpreader$ChargeCursor) -> a
    M:net.minecraft.world.level.block.SculkBehaviour getBlockBehaviour(net.minecraft.world.level.block.state.IBlockData) -> a
    M:java.util.List getRandomizedNonCornerNeighbourOffsets(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.core.BlockPosition getValidMovementPos(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean isMovementUnobstructed(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean isUnobstructed(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
net.minecraft.world.level.block.SculkVeinBlock -> cpj -> net.minecraft.world.level.block.SculkVeinBlock
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> b
    F:net.minecraft.world.level.block.MultifaceSpreader veinSpreader -> c
    F:net.minecraft.world.level.block.MultifaceSpreader sameSpaceSpreader -> d
    M:net.minecraft.world.level.block.MultifaceSpreader getSpreader() -> c
    M:net.minecraft.world.level.block.MultifaceSpreader getSameSpaceSpreader() -> d
    M:boolean regrow(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,java.util.Collection) -> a
    M:void onDischarged(net.minecraft.world.level.GeneratorAccess,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:int attemptUseCharge(net.minecraft.world.level.block.SculkSpreader$ChargeCursor,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource,net.minecraft.world.level.block.SculkSpreader,boolean) -> a
    M:boolean attemptPlaceSculk(net.minecraft.world.level.block.SculkSpreader,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean hasSubstrateAccess(net.minecraft.world.level.GeneratorAccess,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean canBeReplaced(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.material.EnumPistonReaction getPistonPushReaction(net.minecraft.world.level.block.state.IBlockData) -> d
net.minecraft.world.level.block.SculkVeinBlock$SculkVeinSpreaderConfig -> cpj$a -> net.minecraft.world.level.block.SculkVeinBlock$a
    M:boolean stateCanBeReplaced(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isOtherBlockValidAsSource(net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.SeaPickleBlock -> cpk -> net.minecraft.world.level.block.BlockSeaPickle
    F:int MAX_PICKLES -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger PICKLES -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> c
    F:net.minecraft.world.phys.shapes.VoxelShape ONE_AABB -> d
    F:net.minecraft.world.phys.shapes.VoxelShape TWO_AABB -> e
    F:net.minecraft.world.phys.shapes.VoxelShape THREE_AABB -> f
    F:net.minecraft.world.phys.shapes.VoxelShape FOUR_AABB -> g
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:boolean isDead(net.minecraft.world.level.block.state.IBlockData) -> h
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canBeReplaced(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.SeagrassBlock -> cpl -> net.minecraft.world.level.block.SeagrassBlock
    F:float AABB_OFFSET -> a
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean canPlaceLiquid(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.FluidType) -> a
    M:boolean placeLiquid(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.Fluid) -> a
net.minecraft.world.level.block.ShulkerBoxBlock -> cpm -> net.minecraft.world.level.block.BlockShulkerBox
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum FACING -> a
    F:net.minecraft.resources.MinecraftKey CONTENTS -> b
    F:net.minecraft.world.item.EnumColor color -> c
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:boolean canOpen(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.entity.TileEntityShulkerBox) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:void playerWillDestroy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.player.EntityHuman) -> a
    M:java.util.List getDrops(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.storage.loot.LootTableInfo$Builder) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.IBlockAccess,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    M:net.minecraft.world.level.material.EnumPistonReaction getPistonPushReaction(net.minecraft.world.level.block.state.IBlockData) -> d
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.item.EnumColor getColorFromItem(net.minecraft.world.item.Item) -> b
    M:net.minecraft.world.item.EnumColor getColorFromBlock(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.world.level.block.Block getBlockByColor(net.minecraft.world.item.EnumColor) -> a
    M:net.minecraft.world.item.EnumColor getColor() -> b
    M:net.minecraft.world.item.ItemStack getColoredItemStack(net.minecraft.world.item.EnumColor) -> b
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
net.minecraft.world.level.block.SignBlock -> cpn -> net.minecraft.world.level.block.BlockSign
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> a
    F:float AABB_OFFSET -> b
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> c
    F:net.minecraft.world.level.block.state.properties.BlockPropertyWood type -> d
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.level.block.state.properties.BlockPropertyWood type() -> d
net.minecraft.world.level.block.SimpleWaterloggedBlock -> cpo -> net.minecraft.world.level.block.IBlockWaterlogged
    M:boolean canPlaceLiquid(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.FluidType) -> a
    M:boolean placeLiquid(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.Fluid) -> a
    M:net.minecraft.world.item.ItemStack pickupBlock(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> c
net.minecraft.world.level.block.SkullBlock -> cpp -> net.minecraft.world.level.block.BlockSkull
    F:int MAX -> a
    F:int ROTATIONS -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger ROTATION -> b
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.SkullBlock$Type -> cpp$a -> net.minecraft.world.level.block.BlockSkull$a
net.minecraft.world.level.block.SkullBlock$Types -> cpp$b -> net.minecraft.world.level.block.BlockSkull$Type
    F:net.minecraft.world.level.block.BlockSkull$Type SKELETON -> a
    F:net.minecraft.world.level.block.BlockSkull$Type WITHER_SKELETON -> b
    F:net.minecraft.world.level.block.BlockSkull$Type PLAYER -> c
    F:net.minecraft.world.level.block.BlockSkull$Type ZOMBIE -> d
    F:net.minecraft.world.level.block.BlockSkull$Type CREEPER -> e
    F:net.minecraft.world.level.block.BlockSkull$Type DRAGON -> f
net.minecraft.world.level.block.SlabBlock -> cpq -> net.minecraft.world.level.block.BlockStepAbstract
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum TYPE -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> b
    F:net.minecraft.world.phys.shapes.VoxelShape BOTTOM_AABB -> c
    F:net.minecraft.world.phys.shapes.VoxelShape TOP_AABB -> d
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:boolean canBeReplaced(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.context.BlockActionContext) -> a
    M:boolean placeLiquid(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.Fluid) -> a
    M:boolean canPlaceLiquid(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.FluidType) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.SlimeBlock -> cpr -> net.minecraft.world.level.block.BlockSlime
    M:void fallOn(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity,float) -> a
    M:void updateEntityAfterFallOn(net.minecraft.world.level.IBlockAccess,net.minecraft.world.entity.Entity) -> a
    M:void bounceUp(net.minecraft.world.entity.Entity) -> a
    M:void stepOn(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.Entity) -> a
net.minecraft.world.level.block.SmallDripleafBlock -> cps -> net.minecraft.world.level.block.SmallDripleafBlock
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> e
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> b
    F:float AABB_OFFSET -> c
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> d
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
net.minecraft.world.level.block.SmithingTableBlock -> cpt -> net.minecraft.world.level.block.BlockSmithingTable
    F:net.minecraft.network.chat.IChatBaseComponent CONTAINER_TITLE -> a
    M:net.minecraft.world.ITileInventory getMenuProvider(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
net.minecraft.world.level.block.SmokerBlock -> cpu -> net.minecraft.world.level.block.BlockSmoker
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:void openContainer(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.block.SnowLayerBlock -> cpv -> net.minecraft.world.level.block.BlockSnow
    F:int MAX_HEIGHT -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger LAYERS -> b
    F:int HEIGHT_IMPASSABLE -> d
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getBlockSupportShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> f
    M:net.minecraft.world.phys.shapes.VoxelShape getVisualShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> b
    M:float getShadeBrightness(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean canBeReplaced(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.SnowyDirtBlock -> cpw -> net.minecraft.world.level.block.BlockDirtSnow
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean SNOWY -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:boolean isSnowySetting(net.minecraft.world.level.block.state.IBlockData) -> h
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.SoulFireBlock -> cpx -> net.minecraft.world.level.block.BlockSoulFire
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurviveOnBlock(net.minecraft.world.level.block.state.IBlockData) -> h
    M:boolean canBurn(net.minecraft.world.level.block.state.IBlockData) -> f
net.minecraft.world.level.block.SoulSandBlock -> cpy -> net.minecraft.world.level.block.BlockSlowSand
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    F:int BUBBLE_COLUMN_CHECK_DELAY -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getBlockSupportShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> f
    M:net.minecraft.world.phys.shapes.VoxelShape getVisualShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> b
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:float getShadeBrightness(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
net.minecraft.world.level.block.SoundType -> cpz -> net.minecraft.world.level.block.SoundEffectType
    F:net.minecraft.world.level.block.SoundEffectType WOOD -> a
    F:net.minecraft.world.level.block.SoundEffectType GRAVEL -> b
    F:net.minecraft.world.level.block.SoundEffectType GRASS -> c
    F:net.minecraft.world.level.block.SoundEffectType LILY_PAD -> d
    F:net.minecraft.world.level.block.SoundEffectType STONE -> e
    F:net.minecraft.world.level.block.SoundEffectType METAL -> f
    F:net.minecraft.world.level.block.SoundEffectType GLASS -> g
    F:net.minecraft.world.level.block.SoundEffectType WOOL -> h
    F:net.minecraft.world.level.block.SoundEffectType SAND -> i
    F:net.minecraft.world.level.block.SoundEffectType SNOW -> j
    F:net.minecraft.world.level.block.SoundEffectType POWDER_SNOW -> k
    F:net.minecraft.world.level.block.SoundEffectType LADDER -> l
    F:net.minecraft.world.level.block.SoundEffectType ANVIL -> m
    F:net.minecraft.world.level.block.SoundEffectType SLIME_BLOCK -> n
    F:net.minecraft.world.level.block.SoundEffectType HONEY_BLOCK -> o
    F:net.minecraft.world.level.block.SoundEffectType WET_GRASS -> p
    F:net.minecraft.world.level.block.SoundEffectType CORAL_BLOCK -> q
    F:net.minecraft.world.level.block.SoundEffectType BAMBOO -> r
    F:net.minecraft.world.level.block.SoundEffectType BAMBOO_SAPLING -> s
    F:net.minecraft.world.level.block.SoundEffectType SCAFFOLDING -> t
    F:net.minecraft.world.level.block.SoundEffectType SWEET_BERRY_BUSH -> u
    F:net.minecraft.world.level.block.SoundEffectType CROP -> v
    F:net.minecraft.world.level.block.SoundEffectType HARD_CROP -> w
    F:net.minecraft.world.level.block.SoundEffectType VINE -> x
    F:net.minecraft.world.level.block.SoundEffectType NETHER_WART -> y
    F:net.minecraft.world.level.block.SoundEffectType LANTERN -> z
    F:net.minecraft.world.level.block.SoundEffectType MEDIUM_AMETHYST_BUD -> aa
    F:net.minecraft.world.level.block.SoundEffectType LARGE_AMETHYST_BUD -> ab
    F:net.minecraft.world.level.block.SoundEffectType TUFF -> ac
    F:net.minecraft.world.level.block.SoundEffectType CALCITE -> ad
    F:net.minecraft.world.level.block.SoundEffectType DRIPSTONE_BLOCK -> ae
    F:net.minecraft.world.level.block.SoundEffectType POINTED_DRIPSTONE -> af
    F:net.minecraft.world.level.block.SoundEffectType COPPER -> ag
    F:net.minecraft.world.level.block.SoundEffectType CAVE_VINES -> ah
    F:net.minecraft.world.level.block.SoundEffectType SPORE_BLOSSOM -> ai
    F:net.minecraft.world.level.block.SoundEffectType AZALEA -> aj
    F:net.minecraft.world.level.block.SoundEffectType FLOWERING_AZALEA -> ak
    F:net.minecraft.world.level.block.SoundEffectType MOSS_CARPET -> al
    F:net.minecraft.world.level.block.SoundEffectType MOSS -> am
    F:net.minecraft.world.level.block.SoundEffectType BIG_DRIPLEAF -> an
    F:net.minecraft.world.level.block.SoundEffectType SMALL_DRIPLEAF -> ao
    F:net.minecraft.world.level.block.SoundEffectType ROOTED_DIRT -> ap
    F:net.minecraft.world.level.block.SoundEffectType HANGING_ROOTS -> aq
    F:net.minecraft.world.level.block.SoundEffectType AZALEA_LEAVES -> ar
    F:net.minecraft.world.level.block.SoundEffectType SCULK_SENSOR -> as
    F:net.minecraft.world.level.block.SoundEffectType SCULK_CATALYST -> at
    F:net.minecraft.world.level.block.SoundEffectType SCULK -> au
    F:net.minecraft.world.level.block.SoundEffectType SCULK_VEIN -> av
    F:net.minecraft.world.level.block.SoundEffectType SCULK_SHRIEKER -> aw
    F:net.minecraft.world.level.block.SoundEffectType GLOW_LICHEN -> ax
    F:net.minecraft.world.level.block.SoundEffectType DEEPSLATE -> ay
    F:net.minecraft.world.level.block.SoundEffectType DEEPSLATE_BRICKS -> az
    M:float getVolume() -> a
    M:float getPitch() -> b
    M:net.minecraft.sounds.SoundEffect getBreakSound() -> c
    M:net.minecraft.sounds.SoundEffect getStepSound() -> d
    M:net.minecraft.sounds.SoundEffect getPlaceSound() -> e
    M:net.minecraft.sounds.SoundEffect getHitSound() -> f
    M:net.minecraft.sounds.SoundEffect getFallSound() -> g
net.minecraft.world.level.block.SpawnerBlock -> cqa -> net.minecraft.world.level.block.BlockMobSpawner
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:void spawnAfterBreak(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack,boolean) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.SpongeBlock -> cqb -> net.minecraft.world.level.block.BlockSponge
    F:int MAX_DEPTH -> a
    F:int MAX_COUNT -> b
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void tryAbsorbWater(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:boolean removeWaterBreadthFirstSearch(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
net.minecraft.world.level.block.SporeBlossomBlock -> cqc -> net.minecraft.world.level.block.SporeBlossomBlock
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    F:int ADD_PARTICLE_ATTEMPTS -> b
    F:int PARTICLE_XZ_RADIUS -> c
    F:int PARTICLE_Y_MAX -> d
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
net.minecraft.world.level.block.SpreadingSnowyDirtBlock -> cqd -> net.minecraft.world.level.block.BlockDirtSnowSpreadable
    M:boolean canBeGrass(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> b
    M:boolean canPropagate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> c
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
net.minecraft.world.level.block.StainedGlassBlock -> cqe -> net.minecraft.world.level.block.BlockStainedGlass
    F:net.minecraft.world.item.EnumColor color -> a
    M:net.minecraft.world.item.EnumColor getColor() -> a
net.minecraft.world.level.block.StainedGlassPaneBlock -> cqf -> net.minecraft.world.level.block.BlockStainedGlassPane
    F:net.minecraft.world.item.EnumColor color -> i
    M:net.minecraft.world.item.EnumColor getColor() -> a
net.minecraft.world.level.block.StairBlock -> cqg -> net.minecraft.world.level.block.BlockStairs
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum HALF -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum SHAPE -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> d
    F:net.minecraft.world.phys.shapes.VoxelShape TOP_AABB -> e
    F:net.minecraft.world.phys.shapes.VoxelShape BOTTOM_AABB -> f
    F:net.minecraft.world.phys.shapes.VoxelShape OCTET_NNN -> g
    F:net.minecraft.world.phys.shapes.VoxelShape OCTET_NNP -> h
    F:net.minecraft.world.phys.shapes.VoxelShape OCTET_NPN -> i
    F:net.minecraft.world.phys.shapes.VoxelShape OCTET_NPP -> j
    F:net.minecraft.world.phys.shapes.VoxelShape OCTET_PNN -> k
    F:net.minecraft.world.phys.shapes.VoxelShape OCTET_PNP -> l
    F:net.minecraft.world.phys.shapes.VoxelShape OCTET_PPN -> m
    F:net.minecraft.world.phys.shapes.VoxelShape OCTET_PPP -> n
    M:net.minecraft.world.phys.shapes.VoxelShape makeStairShape(int,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:int getShapeIndex(net.minecraft.world.level.block.state.IBlockData) -> n
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void attack(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void destroy(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:float getExplosionResistance() -> e
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void stepOn(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.Entity) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void wasExploded(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.Explosion) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.properties.BlockPropertyStairsShape getStairsShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> i
    M:boolean canTakeShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> c
    M:boolean isStairs(net.minecraft.world.level.block.state.IBlockData) -> h
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.StandingSignBlock -> cqh -> net.minecraft.world.level.block.BlockFloorSign
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger ROTATION -> d
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.StemBlock -> cqi -> net.minecraft.world.level.block.BlockStem
    F:int MAX_AGE -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE -> b
    F:float AABB_OFFSET -> c
    F:net.minecraft.world.level.block.BlockStemmed fruit -> e
    F:java.util.function.Supplier seedSupplier -> f
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.BlockStemmed getFruit() -> b
net.minecraft.world.level.block.StemGrownBlock -> cqj -> net.minecraft.world.level.block.BlockStemmed
net.minecraft.world.level.block.StoneButtonBlock -> cqk -> net.minecraft.world.level.block.BlockStoneButton
    M:net.minecraft.sounds.SoundEffect getSound(boolean) -> a
net.minecraft.world.level.block.StonecutterBlock -> cql -> net.minecraft.world.level.block.BlockStonecutter
    F:net.minecraft.network.chat.IChatBaseComponent CONTAINER_TITLE -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:net.minecraft.world.ITileInventory getMenuProvider(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.StructureBlock -> cqm -> net.minecraft.world.level.block.BlockStructure
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum MODE -> a
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void trigger(net.minecraft.server.level.WorldServer,net.minecraft.world.level.block.entity.TileEntityStructure) -> a
net.minecraft.world.level.block.StructureVoidBlock -> cqn -> net.minecraft.world.level.block.BlockStructureVoid
    F:double SIZE -> a
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:float getShadeBrightness(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.level.material.EnumPistonReaction getPistonPushReaction(net.minecraft.world.level.block.state.IBlockData) -> d
net.minecraft.world.level.block.SugarCaneBlock -> cqo -> net.minecraft.world.level.block.BlockReed
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE -> a
    F:float AABB_OFFSET -> b
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.SupportType -> cqp -> net.minecraft.world.level.block.EnumBlockSupport
    F:net.minecraft.world.level.block.EnumBlockSupport FULL -> a
    F:net.minecraft.world.level.block.EnumBlockSupport CENTER -> b
    F:net.minecraft.world.level.block.EnumBlockSupport RIGID -> c
    F:int CENTER_SUPPORT_WIDTH -> d
    F:net.minecraft.world.phys.shapes.VoxelShape CENTER_SUPPORT_SHAPE -> e
    F:int RIGID_SUPPORT_WIDTH -> d
    F:net.minecraft.world.phys.shapes.VoxelShape RIGID_SUPPORT_SHAPE -> e
    M:boolean isSupporting(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:boolean isSupporting(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:boolean isSupporting(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
net.minecraft.world.level.block.SweetBerryBushBlock -> cqq -> net.minecraft.world.level.block.BlockSweetBerryBush
    F:float HURT_SPEED_THRESHOLD -> c
    F:int MAX_AGE -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE -> b
    F:net.minecraft.world.phys.shapes.VoxelShape SAPLING_SHAPE -> d
    F:net.minecraft.world.phys.shapes.VoxelShape MID_GROWTH_SHAPE -> e
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.TallFlowerBlock -> cqr -> net.minecraft.world.level.block.BlockTallPlantFlower
    M:boolean canBeReplaced(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.context.BlockActionContext) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.TallGrassBlock -> cqs -> net.minecraft.world.level.block.BlockLongGrass
    F:float AABB_OFFSET -> a
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean isValidBonemealTarget(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean isBonemealSuccess(net.minecraft.world.level.World,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void performBonemeal(net.minecraft.server.level.WorldServer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.TallSeagrassBlock -> cqt -> net.minecraft.world.level.block.TallSeagrassBlock
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum HALF -> b
    F:float AABB_OFFSET -> c
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> d
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:boolean canPlaceLiquid(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.FluidType) -> a
    M:boolean placeLiquid(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.Fluid) -> a
net.minecraft.world.level.block.TargetBlock -> cqu -> net.minecraft.world.level.block.BlockTarget
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger OUTPUT_POWER -> a
    F:int ACTIVATION_TICKS_ARROWS -> b
    F:int ACTIVATION_TICKS_OTHER -> c
    M:void onProjectileHit(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.MovingObjectPositionBlock,net.minecraft.world.entity.projectile.IProjectile) -> a
    M:int updateRedstoneOutput(net.minecraft.world.level.GeneratorAccess,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.MovingObjectPositionBlock,net.minecraft.world.entity.Entity) -> a
    M:int getRedstoneStrength(net.minecraft.world.phys.MovingObjectPositionBlock,net.minecraft.world.phys.Vec3D) -> a
    M:void setOutputPower(net.minecraft.world.level.GeneratorAccess,net.minecraft.world.level.block.state.IBlockData,int,net.minecraft.core.BlockPosition,int) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
net.minecraft.world.level.block.TintedGlassBlock -> cqv -> net.minecraft.world.level.block.TintedGlassBlock
    M:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> c
    M:int getLightBlock(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> g
net.minecraft.world.level.block.TntBlock -> cqw -> net.minecraft.world.level.block.BlockTNT
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean UNSTABLE -> a
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void playerWillDestroy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void wasExploded(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.Explosion) -> a
    M:void explode(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void explode(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void onProjectileHit(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.MovingObjectPositionBlock,net.minecraft.world.entity.projectile.IProjectile) -> a
    M:boolean dropFromExplosion(net.minecraft.world.level.Explosion) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.TorchBlock -> cqx -> net.minecraft.world.level.block.BlockTorch
    F:int AABB_STANDING_OFFSET -> g
    F:net.minecraft.world.phys.shapes.VoxelShape AABB -> h
    F:net.minecraft.core.particles.ParticleParam flameParticle -> i
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.block.TrapDoorBlock -> cqy -> net.minecraft.world.level.block.BlockTrapdoor
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean OPEN -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum HALF -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean POWERED -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> d
    F:int AABB_THICKNESS -> e
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_OPEN_AABB -> f
    F:net.minecraft.world.phys.shapes.VoxelShape WEST_OPEN_AABB -> g
    F:net.minecraft.world.phys.shapes.VoxelShape SOUTH_OPEN_AABB -> h
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_OPEN_AABB -> i
    F:net.minecraft.world.phys.shapes.VoxelShape BOTTOM_AABB -> j
    F:net.minecraft.world.phys.shapes.VoxelShape TOP_AABB -> k
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void playSound(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,boolean) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.block.TrappedChestBlock -> cqz -> net.minecraft.world.level.block.BlockChestTrapped
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.stats.Statistic getOpenChestStat() -> c
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:int getDirectSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
net.minecraft.world.level.block.TripWireBlock -> cra -> net.minecraft.world.level.block.BlockTripwire
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean POWERED -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean ATTACHED -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean DISARMED -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean NORTH -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean EAST -> e
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean SOUTH -> f
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WEST -> g
    F:java.util.Map PROPERTY_BY_DIRECTION -> j
    F:net.minecraft.world.phys.shapes.VoxelShape AABB -> h
    F:net.minecraft.world.phys.shapes.VoxelShape NOT_ATTACHED_AABB -> i
    F:int RECHECK_PERIOD -> k
    F:net.minecraft.world.level.block.BlockTripwireHook hook -> l
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void playerWillDestroy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void updateSource(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void checkPressed(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:boolean shouldConnectTo(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.TripWireHookBlock -> crb -> net.minecraft.world.level.block.BlockTripwireHook
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean POWERED -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean ATTACHED -> c
    F:int WIRE_DIST_MIN -> d
    F:int WIRE_DIST_MAX -> e
    F:int RECHECK_PERIOD -> k
    F:int AABB_OFFSET -> f
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> g
    F:net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> h
    F:net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> i
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> j
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:void calculateState(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean,boolean,int,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void emitState(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,boolean,boolean,boolean,boolean) -> a
    M:void notifyNeighbors(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:int getDirectSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.TurtleEggBlock -> crc -> net.minecraft.world.level.block.BlockTurtleEgg
    F:int MAX_HATCH_LEVEL -> a
    F:int MIN_EGGS -> b
    F:int MAX_EGGS -> c
    F:net.minecraft.world.phys.shapes.VoxelShape ONE_EGG_AABB -> f
    F:net.minecraft.world.phys.shapes.VoxelShape MULTIPLE_EGGS_AABB -> g
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger HATCH -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger EGGS -> e
    M:void stepOn(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.Entity) -> a
    M:void fallOn(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity,float) -> a
    M:void destroyEgg(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity,int) -> a
    M:void decreaseEggs(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:boolean onSand(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:boolean isSand(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:boolean shouldUpdateHatchLevel(net.minecraft.world.level.World) -> a
    M:void playerDestroy(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntity,net.minecraft.world.item.ItemStack) -> a
    M:boolean canBeReplaced(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean canDestroyEgg(net.minecraft.world.level.World,net.minecraft.world.entity.Entity) -> a
net.minecraft.world.level.block.TwistingVinesBlock -> crd -> net.minecraft.world.level.block.BlockTwistingVines
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> f
    M:int getBlocksToGrowWhenBonemealed(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.Block getBodyBlock() -> b
    M:boolean canGrowInto(net.minecraft.world.level.block.state.IBlockData) -> g
net.minecraft.world.level.block.TwistingVinesPlantBlock -> cre -> net.minecraft.world.level.block.BlockTwistingVinesPlant
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> d
    M:net.minecraft.world.level.block.BlockGrowingTop getHeadBlock() -> c
net.minecraft.world.level.block.VineBlock -> crf -> net.minecraft.world.level.block.BlockVine
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean UP -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean NORTH -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean EAST -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean SOUTH -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WEST -> e
    F:java.util.Map PROPERTY_BY_DIRECTION -> f
    F:float AABB_OFFSET -> g
    F:net.minecraft.world.phys.shapes.VoxelShape UP_AABB -> h
    F:net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> i
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> j
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> k
    F:net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> l
    F:java.util.Map shapesCache -> m
    M:net.minecraft.world.phys.shapes.VoxelShape calculateShape(net.minecraft.world.level.block.state.IBlockData) -> h
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> c
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:boolean hasFaces(net.minecraft.world.level.block.state.IBlockData) -> n
    M:int countFaces(net.minecraft.world.level.block.state.IBlockData) -> o
    M:boolean canSupportAtFace(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:boolean isAcceptableNeighbour(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.level.block.state.IBlockData getUpdatedState(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> i
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:net.minecraft.world.level.block.state.IBlockData copyRandomFaces(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.util.RandomSource) -> a
    M:boolean hasHorizontalConnection(net.minecraft.world.level.block.state.IBlockData) -> p
    M:boolean canSpread(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:boolean canBeReplaced(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:net.minecraft.world.level.block.state.properties.BlockStateBoolean getPropertyForFace(net.minecraft.core.EnumDirection) -> a
net.minecraft.world.level.block.WallBannerBlock -> crg -> net.minecraft.world.level.block.BlockBannerWall
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:java.util.Map SHAPES -> b
    M:java.lang.String getDescriptionId() -> g
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.WallBlock -> crh -> net.minecraft.world.level.block.BlockCobbleWall
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean UP -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum EAST_WALL -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum NORTH_WALL -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum SOUTH_WALL -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum WEST_WALL -> e
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean WATERLOGGED -> f
    F:java.util.Map shapeByIndex -> g
    F:java.util.Map collisionShapeByIndex -> h
    F:int WALL_WIDTH -> i
    F:int WALL_HEIGHT -> j
    F:int POST_WIDTH -> k
    F:int POST_COVER_WIDTH -> l
    F:int WALL_COVER_START -> m
    F:int WALL_COVER_END -> n
    M:net.minecraft.world.phys.shapes.VoxelShape applyWallShape(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.level.block.state.properties.BlockPropertyWallHeight,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape) -> a
    M:java.util.Map makeShapes(float,float,float,float,float,float) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:boolean connectsTo(net.minecraft.world.level.block.state.IBlockData,boolean,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean isConnected(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.properties.IBlockState) -> a
    M:boolean isCovered(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape) -> a
    M:net.minecraft.world.level.block.state.IBlockData topUpdate(net.minecraft.world.level.IWorldReader,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData sideUpdate(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.IWorldReader,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean,boolean,boolean,boolean) -> a
    M:boolean shouldRaisePost(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.shapes.VoxelShape) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateSides(net.minecraft.world.level.block.state.IBlockData,boolean,boolean,boolean,boolean,net.minecraft.world.phys.shapes.VoxelShape) -> a
    M:net.minecraft.world.level.block.state.properties.BlockPropertyWallHeight makeWallState(boolean,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape) -> a
    M:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> c
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
net.minecraft.world.level.block.WallSignBlock -> cri -> net.minecraft.world.level.block.BlockWallSign
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> d
    F:float AABB_THICKNESS -> e
    F:float AABB_BOTTOM -> f
    F:float AABB_TOP -> g
    F:java.util.Map AABBS -> h
    M:java.lang.String getDescriptionId() -> g
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.WallSkullBlock -> crj -> net.minecraft.world.level.block.BlockSkullWall
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:java.util.Map AABBS -> b
    M:java.lang.String getDescriptionId() -> g
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.WallTorchBlock -> crk -> net.minecraft.world.level.block.BlockTorchWall
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:float AABB_OFFSET -> b
    F:java.util.Map AABBS -> c
    M:java.lang.String getDescriptionId() -> g
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData) -> h
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.WaterlilyBlock -> crl -> net.minecraft.world.level.block.BlockWaterLily
    F:net.minecraft.world.phys.shapes.VoxelShape AABB -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
net.minecraft.world.level.block.WeatheringCopper -> crm -> net.minecraft.world.level.block.WeatheringCopper
    M:java.util.Optional getPrevious(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.world.level.block.Block getFirst(net.minecraft.world.level.block.Block) -> b
    M:java.util.Optional getPrevious(net.minecraft.world.level.block.state.IBlockData) -> b
    M:java.util.Optional getNext(net.minecraft.world.level.block.Block) -> c
    M:net.minecraft.world.level.block.state.IBlockData getFirst(net.minecraft.world.level.block.state.IBlockData) -> c
    M:java.util.Optional getNext(net.minecraft.world.level.block.state.IBlockData) -> a
    M:float getChanceModifier() -> a
net.minecraft.world.level.block.WeatheringCopper$WeatherState -> crm$a -> net.minecraft.world.level.block.WeatheringCopper$a
    F:net.minecraft.world.level.block.WeatheringCopper$WeatherState UNAFFECTED -> a
    F:net.minecraft.world.level.block.WeatheringCopper$WeatherState EXPOSED -> b
    F:net.minecraft.world.level.block.WeatheringCopper$WeatherState WEATHERED -> c
    F:net.minecraft.world.level.block.WeatheringCopper$WeatherState OXIDIZED -> d
net.minecraft.world.level.block.WeatheringCopperFullBlock -> crn -> net.minecraft.world.level.block.WeatheringCopperFullBlock
    F:net.minecraft.world.level.block.WeatheringCopper$WeatherState weatherState -> d
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:net.minecraft.world.level.block.WeatheringCopper$WeatherState getAge() -> q
    M:java.lang.Enum getAge() -> b
net.minecraft.world.level.block.WeatheringCopperSlabBlock -> cro -> net.minecraft.world.level.block.WeatheringCopperSlabBlock
    F:net.minecraft.world.level.block.WeatheringCopper$WeatherState weatherState -> e
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:net.minecraft.world.level.block.WeatheringCopper$WeatherState getAge() -> q
    M:java.lang.Enum getAge() -> b
net.minecraft.world.level.block.WeatheringCopperStairBlock -> crp -> net.minecraft.world.level.block.WeatheringCopperStairBlock
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:net.minecraft.world.level.block.WeatheringCopper$WeatherState getAge() -> q
    M:java.lang.Enum getAge() -> b
net.minecraft.world.level.block.WebBlock -> crq -> net.minecraft.world.level.block.BlockWeb
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
net.minecraft.world.level.block.WeepingVinesBlock -> crr -> net.minecraft.world.level.block.BlockWeepingVines
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> f
    M:int getBlocksToGrowWhenBonemealed(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.Block getBodyBlock() -> b
    M:boolean canGrowInto(net.minecraft.world.level.block.state.IBlockData) -> g
net.minecraft.world.level.block.WeepingVinesPlantBlock -> crs -> net.minecraft.world.level.block.BlockWeepingVinesPlant
    F:net.minecraft.world.phys.shapes.VoxelShape SHAPE -> d
    M:net.minecraft.world.level.block.BlockGrowingTop getHeadBlock() -> c
net.minecraft.world.level.block.WeightedPressurePlateBlock -> crt -> net.minecraft.world.level.block.BlockPressurePlateWeighted
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger POWER -> d
    F:int maxWeight -> e
    M:int getSignalStrength(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:void playOnSound(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:void playOffSound(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> b
    M:int getSignalForState(net.minecraft.world.level.block.state.IBlockData) -> g
    M:net.minecraft.world.level.block.state.IBlockData setSignalForState(net.minecraft.world.level.block.state.IBlockData,int) -> a
    M:int getPressedTime() -> b
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.WetSpongeBlock -> cru -> net.minecraft.world.level.block.BlockWetSponge
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.block.WitherRoseBlock -> crv -> net.minecraft.world.level.block.BlockWitherRose
    M:boolean mayPlaceOn(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
    M:void animateTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
net.minecraft.world.level.block.WitherSkullBlock -> crw -> net.minecraft.world.level.block.BlockWitherSkull
    F:net.minecraft.world.level.block.state.pattern.ShapeDetector witherPatternFull -> d
    F:net.minecraft.world.level.block.state.pattern.ShapeDetector witherPatternBase -> e
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:void checkSpawn(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.entity.TileEntitySkull) -> a
    M:boolean canSpawnMob(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack) -> b
    M:net.minecraft.world.level.block.state.pattern.ShapeDetector getOrCreateWitherFull() -> q
    M:net.minecraft.world.level.block.state.pattern.ShapeDetector getOrCreateWitherBase() -> u
net.minecraft.world.level.block.WitherWallSkullBlock -> crx -> net.minecraft.world.level.block.BlockWitherSkullWall
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.level.block.WoodButtonBlock -> cry -> net.minecraft.world.level.block.BlockWoodButton
    M:net.minecraft.sounds.SoundEffect getSound(boolean) -> a
net.minecraft.world.level.block.WoolCarpetBlock -> crz -> net.minecraft.world.level.block.BlockCarpet
    F:net.minecraft.world.item.EnumColor color -> b
    M:net.minecraft.world.item.EnumColor getColor() -> b
net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity -> csa -> net.minecraft.world.level.block.entity.TileEntityFurnace
    F:int SLOT_INPUT -> b
    F:int SLOT_FUEL -> c
    F:int SLOT_RESULT -> d
    F:int DATA_LIT_TIME -> e
    F:int DATA_LIT_DURATION -> f
    F:int DATA_COOKING_PROGRESS -> g
    F:int DATA_COOKING_TOTAL_TIME -> h
    F:int NUM_DATA_VALUES -> i
    F:int BURN_TIME_STANDARD -> j
    F:int BURN_COOL_SPEED -> k
    F:net.minecraft.core.NonNullList items -> l
    F:int litTime -> t
    F:int litDuration -> u
    F:int cookingProgress -> v
    F:int cookingTotalTime -> w
    F:net.minecraft.world.inventory.IContainerProperties dataAccess -> m
    F:it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap recipesUsed -> x
    F:net.minecraft.world.item.crafting.RecipeManager$CachedCheck quickCheck -> y
    M:java.util.Map getFuel() -> f
    M:boolean isNeverAFurnaceFuel(net.minecraft.world.item.Item) -> b
    M:void add(java.util.Map,net.minecraft.tags.TagKey,int) -> a
    M:void add(java.util.Map,net.minecraft.world.level.IMaterial,int) -> a
    M:boolean isLit() -> i
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:void serverTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityFurnace) -> a
    M:boolean canBurn(net.minecraft.world.item.crafting.IRecipe,net.minecraft.core.NonNullList,int) -> a
    M:boolean burn(net.minecraft.world.item.crafting.IRecipe,net.minecraft.core.NonNullList,int) -> b
    M:int getBurnDuration(net.minecraft.world.item.ItemStack) -> a
    M:int getTotalCookTime(net.minecraft.world.level.World,net.minecraft.world.level.block.entity.TileEntityFurnace) -> a
    M:boolean isFuel(net.minecraft.world.item.ItemStack) -> b
    M:boolean canPlaceItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.EnumDirection) -> a
    M:boolean canTakeItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.EnumDirection) -> b
    M:int getContainerSize() -> b
    M:boolean isEmpty() -> c
    M:net.minecraft.world.item.ItemStack getItem(int) -> a
    M:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    M:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    M:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean canPlaceItem(int,net.minecraft.world.item.ItemStack) -> b
    M:void clearContent() -> a
    M:void setRecipeUsed(net.minecraft.world.item.crafting.IRecipe) -> a
    M:net.minecraft.world.item.crafting.IRecipe getRecipeUsed() -> d
    M:void awardUsedRecipes(net.minecraft.world.entity.player.EntityHuman) -> b
    M:void awardUsedRecipesAndPopExperience(net.minecraft.server.level.EntityPlayer) -> a
    M:java.util.List getRecipesToAwardAndPopExperience(net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D) -> a
    M:void createExperience(net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D,int,float) -> a
    M:void fillStackedContents(net.minecraft.world.entity.player.AutoRecipeStackManager) -> a
    M:int get(int) -> a
    M:void set(int,int) -> a
    M:int getCount() -> a
net.minecraft.world.level.block.entity.BannerBlockEntity -> csb -> net.minecraft.world.level.block.entity.TileEntityBanner
    F:int MAX_PATTERNS -> a
    F:java.lang.String TAG_PATTERNS -> b
    F:java.lang.String TAG_PATTERN -> c
    F:java.lang.String TAG_COLOR -> d
    F:net.minecraft.network.chat.IChatBaseComponent name -> e
    F:net.minecraft.world.item.EnumColor baseColor -> f
    F:net.minecraft.nbt.NBTTagList itemPatterns -> g
    F:java.util.List patterns -> h
    M:net.minecraft.nbt.NBTTagList getItemPatterns(net.minecraft.world.item.ItemStack) -> a
    M:void fromItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.EnumColor) -> a
    M:void fromItem(net.minecraft.world.item.ItemStack) -> b
    M:void setCustomName(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.network.protocol.game.PacketPlayOutTileEntityData getUpdatePacket() -> a
    M:int getPatternCount(net.minecraft.world.item.ItemStack) -> c
    M:java.util.List getPatterns() -> c
    M:java.util.List createPatterns(net.minecraft.world.item.EnumColor,net.minecraft.nbt.NBTTagList) -> a
    M:void removeLastPattern(net.minecraft.world.item.ItemStack) -> d
    M:net.minecraft.world.item.ItemStack getItem() -> f
    M:net.minecraft.world.item.EnumColor getBaseColor() -> g
    M:net.minecraft.network.protocol.Packet getUpdatePacket() -> h
net.minecraft.world.level.block.entity.BannerPattern -> csc -> net.minecraft.world.level.block.entity.EnumBannerPatternType
    F:java.lang.String hashname -> a
    M:net.minecraft.resources.MinecraftKey location(net.minecraft.resources.ResourceKey,boolean) -> a
    M:java.lang.String getHashname() -> a
    M:net.minecraft.core.Holder byHash(java.lang.String) -> a
net.minecraft.world.level.block.entity.BannerPattern$Builder -> csc$a -> net.minecraft.world.level.block.entity.EnumBannerPatternType$a
    F:java.util.List patterns -> a
    M:net.minecraft.world.level.block.entity.BannerPattern$Builder addPattern(net.minecraft.resources.ResourceKey,net.minecraft.world.item.EnumColor) -> a
    M:net.minecraft.world.level.block.entity.BannerPattern$Builder addPattern(net.minecraft.core.Holder,net.minecraft.world.item.EnumColor) -> a
    M:net.minecraft.world.level.block.entity.BannerPattern$Builder addPattern(com.mojang.datafixers.util.Pair) -> a
    M:net.minecraft.nbt.NBTTagList toListTag() -> a
net.minecraft.world.level.block.entity.BannerPatterns -> csd -> net.minecraft.world.level.block.entity.BannerPatterns
    F:net.minecraft.resources.ResourceKey BASE -> a
    F:net.minecraft.resources.ResourceKey SQUARE_BOTTOM_LEFT -> b
    F:net.minecraft.resources.ResourceKey SQUARE_BOTTOM_RIGHT -> c
    F:net.minecraft.resources.ResourceKey SQUARE_TOP_LEFT -> d
    F:net.minecraft.resources.ResourceKey SQUARE_TOP_RIGHT -> e
    F:net.minecraft.resources.ResourceKey STRIPE_BOTTOM -> f
    F:net.minecraft.resources.ResourceKey STRIPE_TOP -> g
    F:net.minecraft.resources.ResourceKey STRIPE_LEFT -> h
    F:net.minecraft.resources.ResourceKey STRIPE_RIGHT -> i
    F:net.minecraft.resources.ResourceKey STRIPE_CENTER -> j
    F:net.minecraft.resources.ResourceKey STRIPE_MIDDLE -> k
    F:net.minecraft.resources.ResourceKey STRIPE_DOWNRIGHT -> l
    F:net.minecraft.resources.ResourceKey STRIPE_DOWNLEFT -> m
    F:net.minecraft.resources.ResourceKey STRIPE_SMALL -> n
    F:net.minecraft.resources.ResourceKey CROSS -> o
    F:net.minecraft.resources.ResourceKey STRAIGHT_CROSS -> p
    F:net.minecraft.resources.ResourceKey TRIANGLE_BOTTOM -> q
    F:net.minecraft.resources.ResourceKey TRIANGLE_TOP -> r
    F:net.minecraft.resources.ResourceKey TRIANGLES_BOTTOM -> s
    F:net.minecraft.resources.ResourceKey TRIANGLES_TOP -> t
    F:net.minecraft.resources.ResourceKey DIAGONAL_LEFT -> u
    F:net.minecraft.resources.ResourceKey DIAGONAL_RIGHT -> v
    F:net.minecraft.resources.ResourceKey DIAGONAL_LEFT_MIRROR -> w
    F:net.minecraft.resources.ResourceKey DIAGONAL_RIGHT_MIRROR -> x
    F:net.minecraft.resources.ResourceKey CIRCLE_MIDDLE -> y
    F:net.minecraft.resources.ResourceKey RHOMBUS_MIDDLE -> z
    M:net.minecraft.resources.ResourceKey create(java.lang.String) -> a
    M:net.minecraft.world.level.block.entity.EnumBannerPatternType bootstrap(net.minecraft.core.IRegistry) -> a
net.minecraft.world.level.block.entity.BarrelBlockEntity -> cse -> net.minecraft.world.level.block.entity.TileEntityBarrel
    F:net.minecraft.core.NonNullList items -> b
    F:net.minecraft.world.level.block.entity.ContainerOpenersCounter openersCounter -> c
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:int getContainerSize() -> b
    M:net.minecraft.core.NonNullList getItems() -> f
    M:void setItems(net.minecraft.core.NonNullList) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getDefaultName() -> g
    M:net.minecraft.world.inventory.Container createMenu(int,net.minecraft.world.entity.player.PlayerInventory) -> a
    M:void recheckOpen() -> i
    M:void updateBlockState(net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void playSound(net.minecraft.world.level.block.state.IBlockData,net.minecraft.sounds.SoundEffect) -> a
    M:void onOpen(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void onClose(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void openerCountChanged(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,int,int) -> a
    M:boolean isOwnContainer(net.minecraft.world.entity.player.EntityHuman) -> a
net.minecraft.world.level.block.entity.BaseContainerBlockEntity -> csf -> net.minecraft.world.level.block.entity.TileEntityContainer
    F:net.minecraft.world.ChestLock lockKey -> b
    F:net.minecraft.network.chat.IChatBaseComponent name -> c
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:void setCustomName(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:boolean canOpen(net.minecraft.world.entity.player.EntityHuman) -> d
    M:boolean canUnlock(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.ChestLock,net.minecraft.network.chat.IChatBaseComponent) -> a
net.minecraft.world.level.block.entity.BeaconBlockEntity -> csg -> net.minecraft.world.level.block.entity.TileEntityBeacon
    F:int MAX_LEVELS -> f
    F:java.util.Set VALID_EFFECTS -> g
    F:int DATA_LEVELS -> b
    F:int DATA_PRIMARY -> c
    F:int DATA_SECONDARY -> d
    F:int NUM_DATA_VALUES -> e
    F:int BLOCKS_CHECK_PER_TICK -> h
    F:java.util.List beamSections -> i
    F:java.util.List checkingBeamSections -> j
    F:int levels -> k
    F:int lastCheckY -> l
    F:net.minecraft.world.effect.MobEffectList primaryPower -> m
    F:net.minecraft.world.effect.MobEffectList secondaryPower -> q
    F:net.minecraft.network.chat.IChatBaseComponent name -> r
    F:net.minecraft.world.ChestLock lockKey -> s
    F:net.minecraft.world.inventory.IContainerProperties dataAccess -> t
    M:void tick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityBeacon) -> a
    M:int updateBase(net.minecraft.world.level.World,int,int,int) -> a
    M:void applyEffects(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,int,net.minecraft.world.effect.MobEffectList,net.minecraft.world.effect.MobEffectList) -> a
    M:void playSound(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.sounds.SoundEffect) -> a
    M:java.util.List getBeamSections() -> c
    M:net.minecraft.network.protocol.game.PacketPlayOutTileEntityData getUpdatePacket() -> f
    M:net.minecraft.world.effect.MobEffectList getValidEffectById(int) -> a
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:void setCustomName(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void setLevel(net.minecraft.world.level.World) -> a
    M:net.minecraft.network.protocol.Packet getUpdatePacket() -> h
    M:int get(int) -> a
    M:void set(int,int) -> a
    M:int getCount() -> a
net.minecraft.world.level.block.entity.BeaconBlockEntity$BeaconBeamSection -> csg$a -> net.minecraft.world.level.block.entity.TileEntityBeacon$BeaconColorTracker
    F:int height -> b
    M:void increaseHeight() -> a
    M:int getHeight() -> c
net.minecraft.world.level.block.entity.BedBlockEntity -> csh -> net.minecraft.world.level.block.entity.TileEntityBed
    F:net.minecraft.world.item.EnumColor color -> a
    M:net.minecraft.network.protocol.game.PacketPlayOutTileEntityData getUpdatePacket() -> c
    M:net.minecraft.world.item.EnumColor getColor() -> d
    M:void setColor(net.minecraft.world.item.EnumColor) -> a
    M:net.minecraft.network.protocol.Packet getUpdatePacket() -> h
net.minecraft.world.level.block.entity.BeehiveBlockEntity -> csi -> net.minecraft.world.level.block.entity.TileEntityBeehive
    F:java.lang.String TAG_FLOWER_POS -> a
    F:java.lang.String MIN_OCCUPATION_TICKS -> b
    F:java.lang.String ENTITY_DATA -> c
    F:java.lang.String TICKS_IN_HIVE -> d
    F:java.lang.String HAS_NECTAR -> e
    F:java.lang.String BEES -> f
    F:java.util.List IGNORED_BEE_TAGS -> i
    F:int MAX_OCCUPANTS -> g
    F:int MIN_TICKS_BEFORE_REENTERING_HIVE -> j
    F:int MIN_OCCUPATION_TICKS_NECTAR -> k
    F:int MIN_OCCUPATION_TICKS_NECTARLESS -> h
    F:java.util.List stored -> l
    F:net.minecraft.core.BlockPosition savedFlowerPos -> m
    M:void setChanged() -> e
    M:boolean isFireNearby() -> c
    M:boolean isEmpty() -> d
    M:boolean isFull() -> f
    M:void emptyAllLivingFromHive(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityBeehive$ReleaseStatus) -> a
    M:java.util.List releaseAllOccupants(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityBeehive$ReleaseStatus) -> a
    M:void addOccupant(net.minecraft.world.entity.Entity,boolean) -> a
    M:int getOccupantCount() -> g
    M:int getHoneyLevel(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isSedated() -> i
    M:void addOccupantWithPresetTicks(net.minecraft.world.entity.Entity,boolean,int) -> a
    M:void storeBee(net.minecraft.nbt.NBTTagCompound,int,boolean) -> a
    M:boolean releaseOccupant(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityBeehive$HiveBee,java.util.List,net.minecraft.world.level.block.entity.TileEntityBeehive$ReleaseStatus,net.minecraft.core.BlockPosition) -> a
    M:void removeIgnoredBeeTags(net.minecraft.nbt.NBTTagCompound) -> d
    M:void setBeeReleaseData(int,net.minecraft.world.entity.animal.EntityBee) -> a
    M:boolean hasSavedFlowerPos() -> t
    M:void tickOccupants(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,java.util.List,net.minecraft.core.BlockPosition) -> a
    M:void serverTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityBeehive) -> a
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.nbt.NBTTagList writeBees() -> j
net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeData -> csi$a -> net.minecraft.world.level.block.entity.TileEntityBeehive$HiveBee
    F:net.minecraft.nbt.NBTTagCompound entityData -> a
    F:int ticksInHive -> b
    F:int minOccupationTicks -> c
net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeReleaseStatus -> csi$b -> net.minecraft.world.level.block.entity.TileEntityBeehive$ReleaseStatus
    F:net.minecraft.world.level.block.entity.TileEntityBeehive$ReleaseStatus HONEY_DELIVERED -> a
    F:net.minecraft.world.level.block.entity.TileEntityBeehive$ReleaseStatus BEE_RELEASED -> b
    F:net.minecraft.world.level.block.entity.TileEntityBeehive$ReleaseStatus EMERGENCY -> c
net.minecraft.world.level.block.entity.BellBlockEntity -> csj -> net.minecraft.world.level.block.entity.TileEntityBell
    F:int DURATION -> d
    F:int GLOW_DURATION -> e
    F:int MIN_TICKS_BETWEEN_SEARCHES -> f
    F:int MAX_RESONATION_TICKS -> g
    F:int TICKS_BEFORE_RESONATION -> h
    F:int SEARCH_RADIUS -> i
    F:int HEAR_BELL_RADIUS -> j
    F:int HIGHLIGHT_RAIDERS_RADIUS -> k
    F:long lastRingTimestamp -> l
    F:int ticks -> a
    F:boolean shaking -> b
    F:net.minecraft.core.EnumDirection clickDirection -> c
    F:java.util.List nearbyEntities -> m
    F:boolean resonating -> q
    F:int resonationTicks -> r
    M:void tick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityBell,net.minecraft.world.level.block.entity.BellBlockEntity$ResonationEndAction) -> a
    M:void clientTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityBell) -> a
    M:void serverTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityBell) -> b
    M:void onHit(net.minecraft.core.EnumDirection) -> a
    M:void updateEntities() -> c
    M:boolean areRaidersNearby(net.minecraft.core.BlockPosition,java.util.List) -> a
    M:void makeRaidersGlow(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,java.util.List) -> a
    M:void showBellParticles(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,java.util.List) -> b
    M:boolean isRaiderWithinRange(net.minecraft.core.BlockPosition,net.minecraft.world.entity.EntityLiving) -> a
    M:void glow(net.minecraft.world.entity.EntityLiving) -> a
net.minecraft.world.level.block.entity.BellBlockEntity$ResonationEndAction -> csj$a -> net.minecraft.world.level.block.entity.TileEntityBell$a
net.minecraft.world.level.block.entity.BlastFurnaceBlockEntity -> csk -> net.minecraft.world.level.block.entity.TileEntityBlastFurnace
    M:net.minecraft.network.chat.IChatBaseComponent getDefaultName() -> g
    M:int getBurnDuration(net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.inventory.Container createMenu(int,net.minecraft.world.entity.player.PlayerInventory) -> a
net.minecraft.world.level.block.entity.BlockEntity -> csl -> net.minecraft.world.level.block.entity.TileEntity
    F:org.slf4j.Logger LOGGER -> b
    F:net.minecraft.world.level.block.entity.TileEntityTypes type -> c
    F:net.minecraft.world.level.World level -> n
    F:net.minecraft.core.BlockPosition worldPosition -> o
    F:boolean remove -> p
    F:net.minecraft.world.level.block.state.IBlockData blockState -> d
    M:net.minecraft.core.BlockPosition getPosFromTag(net.minecraft.nbt.NBTTagCompound) -> c
    M:net.minecraft.world.level.World getLevel() -> k
    M:void setLevel(net.minecraft.world.level.World) -> a
    M:boolean hasLevel() -> l
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.nbt.NBTTagCompound saveWithFullMetadata() -> m
    M:net.minecraft.nbt.NBTTagCompound saveWithId() -> n
    M:net.minecraft.nbt.NBTTagCompound saveWithoutMetadata() -> o
    M:void saveId(net.minecraft.nbt.NBTTagCompound) -> d
    M:void addEntityType(net.minecraft.nbt.NBTTagCompound,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:void saveToItem(net.minecraft.world.item.ItemStack) -> e
    M:void saveMetadata(net.minecraft.nbt.NBTTagCompound) -> e
    M:net.minecraft.world.level.block.entity.TileEntity loadStatic(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.nbt.NBTTagCompound) -> a
    M:void setChanged() -> e
    M:void setChanged(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.core.BlockPosition getBlockPos() -> p
    M:net.minecraft.world.level.block.state.IBlockData getBlockState() -> q
    M:net.minecraft.network.protocol.Packet getUpdatePacket() -> h
    M:boolean isRemoved() -> r
    M:void clearRemoved() -> s
    M:void fillCrashReportCategory(net.minecraft.CrashReportSystemDetails) -> a
    M:boolean onlyOpCanSetNbt() -> u
    M:net.minecraft.world.level.block.entity.TileEntityTypes getType() -> v
    M:void setBlockState(net.minecraft.world.level.block.state.IBlockData) -> b
net.minecraft.world.level.block.entity.BlockEntityTicker -> csm -> net.minecraft.world.level.block.entity.BlockEntityTicker
net.minecraft.world.level.block.entity.BlockEntityType -> csn -> net.minecraft.world.level.block.entity.TileEntityTypes
    F:net.minecraft.world.level.block.entity.TileEntityTypes FURNACE -> a
    F:net.minecraft.world.level.block.entity.TileEntityTypes CHEST -> b
    F:net.minecraft.world.level.block.entity.TileEntityTypes TRAPPED_CHEST -> c
    F:net.minecraft.world.level.block.entity.TileEntityTypes ENDER_CHEST -> d
    F:net.minecraft.world.level.block.entity.TileEntityTypes JUKEBOX -> e
    F:net.minecraft.world.level.block.entity.TileEntityTypes DISPENSER -> f
    F:net.minecraft.world.level.block.entity.TileEntityTypes DROPPER -> g
    F:net.minecraft.world.level.block.entity.TileEntityTypes SIGN -> h
    F:net.minecraft.world.level.block.entity.TileEntityTypes MOB_SPAWNER -> i
    F:net.minecraft.world.level.block.entity.TileEntityTypes PISTON -> j
    F:net.minecraft.world.level.block.entity.TileEntityTypes BREWING_STAND -> k
    F:net.minecraft.world.level.block.entity.TileEntityTypes ENCHANTING_TABLE -> l
    F:net.minecraft.world.level.block.entity.TileEntityTypes END_PORTAL -> m
    F:net.minecraft.world.level.block.entity.TileEntityTypes BEACON -> n
    F:net.minecraft.world.level.block.entity.TileEntityTypes SKULL -> o
    F:net.minecraft.world.level.block.entity.TileEntityTypes DAYLIGHT_DETECTOR -> p
    F:net.minecraft.world.level.block.entity.TileEntityTypes HOPPER -> q
    F:net.minecraft.world.level.block.entity.TileEntityTypes COMPARATOR -> r
    F:net.minecraft.world.level.block.entity.TileEntityTypes BANNER -> s
    F:net.minecraft.world.level.block.entity.TileEntityTypes STRUCTURE_BLOCK -> t
    F:net.minecraft.world.level.block.entity.TileEntityTypes END_GATEWAY -> u
    F:net.minecraft.world.level.block.entity.TileEntityTypes COMMAND_BLOCK -> v
    F:net.minecraft.world.level.block.entity.TileEntityTypes SHULKER_BOX -> w
    F:net.minecraft.world.level.block.entity.TileEntityTypes BED -> x
    F:net.minecraft.world.level.block.entity.TileEntityTypes CONDUIT -> y
    F:net.minecraft.world.level.block.entity.TileEntityTypes BARREL -> z
    M:net.minecraft.resources.MinecraftKey getKey(net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:net.minecraft.world.level.block.entity.TileEntityTypes register(java.lang.String,net.minecraft.world.level.block.entity.BlockEntityType$Builder) -> a
    M:net.minecraft.world.level.block.entity.TileEntity create(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isValid(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.TileEntity getBlockEntity(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.block.entity.BlockEntityType$BlockEntitySupplier -> csn$a -> net.minecraft.world.level.block.entity.TileEntityTypes$a
net.minecraft.world.level.block.entity.BlockEntityType$Builder -> csn$b -> net.minecraft.world.level.block.entity.TileEntityTypes$b
    F:net.minecraft.world.level.block.entity.BlockEntityType$BlockEntitySupplier factory -> a
    F:java.util.Set validBlocks -> b
    M:net.minecraft.world.level.block.entity.BlockEntityType$Builder of(net.minecraft.world.level.block.entity.BlockEntityType$BlockEntitySupplier,net.minecraft.world.level.block.Block[]) -> a
    M:net.minecraft.world.level.block.entity.TileEntityTypes build(com.mojang.datafixers.types.Type) -> a
net.minecraft.world.level.block.entity.BrewingStandBlockEntity -> cso -> net.minecraft.world.level.block.entity.TileEntityBrewingStand
    F:int INGREDIENT_SLOT -> g
    F:int FUEL_SLOT -> h
    F:int FUEL_USES -> b
    F:int DATA_BREW_TIME -> c
    F:int DATA_FUEL_USES -> d
    F:int NUM_DATA_VALUES -> e
    F:net.minecraft.core.NonNullList items -> l
    F:int brewTime -> m
    F:net.minecraft.world.item.Item ingredient -> r
    F:int fuel -> s
    F:net.minecraft.world.inventory.IContainerProperties dataAccess -> f
    M:net.minecraft.network.chat.IChatBaseComponent getDefaultName() -> g
    M:int getContainerSize() -> b
    M:boolean isEmpty() -> c
    M:void serverTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityBrewingStand) -> a
    M:boolean isBrewable(net.minecraft.core.NonNullList) -> a
    M:void doBrew(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.NonNullList) -> a
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.world.item.ItemStack getItem(int) -> a
    M:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    M:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    M:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean canPlaceItem(int,net.minecraft.world.item.ItemStack) -> b
    M:boolean canPlaceItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.EnumDirection) -> a
    M:boolean canTakeItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.EnumDirection) -> b
    M:void clearContent() -> a
    M:net.minecraft.world.inventory.Container createMenu(int,net.minecraft.world.entity.player.PlayerInventory) -> a
    M:int get(int) -> a
    M:void set(int,int) -> a
    M:int getCount() -> a
net.minecraft.world.level.block.entity.CampfireBlockEntity -> csp -> net.minecraft.world.level.block.entity.TileEntityCampfire
    F:int BURN_COOL_SPEED -> a
    F:int NUM_SLOTS -> b
    F:net.minecraft.core.NonNullList items -> c
    F:net.minecraft.world.item.crafting.RecipeManager$CachedCheck quickCheck -> f
    M:void cookTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityCampfire) -> a
    M:void cooldownTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityCampfire) -> b
    M:void particleTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityCampfire) -> c
    M:net.minecraft.core.NonNullList getItems() -> c
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.network.protocol.game.PacketPlayOutTileEntityData getUpdatePacket() -> d
    M:java.util.Optional getCookableRecipe(net.minecraft.world.item.ItemStack) -> a
    M:boolean placeFood(net.minecraft.world.entity.Entity,net.minecraft.world.item.ItemStack,int) -> a
    M:void markUpdated() -> g
    M:void clearContent() -> a
    M:void dowse() -> f
    M:net.minecraft.network.protocol.Packet getUpdatePacket() -> h
net.minecraft.world.level.block.entity.ChestBlockEntity -> csq -> net.minecraft.world.level.block.entity.TileEntityChest
    F:int EVENT_SET_OPEN_COUNT -> b
    F:net.minecraft.core.NonNullList items -> c
    F:net.minecraft.world.level.block.entity.ContainerOpenersCounter openersCounter -> f
    F:net.minecraft.world.level.block.entity.ChestLidController chestLidController -> i
    M:int getContainerSize() -> b
    M:net.minecraft.network.chat.IChatBaseComponent getDefaultName() -> g
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:void lidAnimateTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityChest) -> a
    M:void playSound(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.sounds.SoundEffect) -> a
    M:net.minecraft.core.NonNullList getItems() -> f
    M:void setItems(net.minecraft.core.NonNullList) -> a
    M:float getOpenNess(float) -> a
    M:int getOpenCount(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:void swapContents(net.minecraft.world.level.block.entity.TileEntityChest,net.minecraft.world.level.block.entity.TileEntityChest) -> a
    M:net.minecraft.world.inventory.Container createMenu(int,net.minecraft.world.entity.player.PlayerInventory) -> a
    M:void recheckOpen() -> i
    M:void signalOpenCount(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,int,int) -> a
    M:void onOpen(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void onClose(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void openerCountChanged(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,int,int) -> a
    M:boolean isOwnContainer(net.minecraft.world.entity.player.EntityHuman) -> a
net.minecraft.world.level.block.entity.ChestLidController -> csr -> net.minecraft.world.level.block.entity.ChestLidController
    F:boolean shouldBeOpen -> a
    F:float openness -> b
    F:float oOpenness -> c
    M:void tickLid() -> a
    M:float getOpenness(float) -> a
    M:void shouldBeOpen(boolean) -> a
net.minecraft.world.level.block.entity.CommandBlockEntity -> css -> net.minecraft.world.level.block.entity.TileEntityCommand
    F:boolean powered -> a
    F:boolean auto -> b
    F:boolean conditionMet -> c
    F:net.minecraft.world.level.CommandBlockListenerAbstract commandBlock -> d
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean onlyOpCanSetNbt() -> u
    M:net.minecraft.world.level.CommandBlockListenerAbstract getCommandBlock() -> c
    M:void setPowered(boolean) -> a
    M:boolean isPowered() -> d
    M:boolean isAutomatic() -> f
    M:void setAutomatic(boolean) -> b
    M:void onModeSwitch() -> g
    M:void scheduleTick() -> x
    M:boolean wasConditionMet() -> i
    M:boolean markConditionMet() -> j
    M:net.minecraft.world.level.block.entity.TileEntityCommand$Type getMode() -> t
    M:boolean isConditional() -> w
    M:void setCommand(java.lang.String) -> a
    M:net.minecraft.server.level.WorldServer getLevel() -> e
    M:void onUpdated() -> f
    M:net.minecraft.world.phys.Vec3D getPosition() -> g
    M:net.minecraft.commands.CommandListenerWrapper createCommandSourceStack() -> i
net.minecraft.world.level.block.entity.CommandBlockEntity$Mode -> css$a -> net.minecraft.world.level.block.entity.TileEntityCommand$Type
    F:net.minecraft.world.level.block.entity.TileEntityCommand$Type SEQUENCE -> a
    F:net.minecraft.world.level.block.entity.TileEntityCommand$Type AUTO -> b
    F:net.minecraft.world.level.block.entity.TileEntityCommand$Type REDSTONE -> c
net.minecraft.world.level.block.entity.ComparatorBlockEntity -> cst -> net.minecraft.world.level.block.entity.TileEntityComparator
    F:int output -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:int getOutputSignal() -> c
    M:void setOutputSignal(int) -> a
net.minecraft.world.level.block.entity.ConduitBlockEntity -> csu -> net.minecraft.world.level.block.entity.TileEntityConduit
    F:int BLOCK_REFRESH_RATE -> b
    F:int EFFECT_DURATION -> c
    F:float ROTATION_SPEED -> d
    F:int MIN_ACTIVE_SIZE -> e
    F:int MIN_KILL_SIZE -> f
    F:int KILL_RANGE -> g
    F:int tickCount -> a
    F:float activeRotation -> i
    F:boolean isActive -> j
    F:boolean isHunting -> k
    F:java.util.List effectBlocks -> l
    F:net.minecraft.world.entity.EntityLiving destroyTarget -> m
    F:java.util.UUID destroyTargetUUID -> q
    F:long nextAmbientSoundActivation -> r
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.network.protocol.game.PacketPlayOutTileEntityData getUpdatePacket() -> c
    M:void clientTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityConduit) -> a
    M:void serverTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityConduit) -> b
    M:void updateHunting(net.minecraft.world.level.block.entity.TileEntityConduit,java.util.List) -> a
    M:boolean updateShape(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,java.util.List) -> a
    M:void applyEffects(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,java.util.List) -> b
    M:void updateDestroyTarget(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,java.util.List,net.minecraft.world.level.block.entity.TileEntityConduit) -> a
    M:void updateClientTarget(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.entity.TileEntityConduit) -> a
    M:net.minecraft.world.phys.AxisAlignedBB getDestroyRangeAABB(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.entity.EntityLiving findDestroyTarget(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,java.util.UUID) -> a
    M:void animationTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,java.util.List,net.minecraft.world.entity.Entity,int) -> a
    M:boolean isActive() -> d
    M:boolean isHunting() -> f
    M:void setHunting(boolean) -> a
    M:float getActiveRotation(float) -> a
    M:net.minecraft.network.protocol.Packet getUpdatePacket() -> h
net.minecraft.world.level.block.entity.ContainerOpenersCounter -> csv -> net.minecraft.world.level.block.entity.ContainerOpenersCounter
    F:int CHECK_TICK_DELAY -> a
    F:int openCount -> b
    M:void incrementOpeners(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void decrementOpeners(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:int getOpenCount(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void recheckOpeners(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> c
    M:int getOpenerCount() -> a
    M:void scheduleRecheck(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> d
net.minecraft.world.level.block.entity.DaylightDetectorBlockEntity -> csw -> net.minecraft.world.level.block.entity.TileEntityLightDetector
net.minecraft.world.level.block.entity.DispenserBlockEntity -> csx -> net.minecraft.world.level.block.entity.TileEntityDispenser
    F:int CONTAINER_SIZE -> b
    F:net.minecraft.core.NonNullList items -> c
    M:int getContainerSize() -> b
    M:int getRandomSlot(net.minecraft.util.RandomSource) -> a
    M:int addItem(net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getDefaultName() -> g
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.core.NonNullList getItems() -> f
    M:void setItems(net.minecraft.core.NonNullList) -> a
    M:net.minecraft.world.inventory.Container createMenu(int,net.minecraft.world.entity.player.PlayerInventory) -> a
net.minecraft.world.level.block.entity.DropperBlockEntity -> csy -> net.minecraft.world.level.block.entity.TileEntityDropper
    M:net.minecraft.network.chat.IChatBaseComponent getDefaultName() -> g
net.minecraft.world.level.block.entity.EnchantmentTableBlockEntity -> csz -> net.minecraft.world.level.block.entity.TileEntityEnchantTable
    F:int time -> a
    F:float flip -> b
    F:float oFlip -> c
    F:float flipT -> d
    F:float flipA -> e
    F:float open -> f
    F:float oOpen -> g
    F:float rot -> h
    F:float oRot -> i
    F:float tRot -> j
    F:net.minecraft.util.RandomSource RANDOM -> k
    F:net.minecraft.network.chat.IChatBaseComponent name -> l
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void bookAnimationTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityEnchantTable) -> a
    M:void setCustomName(net.minecraft.network.chat.IChatBaseComponent) -> a
net.minecraft.world.level.block.entity.EnderChestBlockEntity -> cta -> net.minecraft.world.level.block.entity.TileEntityEnderChest
    F:net.minecraft.world.level.block.entity.ChestLidController chestLidController -> a
    F:net.minecraft.world.level.block.entity.ContainerOpenersCounter openersCounter -> b
    M:void lidAnimateTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityEnderChest) -> a
    M:void startOpen(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void stopOpen(net.minecraft.world.entity.player.EntityHuman) -> b
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> c
    M:void recheckOpen() -> c
    M:float getOpenNess(float) -> a
    M:void onOpen(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void onClose(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void openerCountChanged(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,int,int) -> a
    M:boolean isOwnContainer(net.minecraft.world.entity.player.EntityHuman) -> a
net.minecraft.world.level.block.entity.FurnaceBlockEntity -> ctb -> net.minecraft.world.level.block.entity.TileEntityFurnaceFurnace
    M:net.minecraft.network.chat.IChatBaseComponent getDefaultName() -> g
    M:net.minecraft.world.inventory.Container createMenu(int,net.minecraft.world.entity.player.PlayerInventory) -> a
net.minecraft.world.level.block.entity.Hopper -> ctc -> net.minecraft.world.level.block.entity.IHopper
net.minecraft.world.level.block.entity.HopperBlockEntity -> ctd -> net.minecraft.world.level.block.entity.TileEntityHopper
    F:int MOVE_ITEM_SPEED -> c
    F:int HOPPER_CONTAINER_SIZE -> f
    F:net.minecraft.core.NonNullList items -> i
    F:int cooldownTime -> j
    F:long tickedGameTime -> k
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:int getContainerSize() -> b
    M:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    M:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getDefaultName() -> g
    M:void pushItemsTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityHopper) -> a
    M:boolean tryMoveItems(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityHopper,java.util.function.BooleanSupplier) -> a
    M:boolean inventoryFull() -> j
    M:boolean ejectItems(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.IInventory) -> a
    M:java.util.stream.IntStream getSlots(net.minecraft.world.IInventory,net.minecraft.core.EnumDirection) -> a
    M:boolean isFullContainer(net.minecraft.world.IInventory,net.minecraft.core.EnumDirection) -> b
    M:boolean isEmptyContainer(net.minecraft.world.IInventory,net.minecraft.core.EnumDirection) -> c
    M:boolean suckInItems(net.minecraft.world.level.World,net.minecraft.world.level.block.entity.IHopper) -> a
    M:boolean tryTakeInItemFromSlot(net.minecraft.world.level.block.entity.IHopper,net.minecraft.world.IInventory,int,net.minecraft.core.EnumDirection) -> a
    M:boolean addItem(net.minecraft.world.IInventory,net.minecraft.world.entity.item.EntityItem) -> a
    M:net.minecraft.world.item.ItemStack addItem(net.minecraft.world.IInventory,net.minecraft.world.IInventory,net.minecraft.world.item.ItemStack,net.minecraft.core.EnumDirection) -> a
    M:boolean canPlaceItemInContainer(net.minecraft.world.IInventory,net.minecraft.world.item.ItemStack,int,net.minecraft.core.EnumDirection) -> a
    M:boolean canTakeItemFromContainer(net.minecraft.world.IInventory,net.minecraft.world.item.ItemStack,int,net.minecraft.core.EnumDirection) -> b
    M:net.minecraft.world.item.ItemStack tryMoveInItem(net.minecraft.world.IInventory,net.minecraft.world.IInventory,net.minecraft.world.item.ItemStack,int,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.IInventory getAttachedContainer(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:net.minecraft.world.IInventory getSourceContainer(net.minecraft.world.level.World,net.minecraft.world.level.block.entity.IHopper) -> c
    M:java.util.List getItemsAtAndAbove(net.minecraft.world.level.World,net.minecraft.world.level.block.entity.IHopper) -> b
    M:net.minecraft.world.IInventory getContainerAt(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.IInventory getContainerAt(net.minecraft.world.level.World,double,double,double) -> a
    M:boolean canMergeItems(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    M:void setCooldown(int) -> c
    M:boolean isOnCooldown() -> t
    M:boolean isOnCustomCooldown() -> w
    M:net.minecraft.core.NonNullList getItems() -> f
    M:void setItems(net.minecraft.core.NonNullList) -> a
    M:void entityInside(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.Entity,net.minecraft.world.level.block.entity.TileEntityHopper) -> a
    M:net.minecraft.world.inventory.Container createMenu(int,net.minecraft.world.entity.player.PlayerInventory) -> a
net.minecraft.world.level.block.entity.JigsawBlockEntity -> cte -> net.minecraft.world.level.block.entity.TileEntityJigsaw
    F:java.lang.String TARGET -> a
    F:java.lang.String POOL -> b
    F:java.lang.String JOINT -> c
    F:java.lang.String NAME -> d
    F:java.lang.String FINAL_STATE -> e
    F:net.minecraft.resources.MinecraftKey name -> f
    F:net.minecraft.resources.MinecraftKey target -> g
    F:net.minecraft.resources.ResourceKey pool -> h
    F:net.minecraft.world.level.block.entity.TileEntityJigsaw$JointType joint -> i
    F:java.lang.String finalState -> j
    M:net.minecraft.resources.MinecraftKey getName() -> c
    M:net.minecraft.resources.MinecraftKey getTarget() -> d
    M:net.minecraft.resources.ResourceKey getPool() -> f
    M:java.lang.String getFinalState() -> g
    M:net.minecraft.world.level.block.entity.TileEntityJigsaw$JointType getJoint() -> i
    M:void setName(net.minecraft.resources.MinecraftKey) -> a
    M:void setTarget(net.minecraft.resources.MinecraftKey) -> b
    M:void setPool(net.minecraft.resources.ResourceKey) -> a
    M:void setFinalState(java.lang.String) -> a
    M:void setJoint(net.minecraft.world.level.block.entity.TileEntityJigsaw$JointType) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.network.protocol.game.PacketPlayOutTileEntityData getUpdatePacket() -> j
    M:void generate(net.minecraft.server.level.WorldServer,int,boolean) -> a
    M:net.minecraft.network.protocol.Packet getUpdatePacket() -> h
net.minecraft.world.level.block.entity.JigsawBlockEntity$JointType -> cte$a -> net.minecraft.world.level.block.entity.TileEntityJigsaw$JointType
    F:net.minecraft.world.level.block.entity.TileEntityJigsaw$JointType ROLLABLE -> a
    F:net.minecraft.world.level.block.entity.TileEntityJigsaw$JointType ALIGNED -> b
    F:java.lang.String name -> c
    M:java.lang.String getSerializedName() -> c
    M:java.util.Optional byName(java.lang.String) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getTranslatedName() -> a
net.minecraft.world.level.block.entity.JukeboxBlockEntity -> ctf -> net.minecraft.world.level.block.entity.TileEntityJukeBox
    F:net.minecraft.world.item.ItemStack record -> a
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.world.item.ItemStack getRecord() -> c
    M:void setRecord(net.minecraft.world.item.ItemStack) -> a
    M:void clearContent() -> a
net.minecraft.world.level.block.entity.LecternBlockEntity -> ctg -> net.minecraft.world.level.block.entity.TileEntityLectern
    F:int DATA_PAGE -> a
    F:int NUM_DATA -> b
    F:int SLOT_BOOK -> c
    F:int NUM_SLOTS -> d
    F:net.minecraft.world.IInventory bookAccess -> e
    F:net.minecraft.world.inventory.IContainerProperties dataAccess -> f
    F:net.minecraft.world.item.ItemStack book -> g
    F:int page -> h
    F:int pageCount -> i
    M:net.minecraft.world.item.ItemStack getBook() -> c
    M:boolean hasBook() -> f
    M:void setBook(net.minecraft.world.item.ItemStack) -> a
    M:void onBookItemRemove() -> j
    M:void setBook(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void setPage(int) -> a
    M:int getPage() -> g
    M:int getRedstoneSignal() -> i
    M:net.minecraft.world.item.ItemStack resolveBook(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.EntityHuman) -> b
    M:net.minecraft.commands.CommandListenerWrapper createCommandSourceStack(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean onlyOpCanSetNbt() -> u
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:void clearContent() -> a
    M:int getContainerSize() -> b
    M:boolean isEmpty() -> c
    M:net.minecraft.world.item.ItemStack getItem(int) -> a
    M:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    M:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    M:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    M:void setChanged() -> e
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean canPlaceItem(int,net.minecraft.world.item.ItemStack) -> b
    M:void clearContent() -> a
    M:int get(int) -> a
    M:void set(int,int) -> a
    M:int getCount() -> a
net.minecraft.world.level.block.entity.LidBlockEntity -> cth -> net.minecraft.world.level.block.entity.LidBlockEntity
net.minecraft.world.level.block.entity.RandomizableContainerBlockEntity -> cti -> net.minecraft.world.level.block.entity.TileEntityLootable
    F:java.lang.String LOOT_TABLE_TAG -> d
    F:java.lang.String LOOT_TABLE_SEED_TAG -> e
    F:net.minecraft.resources.MinecraftKey lootTable -> g
    F:long lootTableSeed -> h
    M:void setLootTable(net.minecraft.world.level.IBlockAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.resources.MinecraftKey) -> a
    M:boolean tryLoadLootTable(net.minecraft.nbt.NBTTagCompound) -> d
    M:boolean trySaveLootTable(net.minecraft.nbt.NBTTagCompound) -> e
    M:void unpackLootTable(net.minecraft.world.entity.player.EntityHuman) -> e
    M:void setLootTable(net.minecraft.resources.MinecraftKey,long) -> a
    M:boolean isEmpty() -> c
    M:net.minecraft.world.item.ItemStack getItem(int) -> a
    M:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    M:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    M:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    M:boolean stillValid(net.minecraft.world.entity.player.EntityHuman) -> a
    M:void clearContent() -> a
    M:boolean canOpen(net.minecraft.world.entity.player.EntityHuman) -> d
net.minecraft.world.level.block.entity.SculkCatalystBlockEntity -> ctj -> net.minecraft.world.level.block.entity.SculkCatalystBlockEntity
    F:net.minecraft.world.level.gameevent.BlockPositionSource blockPosSource -> a
    F:net.minecraft.world.level.block.SculkSpreader sculkSpreader -> b
    M:boolean handleEventsImmediately() -> c
    M:net.minecraft.world.level.gameevent.PositionSource getListenerSource() -> d
    M:int getListenerRadius() -> f
    M:boolean handleGameEvent(net.minecraft.server.level.WorldServer,net.minecraft.world.level.gameevent.GameEvent$Message) -> a
    M:void serverTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.SculkCatalystBlockEntity) -> a
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.world.level.block.SculkSpreader getSculkSpreader() -> g
net.minecraft.world.level.block.entity.SculkSensorBlockEntity -> ctk -> net.minecraft.world.level.block.entity.SculkSensorBlockEntity
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.world.level.gameevent.vibrations.VibrationListener listener -> b
    F:int lastVibrationFrequency -> c
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.world.level.gameevent.vibrations.VibrationListener getListener() -> c
    M:int getLastVibrationFrequency() -> d
    M:boolean shouldListen(net.minecraft.server.level.WorldServer,net.minecraft.world.level.gameevent.GameEventListener,net.minecraft.core.BlockPosition,net.minecraft.world.level.gameevent.GameEvent,net.minecraft.world.level.gameevent.GameEvent$Context) -> a
    M:void onSignalReceive(net.minecraft.server.level.WorldServer,net.minecraft.world.level.gameevent.GameEventListener,net.minecraft.core.BlockPosition,net.minecraft.world.level.gameevent.GameEvent,net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity,float) -> a
    M:void onSignalSchedule() -> f
    M:int getRedstoneStrengthForDistance(float,int) -> a
    M:void setLastVibrationFrequency(int) -> a
net.minecraft.world.level.block.entity.SculkShriekerBlockEntity -> ctl -> net.minecraft.world.level.block.entity.SculkShriekerBlockEntity
    F:org.slf4j.Logger LOGGER -> a
    F:int LISTENER_RADIUS -> b
    F:int WARNING_SOUND_RADIUS -> c
    F:int WARDEN_SPAWN_ATTEMPTS -> d
    F:int WARDEN_SPAWN_RANGE_XZ -> e
    F:int WARDEN_SPAWN_RANGE_Y -> f
    F:int DARKNESS_RADIUS -> g
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap SOUND_BY_LEVEL -> h
    F:int SHRIEKING_TICKS -> i
    F:int warningLevel -> j
    F:net.minecraft.world.level.gameevent.vibrations.VibrationListener listener -> k
    M:net.minecraft.world.level.gameevent.vibrations.VibrationListener getListener() -> c
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:boolean shouldListen(net.minecraft.server.level.WorldServer,net.minecraft.world.level.gameevent.GameEventListener,net.minecraft.core.BlockPosition,net.minecraft.world.level.gameevent.GameEvent,net.minecraft.world.level.gameevent.GameEvent$Context) -> a
    M:net.minecraft.server.level.EntityPlayer tryGetPlayer(net.minecraft.world.entity.Entity) -> a
    M:void onSignalReceive(net.minecraft.server.level.WorldServer,net.minecraft.world.level.gameevent.GameEventListener,net.minecraft.core.BlockPosition,net.minecraft.world.level.gameevent.GameEvent,net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity,float) -> a
    M:void tryShriek(net.minecraft.server.level.WorldServer,net.minecraft.server.level.EntityPlayer) -> a
    M:boolean tryToWarn(net.minecraft.server.level.WorldServer,net.minecraft.server.level.EntityPlayer) -> b
    M:void shriek(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.Entity) -> a
    M:boolean canRespond(net.minecraft.server.level.WorldServer) -> b
    M:void tryRespond(net.minecraft.server.level.WorldServer) -> a
    M:void playWardenReplySound() -> d
    M:boolean trySummonWarden(net.minecraft.server.level.WorldServer) -> c
    M:void onSignalSchedule() -> f
net.minecraft.world.level.block.entity.ShulkerBoxBlockEntity -> ctm -> net.minecraft.world.level.block.entity.TileEntityShulkerBox
    F:int COLUMNS -> b
    F:int ROWS -> c
    F:int CONTAINER_SIZE -> f
    F:int EVENT_SET_OPEN_COUNT -> i
    F:int OPENING_TICK_LENGTH -> j
    F:float MAX_LID_HEIGHT -> k
    F:float MAX_LID_ROTATION -> l
    F:java.lang.String ITEMS_TAG -> m
    F:net.minecraft.core.NonNullList itemStacks -> r
    F:int openCount -> s
    F:net.minecraft.world.level.block.entity.TileEntityShulkerBox$AnimationPhase animationStatus -> t
    F:float progress -> u
    F:float progressOld -> v
    F:net.minecraft.world.item.EnumColor color -> w
    M:void tick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityShulkerBox) -> a
    M:void updateAnimation(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:net.minecraft.world.level.block.entity.TileEntityShulkerBox$AnimationPhase getAnimationStatus() -> i
    M:net.minecraft.world.phys.AxisAlignedBB getBoundingBox(net.minecraft.world.level.block.state.IBlockData) -> a
    M:void moveCollidedEntities(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> c
    M:int getContainerSize() -> b
    M:void doNeighborUpdates(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> d
    M:net.minecraft.network.chat.IChatBaseComponent getDefaultName() -> g
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:void loadFromTag(net.minecraft.nbt.NBTTagCompound) -> f
    M:net.minecraft.core.NonNullList getItems() -> f
    M:void setItems(net.minecraft.core.NonNullList) -> a
    M:boolean canPlaceItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.EnumDirection) -> a
    M:boolean canTakeItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.EnumDirection) -> b
    M:float getProgress(float) -> a
    M:net.minecraft.world.item.EnumColor getColor() -> j
    M:net.minecraft.world.inventory.Container createMenu(int,net.minecraft.world.entity.player.PlayerInventory) -> a
    M:boolean isClosed() -> t
net.minecraft.world.level.block.entity.ShulkerBoxBlockEntity$AnimationStatus -> ctm$a -> net.minecraft.world.level.block.entity.TileEntityShulkerBox$AnimationPhase
    F:net.minecraft.world.level.block.entity.TileEntityShulkerBox$AnimationPhase CLOSED -> a
    F:net.minecraft.world.level.block.entity.TileEntityShulkerBox$AnimationPhase OPENING -> b
    F:net.minecraft.world.level.block.entity.TileEntityShulkerBox$AnimationPhase OPENED -> c
    F:net.minecraft.world.level.block.entity.TileEntityShulkerBox$AnimationPhase CLOSING -> d
net.minecraft.world.level.block.entity.SignBlockEntity -> ctn -> net.minecraft.world.level.block.entity.TileEntitySign
    F:int LINES -> a
    F:boolean isEditable -> f
    F:java.util.UUID playerWhoMayEdit -> g
    F:boolean renderMessagedFiltered -> i
    F:net.minecraft.world.item.EnumColor color -> j
    F:boolean hasGlowingText -> k
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.network.chat.IChatBaseComponent loadLine(java.lang.String) -> a
    M:net.minecraft.network.chat.IChatBaseComponent deserializeTextSafe(java.lang.String) -> b
    M:net.minecraft.network.chat.IChatBaseComponent getMessage(int,boolean) -> a
    M:void setMessage(int,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void setMessage(int,net.minecraft.network.chat.IChatBaseComponent,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:net.minecraft.network.protocol.game.PacketPlayOutTileEntityData getUpdatePacket() -> c
    M:boolean onlyOpCanSetNbt() -> u
    M:boolean isEditable() -> d
    M:void setEditable(boolean) -> a
    M:void setAllowedPlayerEditor(java.util.UUID) -> a
    M:java.util.UUID getPlayerWhoMayEdit() -> f
    M:boolean executeClickCommands(net.minecraft.server.level.EntityPlayer) -> a
    M:net.minecraft.commands.CommandListenerWrapper createCommandSourceStack(net.minecraft.server.level.EntityPlayer) -> b
    M:net.minecraft.world.item.EnumColor getColor() -> g
    M:boolean setColor(net.minecraft.world.item.EnumColor) -> a
    M:boolean hasGlowingText() -> i
    M:boolean setHasGlowingText(boolean) -> b
    M:void markUpdated() -> j
    M:net.minecraft.network.protocol.Packet getUpdatePacket() -> h
net.minecraft.world.level.block.entity.SkullBlockEntity -> cto -> net.minecraft.world.level.block.entity.TileEntitySkull
    F:java.lang.String TAG_SKULL_OWNER -> a
    F:net.minecraft.server.players.UserCache profileCache -> b
    F:com.mojang.authlib.minecraft.MinecraftSessionService sessionService -> c
    F:java.util.concurrent.Executor mainThreadExecutor -> d
    F:com.mojang.authlib.GameProfile owner -> e
    F:int mouthTickCount -> f
    F:boolean isMovingMouth -> g
    M:void setup(net.minecraft.server.Services,java.util.concurrent.Executor) -> a
    M:void clear() -> c
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void dragonHeadAnimation(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntitySkull) -> a
    M:float getMouthAnimation(float) -> a
    M:com.mojang.authlib.GameProfile getOwnerProfile() -> d
    M:net.minecraft.network.protocol.game.PacketPlayOutTileEntityData getUpdatePacket() -> f
    M:void setOwner(com.mojang.authlib.GameProfile) -> a
    M:void updateOwnerProfile() -> g
    M:void updateGameprofile(com.mojang.authlib.GameProfile,java.util.function.Consumer) -> a
    M:net.minecraft.network.protocol.Packet getUpdatePacket() -> h
net.minecraft.world.level.block.entity.SmokerBlockEntity -> ctp -> net.minecraft.world.level.block.entity.TileEntitySmoker
    M:net.minecraft.network.chat.IChatBaseComponent getDefaultName() -> g
    M:int getBurnDuration(net.minecraft.world.item.ItemStack) -> a
    M:net.minecraft.world.inventory.Container createMenu(int,net.minecraft.world.entity.player.PlayerInventory) -> a
net.minecraft.world.level.block.entity.SpawnerBlockEntity -> ctq -> net.minecraft.world.level.block.entity.TileEntityMobSpawner
    F:net.minecraft.world.level.MobSpawnerAbstract spawner -> a
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:void clientTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityMobSpawner) -> a
    M:void serverTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityMobSpawner) -> b
    M:net.minecraft.network.protocol.game.PacketPlayOutTileEntityData getUpdatePacket() -> c
    M:boolean onlyOpCanSetNbt() -> u
    M:net.minecraft.world.level.MobSpawnerAbstract getSpawner() -> d
    M:net.minecraft.network.protocol.Packet getUpdatePacket() -> h
    M:void broadcastEvent(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,int) -> a
    M:void setNextSpawnData(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.MobSpawnerData) -> a
net.minecraft.world.level.block.entity.StructureBlockEntity -> ctr -> net.minecraft.world.level.block.entity.TileEntityStructure
    F:int SCAN_CORNER_BLOCKS_RANGE -> d
    F:int MAX_OFFSET_PER_AXIS -> a
    F:int MAX_SIZE_PER_AXIS -> b
    F:java.lang.String AUTHOR_TAG -> c
    F:net.minecraft.resources.MinecraftKey structureName -> e
    F:java.lang.String author -> f
    F:java.lang.String metaData -> g
    F:net.minecraft.core.BlockPosition structurePos -> h
    F:net.minecraft.core.BaseBlockPosition structureSize -> i
    F:net.minecraft.world.level.block.EnumBlockMirror mirror -> j
    F:net.minecraft.world.level.block.EnumBlockRotation rotation -> k
    F:net.minecraft.world.level.block.state.properties.BlockPropertyStructureMode mode -> l
    F:boolean ignoreEntities -> m
    F:boolean powered -> q
    F:boolean showAir -> r
    F:boolean showBoundingBox -> s
    F:float integrity -> t
    F:long seed -> u
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.network.protocol.game.PacketPlayOutTileEntityData getUpdatePacket() -> c
    M:boolean usedBy(net.minecraft.world.entity.player.EntityHuman) -> a
    M:java.lang.String getStructureName() -> d
    M:java.lang.String getStructurePath() -> f
    M:boolean hasStructureName() -> g
    M:void setStructureName(java.lang.String) -> a
    M:void setStructureName(net.minecraft.resources.MinecraftKey) -> a
    M:void createdBy(net.minecraft.world.entity.EntityLiving) -> a
    M:net.minecraft.core.BlockPosition getStructurePos() -> i
    M:void setStructurePos(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.BaseBlockPosition getStructureSize() -> j
    M:void setStructureSize(net.minecraft.core.BaseBlockPosition) -> a
    M:net.minecraft.world.level.block.EnumBlockMirror getMirror() -> t
    M:void setMirror(net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:net.minecraft.world.level.block.EnumBlockRotation getRotation() -> w
    M:void setRotation(net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:java.lang.String getMetaData() -> x
    M:void setMetaData(java.lang.String) -> b
    M:net.minecraft.world.level.block.state.properties.BlockPropertyStructureMode getMode() -> y
    M:void setMode(net.minecraft.world.level.block.state.properties.BlockPropertyStructureMode) -> a
    M:boolean isIgnoreEntities() -> z
    M:void setIgnoreEntities(boolean) -> a
    M:void setIntegrity(float) -> a
    M:void setSeed(long) -> a
    M:java.util.stream.Stream getRelatedCorners(net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:java.util.Optional calculateEnclosingBoundingBox(net.minecraft.core.BlockPosition,java.util.stream.Stream) -> a
    M:boolean saveStructure(boolean) -> b
    M:boolean loadStructure(net.minecraft.server.level.WorldServer) -> a
    M:net.minecraft.util.RandomSource createRandom(long) -> b
    M:boolean loadStructure(net.minecraft.server.level.WorldServer,boolean) -> a
    M:boolean loadStructure(net.minecraft.server.level.WorldServer,boolean,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure) -> a
    M:void setPowered(boolean) -> c
    M:void setShowAir(boolean) -> d
    M:void setShowBoundingBox(boolean) -> e
    M:net.minecraft.network.protocol.Packet getUpdatePacket() -> h
net.minecraft.world.level.block.entity.StructureBlockEntity$UpdateType -> ctr$a -> net.minecraft.world.level.block.entity.TileEntityStructure$UpdateType
    F:net.minecraft.world.level.block.entity.TileEntityStructure$UpdateType UPDATE_DATA -> a
    F:net.minecraft.world.level.block.entity.TileEntityStructure$UpdateType SAVE_AREA -> b
    F:net.minecraft.world.level.block.entity.TileEntityStructure$UpdateType LOAD_AREA -> c
    F:net.minecraft.world.level.block.entity.TileEntityStructure$UpdateType SCAN_AREA -> d
net.minecraft.world.level.block.entity.TheEndGatewayBlockEntity -> cts -> net.minecraft.world.level.block.entity.TileEntityEndGateway
    F:org.slf4j.Logger LOGGER -> a
    F:int SPAWN_TIME -> b
    F:int COOLDOWN_TIME -> c
    F:int ATTENTION_INTERVAL -> d
    F:int EVENT_COOLDOWN -> e
    F:int GATEWAY_HEIGHT_ABOVE_SURFACE -> f
    F:long age -> g
    F:int teleportCooldown -> h
    F:net.minecraft.core.BlockPosition exitPortal -> i
    F:boolean exactTeleport -> j
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void beamAnimationTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityEndGateway) -> a
    M:void teleportTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityEndGateway) -> b
    M:boolean canEntityTeleport(net.minecraft.world.entity.Entity) -> a
    M:boolean isSpawning() -> c
    M:boolean isCoolingDown() -> d
    M:float getSpawnPercent(float) -> a
    M:float getCooldownPercent(float) -> b
    M:net.minecraft.network.protocol.game.PacketPlayOutTileEntityData getUpdatePacket() -> f
    M:void triggerCooldown(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityEndGateway) -> c
    M:void teleportEntity(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.Entity,net.minecraft.world.level.block.entity.TileEntityEndGateway) -> a
    M:net.minecraft.core.BlockPosition findExitPosition(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.BlockPosition findOrCreateValidTeleportPos(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.Vec3D findExitPortalXZPosTentative(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition) -> b
    M:boolean isChunkEmpty(net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.core.BlockPosition findTallestBlock(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,int,boolean) -> a
    M:net.minecraft.world.level.chunk.Chunk getChunk(net.minecraft.world.level.World,net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.core.BlockPosition findValidSpawnInChunk(net.minecraft.world.level.chunk.Chunk) -> a
    M:void spawnGatewayPortal(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenEndGatewayConfiguration) -> a
    M:boolean shouldRenderFace(net.minecraft.core.EnumDirection) -> a
    M:int getParticleAmount() -> g
    M:void setExitPosition(net.minecraft.core.BlockPosition,boolean) -> a
    M:net.minecraft.network.protocol.Packet getUpdatePacket() -> h
net.minecraft.world.level.block.entity.TheEndPortalBlockEntity -> ctt -> net.minecraft.world.level.block.entity.TileEntityEnderPortal
    M:boolean shouldRenderFace(net.minecraft.core.EnumDirection) -> a
net.minecraft.world.level.block.entity.TickingBlockEntity -> ctu -> net.minecraft.world.level.block.entity.TickingBlockEntity
net.minecraft.world.level.block.entity.TrappedChestBlockEntity -> ctv -> net.minecraft.world.level.block.entity.TileEntityChestTrapped
    M:void signalOpenCount(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,int,int) -> a
net.minecraft.world.level.block.grower.AbstractMegaTreeGrower -> ctx -> net.minecraft.world.level.block.grower.WorldGenMegaTreeProvider
    M:boolean growTree(net.minecraft.server.level.WorldServer,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.util.RandomSource) -> a
    M:boolean placeMega(net.minecraft.server.level.WorldServer,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.util.RandomSource,int,int) -> a
    M:boolean isTwoByTwoSapling(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,int,int) -> a
net.minecraft.world.level.block.grower.AbstractTreeGrower -> cty -> net.minecraft.world.level.block.grower.WorldGenTreeProvider
    M:boolean growTree(net.minecraft.server.level.WorldServer,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.util.RandomSource) -> a
    M:boolean hasFlowers(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.block.grower.AcaciaTreeGrower -> ctz -> net.minecraft.world.level.block.grower.WorldGenTreeProviderAcacia
    M:net.minecraft.core.Holder getConfiguredFeature(net.minecraft.util.RandomSource,boolean) -> a
net.minecraft.world.level.block.grower.AzaleaTreeGrower -> cua -> net.minecraft.world.level.block.grower.AzaleaTreeGrower
    M:net.minecraft.core.Holder getConfiguredFeature(net.minecraft.util.RandomSource,boolean) -> a
net.minecraft.world.level.block.grower.BirchTreeGrower -> cub -> net.minecraft.world.level.block.grower.WorldGenTreeProviderBirch
    M:net.minecraft.core.Holder getConfiguredFeature(net.minecraft.util.RandomSource,boolean) -> a
net.minecraft.world.level.block.grower.DarkOakTreeGrower -> cuc -> net.minecraft.world.level.block.grower.WorldGenMegaTreeProviderDarkOak
    M:net.minecraft.core.Holder getConfiguredFeature(net.minecraft.util.RandomSource,boolean) -> a
    M:net.minecraft.core.Holder getConfiguredMegaFeature(net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.block.grower.JungleTreeGrower -> cud -> net.minecraft.world.level.block.grower.WorldGenMegaTreeProviderJungle
    M:net.minecraft.core.Holder getConfiguredFeature(net.minecraft.util.RandomSource,boolean) -> a
    M:net.minecraft.core.Holder getConfiguredMegaFeature(net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.block.grower.MangroveTreeGrower -> cue -> net.minecraft.world.level.block.grower.MangroveTreeGrower
    F:float tallProbability -> a
    M:net.minecraft.core.Holder getConfiguredFeature(net.minecraft.util.RandomSource,boolean) -> a
net.minecraft.world.level.block.grower.OakTreeGrower -> cuf -> net.minecraft.world.level.block.grower.WorldGenTreeProviderOak
    M:net.minecraft.core.Holder getConfiguredFeature(net.minecraft.util.RandomSource,boolean) -> a
net.minecraft.world.level.block.grower.SpruceTreeGrower -> cug -> net.minecraft.world.level.block.grower.WorldGenTreeProviderSpruce
    M:net.minecraft.core.Holder getConfiguredFeature(net.minecraft.util.RandomSource,boolean) -> a
    M:net.minecraft.core.Holder getConfiguredMegaFeature(net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.block.piston.MovingPistonBlock -> cuj -> net.minecraft.world.level.block.piston.BlockPistonMoving
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection FACING -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum TYPE -> b
    M:net.minecraft.world.level.block.entity.TileEntity newBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.entity.TileEntity newMovingBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,boolean,boolean) -> a
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void destroy(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:java.util.List getDrops(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.storage.loot.LootTableInfo$Builder) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:net.minecraft.world.level.block.piston.TileEntityPiston getBlockEntity(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.piston.PistonBaseBlock -> cuk -> net.minecraft.world.level.block.piston.BlockPiston
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean EXTENDED -> b
    F:int TRIGGER_EXTEND -> c
    F:int TRIGGER_CONTRACT -> d
    F:int TRIGGER_DROP -> e
    F:float PLATFORM_THICKNESS -> f
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> g
    F:net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> h
    F:net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> i
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> j
    F:net.minecraft.world.phys.shapes.VoxelShape UP_AABB -> k
    F:net.minecraft.world.phys.shapes.VoxelShape DOWN_AABB -> l
    F:boolean isSticky -> m
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:void setPlacedBy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.EntityLiving,net.minecraft.world.item.ItemStack) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:net.minecraft.world.level.block.state.IBlockData getStateForPlacement(net.minecraft.world.item.context.BlockActionContext) -> a
    M:void checkIfExtend(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean getNeighborSignal(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:boolean triggerEvent(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,int,int) -> a
    M:boolean isPushable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,boolean,net.minecraft.core.EnumDirection) -> a
    M:boolean moveBlocks(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,boolean) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.piston.PistonHeadBlock -> cul -> net.minecraft.world.level.block.piston.BlockPistonExtension
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum TYPE -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean SHORT -> c
    F:float PLATFORM -> d
    F:net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> e
    F:net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> f
    F:net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> g
    F:net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> h
    F:net.minecraft.world.phys.shapes.VoxelShape UP_AABB -> i
    F:net.minecraft.world.phys.shapes.VoxelShape DOWN_AABB -> j
    F:float AABB_OFFSET -> k
    F:float EDGE_MIN -> l
    F:float EDGE_MAX -> m
    F:net.minecraft.world.phys.shapes.VoxelShape UP_ARM_AABB -> n
    M:net.minecraft.world.phys.shapes.VoxelShape calculateShape(net.minecraft.core.EnumDirection,boolean) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:boolean isFittingBase(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void playerWillDestroy(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
net.minecraft.world.level.block.piston.PistonMath -> cum -> net.minecraft.world.level.block.piston.PistonUtil
    M:net.minecraft.world.phys.AxisAlignedBB getMovementArea(net.minecraft.world.phys.AxisAlignedBB,net.minecraft.core.EnumDirection,double) -> a
net.minecraft.world.level.block.piston.PistonMovingBlockEntity -> cun -> net.minecraft.world.level.block.piston.TileEntityPiston
    F:int TICKS_TO_EXTEND -> b
    F:double PUSH_OFFSET -> c
    F:double TICK_MOVEMENT -> a
    F:net.minecraft.world.level.block.state.IBlockData movedState -> d
    F:net.minecraft.core.EnumDirection direction -> e
    F:boolean extending -> f
    F:boolean isSourcePiston -> g
    F:java.lang.ThreadLocal NOCLIP -> h
    F:float progress -> i
    F:float progressO -> j
    F:long lastTicked -> k
    F:int deathTicks -> l
    M:boolean isExtending() -> c
    M:net.minecraft.core.EnumDirection getDirection() -> d
    M:boolean isSourcePiston() -> f
    M:float getProgress(float) -> a
    M:float getXOff(float) -> b
    M:float getYOff(float) -> c
    M:float getZOff(float) -> d
    M:float getExtendedProgress(float) -> e
    M:net.minecraft.world.level.block.state.IBlockData getCollisionRelatedBlockState() -> w
    M:void moveCollidedEntities(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,float,net.minecraft.world.level.block.piston.TileEntityPiston) -> a
    M:void moveEntityByPiston(net.minecraft.core.EnumDirection,net.minecraft.world.entity.Entity,double,net.minecraft.core.EnumDirection) -> a
    M:void moveStuckEntities(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,float,net.minecraft.world.level.block.piston.TileEntityPiston) -> b
    M:boolean matchesStickyCritera(net.minecraft.world.phys.AxisAlignedBB,net.minecraft.world.entity.Entity) -> a
    M:boolean isStickyForEntities() -> x
    M:net.minecraft.core.EnumDirection getMovementDirection() -> g
    M:double getMovement(net.minecraft.world.phys.AxisAlignedBB,net.minecraft.core.EnumDirection,net.minecraft.world.phys.AxisAlignedBB) -> a
    M:net.minecraft.world.phys.AxisAlignedBB moveByPositionAndProgress(net.minecraft.core.BlockPosition,net.minecraft.world.phys.AxisAlignedBB,net.minecraft.world.level.block.piston.TileEntityPiston) -> a
    M:void fixEntityWithinPistonBase(net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity,net.minecraft.core.EnumDirection,double) -> a
    M:net.minecraft.world.level.block.state.IBlockData getMovedState() -> i
    M:void finalTick() -> j
    M:void tick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.piston.TileEntityPiston) -> a
    M:void load(net.minecraft.nbt.NBTTagCompound) -> a
    M:void saveAdditional(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:long getLastTicked() -> t
net.minecraft.world.level.block.piston.PistonStructureResolver -> cuo -> net.minecraft.world.level.block.piston.PistonExtendsChecker
    F:int MAX_PUSH_DEPTH -> a
    F:net.minecraft.world.level.World level -> b
    F:net.minecraft.core.BlockPosition pistonPos -> c
    F:boolean extending -> d
    F:net.minecraft.core.BlockPosition startPos -> e
    F:net.minecraft.core.EnumDirection pushDirection -> f
    F:java.util.List toPush -> g
    F:java.util.List toDestroy -> h
    F:net.minecraft.core.EnumDirection pistonDirection -> i
    M:boolean resolve() -> a
    M:boolean isSticky(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean canStickToEachOther(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean addBlockLine(net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:void reorderListAtCollision(int,int) -> a
    M:boolean addBranchingBlocks(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.EnumDirection getPushDirection() -> b
    M:java.util.List getToPush() -> c
    M:java.util.List getToDestroy() -> d
net.minecraft.world.level.block.state.BlockBehaviour -> cuq -> net.minecraft.world.level.block.state.BlockBase
    M:void updateIndirectNeighbourShapes(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,int,int) -> a
    M:boolean isPathfindable(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean skipRendering(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void onPlace(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void onRemove(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:boolean triggerEvent(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,int,int) -> a
    M:net.minecraft.world.level.material.EnumPistonReaction getPistonPushReaction(net.minecraft.world.level.block.state.IBlockData) -> d
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:boolean canBeReplaced(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.item.context.BlockActionContext) -> a
    M:boolean canBeReplaced(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.FluidType) -> a
    M:java.util.List getDrops(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.storage.loot.LootTableInfo$Builder) -> a
    M:long getSeed(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getBlockSupportShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> f
    M:net.minecraft.world.phys.shapes.VoxelShape getInteractionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:int getLightBlock(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> g
    M:net.minecraft.world.ITileInventory getMenuProvider(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:boolean canSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:float getShadeBrightness(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
    M:int getAnalogOutputSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:boolean isOcclusionShapeFullBlock(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> h
    M:net.minecraft.world.phys.shapes.VoxelShape getVisualShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> b
    M:void randomTick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:void tick(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:float getDestroyProgress(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:void spawnAfterBreak(net.minecraft.world.level.block.state.IBlockData,net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack,boolean) -> a
    M:void attack(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman) -> a
    M:int getSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:void entityInside(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:int getDirectSignal(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:net.minecraft.resources.MinecraftKey getLootTable() -> r
    M:void onProjectileHit(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.MovingObjectPositionBlock,net.minecraft.world.entity.projectile.IProjectile) -> a
    M:net.minecraft.world.level.material.MaterialMapColor defaultMaterialColor() -> s
    M:float defaultDestroyTime() -> t
net.minecraft.world.level.block.state.BlockBehaviour$BlockStateBase -> cuq$a -> net.minecraft.world.level.block.state.BlockBase$BlockData
    F:int lightEmission -> b
    F:boolean useShapeForLightOcclusion -> g
    F:boolean isAir -> h
    F:net.minecraft.world.level.material.Material material -> i
    F:net.minecraft.world.level.material.MaterialMapColor materialColor -> j
    F:float destroySpeed -> k
    F:boolean requiresCorrectToolForDrops -> l
    F:boolean canOcclude -> m
    F:net.minecraft.world.level.block.state.BlockBehaviour$StatePredicate isRedstoneConductor -> n
    F:net.minecraft.world.level.block.state.BlockBehaviour$StatePredicate isSuffocating -> o
    F:net.minecraft.world.level.block.state.BlockBehaviour$StatePredicate isViewBlocking -> p
    F:net.minecraft.world.level.block.state.BlockBehaviour$StatePredicate hasPostProcess -> q
    F:net.minecraft.world.level.block.state.BlockBehaviour$StatePredicate emissiveRendering -> r
    F:net.minecraft.world.level.block.state.BlockBase$EnumRandomOffset offsetType -> s
    F:net.minecraft.world.level.block.state.BlockBase$BlockData$Cache cache -> a
    M:void initCache() -> a
    M:net.minecraft.world.level.block.Block getBlock() -> b
    M:net.minecraft.core.Holder getBlockHolder() -> c
    M:net.minecraft.world.level.material.Material getMaterial() -> d
    M:boolean isValidSpawn(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.entity.EntityTypes) -> a
    M:boolean propagatesSkylightDown(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:int getLightBlock(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getFaceOcclusionShape(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getOcclusionShape(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> c
    M:boolean hasLargeCollisionShape() -> e
    M:boolean useShapeForLightOcclusion() -> f
    M:int getLightEmission() -> g
    M:boolean isAir() -> h
    M:net.minecraft.world.level.material.MaterialMapColor getMapColor(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
    M:net.minecraft.world.level.block.state.IBlockData rotate(net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.block.state.IBlockData mirror(net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:net.minecraft.world.level.block.EnumRenderType getRenderShape() -> i
    M:boolean emissiveRendering(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> e
    M:float getShadeBrightness(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> f
    M:boolean isRedstoneConductor(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> g
    M:boolean isSignalSource() -> j
    M:int getSignal(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> b
    M:boolean hasAnalogOutputSignal() -> k
    M:int getAnalogOutputSignal(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:float getDestroySpeed(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> h
    M:float getDestroyProgress(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:int getDirectSignal(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> c
    M:net.minecraft.world.level.material.EnumPistonReaction getPistonPushReaction() -> l
    M:boolean isSolidRender(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> i
    M:boolean canOcclude() -> m
    M:boolean skipRendering(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> j
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> k
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> b
    M:net.minecraft.world.phys.shapes.VoxelShape getBlockSupportShape(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> l
    M:net.minecraft.world.phys.shapes.VoxelShape getVisualShape(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.phys.shapes.VoxelShapeCollision) -> c
    M:net.minecraft.world.phys.shapes.VoxelShape getInteractionShape(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> m
    M:boolean entityCanStandOn(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:boolean entityCanStandOnFace(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.phys.Vec3D getOffset(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> n
    M:boolean triggerEvent(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,int,int) -> a
    M:void neighborChanged(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void updateNeighbourShapes(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,int) -> a
    M:void updateNeighbourShapes(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,int,int) -> a
    M:void updateIndirectNeighbourShapes(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,int) -> b
    M:void updateIndirectNeighbourShapes(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,int,int) -> b
    M:void onPlace(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void onRemove(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> b
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void randomTick(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:void entityInside(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.Entity) -> a
    M:void spawnAfterBreak(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.world.item.ItemStack,boolean) -> a
    M:java.util.List getDrops(net.minecraft.world.level.storage.loot.LootTableInfo$Builder) -> a
    M:net.minecraft.world.EnumInteractionResult use(net.minecraft.world.level.World,net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.EnumHand,net.minecraft.world.phys.MovingObjectPositionBlock) -> a
    M:void attack(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean isSuffocating(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> o
    M:boolean isViewBlocking(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> p
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean isPathfindable(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathMode) -> a
    M:boolean canBeReplaced(net.minecraft.world.item.context.BlockActionContext) -> a
    M:boolean canBeReplaced(net.minecraft.world.level.material.FluidType) -> a
    M:boolean canSurvive(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:boolean hasPostProcess(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> q
    M:net.minecraft.world.ITileInventory getMenuProvider(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> b
    M:boolean is(net.minecraft.tags.TagKey) -> a
    M:boolean is(net.minecraft.tags.TagKey,java.util.function.Predicate) -> a
    M:boolean is(net.minecraft.core.HolderSet) -> a
    M:java.util.stream.Stream getTags() -> n
    M:boolean hasBlockEntity() -> o
    M:net.minecraft.world.level.block.entity.BlockEntityTicker getTicker(net.minecraft.world.level.World,net.minecraft.world.level.block.entity.TileEntityTypes) -> a
    M:boolean is(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.world.level.material.Fluid getFluidState() -> p
    M:boolean isRandomlyTicking() -> q
    M:long getSeed(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.SoundEffectType getSoundType() -> r
    M:void onProjectileHit(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.phys.MovingObjectPositionBlock,net.minecraft.world.entity.projectile.IProjectile) -> a
    M:boolean isFaceSturdy(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> d
    M:boolean isFaceSturdy(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.EnumBlockSupport) -> a
    M:boolean isCollisionShapeFullBlock(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> r
    M:boolean requiresCorrectToolForDrops() -> t
    M:net.minecraft.world.level.block.state.BlockBase$EnumRandomOffset getOffsetType() -> u
net.minecraft.world.level.block.state.BlockBehaviour$BlockStateBase$Cache -> cuq$a$a -> net.minecraft.world.level.block.state.BlockBase$BlockData$Cache
    F:int SUPPORT_TYPE_COUNT -> f
    F:boolean solidRender -> a
    F:boolean propagatesSkylightDown -> g
    F:int lightBlock -> h
    F:net.minecraft.world.phys.shapes.VoxelShape collisionShape -> b
    F:boolean largeCollisionShape -> c
    F:boolean isCollisionShapeFullBlock -> d
    M:boolean isFaceSturdy(net.minecraft.core.EnumDirection,net.minecraft.world.level.block.EnumBlockSupport) -> a
    M:int getFaceSupportIndex(net.minecraft.core.EnumDirection,net.minecraft.world.level.block.EnumBlockSupport) -> b
net.minecraft.world.level.block.state.BlockBehaviour$OffsetType -> cuq$b -> net.minecraft.world.level.block.state.BlockBase$EnumRandomOffset
    F:net.minecraft.world.level.block.state.BlockBase$EnumRandomOffset NONE -> a
    F:net.minecraft.world.level.block.state.BlockBase$EnumRandomOffset XZ -> b
    F:net.minecraft.world.level.block.state.BlockBase$EnumRandomOffset XYZ -> c
net.minecraft.world.level.block.state.BlockBehaviour$Properties -> cuq$c -> net.minecraft.world.level.block.state.BlockBase$Info
    F:net.minecraft.world.level.material.Material material -> a
    F:java.util.function.Function materialColor -> b
    F:boolean hasCollision -> c
    F:net.minecraft.world.level.block.SoundEffectType soundType -> d
    F:java.util.function.ToIntFunction lightEmission -> e
    F:float explosionResistance -> f
    F:float destroyTime -> g
    F:boolean requiresCorrectToolForDrops -> h
    F:boolean isRandomlyTicking -> i
    F:float friction -> j
    F:float speedFactor -> k
    F:float jumpFactor -> l
    F:net.minecraft.resources.MinecraftKey drops -> m
    F:boolean canOcclude -> n
    F:boolean isAir -> o
    F:net.minecraft.world.level.block.state.BlockBehaviour$StateArgumentPredicate isValidSpawn -> p
    F:net.minecraft.world.level.block.state.BlockBehaviour$StatePredicate isRedstoneConductor -> q
    F:net.minecraft.world.level.block.state.BlockBehaviour$StatePredicate isSuffocating -> r
    F:net.minecraft.world.level.block.state.BlockBehaviour$StatePredicate isViewBlocking -> s
    F:net.minecraft.world.level.block.state.BlockBehaviour$StatePredicate hasPostProcess -> t
    F:net.minecraft.world.level.block.state.BlockBehaviour$StatePredicate emissiveRendering -> u
    F:boolean dynamicShape -> v
    F:java.util.function.Function offsetType -> w
    M:net.minecraft.world.level.block.state.BlockBase$Info of(net.minecraft.world.level.material.Material) -> a
    M:net.minecraft.world.level.block.state.BlockBase$Info of(net.minecraft.world.level.material.Material,net.minecraft.world.item.EnumColor) -> a
    M:net.minecraft.world.level.block.state.BlockBase$Info of(net.minecraft.world.level.material.Material,net.minecraft.world.level.material.MaterialMapColor) -> a
    M:net.minecraft.world.level.block.state.BlockBase$Info of(net.minecraft.world.level.material.Material,java.util.function.Function) -> a
    M:net.minecraft.world.level.block.state.BlockBase$Info copy(net.minecraft.world.level.block.state.BlockBase) -> a
    M:net.minecraft.world.level.block.state.BlockBase$Info noCollission() -> a
    M:net.minecraft.world.level.block.state.BlockBase$Info noOcclusion() -> b
    M:net.minecraft.world.level.block.state.BlockBase$Info friction(float) -> a
    M:net.minecraft.world.level.block.state.BlockBase$Info speedFactor(float) -> b
    M:net.minecraft.world.level.block.state.BlockBase$Info jumpFactor(float) -> c
    M:net.minecraft.world.level.block.state.BlockBase$Info sound(net.minecraft.world.level.block.SoundEffectType) -> a
    M:net.minecraft.world.level.block.state.BlockBase$Info lightLevel(java.util.function.ToIntFunction) -> a
    M:net.minecraft.world.level.block.state.BlockBase$Info strength(float,float) -> a
    M:net.minecraft.world.level.block.state.BlockBase$Info instabreak() -> c
    M:net.minecraft.world.level.block.state.BlockBase$Info strength(float) -> d
    M:net.minecraft.world.level.block.state.BlockBase$Info randomTicks() -> d
    M:net.minecraft.world.level.block.state.BlockBase$Info dynamicShape() -> e
    M:net.minecraft.world.level.block.state.BlockBase$Info noLootTable() -> f
    M:net.minecraft.world.level.block.state.BlockBase$Info dropsLike(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.world.level.block.state.BlockBase$Info air() -> g
    M:net.minecraft.world.level.block.state.BlockBase$Info isValidSpawn(net.minecraft.world.level.block.state.BlockBehaviour$StateArgumentPredicate) -> a
    M:net.minecraft.world.level.block.state.BlockBase$Info isRedstoneConductor(net.minecraft.world.level.block.state.BlockBehaviour$StatePredicate) -> a
    M:net.minecraft.world.level.block.state.BlockBase$Info isSuffocating(net.minecraft.world.level.block.state.BlockBehaviour$StatePredicate) -> b
    M:net.minecraft.world.level.block.state.BlockBase$Info isViewBlocking(net.minecraft.world.level.block.state.BlockBehaviour$StatePredicate) -> c
    M:net.minecraft.world.level.block.state.BlockBase$Info hasPostProcess(net.minecraft.world.level.block.state.BlockBehaviour$StatePredicate) -> d
    M:net.minecraft.world.level.block.state.BlockBase$Info emissiveRendering(net.minecraft.world.level.block.state.BlockBehaviour$StatePredicate) -> e
    M:net.minecraft.world.level.block.state.BlockBase$Info requiresCorrectToolForDrops() -> h
    M:net.minecraft.world.level.block.state.BlockBase$Info color(net.minecraft.world.level.material.MaterialMapColor) -> a
    M:net.minecraft.world.level.block.state.BlockBase$Info destroyTime(float) -> e
    M:net.minecraft.world.level.block.state.BlockBase$Info explosionResistance(float) -> f
    M:net.minecraft.world.level.block.state.BlockBase$Info offsetType(net.minecraft.world.level.block.state.BlockBase$EnumRandomOffset) -> a
    M:net.minecraft.world.level.block.state.BlockBase$Info offsetType(java.util.function.Function) -> a
net.minecraft.world.level.block.state.BlockBehaviour$StateArgumentPredicate -> cuq$d -> net.minecraft.world.level.block.state.BlockBase$d
net.minecraft.world.level.block.state.BlockBehaviour$StatePredicate -> cuq$e -> net.minecraft.world.level.block.state.BlockBase$e
net.minecraft.world.level.block.state.BlockState -> cur -> net.minecraft.world.level.block.state.IBlockData
    F:com.mojang.serialization.Codec CODEC -> b
    M:net.minecraft.world.level.block.state.IBlockData asState() -> s
net.minecraft.world.level.block.state.StateDefinition -> cus -> net.minecraft.world.level.block.state.BlockStateList
    F:java.util.regex.Pattern NAME_PATTERN -> a
    F:java.lang.Object owner -> b
    F:com.google.common.collect.ImmutableSortedMap propertiesByName -> c
    F:com.google.common.collect.ImmutableList states -> d
    M:com.mojang.serialization.MapCodec appendPropertyCodec(com.mojang.serialization.MapCodec,java.util.function.Supplier,java.lang.String,net.minecraft.world.level.block.state.properties.IBlockState) -> a
    M:com.google.common.collect.ImmutableList getPossibleStates() -> a
    M:net.minecraft.world.level.block.state.IBlockDataHolder any() -> b
    M:java.lang.Object getOwner() -> c
    M:java.util.Collection getProperties() -> d
    M:net.minecraft.world.level.block.state.properties.IBlockState getProperty(java.lang.String) -> a
net.minecraft.world.level.block.state.StateDefinition$Builder -> cus$a -> net.minecraft.world.level.block.state.BlockStateList$a
    F:java.lang.Object owner -> a
    F:java.util.Map properties -> b
    M:net.minecraft.world.level.block.state.StateDefinition$Builder add(net.minecraft.world.level.block.state.properties.Property[]) -> a
    M:void validateProperty(net.minecraft.world.level.block.state.properties.IBlockState) -> a
    M:net.minecraft.world.level.block.state.BlockStateList create(java.util.function.Function,net.minecraft.world.level.block.state.StateDefinition$Factory) -> a
net.minecraft.world.level.block.state.StateDefinition$Factory -> cus$b -> net.minecraft.world.level.block.state.BlockStateList$b
net.minecraft.world.level.block.state.StateHolder -> cut -> net.minecraft.world.level.block.state.IBlockDataHolder
    F:java.lang.String NAME_TAG -> c
    F:java.lang.String PROPERTIES_TAG -> d
    F:java.util.function.Function PROPERTY_ENTRY_TO_STRING_FUNCTION -> a
    F:java.lang.Object owner -> e
    F:com.google.common.collect.ImmutableMap values -> b
    F:com.google.common.collect.Table neighbours -> g
    F:com.mojang.serialization.MapCodec propertiesCodec -> f
    M:java.lang.Object cycle(net.minecraft.world.level.block.state.properties.IBlockState) -> a
    M:java.lang.Object findNextInCollection(java.util.Collection,java.lang.Object) -> a
    M:java.util.Collection getProperties() -> v
    M:boolean hasProperty(net.minecraft.world.level.block.state.properties.IBlockState) -> b
    M:java.lang.Comparable getValue(net.minecraft.world.level.block.state.properties.IBlockState) -> c
    M:java.util.Optional getOptionalValue(net.minecraft.world.level.block.state.properties.IBlockState) -> d
    M:java.lang.Object setValue(net.minecraft.world.level.block.state.properties.IBlockState,java.lang.Comparable) -> a
    M:void populateNeighbours(java.util.Map) -> a
    M:java.util.Map makeNeighbourValues(net.minecraft.world.level.block.state.properties.IBlockState,java.lang.Comparable) -> b
    M:com.google.common.collect.ImmutableMap getValues() -> w
    M:com.mojang.serialization.Codec codec(com.mojang.serialization.Codec,java.util.function.Function) -> a
    M:java.lang.String apply(java.util.Map$Entry) -> a
    M:java.lang.String getName(net.minecraft.world.level.block.state.properties.IBlockState,java.lang.Comparable) -> a
    M:java.lang.Object apply(java.lang.Object) -> apply
net.minecraft.world.level.block.state.pattern.BlockInWorld -> cuv -> net.minecraft.world.level.block.state.pattern.ShapeDetectorBlock
    F:net.minecraft.world.level.IWorldReader level -> a
    F:net.minecraft.core.BlockPosition pos -> b
    F:boolean loadChunks -> c
    F:net.minecraft.world.level.block.state.IBlockData state -> d
    F:net.minecraft.world.level.block.entity.TileEntity entity -> e
    F:boolean cachedEntity -> f
    M:net.minecraft.world.level.block.state.IBlockData getState() -> a
    M:net.minecraft.world.level.block.entity.TileEntity getEntity() -> b
    M:net.minecraft.world.level.IWorldReader getLevel() -> c
    M:net.minecraft.core.BlockPosition getPos() -> d
    M:java.util.function.Predicate hasState(java.util.function.Predicate) -> a
net.minecraft.world.level.block.state.pattern.BlockPattern -> cuw -> net.minecraft.world.level.block.state.pattern.ShapeDetector
    F:int depth -> b
    F:int height -> c
    F:int width -> d
    M:int getDepth() -> a
    M:int getHeight() -> b
    M:int getWidth() -> c
    M:net.minecraft.world.level.block.state.pattern.ShapeDetector$ShapeDetectorCollection matches(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.level.block.state.pattern.ShapeDetector$ShapeDetectorCollection matches(net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.core.EnumDirection,com.google.common.cache.LoadingCache) -> a
    M:net.minecraft.world.level.block.state.pattern.ShapeDetector$ShapeDetectorCollection find(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:com.google.common.cache.LoadingCache createLevelCache(net.minecraft.world.level.IWorldReader,boolean) -> a
    M:net.minecraft.core.BlockPosition translateAndRotate(net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.core.EnumDirection,int,int,int) -> a
net.minecraft.world.level.block.state.pattern.BlockPattern$BlockCacheLoader -> cuw$a -> net.minecraft.world.level.block.state.pattern.ShapeDetector$BlockLoader
    F:net.minecraft.world.level.IWorldReader level -> a
    F:boolean loadChunks -> b
    M:net.minecraft.world.level.block.state.pattern.ShapeDetectorBlock load(net.minecraft.core.BlockPosition) -> a
    M:java.lang.Object load(java.lang.Object) -> load
net.minecraft.world.level.block.state.pattern.BlockPattern$BlockPatternMatch -> cuw$b -> net.minecraft.world.level.block.state.pattern.ShapeDetector$ShapeDetectorCollection
    F:net.minecraft.core.BlockPosition frontTopLeft -> a
    F:net.minecraft.core.EnumDirection forwards -> b
    F:net.minecraft.core.EnumDirection up -> c
    F:com.google.common.cache.LoadingCache cache -> d
    F:int width -> e
    F:int height -> f
    F:int depth -> g
    M:net.minecraft.core.BlockPosition getFrontTopLeft() -> a
    M:net.minecraft.core.EnumDirection getForwards() -> b
    M:net.minecraft.core.EnumDirection getUp() -> c
    M:int getWidth() -> d
    M:int getHeight() -> e
    M:int getDepth() -> f
    M:net.minecraft.world.level.block.state.pattern.ShapeDetectorBlock getBlock(int,int,int) -> a
net.minecraft.world.level.block.state.pattern.BlockPatternBuilder -> cux -> net.minecraft.world.level.block.state.pattern.ShapeDetectorBuilder
    F:com.google.common.base.Joiner COMMA_JOINED -> a
    F:java.util.List pattern -> b
    F:java.util.Map lookup -> c
    F:int height -> d
    F:int width -> e
    M:net.minecraft.world.level.block.state.pattern.ShapeDetectorBuilder aisle(java.lang.String[]) -> a
    M:net.minecraft.world.level.block.state.pattern.ShapeDetectorBuilder start() -> a
    M:net.minecraft.world.level.block.state.pattern.ShapeDetectorBuilder where(char,java.util.function.Predicate) -> a
    M:net.minecraft.world.level.block.state.pattern.ShapeDetector build() -> b
    M:void ensureAllCharactersMatched() -> d
net.minecraft.world.level.block.state.predicate.BlockMaterialPredicate -> cuz -> net.minecraft.world.level.block.state.predicate.MaterialPredicate
    F:net.minecraft.world.level.block.state.predicate.MaterialPredicate AIR -> a
    F:net.minecraft.world.level.material.Material material -> b
    M:net.minecraft.world.level.block.state.predicate.MaterialPredicate forMaterial(net.minecraft.world.level.material.Material) -> a
    M:boolean test(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean test(java.lang.Object) -> test
    M:boolean test(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.block.state.predicate.BlockPredicate -> cva -> net.minecraft.world.level.block.state.predicate.BlockPredicate
    F:net.minecraft.world.level.block.Block block -> a
    M:net.minecraft.world.level.block.state.predicate.BlockPredicate forBlock(net.minecraft.world.level.block.Block) -> a
    M:boolean test(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.block.state.predicate.BlockStatePredicate -> cvb -> net.minecraft.world.level.block.state.predicate.BlockStatePredicate
    F:java.util.function.Predicate ANY -> a
    F:net.minecraft.world.level.block.state.BlockStateList definition -> b
    F:java.util.Map properties -> c
    M:net.minecraft.world.level.block.state.predicate.BlockStatePredicate forBlock(net.minecraft.world.level.block.Block) -> a
    M:boolean test(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean applies(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.properties.IBlockState,java.util.function.Predicate) -> a
    M:net.minecraft.world.level.block.state.predicate.BlockStatePredicate where(net.minecraft.world.level.block.state.properties.IBlockState,java.util.function.Predicate) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.block.state.properties.AttachFace -> cvd -> net.minecraft.world.level.block.state.properties.BlockPropertyAttachPosition
    F:net.minecraft.world.level.block.state.properties.BlockPropertyAttachPosition FLOOR -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertyAttachPosition WALL -> b
    F:net.minecraft.world.level.block.state.properties.BlockPropertyAttachPosition CEILING -> c
    F:java.lang.String name -> d
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.block.state.properties.BambooLeaves -> cve -> net.minecraft.world.level.block.state.properties.BlockPropertyBambooSize
    F:net.minecraft.world.level.block.state.properties.BlockPropertyBambooSize NONE -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertyBambooSize SMALL -> b
    F:net.minecraft.world.level.block.state.properties.BlockPropertyBambooSize LARGE -> c
    F:java.lang.String name -> d
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.block.state.properties.BedPart -> cvf -> net.minecraft.world.level.block.state.properties.BlockPropertyBedPart
    F:net.minecraft.world.level.block.state.properties.BlockPropertyBedPart HEAD -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertyBedPart FOOT -> b
    F:java.lang.String name -> c
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.block.state.properties.BellAttachType -> cvg -> net.minecraft.world.level.block.state.properties.BlockPropertyBellAttach
    F:net.minecraft.world.level.block.state.properties.BlockPropertyBellAttach FLOOR -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertyBellAttach CEILING -> b
    F:net.minecraft.world.level.block.state.properties.BlockPropertyBellAttach SINGLE_WALL -> c
    F:net.minecraft.world.level.block.state.properties.BlockPropertyBellAttach DOUBLE_WALL -> d
    F:java.lang.String name -> e
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.block.state.properties.BlockStateProperties -> cvh -> net.minecraft.world.level.block.state.properties.BlockProperties
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean ATTACHED -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean BOTTOM -> b
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean CONDITIONAL -> c
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean DISARMED -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean DRAG -> e
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean ENABLED -> f
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean EXTENDED -> g
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean EYE -> h
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean FALLING -> i
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean HANGING -> j
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean HAS_BOTTLE_0 -> k
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean HAS_BOTTLE_1 -> l
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean HAS_BOTTLE_2 -> m
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean HAS_RECORD -> n
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean HAS_BOOK -> o
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean INVERTED -> p
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean IN_WALL -> q
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean LIT -> r
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean LOCKED -> s
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean OCCUPIED -> t
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean OPEN -> u
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean PERSISTENT -> v
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean POWERED -> w
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean SHORT -> x
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean SIGNAL_FIRE -> y
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean SNOWY -> z
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum EAST_REDSTONE -> aa
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum NORTH_REDSTONE -> ab
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum SOUTH_REDSTONE -> ac
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum WEST_REDSTONE -> ad
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum DOUBLE_BLOCK_HALF -> ae
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum HALF -> af
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum RAIL_SHAPE -> ag
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum RAIL_SHAPE_STRAIGHT -> ah
    F:int MAX_AGE_1 -> ai
    F:int MAX_AGE_2 -> aj
    F:int MAX_AGE_3 -> ak
    F:int MAX_AGE_4 -> al
    F:int MAX_AGE_5 -> am
    F:int MAX_AGE_7 -> an
    F:int MAX_AGE_15 -> ao
    F:int MAX_AGE_25 -> ap
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE_1 -> aq
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE_2 -> ar
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE_3 -> as
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE_4 -> at
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE_5 -> au
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE_7 -> av
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE_15 -> aw
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger AGE_25 -> ax
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger BITES -> ay
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger CANDLES -> az
    F:int MAX_ROTATIONS_16 -> ba
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger ROTATION_16 -> bb
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum BED_PART -> bc
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum CHEST_TYPE -> bd
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum MODE_COMPARATOR -> be
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum DOOR_HINGE -> bf
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum NOTEBLOCK_INSTRUMENT -> bg
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum PISTON_TYPE -> bh
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum SLAB_TYPE -> bi
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum STAIRS_SHAPE -> bj
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum STRUCTUREBLOCK_MODE -> bk
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum BAMBOO_LEAVES -> bl
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum TILT -> bm
    F:net.minecraft.world.level.block.state.properties.BlockStateDirection VERTICAL_DIRECTION -> bn
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum DRIPSTONE_THICKNESS -> bo
    F:net.minecraft.world.level.block.state.properties.BlockStateEnum SCULK_SENSOR_PHASE -> bp
net.minecraft.world.level.block.state.properties.BooleanProperty -> cvi -> net.minecraft.world.level.block.state.properties.BlockStateBoolean
    F:com.google.common.collect.ImmutableSet values -> a
    M:java.util.Collection getPossibleValues() -> a
    M:net.minecraft.world.level.block.state.properties.BlockStateBoolean create(java.lang.String) -> a
    M:java.util.Optional getValue(java.lang.String) -> b
    M:java.lang.String getName(java.lang.Boolean) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int generateHashCode() -> b
    M:java.lang.String getName(java.lang.Comparable) -> a
net.minecraft.world.level.block.state.properties.ChestType -> cvj -> net.minecraft.world.level.block.state.properties.BlockPropertyChestType
    F:net.minecraft.world.level.block.state.properties.BlockPropertyChestType SINGLE -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertyChestType LEFT -> b
    F:net.minecraft.world.level.block.state.properties.BlockPropertyChestType RIGHT -> c
    F:java.lang.String name -> e
    F:int opposite -> f
    M:java.lang.String getSerializedName() -> c
    M:net.minecraft.world.level.block.state.properties.BlockPropertyChestType getOpposite() -> a
net.minecraft.world.level.block.state.properties.ComparatorMode -> cvk -> net.minecraft.world.level.block.state.properties.BlockPropertyComparatorMode
    F:net.minecraft.world.level.block.state.properties.BlockPropertyComparatorMode COMPARE -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertyComparatorMode SUBTRACT -> b
    F:java.lang.String name -> c
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.block.state.properties.DirectionProperty -> cvl -> net.minecraft.world.level.block.state.properties.BlockStateDirection
    M:net.minecraft.world.level.block.state.properties.BlockStateDirection create(java.lang.String) -> a
    M:net.minecraft.world.level.block.state.properties.BlockStateDirection create(java.lang.String,java.util.function.Predicate) -> a
    M:net.minecraft.world.level.block.state.properties.BlockStateDirection create(java.lang.String,net.minecraft.core.Direction[]) -> a
    M:net.minecraft.world.level.block.state.properties.BlockStateDirection create(java.lang.String,java.util.Collection) -> a
net.minecraft.world.level.block.state.properties.DoorHingeSide -> cvm -> net.minecraft.world.level.block.state.properties.BlockPropertyDoorHinge
    F:net.minecraft.world.level.block.state.properties.BlockPropertyDoorHinge LEFT -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertyDoorHinge RIGHT -> b
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.block.state.properties.DoubleBlockHalf -> cvn -> net.minecraft.world.level.block.state.properties.BlockPropertyDoubleBlockHalf
    F:net.minecraft.world.level.block.state.properties.BlockPropertyDoubleBlockHalf UPPER -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertyDoubleBlockHalf LOWER -> b
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.block.state.properties.DripstoneThickness -> cvo -> net.minecraft.world.level.block.state.properties.DripstoneThickness
    F:net.minecraft.world.level.block.state.properties.DripstoneThickness TIP_MERGE -> a
    F:net.minecraft.world.level.block.state.properties.DripstoneThickness TIP -> b
    F:net.minecraft.world.level.block.state.properties.DripstoneThickness FRUSTUM -> c
    F:net.minecraft.world.level.block.state.properties.DripstoneThickness MIDDLE -> d
    F:net.minecraft.world.level.block.state.properties.DripstoneThickness BASE -> e
    F:java.lang.String name -> f
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.block.state.properties.EnumProperty -> cvp -> net.minecraft.world.level.block.state.properties.BlockStateEnum
    F:com.google.common.collect.ImmutableSet values -> a
    F:java.util.Map names -> b
    M:java.util.Collection getPossibleValues() -> a
    M:java.util.Optional getValue(java.lang.String) -> b
    M:java.lang.String getName(java.lang.Enum) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int generateHashCode() -> b
    M:net.minecraft.world.level.block.state.properties.BlockStateEnum create(java.lang.String,java.lang.Class) -> a
    M:net.minecraft.world.level.block.state.properties.BlockStateEnum create(java.lang.String,java.lang.Class,java.util.function.Predicate) -> a
    M:net.minecraft.world.level.block.state.properties.BlockStateEnum create(java.lang.String,java.lang.Class,java.lang.Enum[]) -> a
    M:net.minecraft.world.level.block.state.properties.BlockStateEnum create(java.lang.String,java.lang.Class,java.util.Collection) -> a
    M:java.lang.String getName(java.lang.Comparable) -> a
net.minecraft.world.level.block.state.properties.Half -> cvq -> net.minecraft.world.level.block.state.properties.BlockPropertyHalf
    F:net.minecraft.world.level.block.state.properties.BlockPropertyHalf TOP -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertyHalf BOTTOM -> b
    F:java.lang.String name -> c
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.block.state.properties.IntegerProperty -> cvr -> net.minecraft.world.level.block.state.properties.BlockStateInteger
    F:com.google.common.collect.ImmutableSet values -> a
    F:int min -> b
    F:int max -> c
    M:java.util.Collection getPossibleValues() -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int generateHashCode() -> b
    M:net.minecraft.world.level.block.state.properties.BlockStateInteger create(java.lang.String,int,int) -> a
    M:java.util.Optional getValue(java.lang.String) -> b
    M:java.lang.String getName(java.lang.Integer) -> a
    M:java.lang.String getName(java.lang.Comparable) -> a
net.minecraft.world.level.block.state.properties.NoteBlockInstrument -> cvs -> net.minecraft.world.level.block.state.properties.BlockPropertyInstrument
    F:net.minecraft.world.level.block.state.properties.BlockPropertyInstrument HARP -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertyInstrument BASEDRUM -> b
    F:net.minecraft.world.level.block.state.properties.BlockPropertyInstrument SNARE -> c
    F:net.minecraft.world.level.block.state.properties.BlockPropertyInstrument HAT -> d
    F:net.minecraft.world.level.block.state.properties.BlockPropertyInstrument BASS -> e
    F:net.minecraft.world.level.block.state.properties.BlockPropertyInstrument FLUTE -> f
    F:net.minecraft.world.level.block.state.properties.BlockPropertyInstrument BELL -> g
    F:net.minecraft.world.level.block.state.properties.BlockPropertyInstrument GUITAR -> h
    F:net.minecraft.world.level.block.state.properties.BlockPropertyInstrument CHIME -> i
    F:net.minecraft.world.level.block.state.properties.BlockPropertyInstrument XYLOPHONE -> j
    F:net.minecraft.world.level.block.state.properties.BlockPropertyInstrument IRON_XYLOPHONE -> k
    F:net.minecraft.world.level.block.state.properties.BlockPropertyInstrument COW_BELL -> l
    F:net.minecraft.world.level.block.state.properties.BlockPropertyInstrument DIDGERIDOO -> m
    F:net.minecraft.world.level.block.state.properties.BlockPropertyInstrument BIT -> n
    F:net.minecraft.world.level.block.state.properties.BlockPropertyInstrument BANJO -> o
    F:net.minecraft.world.level.block.state.properties.BlockPropertyInstrument PLING -> p
    F:java.lang.String name -> q
    F:net.minecraft.sounds.SoundEffect soundEvent -> r
    M:java.lang.String getSerializedName() -> c
    M:net.minecraft.sounds.SoundEffect getSoundEvent() -> a
    M:net.minecraft.world.level.block.state.properties.BlockPropertyInstrument byState(net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.block.state.properties.PistonType -> cvt -> net.minecraft.world.level.block.state.properties.BlockPropertyPistonType
    F:net.minecraft.world.level.block.state.properties.BlockPropertyPistonType DEFAULT -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertyPistonType STICKY -> b
    F:java.lang.String name -> c
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.block.state.properties.Property -> cvu -> net.minecraft.world.level.block.state.properties.IBlockState
    F:java.lang.Class clazz -> a
    F:java.lang.String name -> b
    F:java.lang.Integer hashCode -> c
    F:com.mojang.serialization.Codec codec -> d
    F:com.mojang.serialization.Codec valueCodec -> e
    M:net.minecraft.world.level.block.state.properties.Property$Value value(java.lang.Comparable) -> b
    M:net.minecraft.world.level.block.state.properties.Property$Value value(net.minecraft.world.level.block.state.IBlockDataHolder) -> a
    M:java.util.stream.Stream getAllValues() -> c
    M:com.mojang.serialization.Codec codec() -> d
    M:com.mojang.serialization.Codec valueCodec() -> e
    M:java.lang.String getName() -> f
    M:java.lang.Class getValueClass() -> g
    M:boolean equals(java.lang.Object) -> equals
    M:int generateHashCode() -> b
    M:com.mojang.serialization.DataResult parseValue(com.mojang.serialization.DynamicOps,net.minecraft.world.level.block.state.IBlockDataHolder,java.lang.Object) -> a
net.minecraft.world.level.block.state.properties.Property$Value -> cvu$a -> net.minecraft.world.level.block.state.properties.IBlockState$a
    F:net.minecraft.world.level.block.state.properties.IBlockState property -> a
    F:java.lang.Comparable value -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.block.state.properties.IBlockState property() -> a
    M:java.lang.Comparable value() -> b
net.minecraft.world.level.block.state.properties.RailShape -> cvv -> net.minecraft.world.level.block.state.properties.BlockPropertyTrackPosition
    F:net.minecraft.world.level.block.state.properties.BlockPropertyTrackPosition NORTH_SOUTH -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertyTrackPosition EAST_WEST -> b
    F:net.minecraft.world.level.block.state.properties.BlockPropertyTrackPosition ASCENDING_EAST -> c
    F:net.minecraft.world.level.block.state.properties.BlockPropertyTrackPosition ASCENDING_WEST -> d
    F:net.minecraft.world.level.block.state.properties.BlockPropertyTrackPosition ASCENDING_NORTH -> e
    F:net.minecraft.world.level.block.state.properties.BlockPropertyTrackPosition ASCENDING_SOUTH -> f
    F:net.minecraft.world.level.block.state.properties.BlockPropertyTrackPosition SOUTH_EAST -> g
    F:net.minecraft.world.level.block.state.properties.BlockPropertyTrackPosition SOUTH_WEST -> h
    F:net.minecraft.world.level.block.state.properties.BlockPropertyTrackPosition NORTH_WEST -> i
    F:net.minecraft.world.level.block.state.properties.BlockPropertyTrackPosition NORTH_EAST -> j
    F:java.lang.String name -> k
    M:java.lang.String getName() -> a
    M:boolean isAscending() -> b
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.block.state.properties.RedstoneSide -> cvw -> net.minecraft.world.level.block.state.properties.BlockPropertyRedstoneSide
    F:net.minecraft.world.level.block.state.properties.BlockPropertyRedstoneSide UP -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertyRedstoneSide SIDE -> b
    F:net.minecraft.world.level.block.state.properties.BlockPropertyRedstoneSide NONE -> c
    F:java.lang.String name -> d
    M:java.lang.String getSerializedName() -> c
    M:boolean isConnected() -> a
net.minecraft.world.level.block.state.properties.SculkSensorPhase -> cvx -> net.minecraft.world.level.block.state.properties.SculkSensorPhase
    F:net.minecraft.world.level.block.state.properties.SculkSensorPhase INACTIVE -> a
    F:net.minecraft.world.level.block.state.properties.SculkSensorPhase ACTIVE -> b
    F:net.minecraft.world.level.block.state.properties.SculkSensorPhase COOLDOWN -> c
    F:java.lang.String name -> d
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.block.state.properties.SlabType -> cvy -> net.minecraft.world.level.block.state.properties.BlockPropertySlabType
    F:net.minecraft.world.level.block.state.properties.BlockPropertySlabType TOP -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertySlabType BOTTOM -> b
    F:net.minecraft.world.level.block.state.properties.BlockPropertySlabType DOUBLE -> c
    F:java.lang.String name -> d
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.block.state.properties.StairsShape -> cvz -> net.minecraft.world.level.block.state.properties.BlockPropertyStairsShape
    F:net.minecraft.world.level.block.state.properties.BlockPropertyStairsShape STRAIGHT -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertyStairsShape INNER_LEFT -> b
    F:net.minecraft.world.level.block.state.properties.BlockPropertyStairsShape INNER_RIGHT -> c
    F:net.minecraft.world.level.block.state.properties.BlockPropertyStairsShape OUTER_LEFT -> d
    F:net.minecraft.world.level.block.state.properties.BlockPropertyStairsShape OUTER_RIGHT -> e
    F:java.lang.String name -> f
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.block.state.properties.StructureMode -> cwa -> net.minecraft.world.level.block.state.properties.BlockPropertyStructureMode
    F:net.minecraft.world.level.block.state.properties.BlockPropertyStructureMode SAVE -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertyStructureMode LOAD -> b
    F:net.minecraft.world.level.block.state.properties.BlockPropertyStructureMode CORNER -> c
    F:net.minecraft.world.level.block.state.properties.BlockPropertyStructureMode DATA -> d
    F:java.lang.String name -> e
    F:net.minecraft.network.chat.IChatBaseComponent displayName -> f
    M:java.lang.String getSerializedName() -> c
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName() -> a
net.minecraft.world.level.block.state.properties.Tilt -> cwb -> net.minecraft.world.level.block.state.properties.Tilt
    F:net.minecraft.world.level.block.state.properties.Tilt NONE -> a
    F:net.minecraft.world.level.block.state.properties.Tilt UNSTABLE -> b
    F:net.minecraft.world.level.block.state.properties.Tilt PARTIAL -> c
    F:net.minecraft.world.level.block.state.properties.Tilt FULL -> d
    F:java.lang.String name -> e
    F:boolean causesVibration -> f
    M:java.lang.String getSerializedName() -> c
    M:boolean causesVibration() -> a
net.minecraft.world.level.block.state.properties.WallSide -> cwc -> net.minecraft.world.level.block.state.properties.BlockPropertyWallHeight
    F:net.minecraft.world.level.block.state.properties.BlockPropertyWallHeight NONE -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertyWallHeight LOW -> b
    F:net.minecraft.world.level.block.state.properties.BlockPropertyWallHeight TALL -> c
    F:java.lang.String name -> d
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.block.state.properties.WoodType -> cwd -> net.minecraft.world.level.block.state.properties.BlockPropertyWood
    F:java.util.Set VALUES -> j
    F:net.minecraft.world.level.block.state.properties.BlockPropertyWood OAK -> a
    F:net.minecraft.world.level.block.state.properties.BlockPropertyWood SPRUCE -> b
    F:net.minecraft.world.level.block.state.properties.BlockPropertyWood BIRCH -> c
    F:net.minecraft.world.level.block.state.properties.BlockPropertyWood ACACIA -> d
    F:net.minecraft.world.level.block.state.properties.BlockPropertyWood JUNGLE -> e
    F:net.minecraft.world.level.block.state.properties.BlockPropertyWood DARK_OAK -> f
    F:net.minecraft.world.level.block.state.properties.BlockPropertyWood CRIMSON -> g
    F:net.minecraft.world.level.block.state.properties.BlockPropertyWood WARPED -> h
    F:net.minecraft.world.level.block.state.properties.BlockPropertyWood MANGROVE -> i
    F:java.lang.String name -> k
    M:net.minecraft.world.level.block.state.properties.BlockPropertyWood register(net.minecraft.world.level.block.state.properties.BlockPropertyWood) -> a
    M:java.util.stream.Stream values() -> a
    M:java.lang.String name() -> b
net.minecraft.world.level.border.BorderChangeListener -> cwf -> net.minecraft.world.level.border.IWorldBorderListener
net.minecraft.world.level.border.BorderChangeListener$DelegateBorderChangeListener -> cwf$a -> net.minecraft.world.level.border.IWorldBorderListener$a
    F:net.minecraft.world.level.border.WorldBorder worldBorder -> a
    M:void onBorderSizeSet(net.minecraft.world.level.border.WorldBorder,double) -> a
    M:void onBorderSizeLerping(net.minecraft.world.level.border.WorldBorder,double,double,long) -> a
    M:void onBorderCenterSet(net.minecraft.world.level.border.WorldBorder,double,double) -> a
    M:void onBorderSetWarningTime(net.minecraft.world.level.border.WorldBorder,int) -> a
    M:void onBorderSetWarningBlocks(net.minecraft.world.level.border.WorldBorder,int) -> b
    M:void onBorderSetDamagePerBlock(net.minecraft.world.level.border.WorldBorder,double) -> b
    M:void onBorderSetDamageSafeZOne(net.minecraft.world.level.border.WorldBorder,double) -> c
net.minecraft.world.level.border.BorderStatus -> cwg -> net.minecraft.world.level.border.BorderStatus
    F:net.minecraft.world.level.border.BorderStatus GROWING -> a
    F:net.minecraft.world.level.border.BorderStatus SHRINKING -> b
    F:net.minecraft.world.level.border.BorderStatus STATIONARY -> c
    F:int color -> d
    M:int getColor() -> a
net.minecraft.world.level.border.WorldBorder -> cwh -> net.minecraft.world.level.border.WorldBorder
    F:double MAX_SIZE -> c
    F:double MAX_CENTER_COORDINATE -> d
    F:java.util.List listeners -> a
    F:double damagePerBlock -> b
    F:double damageSafeZone -> f
    F:int warningTime -> g
    F:int warningBlocks -> h
    F:double centerX -> i
    F:double centerZ -> j
    F:int absoluteMaxSize -> k
    F:net.minecraft.world.level.border.WorldBorder$BorderExtent extent -> l
    F:net.minecraft.world.level.border.WorldBorder$Settings DEFAULT_SETTINGS -> e
    M:boolean isWithinBounds(net.minecraft.core.BlockPosition) -> a
    M:boolean isWithinBounds(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:boolean isWithinBounds(double,double) -> a
    M:boolean isWithinBounds(double,double,double) -> a
    M:boolean isWithinBounds(net.minecraft.world.phys.AxisAlignedBB) -> a
    M:net.minecraft.core.BlockPosition clampToBounds(double,double,double) -> b
    M:double getDistanceToBorder(net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape() -> c
    M:double getDistanceToBorder(double,double) -> b
    M:boolean isInsideCloseToBorder(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AxisAlignedBB) -> a
    M:net.minecraft.world.level.border.BorderStatus getStatus() -> d
    M:double getMinX() -> e
    M:double getMinZ() -> f
    M:double getMaxX() -> g
    M:double getMaxZ() -> h
    M:double getCenterX() -> a
    M:double getCenterZ() -> b
    M:void setCenter(double,double) -> c
    M:double getSize() -> i
    M:long getLerpRemainingTime() -> j
    M:double getLerpTarget() -> k
    M:void setSize(double) -> a
    M:void lerpSizeBetween(double,double,long) -> a
    M:java.util.List getListeners() -> l
    M:void addListener(net.minecraft.world.level.border.IWorldBorderListener) -> a
    M:void removeListener(net.minecraft.world.level.border.IWorldBorderListener) -> b
    M:void setAbsoluteMaxSize(int) -> a
    M:int getAbsoluteMaxSize() -> m
    M:double getDamageSafeZone() -> n
    M:void setDamageSafeZone(double) -> b
    M:double getDamagePerBlock() -> o
    M:void setDamagePerBlock(double) -> c
    M:double getLerpSpeed() -> p
    M:int getWarningTime() -> q
    M:void setWarningTime(int) -> b
    M:int getWarningBlocks() -> r
    M:void setWarningBlocks(int) -> c
    M:void tick() -> s
    M:net.minecraft.world.level.border.WorldBorder$Settings createSettings() -> t
    M:void applySettings(net.minecraft.world.level.border.WorldBorder$Settings) -> a
net.minecraft.world.level.border.WorldBorder$BorderExtent -> cwh$a -> net.minecraft.world.level.border.WorldBorder$a
net.minecraft.world.level.border.WorldBorder$MovingBorderExtent -> cwh$b -> net.minecraft.world.level.border.WorldBorder$b
    F:double from -> b
    F:double to -> c
    F:long lerpEnd -> d
    F:long lerpBegin -> e
    F:double lerpDuration -> f
    M:double getMinX() -> a
    M:double getMinZ() -> c
    M:double getMaxX() -> b
    M:double getMaxZ() -> d
    M:double getSize() -> e
    M:double getLerpSpeed() -> f
    M:long getLerpRemainingTime() -> g
    M:double getLerpTarget() -> h
    M:net.minecraft.world.level.border.BorderStatus getStatus() -> i
    M:void onCenterChange() -> k
    M:void onAbsoluteMaxSizeChange() -> j
    M:net.minecraft.world.level.border.WorldBorder$BorderExtent update() -> l
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape() -> m
net.minecraft.world.level.border.WorldBorder$Settings -> cwh$c -> net.minecraft.world.level.border.WorldBorder$c
    F:double centerX -> a
    F:double centerZ -> b
    F:double damagePerBlock -> c
    F:double safeZone -> d
    F:int warningBlocks -> e
    F:int warningTime -> f
    F:double size -> g
    F:long sizeLerpTime -> h
    F:double sizeLerpTarget -> i
    M:double getCenterX() -> a
    M:double getCenterZ() -> b
    M:double getDamagePerBlock() -> c
    M:double getSafeZone() -> d
    M:int getWarningBlocks() -> e
    M:int getWarningTime() -> f
    M:double getSize() -> g
    M:long getSizeLerpTime() -> h
    M:double getSizeLerpTarget() -> i
    M:net.minecraft.world.level.border.WorldBorder$Settings read(com.mojang.serialization.DynamicLike,net.minecraft.world.level.border.WorldBorder$Settings) -> a
    M:void write(net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.level.border.WorldBorder$StaticBorderExtent -> cwh$d -> net.minecraft.world.level.border.WorldBorder$d
    F:double size -> b
    F:double minX -> c
    F:double minZ -> d
    F:double maxX -> e
    F:double maxZ -> f
    F:net.minecraft.world.phys.shapes.VoxelShape shape -> g
    M:double getMinX() -> a
    M:double getMaxX() -> b
    M:double getMinZ() -> c
    M:double getMaxZ() -> d
    M:double getSize() -> e
    M:net.minecraft.world.level.border.BorderStatus getStatus() -> i
    M:double getLerpSpeed() -> f
    M:long getLerpRemainingTime() -> g
    M:double getLerpTarget() -> h
    M:void updateBox() -> n
    M:void onAbsoluteMaxSizeChange() -> j
    M:void onCenterChange() -> k
    M:net.minecraft.world.level.border.WorldBorder$BorderExtent update() -> l
    M:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape() -> m
net.minecraft.world.level.chunk.BlockColumn -> cwj -> net.minecraft.world.level.chunk.BlockColumn
net.minecraft.world.level.chunk.BulkSectionAccess -> cwk -> net.minecraft.world.level.chunk.BulkSectionAccess
    F:net.minecraft.world.level.GeneratorAccess level -> a
    F:it.unimi.dsi.fastutil.longs.Long2ObjectMap acquiredSections -> b
    F:net.minecraft.world.level.chunk.ChunkSection lastSection -> c
    F:long lastSectionKey -> d
    M:net.minecraft.world.level.chunk.ChunkSection getSection(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getBlockState(net.minecraft.core.BlockPosition) -> b
    M:void close() -> close
net.minecraft.world.level.chunk.CarvingMask -> cwl -> net.minecraft.world.level.chunk.CarvingMask
    F:int minY -> a
    F:java.util.BitSet mask -> b
    F:net.minecraft.world.level.chunk.CarvingMask$Mask additionalMask -> c
    M:void setAdditionalMask(net.minecraft.world.level.chunk.CarvingMask$Mask) -> a
    M:int getIndex(int,int,int) -> c
    M:void set(int,int,int) -> a
    M:boolean get(int,int,int) -> b
    M:java.util.stream.Stream stream(net.minecraft.world.level.ChunkCoordIntPair) -> a
net.minecraft.world.level.chunk.CarvingMask$Mask -> cwl$a -> net.minecraft.world.level.chunk.CarvingMask$a
net.minecraft.world.level.chunk.ChunkAccess -> cwm -> net.minecraft.world.level.chunk.IChunkAccess
    F:org.slf4j.Logger LOGGER -> l
    F:it.unimi.dsi.fastutil.longs.LongSet EMPTY_REFERENCE_SET -> m
    F:boolean unsaved -> b
    F:boolean isLightCorrect -> n
    F:net.minecraft.world.level.ChunkCoordIntPair chunkPos -> c
    F:long inhabitedTime -> o
    F:net.minecraft.world.level.biome.BiomeSettingsGeneration carverBiomeSettings -> p
    F:net.minecraft.world.level.levelgen.NoiseChunk noiseChunk -> d
    F:net.minecraft.world.level.chunk.ChunkConverter upgradeData -> e
    F:net.minecraft.world.level.levelgen.blending.BlendingData blendingData -> f
    F:java.util.Map heightmaps -> g
    F:java.util.Map structureStarts -> q
    F:java.util.Map structuresRefences -> r
    F:java.util.Map pendingBlockEntities -> h
    F:java.util.Map blockEntities -> i
    F:net.minecraft.world.level.LevelHeightAccessor levelHeightAccessor -> j
    M:void replaceMissingSections(net.minecraft.world.level.LevelHeightAccessor,net.minecraft.core.IRegistry,net.minecraft.world.level.chunk.LevelChunkSection[]) -> a
    M:net.minecraft.world.level.gameevent.GameEventDispatcher getEventDispatcher(int) -> a
    M:net.minecraft.world.level.chunk.ChunkSection getHighestSection() -> a
    M:int getHighestSectionPosition() -> b
    M:java.util.Set getBlockEntitiesPos() -> c
    M:net.minecraft.world.level.chunk.ChunkSection getSection(int) -> b
    M:java.util.Collection getHeightmaps() -> e
    M:void setHeightmap(net.minecraft.world.level.levelgen.HeightMap$Type,long[]) -> a
    M:net.minecraft.world.level.levelgen.HeightMap getOrCreateHeightmapUnprimed(net.minecraft.world.level.levelgen.HeightMap$Type) -> a
    M:boolean hasPrimedHeightmap(net.minecraft.world.level.levelgen.HeightMap$Type) -> b
    M:int getHeight(net.minecraft.world.level.levelgen.HeightMap$Type,int,int) -> a
    M:net.minecraft.world.level.ChunkCoordIntPair getPos() -> f
    M:net.minecraft.world.level.levelgen.structure.StructureStart getStartForStructure(net.minecraft.world.level.levelgen.structure.Structure) -> a
    M:void setStartForStructure(net.minecraft.world.level.levelgen.structure.Structure,net.minecraft.world.level.levelgen.structure.StructureStart) -> a
    M:java.util.Map getAllStarts() -> g
    M:void setAllStarts(java.util.Map) -> a
    M:it.unimi.dsi.fastutil.longs.LongSet getReferencesForStructure(net.minecraft.world.level.levelgen.structure.Structure) -> b
    M:void addReferenceForStructure(net.minecraft.world.level.levelgen.structure.Structure,long) -> a
    M:java.util.Map getAllReferences() -> h
    M:void setAllReferences(java.util.Map) -> b
    M:boolean isYSpaceEmpty(int,int) -> a
    M:void setUnsaved(boolean) -> a
    M:boolean isUnsaved() -> i
    M:void markPosForPostprocessing(net.minecraft.core.BlockPosition) -> e
    M:void addPackedPostProcess(short,int) -> a
    M:void setBlockEntityNbt(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagCompound getBlockEntityNbt(net.minecraft.core.BlockPosition) -> f
    M:net.minecraft.world.level.chunk.ChunkConverter getUpgradeData() -> r
    M:boolean isOldNoiseGeneration() -> s
    M:net.minecraft.world.level.levelgen.blending.BlendingData getBlendingData() -> t
    M:void setBlendingData(net.minecraft.world.level.levelgen.blending.BlendingData) -> a
    M:long getInhabitedTime() -> u
    M:void incrementInhabitedTime(long) -> a
    M:void setInhabitedTime(long) -> b
    M:it.unimi.dsi.fastutil.shorts.ShortList getOrCreateOffsetList(it.unimi.dsi.fastutil.shorts.ShortList[],int) -> a
    M:boolean isLightCorrect() -> v
    M:void setLightCorrect(boolean) -> b
    M:net.minecraft.world.level.levelgen.NoiseChunk getOrCreateNoiseChunk(java.util.function.Function) -> a
    M:net.minecraft.world.level.biome.BiomeSettingsGeneration carverBiome(java.util.function.Supplier) -> a
    M:void fillBiomesFromNoise(net.minecraft.world.level.biome.BiomeResolver,net.minecraft.world.level.biome.Climate$Sampler) -> a
    M:boolean hasAnyStructureReferences() -> w
    M:net.minecraft.world.level.levelgen.BelowZeroRetrogen getBelowZeroRetrogen() -> x
    M:boolean isUpgrading() -> y
    M:net.minecraft.world.level.LevelHeightAccessor getHeightAccessorForGeneration() -> z
net.minecraft.world.level.chunk.ChunkAccess$TicksToSave -> cwm$a -> net.minecraft.world.level.chunk.IChunkAccess$a
    F:net.minecraft.world.ticks.SerializableTickContainer blocks -> a
    F:net.minecraft.world.ticks.SerializableTickContainer fluids -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.ticks.SerializableTickContainer blocks() -> a
    M:net.minecraft.world.ticks.SerializableTickContainer fluids() -> b
net.minecraft.world.level.chunk.ChunkGenerator -> cwn -> net.minecraft.world.level.chunk.ChunkGenerator
    F:org.slf4j.Logger LOGGER -> e
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.core.IRegistry structureSets -> b
    F:net.minecraft.world.level.biome.WorldChunkManager biomeSource -> c
    F:java.util.function.Supplier featuresPerStep -> f
    F:java.util.Optional structureOverrides -> d
    F:java.util.function.Function generationSettingsGetter -> g
    F:java.util.Map placementsForStructure -> h
    F:java.util.Map ringPositions -> i
    F:boolean hasGeneratedPositions -> j
    M:com.mojang.datafixers.Products$P1 commonCodec(com.mojang.serialization.codecs.RecordCodecBuilder$Instance) -> a
    M:java.util.stream.Stream possibleStructureSets() -> a
    M:void generatePositions(net.minecraft.world.level.levelgen.RandomState) -> b
    M:java.util.concurrent.CompletableFuture generateRingPositions(net.minecraft.core.Holder,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.levelgen.structure.placement.ConcentricRingsStructurePlacement) -> a
    M:java.util.Optional getTypeNameForDataFixer() -> c
    M:java.util.concurrent.CompletableFuture createBiomes(net.minecraft.core.IRegistry,java.util.concurrent.Executor,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.levelgen.blending.Blender,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:com.mojang.datafixers.util.Pair findNearestMapStructure(net.minecraft.server.level.WorldServer,net.minecraft.core.HolderSet,net.minecraft.core.BlockPosition,int,boolean) -> a
    M:com.mojang.datafixers.util.Pair getNearestGeneratedStructure(java.util.Set,net.minecraft.server.level.WorldServer,net.minecraft.world.level.StructureManager,net.minecraft.core.BlockPosition,boolean,net.minecraft.world.level.levelgen.structure.placement.ConcentricRingsStructurePlacement) -> a
    M:com.mojang.datafixers.util.Pair getNearestGeneratedStructure(java.util.Set,net.minecraft.world.level.IWorldReader,net.minecraft.world.level.StructureManager,int,int,int,boolean,long,net.minecraft.world.level.levelgen.structure.placement.RandomSpreadStructurePlacement) -> a
    M:com.mojang.datafixers.util.Pair getStructureGeneratingAt(java.util.Set,net.minecraft.world.level.IWorldReader,net.minecraft.world.level.StructureManager,boolean,net.minecraft.world.level.levelgen.structure.placement.StructurePlacement,net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:boolean tryAddReference(net.minecraft.world.level.StructureManager,net.minecraft.world.level.levelgen.structure.StructureStart) -> a
    M:void applyBiomeDecoration(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.world.level.StructureManager) -> a
    M:boolean hasStructureChunkInRange(net.minecraft.core.Holder,net.minecraft.world.level.levelgen.RandomState,long,int,int,int) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox getWritableArea(net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:int getSpawnHeight(net.minecraft.world.level.LevelHeightAccessor) -> a
    M:net.minecraft.world.level.biome.WorldChunkManager getBiomeSource() -> d
    M:net.minecraft.util.random.WeightedRandomList getMobsAt(net.minecraft.core.Holder,net.minecraft.world.level.StructureManager,net.minecraft.world.entity.EnumCreatureType,net.minecraft.core.BlockPosition) -> a
    M:void createStructures(net.minecraft.core.IRegistryCustom,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,long) -> a
    M:boolean tryGenerateStructure(net.minecraft.world.level.levelgen.structure.StructureSet$StructureSelectionEntry,net.minecraft.world.level.StructureManager,net.minecraft.core.IRegistryCustom,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,long,net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.SectionPosition) -> a
    M:int fetchReferences(net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.core.SectionPosition,net.minecraft.world.level.levelgen.structure.Structure) -> a
    M:void createReferences(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:int getFirstFreeHeight(int,int,net.minecraft.world.level.levelgen.HeightMap$Type,net.minecraft.world.level.LevelHeightAccessor,net.minecraft.world.level.levelgen.RandomState) -> b
    M:int getFirstOccupiedHeight(int,int,net.minecraft.world.level.levelgen.HeightMap$Type,net.minecraft.world.level.LevelHeightAccessor,net.minecraft.world.level.levelgen.RandomState) -> c
    M:void ensureStructuresGenerated(net.minecraft.world.level.levelgen.RandomState) -> a
    M:java.util.List getRingPositionsFor(net.minecraft.world.level.levelgen.structure.placement.ConcentricRingsStructurePlacement,net.minecraft.world.level.levelgen.RandomState) -> a
    M:java.util.List getPlacementsForStructure(net.minecraft.core.Holder,net.minecraft.world.level.levelgen.RandomState) -> a
    M:net.minecraft.world.level.biome.BiomeSettingsGeneration getBiomeGenerationSettings(net.minecraft.core.Holder) -> a
net.minecraft.world.level.chunk.ChunkGenerators -> cwo -> net.minecraft.world.level.chunk.ChunkGenerators
    M:com.mojang.serialization.Codec bootstrap(net.minecraft.core.IRegistry) -> a
net.minecraft.world.level.chunk.ChunkSource -> cwp -> net.minecraft.world.level.chunk.IChunkProvider
    M:net.minecraft.world.level.chunk.Chunk getChunk(int,int,boolean) -> a
    M:net.minecraft.world.level.chunk.Chunk getChunkNow(int,int) -> a
    M:net.minecraft.world.level.IBlockAccess getChunkForLighting(int,int) -> c
    M:boolean hasChunk(int,int) -> b
    M:void close() -> close
    M:void setSpawnSettings(boolean,boolean) -> a
    M:void updateChunkForced(net.minecraft.world.level.ChunkCoordIntPair,boolean) -> a
net.minecraft.world.level.chunk.ChunkStatus -> cwq -> net.minecraft.world.level.chunk.ChunkStatus
    F:int MAX_STRUCTURE_DISTANCE -> a
    F:java.util.EnumSet PRE_FEATURES -> p
    F:java.util.EnumSet POST_FEATURES -> b
    F:net.minecraft.world.level.chunk.ChunkStatus$LoadingTask PASSTHROUGH_LOAD_TASK -> q
    F:net.minecraft.world.level.chunk.ChunkStatus EMPTY -> c
    F:net.minecraft.world.level.chunk.ChunkStatus STRUCTURE_STARTS -> d
    F:net.minecraft.world.level.chunk.ChunkStatus STRUCTURE_REFERENCES -> e
    F:net.minecraft.world.level.chunk.ChunkStatus BIOMES -> f
    F:net.minecraft.world.level.chunk.ChunkStatus NOISE -> g
    F:net.minecraft.world.level.chunk.ChunkStatus SURFACE -> h
    F:net.minecraft.world.level.chunk.ChunkStatus CARVERS -> i
    F:net.minecraft.world.level.chunk.ChunkStatus LIQUID_CARVERS -> j
    F:net.minecraft.world.level.chunk.ChunkStatus FEATURES -> k
    F:net.minecraft.world.level.chunk.ChunkStatus LIGHT -> l
    F:net.minecraft.world.level.chunk.ChunkStatus SPAWN -> m
    F:net.minecraft.world.level.chunk.ChunkStatus HEIGHTMAPS -> n
    F:net.minecraft.world.level.chunk.ChunkStatus FULL -> o
    F:java.util.List STATUS_BY_RANGE -> r
    F:it.unimi.dsi.fastutil.ints.IntList RANGE_BY_STATUS -> s
    F:java.lang.String name -> t
    F:int index -> u
    F:net.minecraft.world.level.chunk.ChunkStatus parent -> v
    F:net.minecraft.world.level.chunk.ChunkStatus$GenerationTask generationTask -> w
    F:net.minecraft.world.level.chunk.ChunkStatus$LoadingTask loadingTask -> x
    F:int range -> y
    F:net.minecraft.world.level.chunk.ChunkStatus$Type chunkType -> z
    M:java.util.concurrent.CompletableFuture lightChunk(net.minecraft.world.level.chunk.ChunkStatus,net.minecraft.server.level.LightEngineThreaded,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:net.minecraft.world.level.chunk.ChunkStatus registerSimple(java.lang.String,net.minecraft.world.level.chunk.ChunkStatus,int,java.util.EnumSet,net.minecraft.world.level.chunk.ChunkStatus$Type,net.minecraft.world.level.chunk.ChunkStatus$SimpleGenerationTask) -> a
    M:net.minecraft.world.level.chunk.ChunkStatus register(java.lang.String,net.minecraft.world.level.chunk.ChunkStatus,int,java.util.EnumSet,net.minecraft.world.level.chunk.ChunkStatus$Type,net.minecraft.world.level.chunk.ChunkStatus$GenerationTask) -> a
    M:net.minecraft.world.level.chunk.ChunkStatus register(java.lang.String,net.minecraft.world.level.chunk.ChunkStatus,int,java.util.EnumSet,net.minecraft.world.level.chunk.ChunkStatus$Type,net.minecraft.world.level.chunk.ChunkStatus$GenerationTask,net.minecraft.world.level.chunk.ChunkStatus$LoadingTask) -> a
    M:java.util.List getStatusList() -> a
    M:boolean isLighted(net.minecraft.world.level.chunk.ChunkStatus,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:net.minecraft.world.level.chunk.ChunkStatus getStatusAroundFullChunk(int) -> a
    M:int maxDistance() -> b
    M:int getDistance(net.minecraft.world.level.chunk.ChunkStatus) -> a
    M:int getIndex() -> c
    M:java.lang.String getName() -> d
    M:net.minecraft.world.level.chunk.ChunkStatus getParent() -> e
    M:java.util.concurrent.CompletableFuture generate(java.util.concurrent.Executor,net.minecraft.server.level.WorldServer,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.server.level.LightEngineThreaded,java.util.function.Function,java.util.List,boolean) -> a
    M:java.util.concurrent.CompletableFuture load(net.minecraft.server.level.WorldServer,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.server.level.LightEngineThreaded,java.util.function.Function,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:int getRange() -> f
    M:net.minecraft.world.level.chunk.ChunkStatus$Type getChunkType() -> g
    M:net.minecraft.world.level.chunk.ChunkStatus byName(java.lang.String) -> a
    M:java.util.EnumSet heightmapsAfter() -> h
    M:boolean isOrAfter(net.minecraft.world.level.chunk.ChunkStatus) -> b
net.minecraft.world.level.chunk.ChunkStatus$ChunkType -> cwq$a -> net.minecraft.world.level.chunk.ChunkStatus$Type
    F:net.minecraft.world.level.chunk.ChunkStatus$Type PROTOCHUNK -> a
    F:net.minecraft.world.level.chunk.ChunkStatus$Type LEVELCHUNK -> b
net.minecraft.world.level.chunk.ChunkStatus$GenerationTask -> cwq$b -> net.minecraft.world.level.chunk.ChunkStatus$b
net.minecraft.world.level.chunk.ChunkStatus$LoadingTask -> cwq$c -> net.minecraft.world.level.chunk.ChunkStatus$c
net.minecraft.world.level.chunk.ChunkStatus$SimpleGenerationTask -> cwq$d -> net.minecraft.world.level.chunk.ChunkStatus$d
net.minecraft.world.level.chunk.DataLayer -> cwr -> net.minecraft.world.level.chunk.NibbleArray
    F:int LAYER_COUNT -> a
    F:int LAYER_SIZE -> b
    F:int SIZE -> c
    F:int NIBBLE_SIZE -> e
    M:int get(int,int,int) -> a
    M:void set(int,int,int,int) -> a
    M:int getIndex(int,int,int) -> b
    M:int get(int) -> b
    M:void set(int,int) -> a
    M:int getNibbleIndex(int) -> c
    M:int getByteIndex(int) -> d
    M:net.minecraft.world.level.chunk.NibbleArray copy() -> b
    M:java.lang.String layerToString(int) -> a
    M:boolean isEmpty() -> c
net.minecraft.world.level.chunk.EmptyLevelChunk -> cws -> net.minecraft.world.level.chunk.ChunkEmpty
    F:net.minecraft.core.Holder biome -> l
    M:net.minecraft.world.level.block.state.IBlockData setBlockState(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:int getLightEmission(net.minecraft.core.BlockPosition) -> h
    M:net.minecraft.world.level.block.entity.TileEntity getBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.chunk.Chunk$EnumTileEntityState) -> a
    M:void addAndRegisterBlockEntity(net.minecraft.world.level.block.entity.TileEntity) -> b
    M:void setBlockEntity(net.minecraft.world.level.block.entity.TileEntity) -> a
    M:void removeBlockEntity(net.minecraft.core.BlockPosition) -> d
    M:boolean isYSpaceEmpty(int,int) -> a
net.minecraft.world.level.chunk.GlobalPalette -> cwt -> net.minecraft.world.level.chunk.DataPaletteGlobal
    F:net.minecraft.core.Registry registry -> a
    M:net.minecraft.world.level.chunk.DataPalette create(int,net.minecraft.core.Registry,net.minecraft.world.level.chunk.DataPaletteExpandable,java.util.List) -> a
    M:int idFor(java.lang.Object) -> a
    M:boolean maybeHas(java.util.function.Predicate) -> a
    M:java.lang.Object valueFor(int) -> a
    M:void read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> b
    M:int getSerializedSize() -> a
    M:int getSize() -> b
    M:net.minecraft.world.level.chunk.DataPalette copy() -> c
net.minecraft.world.level.chunk.HashMapPalette -> cwu -> net.minecraft.world.level.chunk.DataPaletteHash
    F:net.minecraft.core.Registry registry -> a
    F:net.minecraft.util.RegistryID values -> b
    F:net.minecraft.world.level.chunk.DataPaletteExpandable resizeHandler -> c
    F:int bits -> d
    M:net.minecraft.world.level.chunk.DataPalette create(int,net.minecraft.core.Registry,net.minecraft.world.level.chunk.DataPaletteExpandable,java.util.List) -> a
    M:int idFor(java.lang.Object) -> a
    M:boolean maybeHas(java.util.function.Predicate) -> a
    M:java.lang.Object valueFor(int) -> a
    M:void read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> b
    M:int getSerializedSize() -> a
    M:java.util.List getEntries() -> d
    M:int getSize() -> b
    M:net.minecraft.world.level.chunk.DataPalette copy() -> c
net.minecraft.world.level.chunk.ImposterProtoChunk -> cwv -> net.minecraft.world.level.chunk.ProtoChunkExtension
    F:net.minecraft.world.level.chunk.Chunk wrapped -> l
    F:boolean allowWrites -> m
    M:net.minecraft.world.level.chunk.ChunkSection getSection(int) -> b
    M:net.minecraft.world.level.block.state.IBlockData setBlockState(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void setBlockEntity(net.minecraft.world.level.block.entity.TileEntity) -> a
    M:void addEntity(net.minecraft.world.entity.Entity) -> a
    M:void setStatus(net.minecraft.world.level.chunk.ChunkStatus) -> a
    M:void setHeightmap(net.minecraft.world.level.levelgen.HeightMap$Type,long[]) -> a
    M:net.minecraft.world.level.levelgen.HeightMap$Type fixType(net.minecraft.world.level.levelgen.HeightMap$Type) -> c
    M:net.minecraft.world.level.levelgen.HeightMap getOrCreateHeightmapUnprimed(net.minecraft.world.level.levelgen.HeightMap$Type) -> a
    M:int getHeight(net.minecraft.world.level.levelgen.HeightMap$Type,int,int) -> a
    M:net.minecraft.world.level.ChunkCoordIntPair getPos() -> f
    M:net.minecraft.world.level.levelgen.structure.StructureStart getStartForStructure(net.minecraft.world.level.levelgen.structure.Structure) -> a
    M:void setStartForStructure(net.minecraft.world.level.levelgen.structure.Structure,net.minecraft.world.level.levelgen.structure.StructureStart) -> a
    M:java.util.Map getAllStarts() -> g
    M:void setAllStarts(java.util.Map) -> a
    M:it.unimi.dsi.fastutil.longs.LongSet getReferencesForStructure(net.minecraft.world.level.levelgen.structure.Structure) -> b
    M:void addReferenceForStructure(net.minecraft.world.level.levelgen.structure.Structure,long) -> a
    M:java.util.Map getAllReferences() -> h
    M:void setAllReferences(java.util.Map) -> b
    M:void setUnsaved(boolean) -> a
    M:boolean isUnsaved() -> i
    M:net.minecraft.world.level.chunk.ChunkStatus getStatus() -> j
    M:void removeBlockEntity(net.minecraft.core.BlockPosition) -> d
    M:void markPosForPostprocessing(net.minecraft.core.BlockPosition) -> e
    M:void setBlockEntityNbt(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagCompound getBlockEntityNbt(net.minecraft.core.BlockPosition) -> f
    M:net.minecraft.nbt.NBTTagCompound getBlockEntityNbtForSaving(net.minecraft.core.BlockPosition) -> g
    M:java.util.stream.Stream getLights() -> n
    M:net.minecraft.world.ticks.TickContainerAccess getBlockTicks() -> o
    M:net.minecraft.world.ticks.TickContainerAccess getFluidTicks() -> p
    M:net.minecraft.world.level.chunk.ChunkAccess$TicksToSave getTicksForSerialization() -> q
    M:net.minecraft.world.level.levelgen.blending.BlendingData getBlendingData() -> t
    M:void setBlendingData(net.minecraft.world.level.levelgen.blending.BlendingData) -> a
    M:net.minecraft.world.level.chunk.CarvingMask getCarvingMask(net.minecraft.world.level.levelgen.WorldGenStage$Features) -> a
    M:net.minecraft.world.level.chunk.CarvingMask getOrCreateCarvingMask(net.minecraft.world.level.levelgen.WorldGenStage$Features) -> b
    M:boolean isLightCorrect() -> v
    M:void setLightCorrect(boolean) -> b
    M:void fillBiomesFromNoise(net.minecraft.world.level.biome.BiomeResolver,net.minecraft.world.level.biome.Climate$Sampler) -> a
net.minecraft.world.level.chunk.LevelChunk -> cww -> net.minecraft.world.level.chunk.Chunk
    F:org.slf4j.Logger LOGGER -> l
    F:net.minecraft.world.level.block.entity.TickingBlockEntity NULL_TICKER -> m
    F:java.util.Map tickersInLevel -> n
    F:boolean loaded -> o
    F:boolean clientLightReady -> p
    F:net.minecraft.world.level.World level -> q
    F:java.util.function.Supplier fullStatus -> r
    F:net.minecraft.world.level.chunk.LevelChunk$PostLoadProcessor postLoad -> s
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap gameEventDispatcherSections -> t
    F:net.minecraft.world.ticks.LevelChunkTicks blockTicks -> u
    F:net.minecraft.world.ticks.LevelChunkTicks fluidTicks -> v
    M:net.minecraft.world.ticks.TickContainerAccess getBlockTicks() -> o
    M:net.minecraft.world.ticks.TickContainerAccess getFluidTicks() -> p
    M:net.minecraft.world.level.chunk.ChunkAccess$TicksToSave getTicksForSerialization() -> q
    M:net.minecraft.world.level.gameevent.GameEventDispatcher getEventDispatcher(int) -> a
    M:net.minecraft.world.level.material.Fluid getFluidState(int,int,int) -> a
    M:net.minecraft.world.level.block.state.IBlockData setBlockState(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void addEntity(net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.level.block.entity.TileEntity createBlockEntity(net.minecraft.core.BlockPosition) -> j
    M:net.minecraft.world.level.block.entity.TileEntity getBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.world.level.chunk.Chunk$EnumTileEntityState) -> a
    M:void addAndRegisterBlockEntity(net.minecraft.world.level.block.entity.TileEntity) -> b
    M:boolean isTicking(net.minecraft.core.BlockPosition) -> k
    M:void setBlockEntity(net.minecraft.world.level.block.entity.TileEntity) -> a
    M:net.minecraft.nbt.NBTTagCompound getBlockEntityNbtForSaving(net.minecraft.core.BlockPosition) -> g
    M:void removeBlockEntity(net.minecraft.core.BlockPosition) -> d
    M:void removeGameEventListener(net.minecraft.world.level.block.entity.TileEntity,net.minecraft.server.level.WorldServer) -> a
    M:void removeBlockEntityTicker(net.minecraft.core.BlockPosition) -> l
    M:void replaceWithPacketData(net.minecraft.network.PacketDataSerializer,net.minecraft.nbt.NBTTagCompound,java.util.function.Consumer) -> a
    M:void setLoaded(boolean) -> c
    M:java.util.stream.Stream getLights() -> n
    M:net.minecraft.world.level.block.entity.TileEntity promotePendingBlockEntity(net.minecraft.core.BlockPosition,net.minecraft.nbt.NBTTagCompound) -> a
    M:void unpackTicks(long) -> c
    M:void registerTickContainerInLevel(net.minecraft.server.level.WorldServer) -> a
    M:void unregisterTickContainerFromLevel(net.minecraft.server.level.WorldServer) -> b
    M:net.minecraft.world.level.chunk.ChunkStatus getStatus() -> j
    M:void setFullStatus(java.util.function.Supplier) -> b
    M:void addGameEventListener(net.minecraft.world.level.block.entity.TileEntity,net.minecraft.server.level.WorldServer) -> b
    M:void updateBlockEntityTicker(net.minecraft.world.level.block.entity.TileEntity) -> c
    M:net.minecraft.world.level.block.entity.TickingBlockEntity createTicker(net.minecraft.world.level.block.entity.TileEntity,net.minecraft.world.level.block.entity.BlockEntityTicker) -> a
    M:void setClientLightReady(boolean) -> d
    M:void tick() -> a
    M:boolean isRemoved() -> b
    M:net.minecraft.core.BlockPosition getPos() -> c
    M:java.lang.String getType() -> d
net.minecraft.world.level.chunk.LevelChunk$BoundTickingBlockEntity -> cww$a -> net.minecraft.world.level.chunk.Chunk$a
    F:net.minecraft.world.level.block.entity.TileEntity blockEntity -> b
    F:net.minecraft.world.level.block.entity.BlockEntityTicker ticker -> c
    F:boolean loggedInvalidBlockState -> d
    M:void tick() -> a
    M:boolean isRemoved() -> b
    M:net.minecraft.core.BlockPosition getPos() -> c
    M:java.lang.String getType() -> d
net.minecraft.world.level.chunk.LevelChunk$EntityCreationType -> cww$b -> net.minecraft.world.level.chunk.Chunk$EnumTileEntityState
    F:net.minecraft.world.level.chunk.Chunk$EnumTileEntityState IMMEDIATE -> a
    F:net.minecraft.world.level.chunk.Chunk$EnumTileEntityState QUEUED -> b
    F:net.minecraft.world.level.chunk.Chunk$EnumTileEntityState CHECK -> c
net.minecraft.world.level.chunk.LevelChunk$PostLoadProcessor -> cww$c -> net.minecraft.world.level.chunk.Chunk$c
net.minecraft.world.level.chunk.LevelChunk$RebindableTickingBlockEntityWrapper -> cww$d -> net.minecraft.world.level.chunk.Chunk$d
    F:net.minecraft.world.level.block.entity.TickingBlockEntity ticker -> b
    M:void rebind(net.minecraft.world.level.block.entity.TickingBlockEntity) -> a
    M:void tick() -> a
    M:boolean isRemoved() -> b
    M:net.minecraft.core.BlockPosition getPos() -> c
    M:java.lang.String getType() -> d
net.minecraft.world.level.chunk.LevelChunkSection -> cwx -> net.minecraft.world.level.chunk.ChunkSection
    F:int SECTION_WIDTH -> a
    F:int SECTION_HEIGHT -> b
    F:int SECTION_SIZE -> c
    F:int BIOME_CONTAINER_BITS -> d
    F:int bottomBlockY -> e
    F:short nonEmptyBlockCount -> f
    F:short tickingBlockCount -> g
    F:short tickingFluidCount -> h
    F:net.minecraft.world.level.chunk.DataPaletteBlock states -> i
    F:net.minecraft.world.level.chunk.PalettedContainerRO biomes -> j
    M:int getBottomBlockY(int) -> a
    M:net.minecraft.world.level.block.state.IBlockData getBlockState(int,int,int) -> a
    M:net.minecraft.world.level.material.Fluid getFluidState(int,int,int) -> b
    M:void acquire() -> a
    M:void release() -> b
    M:net.minecraft.world.level.block.state.IBlockData setBlockState(int,int,int,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData setBlockState(int,int,int,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:boolean hasOnlyAir() -> c
    M:boolean isRandomlyTicking() -> d
    M:boolean isRandomlyTickingBlocks() -> e
    M:boolean isRandomlyTickingFluids() -> f
    M:int bottomBlockY() -> g
    M:void recalcBlockCounts() -> h
    M:net.minecraft.world.level.chunk.DataPaletteBlock getStates() -> i
    M:net.minecraft.world.level.chunk.PalettedContainerRO getBiomes() -> j
    M:void read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> b
    M:int getSerializedSize() -> k
    M:boolean maybeHas(java.util.function.Predicate) -> a
    M:net.minecraft.core.Holder getNoiseBiome(int,int,int) -> c
    M:void fillBiomesFromNoise(net.minecraft.world.level.biome.BiomeResolver,net.minecraft.world.level.biome.Climate$Sampler,int,int) -> a
net.minecraft.world.level.chunk.LevelChunkSection$1BlockCounter -> cwx$a -> net.minecraft.world.level.chunk.ChunkSection$a
    F:int nonEmptyBlockCount -> a
    F:int tickingBlockCount -> b
    F:int tickingFluidCount -> c
    M:void accept(net.minecraft.world.level.block.state.IBlockData,int) -> a
    M:void accept(java.lang.Object,int) -> accept
net.minecraft.world.level.chunk.LightChunkGetter -> cwy -> net.minecraft.world.level.chunk.ILightAccess
    M:void onLightUpdate(net.minecraft.world.level.EnumSkyBlock,net.minecraft.core.SectionPosition) -> a
net.minecraft.world.level.chunk.LinearPalette -> cwz -> net.minecraft.world.level.chunk.DataPaletteLinear
    F:net.minecraft.core.Registry registry -> a
    F:net.minecraft.world.level.chunk.DataPaletteExpandable resizeHandler -> c
    F:int bits -> d
    F:int size -> e
    M:net.minecraft.world.level.chunk.DataPalette create(int,net.minecraft.core.Registry,net.minecraft.world.level.chunk.DataPaletteExpandable,java.util.List) -> a
    M:int idFor(java.lang.Object) -> a
    M:boolean maybeHas(java.util.function.Predicate) -> a
    M:java.lang.Object valueFor(int) -> a
    M:void read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> b
    M:int getSerializedSize() -> a
    M:int getSize() -> b
    M:net.minecraft.world.level.chunk.DataPalette copy() -> c
net.minecraft.world.level.chunk.MissingPaletteEntryException -> cxa -> net.minecraft.world.level.chunk.MissingPaletteEntryException
net.minecraft.world.level.chunk.Palette -> cxb -> net.minecraft.world.level.chunk.DataPalette
net.minecraft.world.level.chunk.Palette$Factory -> cxb$a -> net.minecraft.world.level.chunk.DataPalette$a
net.minecraft.world.level.chunk.PaletteResize -> cxc -> net.minecraft.world.level.chunk.DataPaletteExpandable
net.minecraft.world.level.chunk.PalettedContainer -> cxd -> net.minecraft.world.level.chunk.DataPaletteBlock
    F:int MIN_PALETTE_BITS -> a
    F:net.minecraft.world.level.chunk.DataPaletteExpandable dummyPaletteResize -> b
    F:net.minecraft.core.Registry registry -> c
    F:net.minecraft.world.level.chunk.PalettedContainer$Data data -> d
    F:net.minecraft.world.level.chunk.PalettedContainer$Strategy strategy -> e
    F:net.minecraft.util.ThreadingDetector threadingDetector -> f
    M:void acquire() -> a
    M:void release() -> b
    M:com.mojang.serialization.Codec codecRW(net.minecraft.core.Registry,com.mojang.serialization.Codec,net.minecraft.world.level.chunk.PalettedContainer$Strategy,java.lang.Object) -> a
    M:com.mojang.serialization.Codec codecRO(net.minecraft.core.Registry,com.mojang.serialization.Codec,net.minecraft.world.level.chunk.PalettedContainer$Strategy,java.lang.Object) -> b
    M:com.mojang.serialization.Codec codec(net.minecraft.core.Registry,com.mojang.serialization.Codec,net.minecraft.world.level.chunk.PalettedContainer$Strategy,java.lang.Object,net.minecraft.world.level.chunk.PalettedContainerRO$Unpacker) -> a
    M:net.minecraft.world.level.chunk.PalettedContainer$Data createOrReuseData(net.minecraft.world.level.chunk.PalettedContainer$Data,int) -> a
    M:java.lang.Object getAndSet(int,int,int,java.lang.Object) -> a
    M:java.lang.Object getAndSetUnchecked(int,int,int,java.lang.Object) -> b
    M:java.lang.Object getAndSet(int,java.lang.Object) -> a
    M:void set(int,int,int,java.lang.Object) -> c
    M:void set(int,java.lang.Object) -> b
    M:java.lang.Object get(int,int,int) -> a
    M:java.lang.Object get(int) -> a
    M:void getAll(java.util.function.Consumer) -> a
    M:void read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> b
    M:com.mojang.serialization.DataResult unpack(net.minecraft.core.Registry,net.minecraft.world.level.chunk.PalettedContainer$Strategy,net.minecraft.world.level.chunk.PalettedContainerRO$PackedData) -> a
    M:net.minecraft.world.level.chunk.PalettedContainerRO$PackedData pack(net.minecraft.core.Registry,net.minecraft.world.level.chunk.PalettedContainer$Strategy) -> a
    M:void swapPalette(int[],java.util.function.IntUnaryOperator) -> a
    M:int getSerializedSize() -> c
    M:boolean maybeHas(java.util.function.Predicate) -> a
    M:net.minecraft.world.level.chunk.DataPaletteBlock copy() -> d
    M:net.minecraft.world.level.chunk.DataPaletteBlock recreate() -> e
    M:void count(net.minecraft.world.level.chunk.PalettedContainer$CountConsumer) -> a
net.minecraft.world.level.chunk.PalettedContainer$Configuration -> cxd$a -> net.minecraft.world.level.chunk.DataPaletteBlock$a
    F:net.minecraft.world.level.chunk.Palette$Factory factory -> a
    F:int bits -> b
    M:net.minecraft.world.level.chunk.PalettedContainer$Data createData(net.minecraft.core.Registry,net.minecraft.world.level.chunk.DataPaletteExpandable,int) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.chunk.Palette$Factory factory() -> a
    M:int bits() -> b
net.minecraft.world.level.chunk.PalettedContainer$CountConsumer -> cxd$b -> net.minecraft.world.level.chunk.DataPaletteBlock$b
net.minecraft.world.level.chunk.PalettedContainer$Data -> cxd$c -> net.minecraft.world.level.chunk.DataPaletteBlock$c
    F:net.minecraft.world.level.chunk.PalettedContainer$Configuration configuration -> a
    F:net.minecraft.util.DataBits storage -> b
    F:net.minecraft.world.level.chunk.DataPalette palette -> c
    M:void copyFrom(net.minecraft.world.level.chunk.DataPalette,net.minecraft.util.DataBits) -> a
    M:int getSerializedSize() -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.world.level.chunk.PalettedContainer$Data copy() -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.chunk.PalettedContainer$Configuration configuration() -> c
    M:net.minecraft.util.DataBits storage() -> d
    M:net.minecraft.world.level.chunk.DataPalette palette() -> e
net.minecraft.world.level.chunk.PalettedContainer$Strategy -> cxd$d -> net.minecraft.world.level.chunk.DataPaletteBlock$d
    F:net.minecraft.world.level.chunk.Palette$Factory SINGLE_VALUE_PALETTE_FACTORY -> a
    F:net.minecraft.world.level.chunk.Palette$Factory LINEAR_PALETTE_FACTORY -> b
    F:net.minecraft.world.level.chunk.Palette$Factory HASHMAP_PALETTE_FACTORY -> c
    F:net.minecraft.world.level.chunk.Palette$Factory GLOBAL_PALETTE_FACTORY -> f
    F:net.minecraft.world.level.chunk.PalettedContainer$Strategy SECTION_STATES -> d
    F:net.minecraft.world.level.chunk.PalettedContainer$Strategy SECTION_BIOMES -> e
    F:int sizeBits -> g
    M:int size() -> a
    M:int getIndex(int,int,int) -> a
    M:int calculateBitsForSerialization(net.minecraft.core.Registry,int) -> b
    M:net.minecraft.world.level.chunk.PalettedContainer$Configuration getConfiguration(net.minecraft.core.Registry,int) -> a
    M:net.minecraft.world.level.chunk.PalettedContainer$Configuration getConfiguration(net.minecraft.core.Registry,int) -> a
net.minecraft.world.level.chunk.PalettedContainerRO -> cxe -> net.minecraft.world.level.chunk.PalettedContainerRO
net.minecraft.world.level.chunk.PalettedContainerRO$PackedData -> cxe$a -> net.minecraft.world.level.chunk.PalettedContainerRO$a
    F:java.util.List paletteEntries -> a
    F:java.util.Optional storage -> b
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.List paletteEntries() -> a
    M:java.util.Optional storage() -> b
net.minecraft.world.level.chunk.PalettedContainerRO$Unpacker -> cxe$b -> net.minecraft.world.level.chunk.PalettedContainerRO$b
net.minecraft.world.level.chunk.ProtoChunk -> cxf -> net.minecraft.world.level.chunk.ProtoChunk
    F:net.minecraft.world.level.lighting.LightEngine lightEngine -> l
    F:net.minecraft.world.level.chunk.ChunkStatus status -> m
    F:java.util.List entities -> n
    F:java.util.List lights -> o
    F:java.util.Map carvingMasks -> p
    F:net.minecraft.world.level.levelgen.BelowZeroRetrogen belowZeroRetrogen -> q
    F:net.minecraft.world.ticks.ProtoChunkTickList blockTicks -> r
    F:net.minecraft.world.ticks.ProtoChunkTickList fluidTicks -> s
    M:net.minecraft.world.ticks.TickContainerAccess getBlockTicks() -> o
    M:net.minecraft.world.ticks.TickContainerAccess getFluidTicks() -> p
    M:net.minecraft.world.level.chunk.ChunkAccess$TicksToSave getTicksForSerialization() -> q
    M:java.util.stream.Stream getLights() -> n
    M:void addLight(short,int) -> b
    M:void addLight(net.minecraft.core.BlockPosition) -> j
    M:net.minecraft.world.level.block.state.IBlockData setBlockState(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void setBlockEntity(net.minecraft.world.level.block.entity.TileEntity) -> a
    M:void addEntity(net.minecraft.nbt.NBTTagCompound) -> b
    M:void addEntity(net.minecraft.world.entity.Entity) -> a
    M:void setStartForStructure(net.minecraft.world.level.levelgen.structure.Structure,net.minecraft.world.level.levelgen.structure.StructureStart) -> a
    M:net.minecraft.world.level.chunk.ChunkStatus getStatus() -> j
    M:void setStatus(net.minecraft.world.level.chunk.ChunkStatus) -> a
    M:short packOffsetCoordinates(net.minecraft.core.BlockPosition) -> k
    M:net.minecraft.core.BlockPosition unpackOffsetCoordinates(short,int,net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:void markPosForPostprocessing(net.minecraft.core.BlockPosition) -> e
    M:void addPackedPostProcess(short,int) -> a
    M:net.minecraft.nbt.NBTTagCompound getBlockEntityNbtForSaving(net.minecraft.core.BlockPosition) -> g
    M:void removeBlockEntity(net.minecraft.core.BlockPosition) -> d
    M:net.minecraft.world.level.chunk.CarvingMask getCarvingMask(net.minecraft.world.level.levelgen.WorldGenStage$Features) -> a
    M:net.minecraft.world.level.chunk.CarvingMask getOrCreateCarvingMask(net.minecraft.world.level.levelgen.WorldGenStage$Features) -> b
    M:void setCarvingMask(net.minecraft.world.level.levelgen.WorldGenStage$Features,net.minecraft.world.level.chunk.CarvingMask) -> a
    M:void setLightEngine(net.minecraft.world.level.lighting.LightEngine) -> a
    M:void setBelowZeroRetrogen(net.minecraft.world.level.levelgen.BelowZeroRetrogen) -> a
    M:net.minecraft.world.level.levelgen.BelowZeroRetrogen getBelowZeroRetrogen() -> x
    M:net.minecraft.world.ticks.LevelChunkTicks unpackTicks(net.minecraft.world.ticks.ProtoChunkTickList) -> a
    M:net.minecraft.world.level.LevelHeightAccessor getHeightAccessorForGeneration() -> z
net.minecraft.world.level.chunk.SingleValuePalette -> cxg -> net.minecraft.world.level.chunk.SingleValuePalette
    F:net.minecraft.core.Registry registry -> a
    F:java.lang.Object value -> b
    F:net.minecraft.world.level.chunk.DataPaletteExpandable resizeHandler -> c
    M:net.minecraft.world.level.chunk.DataPalette create(int,net.minecraft.core.Registry,net.minecraft.world.level.chunk.DataPaletteExpandable,java.util.List) -> a
    M:int idFor(java.lang.Object) -> a
    M:boolean maybeHas(java.util.function.Predicate) -> a
    M:java.lang.Object valueFor(int) -> a
    M:void read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer) -> b
    M:int getSerializedSize() -> a
    M:int getSize() -> b
    M:net.minecraft.world.level.chunk.DataPalette copy() -> c
net.minecraft.world.level.chunk.StructureAccess -> cxh -> net.minecraft.world.level.chunk.StructureAccess
net.minecraft.world.level.chunk.UpgradeData -> cxi -> net.minecraft.world.level.chunk.ChunkConverter
    F:org.slf4j.Logger LOGGER -> b
    F:net.minecraft.world.level.chunk.ChunkConverter EMPTY -> a
    F:java.lang.String TAG_INDICES -> c
    F:java.util.EnumSet sides -> e
    F:java.util.List neighborBlockTicks -> f
    F:java.util.List neighborFluidTicks -> g
    F:java.util.Map MAP -> i
    F:java.util.Set CHUNKY_FIXERS -> j
    M:void loadTicks(net.minecraft.nbt.NBTTagCompound,java.lang.String,java.util.function.Function,java.util.List) -> a
    M:void upgrade(net.minecraft.world.level.chunk.Chunk) -> a
    M:void upgradeSides(net.minecraft.world.level.chunk.Chunk,net.minecraft.core.EnumDirection8) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateState(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void upgradeInside(net.minecraft.world.level.chunk.Chunk) -> b
    M:boolean isEmpty() -> a
    M:net.minecraft.nbt.NBTTagCompound write() -> b
net.minecraft.world.level.chunk.UpgradeData$BlockFixer -> cxi$a -> net.minecraft.world.level.chunk.ChunkConverter$a
    M:void processChunk(net.minecraft.world.level.GeneratorAccess) -> a
net.minecraft.world.level.chunk.UpgradeData$BlockFixers -> cxi$b -> net.minecraft.world.level.chunk.ChunkConverter$Type
    F:net.minecraft.world.level.chunk.ChunkConverter$Type BLACKLIST -> a
    F:net.minecraft.world.level.chunk.ChunkConverter$Type DEFAULT -> b
    F:net.minecraft.world.level.chunk.ChunkConverter$Type CHEST -> c
    F:net.minecraft.world.level.chunk.ChunkConverter$Type LEAVES -> d
    F:net.minecraft.world.level.chunk.ChunkConverter$Type STEM_BLOCK -> e
    F:java.lang.ThreadLocal queue -> g
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void processChunk(net.minecraft.world.level.GeneratorAccess) -> a
    M:net.minecraft.world.level.block.state.IBlockData updateShape(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.chunk.storage.ChunkScanAccess -> cxk -> net.minecraft.world.level.chunk.storage.ChunkScanAccess
net.minecraft.world.level.chunk.storage.ChunkSerializer -> cxl -> net.minecraft.world.level.chunk.storage.ChunkRegionLoader
    F:com.mojang.serialization.Codec BLOCK_STATE_CODEC -> h
    F:org.slf4j.Logger LOGGER -> i
    F:java.lang.String TAG_UPGRADE_DATA -> j
    F:java.lang.String BLOCK_TICKS_TAG -> k
    F:java.lang.String FLUID_TICKS_TAG -> l
    F:java.lang.String X_POS_TAG -> a
    F:java.lang.String Z_POS_TAG -> b
    F:java.lang.String HEIGHTMAPS_TAG -> c
    F:java.lang.String IS_LIGHT_ON_TAG -> d
    F:java.lang.String SECTIONS_TAG -> e
    F:java.lang.String BLOCK_LIGHT_TAG -> f
    F:java.lang.String SKY_LIGHT_TAG -> g
    M:net.minecraft.world.level.chunk.ProtoChunk read(net.minecraft.server.level.WorldServer,net.minecraft.world.entity.ai.village.poi.VillagePlace,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.nbt.NBTTagCompound) -> a
    M:void logErrors(net.minecraft.world.level.ChunkCoordIntPair,int,java.lang.String) -> a
    M:com.mojang.serialization.Codec makeBiomeCodec(net.minecraft.core.IRegistry) -> a
    M:net.minecraft.nbt.NBTTagCompound write(net.minecraft.server.level.WorldServer,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:void saveTicks(net.minecraft.server.level.WorldServer,net.minecraft.nbt.NBTTagCompound,net.minecraft.world.level.chunk.ChunkAccess$TicksToSave) -> a
    M:net.minecraft.world.level.chunk.ChunkStatus$Type getChunkTypeFromTag(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.level.chunk.LevelChunk$PostLoadProcessor postLoadChunk(net.minecraft.server.level.WorldServer,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagList getListOfCompoundsOrNull(net.minecraft.nbt.NBTTagCompound,java.lang.String) -> a
    M:net.minecraft.nbt.NBTTagCompound packStructureData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.world.level.ChunkCoordIntPair,java.util.Map,java.util.Map) -> a
    M:java.util.Map unpackStructureStart(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound,long) -> a
    M:java.util.Map unpackStructureReferences(net.minecraft.core.IRegistryCustom,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagList packOffsets(it.unimi.dsi.fastutil.shorts.ShortList[]) -> a
net.minecraft.world.level.chunk.storage.ChunkStorage -> cxm -> net.minecraft.world.level.chunk.storage.IChunkLoader
    F:int LAST_MONOLYTH_STRUCTURE_DATA_VERSION -> d
    F:net.minecraft.world.level.chunk.storage.IOWorker worker -> a
    F:com.mojang.datafixers.DataFixer fixerUpper -> e
    F:net.minecraft.world.level.levelgen.structure.PersistentStructureLegacy legacyStructureHandler -> b
    M:boolean isOldChunkAround(net.minecraft.world.level.ChunkCoordIntPair,int) -> a
    M:net.minecraft.nbt.NBTTagCompound upgradeChunkTag(net.minecraft.resources.ResourceKey,java.util.function.Supplier,net.minecraft.nbt.NBTTagCompound,java.util.Optional) -> a
    M:net.minecraft.world.level.levelgen.structure.PersistentStructureLegacy getLegacyStructureHandler(net.minecraft.resources.ResourceKey,java.util.function.Supplier) -> a
    M:void injectDatafixingContext(net.minecraft.nbt.NBTTagCompound,net.minecraft.resources.ResourceKey,java.util.Optional) -> a
    M:int getVersion(net.minecraft.nbt.NBTTagCompound) -> a
    M:java.util.concurrent.CompletableFuture read(net.minecraft.world.level.ChunkCoordIntPair) -> f
    M:void write(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.nbt.NBTTagCompound) -> a
    M:void flushWorker() -> n
    M:void close() -> close
    M:net.minecraft.world.level.chunk.storage.ChunkScanAccess chunkScanner() -> o
net.minecraft.world.level.chunk.storage.EntityStorage -> cxn -> net.minecraft.world.level.chunk.storage.EntityStorage
    F:org.slf4j.Logger LOGGER -> b
    F:java.lang.String ENTITIES_TAG -> c
    F:java.lang.String POSITION_TAG -> d
    F:net.minecraft.server.level.WorldServer level -> e
    F:net.minecraft.world.level.chunk.storage.IOWorker worker -> f
    F:it.unimi.dsi.fastutil.longs.LongSet emptyChunks -> g
    F:net.minecraft.util.thread.ThreadedMailbox entityDeserializerQueue -> h
    F:com.mojang.datafixers.DataFixer fixerUpper -> a
    M:java.util.concurrent.CompletableFuture loadEntities(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:net.minecraft.world.level.ChunkCoordIntPair readChunkPos(net.minecraft.nbt.NBTTagCompound) -> b
    M:void writeChunkPos(net.minecraft.nbt.NBTTagCompound,net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:net.minecraft.world.level.entity.ChunkEntities emptyChunk(net.minecraft.world.level.ChunkCoordIntPair) -> b
    M:void storeEntities(net.minecraft.world.level.entity.ChunkEntities) -> a
    M:void flush(boolean) -> a
    M:net.minecraft.nbt.NBTTagCompound upgradeChunkTag(net.minecraft.nbt.NBTTagCompound) -> c
    M:int getVersion(net.minecraft.nbt.NBTTagCompound) -> a
    M:void close() -> close
net.minecraft.world.level.chunk.storage.IOWorker -> cxo -> net.minecraft.world.level.chunk.storage.IOWorker
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.concurrent.atomic.AtomicBoolean shutdownRequested -> b
    F:net.minecraft.util.thread.ThreadedMailbox mailbox -> c
    F:net.minecraft.world.level.chunk.storage.RegionFileCache storage -> d
    F:java.util.Map pendingWrites -> e
    F:it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap regionCacheForBlender -> f
    F:int REGION_CACHE_SIZE -> g
    M:boolean isOldChunkAround(net.minecraft.world.level.ChunkCoordIntPair,int) -> a
    M:java.util.concurrent.CompletableFuture getOrCreateOldDataForRegion(int,int) -> a
    M:java.util.concurrent.CompletableFuture createOldDataForRegion(int,int) -> b
    M:boolean isOldChunk(net.minecraft.nbt.NBTTagCompound) -> a
    M:java.util.concurrent.CompletableFuture store(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.nbt.NBTTagCompound) -> a
    M:java.util.concurrent.CompletableFuture loadAsync(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:java.util.concurrent.CompletableFuture synchronize(boolean) -> a
    M:java.util.concurrent.CompletableFuture scanChunk(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.nbt.StreamTagVisitor) -> a
    M:java.util.concurrent.CompletableFuture submitTask(java.util.function.Supplier) -> a
    M:void storePendingChunk() -> a
    M:void tellStorePending() -> b
    M:void runStore(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.chunk.storage.IOWorker$PendingStore) -> a
    M:void close() -> close
net.minecraft.world.level.chunk.storage.IOWorker$PendingStore -> cxo$a -> net.minecraft.world.level.chunk.storage.IOWorker$a
    F:net.minecraft.nbt.NBTTagCompound data -> a
    F:java.util.concurrent.CompletableFuture result -> b
net.minecraft.world.level.chunk.storage.IOWorker$Priority -> cxo$b -> net.minecraft.world.level.chunk.storage.IOWorker$Priority
    F:net.minecraft.world.level.chunk.storage.IOWorker$Priority FOREGROUND -> a
    F:net.minecraft.world.level.chunk.storage.IOWorker$Priority BACKGROUND -> b
    F:net.minecraft.world.level.chunk.storage.IOWorker$Priority SHUTDOWN -> c
net.minecraft.world.level.chunk.storage.RegionBitmap -> cxp -> net.minecraft.world.level.chunk.storage.RegionFileBitSet
    F:java.util.BitSet used -> a
    M:void force(int,int) -> a
    M:void free(int,int) -> b
    M:int allocate(int) -> a
    M:it.unimi.dsi.fastutil.ints.IntSet getUsed() -> a
net.minecraft.world.level.chunk.storage.RegionFile -> cxq -> net.minecraft.world.level.chunk.storage.RegionFile
    F:org.slf4j.Logger LOGGER -> c
    F:int SECTOR_BYTES -> d
    F:int SECTOR_INTS -> a
    F:int CHUNK_HEADER_SIZE -> e
    F:int HEADER_OFFSET -> f
    F:java.nio.ByteBuffer PADDING_BUFFER -> g
    F:java.lang.String EXTERNAL_FILE_EXTENSION -> h
    F:int EXTERNAL_STREAM_FLAG -> i
    F:int EXTERNAL_CHUNK_THRESHOLD -> j
    F:int CHUNK_NOT_PRESENT -> k
    F:java.nio.channels.FileChannel file -> l
    F:java.nio.file.Path externalFileDir -> m
    F:net.minecraft.world.level.chunk.storage.RegionFileCompression version -> n
    F:java.nio.ByteBuffer header -> o
    F:java.nio.IntBuffer offsets -> p
    F:java.nio.IntBuffer timestamps -> q
    F:net.minecraft.world.level.chunk.storage.RegionFileBitSet usedSectors -> b
    M:java.nio.file.Path getExternalChunkPath(net.minecraft.world.level.ChunkCoordIntPair) -> f
    M:java.io.DataInputStream getChunkDataInputStream(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:int getTimestamp() -> b
    M:boolean isExternalStreamChunk(byte) -> a
    M:byte getExternalChunkVersion(byte) -> b
    M:java.io.DataInputStream createChunkInputStream(net.minecraft.world.level.ChunkCoordIntPair,byte,java.io.InputStream) -> a
    M:java.io.DataInputStream createExternalChunkInputStream(net.minecraft.world.level.ChunkCoordIntPair,byte) -> a
    M:java.io.ByteArrayInputStream createStream(java.nio.ByteBuffer,int) -> a
    M:int packSectorOffset(int,int) -> a
    M:int getNumSectors(int) -> a
    M:int getSectorNumber(int) -> b
    M:int sizeToSectors(int) -> c
    M:boolean doesChunkExist(net.minecraft.world.level.ChunkCoordIntPair) -> b
    M:java.io.DataOutputStream getChunkDataOutputStream(net.minecraft.world.level.ChunkCoordIntPair) -> c
    M:void flush() -> a
    M:void clear(net.minecraft.world.level.ChunkCoordIntPair) -> d
    M:void write(net.minecraft.world.level.ChunkCoordIntPair,java.nio.ByteBuffer) -> a
    M:java.nio.ByteBuffer createExternalStub() -> c
    M:net.minecraft.world.level.chunk.storage.RegionFile$CommitOp writeToExternalFile(java.nio.file.Path,java.nio.ByteBuffer) -> a
    M:void writeHeader() -> d
    M:int getOffset(net.minecraft.world.level.ChunkCoordIntPair) -> g
    M:boolean hasChunk(net.minecraft.world.level.ChunkCoordIntPair) -> e
    M:int getOffsetIndex(net.minecraft.world.level.ChunkCoordIntPair) -> h
    M:void close() -> close
    M:void padToFullSector() -> e
net.minecraft.world.level.chunk.storage.RegionFile$ChunkBuffer -> cxq$a -> net.minecraft.world.level.chunk.storage.RegionFile$ChunkBuffer
    F:net.minecraft.world.level.ChunkCoordIntPair pos -> b
    M:void close() -> close
net.minecraft.world.level.chunk.storage.RegionFile$CommitOp -> cxq$b -> net.minecraft.world.level.chunk.storage.RegionFile$b
net.minecraft.world.level.chunk.storage.RegionFileStorage -> cxr -> net.minecraft.world.level.chunk.storage.RegionFileCache
    F:java.lang.String ANVIL_EXTENSION -> a
    F:int MAX_CACHE_SIZE -> b
    F:it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap regionCache -> c
    F:java.nio.file.Path folder -> d
    F:boolean sync -> e
    M:net.minecraft.world.level.chunk.storage.RegionFile getRegionFile(net.minecraft.world.level.ChunkCoordIntPair) -> b
    M:net.minecraft.nbt.NBTTagCompound read(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:void scanChunk(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.nbt.StreamTagVisitor) -> a
    M:void write(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.nbt.NBTTagCompound) -> a
    M:void close() -> close
    M:void flush() -> a
net.minecraft.world.level.chunk.storage.RegionFileVersion -> cxs -> net.minecraft.world.level.chunk.storage.RegionFileCompression
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap VERSIONS -> d
    F:net.minecraft.world.level.chunk.storage.RegionFileCompression VERSION_GZIP -> a
    F:net.minecraft.world.level.chunk.storage.RegionFileCompression VERSION_DEFLATE -> b
    F:net.minecraft.world.level.chunk.storage.RegionFileCompression VERSION_NONE -> c
    F:int id -> e
    F:net.minecraft.world.level.chunk.storage.RegionFileVersion$StreamWrapper inputWrapper -> f
    F:net.minecraft.world.level.chunk.storage.RegionFileVersion$StreamWrapper outputWrapper -> g
    M:net.minecraft.world.level.chunk.storage.RegionFileCompression register(net.minecraft.world.level.chunk.storage.RegionFileCompression) -> a
    M:net.minecraft.world.level.chunk.storage.RegionFileCompression fromId(int) -> a
    M:boolean isValidVersion(int) -> b
    M:int getId() -> a
    M:java.io.OutputStream wrap(java.io.OutputStream) -> a
    M:java.io.InputStream wrap(java.io.InputStream) -> a
net.minecraft.world.level.chunk.storage.RegionFileVersion$StreamWrapper -> cxs$a -> net.minecraft.world.level.chunk.storage.RegionFileCompression$a
net.minecraft.world.level.chunk.storage.SectionStorage -> cxt -> net.minecraft.world.level.chunk.storage.RegionFileSection
    F:org.slf4j.Logger LOGGER -> a
    F:java.lang.String SECTIONS_TAG -> b
    F:net.minecraft.world.level.chunk.storage.IOWorker worker -> d
    F:it.unimi.dsi.fastutil.longs.Long2ObjectMap storage -> e
    F:it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet dirty -> f
    F:java.util.function.Function codec -> g
    F:java.util.function.Function factory -> h
    F:com.mojang.datafixers.DataFixer fixerUpper -> i
    F:net.minecraft.util.datafix.DataFixTypes type -> j
    F:net.minecraft.core.IRegistryCustom registryAccess -> k
    F:net.minecraft.world.level.LevelHeightAccessor levelHeightAccessor -> c
    M:void tick(java.util.function.BooleanSupplier) -> a
    M:boolean hasWork() -> a
    M:java.util.Optional get(long) -> c
    M:java.util.Optional getOrLoad(long) -> d
    M:boolean outsideStoredRange(long) -> e
    M:java.lang.Object getOrCreate(long) -> f
    M:void readColumn(net.minecraft.world.level.ChunkCoordIntPair) -> b
    M:java.util.concurrent.CompletableFuture tryRead(net.minecraft.world.level.ChunkCoordIntPair) -> c
    M:void readColumn(net.minecraft.world.level.ChunkCoordIntPair,com.mojang.serialization.DynamicOps,java.lang.Object) -> a
    M:void writeColumn(net.minecraft.world.level.ChunkCoordIntPair) -> d
    M:com.mojang.serialization.Dynamic writeColumn(net.minecraft.world.level.ChunkCoordIntPair,com.mojang.serialization.DynamicOps) -> a
    M:long getKey(net.minecraft.world.level.ChunkCoordIntPair,int) -> a
    M:void onSectionLoad(long) -> b
    M:void setDirty(long) -> a
    M:int getVersion(com.mojang.serialization.Dynamic) -> a
    M:void flush(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:void close() -> close
net.minecraft.world.level.dimension.BuiltinDimensionTypes -> cxv -> net.minecraft.world.level.dimension.BuiltinDimensionTypes
    F:net.minecraft.resources.ResourceKey OVERWORLD -> a
    F:net.minecraft.resources.ResourceKey NETHER -> b
    F:net.minecraft.resources.ResourceKey END -> c
    F:net.minecraft.resources.ResourceKey OVERWORLD_CAVES -> d
    F:net.minecraft.resources.MinecraftKey OVERWORLD_EFFECTS -> e
    F:net.minecraft.resources.MinecraftKey NETHER_EFFECTS -> f
    F:net.minecraft.resources.MinecraftKey END_EFFECTS -> g
    M:net.minecraft.resources.ResourceKey register(java.lang.String) -> a
net.minecraft.world.level.dimension.DimensionDefaults -> cxw -> net.minecraft.world.level.dimension.DimensionDefaults
    F:int OVERWORLD_MIN_Y -> a
    F:int OVERWORLD_LEVEL_HEIGHT -> b
    F:int OVERWORLD_GENERATION_HEIGHT -> c
    F:int OVERWORLD_LOGICAL_HEIGHT -> d
    F:int NETHER_MIN_Y -> e
    F:int NETHER_LEVEL_HEIGHT -> f
    F:int NETHER_GENERATION_HEIGHT -> g
    F:int NETHER_LOGICAL_HEIGHT -> h
    F:int END_MIN_Y -> i
    F:int END_LEVEL_HEIGHT -> j
    F:int END_GENERATION_HEIGHT -> k
    F:int END_LOGICAL_HEIGHT -> l
net.minecraft.world.level.dimension.DimensionType -> cxx -> net.minecraft.world.level.dimension.DimensionManager
    F:java.util.OptionalLong fixedTime -> k
    F:boolean hasSkyLight -> l
    F:boolean hasCeiling -> m
    F:boolean ultraWarm -> n
    F:boolean natural -> o
    F:double coordinateScale -> p
    F:boolean bedWorks -> q
    F:boolean respawnAnchorWorks -> r
    F:int minY -> s
    F:int height -> t
    F:int logicalHeight -> u
    F:net.minecraft.tags.TagKey infiniburn -> v
    F:net.minecraft.resources.MinecraftKey effectsLocation -> w
    F:float ambientLight -> x
    F:net.minecraft.world.level.dimension.DimensionType$MonsterSettings monsterSettings -> y
    F:int BITS_FOR_Y -> a
    F:int MIN_HEIGHT -> b
    F:int Y_SIZE -> c
    F:int MAX_Y -> d
    F:int MIN_Y -> e
    F:int WAY_ABOVE_MAX_Y -> f
    F:int WAY_BELOW_MIN_Y -> g
    F:com.mojang.serialization.Codec DIRECT_CODEC -> h
    F:int MOON_PHASES -> z
    F:com.mojang.serialization.Codec CODEC -> j
    M:com.mojang.serialization.DataResult parseLegacy(com.mojang.serialization.Dynamic) -> a
    M:double getTeleportationScale(net.minecraft.world.level.dimension.DimensionManager,net.minecraft.world.level.dimension.DimensionManager) -> a
    M:java.nio.file.Path getStorageFolder(net.minecraft.resources.ResourceKey,java.nio.file.Path) -> a
    M:boolean hasFixedTime() -> a
    M:float timeOfDay(long) -> a
    M:int moonPhase(long) -> b
    M:boolean piglinSafe() -> b
    M:boolean hasRaids() -> c
    M:net.minecraft.util.valueproviders.IntProvider monsterSpawnLightTest() -> d
    M:int monsterSpawnBlockLightLimit() -> e
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.OptionalLong fixedTime() -> f
    M:boolean hasSkyLight() -> g
    M:boolean hasCeiling() -> h
    M:boolean ultraWarm() -> i
    M:boolean natural() -> j
    M:double coordinateScale() -> k
    M:boolean bedWorks() -> l
    M:boolean respawnAnchorWorks() -> m
    M:int minY() -> n
    M:int height() -> o
    M:int logicalHeight() -> p
    M:net.minecraft.tags.TagKey infiniburn() -> q
    M:net.minecraft.resources.MinecraftKey effectsLocation() -> r
    M:float ambientLight() -> s
    M:net.minecraft.world.level.dimension.DimensionType$MonsterSettings monsterSettings() -> t
net.minecraft.world.level.dimension.DimensionType$MonsterSettings -> cxx$a -> net.minecraft.world.level.dimension.DimensionManager$a
    F:boolean piglinSafe -> b
    F:boolean hasRaids -> c
    F:net.minecraft.util.valueproviders.IntProvider monsterSpawnLightTest -> d
    F:int monsterSpawnBlockLightLimit -> e
    F:com.mojang.serialization.MapCodec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:boolean piglinSafe() -> a
    M:boolean hasRaids() -> b
    M:net.minecraft.util.valueproviders.IntProvider monsterSpawnLightTest() -> c
    M:int monsterSpawnBlockLightLimit() -> d
net.minecraft.world.level.dimension.LevelStem -> cxy -> net.minecraft.world.level.dimension.WorldDimension
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.resources.ResourceKey OVERWORLD -> b
    F:net.minecraft.resources.ResourceKey NETHER -> c
    F:net.minecraft.resources.ResourceKey END -> d
    F:java.util.Set BUILTIN_ORDER -> e
    F:net.minecraft.core.Holder type -> f
    F:net.minecraft.world.level.chunk.ChunkGenerator generator -> g
    M:net.minecraft.core.Holder typeHolder() -> a
    M:net.minecraft.world.level.chunk.ChunkGenerator generator() -> b
    M:java.util.stream.Stream keysInOrder(java.util.stream.Stream) -> a
    M:net.minecraft.core.IRegistry sortMap(net.minecraft.core.IRegistry) -> a
    M:boolean stable(net.minecraft.core.IRegistry) -> b
net.minecraft.world.level.dimension.end.DragonRespawnAnimation -> cxz -> net.minecraft.world.level.dimension.end.EnumDragonRespawn
    F:net.minecraft.world.level.dimension.end.EnumDragonRespawn START -> a
    F:net.minecraft.world.level.dimension.end.EnumDragonRespawn PREPARING_TO_SUMMON_PILLARS -> b
    F:net.minecraft.world.level.dimension.end.EnumDragonRespawn SUMMONING_PILLARS -> c
    F:net.minecraft.world.level.dimension.end.EnumDragonRespawn SUMMONING_DRAGON -> d
    F:net.minecraft.world.level.dimension.end.EnumDragonRespawn END -> e
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.level.dimension.end.EnderDragonBattle,java.util.List,int,net.minecraft.core.BlockPosition) -> a
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.level.dimension.end.EnderDragonBattle,java.util.List,int,net.minecraft.core.BlockPosition) -> a
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.level.dimension.end.EnderDragonBattle,java.util.List,int,net.minecraft.core.BlockPosition) -> a
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.level.dimension.end.EnderDragonBattle,java.util.List,int,net.minecraft.core.BlockPosition) -> a
    M:void tick(net.minecraft.server.level.WorldServer,net.minecraft.world.level.dimension.end.EnderDragonBattle,java.util.List,int,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.dimension.end.EndDragonFight -> cya -> net.minecraft.world.level.dimension.end.EnderDragonBattle
    F:org.slf4j.Logger LOGGER -> c
    F:int MAX_TICKS_BEFORE_DRAGON_RESPAWN -> d
    F:int TIME_BETWEEN_CRYSTAL_SCANS -> e
    F:int TIME_BETWEEN_PLAYER_SCANS -> f
    F:int ARENA_SIZE_CHUNKS -> g
    F:int ARENA_TICKET_LEVEL -> a
    F:int GATEWAY_COUNT -> h
    F:int GATEWAY_DISTANCE -> i
    F:int DRAGON_SPAWN_Y -> b
    F:java.util.function.Predicate VALID_PLAYER -> j
    F:net.minecraft.server.level.BossBattleServer dragonEvent -> k
    F:net.minecraft.server.level.WorldServer level -> l
    F:it.unimi.dsi.fastutil.objects.ObjectArrayList gateways -> m
    F:net.minecraft.world.level.block.state.pattern.ShapeDetector exitPortalPattern -> n
    F:int ticksSinceDragonSeen -> o
    F:int crystalsAlive -> p
    F:int ticksSinceCrystalsScanned -> q
    F:int ticksSinceLastPlayerScan -> r
    F:boolean dragonKilled -> s
    F:boolean previouslyKilled -> t
    F:java.util.UUID dragonUUID -> u
    F:boolean needsStateScanning -> v
    F:net.minecraft.core.BlockPosition portalLocation -> w
    F:net.minecraft.world.level.dimension.end.EnumDragonRespawn respawnStage -> x
    F:int respawnTime -> y
    F:java.util.List respawnCrystals -> z
    M:net.minecraft.nbt.NBTTagCompound saveData() -> a
    M:void tick() -> b
    M:void scanState() -> g
    M:void findOrCreateDragon() -> h
    M:void setRespawnStage(net.minecraft.world.level.dimension.end.EnumDragonRespawn) -> a
    M:boolean hasActiveExitPortal() -> i
    M:net.minecraft.world.level.block.state.pattern.ShapeDetector$ShapeDetectorCollection findExitPortal() -> j
    M:boolean isArenaLoaded() -> k
    M:void updatePlayers() -> l
    M:void updateCrystalCount() -> m
    M:void setDragonKilled(net.minecraft.world.entity.boss.enderdragon.EntityEnderDragon) -> a
    M:void spawnNewGateway() -> n
    M:void spawnNewGateway(net.minecraft.core.BlockPosition) -> a
    M:void spawnExitPortal(boolean) -> a
    M:net.minecraft.world.entity.boss.enderdragon.EntityEnderDragon createNewDragon() -> o
    M:void updateDragon(net.minecraft.world.entity.boss.enderdragon.EntityEnderDragon) -> b
    M:int getCrystalsAlive() -> c
    M:void onCrystalDestroyed(net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal,net.minecraft.world.damagesource.DamageSource) -> a
    M:boolean hasPreviouslyKilledDragon() -> d
    M:void tryRespawn() -> e
    M:void respawnDragon(java.util.List) -> a
    M:void resetSpikeCrystals() -> f
net.minecraft.world.level.entity.ChunkEntities -> cyd -> net.minecraft.world.level.entity.ChunkEntities
    F:net.minecraft.world.level.ChunkCoordIntPair pos -> a
    F:java.util.List entities -> b
    M:net.minecraft.world.level.ChunkCoordIntPair getPos() -> a
    M:java.util.stream.Stream getEntities() -> b
    M:boolean isEmpty() -> c
net.minecraft.world.level.entity.ChunkStatusUpdateListener -> cye -> net.minecraft.world.level.entity.ChunkStatusUpdateListener
net.minecraft.world.level.entity.EntityAccess -> cyf -> net.minecraft.world.level.entity.EntityAccess
net.minecraft.world.level.entity.EntityInLevelCallback -> cyg -> net.minecraft.world.level.entity.EntityInLevelCallback
    F:net.minecraft.world.level.entity.EntityInLevelCallback NULL -> a
    M:void onMove() -> a
    M:void onRemove(net.minecraft.world.entity.Entity$RemovalReason) -> a
net.minecraft.world.level.entity.EntityLookup -> cyh -> net.minecraft.world.level.entity.EntityLookup
    F:org.slf4j.Logger LOGGER -> a
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap byId -> b
    F:java.util.Map byUuid -> c
    M:void getEntities(net.minecraft.world.level.entity.EntityTypeTest,java.util.function.Consumer) -> a
    M:java.lang.Iterable getAllEntities() -> a
    M:void add(net.minecraft.world.level.entity.EntityAccess) -> a
    M:void remove(net.minecraft.world.level.entity.EntityAccess) -> b
    M:net.minecraft.world.level.entity.EntityAccess getEntity(int) -> a
    M:net.minecraft.world.level.entity.EntityAccess getEntity(java.util.UUID) -> a
    M:int count() -> b
net.minecraft.world.level.entity.EntityPersistentStorage -> cyi -> net.minecraft.world.level.entity.EntityPersistentStorage
    M:void close() -> close
net.minecraft.world.level.entity.EntitySection -> cyj -> net.minecraft.world.level.entity.EntitySection
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.util.EntitySlice storage -> b
    F:net.minecraft.world.level.entity.Visibility chunkStatus -> c
    M:void add(net.minecraft.world.level.entity.EntityAccess) -> a
    M:boolean remove(net.minecraft.world.level.entity.EntityAccess) -> b
    M:void getEntities(net.minecraft.world.phys.AxisAlignedBB,java.util.function.Consumer) -> a
    M:void getEntities(net.minecraft.world.level.entity.EntityTypeTest,net.minecraft.world.phys.AxisAlignedBB,java.util.function.Consumer) -> a
    M:boolean isEmpty() -> a
    M:java.util.stream.Stream getEntities() -> b
    M:net.minecraft.world.level.entity.Visibility getStatus() -> c
    M:net.minecraft.world.level.entity.Visibility updateChunkStatus(net.minecraft.world.level.entity.Visibility) -> a
    M:int size() -> d
net.minecraft.world.level.entity.EntitySectionStorage -> cyk -> net.minecraft.world.level.entity.EntitySectionStorage
    F:java.lang.Class entityClass -> a
    F:it.unimi.dsi.fastutil.longs.Long2ObjectFunction intialSectionVisibility -> b
    F:it.unimi.dsi.fastutil.longs.Long2ObjectMap sections -> c
    F:it.unimi.dsi.fastutil.longs.LongSortedSet sectionIds -> d
    M:void forEachAccessibleNonEmptySection(net.minecraft.world.phys.AxisAlignedBB,java.util.function.Consumer) -> a
    M:java.util.stream.LongStream getExistingSectionPositionsInChunk(long) -> a
    M:it.unimi.dsi.fastutil.longs.LongSortedSet getChunkSections(int,int) -> a
    M:java.util.stream.Stream getExistingSectionsInChunk(long) -> b
    M:long getChunkKeyFromSectionKey(long) -> f
    M:net.minecraft.world.level.entity.EntitySection getOrCreateSection(long) -> c
    M:net.minecraft.world.level.entity.EntitySection getSection(long) -> d
    M:net.minecraft.world.level.entity.EntitySection createSection(long) -> g
    M:it.unimi.dsi.fastutil.longs.LongSet getAllChunksWithExistingSections() -> a
    M:void getEntities(net.minecraft.world.phys.AxisAlignedBB,java.util.function.Consumer) -> b
    M:void getEntities(net.minecraft.world.level.entity.EntityTypeTest,net.minecraft.world.phys.AxisAlignedBB,java.util.function.Consumer) -> a
    M:void remove(long) -> e
    M:int count() -> b
net.minecraft.world.level.entity.EntityTickList -> cyl -> net.minecraft.world.level.entity.EntityTickList
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap active -> a
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap passive -> b
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap iterated -> c
    M:void ensureActiveIsNotIterated() -> a
    M:void add(net.minecraft.world.entity.Entity) -> a
    M:void remove(net.minecraft.world.entity.Entity) -> b
    M:boolean contains(net.minecraft.world.entity.Entity) -> c
    M:void forEach(java.util.function.Consumer) -> a
net.minecraft.world.level.entity.EntityTypeTest -> cym -> net.minecraft.world.level.entity.EntityTypeTest
    M:net.minecraft.world.level.entity.EntityTypeTest forClass(java.lang.Class) -> a
    M:java.lang.Object tryCast(java.lang.Object) -> a
    M:java.lang.Class getBaseClass() -> a
net.minecraft.world.level.entity.LevelCallback -> cyn -> net.minecraft.world.level.entity.LevelCallback
net.minecraft.world.level.entity.LevelEntityGetter -> cyo -> net.minecraft.world.level.entity.LevelEntityGetter
net.minecraft.world.level.entity.LevelEntityGetterAdapter -> cyp -> net.minecraft.world.level.entity.LevelEntityGetterAdapter
    F:net.minecraft.world.level.entity.EntityLookup visibleEntities -> a
    F:net.minecraft.world.level.entity.EntitySectionStorage sectionStorage -> b
    M:net.minecraft.world.level.entity.EntityAccess get(int) -> a
    M:net.minecraft.world.level.entity.EntityAccess get(java.util.UUID) -> a
    M:java.lang.Iterable getAll() -> a
    M:void get(net.minecraft.world.level.entity.EntityTypeTest,java.util.function.Consumer) -> a
    M:void get(net.minecraft.world.phys.AxisAlignedBB,java.util.function.Consumer) -> a
    M:void get(net.minecraft.world.level.entity.EntityTypeTest,net.minecraft.world.phys.AxisAlignedBB,java.util.function.Consumer) -> a
net.minecraft.world.level.entity.PersistentEntitySectionManager -> cyq -> net.minecraft.world.level.entity.PersistentEntitySectionManager
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.Set knownUuids -> b
    F:net.minecraft.world.level.entity.LevelCallback callbacks -> c
    F:net.minecraft.world.level.entity.EntityPersistentStorage permanentStorage -> d
    F:net.minecraft.world.level.entity.EntityLookup visibleEntityStorage -> e
    F:net.minecraft.world.level.entity.EntitySectionStorage sectionStorage -> f
    F:net.minecraft.world.level.entity.LevelEntityGetter entityGetter -> g
    F:it.unimi.dsi.fastutil.longs.Long2ObjectMap chunkVisibility -> h
    F:it.unimi.dsi.fastutil.longs.Long2ObjectMap chunkLoadStatuses -> i
    F:it.unimi.dsi.fastutil.longs.LongSet chunksToUnload -> j
    F:java.util.Queue loadingInbox -> k
    M:void removeSectionIfEmpty(long,net.minecraft.world.level.entity.EntitySection) -> a
    M:boolean addEntityUuid(net.minecraft.world.level.entity.EntityAccess) -> b
    M:boolean addNewEntity(net.minecraft.world.level.entity.EntityAccess) -> a
    M:boolean addEntity(net.minecraft.world.level.entity.EntityAccess,boolean) -> a
    M:net.minecraft.world.level.entity.Visibility getEffectiveStatus(net.minecraft.world.level.entity.EntityAccess,net.minecraft.world.level.entity.Visibility) -> a
    M:void addLegacyChunkEntities(java.util.stream.Stream) -> a
    M:void addWorldGenChunkEntities(java.util.stream.Stream) -> b
    M:void startTicking(net.minecraft.world.level.entity.EntityAccess) -> c
    M:void stopTicking(net.minecraft.world.level.entity.EntityAccess) -> d
    M:void startTracking(net.minecraft.world.level.entity.EntityAccess) -> e
    M:void stopTracking(net.minecraft.world.level.entity.EntityAccess) -> f
    M:void updateChunkStatus(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.server.level.PlayerChunk$State) -> a
    M:void updateChunkStatus(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.entity.Visibility) -> a
    M:void ensureChunkQueuedForLoad(long) -> b
    M:boolean storeChunkSections(long,java.util.function.Consumer) -> a
    M:void requestChunkLoad(long) -> c
    M:boolean processChunkUnload(long) -> d
    M:void unloadEntity(net.minecraft.world.level.entity.EntityAccess) -> g
    M:void processUnloads() -> f
    M:void processPendingLoads() -> g
    M:void tick() -> a
    M:it.unimi.dsi.fastutil.longs.LongSet getAllChunksToSave() -> h
    M:void autoSave() -> b
    M:void saveAll() -> c
    M:void close() -> close
    M:boolean isLoaded(java.util.UUID) -> a
    M:net.minecraft.world.level.entity.LevelEntityGetter getEntityGetter() -> d
    M:boolean canPositionTick(net.minecraft.core.BlockPosition) -> a
    M:boolean canPositionTick(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:boolean areEntitiesLoaded(long) -> a
    M:void dumpSections(java.io.Writer) -> a
    M:java.lang.String gatherStats() -> e
net.minecraft.world.level.entity.PersistentEntitySectionManager$Callback -> cyq$a -> net.minecraft.world.level.entity.PersistentEntitySectionManager$a
    F:net.minecraft.world.level.entity.EntityAccess entity -> c
    F:long currentSectionKey -> d
    F:net.minecraft.world.level.entity.EntitySection currentSection -> e
    M:void onMove() -> a
    M:void updateStatus(net.minecraft.world.level.entity.Visibility,net.minecraft.world.level.entity.Visibility) -> a
    M:void onRemove(net.minecraft.world.entity.Entity$RemovalReason) -> a
net.minecraft.world.level.entity.PersistentEntitySectionManager$ChunkLoadStatus -> cyq$b -> net.minecraft.world.level.entity.PersistentEntitySectionManager$b
    F:net.minecraft.world.level.entity.PersistentEntitySectionManager$ChunkLoadStatus FRESH -> a
    F:net.minecraft.world.level.entity.PersistentEntitySectionManager$ChunkLoadStatus PENDING -> b
    F:net.minecraft.world.level.entity.PersistentEntitySectionManager$ChunkLoadStatus LOADED -> c
net.minecraft.world.level.entity.TransientEntitySectionManager -> cyr -> net.minecraft.world.level.entity.TransientEntitySectionManager
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.world.level.entity.LevelCallback callbacks -> b
    F:net.minecraft.world.level.entity.EntityLookup entityStorage -> c
    F:net.minecraft.world.level.entity.EntitySectionStorage sectionStorage -> d
    F:it.unimi.dsi.fastutil.longs.LongSet tickingChunks -> e
    F:net.minecraft.world.level.entity.LevelEntityGetter entityGetter -> f
    M:void startTicking(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:void stopTicking(net.minecraft.world.level.ChunkCoordIntPair) -> b
    M:net.minecraft.world.level.entity.LevelEntityGetter getEntityGetter() -> a
    M:void addEntity(net.minecraft.world.level.entity.EntityAccess) -> a
    M:int count() -> b
    M:void removeSectionIfEmpty(long,net.minecraft.world.level.entity.EntitySection) -> a
    M:java.lang.String gatherStats() -> c
net.minecraft.world.level.entity.TransientEntitySectionManager$Callback -> cyr$a -> net.minecraft.world.level.entity.TransientEntitySectionManager$a
    F:net.minecraft.world.level.entity.EntityAccess entity -> c
    F:long currentSectionKey -> d
    F:net.minecraft.world.level.entity.EntitySection currentSection -> e
    M:void onMove() -> a
    M:void onRemove(net.minecraft.world.entity.Entity$RemovalReason) -> a
net.minecraft.world.level.entity.Visibility -> cys -> net.minecraft.world.level.entity.Visibility
    F:net.minecraft.world.level.entity.Visibility HIDDEN -> a
    F:net.minecraft.world.level.entity.Visibility TRACKED -> b
    F:net.minecraft.world.level.entity.Visibility TICKING -> c
    F:boolean accessible -> d
    F:boolean ticking -> e
    M:boolean isTicking() -> a
    M:boolean isAccessible() -> b
    M:net.minecraft.world.level.entity.Visibility fromFullChunkStatus(net.minecraft.server.level.PlayerChunk$State) -> a
net.minecraft.world.level.gameevent.BlockPositionSource -> cyu -> net.minecraft.world.level.gameevent.BlockPositionSource
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.core.BlockPosition pos -> c
    M:java.util.Optional getPosition(net.minecraft.world.level.World) -> a
    M:net.minecraft.world.level.gameevent.PositionSourceType getType() -> a
net.minecraft.world.level.gameevent.BlockPositionSource$Type -> cyu$a -> net.minecraft.world.level.gameevent.BlockPositionSource$a
    M:net.minecraft.world.level.gameevent.BlockPositionSource read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,net.minecraft.world.level.gameevent.BlockPositionSource) -> a
    M:com.mojang.serialization.Codec codec() -> a
    M:void write(net.minecraft.network.PacketDataSerializer,net.minecraft.world.level.gameevent.PositionSource) -> a
    M:net.minecraft.world.level.gameevent.PositionSource read(net.minecraft.network.PacketDataSerializer) -> b
net.minecraft.world.level.gameevent.DynamicGameEventListener -> cyv -> net.minecraft.world.level.gameevent.DynamicGameEventListener
    F:net.minecraft.world.level.gameevent.GameEventListener listener -> a
    F:net.minecraft.core.SectionPosition lastSection -> b
    M:void add(net.minecraft.server.level.WorldServer) -> a
    M:void updateListener(net.minecraft.world.level.gameevent.GameEventListener,net.minecraft.world.level.World) -> a
    M:net.minecraft.world.level.gameevent.GameEventListener getListener() -> a
    M:void remove(net.minecraft.server.level.WorldServer) -> b
    M:void move(net.minecraft.server.level.WorldServer) -> c
    M:void ifChunkExists(net.minecraft.world.level.IWorldReader,net.minecraft.core.SectionPosition,java.util.function.Consumer) -> a
net.minecraft.world.level.gameevent.EntityPositionSource -> cyw -> net.minecraft.world.level.gameevent.EntityPositionSource
    F:com.mojang.serialization.Codec CODEC -> a
    F:com.mojang.datafixers.util.Either entityOrUuidOrId -> c
    F:float yOffset -> d
    M:java.util.Optional getPosition(net.minecraft.world.level.World) -> a
    M:void resolveEntity(net.minecraft.world.level.World) -> b
    M:java.util.UUID getUuid() -> b
    M:int getId() -> c
    M:net.minecraft.world.level.gameevent.PositionSourceType getType() -> a
net.minecraft.world.level.gameevent.EntityPositionSource$Type -> cyw$a -> net.minecraft.world.level.gameevent.EntityPositionSource$a
    M:net.minecraft.world.level.gameevent.EntityPositionSource read(net.minecraft.network.PacketDataSerializer) -> a
    M:void write(net.minecraft.network.PacketDataSerializer,net.minecraft.world.level.gameevent.EntityPositionSource) -> a
    M:com.mojang.serialization.Codec codec() -> a
    M:void write(net.minecraft.network.PacketDataSerializer,net.minecraft.world.level.gameevent.PositionSource) -> a
    M:net.minecraft.world.level.gameevent.PositionSource read(net.minecraft.network.PacketDataSerializer) -> b
net.minecraft.world.level.gameevent.EuclideanGameEventDispatcher -> cyx -> net.minecraft.world.level.gameevent.EuclideanGameEventDispatcher
    F:java.util.List listeners -> b
    F:java.util.Set listenersToRemove -> c
    F:java.util.List listenersToAdd -> d
    F:boolean processing -> e
    F:net.minecraft.server.level.WorldServer level -> f
    M:boolean isEmpty() -> a
    M:void register(net.minecraft.world.level.gameevent.GameEventListener) -> a
    M:void unregister(net.minecraft.world.level.gameevent.GameEventListener) -> b
    M:boolean walkListeners(net.minecraft.world.level.gameevent.GameEvent,net.minecraft.world.phys.Vec3D,net.minecraft.world.level.gameevent.GameEvent$Context,java.util.function.BiConsumer) -> a
    M:java.util.Optional getPostableListenerPosition(net.minecraft.server.level.WorldServer,net.minecraft.world.phys.Vec3D,net.minecraft.world.level.gameevent.GameEventListener) -> a
net.minecraft.world.level.gameevent.GameEvent -> cyy -> net.minecraft.world.level.gameevent.GameEvent
    F:net.minecraft.world.level.gameevent.GameEvent BLOCK_ACTIVATE -> a
    F:net.minecraft.world.level.gameevent.GameEvent BLOCK_ATTACH -> b
    F:net.minecraft.world.level.gameevent.GameEvent BLOCK_CHANGE -> c
    F:net.minecraft.world.level.gameevent.GameEvent BLOCK_CLOSE -> d
    F:net.minecraft.world.level.gameevent.GameEvent BLOCK_DEACTIVATE -> e
    F:net.minecraft.world.level.gameevent.GameEvent BLOCK_DESTROY -> f
    F:net.minecraft.world.level.gameevent.GameEvent BLOCK_DETACH -> g
    F:net.minecraft.world.level.gameevent.GameEvent BLOCK_OPEN -> h
    F:net.minecraft.world.level.gameevent.GameEvent BLOCK_PLACE -> i
    F:net.minecraft.world.level.gameevent.GameEvent CONTAINER_CLOSE -> j
    F:net.minecraft.world.level.gameevent.GameEvent CONTAINER_OPEN -> k
    F:net.minecraft.world.level.gameevent.GameEvent DISPENSE_FAIL -> l
    F:net.minecraft.world.level.gameevent.GameEvent DRINK -> m
    F:net.minecraft.world.level.gameevent.GameEvent EAT -> n
    F:net.minecraft.world.level.gameevent.GameEvent ELYTRA_GLIDE -> o
    F:net.minecraft.world.level.gameevent.GameEvent ENTITY_DAMAGE -> p
    F:net.minecraft.world.level.gameevent.GameEvent ENTITY_DIE -> q
    F:net.minecraft.world.level.gameevent.GameEvent ENTITY_INTERACT -> r
    F:net.minecraft.world.level.gameevent.GameEvent ENTITY_PLACE -> s
    F:net.minecraft.world.level.gameevent.GameEvent ENTITY_ROAR -> t
    F:net.minecraft.world.level.gameevent.GameEvent ENTITY_SHAKE -> u
    F:net.minecraft.world.level.gameevent.GameEvent EQUIP -> v
    F:net.minecraft.world.level.gameevent.GameEvent EXPLODE -> w
    F:net.minecraft.world.level.gameevent.GameEvent FLAP -> x
    F:net.minecraft.world.level.gameevent.GameEvent FLUID_PICKUP -> y
    F:net.minecraft.world.level.gameevent.GameEvent FLUID_PLACE -> z
    M:java.lang.String getName() -> a
    M:int getNotificationRadius() -> b
    M:net.minecraft.world.level.gameevent.GameEvent register(java.lang.String) -> a
    M:net.minecraft.world.level.gameevent.GameEvent register(java.lang.String,int) -> a
    M:net.minecraft.core.Holder$Reference builtInRegistryHolder() -> c
    M:boolean is(net.minecraft.tags.TagKey) -> a
net.minecraft.world.level.gameevent.GameEvent$Context -> cyy$a -> net.minecraft.world.level.gameevent.GameEvent$a
    F:net.minecraft.world.entity.Entity sourceEntity -> a
    F:net.minecraft.world.level.block.state.IBlockData affectedState -> b
    M:net.minecraft.world.level.gameevent.GameEvent$Context of(net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.level.gameevent.GameEvent$Context of(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.gameevent.GameEvent$Context of(net.minecraft.world.entity.Entity,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.entity.Entity sourceEntity() -> a
    M:net.minecraft.world.level.block.state.IBlockData affectedState() -> b
net.minecraft.world.level.gameevent.GameEvent$Message -> cyy$b -> net.minecraft.world.level.gameevent.GameEvent$b
    F:net.minecraft.world.level.gameevent.GameEvent gameEvent -> a
    F:net.minecraft.world.phys.Vec3D source -> b
    F:net.minecraft.world.level.gameevent.GameEvent$Context context -> c
    F:net.minecraft.world.level.gameevent.GameEventListener recipient -> d
    F:double distanceToRecipient -> e
    M:int compareTo(net.minecraft.world.level.gameevent.GameEvent$Message) -> a
    M:net.minecraft.world.level.gameevent.GameEvent gameEvent() -> a
    M:net.minecraft.world.phys.Vec3D source() -> b
    M:net.minecraft.world.level.gameevent.GameEvent$Context context() -> c
    M:net.minecraft.world.level.gameevent.GameEventListener recipient() -> d
net.minecraft.world.level.gameevent.GameEventDispatcher -> cyz -> net.minecraft.world.level.gameevent.GameEventDispatcher
    F:net.minecraft.world.level.gameevent.GameEventDispatcher NOOP -> a
    M:boolean isEmpty() -> a
    M:void register(net.minecraft.world.level.gameevent.GameEventListener) -> a
    M:void unregister(net.minecraft.world.level.gameevent.GameEventListener) -> b
    M:boolean walkListeners(net.minecraft.world.level.gameevent.GameEvent,net.minecraft.world.phys.Vec3D,net.minecraft.world.level.gameevent.GameEvent$Context,java.util.function.BiConsumer) -> a
net.minecraft.world.level.gameevent.GameEventListener -> cza -> net.minecraft.world.level.gameevent.GameEventListener
    M:boolean handleEventsImmediately() -> c
net.minecraft.world.level.gameevent.PositionSource -> czb -> net.minecraft.world.level.gameevent.PositionSource
    F:com.mojang.serialization.Codec CODEC -> b
net.minecraft.world.level.gameevent.PositionSourceType -> czc -> net.minecraft.world.level.gameevent.PositionSourceType
    F:net.minecraft.world.level.gameevent.PositionSourceType BLOCK -> a
    F:net.minecraft.world.level.gameevent.PositionSourceType ENTITY -> b
    M:net.minecraft.world.level.gameevent.PositionSourceType register(java.lang.String,net.minecraft.world.level.gameevent.PositionSourceType) -> a
    M:net.minecraft.world.level.gameevent.PositionSource fromNetwork(net.minecraft.network.PacketDataSerializer) -> c
    M:void toNetwork(net.minecraft.world.level.gameevent.PositionSource,net.minecraft.network.PacketDataSerializer) -> a
net.minecraft.world.level.gameevent.vibrations.VibrationListener -> cze -> net.minecraft.world.level.gameevent.vibrations.VibrationListener
    F:net.minecraft.world.level.gameevent.PositionSource listenerSource -> a
    F:int listenerRange -> b
    F:net.minecraft.world.level.gameevent.vibrations.VibrationListener$VibrationListenerConfig config -> c
    F:net.minecraft.world.level.gameevent.vibrations.VibrationListener$ReceivingEvent receivingEvent -> d
    F:float receivingDistance -> e
    F:int travelTimeInTicks -> f
    M:com.mojang.serialization.Codec codec(net.minecraft.world.level.gameevent.vibrations.VibrationListener$VibrationListenerConfig) -> a
    M:void tick(net.minecraft.world.level.World) -> a
    M:net.minecraft.world.level.gameevent.PositionSource getListenerSource() -> d
    M:int getListenerRadius() -> f
    M:boolean handleGameEvent(net.minecraft.server.level.WorldServer,net.minecraft.world.level.gameevent.GameEvent$Message) -> a
    M:void scheduleSignal(net.minecraft.server.level.WorldServer,net.minecraft.world.level.gameevent.GameEvent,net.minecraft.world.level.gameevent.GameEvent$Context,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D) -> a
    M:boolean isOccluded(net.minecraft.world.level.World,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D) -> a
net.minecraft.world.level.gameevent.vibrations.VibrationListener$ReceivingEvent -> cze$a -> net.minecraft.world.level.gameevent.vibrations.VibrationListener$a
    F:net.minecraft.world.level.gameevent.GameEvent gameEvent -> b
    F:float distance -> c
    F:net.minecraft.world.phys.Vec3D pos -> d
    F:java.util.UUID uuid -> e
    F:java.util.UUID projectileOwnerUuid -> f
    F:net.minecraft.world.entity.Entity entity -> g
    F:com.mojang.serialization.Codec CODEC -> a
    M:java.util.UUID getProjectileOwner(net.minecraft.world.entity.Entity) -> a
    M:java.util.Optional getEntity(net.minecraft.server.level.WorldServer) -> a
    M:java.util.Optional getProjectileOwner(net.minecraft.server.level.WorldServer) -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.gameevent.GameEvent gameEvent() -> a
    M:float distance() -> b
    M:net.minecraft.world.phys.Vec3D pos() -> c
    M:java.util.UUID uuid() -> d
    M:java.util.UUID projectileOwnerUuid() -> e
    M:net.minecraft.world.entity.Entity entity() -> f
net.minecraft.world.level.gameevent.vibrations.VibrationListener$VibrationListenerConfig -> cze$b -> net.minecraft.world.level.gameevent.vibrations.VibrationListener$b
    M:boolean isValidVibration(net.minecraft.world.level.gameevent.GameEvent,net.minecraft.world.level.gameevent.GameEvent$Context) -> a
    M:void onSignalSchedule() -> f
net.minecraft.world.level.levelgen.Aquifer -> czg -> net.minecraft.world.level.levelgen.Aquifer
    M:net.minecraft.world.level.levelgen.Aquifer create(net.minecraft.world.level.levelgen.NoiseChunk,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.levelgen.NoiseRouter,net.minecraft.world.level.levelgen.PositionalRandomFactory,int,int,net.minecraft.world.level.levelgen.Aquifer$FluidPicker) -> a
    M:net.minecraft.world.level.levelgen.Aquifer createDisabled(net.minecraft.world.level.levelgen.Aquifer$FluidPicker) -> a
    M:net.minecraft.world.level.block.state.IBlockData computeSubstance(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext,double) -> a
    M:boolean shouldScheduleFluidUpdate() -> a
net.minecraft.world.level.levelgen.Aquifer$FluidPicker -> czg$a -> net.minecraft.world.level.levelgen.Aquifer$a
net.minecraft.world.level.levelgen.Aquifer$FluidStatus -> czg$b -> net.minecraft.world.level.levelgen.Aquifer$b
    F:int fluidLevel -> a
    F:net.minecraft.world.level.block.state.IBlockData fluidType -> b
    M:net.minecraft.world.level.block.state.IBlockData at(int) -> a
net.minecraft.world.level.levelgen.Aquifer$NoiseBasedAquifer -> czg$c -> net.minecraft.world.level.levelgen.Aquifer$c
    F:int X_RANGE -> a
    F:int Y_RANGE -> b
    F:int Z_RANGE -> c
    F:int X_SEPARATION -> d
    F:int Y_SEPARATION -> e
    F:int Z_SEPARATION -> f
    F:int X_SPACING -> g
    F:int Y_SPACING -> h
    F:int Z_SPACING -> i
    F:int MAX_REASONABLE_DISTANCE_TO_AQUIFER_CENTER -> j
    F:double FLOWING_UPDATE_SIMULARITY -> k
    F:net.minecraft.world.level.levelgen.NoiseChunk noiseChunk -> l
    F:net.minecraft.world.level.levelgen.DensityFunction barrierNoise -> m
    F:net.minecraft.world.level.levelgen.DensityFunction fluidLevelFloodednessNoise -> n
    F:net.minecraft.world.level.levelgen.DensityFunction fluidLevelSpreadNoise -> o
    F:net.minecraft.world.level.levelgen.DensityFunction lavaNoise -> p
    F:net.minecraft.world.level.levelgen.PositionalRandomFactory positionalRandomFactory -> q
    F:net.minecraft.world.level.levelgen.Aquifer$FluidPicker globalFluidPicker -> t
    F:net.minecraft.world.level.levelgen.DensityFunction erosion -> u
    F:net.minecraft.world.level.levelgen.DensityFunction depth -> v
    F:boolean shouldScheduleFluidUpdate -> w
    F:int minGridX -> x
    F:int minGridY -> y
    F:int minGridZ -> z
    M:int getIndex(int,int,int) -> a
    M:net.minecraft.world.level.block.state.IBlockData computeSubstance(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext,double) -> a
    M:boolean shouldScheduleFluidUpdate() -> a
    M:double similarity(int,int) -> a
    M:double calculatePressure(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext,org.apache.commons.lang3.mutable.MutableDouble,net.minecraft.world.level.levelgen.Aquifer$FluidStatus,net.minecraft.world.level.levelgen.Aquifer$FluidStatus) -> a
    M:int gridX(int) -> a
    M:int gridY(int) -> b
    M:int gridZ(int) -> c
    M:net.minecraft.world.level.levelgen.Aquifer$FluidStatus getAquiferStatus(long) -> a
    M:net.minecraft.world.level.levelgen.Aquifer$FluidStatus computeFluid(int,int,int) -> b
    M:int computeSurfaceLevel(int,int,int,net.minecraft.world.level.levelgen.Aquifer$FluidStatus,int,boolean) -> a
    M:int computeRandomizedFluidSurfaceLevel(int,int,int,int) -> a
    M:net.minecraft.world.level.block.state.IBlockData computeFluidType(int,int,int,net.minecraft.world.level.levelgen.Aquifer$FluidStatus,int) -> a
net.minecraft.world.level.levelgen.Beardifier -> czh -> net.minecraft.world.level.levelgen.Beardifier
    F:int BEARD_KERNEL_RADIUS -> a
    F:int BEARD_KERNEL_SIZE -> f
    F:it.unimi.dsi.fastutil.objects.ObjectListIterator pieceIterator -> h
    F:it.unimi.dsi.fastutil.objects.ObjectListIterator junctionIterator -> i
    M:net.minecraft.world.level.levelgen.Beardifier forStructuresInChunk(net.minecraft.world.level.StructureManager,net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:double getBuryContribution(int,int,int) -> a
    M:double getBeardContribution(int,int,int,int) -> a
    M:boolean isInKernelRange(int) -> a
    M:double computeBeardContribution(int,int,int) -> b
    M:double computeBeardContribution(int,double,int) -> a
net.minecraft.world.level.levelgen.Beardifier$Rigid -> czh$a -> net.minecraft.world.level.levelgen.Beardifier$a
    F:net.minecraft.world.level.levelgen.structure.StructureBoundingBox box -> a
    F:net.minecraft.world.level.levelgen.structure.TerrainAdjustment terrainAdjustment -> b
    F:int groundLevelDelta -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox box() -> a
    M:net.minecraft.world.level.levelgen.structure.TerrainAdjustment terrainAdjustment() -> b
    M:int groundLevelDelta() -> c
net.minecraft.world.level.levelgen.BelowZeroRetrogen -> czi -> net.minecraft.world.level.levelgen.BelowZeroRetrogen
    F:java.util.BitSet EMPTY -> c
    F:com.mojang.serialization.Codec BITSET_CODEC -> d
    F:com.mojang.serialization.Codec NON_EMPTY_CHUNK_STATUS -> e
    F:com.mojang.serialization.Codec CODEC -> a
    F:java.util.Set RETAINED_RETROGEN_BIOMES -> f
    F:net.minecraft.world.level.LevelHeightAccessor UPGRADE_HEIGHT_ACCESSOR -> b
    F:net.minecraft.world.level.chunk.ChunkStatus targetStatus -> g
    F:java.util.BitSet missingBedrock -> h
    M:net.minecraft.world.level.levelgen.BelowZeroRetrogen read(net.minecraft.nbt.NBTTagCompound) -> a
    M:void replaceOldBedrock(net.minecraft.world.level.chunk.ProtoChunk) -> a
    M:void applyBedrockMask(net.minecraft.world.level.chunk.ProtoChunk) -> b
    M:net.minecraft.world.level.chunk.ChunkStatus targetStatus() -> a
    M:boolean hasBedrockHoles() -> b
    M:boolean hasBedrockHole(int,int) -> a
    M:net.minecraft.world.level.biome.BiomeResolver getBiomeResolver(net.minecraft.world.level.biome.BiomeResolver,net.minecraft.world.level.chunk.IChunkAccess) -> a
net.minecraft.world.level.levelgen.BitRandomSource -> czj -> net.minecraft.world.level.levelgen.BitRandomSource
    F:float FLOAT_MULTIPLIER -> b
    F:double DOUBLE_MULTIPLIER -> c
    M:int nextInt() -> f
    M:int nextInt(int) -> a
    M:long nextLong() -> g
    M:boolean nextBoolean() -> h
    M:float nextFloat() -> i
    M:double nextDouble() -> j
net.minecraft.world.level.levelgen.Column -> czk -> net.minecraft.world.level.levelgen.Column
    M:net.minecraft.world.level.levelgen.Column$Range around(int,int) -> a
    M:net.minecraft.world.level.levelgen.Column$Range inside(int,int) -> b
    M:net.minecraft.world.level.levelgen.Column below(int) -> a
    M:net.minecraft.world.level.levelgen.Column fromHighest(int) -> b
    M:net.minecraft.world.level.levelgen.Column above(int) -> c
    M:net.minecraft.world.level.levelgen.Column fromLowest(int) -> d
    M:net.minecraft.world.level.levelgen.Column line() -> a
    M:net.minecraft.world.level.levelgen.Column create(java.util.OptionalInt,java.util.OptionalInt) -> a
    M:net.minecraft.world.level.levelgen.Column withFloor(java.util.OptionalInt) -> a
    M:net.minecraft.world.level.levelgen.Column withCeiling(java.util.OptionalInt) -> b
    M:java.util.Optional scan(net.minecraft.world.level.VirtualLevelReadable,net.minecraft.core.BlockPosition,int,java.util.function.Predicate,java.util.function.Predicate) -> a
    M:java.util.OptionalInt scanDirection(net.minecraft.world.level.VirtualLevelReadable,int,java.util.function.Predicate,java.util.function.Predicate,net.minecraft.core.BlockPosition$MutableBlockPosition,int,net.minecraft.core.EnumDirection) -> a
net.minecraft.world.level.levelgen.Column$Line -> czk$a -> net.minecraft.world.level.levelgen.Column$a
    F:net.minecraft.world.level.levelgen.Column$Line INSTANCE -> a
    M:java.util.OptionalInt getCeiling() -> b
    M:java.util.OptionalInt getFloor() -> c
    M:java.util.OptionalInt getHeight() -> d
net.minecraft.world.level.levelgen.Column$Range -> czk$b -> net.minecraft.world.level.levelgen.Column$b
    F:int floor -> a
    F:int ceiling -> b
    M:java.util.OptionalInt getCeiling() -> b
    M:java.util.OptionalInt getFloor() -> c
    M:java.util.OptionalInt getHeight() -> d
    M:int ceiling() -> e
    M:int floor() -> f
    M:int height() -> g
net.minecraft.world.level.levelgen.Column$Ray -> czk$c -> net.minecraft.world.level.levelgen.Column$c
    F:int edge -> a
    F:boolean pointingUp -> b
    M:java.util.OptionalInt getCeiling() -> b
    M:java.util.OptionalInt getFloor() -> c
    M:java.util.OptionalInt getHeight() -> d
net.minecraft.world.level.levelgen.DebugLevelSource -> czl -> net.minecraft.world.level.levelgen.ChunkProviderDebug
    F:com.mojang.serialization.Codec CODEC -> e
    F:int BLOCK_MARGIN -> j
    F:java.util.List ALL_BLOCKS -> k
    F:int GRID_WIDTH -> l
    F:int GRID_HEIGHT -> m
    F:net.minecraft.world.level.block.state.IBlockData AIR -> f
    F:net.minecraft.world.level.block.state.IBlockData BARRIER -> g
    F:int HEIGHT -> h
    F:int BARRIER_HEIGHT -> i
    F:net.minecraft.core.IRegistry biomes -> n
    M:net.minecraft.core.IRegistry biomes() -> h
    M:com.mojang.serialization.Codec codec() -> b
    M:void buildSurface(net.minecraft.server.level.RegionLimitedWorldAccess,net.minecraft.world.level.StructureManager,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:void applyBiomeDecoration(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.world.level.StructureManager) -> a
    M:java.util.concurrent.CompletableFuture fillFromNoise(java.util.concurrent.Executor,net.minecraft.world.level.levelgen.blending.Blender,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:int getBaseHeight(int,int,net.minecraft.world.level.levelgen.HeightMap$Type,net.minecraft.world.level.LevelHeightAccessor,net.minecraft.world.level.levelgen.RandomState) -> a
    M:net.minecraft.world.level.BlockColumn getBaseColumn(int,int,net.minecraft.world.level.LevelHeightAccessor,net.minecraft.world.level.levelgen.RandomState) -> a
    M:void addDebugScreenInfo(java.util.List,net.minecraft.world.level.levelgen.RandomState,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getBlockStateFor(int,int) -> a
    M:void applyCarvers(net.minecraft.server.level.RegionLimitedWorldAccess,long,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.biome.BiomeManager,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.world.level.levelgen.WorldGenStage$Features) -> a
    M:void spawnOriginalMobs(net.minecraft.server.level.RegionLimitedWorldAccess) -> a
    M:int getMinY() -> g
    M:int getGenDepth() -> e
    M:int getSeaLevel() -> f
net.minecraft.world.level.levelgen.Density -> czm -> net.minecraft.world.level.levelgen.Density
    F:double SURFACE -> a
    F:double UNRECOVERABLY_DENSE -> b
    F:double UNRECOVERABLY_THIN -> c
net.minecraft.world.level.levelgen.DensityFunction -> czn -> net.minecraft.world.level.levelgen.DensityFunction
    F:com.mojang.serialization.Codec DIRECT_CODEC -> b
    F:com.mojang.serialization.Codec CODEC -> c
    F:com.mojang.serialization.Codec HOLDER_HELPER_CODEC -> d
    M:net.minecraft.world.level.levelgen.DensityFunction clamp(double,double) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction abs() -> d
    M:net.minecraft.world.level.levelgen.DensityFunction square() -> e
    M:net.minecraft.world.level.levelgen.DensityFunction cube() -> f
    M:net.minecraft.world.level.levelgen.DensityFunction halfNegative() -> g
    M:net.minecraft.world.level.levelgen.DensityFunction quarterNegative() -> h
    M:net.minecraft.world.level.levelgen.DensityFunction squeeze() -> i
net.minecraft.world.level.levelgen.DensityFunction$ContextProvider -> czn$a -> net.minecraft.world.level.levelgen.DensityFunction$a
net.minecraft.world.level.levelgen.DensityFunction$FunctionContext -> czn$b -> net.minecraft.world.level.levelgen.DensityFunction$b
    M:net.minecraft.world.level.levelgen.blending.Blender getBlender() -> d
net.minecraft.world.level.levelgen.DensityFunction$NoiseHolder -> czn$c -> net.minecraft.world.level.levelgen.DensityFunction$c
    F:net.minecraft.core.Holder noiseData -> b
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal noise -> c
    F:com.mojang.serialization.Codec CODEC -> a
    M:double getValue(double,double,double) -> a
    M:double maxValue() -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.Holder noiseData() -> b
    M:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal noise() -> c
net.minecraft.world.level.levelgen.DensityFunction$SimpleFunction -> czn$d -> net.minecraft.world.level.levelgen.DensityFunction$d
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
net.minecraft.world.level.levelgen.DensityFunction$SinglePointContext -> czn$e -> net.minecraft.world.level.levelgen.DensityFunction$e
    F:int blockX -> a
    F:int blockY -> b
    F:int blockZ -> c
    M:boolean equals(java.lang.Object) -> equals
    M:int blockX() -> a
    M:int blockY() -> b
    M:int blockZ() -> c
net.minecraft.world.level.levelgen.DensityFunction$Visitor -> czn$f -> net.minecraft.world.level.levelgen.DensityFunction$f
    M:net.minecraft.world.level.levelgen.DensityFunction$NoiseHolder visitNoise(net.minecraft.world.level.levelgen.DensityFunction$NoiseHolder) -> a
net.minecraft.world.level.levelgen.DensityFunctions -> czo -> net.minecraft.world.level.levelgen.DensityFunctions
    F:com.mojang.serialization.Codec CODEC -> c
    F:double MAX_REASONABLE_NOISE_VALUE -> a
    F:com.mojang.serialization.Codec NOISE_VALUE_CODEC -> d
    F:com.mojang.serialization.Codec DIRECT_CODEC -> b
    M:com.mojang.serialization.Codec bootstrap(net.minecraft.core.IRegistry) -> a
    M:com.mojang.serialization.Codec register(net.minecraft.core.IRegistry,java.lang.String,net.minecraft.util.KeyDispatchDataCodec) -> a
    M:net.minecraft.util.KeyDispatchDataCodec singleArgumentCodec(com.mojang.serialization.Codec,java.util.function.Function,java.util.function.Function) -> a
    M:net.minecraft.util.KeyDispatchDataCodec singleFunctionArgumentCodec(java.util.function.Function,java.util.function.Function) -> a
    M:net.minecraft.util.KeyDispatchDataCodec doubleFunctionArgumentCodec(java.util.function.BiFunction,java.util.function.Function,java.util.function.Function) -> a
    M:net.minecraft.util.KeyDispatchDataCodec makeCodec(com.mojang.serialization.MapCodec) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction interpolated(net.minecraft.world.level.levelgen.DensityFunction) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction flatCache(net.minecraft.world.level.levelgen.DensityFunction) -> b
    M:net.minecraft.world.level.levelgen.DensityFunction cache2d(net.minecraft.world.level.levelgen.DensityFunction) -> c
    M:net.minecraft.world.level.levelgen.DensityFunction cacheOnce(net.minecraft.world.level.levelgen.DensityFunction) -> d
    M:net.minecraft.world.level.levelgen.DensityFunction cacheAllInCell(net.minecraft.world.level.levelgen.DensityFunction) -> e
    M:net.minecraft.world.level.levelgen.DensityFunction mappedNoise(net.minecraft.core.Holder,double,double,double,double) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mappedNoise(net.minecraft.core.Holder,double,double,double) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mappedNoise(net.minecraft.core.Holder,double,double) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction shiftedNoise2d(net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.world.level.levelgen.DensityFunction,double,net.minecraft.core.Holder) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction noise(net.minecraft.core.Holder) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction noise(net.minecraft.core.Holder,double,double) -> b
    M:net.minecraft.world.level.levelgen.DensityFunction noise(net.minecraft.core.Holder,double) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction rangeChoice(net.minecraft.world.level.levelgen.DensityFunction,double,double,net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.world.level.levelgen.DensityFunction) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction shiftA(net.minecraft.core.Holder) -> b
    M:net.minecraft.world.level.levelgen.DensityFunction shiftB(net.minecraft.core.Holder) -> c
    M:net.minecraft.world.level.levelgen.DensityFunction shift(net.minecraft.core.Holder) -> d
    M:net.minecraft.world.level.levelgen.DensityFunction blendDensity(net.minecraft.world.level.levelgen.DensityFunction) -> f
    M:net.minecraft.world.level.levelgen.DensityFunction endIslands(long) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction weirdScaledSampler(net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.core.Holder,net.minecraft.world.level.levelgen.DensityFunctions$WeirdScaledSampler$RarityValueMapper) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction add(net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.world.level.levelgen.DensityFunction) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mul(net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.world.level.levelgen.DensityFunction) -> b
    M:net.minecraft.world.level.levelgen.DensityFunction min(net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.world.level.levelgen.DensityFunction) -> c
    M:net.minecraft.world.level.levelgen.DensityFunction max(net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.world.level.levelgen.DensityFunction) -> d
    M:net.minecraft.world.level.levelgen.DensityFunction spline(net.minecraft.util.CubicSpline) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction zero() -> a
    M:net.minecraft.world.level.levelgen.DensityFunction constant(double) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction yClampedGradient(int,int,double,double) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction map(net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.world.level.levelgen.DensityFunctions$Mapped$Type) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mapFromUnitTo(net.minecraft.world.level.levelgen.DensityFunction,double,double) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction blendAlpha() -> b
    M:net.minecraft.world.level.levelgen.DensityFunction blendOffset() -> c
    M:net.minecraft.world.level.levelgen.DensityFunction lerp(net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.world.level.levelgen.DensityFunction) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction lerp(net.minecraft.world.level.levelgen.DensityFunction,double,net.minecraft.world.level.levelgen.DensityFunction) -> a
net.minecraft.world.level.levelgen.DensityFunctions$Ap2 -> czo$a -> net.minecraft.world.level.levelgen.DensityFunctions$a
    F:net.minecraft.world.level.levelgen.DensityFunctions$TwoArgumentSimpleFunction$Type type -> e
    F:net.minecraft.world.level.levelgen.DensityFunction argument1 -> f
    F:net.minecraft.world.level.levelgen.DensityFunction argument2 -> g
    F:double minValue -> h
    F:double maxValue -> i
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.DensityFunctions$TwoArgumentSimpleFunction$Type type() -> j
    M:net.minecraft.world.level.levelgen.DensityFunction argument1() -> k
    M:net.minecraft.world.level.levelgen.DensityFunction argument2() -> l
net.minecraft.world.level.levelgen.DensityFunctions$BeardifierMarker -> czo$b -> net.minecraft.world.level.levelgen.DensityFunctions$b
    F:net.minecraft.world.level.levelgen.DensityFunctions$BeardifierMarker INSTANCE -> a
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
net.minecraft.world.level.levelgen.DensityFunctions$BeardifierOrMarker -> czo$c -> net.minecraft.world.level.levelgen.DensityFunctions$c
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> e
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
net.minecraft.world.level.levelgen.DensityFunctions$BlendAlpha -> czo$d -> net.minecraft.world.level.levelgen.DensityFunctions$d
    F:net.minecraft.world.level.levelgen.DensityFunctions$BlendAlpha INSTANCE -> a
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> e
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
net.minecraft.world.level.levelgen.DensityFunctions$BlendDensity -> czo$e -> net.minecraft.world.level.levelgen.DensityFunctions$e
    F:net.minecraft.world.level.levelgen.DensityFunction input -> a
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> e
    M:double transform(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext,double) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.DensityFunction input() -> j
net.minecraft.world.level.levelgen.DensityFunctions$BlendOffset -> czo$f -> net.minecraft.world.level.levelgen.DensityFunctions$f
    F:net.minecraft.world.level.levelgen.DensityFunctions$BlendOffset INSTANCE -> a
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> e
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
net.minecraft.world.level.levelgen.DensityFunctions$Clamp -> czo$g -> net.minecraft.world.level.levelgen.DensityFunctions$g
    F:net.minecraft.world.level.levelgen.DensityFunction input -> e
    F:double minValue -> f
    F:double maxValue -> g
    F:com.mojang.serialization.MapCodec DATA_CODEC -> h
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> a
    M:double transform(double) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:double minValue() -> a
    M:double maxValue() -> b
net.minecraft.world.level.levelgen.DensityFunctions$Constant -> czo$h -> net.minecraft.world.level.levelgen.DensityFunctions$h
    F:double value -> a
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> e
    F:net.minecraft.world.level.levelgen.DensityFunctions$Constant ZERO -> f
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:double value() -> j
net.minecraft.world.level.levelgen.DensityFunctions$EndIslandDensityFunction -> czo$i -> net.minecraft.world.level.levelgen.DensityFunctions$i
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> a
    F:float ISLAND_THRESHOLD -> e
    F:net.minecraft.world.level.levelgen.synth.NoiseGenerator3Handler islandNoise -> f
    M:float getHeightValue(net.minecraft.world.level.levelgen.synth.NoiseGenerator3Handler,int,int) -> a
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
net.minecraft.world.level.levelgen.DensityFunctions$HolderHolder -> czo$j -> net.minecraft.world.level.levelgen.DensityFunctions$j
    F:net.minecraft.core.Holder function -> a
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.Holder function() -> j
net.minecraft.world.level.levelgen.DensityFunctions$Mapped -> czo$k -> net.minecraft.world.level.levelgen.DensityFunctions$k
    F:net.minecraft.world.level.levelgen.DensityFunctions$Mapped$Type type -> a
    F:net.minecraft.world.level.levelgen.DensityFunction input -> e
    F:double minValue -> f
    F:double maxValue -> g
    M:net.minecraft.world.level.levelgen.DensityFunctions$Mapped create(net.minecraft.world.level.levelgen.DensityFunctions$Mapped$Type,net.minecraft.world.level.levelgen.DensityFunction) -> a
    M:double transform(net.minecraft.world.level.levelgen.DensityFunctions$Mapped$Type,double) -> a
    M:double transform(double) -> a
    M:net.minecraft.world.level.levelgen.DensityFunctions$Mapped mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> b
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.DensityFunctions$Mapped$Type type() -> k
    M:double minValue() -> a
    M:double maxValue() -> b
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
net.minecraft.world.level.levelgen.DensityFunctions$Mapped$Type -> czo$k$a -> net.minecraft.world.level.levelgen.DensityFunctions$k$a
    F:net.minecraft.world.level.levelgen.DensityFunctions$Mapped$Type ABS -> a
    F:net.minecraft.world.level.levelgen.DensityFunctions$Mapped$Type SQUARE -> b
    F:net.minecraft.world.level.levelgen.DensityFunctions$Mapped$Type CUBE -> c
    F:net.minecraft.world.level.levelgen.DensityFunctions$Mapped$Type HALF_NEGATIVE -> d
    F:net.minecraft.world.level.levelgen.DensityFunctions$Mapped$Type QUARTER_NEGATIVE -> e
    F:net.minecraft.world.level.levelgen.DensityFunctions$Mapped$Type SQUEEZE -> f
    F:java.lang.String name -> g
    F:net.minecraft.util.KeyDispatchDataCodec codec -> h
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.levelgen.DensityFunctions$Marker -> czo$l -> net.minecraft.world.level.levelgen.DensityFunctions$l
    F:net.minecraft.world.level.levelgen.DensityFunctions$Marker$Type type -> a
    F:net.minecraft.world.level.levelgen.DensityFunction wrapped -> e
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.DensityFunctions$Marker$Type type() -> j
    M:net.minecraft.world.level.levelgen.DensityFunction wrapped() -> k
net.minecraft.world.level.levelgen.DensityFunctions$Marker$Type -> czo$l$a -> net.minecraft.world.level.levelgen.DensityFunctions$l$a
    F:net.minecraft.world.level.levelgen.DensityFunctions$Marker$Type Interpolated -> a
    F:net.minecraft.world.level.levelgen.DensityFunctions$Marker$Type FlatCache -> b
    F:net.minecraft.world.level.levelgen.DensityFunctions$Marker$Type Cache2D -> c
    F:net.minecraft.world.level.levelgen.DensityFunctions$Marker$Type CacheOnce -> d
    F:net.minecraft.world.level.levelgen.DensityFunctions$Marker$Type CacheAllInCell -> e
    F:java.lang.String name -> f
    F:net.minecraft.util.KeyDispatchDataCodec codec -> g
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.levelgen.DensityFunctions$MarkerOrMarked -> czo$m -> net.minecraft.world.level.levelgen.DensityFunctions$m
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
net.minecraft.world.level.levelgen.DensityFunctions$MulOrAdd -> czo$n -> net.minecraft.world.level.levelgen.DensityFunctions$n
    F:net.minecraft.world.level.levelgen.DensityFunctions$MulOrAdd$Type specificType -> e
    F:net.minecraft.world.level.levelgen.DensityFunction input -> f
    F:double minValue -> g
    F:double maxValue -> h
    F:double argument -> i
    M:net.minecraft.world.level.levelgen.DensityFunctions$TwoArgumentSimpleFunction$Type type() -> j
    M:net.minecraft.world.level.levelgen.DensityFunction argument1() -> k
    M:net.minecraft.world.level.levelgen.DensityFunction argument2() -> l
    M:double transform(double) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.DensityFunctions$MulOrAdd$Type specificType() -> m
    M:double minValue() -> a
    M:double maxValue() -> b
    M:double argument() -> n
net.minecraft.world.level.levelgen.DensityFunctions$MulOrAdd$Type -> czo$n$a -> net.minecraft.world.level.levelgen.DensityFunctions$n$a
    F:net.minecraft.world.level.levelgen.DensityFunctions$MulOrAdd$Type MUL -> a
    F:net.minecraft.world.level.levelgen.DensityFunctions$MulOrAdd$Type ADD -> b
net.minecraft.world.level.levelgen.DensityFunctions$Noise -> czo$o -> net.minecraft.world.level.levelgen.DensityFunctions$o
    F:net.minecraft.world.level.levelgen.DensityFunction$NoiseHolder noise -> f
    F:double xzScale -> g
    F:double yScale -> h
    F:com.mojang.serialization.MapCodec DATA_CODEC -> a
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> e
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.DensityFunction$NoiseHolder noise() -> j
    M:double xzScale() -> k
    M:double yScale() -> l
net.minecraft.world.level.levelgen.DensityFunctions$PureTransformer -> czo$p -> net.minecraft.world.level.levelgen.DensityFunctions$p
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
net.minecraft.world.level.levelgen.DensityFunctions$RangeChoice -> czo$q -> net.minecraft.world.level.levelgen.DensityFunctions$q
    F:net.minecraft.world.level.levelgen.DensityFunction input -> f
    F:double minInclusive -> g
    F:double maxExclusive -> h
    F:net.minecraft.world.level.levelgen.DensityFunction whenInRange -> i
    F:net.minecraft.world.level.levelgen.DensityFunction whenOutOfRange -> j
    F:com.mojang.serialization.MapCodec DATA_CODEC -> a
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> e
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.DensityFunction input() -> j
    M:double minInclusive() -> k
    M:double maxExclusive() -> l
    M:net.minecraft.world.level.levelgen.DensityFunction whenInRange() -> m
    M:net.minecraft.world.level.levelgen.DensityFunction whenOutOfRange() -> n
net.minecraft.world.level.levelgen.DensityFunctions$Shift -> czo$r -> net.minecraft.world.level.levelgen.DensityFunctions$r
    F:net.minecraft.world.level.levelgen.DensityFunction$NoiseHolder offsetNoise -> a
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> e
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.DensityFunction$NoiseHolder offsetNoise() -> j
net.minecraft.world.level.levelgen.DensityFunctions$ShiftA -> czo$s -> net.minecraft.world.level.levelgen.DensityFunctions$s
    F:net.minecraft.world.level.levelgen.DensityFunction$NoiseHolder offsetNoise -> a
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> e
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.DensityFunction$NoiseHolder offsetNoise() -> j
net.minecraft.world.level.levelgen.DensityFunctions$ShiftB -> czo$t -> net.minecraft.world.level.levelgen.DensityFunctions$t
    F:net.minecraft.world.level.levelgen.DensityFunction$NoiseHolder offsetNoise -> a
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> e
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.DensityFunction$NoiseHolder offsetNoise() -> j
net.minecraft.world.level.levelgen.DensityFunctions$ShiftNoise -> czo$u -> net.minecraft.world.level.levelgen.DensityFunctions$u
    M:double minValue() -> a
    M:double maxValue() -> b
    M:double compute(double,double,double) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
net.minecraft.world.level.levelgen.DensityFunctions$ShiftedNoise -> czo$v -> net.minecraft.world.level.levelgen.DensityFunctions$v
    F:net.minecraft.world.level.levelgen.DensityFunction shiftX -> e
    F:net.minecraft.world.level.levelgen.DensityFunction shiftY -> f
    F:net.minecraft.world.level.levelgen.DensityFunction shiftZ -> g
    F:double xzScale -> h
    F:double yScale -> i
    F:net.minecraft.world.level.levelgen.DensityFunction$NoiseHolder noise -> j
    F:com.mojang.serialization.MapCodec DATA_CODEC -> k
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> a
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.DensityFunction shiftX() -> j
    M:net.minecraft.world.level.levelgen.DensityFunction shiftY() -> k
    M:net.minecraft.world.level.levelgen.DensityFunction shiftZ() -> l
    M:double xzScale() -> m
    M:double yScale() -> n
    M:net.minecraft.world.level.levelgen.DensityFunction$NoiseHolder noise() -> o
net.minecraft.world.level.levelgen.DensityFunctions$Spline -> czo$w -> net.minecraft.world.level.levelgen.DensityFunctions$w
    F:net.minecraft.util.CubicSpline spline -> e
    F:com.mojang.serialization.Codec SPLINE_CODEC -> f
    F:com.mojang.serialization.MapCodec DATA_CODEC -> g
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> a
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.util.CubicSpline spline() -> j
net.minecraft.world.level.levelgen.DensityFunctions$Spline$Coordinate -> czo$w$a -> net.minecraft.world.level.levelgen.DensityFunctions$w$a
    F:net.minecraft.core.Holder function -> c
    F:com.mojang.serialization.Codec CODEC -> b
    M:float apply(net.minecraft.world.level.levelgen.DensityFunctions$Spline$Point) -> a
    M:float minValue() -> b
    M:float maxValue() -> c
    M:net.minecraft.world.level.levelgen.DensityFunctions$Spline$Coordinate mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.Holder function() -> a
    M:float apply(java.lang.Object) -> a
net.minecraft.world.level.levelgen.DensityFunctions$Spline$Point -> czo$w$b -> net.minecraft.world.level.levelgen.DensityFunctions$w$b
    F:net.minecraft.world.level.levelgen.DensityFunction$FunctionContext context -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.DensityFunction$FunctionContext context() -> a
net.minecraft.world.level.levelgen.DensityFunctions$TransformerWithContext -> czo$x -> net.minecraft.world.level.levelgen.DensityFunctions$x
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
net.minecraft.world.level.levelgen.DensityFunctions$TwoArgumentSimpleFunction -> czo$y -> net.minecraft.world.level.levelgen.DensityFunctions$y
    F:org.slf4j.Logger LOGGER -> a
    M:net.minecraft.world.level.levelgen.DensityFunctions$TwoArgumentSimpleFunction create(net.minecraft.world.level.levelgen.DensityFunctions$TwoArgumentSimpleFunction$Type,net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.world.level.levelgen.DensityFunction) -> a
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
net.minecraft.world.level.levelgen.DensityFunctions$TwoArgumentSimpleFunction$Type -> czo$y$a -> net.minecraft.world.level.levelgen.DensityFunctions$y$a
    F:net.minecraft.world.level.levelgen.DensityFunctions$TwoArgumentSimpleFunction$Type ADD -> a
    F:net.minecraft.world.level.levelgen.DensityFunctions$TwoArgumentSimpleFunction$Type MUL -> b
    F:net.minecraft.world.level.levelgen.DensityFunctions$TwoArgumentSimpleFunction$Type MIN -> c
    F:net.minecraft.world.level.levelgen.DensityFunctions$TwoArgumentSimpleFunction$Type MAX -> d
    F:net.minecraft.util.KeyDispatchDataCodec codec -> e
    F:java.lang.String name -> f
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.levelgen.DensityFunctions$WeirdScaledSampler -> czo$z -> net.minecraft.world.level.levelgen.DensityFunctions$z
    F:net.minecraft.world.level.levelgen.DensityFunction input -> e
    F:net.minecraft.world.level.levelgen.DensityFunction$NoiseHolder noise -> f
    F:net.minecraft.world.level.levelgen.DensityFunctions$WeirdScaledSampler$RarityValueMapper rarityValueMapper -> g
    F:com.mojang.serialization.MapCodec DATA_CODEC -> h
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> a
    M:double transform(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext,double) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.DensityFunction input() -> j
    M:net.minecraft.world.level.levelgen.DensityFunction$NoiseHolder noise() -> k
    M:net.minecraft.world.level.levelgen.DensityFunctions$WeirdScaledSampler$RarityValueMapper rarityValueMapper() -> l
net.minecraft.world.level.levelgen.DensityFunctions$WeirdScaledSampler$RarityValueMapper -> czo$z$a -> net.minecraft.world.level.levelgen.DensityFunctions$z$a
    F:net.minecraft.world.level.levelgen.DensityFunctions$WeirdScaledSampler$RarityValueMapper TYPE1 -> a
    F:net.minecraft.world.level.levelgen.DensityFunctions$WeirdScaledSampler$RarityValueMapper TYPE2 -> b
    F:com.mojang.serialization.Codec CODEC -> c
    F:java.lang.String name -> d
    F:it.unimi.dsi.fastutil.doubles.Double2DoubleFunction mapper -> e
    F:double maxRarity -> f
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.levelgen.DensityFunctions$YClampedGradient -> czo$aa -> net.minecraft.world.level.levelgen.DensityFunctions$aa
    F:int fromY -> e
    F:int toY -> f
    F:double fromValue -> g
    F:double toValue -> h
    F:com.mojang.serialization.MapCodec DATA_CODEC -> i
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> a
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
    M:boolean equals(java.lang.Object) -> equals
    M:int fromY() -> j
    M:int toY() -> k
    M:double fromValue() -> l
    M:double toValue() -> m
net.minecraft.world.level.levelgen.FlatLevelSource -> czp -> net.minecraft.world.level.levelgen.ChunkProviderFlat
    F:com.mojang.serialization.Codec CODEC -> e
    F:net.minecraft.world.level.levelgen.flat.GeneratorSettingsFlat settings -> f
    M:com.mojang.serialization.Codec codec() -> b
    M:net.minecraft.world.level.levelgen.flat.GeneratorSettingsFlat settings() -> h
    M:void buildSurface(net.minecraft.server.level.RegionLimitedWorldAccess,net.minecraft.world.level.StructureManager,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:int getSpawnHeight(net.minecraft.world.level.LevelHeightAccessor) -> a
    M:java.util.concurrent.CompletableFuture fillFromNoise(java.util.concurrent.Executor,net.minecraft.world.level.levelgen.blending.Blender,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:int getBaseHeight(int,int,net.minecraft.world.level.levelgen.HeightMap$Type,net.minecraft.world.level.LevelHeightAccessor,net.minecraft.world.level.levelgen.RandomState) -> a
    M:net.minecraft.world.level.BlockColumn getBaseColumn(int,int,net.minecraft.world.level.LevelHeightAccessor,net.minecraft.world.level.levelgen.RandomState) -> a
    M:void addDebugScreenInfo(java.util.List,net.minecraft.world.level.levelgen.RandomState,net.minecraft.core.BlockPosition) -> a
    M:void applyCarvers(net.minecraft.server.level.RegionLimitedWorldAccess,long,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.biome.BiomeManager,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.world.level.levelgen.WorldGenStage$Features) -> a
    M:void spawnOriginalMobs(net.minecraft.server.level.RegionLimitedWorldAccess) -> a
    M:int getMinY() -> g
    M:int getGenDepth() -> e
    M:int getSeaLevel() -> f
net.minecraft.world.level.levelgen.GenerationStep -> czq -> net.minecraft.world.level.levelgen.WorldGenStage
net.minecraft.world.level.levelgen.GenerationStep$Carving -> czq$a -> net.minecraft.world.level.levelgen.WorldGenStage$Features
    F:net.minecraft.world.level.levelgen.WorldGenStage$Features AIR -> a
    F:net.minecraft.world.level.levelgen.WorldGenStage$Features LIQUID -> b
    F:com.mojang.serialization.Codec CODEC -> c
    F:java.lang.String name -> d
    M:java.lang.String getName() -> a
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.levelgen.GenerationStep$Decoration -> czq$b -> net.minecraft.world.level.levelgen.WorldGenStage$Decoration
    F:net.minecraft.world.level.levelgen.WorldGenStage$Decoration RAW_GENERATION -> a
    F:net.minecraft.world.level.levelgen.WorldGenStage$Decoration LAKES -> b
    F:net.minecraft.world.level.levelgen.WorldGenStage$Decoration LOCAL_MODIFICATIONS -> c
    F:net.minecraft.world.level.levelgen.WorldGenStage$Decoration UNDERGROUND_STRUCTURES -> d
    F:net.minecraft.world.level.levelgen.WorldGenStage$Decoration SURFACE_STRUCTURES -> e
    F:net.minecraft.world.level.levelgen.WorldGenStage$Decoration STRONGHOLDS -> f
    F:net.minecraft.world.level.levelgen.WorldGenStage$Decoration UNDERGROUND_ORES -> g
    F:net.minecraft.world.level.levelgen.WorldGenStage$Decoration UNDERGROUND_DECORATION -> h
    F:net.minecraft.world.level.levelgen.WorldGenStage$Decoration FLUID_SPRINGS -> i
    F:net.minecraft.world.level.levelgen.WorldGenStage$Decoration VEGETAL_DECORATION -> j
    F:net.minecraft.world.level.levelgen.WorldGenStage$Decoration TOP_LAYER_MODIFICATION -> k
    F:com.mojang.serialization.Codec CODEC -> l
    F:java.lang.String name -> m
    M:java.lang.String getName() -> a
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.levelgen.GeodeBlockSettings -> czr -> net.minecraft.world.level.levelgen.GeodeBlockSettings
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider fillingProvider -> a
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider innerLayerProvider -> b
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider alternateInnerLayerProvider -> c
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider middleLayerProvider -> d
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider outerLayerProvider -> e
    F:java.util.List innerPlacements -> f
    F:net.minecraft.tags.TagKey cannotReplace -> g
    F:net.minecraft.tags.TagKey invalidBlocks -> h
    F:com.mojang.serialization.Codec CODEC -> i
net.minecraft.world.level.levelgen.GeodeCrackSettings -> czs -> net.minecraft.world.level.levelgen.GeodeCrackSettings
    F:com.mojang.serialization.Codec CODEC -> a
    F:double generateCrackChance -> b
    F:double baseCrackSize -> c
    F:int crackPointOffset -> d
net.minecraft.world.level.levelgen.GeodeLayerSettings -> czt -> net.minecraft.world.level.levelgen.GeodeLayerSettings
    F:com.mojang.serialization.Codec LAYER_RANGE -> f
    F:com.mojang.serialization.Codec CODEC -> a
    F:double filling -> b
    F:double innerLayer -> c
    F:double middleLayer -> d
    F:double outerLayer -> e
net.minecraft.world.level.levelgen.Heightmap -> czu -> net.minecraft.world.level.levelgen.HeightMap
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.function.Predicate NOT_AIR -> b
    F:java.util.function.Predicate MATERIAL_MOTION_BLOCKING -> c
    F:net.minecraft.util.DataBits data -> d
    F:java.util.function.Predicate isOpaque -> e
    F:net.minecraft.world.level.chunk.IChunkAccess chunk -> f
    M:void primeHeightmaps(net.minecraft.world.level.chunk.IChunkAccess,java.util.Set) -> a
    M:boolean update(int,int,int,net.minecraft.world.level.block.state.IBlockData) -> a
    M:int getFirstAvailable(int,int) -> a
    M:int getHighestTaken(int,int) -> b
    M:int getFirstAvailable(int) -> a
    M:void setHeight(int,int,int) -> a
    M:void setRawData(net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.world.level.levelgen.HeightMap$Type,long[]) -> a
    M:int getIndex(int,int) -> c
net.minecraft.world.level.levelgen.Heightmap$Types -> czu$a -> net.minecraft.world.level.levelgen.HeightMap$Type
    F:net.minecraft.world.level.levelgen.HeightMap$Type WORLD_SURFACE_WG -> a
    F:net.minecraft.world.level.levelgen.HeightMap$Type WORLD_SURFACE -> b
    F:net.minecraft.world.level.levelgen.HeightMap$Type OCEAN_FLOOR_WG -> c
    F:net.minecraft.world.level.levelgen.HeightMap$Type OCEAN_FLOOR -> d
    F:net.minecraft.world.level.levelgen.HeightMap$Type MOTION_BLOCKING -> e
    F:net.minecraft.world.level.levelgen.HeightMap$Type MOTION_BLOCKING_NO_LEAVES -> f
    F:com.mojang.serialization.Codec CODEC -> g
    F:java.lang.String serializationKey -> h
    F:net.minecraft.world.level.levelgen.HeightMap$Use usage -> i
    F:java.util.function.Predicate isOpaque -> j
    M:java.lang.String getSerializationKey() -> a
    M:boolean sendToClient() -> b
    M:boolean keepAfterWorldgen() -> d
    M:java.util.function.Predicate isOpaque() -> e
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.levelgen.Heightmap$Usage -> czu$b -> net.minecraft.world.level.levelgen.HeightMap$Use
    F:net.minecraft.world.level.levelgen.HeightMap$Use WORLDGEN -> a
    F:net.minecraft.world.level.levelgen.HeightMap$Use LIVE_WORLD -> b
    F:net.minecraft.world.level.levelgen.HeightMap$Use CLIENT -> c
net.minecraft.world.level.levelgen.LegacyRandomSource -> czv -> net.minecraft.world.level.levelgen.LegacyRandomSource
    F:int MODULUS_BITS -> d
    F:long MODULUS_MASK -> e
    F:long MULTIPLIER -> f
    F:long INCREMENT -> g
    F:java.util.concurrent.atomic.AtomicLong seed -> h
    F:net.minecraft.world.level.levelgen.MarsagliaPolarGaussian gaussianSource -> i
    M:net.minecraft.util.RandomSource fork() -> d
    M:net.minecraft.world.level.levelgen.PositionalRandomFactory forkPositional() -> e
    M:void setSeed(long) -> b
    M:int next(int) -> c
    M:double nextGaussian() -> k
net.minecraft.world.level.levelgen.LegacyRandomSource$LegacyPositionalRandomFactory -> czv$a -> net.minecraft.world.level.levelgen.LegacyRandomSource$a
    F:long seed -> a
    M:net.minecraft.util.RandomSource at(int,int,int) -> a
    M:net.minecraft.util.RandomSource fromHashOf(java.lang.String) -> a
    M:void parityConfigString(java.lang.StringBuilder) -> a
net.minecraft.world.level.levelgen.MarsagliaPolarGaussian -> czw -> net.minecraft.world.level.levelgen.MarsagliaPolarGaussian
    F:net.minecraft.util.RandomSource randomSource -> a
    F:double nextNextGaussian -> b
    F:boolean haveNextNextGaussian -> c
    M:void reset() -> a
    M:double nextGaussian() -> b
net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator -> czx -> net.minecraft.world.level.levelgen.ChunkGeneratorAbstract
    F:com.mojang.serialization.Codec CODEC -> e
    F:net.minecraft.world.level.block.state.IBlockData AIR -> h
    F:net.minecraft.world.level.block.state.IBlockData defaultBlock -> f
    F:net.minecraft.core.IRegistry noises -> i
    F:net.minecraft.core.Holder settings -> g
    F:net.minecraft.world.level.levelgen.Aquifer$FluidPicker globalFluidPicker -> j
    M:java.util.concurrent.CompletableFuture createBiomes(net.minecraft.core.IRegistry,java.util.concurrent.Executor,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.levelgen.blending.Blender,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:void doCreateBiomes(net.minecraft.world.level.levelgen.blending.Blender,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:net.minecraft.world.level.levelgen.NoiseChunk createNoiseChunk(net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.world.level.StructureManager,net.minecraft.world.level.levelgen.blending.Blender,net.minecraft.world.level.levelgen.RandomState) -> a
    M:com.mojang.serialization.Codec codec() -> b
    M:net.minecraft.core.Holder generatorSettings() -> h
    M:boolean stable(net.minecraft.resources.ResourceKey) -> a
    M:int getBaseHeight(int,int,net.minecraft.world.level.levelgen.HeightMap$Type,net.minecraft.world.level.LevelHeightAccessor,net.minecraft.world.level.levelgen.RandomState) -> a
    M:net.minecraft.world.level.BlockColumn getBaseColumn(int,int,net.minecraft.world.level.LevelHeightAccessor,net.minecraft.world.level.levelgen.RandomState) -> a
    M:void addDebugScreenInfo(java.util.List,net.minecraft.world.level.levelgen.RandomState,net.minecraft.core.BlockPosition) -> a
    M:java.util.OptionalInt iterateNoiseColumn(net.minecraft.world.level.LevelHeightAccessor,net.minecraft.world.level.levelgen.RandomState,int,int,org.apache.commons.lang3.mutable.MutableObject,java.util.function.Predicate) -> a
    M:void buildSurface(net.minecraft.server.level.RegionLimitedWorldAccess,net.minecraft.world.level.StructureManager,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:void buildSurface(net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.world.level.levelgen.WorldGenerationContext,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.StructureManager,net.minecraft.world.level.biome.BiomeManager,net.minecraft.core.IRegistry,net.minecraft.world.level.levelgen.blending.Blender) -> a
    M:void applyCarvers(net.minecraft.server.level.RegionLimitedWorldAccess,long,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.biome.BiomeManager,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.world.level.levelgen.WorldGenStage$Features) -> a
    M:java.util.concurrent.CompletableFuture fillFromNoise(java.util.concurrent.Executor,net.minecraft.world.level.levelgen.blending.Blender,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:net.minecraft.world.level.chunk.IChunkAccess doFill(net.minecraft.world.level.levelgen.blending.Blender,net.minecraft.world.level.StructureManager,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.chunk.IChunkAccess,int,int) -> a
    M:net.minecraft.world.level.block.state.IBlockData debugPreliminarySurfaceLevel(net.minecraft.world.level.levelgen.NoiseChunk,int,int,int,net.minecraft.world.level.block.state.IBlockData) -> a
    M:int getGenDepth() -> e
    M:int getSeaLevel() -> f
    M:int getMinY() -> g
    M:void spawnOriginalMobs(net.minecraft.server.level.RegionLimitedWorldAccess) -> a
net.minecraft.world.level.levelgen.NoiseChunk -> czy -> net.minecraft.world.level.levelgen.NoiseChunk
    F:net.minecraft.world.level.levelgen.NoiseSettings noiseSettings -> a
    F:int cellCountXZ -> b
    F:int cellCountY -> c
    F:int cellNoiseMinY -> d
    F:int firstCellX -> e
    F:int firstCellZ -> f
    F:int firstNoiseX -> g
    F:int firstNoiseZ -> h
    F:java.util.List interpolators -> i
    F:java.util.List cellCaches -> j
    F:java.util.Map wrapped -> k
    F:it.unimi.dsi.fastutil.longs.Long2IntMap preliminarySurfaceLevel -> l
    F:net.minecraft.world.level.levelgen.Aquifer aquifer -> m
    F:net.minecraft.world.level.levelgen.DensityFunction initialDensityNoJaggedness -> n
    F:net.minecraft.world.level.levelgen.NoiseChunk$BlockStateFiller blockStateRule -> o
    F:net.minecraft.world.level.levelgen.blending.Blender blender -> p
    F:net.minecraft.world.level.levelgen.NoiseChunk$FlatCache blendAlpha -> q
    F:net.minecraft.world.level.levelgen.NoiseChunk$FlatCache blendOffset -> r
    F:net.minecraft.world.level.levelgen.DensityFunctions$BeardifierOrMarker beardifier -> s
    F:long lastBlendingDataPos -> t
    F:net.minecraft.world.level.levelgen.blending.Blender$BlendingOutput lastBlendingOutput -> u
    F:int noiseSizeXZ -> v
    F:int cellWidth -> w
    F:int cellHeight -> x
    F:boolean interpolating -> y
    F:boolean fillingCell -> z
    M:net.minecraft.world.level.levelgen.NoiseChunk forChunk(net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.levelgen.DensityFunctions$BeardifierOrMarker,net.minecraft.world.level.levelgen.GeneratorSettingBase,net.minecraft.world.level.levelgen.Aquifer$FluidPicker,net.minecraft.world.level.levelgen.blending.Blender) -> a
    M:net.minecraft.world.level.biome.Climate$Sampler cachedClimateSampler(net.minecraft.world.level.levelgen.NoiseRouter,java.util.List) -> a
    M:net.minecraft.world.level.block.state.IBlockData getInterpolatedState() -> e
    M:int blockX() -> a
    M:int blockY() -> b
    M:int blockZ() -> c
    M:int preliminarySurfaceLevel(int,int) -> a
    M:int computePreliminarySurfaceLevel(long) -> a
    M:net.minecraft.world.level.levelgen.blending.Blender getBlender() -> d
    M:void fillSlice(boolean,int) -> a
    M:void initializeForFirstCellX() -> f
    M:void advanceCellX(int) -> b
    M:net.minecraft.world.level.levelgen.NoiseChunk forIndex(int) -> c
    M:void fillAllDirectly(double[],net.minecraft.world.level.levelgen.DensityFunction) -> a
    M:void selectCellYZ(int,int) -> b
    M:void updateForY(int,double) -> a
    M:void updateForX(int,double) -> b
    M:void updateForZ(int,double) -> c
    M:void stopInterpolation() -> g
    M:void swapSlices() -> h
    M:net.minecraft.world.level.levelgen.Aquifer aquifer() -> i
    M:int cellWidth() -> j
    M:int cellHeight() -> k
    M:net.minecraft.world.level.levelgen.blending.Blender$BlendingOutput getOrComputeBlendingOutput(int,int) -> c
    M:net.minecraft.world.level.levelgen.DensityFunction wrap(net.minecraft.world.level.levelgen.DensityFunction) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction wrapNew(net.minecraft.world.level.levelgen.DensityFunction) -> b
    M:net.minecraft.world.level.levelgen.DensityFunction$FunctionContext forIndex(int) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction$FunctionContext forIndex(int) -> a
    M:void fillAllDirectly(double[],net.minecraft.world.level.levelgen.DensityFunction) -> a
net.minecraft.world.level.levelgen.NoiseChunk$BlendAlpha -> czy$a -> net.minecraft.world.level.levelgen.NoiseChunk$a
    M:net.minecraft.world.level.levelgen.DensityFunction wrapped() -> k
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
net.minecraft.world.level.levelgen.NoiseChunk$BlendOffset -> czy$b -> net.minecraft.world.level.levelgen.NoiseChunk$b
    M:net.minecraft.world.level.levelgen.DensityFunction wrapped() -> k
    M:net.minecraft.world.level.levelgen.DensityFunction mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
net.minecraft.world.level.levelgen.NoiseChunk$BlockStateFiller -> czy$c -> net.minecraft.world.level.levelgen.NoiseChunk$c
net.minecraft.world.level.levelgen.NoiseChunk$Cache2D -> czy$d -> net.minecraft.world.level.levelgen.NoiseChunk$d
    F:net.minecraft.world.level.levelgen.DensityFunction function -> a
    F:long lastPos2D -> e
    F:double lastValue -> f
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction wrapped() -> k
    M:net.minecraft.world.level.levelgen.DensityFunctions$Marker$Type type() -> j
net.minecraft.world.level.levelgen.NoiseChunk$CacheAllInCell -> czy$e -> net.minecraft.world.level.levelgen.NoiseChunk$e
    F:net.minecraft.world.level.levelgen.DensityFunction noiseFiller -> e
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction wrapped() -> k
    M:net.minecraft.world.level.levelgen.DensityFunctions$Marker$Type type() -> j
net.minecraft.world.level.levelgen.NoiseChunk$CacheOnce -> czy$f -> net.minecraft.world.level.levelgen.NoiseChunk$f
    F:net.minecraft.world.level.levelgen.DensityFunction function -> e
    F:long lastCounter -> f
    F:long lastArrayCounter -> g
    F:double lastValue -> h
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction wrapped() -> k
    M:net.minecraft.world.level.levelgen.DensityFunctions$Marker$Type type() -> j
net.minecraft.world.level.levelgen.NoiseChunk$FlatCache -> czy$g -> net.minecraft.world.level.levelgen.NoiseChunk$g
    F:net.minecraft.world.level.levelgen.DensityFunction noiseFiller -> e
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction wrapped() -> k
    M:net.minecraft.world.level.levelgen.DensityFunctions$Marker$Type type() -> j
net.minecraft.world.level.levelgen.NoiseChunk$NoiseChunkDensityFunction -> czy$h -> net.minecraft.world.level.levelgen.NoiseChunk$h
    M:double minValue() -> a
    M:double maxValue() -> b
net.minecraft.world.level.levelgen.NoiseChunk$NoiseInterpolator -> czy$i -> net.minecraft.world.level.levelgen.NoiseChunk$i
    F:net.minecraft.world.level.levelgen.DensityFunction noiseFiller -> g
    F:double noise000 -> h
    F:double noise001 -> i
    F:double noise100 -> j
    F:double noise101 -> k
    F:double noise010 -> l
    F:double noise011 -> m
    F:double noise110 -> n
    F:double noise111 -> o
    F:double valueXZ00 -> p
    F:double valueXZ10 -> q
    F:double valueXZ01 -> r
    F:double valueXZ11 -> s
    F:double valueZ0 -> t
    F:double valueZ1 -> u
    F:double value -> v
    M:void selectCellYZ(int,int) -> b
    M:void updateForY(double) -> a
    M:void updateForX(double) -> b
    M:void updateForZ(double) -> c
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:void fillArray(double[],net.minecraft.world.level.levelgen.DensityFunction$ContextProvider) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction wrapped() -> k
    M:void swapSlices() -> l
    M:net.minecraft.world.level.levelgen.DensityFunctions$Marker$Type type() -> j
net.minecraft.world.level.levelgen.NoiseGeneratorSettings -> czz -> net.minecraft.world.level.levelgen.GeneratorSettingBase
    F:net.minecraft.world.level.levelgen.NoiseSettings noiseSettings -> j
    F:net.minecraft.world.level.block.state.IBlockData defaultBlock -> k
    F:net.minecraft.world.level.block.state.IBlockData defaultFluid -> l
    F:net.minecraft.world.level.levelgen.NoiseRouter noiseRouter -> m
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource surfaceRule -> n
    F:java.util.List spawnTarget -> o
    F:int seaLevel -> p
    F:boolean disableMobGeneration -> q
    F:boolean aquifersEnabled -> r
    F:boolean oreVeinsEnabled -> s
    F:boolean useLegacyRandomSource -> t
    F:com.mojang.serialization.Codec DIRECT_CODEC -> a
    F:com.mojang.serialization.Codec CODEC -> b
    F:net.minecraft.resources.ResourceKey OVERWORLD -> c
    F:net.minecraft.resources.ResourceKey LARGE_BIOMES -> d
    F:net.minecraft.resources.ResourceKey AMPLIFIED -> e
    F:net.minecraft.resources.ResourceKey NETHER -> f
    F:net.minecraft.resources.ResourceKey END -> g
    F:net.minecraft.resources.ResourceKey CAVES -> h
    F:net.minecraft.resources.ResourceKey FLOATING_ISLANDS -> i
    M:boolean disableMobGeneration() -> a
    M:boolean isAquifersEnabled() -> b
    M:boolean oreVeinsEnabled() -> c
    M:net.minecraft.world.level.levelgen.WorldgenRandom$Algorithm getRandomSource() -> d
    M:net.minecraft.core.Holder register(net.minecraft.core.IRegistry,net.minecraft.resources.ResourceKey,net.minecraft.world.level.levelgen.GeneratorSettingBase) -> a
    M:net.minecraft.core.Holder bootstrap(net.minecraft.core.IRegistry) -> a
    M:net.minecraft.world.level.levelgen.GeneratorSettingBase end() -> o
    M:net.minecraft.world.level.levelgen.GeneratorSettingBase nether() -> p
    M:net.minecraft.world.level.levelgen.GeneratorSettingBase overworld(boolean,boolean) -> a
    M:net.minecraft.world.level.levelgen.GeneratorSettingBase caves() -> q
    M:net.minecraft.world.level.levelgen.GeneratorSettingBase floatingIslands() -> r
    M:net.minecraft.world.level.levelgen.GeneratorSettingBase dummy() -> e
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.NoiseSettings noiseSettings() -> f
    M:net.minecraft.world.level.block.state.IBlockData defaultBlock() -> g
    M:net.minecraft.world.level.block.state.IBlockData defaultFluid() -> h
    M:net.minecraft.world.level.levelgen.NoiseRouter noiseRouter() -> i
    M:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource surfaceRule() -> j
    M:java.util.List spawnTarget() -> k
    M:int seaLevel() -> l
    M:boolean aquifersEnabled() -> m
    M:boolean useLegacyRandomSource() -> n
net.minecraft.world.level.levelgen.NoiseRouter -> daa -> net.minecraft.world.level.levelgen.NoiseRouter
    F:net.minecraft.world.level.levelgen.DensityFunction barrierNoise -> b
    F:net.minecraft.world.level.levelgen.DensityFunction fluidLevelFloodednessNoise -> c
    F:net.minecraft.world.level.levelgen.DensityFunction fluidLevelSpreadNoise -> d
    F:net.minecraft.world.level.levelgen.DensityFunction lavaNoise -> e
    F:net.minecraft.world.level.levelgen.DensityFunction temperature -> f
    F:net.minecraft.world.level.levelgen.DensityFunction vegetation -> g
    F:net.minecraft.world.level.levelgen.DensityFunction continents -> h
    F:net.minecraft.world.level.levelgen.DensityFunction erosion -> i
    F:net.minecraft.world.level.levelgen.DensityFunction depth -> j
    F:net.minecraft.world.level.levelgen.DensityFunction ridges -> k
    F:net.minecraft.world.level.levelgen.DensityFunction initialDensityWithoutJaggedness -> l
    F:net.minecraft.world.level.levelgen.DensityFunction finalDensity -> m
    F:net.minecraft.world.level.levelgen.DensityFunction veinToggle -> n
    F:net.minecraft.world.level.levelgen.DensityFunction veinRidged -> o
    F:net.minecraft.world.level.levelgen.DensityFunction veinGap -> p
    F:com.mojang.serialization.Codec CODEC -> a
    M:com.mojang.serialization.codecs.RecordCodecBuilder field(java.lang.String,java.util.function.Function) -> a
    M:net.minecraft.world.level.levelgen.NoiseRouter mapAll(net.minecraft.world.level.levelgen.DensityFunction$Visitor) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.DensityFunction barrierNoise() -> a
    M:net.minecraft.world.level.levelgen.DensityFunction fluidLevelFloodednessNoise() -> b
    M:net.minecraft.world.level.levelgen.DensityFunction fluidLevelSpreadNoise() -> c
    M:net.minecraft.world.level.levelgen.DensityFunction lavaNoise() -> d
    M:net.minecraft.world.level.levelgen.DensityFunction temperature() -> e
    M:net.minecraft.world.level.levelgen.DensityFunction vegetation() -> f
    M:net.minecraft.world.level.levelgen.DensityFunction continents() -> g
    M:net.minecraft.world.level.levelgen.DensityFunction erosion() -> h
    M:net.minecraft.world.level.levelgen.DensityFunction depth() -> i
    M:net.minecraft.world.level.levelgen.DensityFunction ridges() -> j
    M:net.minecraft.world.level.levelgen.DensityFunction initialDensityWithoutJaggedness() -> k
    M:net.minecraft.world.level.levelgen.DensityFunction finalDensity() -> l
    M:net.minecraft.world.level.levelgen.DensityFunction veinToggle() -> m
    M:net.minecraft.world.level.levelgen.DensityFunction veinRidged() -> n
    M:net.minecraft.world.level.levelgen.DensityFunction veinGap() -> o
net.minecraft.world.level.levelgen.NoiseRouterData -> dab -> net.minecraft.world.level.levelgen.NoiseRouterData
    F:float GLOBAL_OFFSET -> a
    F:float ORE_THICKNESS -> n
    F:double VEININESS_FREQUENCY -> o
    F:double NOODLE_SPACING_AND_STRAIGHTNESS -> p
    F:double SURFACE_DENSITY_THRESHOLD -> q
    F:double CHEESE_NOISE_TARGET -> r
    F:int ISLAND_CHUNK_DISTANCE -> b
    F:long ISLAND_CHUNK_DISTANCE_SQR -> c
    F:net.minecraft.world.level.levelgen.DensityFunction BLENDING_FACTOR -> s
    F:net.minecraft.world.level.levelgen.DensityFunction BLENDING_JAGGEDNESS -> t
    F:net.minecraft.resources.ResourceKey ZERO -> u
    F:net.minecraft.resources.ResourceKey Y -> v
    F:net.minecraft.resources.ResourceKey SHIFT_X -> w
    F:net.minecraft.resources.ResourceKey SHIFT_Z -> x
    F:net.minecraft.resources.ResourceKey BASE_3D_NOISE_OVERWORLD -> y
    F:net.minecraft.resources.ResourceKey BASE_3D_NOISE_NETHER -> z
    F:net.minecraft.resources.ResourceKey CONTINENTS -> d
    F:net.minecraft.resources.ResourceKey EROSION -> e
    F:net.minecraft.resources.ResourceKey RIDGES -> f
    F:net.minecraft.resources.ResourceKey RIDGES_FOLDED -> g
    F:net.minecraft.resources.ResourceKey OFFSET -> h
    F:net.minecraft.resources.ResourceKey FACTOR -> i
    F:net.minecraft.resources.ResourceKey JAGGEDNESS -> j
    F:net.minecraft.resources.ResourceKey DEPTH -> k
    F:net.minecraft.resources.ResourceKey CONTINENTS_LARGE -> l
    F:net.minecraft.resources.ResourceKey EROSION_LARGE -> m
    M:net.minecraft.resources.ResourceKey createKey(java.lang.String) -> a
    M:net.minecraft.core.Holder bootstrap(net.minecraft.core.IRegistry) -> a
    M:void registerTerrainNoises(net.minecraft.core.IRegistry,net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.core.Holder,net.minecraft.core.Holder,net.minecraft.resources.ResourceKey,net.minecraft.resources.ResourceKey,net.minecraft.resources.ResourceKey,net.minecraft.resources.ResourceKey,net.minecraft.resources.ResourceKey,boolean) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction registerAndWrap(net.minecraft.core.IRegistry,net.minecraft.resources.ResourceKey,net.minecraft.world.level.levelgen.DensityFunction) -> a
    M:net.minecraft.core.Holder register(net.minecraft.core.IRegistry,net.minecraft.resources.ResourceKey,net.minecraft.world.level.levelgen.DensityFunction) -> b
    M:net.minecraft.core.Holder getNoise(net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction getFunction(net.minecraft.core.IRegistry,net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction peaksAndValleys(net.minecraft.world.level.levelgen.DensityFunction) -> a
    M:float peaksAndValleys(float) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction spaghettiRoughnessFunction() -> b
    M:net.minecraft.world.level.levelgen.DensityFunction entrances(net.minecraft.core.IRegistry) -> f
    M:net.minecraft.world.level.levelgen.DensityFunction noodle(net.minecraft.core.IRegistry) -> g
    M:net.minecraft.world.level.levelgen.DensityFunction pillars() -> c
    M:net.minecraft.world.level.levelgen.DensityFunction spaghetti2D(net.minecraft.core.IRegistry) -> h
    M:net.minecraft.world.level.levelgen.DensityFunction underground(net.minecraft.core.IRegistry,net.minecraft.world.level.levelgen.DensityFunction) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction postProcess(net.minecraft.world.level.levelgen.DensityFunction) -> b
    M:net.minecraft.world.level.levelgen.NoiseRouter overworld(net.minecraft.core.IRegistry,boolean,boolean) -> a
    M:net.minecraft.world.level.levelgen.NoiseRouter noNewCaves(net.minecraft.core.IRegistry,net.minecraft.world.level.levelgen.DensityFunction) -> b
    M:net.minecraft.world.level.levelgen.DensityFunction slideOverworld(boolean,net.minecraft.world.level.levelgen.DensityFunction) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction slideNetherLike(net.minecraft.core.IRegistry,int,int) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction slideEndLike(net.minecraft.world.level.levelgen.DensityFunction,int,int) -> a
    M:net.minecraft.world.level.levelgen.NoiseRouter nether(net.minecraft.core.IRegistry) -> b
    M:net.minecraft.world.level.levelgen.NoiseRouter caves(net.minecraft.core.IRegistry) -> c
    M:net.minecraft.world.level.levelgen.NoiseRouter floatingIslands(net.minecraft.core.IRegistry) -> d
    M:net.minecraft.world.level.levelgen.DensityFunction slideEnd(net.minecraft.world.level.levelgen.DensityFunction) -> c
    M:net.minecraft.world.level.levelgen.NoiseRouter end(net.minecraft.core.IRegistry) -> e
    M:net.minecraft.world.level.levelgen.NoiseRouter none() -> a
    M:net.minecraft.world.level.levelgen.DensityFunction splineWithBlending(net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.world.level.levelgen.DensityFunction) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction noiseGradientDensity(net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.world.level.levelgen.DensityFunction) -> b
    M:net.minecraft.world.level.levelgen.DensityFunction yLimitedInterpolatable(net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.world.level.levelgen.DensityFunction,int,int,int) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction slide(net.minecraft.world.level.levelgen.DensityFunction,int,int,int,int,double,int,int,double) -> a
net.minecraft.world.level.levelgen.NoiseRouterData$QuantizedSpaghettiRarity -> dab$a -> net.minecraft.world.level.levelgen.NoiseRouterData$a
    M:double getSphaghettiRarity2D(double) -> a
    M:double getSpaghettiRarity3D(double) -> b
net.minecraft.world.level.levelgen.NoiseSettings -> dac -> net.minecraft.world.level.levelgen.NoiseSettings
    F:int minY -> g
    F:int height -> h
    F:int noiseSizeHorizontal -> i
    F:int noiseSizeVertical -> j
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.NoiseSettings OVERWORLD_NOISE_SETTINGS -> b
    F:net.minecraft.world.level.levelgen.NoiseSettings NETHER_NOISE_SETTINGS -> c
    F:net.minecraft.world.level.levelgen.NoiseSettings END_NOISE_SETTINGS -> d
    F:net.minecraft.world.level.levelgen.NoiseSettings CAVES_NOISE_SETTINGS -> e
    F:net.minecraft.world.level.levelgen.NoiseSettings FLOATING_ISLANDS_NOISE_SETTINGS -> f
    M:com.mojang.serialization.DataResult guardY(net.minecraft.world.level.levelgen.NoiseSettings) -> a
    M:net.minecraft.world.level.levelgen.NoiseSettings create(int,int,int,int) -> a
    M:int getCellHeight() -> a
    M:int getCellWidth() -> b
    M:net.minecraft.world.level.levelgen.NoiseSettings clampToHeightAccessor(net.minecraft.world.level.LevelHeightAccessor) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int minY() -> c
    M:int height() -> d
    M:int noiseSizeHorizontal() -> e
    M:int noiseSizeVertical() -> f
net.minecraft.world.level.levelgen.Noises -> dad -> net.minecraft.world.level.levelgen.Noises
    F:net.minecraft.resources.ResourceKey TEMPERATURE -> a
    F:net.minecraft.resources.ResourceKey VEGETATION -> b
    F:net.minecraft.resources.ResourceKey CONTINENTALNESS -> c
    F:net.minecraft.resources.ResourceKey EROSION -> d
    F:net.minecraft.resources.ResourceKey TEMPERATURE_LARGE -> e
    F:net.minecraft.resources.ResourceKey VEGETATION_LARGE -> f
    F:net.minecraft.resources.ResourceKey CONTINENTALNESS_LARGE -> g
    F:net.minecraft.resources.ResourceKey EROSION_LARGE -> h
    F:net.minecraft.resources.ResourceKey RIDGE -> i
    F:net.minecraft.resources.ResourceKey SHIFT -> j
    F:net.minecraft.resources.ResourceKey AQUIFER_BARRIER -> k
    F:net.minecraft.resources.ResourceKey AQUIFER_FLUID_LEVEL_FLOODEDNESS -> l
    F:net.minecraft.resources.ResourceKey AQUIFER_LAVA -> m
    F:net.minecraft.resources.ResourceKey AQUIFER_FLUID_LEVEL_SPREAD -> n
    F:net.minecraft.resources.ResourceKey PILLAR -> o
    F:net.minecraft.resources.ResourceKey PILLAR_RARENESS -> p
    F:net.minecraft.resources.ResourceKey PILLAR_THICKNESS -> q
    F:net.minecraft.resources.ResourceKey SPAGHETTI_2D -> r
    F:net.minecraft.resources.ResourceKey SPAGHETTI_2D_ELEVATION -> s
    F:net.minecraft.resources.ResourceKey SPAGHETTI_2D_MODULATOR -> t
    F:net.minecraft.resources.ResourceKey SPAGHETTI_2D_THICKNESS -> u
    F:net.minecraft.resources.ResourceKey SPAGHETTI_3D_1 -> v
    F:net.minecraft.resources.ResourceKey SPAGHETTI_3D_2 -> w
    F:net.minecraft.resources.ResourceKey SPAGHETTI_3D_RARITY -> x
    F:net.minecraft.resources.ResourceKey SPAGHETTI_3D_THICKNESS -> y
    F:net.minecraft.resources.ResourceKey SPAGHETTI_ROUGHNESS -> z
    F:net.minecraft.resources.ResourceKey PACKED_ICE -> aa
    F:net.minecraft.resources.ResourceKey ICE -> ab
    F:net.minecraft.resources.ResourceKey SOUL_SAND_LAYER -> ac
    F:net.minecraft.resources.ResourceKey GRAVEL_LAYER -> ad
    F:net.minecraft.resources.ResourceKey PATCH -> ae
    F:net.minecraft.resources.ResourceKey NETHERRACK -> af
    F:net.minecraft.resources.ResourceKey NETHER_WART -> ag
    F:net.minecraft.resources.ResourceKey NETHER_STATE_SELECTOR -> ah
    M:net.minecraft.resources.ResourceKey createKey(java.lang.String) -> a
    M:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal instantiate(net.minecraft.core.IRegistry,net.minecraft.world.level.levelgen.PositionalRandomFactory,net.minecraft.resources.ResourceKey) -> a
net.minecraft.world.level.levelgen.OreVeinifier -> dae -> net.minecraft.world.level.levelgen.OreVeinifier
    F:float VEININESS_THRESHOLD -> a
    F:int EDGE_ROUNDOFF_BEGIN -> b
    F:double MAX_EDGE_ROUNDOFF -> c
    F:float VEIN_SOLIDNESS -> d
    F:float MIN_RICHNESS -> e
    F:float MAX_RICHNESS -> f
    F:float MAX_RICHNESS_THRESHOLD -> g
    F:float CHANCE_OF_RAW_ORE_BLOCK -> h
    F:float SKIP_ORE_IF_GAP_NOISE_IS_BELOW -> i
    M:net.minecraft.world.level.levelgen.NoiseChunk$BlockStateFiller create(net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.world.level.levelgen.DensityFunction,net.minecraft.world.level.levelgen.PositionalRandomFactory) -> a
net.minecraft.world.level.levelgen.OreVeinifier$VeinType -> dae$a -> net.minecraft.world.level.levelgen.OreVeinifier$a
    F:net.minecraft.world.level.levelgen.OreVeinifier$VeinType COPPER -> a
    F:net.minecraft.world.level.levelgen.OreVeinifier$VeinType IRON -> b
    F:net.minecraft.world.level.block.state.IBlockData ore -> e
    F:net.minecraft.world.level.block.state.IBlockData rawOreBlock -> f
    F:net.minecraft.world.level.block.state.IBlockData filler -> g
    F:int minY -> c
    F:int maxY -> d
net.minecraft.world.level.levelgen.PatrolSpawner -> daf -> net.minecraft.world.level.levelgen.MobSpawnerPatrol
    F:int nextTick -> a
    M:int tick(net.minecraft.server.level.WorldServer,boolean,boolean) -> a
    M:boolean spawnPatrolMember(net.minecraft.server.level.WorldServer,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource,boolean) -> a
net.minecraft.world.level.levelgen.PhantomSpawner -> dag -> net.minecraft.world.level.levelgen.MobSpawnerPhantom
    F:int nextTick -> a
    M:int tick(net.minecraft.server.level.WorldServer,boolean,boolean) -> a
net.minecraft.world.level.levelgen.PositionalRandomFactory -> dah -> net.minecraft.world.level.levelgen.PositionalRandomFactory
    M:net.minecraft.util.RandomSource at(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.util.RandomSource fromHashOf(net.minecraft.resources.MinecraftKey) -> a
net.minecraft.world.level.levelgen.RandomState -> dai -> net.minecraft.world.level.levelgen.RandomState
    F:net.minecraft.world.level.levelgen.PositionalRandomFactory random -> a
    F:long legacyLevelSeed -> b
    F:net.minecraft.core.IRegistry noises -> c
    F:net.minecraft.world.level.levelgen.NoiseRouter router -> d
    F:net.minecraft.world.level.biome.Climate$Sampler sampler -> e
    F:net.minecraft.world.level.levelgen.SurfaceSystem surfaceSystem -> f
    F:net.minecraft.world.level.levelgen.PositionalRandomFactory aquiferRandom -> g
    F:net.minecraft.world.level.levelgen.PositionalRandomFactory oreRandom -> h
    F:java.util.Map noiseIntances -> i
    F:java.util.Map positionalRandoms -> j
    M:net.minecraft.world.level.levelgen.RandomState create(net.minecraft.core.IRegistryCustom,net.minecraft.resources.ResourceKey,long) -> a
    M:net.minecraft.world.level.levelgen.RandomState create(net.minecraft.world.level.levelgen.GeneratorSettingBase,net.minecraft.core.IRegistry,long) -> a
    M:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal getOrCreateNoise(net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.world.level.levelgen.PositionalRandomFactory getOrCreateRandomFactory(net.minecraft.resources.MinecraftKey) -> a
    M:long legacyLevelSeed() -> a
    M:net.minecraft.world.level.levelgen.NoiseRouter router() -> b
    M:net.minecraft.world.level.biome.Climate$Sampler sampler() -> c
    M:net.minecraft.world.level.levelgen.SurfaceSystem surfaceSystem() -> d
    M:net.minecraft.world.level.levelgen.PositionalRandomFactory aquiferRandom() -> e
    M:net.minecraft.world.level.levelgen.PositionalRandomFactory oreRandom() -> f
net.minecraft.world.level.levelgen.RandomState$1NoiseWiringHelper -> dai$a -> net.minecraft.world.level.levelgen.RandomState$a
    F:java.util.Map wrapped -> d
    M:net.minecraft.util.RandomSource newLegacyInstance(long) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction$NoiseHolder visitNoise(net.minecraft.world.level.levelgen.DensityFunction$NoiseHolder) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction wrapNew(net.minecraft.world.level.levelgen.DensityFunction) -> a
    M:net.minecraft.world.level.levelgen.DensityFunction apply(net.minecraft.world.level.levelgen.DensityFunction) -> apply
net.minecraft.world.level.levelgen.RandomSupport -> daj -> net.minecraft.world.level.levelgen.RandomSupport
    F:long GOLDEN_RATIO_64 -> a
    F:long SILVER_RATIO_64 -> b
    F:java.util.concurrent.atomic.AtomicLong SEED_UNIQUIFIER -> c
    M:long mixStafford13(long) -> a
    M:net.minecraft.world.level.levelgen.RandomSupport$Seed128bit upgradeSeedTo128bit(long) -> b
    M:long generateUniqueSeed() -> a
net.minecraft.world.level.levelgen.RandomSupport$Seed128bit -> daj$a -> net.minecraft.world.level.levelgen.RandomSupport$a
    F:long seedLo -> a
    F:long seedHi -> b
    M:boolean equals(java.lang.Object) -> equals
    M:long seedLo() -> a
    M:long seedHi() -> b
net.minecraft.world.level.levelgen.SingleThreadedRandomSource -> dak -> net.minecraft.world.level.levelgen.SingleThreadedRandomSource
    F:int MODULUS_BITS -> d
    F:long MODULUS_MASK -> e
    F:long MULTIPLIER -> f
    F:long INCREMENT -> g
    F:long seed -> h
    F:net.minecraft.world.level.levelgen.MarsagliaPolarGaussian gaussianSource -> i
    M:net.minecraft.util.RandomSource fork() -> d
    M:net.minecraft.world.level.levelgen.PositionalRandomFactory forkPositional() -> e
    M:void setSeed(long) -> b
    M:int next(int) -> c
    M:double nextGaussian() -> k
net.minecraft.world.level.levelgen.SurfaceRules -> dal -> net.minecraft.world.level.levelgen.SurfaceRules
    F:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource ON_FLOOR -> a
    F:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource UNDER_FLOOR -> b
    F:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource DEEP_UNDER_FLOOR -> c
    F:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource VERY_DEEP_UNDER_FLOOR -> d
    F:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource ON_CEILING -> e
    F:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource UNDER_CEILING -> f
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource stoneDepthCheck(int,boolean,net.minecraft.world.level.levelgen.placement.CaveSurface) -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource stoneDepthCheck(int,boolean,int,net.minecraft.world.level.levelgen.placement.CaveSurface) -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource not(net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource) -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource yBlockCheck(net.minecraft.world.level.levelgen.VerticalAnchor,int) -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource yStartCheck(net.minecraft.world.level.levelgen.VerticalAnchor,int) -> b
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource waterBlockCheck(int,int) -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource waterStartCheck(int,int) -> b
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource isBiome(net.minecraft.resources.ResourceKey[]) -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$BiomeConditionSource isBiome(java.util.List) -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource noiseCondition(net.minecraft.resources.ResourceKey,double) -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource noiseCondition(net.minecraft.resources.ResourceKey,double,double) -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource verticalGradient(java.lang.String,net.minecraft.world.level.levelgen.VerticalAnchor,net.minecraft.world.level.levelgen.VerticalAnchor) -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource steep() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource hole() -> b
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource abovePreliminarySurface() -> c
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource temperature() -> d
    M:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource ifTrue(net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource,net.minecraft.world.level.levelgen.SurfaceRules$RuleSource) -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource sequence(net.minecraft.world.level.levelgen.SurfaceRules$RuleSource[]) -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource state(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource bandlands() -> e
    M:com.mojang.serialization.Codec register(net.minecraft.core.IRegistry,java.lang.String,net.minecraft.util.KeyDispatchDataCodec) -> a
net.minecraft.world.level.levelgen.SurfaceRules$AbovePreliminarySurface -> dal$a -> net.minecraft.world.level.levelgen.SurfaceRules$a
    F:net.minecraft.world.level.levelgen.SurfaceRules$AbovePreliminarySurface INSTANCE -> a
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> c
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$Condition apply(net.minecraft.world.level.levelgen.SurfaceRules$Context) -> a
    M:java.lang.Object apply(java.lang.Object) -> apply
net.minecraft.world.level.levelgen.SurfaceRules$Bandlands -> dal$b -> net.minecraft.world.level.levelgen.SurfaceRules$b
    F:net.minecraft.world.level.levelgen.SurfaceRules$Bandlands INSTANCE -> a
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> c
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$SurfaceRule apply(net.minecraft.world.level.levelgen.SurfaceRules$Context) -> a
    M:java.lang.Object apply(java.lang.Object) -> apply
net.minecraft.world.level.levelgen.SurfaceRules$BiomeConditionSource -> dal$c -> net.minecraft.world.level.levelgen.SurfaceRules$c
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> a
    F:java.util.List biomes -> c
    F:java.util.function.Predicate biomeNameTest -> d
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$Condition apply(net.minecraft.world.level.levelgen.SurfaceRules$Context) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.Object apply(java.lang.Object) -> apply
net.minecraft.world.level.levelgen.SurfaceRules$BiomeConditionSource$1BiomeCondition -> dal$c$a -> net.minecraft.world.level.levelgen.SurfaceRules$c$a
    M:boolean compute() -> a
net.minecraft.world.level.levelgen.SurfaceRules$BlockRuleSource -> dal$d -> net.minecraft.world.level.levelgen.SurfaceRules$d
    F:net.minecraft.world.level.block.state.IBlockData resultState -> a
    F:net.minecraft.world.level.levelgen.SurfaceRules$StateRule rule -> c
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> d
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$SurfaceRule apply(net.minecraft.world.level.levelgen.SurfaceRules$Context) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.block.state.IBlockData resultState() -> b
    M:net.minecraft.world.level.levelgen.SurfaceRules$StateRule rule() -> c
    M:java.lang.Object apply(java.lang.Object) -> apply
net.minecraft.world.level.levelgen.SurfaceRules$Condition -> dal$e -> net.minecraft.world.level.levelgen.SurfaceRules$e
net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource -> dal$f -> net.minecraft.world.level.levelgen.SurfaceRules$f
    F:com.mojang.serialization.Codec CODEC -> b
    M:com.mojang.serialization.Codec bootstrap(net.minecraft.core.IRegistry) -> a
net.minecraft.world.level.levelgen.SurfaceRules$Context -> dal$g -> net.minecraft.world.level.levelgen.SurfaceRules$g
    F:int HOW_FAR_BELOW_PRELIMINARY_SURFACE_LEVEL_TO_BUILD_SURFACE -> a
    F:int SURFACE_CELL_BITS -> b
    F:int SURFACE_CELL_SIZE -> c
    F:int SURFACE_CELL_MASK -> d
    F:net.minecraft.world.level.levelgen.SurfaceSystem system -> e
    F:net.minecraft.world.level.levelgen.SurfaceRules$Condition temperature -> f
    F:net.minecraft.world.level.levelgen.SurfaceRules$Condition steep -> g
    F:net.minecraft.world.level.levelgen.SurfaceRules$Condition hole -> h
    F:net.minecraft.world.level.levelgen.SurfaceRules$Condition abovePreliminarySurface -> i
    F:net.minecraft.world.level.levelgen.RandomState randomState -> j
    F:net.minecraft.world.level.chunk.IChunkAccess chunk -> k
    F:net.minecraft.world.level.levelgen.NoiseChunk noiseChunk -> l
    F:java.util.function.Function biomeGetter -> m
    F:net.minecraft.world.level.levelgen.WorldGenerationContext context -> n
    F:long lastPreliminarySurfaceCellOrigin -> o
    F:long lastUpdateXZ -> q
    F:int blockX -> r
    F:int blockZ -> s
    F:int surfaceDepth -> t
    F:long lastSurfaceDepth2Update -> u
    F:double surfaceSecondary -> v
    F:long lastMinSurfaceLevelUpdate -> w
    F:int minSurfaceLevel -> x
    F:long lastUpdateY -> y
    F:net.minecraft.core.BlockPosition$MutableBlockPosition pos -> z
    M:void updateXZ(int,int) -> a
    M:void updateY(int,int,int,int,int,int) -> a
    M:double getSurfaceSecondary() -> a
    M:int blockCoordToSurfaceCell(int) -> a
    M:int surfaceCellToBlockCoord(int) -> b
    M:int getMinSurfaceLevel() -> b
net.minecraft.world.level.levelgen.SurfaceRules$Context$AbovePreliminarySurfaceCondition -> dal$g$a -> net.minecraft.world.level.levelgen.SurfaceRules$g$a
    M:boolean test() -> b
net.minecraft.world.level.levelgen.SurfaceRules$Context$HoleCondition -> dal$g$b -> net.minecraft.world.level.levelgen.SurfaceRules$g$b
    M:boolean compute() -> a
net.minecraft.world.level.levelgen.SurfaceRules$Context$SteepMaterialCondition -> dal$g$c -> net.minecraft.world.level.levelgen.SurfaceRules$g$c
    M:boolean compute() -> a
net.minecraft.world.level.levelgen.SurfaceRules$Context$TemperatureHelperCondition -> dal$g$d -> net.minecraft.world.level.levelgen.SurfaceRules$g$d
    M:boolean compute() -> a
net.minecraft.world.level.levelgen.SurfaceRules$Hole -> dal$h -> net.minecraft.world.level.levelgen.SurfaceRules$h
    F:net.minecraft.world.level.levelgen.SurfaceRules$Hole INSTANCE -> a
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> c
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$Condition apply(net.minecraft.world.level.levelgen.SurfaceRules$Context) -> a
    M:java.lang.Object apply(java.lang.Object) -> apply
net.minecraft.world.level.levelgen.SurfaceRules$LazyCondition -> dal$i -> net.minecraft.world.level.levelgen.SurfaceRules$i
    F:net.minecraft.world.level.levelgen.SurfaceRules$Context context -> c
    F:long lastUpdate -> a
    F:java.lang.Boolean result -> d
    M:boolean test() -> b
net.minecraft.world.level.levelgen.SurfaceRules$LazyXZCondition -> dal$j -> net.minecraft.world.level.levelgen.SurfaceRules$j
    M:long getContextLastUpdate() -> c
net.minecraft.world.level.levelgen.SurfaceRules$LazyYCondition -> dal$k -> net.minecraft.world.level.levelgen.SurfaceRules$k
    M:long getContextLastUpdate() -> c
net.minecraft.world.level.levelgen.SurfaceRules$NoiseThresholdConditionSource -> dal$l -> net.minecraft.world.level.levelgen.SurfaceRules$l
    F:net.minecraft.resources.ResourceKey noise -> a
    F:double minThreshold -> c
    F:double maxThreshold -> d
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> e
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$Condition apply(net.minecraft.world.level.levelgen.SurfaceRules$Context) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.resources.ResourceKey noise() -> b
    M:double minThreshold() -> c
    M:double maxThreshold() -> d
    M:java.lang.Object apply(java.lang.Object) -> apply
net.minecraft.world.level.levelgen.SurfaceRules$NoiseThresholdConditionSource$1NoiseThresholdCondition -> dal$l$a -> net.minecraft.world.level.levelgen.SurfaceRules$l$a
    M:boolean compute() -> a
net.minecraft.world.level.levelgen.SurfaceRules$NotCondition -> dal$m -> net.minecraft.world.level.levelgen.SurfaceRules$m
    F:net.minecraft.world.level.levelgen.SurfaceRules$Condition target -> a
    M:boolean test() -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.SurfaceRules$Condition target() -> a
net.minecraft.world.level.levelgen.SurfaceRules$NotConditionSource -> dal$n -> net.minecraft.world.level.levelgen.SurfaceRules$n
    F:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource target -> a
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> c
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$Condition apply(net.minecraft.world.level.levelgen.SurfaceRules$Context) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource target() -> b
    M:java.lang.Object apply(java.lang.Object) -> apply
net.minecraft.world.level.levelgen.SurfaceRules$RuleSource -> dal$o -> net.minecraft.world.level.levelgen.SurfaceRules$o
    F:com.mojang.serialization.Codec CODEC -> b
    M:com.mojang.serialization.Codec bootstrap(net.minecraft.core.IRegistry) -> a
net.minecraft.world.level.levelgen.SurfaceRules$SequenceRule -> dal$p -> net.minecraft.world.level.levelgen.SurfaceRules$p
    F:java.util.List rules -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.List rules() -> a
net.minecraft.world.level.levelgen.SurfaceRules$SequenceRuleSource -> dal$q -> net.minecraft.world.level.levelgen.SurfaceRules$q
    F:java.util.List sequence -> a
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> c
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$SurfaceRule apply(net.minecraft.world.level.levelgen.SurfaceRules$Context) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.List sequence() -> b
    M:java.lang.Object apply(java.lang.Object) -> apply
net.minecraft.world.level.levelgen.SurfaceRules$StateRule -> dal$r -> net.minecraft.world.level.levelgen.SurfaceRules$r
    F:net.minecraft.world.level.block.state.IBlockData state -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.block.state.IBlockData state() -> a
net.minecraft.world.level.levelgen.SurfaceRules$Steep -> dal$s -> net.minecraft.world.level.levelgen.SurfaceRules$s
    F:net.minecraft.world.level.levelgen.SurfaceRules$Steep INSTANCE -> a
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> c
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$Condition apply(net.minecraft.world.level.levelgen.SurfaceRules$Context) -> a
    M:java.lang.Object apply(java.lang.Object) -> apply
net.minecraft.world.level.levelgen.SurfaceRules$StoneDepthCheck -> dal$t -> net.minecraft.world.level.levelgen.SurfaceRules$t
    F:int offset -> a
    F:boolean addSurfaceDepth -> c
    F:int secondaryDepthRange -> d
    F:net.minecraft.world.level.levelgen.placement.CaveSurface surfaceType -> e
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> f
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$Condition apply(net.minecraft.world.level.levelgen.SurfaceRules$Context) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int offset() -> b
    M:boolean addSurfaceDepth() -> c
    M:int secondaryDepthRange() -> d
    M:net.minecraft.world.level.levelgen.placement.CaveSurface surfaceType() -> e
    M:java.lang.Object apply(java.lang.Object) -> apply
net.minecraft.world.level.levelgen.SurfaceRules$StoneDepthCheck$1StoneDepthCondition -> dal$t$a -> net.minecraft.world.level.levelgen.SurfaceRules$t$a
    M:boolean compute() -> a
net.minecraft.world.level.levelgen.SurfaceRules$SurfaceRule -> dal$u -> net.minecraft.world.level.levelgen.SurfaceRules$u
net.minecraft.world.level.levelgen.SurfaceRules$Temperature -> dal$v -> net.minecraft.world.level.levelgen.SurfaceRules$v
    F:net.minecraft.world.level.levelgen.SurfaceRules$Temperature INSTANCE -> a
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> c
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$Condition apply(net.minecraft.world.level.levelgen.SurfaceRules$Context) -> a
    M:java.lang.Object apply(java.lang.Object) -> apply
net.minecraft.world.level.levelgen.SurfaceRules$TestRule -> dal$w -> net.minecraft.world.level.levelgen.SurfaceRules$w
    F:net.minecraft.world.level.levelgen.SurfaceRules$Condition condition -> a
    F:net.minecraft.world.level.levelgen.SurfaceRules$SurfaceRule followup -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.SurfaceRules$Condition condition() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$SurfaceRule followup() -> b
net.minecraft.world.level.levelgen.SurfaceRules$TestRuleSource -> dal$x -> net.minecraft.world.level.levelgen.SurfaceRules$x
    F:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource ifTrue -> a
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource thenRun -> c
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> d
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$SurfaceRule apply(net.minecraft.world.level.levelgen.SurfaceRules$Context) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.SurfaceRules$ConditionSource ifTrue() -> b
    M:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource thenRun() -> c
    M:java.lang.Object apply(java.lang.Object) -> apply
net.minecraft.world.level.levelgen.SurfaceRules$VerticalGradientConditionSource -> dal$y -> net.minecraft.world.level.levelgen.SurfaceRules$y
    F:net.minecraft.resources.MinecraftKey randomName -> a
    F:net.minecraft.world.level.levelgen.VerticalAnchor trueAtAndBelow -> c
    F:net.minecraft.world.level.levelgen.VerticalAnchor falseAtAndAbove -> d
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> e
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$Condition apply(net.minecraft.world.level.levelgen.SurfaceRules$Context) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.resources.MinecraftKey randomName() -> b
    M:net.minecraft.world.level.levelgen.VerticalAnchor trueAtAndBelow() -> c
    M:net.minecraft.world.level.levelgen.VerticalAnchor falseAtAndAbove() -> d
    M:java.lang.Object apply(java.lang.Object) -> apply
net.minecraft.world.level.levelgen.SurfaceRules$VerticalGradientConditionSource$1VerticalGradientCondition -> dal$y$a -> net.minecraft.world.level.levelgen.SurfaceRules$y$a
    M:boolean compute() -> a
net.minecraft.world.level.levelgen.SurfaceRules$WaterConditionSource -> dal$z -> net.minecraft.world.level.levelgen.SurfaceRules$z
    F:int offset -> a
    F:int surfaceDepthMultiplier -> c
    F:boolean addStoneDepth -> d
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> e
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$Condition apply(net.minecraft.world.level.levelgen.SurfaceRules$Context) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int offset() -> b
    M:int surfaceDepthMultiplier() -> c
    M:boolean addStoneDepth() -> d
    M:java.lang.Object apply(java.lang.Object) -> apply
net.minecraft.world.level.levelgen.SurfaceRules$WaterConditionSource$1WaterCondition -> dal$z$a -> net.minecraft.world.level.levelgen.SurfaceRules$z$a
    M:boolean compute() -> a
net.minecraft.world.level.levelgen.SurfaceRules$YConditionSource -> dal$aa -> net.minecraft.world.level.levelgen.SurfaceRules$aa
    F:net.minecraft.world.level.levelgen.VerticalAnchor anchor -> a
    F:int surfaceDepthMultiplier -> c
    F:boolean addStoneDepth -> d
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> e
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> a
    M:net.minecraft.world.level.levelgen.SurfaceRules$Condition apply(net.minecraft.world.level.levelgen.SurfaceRules$Context) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.VerticalAnchor anchor() -> b
    M:int surfaceDepthMultiplier() -> c
    M:boolean addStoneDepth() -> d
    M:java.lang.Object apply(java.lang.Object) -> apply
net.minecraft.world.level.levelgen.SurfaceRules$YConditionSource$1YCondition -> dal$aa$a -> net.minecraft.world.level.levelgen.SurfaceRules$aa$a
    M:boolean compute() -> a
net.minecraft.world.level.levelgen.SurfaceSystem -> dam -> net.minecraft.world.level.levelgen.SurfaceSystem
    F:net.minecraft.world.level.block.state.IBlockData WHITE_TERRACOTTA -> a
    F:net.minecraft.world.level.block.state.IBlockData ORANGE_TERRACOTTA -> b
    F:net.minecraft.world.level.block.state.IBlockData TERRACOTTA -> c
    F:net.minecraft.world.level.block.state.IBlockData YELLOW_TERRACOTTA -> d
    F:net.minecraft.world.level.block.state.IBlockData BROWN_TERRACOTTA -> e
    F:net.minecraft.world.level.block.state.IBlockData RED_TERRACOTTA -> f
    F:net.minecraft.world.level.block.state.IBlockData LIGHT_GRAY_TERRACOTTA -> g
    F:net.minecraft.world.level.block.state.IBlockData PACKED_ICE -> h
    F:net.minecraft.world.level.block.state.IBlockData SNOW_BLOCK -> i
    F:net.minecraft.world.level.block.state.IBlockData defaultBlock -> j
    F:int seaLevel -> k
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal clayBandsOffsetNoise -> m
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal badlandsPillarNoise -> n
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal badlandsPillarRoofNoise -> o
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal badlandsSurfaceNoise -> p
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal icebergPillarNoise -> q
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal icebergPillarRoofNoise -> r
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal icebergSurfaceNoise -> s
    F:net.minecraft.world.level.levelgen.PositionalRandomFactory noiseRandom -> t
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal surfaceNoise -> u
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal surfaceSecondaryNoise -> v
    M:void buildSurface(net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.biome.BiomeManager,net.minecraft.core.IRegistry,boolean,net.minecraft.world.level.levelgen.WorldGenerationContext,net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.world.level.levelgen.NoiseChunk,net.minecraft.world.level.levelgen.SurfaceRules$RuleSource) -> a
    M:int getSurfaceDepth(int,int) -> a
    M:double getSurfaceSecondary(int,int) -> b
    M:boolean isStone(net.minecraft.world.level.block.state.IBlockData) -> a
    M:java.util.Optional topMaterial(net.minecraft.world.level.levelgen.SurfaceRules$RuleSource,net.minecraft.world.level.levelgen.carver.CarvingContext,java.util.function.Function,net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.world.level.levelgen.NoiseChunk,net.minecraft.core.BlockPosition,boolean) -> a
    M:void erodedBadlandsExtension(net.minecraft.world.level.chunk.BlockColumn,int,int,int,net.minecraft.world.level.LevelHeightAccessor) -> a
    M:void frozenOceanExtension(int,net.minecraft.world.level.biome.BiomeBase,net.minecraft.world.level.chunk.BlockColumn,net.minecraft.core.BlockPosition$MutableBlockPosition,int,int,int) -> a
    M:void makeBands(net.minecraft.util.RandomSource,net.minecraft.world.level.block.state.BlockState[],int,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData getBand(int,int,int) -> a
    M:net.minecraft.world.level.block.state.IBlockData getBlock(int) -> a
    M:void setBlock(int,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.levelgen.ThreadSafeLegacyRandomSource -> dan -> net.minecraft.world.level.levelgen.ThreadSafeLegacyRandomSource
    F:int MODULUS_BITS -> d
    F:long MODULUS_MASK -> e
    F:long MULTIPLIER -> f
    F:long INCREMENT -> g
    F:java.util.concurrent.atomic.AtomicLong seed -> h
    F:net.minecraft.world.level.levelgen.MarsagliaPolarGaussian gaussianSource -> i
    M:net.minecraft.util.RandomSource fork() -> d
    M:net.minecraft.world.level.levelgen.PositionalRandomFactory forkPositional() -> e
    M:void setSeed(long) -> b
    M:int next(int) -> c
    M:double nextGaussian() -> k
net.minecraft.world.level.levelgen.VerticalAnchor -> dao -> net.minecraft.world.level.levelgen.VerticalAnchor
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.VerticalAnchor BOTTOM -> b
    F:net.minecraft.world.level.levelgen.VerticalAnchor TOP -> c
    M:net.minecraft.world.level.levelgen.VerticalAnchor absolute(int) -> a
    M:net.minecraft.world.level.levelgen.VerticalAnchor aboveBottom(int) -> b
    M:net.minecraft.world.level.levelgen.VerticalAnchor belowTop(int) -> c
    M:net.minecraft.world.level.levelgen.VerticalAnchor bottom() -> a
    M:net.minecraft.world.level.levelgen.VerticalAnchor top() -> b
    M:net.minecraft.world.level.levelgen.VerticalAnchor merge(com.mojang.datafixers.util.Either) -> a
    M:com.mojang.datafixers.util.Either split(net.minecraft.world.level.levelgen.VerticalAnchor) -> a
net.minecraft.world.level.levelgen.VerticalAnchor$AboveBottom -> dao$a -> net.minecraft.world.level.levelgen.VerticalAnchor$a
    F:int offset -> e
    F:com.mojang.serialization.Codec CODEC -> d
    M:int resolveY(net.minecraft.world.level.levelgen.WorldGenerationContext) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int offset() -> c
net.minecraft.world.level.levelgen.VerticalAnchor$Absolute -> dao$b -> net.minecraft.world.level.levelgen.VerticalAnchor$b
    F:int y -> e
    F:com.mojang.serialization.Codec CODEC -> d
    M:int resolveY(net.minecraft.world.level.levelgen.WorldGenerationContext) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int y() -> c
net.minecraft.world.level.levelgen.VerticalAnchor$BelowTop -> dao$c -> net.minecraft.world.level.levelgen.VerticalAnchor$c
    F:int offset -> e
    F:com.mojang.serialization.Codec CODEC -> d
    M:int resolveY(net.minecraft.world.level.levelgen.WorldGenerationContext) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int offset() -> c
net.minecraft.world.level.levelgen.WorldGenSettings -> dap -> net.minecraft.world.level.levelgen.GeneratorSettings
    F:com.mojang.serialization.Codec CODEC -> a
    F:long seed -> b
    F:boolean generateStructures -> c
    F:boolean generateBonusChest -> d
    F:net.minecraft.core.IRegistry dimensions -> e
    F:java.util.Optional legacyCustomOptions -> f
    M:com.mojang.serialization.DataResult guardExperimental() -> m
    M:boolean stable() -> n
    M:long seed() -> a
    M:boolean generateStructures() -> b
    M:boolean generateBonusChest() -> c
    M:net.minecraft.world.level.levelgen.GeneratorSettings replaceOverworldGenerator(net.minecraft.core.IRegistryCustom,net.minecraft.world.level.levelgen.GeneratorSettings,net.minecraft.world.level.chunk.ChunkGenerator) -> a
    M:net.minecraft.core.IRegistry withOverworld(net.minecraft.core.IRegistry,net.minecraft.core.IRegistry,net.minecraft.world.level.chunk.ChunkGenerator) -> a
    M:net.minecraft.core.IRegistry withOverworld(net.minecraft.core.IRegistry,net.minecraft.core.Holder,net.minecraft.world.level.chunk.ChunkGenerator) -> a
    M:net.minecraft.core.IRegistry dimensions() -> d
    M:net.minecraft.world.level.chunk.ChunkGenerator overworld() -> e
    M:com.google.common.collect.ImmutableSet levels() -> f
    M:net.minecraft.resources.ResourceKey levelStemToLevel(net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.resources.ResourceKey levelToLevelStem(net.minecraft.resources.ResourceKey) -> b
    M:boolean isDebug() -> g
    M:boolean isFlatWorld() -> h
    M:boolean isOldCustomizedWorld() -> i
    M:net.minecraft.world.level.levelgen.GeneratorSettings withBonusChest() -> j
    M:net.minecraft.world.level.levelgen.GeneratorSettings withStructuresToggled() -> k
    M:net.minecraft.world.level.levelgen.GeneratorSettings withBonusChestToggled() -> l
    M:net.minecraft.world.level.levelgen.GeneratorSettings withSeed(boolean,java.util.OptionalLong) -> a
    M:java.util.OptionalLong parseSeed(java.lang.String) -> a
net.minecraft.world.level.levelgen.WorldGenerationContext -> daq -> net.minecraft.world.level.levelgen.WorldGenerationContext
    F:int minY -> a
    F:int height -> b
    M:int getMinGenY() -> a
    M:int getGenDepth() -> b
net.minecraft.world.level.levelgen.WorldgenRandom -> dar -> net.minecraft.world.level.levelgen.SeededRandom
    F:net.minecraft.util.RandomSource randomSource -> d
    F:int count -> e
    M:int getCount() -> l
    M:net.minecraft.util.RandomSource fork() -> d
    M:net.minecraft.world.level.levelgen.PositionalRandomFactory forkPositional() -> e
    M:int next(int) -> c
    M:void setSeed(long) -> b
    M:long setDecorationSeed(long,int,int) -> a
    M:void setFeatureSeed(long,int,int) -> b
    M:void setLargeFeatureSeed(long,int,int) -> c
    M:void setLargeFeatureWithSalt(long,int,int,int) -> a
    M:net.minecraft.util.RandomSource seedSlimeChunk(int,int,long,long) -> a
net.minecraft.world.level.levelgen.WorldgenRandom$Algorithm -> dar$a -> net.minecraft.world.level.levelgen.SeededRandom$a
    F:net.minecraft.world.level.levelgen.WorldgenRandom$Algorithm LEGACY -> a
    F:net.minecraft.world.level.levelgen.WorldgenRandom$Algorithm XOROSHIRO -> b
    F:java.util.function.LongFunction constructor -> c
    M:net.minecraft.util.RandomSource newInstance(long) -> a
net.minecraft.world.level.levelgen.Xoroshiro128PlusPlus -> das -> net.minecraft.world.level.levelgen.Xoroshiro128PlusPlus
    F:long seedLo -> a
    F:long seedHi -> b
    M:long nextLong() -> a
net.minecraft.world.level.levelgen.XoroshiroRandomSource -> dat -> net.minecraft.world.level.levelgen.XoroshiroRandomSource
    F:float FLOAT_UNIT -> b
    F:double DOUBLE_UNIT -> c
    F:net.minecraft.world.level.levelgen.Xoroshiro128PlusPlus randomNumberGenerator -> d
    F:net.minecraft.world.level.levelgen.MarsagliaPolarGaussian gaussianSource -> e
    M:net.minecraft.util.RandomSource fork() -> d
    M:net.minecraft.world.level.levelgen.PositionalRandomFactory forkPositional() -> e
    M:void setSeed(long) -> b
    M:int nextInt() -> f
    M:int nextInt(int) -> a
    M:long nextLong() -> g
    M:boolean nextBoolean() -> h
    M:float nextFloat() -> i
    M:double nextDouble() -> j
    M:double nextGaussian() -> k
    M:void consumeCount(int) -> b
    M:long nextBits(int) -> c
net.minecraft.world.level.levelgen.XoroshiroRandomSource$XoroshiroPositionalRandomFactory -> dat$a -> net.minecraft.world.level.levelgen.XoroshiroRandomSource$a
    F:com.google.common.hash.HashFunction MD5_128 -> a
    F:long seedLo -> b
    F:long seedHi -> c
    M:net.minecraft.util.RandomSource at(int,int,int) -> a
    M:net.minecraft.util.RandomSource fromHashOf(java.lang.String) -> a
    M:void parityConfigString(java.lang.StringBuilder) -> a
net.minecraft.world.level.levelgen.blending.Blender -> dau -> net.minecraft.world.level.levelgen.blending.Blender
    F:net.minecraft.world.level.levelgen.blending.Blender EMPTY -> a
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal SHIFT_NOISE -> b
    F:int HEIGHT_BLENDING_RANGE_CELLS -> c
    F:int HEIGHT_BLENDING_RANGE_CHUNKS -> d
    F:int DENSITY_BLENDING_RANGE_CELLS -> e
    F:int DENSITY_BLENDING_RANGE_CHUNKS -> f
    F:double OLD_CHUNK_XZ_RADIUS -> g
    F:it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap heightAndBiomeBlendingData -> h
    F:it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap densityBlendingData -> i
    M:net.minecraft.world.level.levelgen.blending.Blender empty() -> a
    M:net.minecraft.world.level.levelgen.blending.Blender of(net.minecraft.server.level.RegionLimitedWorldAccess) -> a
    M:net.minecraft.world.level.levelgen.blending.Blender$BlendingOutput blendOffsetAndFactor(int,int) -> a
    M:double heightToOffset(double) -> a
    M:double blendDensity(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext,double) -> a
    M:double getBlendingDataValue(int,int,int,net.minecraft.world.level.levelgen.blending.Blender$CellValueGetter) -> a
    M:double getBlendingDataValue(net.minecraft.world.level.levelgen.blending.Blender$CellValueGetter,int,int,int,int,int) -> a
    M:net.minecraft.world.level.biome.BiomeResolver getBiomeResolver(net.minecraft.world.level.biome.BiomeResolver) -> a
    M:net.minecraft.core.Holder blendBiome(int,int,int) -> a
    M:void generateBorderTicks(net.minecraft.server.level.RegionLimitedWorldAccess,net.minecraft.world.level.chunk.IChunkAccess) -> a
    M:void generateBorderTick(net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.core.BlockPosition) -> a
    M:void addAroundOldChunksCarvingMaskFilter(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.chunk.ProtoChunk) -> a
    M:net.minecraft.world.level.levelgen.blending.Blender$DistanceGetter makeOldChunkDistanceGetter(net.minecraft.world.level.levelgen.blending.BlendingData,java.util.Map) -> a
    M:net.minecraft.world.level.levelgen.blending.Blender$DistanceGetter makeOffsetOldChunkDistanceGetter(net.minecraft.core.EnumDirection8,net.minecraft.world.level.levelgen.blending.BlendingData) -> a
    M:double distanceToCube(double,double,double,double,double,double) -> a
    M:net.minecraft.world.level.levelgen.blending.Blender$BlendingOutput blendOffsetAndFactor(int,int) -> a
    M:double blendDensity(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext,double) -> a
    M:net.minecraft.world.level.biome.BiomeResolver getBiomeResolver(net.minecraft.world.level.biome.BiomeResolver) -> a
net.minecraft.world.level.levelgen.blending.Blender$BlendingOutput -> dau$a -> net.minecraft.world.level.levelgen.blending.Blender$a
    F:double alpha -> a
    F:double blendingOffset -> b
    M:boolean equals(java.lang.Object) -> equals
    M:double alpha() -> a
    M:double blendingOffset() -> b
net.minecraft.world.level.levelgen.blending.Blender$CellValueGetter -> dau$b -> net.minecraft.world.level.levelgen.blending.Blender$b
net.minecraft.world.level.levelgen.blending.Blender$DistanceGetter -> dau$c -> net.minecraft.world.level.levelgen.blending.Blender$c
net.minecraft.world.level.levelgen.blending.BlendingData -> dav -> net.minecraft.world.level.levelgen.blending.BlendingData
    F:double BLENDING_DENSITY_FACTOR -> f
    F:int CELL_WIDTH -> a
    F:int CELL_HEIGHT -> b
    F:int CELL_RATIO -> c
    F:double SOLID_DENSITY -> g
    F:double AIR_DENSITY -> h
    F:int CELLS_PER_SECTION_Y -> i
    F:int QUARTS_PER_SECTION -> j
    F:int CELL_HORIZONTAL_MAX_INDEX_INSIDE -> k
    F:int CELL_HORIZONTAL_MAX_INDEX_OUTSIDE -> l
    F:int CELL_COLUMN_INSIDE_COUNT -> m
    F:int CELL_COLUMN_OUTSIDE_COUNT -> n
    F:int CELL_COLUMN_COUNT -> o
    F:net.minecraft.world.level.LevelHeightAccessor areaWithOldGeneration -> p
    F:java.util.List SURFACE_BLOCKS -> q
    F:double NO_VALUE -> d
    F:boolean hasCalculatedData -> r
    F:java.util.List biomes -> t
    F:com.mojang.serialization.Codec DOUBLE_ARRAY_CODEC -> v
    F:com.mojang.serialization.Codec CODEC -> e
    M:com.mojang.serialization.DataResult validateArraySize(net.minecraft.world.level.levelgen.blending.BlendingData) -> a
    M:net.minecraft.world.level.levelgen.blending.BlendingData getOrUpdateBlendingData(net.minecraft.server.level.RegionLimitedWorldAccess,int,int) -> a
    M:java.util.Set sideByGenerationAge(net.minecraft.world.level.GeneratorAccessSeed,int,int,boolean) -> a
    M:void calculateData(net.minecraft.world.level.chunk.IChunkAccess,java.util.Set) -> a
    M:void addValuesForColumn(int,net.minecraft.world.level.chunk.IChunkAccess,int,int) -> a
    M:int getHeightAtXZ(net.minecraft.world.level.chunk.IChunkAccess,int,int) -> a
    M:double read1(net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.core.BlockPosition$MutableBlockPosition) -> a
    M:double read7(net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.core.BlockPosition$MutableBlockPosition) -> b
    M:java.util.List getBiomeColumn(net.minecraft.world.level.chunk.IChunkAccess,int,int) -> b
    M:boolean isGround(net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.core.BlockPosition) -> a
    M:double getHeight(int,int,int) -> a
    M:double getDensity(double[],int) -> a
    M:double getDensity(int,int,int) -> b
    M:void iterateBiomes(int,int,int,net.minecraft.world.level.levelgen.blending.BlendingData$BiomeConsumer) -> a
    M:void iterateHeights(int,int,net.minecraft.world.level.levelgen.blending.BlendingData$HeightConsumer) -> a
    M:void iterateDensities(int,int,int,int,net.minecraft.world.level.levelgen.blending.BlendingData$DensityConsumer) -> a
    M:int cellCountPerColumn() -> b
    M:int quartCountPerColumn() -> c
    M:int getColumnMinY() -> d
    M:int getMinY() -> e
    M:int getCellYIndex(int) -> a
    M:int getInsideIndex(int,int) -> a
    M:int getOutsideIndex(int,int) -> b
    M:int getX(int) -> b
    M:int getZ(int) -> c
    M:int zeroIfNegative(int) -> d
    M:net.minecraft.world.level.LevelHeightAccessor getAreaWithOldGeneration() -> a
net.minecraft.world.level.levelgen.blending.BlendingData$BiomeConsumer -> dav$a -> net.minecraft.world.level.levelgen.blending.BlendingData$a
net.minecraft.world.level.levelgen.blending.BlendingData$DensityConsumer -> dav$b -> net.minecraft.world.level.levelgen.blending.BlendingData$b
net.minecraft.world.level.levelgen.blending.BlendingData$HeightConsumer -> dav$c -> net.minecraft.world.level.levelgen.blending.BlendingData$c
net.minecraft.world.level.levelgen.blockpredicates.AllOfPredicate -> dax -> net.minecraft.world.level.levelgen.blockpredicates.AllOfPredicate
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean test(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType type() -> a
    M:boolean test(java.lang.Object,java.lang.Object) -> test
net.minecraft.world.level.levelgen.blockpredicates.AnyOfPredicate -> day -> net.minecraft.world.level.levelgen.blockpredicates.AnyOfPredicate
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean test(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType type() -> a
    M:boolean test(java.lang.Object,java.lang.Object) -> test
net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate -> daz -> net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate
    F:com.mojang.serialization.Codec CODEC -> b
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate ONLY_IN_AIR_PREDICATE -> c
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate ONLY_IN_AIR_OR_WATER_PREDICATE -> d
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate allOf(java.util.List) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate allOf(net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate[]) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate allOf(net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate,net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate anyOf(java.util.List) -> b
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate anyOf(net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate[]) -> b
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate anyOf(net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate,net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate) -> b
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate matchesBlocks(net.minecraft.core.BaseBlockPosition,java.util.List) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate matchesBlocks(java.util.List) -> c
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate matchesBlocks(net.minecraft.core.BaseBlockPosition,net.minecraft.world.level.block.Block[]) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate matchesBlocks(net.minecraft.world.level.block.Block[]) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate matchesTag(net.minecraft.core.BaseBlockPosition,net.minecraft.tags.TagKey) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate matchesTag(net.minecraft.tags.TagKey) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate matchesFluids(net.minecraft.core.BaseBlockPosition,java.util.List) -> b
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate matchesFluids(net.minecraft.core.BaseBlockPosition,net.minecraft.world.level.material.Fluid[]) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate matchesFluids(net.minecraft.world.level.material.Fluid[]) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate not(net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate replaceable(net.minecraft.core.BaseBlockPosition) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate replaceable() -> b
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate wouldSurvive(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BaseBlockPosition) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate hasSturdyFace(net.minecraft.core.BaseBlockPosition,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate hasSturdyFace(net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate solid(net.minecraft.core.BaseBlockPosition) -> b
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate solid() -> c
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate insideWorld(net.minecraft.core.BaseBlockPosition) -> c
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate alwaysTrue() -> d
net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType -> dba -> net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType MATCHING_BLOCKS -> a
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType MATCHING_BLOCK_TAG -> b
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType MATCHING_FLUIDS -> c
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType HAS_STURDY_FACE -> d
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType SOLID -> e
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType REPLACEABLE -> f
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType WOULD_SURVIVE -> g
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType INSIDE_WORLD_BOUNDS -> h
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType ANY_OF -> i
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType ALL_OF -> j
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType NOT -> k
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType TRUE -> l
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType register(java.lang.String,com.mojang.serialization.Codec) -> a
net.minecraft.world.level.levelgen.blockpredicates.CombiningPredicate -> dbb -> net.minecraft.world.level.levelgen.blockpredicates.CombiningPredicate
    F:java.util.List predicates -> e
    M:com.mojang.serialization.Codec codec(java.util.function.Function) -> a
net.minecraft.world.level.levelgen.blockpredicates.HasSturdyFacePredicate -> dbc -> net.minecraft.world.level.levelgen.blockpredicates.HasSturdyFacePredicate
    F:net.minecraft.core.BaseBlockPosition offset -> e
    F:net.minecraft.core.EnumDirection direction -> f
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean test(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType type() -> a
    M:boolean test(java.lang.Object,java.lang.Object) -> test
net.minecraft.world.level.levelgen.blockpredicates.InsideWorldBoundsPredicate -> dbd -> net.minecraft.world.level.levelgen.blockpredicates.InsideWorldBoundsPredicate
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.core.BaseBlockPosition offset -> e
    M:boolean test(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType type() -> a
    M:boolean test(java.lang.Object,java.lang.Object) -> test
net.minecraft.world.level.levelgen.blockpredicates.MatchingBlockTagPredicate -> dbe -> net.minecraft.world.level.levelgen.blockpredicates.MatchingBlockTagPredicate
    F:net.minecraft.tags.TagKey tag -> a
    F:com.mojang.serialization.Codec CODEC -> e
    M:boolean test(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType type() -> a
net.minecraft.world.level.levelgen.blockpredicates.MatchingBlocksPredicate -> dbf -> net.minecraft.world.level.levelgen.blockpredicates.MatchingBlocksPredicate
    F:net.minecraft.core.HolderSet blocks -> e
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean test(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType type() -> a
net.minecraft.world.level.levelgen.blockpredicates.MatchingFluidsPredicate -> dbg -> net.minecraft.world.level.levelgen.blockpredicates.MatchingFluidsPredicate
    F:net.minecraft.core.HolderSet fluids -> e
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean test(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType type() -> a
net.minecraft.world.level.levelgen.blockpredicates.NotPredicate -> dbh -> net.minecraft.world.level.levelgen.blockpredicates.NotPredicate
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate predicate -> e
    M:boolean test(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType type() -> a
    M:boolean test(java.lang.Object,java.lang.Object) -> test
net.minecraft.world.level.levelgen.blockpredicates.ReplaceablePredicate -> dbi -> net.minecraft.world.level.levelgen.blockpredicates.ReplaceablePredicate
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean test(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType type() -> a
net.minecraft.world.level.levelgen.blockpredicates.SolidPredicate -> dbj -> net.minecraft.world.level.levelgen.blockpredicates.SolidPredicate
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean test(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType type() -> a
net.minecraft.world.level.levelgen.blockpredicates.StateTestingPredicate -> dbk -> net.minecraft.world.level.levelgen.blockpredicates.StateTestingPredicate
    F:net.minecraft.core.BaseBlockPosition offset -> f
    M:com.mojang.datafixers.Products$P1 stateTestingCodec(com.mojang.serialization.codecs.RecordCodecBuilder$Instance) -> a
    M:boolean test(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition) -> a
    M:boolean test(java.lang.Object,java.lang.Object) -> test
net.minecraft.world.level.levelgen.blockpredicates.TrueBlockPredicate -> dbl -> net.minecraft.world.level.levelgen.blockpredicates.TrueBlockPredicate
    F:net.minecraft.world.level.levelgen.blockpredicates.TrueBlockPredicate INSTANCE -> a
    F:com.mojang.serialization.Codec CODEC -> e
    M:boolean test(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType type() -> a
    M:boolean test(java.lang.Object,java.lang.Object) -> test
net.minecraft.world.level.levelgen.blockpredicates.WouldSurvivePredicate -> dbm -> net.minecraft.world.level.levelgen.blockpredicates.WouldSurvivePredicate
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.core.BaseBlockPosition offset -> e
    F:net.minecraft.world.level.block.state.IBlockData state -> f
    M:boolean test(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicateType type() -> a
    M:boolean test(java.lang.Object,java.lang.Object) -> test
net.minecraft.world.level.levelgen.carver.CanyonCarverConfiguration -> dbo -> net.minecraft.world.level.levelgen.carver.CanyonCarverConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.util.valueproviders.FloatProvider verticalRotation -> b
    F:net.minecraft.world.level.levelgen.carver.CanyonCarverConfiguration$CanyonShapeConfiguration shape -> c
net.minecraft.world.level.levelgen.carver.CanyonCarverConfiguration$CanyonShapeConfiguration -> dbo$a -> net.minecraft.world.level.levelgen.carver.CanyonCarverConfiguration$a
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.util.valueproviders.FloatProvider distanceFactor -> b
    F:net.minecraft.util.valueproviders.FloatProvider thickness -> c
    F:int widthSmoothness -> d
    F:net.minecraft.util.valueproviders.FloatProvider horizontalRadiusFactor -> e
    F:float verticalRadiusDefaultFactor -> f
    F:float verticalRadiusCenterFactor -> g
net.minecraft.world.level.levelgen.carver.CanyonWorldCarver -> dbp -> net.minecraft.world.level.levelgen.carver.WorldGenCanyon
    M:boolean isStartChunk(net.minecraft.world.level.levelgen.carver.CanyonCarverConfiguration,net.minecraft.util.RandomSource) -> a
    M:boolean carve(net.minecraft.world.level.levelgen.carver.CarvingContext,net.minecraft.world.level.levelgen.carver.CanyonCarverConfiguration,net.minecraft.world.level.chunk.IChunkAccess,java.util.function.Function,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.Aquifer,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.chunk.CarvingMask) -> a
    M:void doCarve(net.minecraft.world.level.levelgen.carver.CarvingContext,net.minecraft.world.level.levelgen.carver.CanyonCarverConfiguration,net.minecraft.world.level.chunk.IChunkAccess,java.util.function.Function,long,net.minecraft.world.level.levelgen.Aquifer,double,double,double,float,float,float,int,int,double,net.minecraft.world.level.chunk.CarvingMask) -> a
    M:double updateVerticalRadius(net.minecraft.world.level.levelgen.carver.CanyonCarverConfiguration,net.minecraft.util.RandomSource,double,float,float) -> a
    M:boolean shouldSkip(net.minecraft.world.level.levelgen.carver.CarvingContext,float[],double,double,double,int) -> a
    M:boolean isStartChunk(net.minecraft.world.level.levelgen.carver.WorldGenCarverConfiguration,net.minecraft.util.RandomSource) -> a
    M:boolean carve(net.minecraft.world.level.levelgen.carver.CarvingContext,net.minecraft.world.level.levelgen.carver.WorldGenCarverConfiguration,net.minecraft.world.level.chunk.IChunkAccess,java.util.function.Function,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.Aquifer,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.chunk.CarvingMask) -> a
net.minecraft.world.level.levelgen.carver.CarverConfiguration -> dbq -> net.minecraft.world.level.levelgen.carver.WorldGenCarverConfiguration
    F:com.mojang.serialization.MapCodec CODEC -> d
    F:net.minecraft.world.level.levelgen.heightproviders.HeightProvider y -> e
    F:net.minecraft.util.valueproviders.FloatProvider yScale -> f
    F:net.minecraft.world.level.levelgen.VerticalAnchor lavaLevel -> g
    F:net.minecraft.world.level.levelgen.carver.CarverDebugSettings debugSettings -> h
    F:net.minecraft.core.HolderSet replaceable -> i
net.minecraft.world.level.levelgen.carver.CarverDebugSettings -> dbr -> net.minecraft.world.level.levelgen.carver.CarverDebugSettings
    F:net.minecraft.world.level.levelgen.carver.CarverDebugSettings DEFAULT -> a
    F:com.mojang.serialization.Codec CODEC -> b
    F:boolean debugMode -> c
    F:net.minecraft.world.level.block.state.IBlockData airState -> d
    F:net.minecraft.world.level.block.state.IBlockData waterState -> e
    F:net.minecraft.world.level.block.state.IBlockData lavaState -> f
    F:net.minecraft.world.level.block.state.IBlockData barrierState -> g
    M:net.minecraft.world.level.levelgen.carver.CarverDebugSettings of(boolean,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.levelgen.carver.CarverDebugSettings of(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.levelgen.carver.CarverDebugSettings of(boolean,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isDebugMode() -> a
    M:net.minecraft.world.level.block.state.IBlockData getAirState() -> b
    M:net.minecraft.world.level.block.state.IBlockData getWaterState() -> c
    M:net.minecraft.world.level.block.state.IBlockData getLavaState() -> d
    M:net.minecraft.world.level.block.state.IBlockData getBarrierState() -> e
net.minecraft.world.level.levelgen.carver.CarvingContext -> dbs -> net.minecraft.world.level.levelgen.carver.CarvingContext
    F:net.minecraft.core.IRegistryCustom registryAccess -> a
    F:net.minecraft.world.level.levelgen.NoiseChunk noiseChunk -> b
    F:net.minecraft.world.level.levelgen.RandomState randomState -> c
    F:net.minecraft.world.level.levelgen.SurfaceRules$RuleSource surfaceRule -> d
    M:java.util.Optional topMaterial(java.util.function.Function,net.minecraft.world.level.chunk.IChunkAccess,net.minecraft.core.BlockPosition,boolean) -> a
    M:net.minecraft.core.IRegistryCustom registryAccess() -> c
    M:net.minecraft.world.level.levelgen.RandomState randomState() -> d
net.minecraft.world.level.levelgen.carver.CaveCarverConfiguration -> dbt -> net.minecraft.world.level.levelgen.carver.CaveCarverConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.util.valueproviders.FloatProvider horizontalRadiusMultiplier -> b
    F:net.minecraft.util.valueproviders.FloatProvider verticalRadiusMultiplier -> c
    F:net.minecraft.util.valueproviders.FloatProvider floorLevel -> j
net.minecraft.world.level.levelgen.carver.CaveWorldCarver -> dbu -> net.minecraft.world.level.levelgen.carver.WorldGenCaves
    M:boolean isStartChunk(net.minecraft.world.level.levelgen.carver.CaveCarverConfiguration,net.minecraft.util.RandomSource) -> a
    M:boolean carve(net.minecraft.world.level.levelgen.carver.CarvingContext,net.minecraft.world.level.levelgen.carver.CaveCarverConfiguration,net.minecraft.world.level.chunk.IChunkAccess,java.util.function.Function,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.Aquifer,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.chunk.CarvingMask) -> a
    M:int getCaveBound() -> a
    M:float getThickness(net.minecraft.util.RandomSource) -> a
    M:double getYScale() -> b
    M:void createRoom(net.minecraft.world.level.levelgen.carver.CarvingContext,net.minecraft.world.level.levelgen.carver.CaveCarverConfiguration,net.minecraft.world.level.chunk.IChunkAccess,java.util.function.Function,net.minecraft.world.level.levelgen.Aquifer,double,double,double,float,double,net.minecraft.world.level.chunk.CarvingMask,net.minecraft.world.level.levelgen.carver.WorldCarver$CarveSkipChecker) -> a
    M:void createTunnel(net.minecraft.world.level.levelgen.carver.CarvingContext,net.minecraft.world.level.levelgen.carver.CaveCarverConfiguration,net.minecraft.world.level.chunk.IChunkAccess,java.util.function.Function,long,net.minecraft.world.level.levelgen.Aquifer,double,double,double,double,double,float,float,float,int,int,double,net.minecraft.world.level.chunk.CarvingMask,net.minecraft.world.level.levelgen.carver.WorldCarver$CarveSkipChecker) -> a
    M:boolean shouldSkip(double,double,double,double) -> a
    M:boolean isStartChunk(net.minecraft.world.level.levelgen.carver.WorldGenCarverConfiguration,net.minecraft.util.RandomSource) -> a
    M:boolean carve(net.minecraft.world.level.levelgen.carver.CarvingContext,net.minecraft.world.level.levelgen.carver.WorldGenCarverConfiguration,net.minecraft.world.level.chunk.IChunkAccess,java.util.function.Function,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.Aquifer,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.chunk.CarvingMask) -> a
net.minecraft.world.level.levelgen.carver.ConfiguredWorldCarver -> dbv -> net.minecraft.world.level.levelgen.carver.WorldGenCarverWrapper
    F:net.minecraft.world.level.levelgen.carver.WorldGenCarverAbstract worldCarver -> d
    F:net.minecraft.world.level.levelgen.carver.WorldGenCarverConfiguration config -> e
    F:com.mojang.serialization.Codec DIRECT_CODEC -> a
    F:com.mojang.serialization.Codec CODEC -> b
    F:com.mojang.serialization.Codec LIST_CODEC -> c
    M:boolean isStartChunk(net.minecraft.util.RandomSource) -> a
    M:boolean carve(net.minecraft.world.level.levelgen.carver.CarvingContext,net.minecraft.world.level.chunk.IChunkAccess,java.util.function.Function,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.Aquifer,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.chunk.CarvingMask) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.carver.WorldGenCarverAbstract worldCarver() -> a
    M:net.minecraft.world.level.levelgen.carver.WorldGenCarverConfiguration config() -> b
net.minecraft.world.level.levelgen.carver.NetherWorldCarver -> dbw -> net.minecraft.world.level.levelgen.carver.WorldGenCavesHell
    M:int getCaveBound() -> a
    M:float getThickness(net.minecraft.util.RandomSource) -> a
    M:double getYScale() -> b
    M:boolean carveBlock(net.minecraft.world.level.levelgen.carver.CarvingContext,net.minecraft.world.level.levelgen.carver.CaveCarverConfiguration,net.minecraft.world.level.chunk.IChunkAccess,java.util.function.Function,net.minecraft.world.level.chunk.CarvingMask,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.world.level.levelgen.Aquifer,org.apache.commons.lang3.mutable.MutableBoolean) -> a
    M:boolean carveBlock(net.minecraft.world.level.levelgen.carver.CarvingContext,net.minecraft.world.level.levelgen.carver.WorldGenCarverConfiguration,net.minecraft.world.level.chunk.IChunkAccess,java.util.function.Function,net.minecraft.world.level.chunk.CarvingMask,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.world.level.levelgen.Aquifer,org.apache.commons.lang3.mutable.MutableBoolean) -> a
net.minecraft.world.level.levelgen.carver.WorldCarver -> dbx -> net.minecraft.world.level.levelgen.carver.WorldGenCarverAbstract
    F:net.minecraft.world.level.levelgen.carver.WorldGenCarverAbstract CAVE -> a
    F:net.minecraft.world.level.levelgen.carver.WorldGenCarverAbstract NETHER_CAVE -> b
    F:net.minecraft.world.level.levelgen.carver.WorldGenCarverAbstract CANYON -> c
    F:net.minecraft.world.level.block.state.IBlockData AIR -> d
    F:net.minecraft.world.level.block.state.IBlockData CAVE_AIR -> e
    F:net.minecraft.world.level.material.Fluid WATER -> f
    F:net.minecraft.world.level.material.Fluid LAVA -> g
    F:java.util.Set liquids -> h
    F:com.mojang.serialization.Codec configuredCodec -> i
    M:net.minecraft.world.level.levelgen.carver.WorldGenCarverAbstract register(java.lang.String,net.minecraft.world.level.levelgen.carver.WorldGenCarverAbstract) -> a
    M:net.minecraft.world.level.levelgen.carver.WorldGenCarverWrapper configured(net.minecraft.world.level.levelgen.carver.WorldGenCarverConfiguration) -> a
    M:com.mojang.serialization.Codec configuredCodec() -> c
    M:int getRange() -> d
    M:boolean carveEllipsoid(net.minecraft.world.level.levelgen.carver.CarvingContext,net.minecraft.world.level.levelgen.carver.WorldGenCarverConfiguration,net.minecraft.world.level.chunk.IChunkAccess,java.util.function.Function,net.minecraft.world.level.levelgen.Aquifer,double,double,double,double,double,net.minecraft.world.level.chunk.CarvingMask,net.minecraft.world.level.levelgen.carver.WorldCarver$CarveSkipChecker) -> a
    M:boolean carveBlock(net.minecraft.world.level.levelgen.carver.CarvingContext,net.minecraft.world.level.levelgen.carver.WorldGenCarverConfiguration,net.minecraft.world.level.chunk.IChunkAccess,java.util.function.Function,net.minecraft.world.level.chunk.CarvingMask,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.world.level.levelgen.Aquifer,org.apache.commons.lang3.mutable.MutableBoolean) -> a
    M:net.minecraft.world.level.block.state.IBlockData getCarveState(net.minecraft.world.level.levelgen.carver.CarvingContext,net.minecraft.world.level.levelgen.carver.WorldGenCarverConfiguration,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.Aquifer) -> a
    M:net.minecraft.world.level.block.state.IBlockData getDebugState(net.minecraft.world.level.levelgen.carver.WorldGenCarverConfiguration,net.minecraft.world.level.block.state.IBlockData) -> b
    M:boolean canReplaceBlock(net.minecraft.world.level.levelgen.carver.WorldGenCarverConfiguration,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean canReach(net.minecraft.world.level.ChunkCoordIntPair,double,double,int,int,float) -> a
    M:boolean isDebugEnabled(net.minecraft.world.level.levelgen.carver.WorldGenCarverConfiguration) -> b
net.minecraft.world.level.levelgen.carver.WorldCarver$CarveSkipChecker -> dbx$a -> net.minecraft.world.level.levelgen.carver.WorldGenCarverAbstract$a
net.minecraft.world.level.levelgen.feature.AbstractHugeMushroomFeature -> dbz -> net.minecraft.world.level.levelgen.feature.WorldGenMushrooms
    M:void placeTrunk(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureMushroomConfiguration,int,net.minecraft.core.BlockPosition$MutableBlockPosition) -> a
    M:int getTreeHeight(net.minecraft.util.RandomSource) -> a
    M:boolean isValidPosition(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,int,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureMushroomConfiguration) -> a
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.BambooFeature -> dca -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureBamboo
    F:net.minecraft.world.level.block.state.IBlockData BAMBOO_TRUNK -> a
    F:net.minecraft.world.level.block.state.IBlockData BAMBOO_FINAL_LARGE -> b
    F:net.minecraft.world.level.block.state.IBlockData BAMBOO_TOP_LARGE -> c
    F:net.minecraft.world.level.block.state.IBlockData BAMBOO_TOP_SMALL -> d
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.BasaltColumnsFeature -> dcb -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureBasaltColumns
    F:com.google.common.collect.ImmutableList CANNOT_PLACE_ON -> a
    F:int CLUSTERED_REACH -> b
    F:int CLUSTERED_SIZE -> c
    F:int UNCLUSTERED_REACH -> d
    F:int UNCLUSTERED_SIZE -> e
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:boolean placeColumn(net.minecraft.world.level.GeneratorAccess,int,net.minecraft.core.BlockPosition,int,int) -> a
    M:net.minecraft.core.BlockPosition findSurface(net.minecraft.world.level.GeneratorAccess,int,net.minecraft.core.BlockPosition$MutableBlockPosition,int) -> a
    M:boolean canPlaceAt(net.minecraft.world.level.GeneratorAccess,int,net.minecraft.core.BlockPosition$MutableBlockPosition) -> a
    M:net.minecraft.core.BlockPosition findAir(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition$MutableBlockPosition,int) -> a
    M:boolean isAirOrLavaOcean(net.minecraft.world.level.GeneratorAccess,int,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.feature.BasaltPillarFeature -> dcc -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureBasaltPillar
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:void placeBaseHangOff(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:boolean placeHangOff(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> b
net.minecraft.world.level.levelgen.feature.BlockBlobFeature -> dcd -> net.minecraft.world.level.levelgen.feature.WorldGenTaigaStructure
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.BlockColumnFeature -> dce -> net.minecraft.world.level.levelgen.feature.BlockColumnFeature
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:void truncate(int[],int,int,boolean) -> a
net.minecraft.world.level.levelgen.feature.BlockPileFeature -> dcf -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureBlockPile
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:boolean mayPlaceOn(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void tryPlaceBlock(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureBlockPileConfiguration) -> a
net.minecraft.world.level.levelgen.feature.BlueIceFeature -> dcg -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureBlueIce
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.BonusChestFeature -> dch -> net.minecraft.world.level.levelgen.feature.WorldGenBonusChest
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.ChorusPlantFeature -> dci -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureChorusPlant
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.ConfiguredFeature -> dcj -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureConfigured
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator feature -> d
    F:net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration config -> e
    F:com.mojang.serialization.Codec DIRECT_CODEC -> a
    F:com.mojang.serialization.Codec CODEC -> b
    F:com.mojang.serialization.Codec LIST_CODEC -> c
    M:boolean place(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:java.util.stream.Stream getFeatures() -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.feature.WorldGenerator feature() -> b
    M:net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration config() -> c
net.minecraft.world.level.levelgen.feature.CoralClawFeature -> dck -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureCoralClaw
    M:boolean placeFeature(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.levelgen.feature.CoralFeature -> dcl -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureCoral
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:boolean placeCoralBlock(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
net.minecraft.world.level.levelgen.feature.CoralMushroomFeature -> dcm -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureCoralMushroom
    M:boolean placeFeature(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.levelgen.feature.CoralTreeFeature -> dcn -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureCoralTree
    M:boolean placeFeature(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.levelgen.feature.DeltaFeature -> dco -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureDelta
    F:com.google.common.collect.ImmutableList CANNOT_REPLACE -> a
    F:double RIM_SPAWN_CHANCE -> c
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:boolean isClear(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureDeltaConfiguration) -> a
net.minecraft.world.level.levelgen.feature.DesertWellFeature -> dcp -> net.minecraft.world.level.levelgen.feature.WorldGenDesertWell
    F:net.minecraft.world.level.block.state.predicate.BlockStatePredicate IS_SAND -> a
    F:net.minecraft.world.level.block.state.IBlockData sandSlab -> b
    F:net.minecraft.world.level.block.state.IBlockData sandstone -> c
    F:net.minecraft.world.level.block.state.IBlockData water -> d
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.DiskFeature -> dcq -> net.minecraft.world.level.levelgen.feature.DiskFeature
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:boolean placeColumn(net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureCircleConfiguration,net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.util.RandomSource,int,int,net.minecraft.core.BlockPosition$MutableBlockPosition) -> a
net.minecraft.world.level.levelgen.feature.DripstoneClusterFeature -> dcr -> net.minecraft.world.level.levelgen.feature.DripstoneClusterFeature
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:void placeColumn(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,int,int,float,double,int,float,net.minecraft.world.level.levelgen.feature.configurations.DripstoneClusterConfiguration) -> a
    M:boolean isLava(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:int getDripstoneHeight(net.minecraft.util.RandomSource,int,int,float,int,net.minecraft.world.level.levelgen.feature.configurations.DripstoneClusterConfiguration) -> a
    M:boolean canPlacePool(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition) -> b
    M:boolean canBeAdjacentToWater(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:void replaceBlocksWithDripstoneBlocks(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition,int,net.minecraft.core.EnumDirection) -> a
    M:double getChanceOfStalagmiteOrStalactite(int,int,int,int,net.minecraft.world.level.levelgen.feature.configurations.DripstoneClusterConfiguration) -> a
    M:float randomBetweenBiased(net.minecraft.util.RandomSource,float,float,float,float) -> a
net.minecraft.world.level.levelgen.feature.DripstoneUtils -> dcs -> net.minecraft.world.level.levelgen.feature.DripstoneUtils
    M:double getDripstoneHeight(double,double,double,double) -> a
    M:boolean isCircleMostlyEmbeddedInStone(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition,int) -> a
    M:boolean isEmptyOrWater(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:boolean isEmptyOrWaterOrLava(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> b
    M:void buildBaseToTipColumn(net.minecraft.core.EnumDirection,int,boolean,java.util.function.Consumer) -> a
    M:void growPointedDripstone(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,int,boolean) -> a
    M:boolean placeDripstoneBlockIfPossible(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> c
    M:net.minecraft.world.level.block.state.IBlockData createPointedDripstone(net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.properties.DripstoneThickness) -> a
    M:boolean isDripstoneBaseOrLava(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isDripstoneBase(net.minecraft.world.level.block.state.IBlockData) -> b
    M:boolean isEmptyOrWater(net.minecraft.world.level.block.state.IBlockData) -> c
    M:boolean isNeitherEmptyNorWater(net.minecraft.world.level.block.state.IBlockData) -> d
    M:boolean isEmptyOrWaterOrLava(net.minecraft.world.level.block.state.IBlockData) -> e
net.minecraft.world.level.levelgen.feature.EndGatewayFeature -> dct -> net.minecraft.world.level.levelgen.feature.WorldGenEndGateway
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.EndIslandFeature -> dcu -> net.minecraft.world.level.levelgen.feature.WorldGenEndIsland
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.EndPodiumFeature -> dcv -> net.minecraft.world.level.levelgen.feature.WorldGenEndTrophy
    F:int PODIUM_RADIUS -> a
    F:int PODIUM_PILLAR_HEIGHT -> b
    F:int RIM_RADIUS -> c
    F:float CORNER_ROUNDING -> d
    F:net.minecraft.core.BlockPosition END_PODIUM_LOCATION -> e
    F:boolean active -> ao
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.Feature -> dcw -> net.minecraft.world.level.levelgen.feature.WorldGenerator
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator NO_OP -> f
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator TREE -> g
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator FLOWER -> h
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator NO_BONEMEAL_FLOWER -> i
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator RANDOM_PATCH -> j
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator BLOCK_PILE -> k
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator SPRING -> l
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator CHORUS_PLANT -> m
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator REPLACE_SINGLE_BLOCK -> n
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator VOID_START_PLATFORM -> o
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator DESERT_WELL -> p
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator FOSSIL -> q
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator HUGE_RED_MUSHROOM -> r
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator HUGE_BROWN_MUSHROOM -> s
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator ICE_SPIKE -> t
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator GLOWSTONE_BLOB -> u
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator FREEZE_TOP_LAYER -> v
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator VINES -> w
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator BLOCK_COLUMN -> x
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator VEGETATION_PATCH -> y
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator WATERLOGGED_VEGETATION_PATCH -> z
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator DELTA_FEATURE -> aa
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator REPLACE_BLOBS -> ab
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator FILL_LAYER -> ac
    F:net.minecraft.world.level.levelgen.feature.WorldGenBonusChest BONUS_CHEST -> ad
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator BASALT_PILLAR -> ae
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator SCATTERED_ORE -> af
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator RANDOM_SELECTOR -> ag
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator SIMPLE_RANDOM_SELECTOR -> ah
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator RANDOM_BOOLEAN_SELECTOR -> ai
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator GEODE -> aj
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator DRIPSTONE_CLUSTER -> ak
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator LARGE_DRIPSTONE -> al
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator POINTED_DRIPSTONE -> am
    F:net.minecraft.world.level.levelgen.feature.WorldGenerator SCULK_PATCH -> an
    F:com.mojang.serialization.Codec configuredCodec -> a
    M:net.minecraft.world.level.levelgen.feature.WorldGenerator register(java.lang.String,net.minecraft.world.level.levelgen.feature.WorldGenerator) -> a
    M:com.mojang.serialization.Codec configuredCodec() -> a
    M:void setBlock(net.minecraft.world.level.IWorldWriter,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:java.util.function.Predicate isReplaceable(net.minecraft.tags.TagKey) -> a
    M:void safeSetBlock(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,java.util.function.Predicate) -> a
    M:boolean place(net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration,net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:boolean isStone(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isDirt(net.minecraft.world.level.block.state.IBlockData) -> b
    M:boolean isGrassOrDirt(net.minecraft.world.level.VirtualLevelReadable,net.minecraft.core.BlockPosition) -> a
    M:boolean checkNeighbors(java.util.function.Function,net.minecraft.core.BlockPosition,java.util.function.Predicate) -> a
    M:boolean isAdjacentToAir(java.util.function.Function,net.minecraft.core.BlockPosition) -> a
    M:void markAboveForPostProcessing(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.feature.FeatureCountTracker -> dcx -> net.minecraft.world.level.levelgen.feature.FeatureCountTracker
    F:org.slf4j.Logger LOGGER -> a
    F:com.google.common.cache.LoadingCache data -> b
    M:void chunkDecorated(net.minecraft.server.level.WorldServer) -> a
    M:void featurePlaced(net.minecraft.server.level.WorldServer,net.minecraft.world.level.levelgen.feature.WorldGenFeatureConfigured,java.util.Optional) -> a
    M:void clearCounts() -> a
    M:void logCounts() -> b
    M:net.minecraft.world.level.levelgen.feature.FeatureCountTracker$LevelData load(net.minecraft.server.level.WorldServer) -> a
    M:java.lang.Object load(java.lang.Object) -> load
net.minecraft.world.level.levelgen.feature.FeatureCountTracker$FeatureData -> dcx$a -> net.minecraft.world.level.levelgen.feature.FeatureCountTracker$a
    F:net.minecraft.world.level.levelgen.feature.WorldGenFeatureConfigured feature -> a
    F:java.util.Optional topFeature -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.feature.WorldGenFeatureConfigured feature() -> a
    M:java.util.Optional topFeature() -> b
net.minecraft.world.level.levelgen.feature.FeatureCountTracker$LevelData -> dcx$b -> net.minecraft.world.level.levelgen.feature.FeatureCountTracker$b
    F:it.unimi.dsi.fastutil.objects.Object2IntMap featureData -> a
    F:org.apache.commons.lang3.mutable.MutableInt chunksWithFeatures -> b
    M:boolean equals(java.lang.Object) -> equals
    M:it.unimi.dsi.fastutil.objects.Object2IntMap featureData() -> a
    M:org.apache.commons.lang3.mutable.MutableInt chunksWithFeatures() -> b
net.minecraft.world.level.levelgen.feature.FeaturePlaceContext -> dcy -> net.minecraft.world.level.levelgen.feature.FeaturePlaceContext
    F:java.util.Optional topFeature -> a
    F:net.minecraft.world.level.GeneratorAccessSeed level -> b
    F:net.minecraft.world.level.chunk.ChunkGenerator chunkGenerator -> c
    F:net.minecraft.util.RandomSource random -> d
    F:net.minecraft.core.BlockPosition origin -> e
    F:net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration config -> f
    M:java.util.Optional topFeature() -> a
    M:net.minecraft.world.level.GeneratorAccessSeed level() -> b
    M:net.minecraft.world.level.chunk.ChunkGenerator chunkGenerator() -> c
    M:net.minecraft.util.RandomSource random() -> d
    M:net.minecraft.core.BlockPosition origin() -> e
    M:net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration config() -> f
net.minecraft.world.level.levelgen.feature.FillLayerFeature -> dcz -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureFill
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.FossilFeature -> dda -> net.minecraft.world.level.levelgen.feature.WorldGenFossils
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:int countEmptyCorners(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
net.minecraft.world.level.levelgen.feature.FossilFeatureConfiguration -> ddb -> net.minecraft.world.level.levelgen.feature.FossilFeatureConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:java.util.List fossilStructures -> b
    F:java.util.List overlayStructures -> c
    F:net.minecraft.core.Holder fossilProcessors -> d
    F:net.minecraft.core.Holder overlayProcessors -> e
    F:int maxEmptyCornersAllowed -> f
net.minecraft.world.level.levelgen.feature.GeodeFeature -> ddc -> net.minecraft.world.level.levelgen.feature.GeodeFeature
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.GlowstoneFeature -> ddd -> net.minecraft.world.level.levelgen.feature.WorldGenLightStone1
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.HugeBrownMushroomFeature -> dde -> net.minecraft.world.level.levelgen.feature.WorldGenHugeMushroomBrown
    M:void makeCap(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,int,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureMushroomConfiguration) -> a
    M:int getTreeRadiusForHeight(int,int,int,int) -> a
net.minecraft.world.level.levelgen.feature.HugeFungusConfiguration -> ddf -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureHugeFungiConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.block.state.IBlockData validBaseState -> b
    F:net.minecraft.world.level.block.state.IBlockData stemState -> c
    F:net.minecraft.world.level.block.state.IBlockData hatState -> d
    F:net.minecraft.world.level.block.state.IBlockData decorState -> e
    F:boolean planted -> f
net.minecraft.world.level.levelgen.feature.HugeFungusFeature -> ddg -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureHugeFungi
    F:float HUGE_PROBABILITY -> a
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:boolean isReplaceable(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,boolean) -> a
    M:void placeStem(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.WorldGenFeatureHugeFungiConfiguration,net.minecraft.core.BlockPosition,int,boolean) -> a
    M:void placeHat(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.WorldGenFeatureHugeFungiConfiguration,net.minecraft.core.BlockPosition,int,boolean) -> b
    M:void placeHatBlock(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.WorldGenFeatureHugeFungiConfiguration,net.minecraft.core.BlockPosition$MutableBlockPosition,float,float,float) -> a
    M:void placeHatDropBlock(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void tryPlaceWeepingVines(net.minecraft.core.BlockPosition,net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.levelgen.feature.HugeRedMushroomFeature -> ddh -> net.minecraft.world.level.levelgen.feature.WorldGenHugeMushroomRed
    M:void makeCap(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,int,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureMushroomConfiguration) -> a
    M:int getTreeRadiusForHeight(int,int,int,int) -> a
net.minecraft.world.level.levelgen.feature.IceSpikeFeature -> ddi -> net.minecraft.world.level.levelgen.feature.WorldGenPackedIce2
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.IcebergFeature -> ddj -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureIceburg
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:void generateCutOut(net.minecraft.util.RandomSource,net.minecraft.world.level.GeneratorAccess,int,int,net.minecraft.core.BlockPosition,boolean,int,double,int) -> a
    M:void carve(int,int,net.minecraft.core.BlockPosition,net.minecraft.world.level.GeneratorAccess,boolean,double,net.minecraft.core.BlockPosition,int,int) -> a
    M:void removeFloatingSnowLayer(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:void generateIcebergBlock(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,int,int,int,int,int,int,boolean,int,double,boolean,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void setIcebergBlock(net.minecraft.core.BlockPosition,net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,int,int,boolean,boolean,net.minecraft.world.level.block.state.IBlockData) -> a
    M:int getEllipseC(int,int,int) -> a
    M:double signedDistanceCircle(int,int,net.minecraft.core.BlockPosition,int,net.minecraft.util.RandomSource) -> a
    M:double signedDistanceEllipse(int,int,net.minecraft.core.BlockPosition,int,int,double) -> a
    M:int heightDependentRadiusRound(net.minecraft.util.RandomSource,int,int,int) -> a
    M:int heightDependentRadiusEllipse(int,int,int) -> b
    M:int heightDependentRadiusSteep(net.minecraft.util.RandomSource,int,int,int) -> b
    M:boolean isIcebergState(net.minecraft.world.level.block.state.IBlockData) -> c
    M:boolean belowIsAir(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:void smooth(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,int,int,boolean,int) -> a
net.minecraft.world.level.levelgen.feature.KelpFeature -> ddk -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureKelp
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.LakeFeature -> ddl -> net.minecraft.world.level.levelgen.feature.WorldGenLakes
    F:net.minecraft.world.level.block.state.IBlockData AIR -> a
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:boolean canReplaceBlock(net.minecraft.world.level.block.state.IBlockData) -> c
net.minecraft.world.level.levelgen.feature.LakeFeature$Configuration -> ddl$a -> net.minecraft.world.level.levelgen.feature.WorldGenLakes$a
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider fluid -> b
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider barrier -> c
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider fluid() -> a
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider barrier() -> b
net.minecraft.world.level.levelgen.feature.LargeDripstoneFeature -> ddm -> net.minecraft.world.level.levelgen.feature.LargeDripstoneFeature
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:net.minecraft.world.level.levelgen.feature.LargeDripstoneFeature$LargeDripstone makeDripstone(net.minecraft.core.BlockPosition,boolean,net.minecraft.util.RandomSource,int,net.minecraft.util.valueproviders.FloatProvider,net.minecraft.util.valueproviders.FloatProvider) -> a
    M:void placeDebugMarkers(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.Column$Range,net.minecraft.world.level.levelgen.feature.LargeDripstoneFeature$WindOffsetter) -> a
net.minecraft.world.level.levelgen.feature.LargeDripstoneFeature$LargeDripstone -> ddm$a -> net.minecraft.world.level.levelgen.feature.LargeDripstoneFeature$a
    F:net.minecraft.core.BlockPosition root -> a
    F:boolean pointingUp -> b
    F:int radius -> c
    F:double bluntness -> d
    F:double scale -> e
    M:int getHeight() -> a
    M:int getMinY() -> b
    M:int getMaxY() -> c
    M:boolean moveBackUntilBaseIsInsideStoneAndShrinkRadiusIfNecessary(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.feature.LargeDripstoneFeature$WindOffsetter) -> a
    M:int getHeightAtRadius(float) -> a
    M:void placeBlocks(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.LargeDripstoneFeature$WindOffsetter) -> a
    M:boolean isSuitableForWind(net.minecraft.world.level.levelgen.feature.configurations.LargeDripstoneConfiguration) -> a
net.minecraft.world.level.levelgen.feature.LargeDripstoneFeature$WindOffsetter -> ddm$b -> net.minecraft.world.level.levelgen.feature.LargeDripstoneFeature$b
    F:int originY -> a
    F:net.minecraft.world.phys.Vec3D windSpeed -> b
    M:net.minecraft.world.level.levelgen.feature.LargeDripstoneFeature$WindOffsetter noWind() -> a
    M:net.minecraft.core.BlockPosition offset(net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.feature.MonsterRoomFeature -> ddn -> net.minecraft.world.level.levelgen.feature.WorldGenDungeons
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.world.level.block.state.IBlockData AIR -> c
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:net.minecraft.world.entity.EntityTypes randomEntityId(net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.levelgen.feature.MultifaceGrowthFeature -> ddo -> net.minecraft.world.level.levelgen.feature.MultifaceGrowthFeature
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:boolean placeGrowthIfPossible(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.levelgen.feature.configurations.MultifaceGrowthConfiguration,net.minecraft.util.RandomSource,java.util.List) -> a
    M:boolean isAirOrWater(net.minecraft.world.level.block.state.IBlockData) -> c
net.minecraft.world.level.levelgen.feature.NetherForestVegetationFeature -> ddp -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureNetherForestVegetation
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.NoOpFeature -> ddq -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureEmpty
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.OreFeature -> ddr -> net.minecraft.world.level.levelgen.feature.WorldGenMinable
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:boolean doPlace(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureOreConfiguration,double,double,double,double,double,double,int,int,int,int,int) -> a
    M:boolean canPlaceOre(net.minecraft.world.level.block.state.IBlockData,java.util.function.Function,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureOreConfiguration,net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration$TargetBlockState,net.minecraft.core.BlockPosition$MutableBlockPosition) -> a
    M:boolean shouldSkipAirCheck(net.minecraft.util.RandomSource,float) -> a
net.minecraft.world.level.levelgen.feature.PointedDripstoneFeature -> dds -> net.minecraft.world.level.levelgen.feature.PointedDripstoneFeature
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:java.util.Optional getTipDirection(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:void createPatchOfDripstoneBlocks(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.PointedDripstoneConfiguration) -> a
net.minecraft.world.level.levelgen.feature.RandomBooleanSelectorFeature -> ddt -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureChoice
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.RandomPatchFeature -> ddu -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureRandomPatch
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.RandomSelectorFeature -> ddv -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureRandomChoice
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.ReplaceBlobsFeature -> ddw -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureNetherrackReplaceBlobs
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:net.minecraft.core.BlockPosition findTarget(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.world.level.block.Block) -> a
net.minecraft.world.level.levelgen.feature.ReplaceBlockFeature -> ddx -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureReplaceBlock
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.RootSystemFeature -> ddy -> net.minecraft.world.level.levelgen.feature.RootSystemFeature
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:boolean spaceForTree(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.feature.configurations.RootSystemConfiguration,net.minecraft.core.BlockPosition) -> a
    M:boolean isAllowedTreeSpace(net.minecraft.world.level.block.state.IBlockData,int,int) -> a
    M:boolean placeDirtAndTree(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.feature.configurations.RootSystemConfiguration,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.core.BlockPosition) -> a
    M:void placeDirt(net.minecraft.core.BlockPosition,int,net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.feature.configurations.RootSystemConfiguration,net.minecraft.util.RandomSource) -> a
    M:void placeRootedDirt(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.feature.configurations.RootSystemConfiguration,net.minecraft.util.RandomSource,int,int,net.minecraft.core.BlockPosition$MutableBlockPosition) -> a
    M:void placeRoots(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.feature.configurations.RootSystemConfiguration,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition$MutableBlockPosition) -> a
net.minecraft.world.level.levelgen.feature.ScatteredOreFeature -> ddz -> net.minecraft.world.level.levelgen.feature.ScatteredOreFeature
    F:int MAX_DIST_FROM_ORIGIN -> a
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:void offsetTargetPos(net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,int) -> a
    M:int getRandomPlacementInOneAxisRelativeToOrigin(net.minecraft.util.RandomSource,int) -> a
net.minecraft.world.level.levelgen.feature.SculkPatchFeature -> dea -> net.minecraft.world.level.levelgen.feature.SculkPatchFeature
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:boolean canSpreadFrom(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.feature.SeaPickleFeature -> deb -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureSeaPickel
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.SeagrassFeature -> dec -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureSeaGrass
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.SimpleBlockFeature -> ded -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureBlock
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.SimpleRandomSelectorFeature -> dee -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureRandom2Configuration
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.SnowAndFreezeFeature -> def -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureIceSnow
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.SpikeFeature -> deg -> net.minecraft.world.level.levelgen.feature.WorldGenEnder
    F:int NUMBER_OF_SPIKES -> a
    F:int SPIKE_DISTANCE -> b
    F:com.google.common.cache.LoadingCache SPIKE_CACHE -> c
    M:java.util.List getSpikesForLevel(net.minecraft.world.level.GeneratorAccessSeed) -> a
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:void placeSpike(net.minecraft.world.level.WorldAccess,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureEndSpikeConfiguration,net.minecraft.world.level.levelgen.feature.WorldGenEnder$Spike) -> a
net.minecraft.world.level.levelgen.feature.SpikeFeature$EndSpike -> deg$a -> net.minecraft.world.level.levelgen.feature.WorldGenEnder$Spike
    F:com.mojang.serialization.Codec CODEC -> a
    F:int centerX -> b
    F:int centerZ -> c
    F:int radius -> d
    F:int height -> e
    F:boolean guarded -> f
    F:net.minecraft.world.phys.AxisAlignedBB topBoundingBox -> g
    M:boolean isCenterWithinChunk(net.minecraft.core.BlockPosition) -> a
    M:int getCenterX() -> a
    M:int getCenterZ() -> b
    M:int getRadius() -> c
    M:int getHeight() -> d
    M:boolean isGuarded() -> e
    M:net.minecraft.world.phys.AxisAlignedBB getTopBoundingBox() -> f
net.minecraft.world.level.levelgen.feature.SpikeFeature$SpikeCacheLoader -> deg$b -> net.minecraft.world.level.levelgen.feature.WorldGenEnder$b
    M:java.util.List load(java.lang.Long) -> a
    M:java.lang.Object load(java.lang.Object) -> load
net.minecraft.world.level.levelgen.feature.SpringFeature -> deh -> net.minecraft.world.level.levelgen.feature.WorldGenLiquids
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.TreeFeature -> dei -> net.minecraft.world.level.levelgen.feature.WorldGenTrees
    F:int BLOCK_UPDATE_FLAGS -> a
    M:boolean isVine(net.minecraft.world.level.VirtualLevelReadable,net.minecraft.core.BlockPosition) -> e
    M:boolean isBlockWater(net.minecraft.world.level.VirtualLevelReadable,net.minecraft.core.BlockPosition) -> b
    M:boolean isAirOrLeaves(net.minecraft.world.level.VirtualLevelReadable,net.minecraft.core.BlockPosition) -> c
    M:boolean isReplaceablePlant(net.minecraft.world.level.VirtualLevelReadable,net.minecraft.core.BlockPosition) -> f
    M:void setBlockKnownShape(net.minecraft.world.level.IWorldWriter,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:boolean validTreePos(net.minecraft.world.level.VirtualLevelReadable,net.minecraft.core.BlockPosition) -> d
    M:boolean doPlace(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,java.util.function.BiConsumer,java.util.function.BiConsumer,java.util.function.BiConsumer,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:int getMaxFreeTreeHeight(net.minecraft.world.level.VirtualLevelReadable,int,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:void setBlock(net.minecraft.world.level.IWorldWriter,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:net.minecraft.world.phys.shapes.VoxelShapeDiscrete updateLeaves(net.minecraft.world.level.GeneratorAccess,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,java.util.Set,java.util.Set,java.util.Set) -> a
net.minecraft.world.level.levelgen.feature.TwistingVinesFeature -> dej -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureTwistingVines
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:boolean findFirstAirBlockAboveGround(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition$MutableBlockPosition) -> a
    M:void placeWeepingVinesColumn(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition$MutableBlockPosition,int,int,int) -> a
    M:boolean isInvalidPlacementLocation(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.feature.UnderwaterMagmaFeature -> dek -> net.minecraft.world.level.levelgen.feature.UnderwaterMagmaFeature
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:java.util.OptionalInt getFloorY(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.UnderwaterMagmaConfiguration) -> a
    M:boolean isValidPlacement(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition) -> b
    M:boolean isWaterOrAir(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.feature.VegetationPatchFeature -> del -> net.minecraft.world.level.levelgen.feature.VegetationPatchFeature
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:java.util.Set placeGroundPatch(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.feature.configurations.VegetationPatchConfiguration,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,java.util.function.Predicate,int,int) -> a
    M:void distributeVegetation(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext,net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.feature.configurations.VegetationPatchConfiguration,net.minecraft.util.RandomSource,java.util.Set,int,int) -> a
    M:boolean placeVegetation(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.feature.configurations.VegetationPatchConfiguration,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:boolean placeGround(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.feature.configurations.VegetationPatchConfiguration,java.util.function.Predicate,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition$MutableBlockPosition,int) -> a
net.minecraft.world.level.levelgen.feature.VinesFeature -> dem -> net.minecraft.world.level.levelgen.feature.WorldGenVines
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.VoidStartPlatformFeature -> den -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureEndPlatform
    F:net.minecraft.core.BlockPosition PLATFORM_OFFSET -> a
    F:net.minecraft.world.level.ChunkCoordIntPair PLATFORM_ORIGIN_CHUNK -> b
    F:int PLATFORM_RADIUS -> c
    F:int PLATFORM_RADIUS_CHUNKS -> d
    M:int checkerboardDistance(int,int,int,int) -> a
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
net.minecraft.world.level.levelgen.feature.WaterloggedVegetationPatchFeature -> deo -> net.minecraft.world.level.levelgen.feature.WaterloggedVegetationPatchFeature
    M:java.util.Set placeGroundPatch(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.feature.configurations.VegetationPatchConfiguration,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,java.util.function.Predicate,int,int) -> a
    M:boolean isExposed(net.minecraft.world.level.GeneratorAccessSeed,java.util.Set,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition$MutableBlockPosition) -> a
    M:boolean isExposedDirection(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.core.EnumDirection) -> a
    M:boolean placeVegetation(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.feature.configurations.VegetationPatchConfiguration,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.feature.WeepingVinesFeature -> dep -> net.minecraft.world.level.levelgen.feature.WorldGenFeatureWeepingVines
    M:boolean place(net.minecraft.world.level.levelgen.feature.FeaturePlaceContext) -> a
    M:void placeRoofNetherWart(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:void placeRoofWeepingVines(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> b
    M:void placeWeepingVinesColumn(net.minecraft.world.level.GeneratorAccess,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition$MutableBlockPosition,int,int,int) -> a
net.minecraft.world.level.levelgen.feature.WeightedPlacedFeature -> deq -> net.minecraft.world.level.levelgen.feature.WeightedPlacedFeature
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.core.Holder feature -> b
    F:float chance -> c
    M:boolean place(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.feature.configurations.BlockColumnConfiguration -> der -> net.minecraft.world.level.levelgen.feature.configurations.BlockColumnConfiguration
    F:java.util.List layers -> b
    F:net.minecraft.core.EnumDirection direction -> c
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate allowedPlacement -> d
    F:boolean prioritizeTip -> e
    F:com.mojang.serialization.Codec CODEC -> a
    M:net.minecraft.world.level.levelgen.feature.configurations.BlockColumnConfiguration$Layer layer(net.minecraft.util.valueproviders.IntProvider,net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider) -> a
    M:net.minecraft.world.level.levelgen.feature.configurations.BlockColumnConfiguration simple(net.minecraft.util.valueproviders.IntProvider,net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider) -> b
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.List layers() -> a
    M:net.minecraft.core.EnumDirection direction() -> b
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate allowedPlacement() -> c
    M:boolean prioritizeTip() -> d
net.minecraft.world.level.levelgen.feature.configurations.BlockColumnConfiguration$Layer -> der$a -> net.minecraft.world.level.levelgen.feature.configurations.BlockColumnConfiguration$a
    F:net.minecraft.util.valueproviders.IntProvider height -> b
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider state -> c
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.util.valueproviders.IntProvider height() -> a
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider state() -> b
net.minecraft.world.level.levelgen.feature.configurations.BlockPileConfiguration -> des -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureBlockPileConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider stateProvider -> b
net.minecraft.world.level.levelgen.feature.configurations.BlockStateConfiguration -> det -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureLakeConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.block.state.IBlockData state -> b
net.minecraft.world.level.levelgen.feature.configurations.ColumnFeatureConfiguration -> deu -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureBasaltColumnsConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.util.valueproviders.IntProvider reach -> b
    F:net.minecraft.util.valueproviders.IntProvider height -> c
    M:net.minecraft.util.valueproviders.IntProvider reach() -> a
    M:net.minecraft.util.valueproviders.IntProvider height() -> b
net.minecraft.world.level.levelgen.feature.configurations.CountConfiguration -> dev -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenDecoratorFrequencyConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.util.valueproviders.IntProvider count -> b
    M:net.minecraft.util.valueproviders.IntProvider count() -> a
net.minecraft.world.level.levelgen.feature.configurations.DeltaFeatureConfiguration -> dew -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureDeltaConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.block.state.IBlockData contents -> b
    F:net.minecraft.world.level.block.state.IBlockData rim -> c
    F:net.minecraft.util.valueproviders.IntProvider size -> d
    F:net.minecraft.util.valueproviders.IntProvider rimSize -> e
    M:net.minecraft.world.level.block.state.IBlockData contents() -> a
    M:net.minecraft.world.level.block.state.IBlockData rim() -> b
    M:net.minecraft.util.valueproviders.IntProvider size() -> c
    M:net.minecraft.util.valueproviders.IntProvider rimSize() -> d
net.minecraft.world.level.levelgen.feature.configurations.DiskConfiguration -> dex -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureCircleConfiguration
    F:net.minecraft.world.level.levelgen.feature.stateproviders.RuleBasedBlockStateProvider stateProvider -> b
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate target -> c
    F:net.minecraft.util.valueproviders.IntProvider radius -> d
    F:int halfHeight -> e
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.feature.stateproviders.RuleBasedBlockStateProvider stateProvider() -> a
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate target() -> b
    M:net.minecraft.util.valueproviders.IntProvider radius() -> c
    M:int halfHeight() -> d
net.minecraft.world.level.levelgen.feature.configurations.DripstoneClusterConfiguration -> dey -> net.minecraft.world.level.levelgen.feature.configurations.DripstoneClusterConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:int floorToCeilingSearchRange -> b
    F:net.minecraft.util.valueproviders.IntProvider height -> c
    F:net.minecraft.util.valueproviders.IntProvider radius -> d
    F:int maxStalagmiteStalactiteHeightDiff -> e
    F:int heightDeviation -> f
    F:net.minecraft.util.valueproviders.IntProvider dripstoneBlockLayerThickness -> g
    F:net.minecraft.util.valueproviders.FloatProvider density -> h
    F:net.minecraft.util.valueproviders.FloatProvider wetness -> i
    F:float chanceOfDripstoneColumnAtMaxDistanceFromCenter -> j
    F:int maxDistanceFromEdgeAffectingChanceOfDripstoneColumn -> k
    F:int maxDistanceFromCenterAffectingHeightBias -> l
net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration -> dez -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenEndGatewayConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:java.util.Optional exit -> b
    F:boolean exact -> c
    M:net.minecraft.world.level.levelgen.feature.configurations.WorldGenEndGatewayConfiguration knownExit(net.minecraft.core.BlockPosition,boolean) -> a
    M:net.minecraft.world.level.levelgen.feature.configurations.WorldGenEndGatewayConfiguration delayedExitSearch() -> a
    M:java.util.Optional getExit() -> b
    M:boolean isExitExact() -> c
net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration -> dfa -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration
    F:net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureEmptyConfiguration NONE -> m
    M:java.util.stream.Stream getFeatures() -> e
net.minecraft.world.level.levelgen.feature.configurations.GeodeConfiguration -> dfb -> net.minecraft.world.level.levelgen.feature.configurations.GeodeConfiguration
    F:com.mojang.serialization.Codec CHANCE_RANGE -> a
    F:com.mojang.serialization.Codec CODEC -> b
    F:net.minecraft.world.level.levelgen.GeodeBlockSettings geodeBlockSettings -> c
    F:net.minecraft.world.level.levelgen.GeodeLayerSettings geodeLayerSettings -> d
    F:net.minecraft.world.level.levelgen.GeodeCrackSettings geodeCrackSettings -> e
    F:double usePotentialPlacementsChance -> f
    F:double useAlternateLayer0Chance -> g
    F:boolean placementsRequireLayer0Alternate -> h
    F:net.minecraft.util.valueproviders.IntProvider outerWallDistance -> i
    F:net.minecraft.util.valueproviders.IntProvider distributionPoints -> j
    F:net.minecraft.util.valueproviders.IntProvider pointOffset -> k
    F:int minGenOffset -> l
    F:int maxGenOffset -> n
    F:double noiseMultiplier -> o
    F:int invalidBlocksThreshold -> p
net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration -> dfc -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureMushroomConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider capProvider -> b
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider stemProvider -> c
    F:int foliageRadius -> d
net.minecraft.world.level.levelgen.feature.configurations.LargeDripstoneConfiguration -> dfd -> net.minecraft.world.level.levelgen.feature.configurations.LargeDripstoneConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:int floorToCeilingSearchRange -> b
    F:net.minecraft.util.valueproviders.IntProvider columnRadius -> c
    F:net.minecraft.util.valueproviders.FloatProvider heightScale -> d
    F:float maxColumnRadiusToCaveHeightRatio -> e
    F:net.minecraft.util.valueproviders.FloatProvider stalactiteBluntness -> f
    F:net.minecraft.util.valueproviders.FloatProvider stalagmiteBluntness -> g
    F:net.minecraft.util.valueproviders.FloatProvider windSpeed -> h
    F:int minRadiusForWind -> i
    F:float minBluntnessForWind -> j
net.minecraft.world.level.levelgen.feature.configurations.LayerConfiguration -> dfe -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureFillConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:int height -> b
    F:net.minecraft.world.level.block.state.IBlockData state -> c
net.minecraft.world.level.levelgen.feature.configurations.MultifaceGrowthConfiguration -> dff -> net.minecraft.world.level.levelgen.feature.configurations.MultifaceGrowthConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.block.MultifaceBlock placeBlock -> b
    F:int searchRange -> c
    F:boolean canPlaceOnFloor -> d
    F:boolean canPlaceOnCeiling -> e
    F:boolean canPlaceOnWall -> f
    F:float chanceOfSpreading -> g
    F:net.minecraft.core.HolderSet canBePlacedOn -> h
    F:it.unimi.dsi.fastutil.objects.ObjectArrayList validDirections -> i
    M:com.mojang.serialization.DataResult apply(net.minecraft.world.level.block.Block) -> a
    M:java.util.List getShuffledDirectionsExcept(net.minecraft.util.RandomSource,net.minecraft.core.EnumDirection) -> a
    M:java.util.List getShuffledDirections(net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.levelgen.feature.configurations.NetherForestVegetationConfig -> dfg -> net.minecraft.world.level.levelgen.feature.configurations.NetherForestVegetationConfig
    F:com.mojang.serialization.Codec CODEC -> c
    F:int spreadWidth -> d
    F:int spreadHeight -> e
net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration -> dfh -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureEmptyConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureEmptyConfiguration INSTANCE -> b
net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration -> dfi -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureOreConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:java.util.List targetStates -> b
    F:int size -> c
    F:float discardChanceOnAirExposure -> d
    M:net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration$TargetBlockState target(net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTest,net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration$TargetBlockState -> dfi$a -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureOreConfiguration$a
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTest target -> b
    F:net.minecraft.world.level.block.state.IBlockData state -> c
net.minecraft.world.level.levelgen.feature.configurations.PointedDripstoneConfiguration -> dfj -> net.minecraft.world.level.levelgen.feature.configurations.PointedDripstoneConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:float chanceOfTallerDripstone -> b
    F:float chanceOfDirectionalSpread -> c
    F:float chanceOfSpreadRadius2 -> d
    F:float chanceOfSpreadRadius3 -> e
net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration -> dfk -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfigurationChance
    F:com.mojang.serialization.Codec CODEC -> k
    F:float probability -> l
net.minecraft.world.level.levelgen.feature.configurations.RandomBooleanFeatureConfiguration -> dfl -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureChoiceConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.core.Holder featureTrue -> b
    F:net.minecraft.core.Holder featureFalse -> c
    M:java.util.stream.Stream getFeatures() -> e
net.minecraft.world.level.levelgen.feature.configurations.RandomFeatureConfiguration -> dfm -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureRandomChoiceConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:java.util.List features -> b
    F:net.minecraft.core.Holder defaultFeature -> c
    M:java.util.stream.Stream getFeatures() -> e
net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration -> dfn -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureRandomPatchConfiguration
    F:int tries -> b
    F:int xzSpread -> c
    F:int ySpread -> d
    F:net.minecraft.core.Holder feature -> e
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int tries() -> a
    M:int xzSpread() -> b
    M:int ySpread() -> c
    M:net.minecraft.core.Holder feature() -> d
net.minecraft.world.level.levelgen.feature.configurations.ReplaceBlockConfiguration -> dfo -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureReplaceBlockConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:java.util.List targetStates -> b
net.minecraft.world.level.levelgen.feature.configurations.ReplaceSphereConfiguration -> dfp -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureRadiusConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.block.state.IBlockData targetState -> b
    F:net.minecraft.world.level.block.state.IBlockData replaceState -> c
    F:net.minecraft.util.valueproviders.IntProvider radius -> d
    M:net.minecraft.util.valueproviders.IntProvider radius() -> a
net.minecraft.world.level.levelgen.feature.configurations.RootSystemConfiguration -> dfq -> net.minecraft.world.level.levelgen.feature.configurations.RootSystemConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.core.Holder treeFeature -> b
    F:int requiredVerticalSpaceForTree -> c
    F:int rootRadius -> d
    F:net.minecraft.tags.TagKey rootReplaceable -> e
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider rootStateProvider -> f
    F:int rootPlacementAttempts -> g
    F:int rootColumnMaxHeight -> h
    F:int hangingRootRadius -> i
    F:int hangingRootsVerticalSpan -> j
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider hangingRootStateProvider -> k
    F:int hangingRootPlacementAttempts -> l
    F:int allowedVerticalWaterForTree -> n
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate allowedTreePosition -> o
net.minecraft.world.level.levelgen.feature.configurations.SculkPatchConfiguration -> dfr -> net.minecraft.world.level.levelgen.feature.configurations.SculkPatchConfiguration
    F:int chargeCount -> b
    F:int amountPerCharge -> c
    F:int spreadAttempts -> d
    F:int growthRounds -> e
    F:int spreadRounds -> f
    F:net.minecraft.util.valueproviders.IntProvider extraRareGrowths -> g
    F:float catalystChance -> h
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int chargeCount() -> a
    M:int amountPerCharge() -> b
    M:int spreadAttempts() -> c
    M:int growthRounds() -> d
    M:int spreadRounds() -> f
    M:net.minecraft.util.valueproviders.IntProvider extraRareGrowths() -> g
    M:float catalystChance() -> h
net.minecraft.world.level.levelgen.feature.configurations.SimpleBlockConfiguration -> dfs -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureBlockConfiguration
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider toPlace -> b
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider toPlace() -> a
net.minecraft.world.level.levelgen.feature.configurations.SimpleRandomFeatureConfiguration -> dft -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureRandom2
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.core.HolderSet features -> b
    M:java.util.stream.Stream getFeatures() -> e
net.minecraft.world.level.levelgen.feature.configurations.SpikeConfiguration -> dfu -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureEndSpikeConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:boolean crystalInvulnerable -> b
    F:java.util.List spikes -> c
    F:net.minecraft.core.BlockPosition crystalBeamTarget -> d
    M:boolean isCrystalInvulnerable() -> a
    M:java.util.List getSpikes() -> b
    M:net.minecraft.core.BlockPosition getCrystalBeamTarget() -> c
net.minecraft.world.level.levelgen.feature.configurations.SpringConfiguration -> dfv -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureHellFlowingLavaConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.material.Fluid state -> b
    F:boolean requiresBlockBelow -> c
    F:int rockCount -> d
    F:int holeCount -> e
    F:net.minecraft.core.HolderSet validBlocks -> f
net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration -> dfw -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider trunkProvider -> b
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider dirtProvider -> c
    F:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacer trunkPlacer -> d
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider foliageProvider -> e
    F:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacer foliagePlacer -> f
    F:java.util.Optional rootPlacer -> g
    F:net.minecraft.world.level.levelgen.feature.featuresize.FeatureSize minimumSize -> h
    F:java.util.List decorators -> i
    F:boolean ignoreVines -> j
    F:boolean forceDirt -> k
net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder -> dfw$a -> net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration$a
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider trunkProvider -> a
    F:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacer trunkPlacer -> c
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider foliageProvider -> b
    F:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacer foliagePlacer -> d
    F:java.util.Optional rootPlacer -> e
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider dirtProvider -> f
    F:net.minecraft.world.level.levelgen.feature.featuresize.FeatureSize minimumSize -> g
    F:java.util.List decorators -> h
    F:boolean ignoreVines -> i
    F:boolean forceDirt -> j
    M:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder dirt(net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider) -> a
    M:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder decorators(java.util.List) -> a
    M:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder ignoreVines() -> a
    M:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder forceDirt() -> b
    M:net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration build() -> c
net.minecraft.world.level.levelgen.feature.configurations.TwistingVinesConfig -> dfx -> net.minecraft.world.level.levelgen.feature.configurations.TwistingVinesConfig
    F:int spreadWidth -> b
    F:int spreadHeight -> c
    F:int maxHeight -> d
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int spreadWidth() -> a
    M:int spreadHeight() -> b
    M:int maxHeight() -> c
net.minecraft.world.level.levelgen.feature.configurations.UnderwaterMagmaConfiguration -> dfy -> net.minecraft.world.level.levelgen.feature.configurations.UnderwaterMagmaConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:int floorSearchRange -> b
    F:int placementRadiusAroundFloor -> c
    F:float placementProbabilityPerValidPosition -> d
net.minecraft.world.level.levelgen.feature.configurations.VegetationPatchConfiguration -> dfz -> net.minecraft.world.level.levelgen.feature.configurations.VegetationPatchConfiguration
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.tags.TagKey replaceable -> b
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider groundState -> c
    F:net.minecraft.core.Holder vegetationFeature -> d
    F:net.minecraft.world.level.levelgen.placement.CaveSurface surface -> e
    F:net.minecraft.util.valueproviders.IntProvider depth -> f
    F:float extraBottomBlockChance -> g
    F:int verticalRange -> h
    F:float vegetationChance -> i
    F:net.minecraft.util.valueproviders.IntProvider xzRadius -> j
    F:float extraEdgeColumnChance -> k
net.minecraft.world.level.levelgen.feature.featuresize.FeatureSize -> dgb -> net.minecraft.world.level.levelgen.feature.featuresize.FeatureSize
    F:com.mojang.serialization.Codec CODEC -> a
    F:int MAX_WIDTH -> b
    F:java.util.OptionalInt minClippedHeight -> c
    M:com.mojang.serialization.codecs.RecordCodecBuilder minClippedHeightCodec() -> a
    M:java.util.OptionalInt minClippedHeight() -> c
net.minecraft.world.level.levelgen.feature.featuresize.FeatureSizeType -> dgc -> net.minecraft.world.level.levelgen.feature.featuresize.FeatureSizeType
    F:net.minecraft.world.level.levelgen.feature.featuresize.FeatureSizeType TWO_LAYERS_FEATURE_SIZE -> a
    F:net.minecraft.world.level.levelgen.feature.featuresize.FeatureSizeType THREE_LAYERS_FEATURE_SIZE -> b
    F:com.mojang.serialization.Codec codec -> c
    M:net.minecraft.world.level.levelgen.feature.featuresize.FeatureSizeType register(java.lang.String,com.mojang.serialization.Codec) -> a
    M:com.mojang.serialization.Codec codec() -> a
net.minecraft.world.level.levelgen.feature.featuresize.ThreeLayersFeatureSize -> dgd -> net.minecraft.world.level.levelgen.feature.featuresize.FeatureSizeThreeLayers
    F:com.mojang.serialization.Codec CODEC -> d
    F:int limit -> e
    F:int upperLimit -> f
    F:int lowerSize -> g
    F:int middleSize -> h
    F:int upperSize -> i
    M:net.minecraft.world.level.levelgen.feature.featuresize.FeatureSizeType type() -> b
    M:int getSizeAtHeight(int,int) -> a
net.minecraft.world.level.levelgen.feature.featuresize.TwoLayersFeatureSize -> dge -> net.minecraft.world.level.levelgen.feature.featuresize.FeatureSizeTwoLayers
    F:com.mojang.serialization.Codec CODEC -> d
    F:int limit -> e
    F:int lowerSize -> f
    F:int upperSize -> g
    M:net.minecraft.world.level.levelgen.feature.featuresize.FeatureSizeType type() -> b
    M:int getSizeAtHeight(int,int) -> a
net.minecraft.world.level.levelgen.feature.foliageplacers.AcaciaFoliagePlacer -> dgg -> net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerAcacia
    F:com.mojang.serialization.Codec CODEC -> a
    M:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers type() -> a
    M:void createFoliage(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration,int,net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer$FoliageAttachment,int,int,int) -> a
    M:int foliageHeight(net.minecraft.util.RandomSource,int,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:boolean shouldSkipLocation(net.minecraft.util.RandomSource,int,int,int,int,boolean) -> a
net.minecraft.world.level.levelgen.feature.foliageplacers.BlobFoliagePlacer -> dgh -> net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerBlob
    F:com.mojang.serialization.Codec CODEC -> a
    F:int height -> b
    M:com.mojang.datafixers.Products$P3 blobParts(com.mojang.serialization.codecs.RecordCodecBuilder$Instance) -> a
    M:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers type() -> a
    M:void createFoliage(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration,int,net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer$FoliageAttachment,int,int,int) -> a
    M:int foliageHeight(net.minecraft.util.RandomSource,int,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:boolean shouldSkipLocation(net.minecraft.util.RandomSource,int,int,int,int,boolean) -> a
net.minecraft.world.level.levelgen.feature.foliageplacers.BushFoliagePlacer -> dgi -> net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerBush
    F:com.mojang.serialization.Codec CODEC -> c
    M:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers type() -> a
    M:void createFoliage(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration,int,net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer$FoliageAttachment,int,int,int) -> a
    M:boolean shouldSkipLocation(net.minecraft.util.RandomSource,int,int,int,int,boolean) -> a
net.minecraft.world.level.levelgen.feature.foliageplacers.DarkOakFoliagePlacer -> dgj -> net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerDarkOak
    F:com.mojang.serialization.Codec CODEC -> a
    M:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers type() -> a
    M:void createFoliage(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration,int,net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer$FoliageAttachment,int,int,int) -> a
    M:int foliageHeight(net.minecraft.util.RandomSource,int,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:boolean shouldSkipLocationSigned(net.minecraft.util.RandomSource,int,int,int,int,boolean) -> b
    M:boolean shouldSkipLocation(net.minecraft.util.RandomSource,int,int,int,int,boolean) -> a
net.minecraft.world.level.levelgen.feature.foliageplacers.FancyFoliagePlacer -> dgk -> net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerFancy
    F:com.mojang.serialization.Codec CODEC -> c
    M:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers type() -> a
    M:void createFoliage(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration,int,net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer$FoliageAttachment,int,int,int) -> a
    M:boolean shouldSkipLocation(net.minecraft.util.RandomSource,int,int,int,int,boolean) -> a
net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer -> dgl -> net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacer
    F:com.mojang.serialization.Codec CODEC -> d
    F:net.minecraft.util.valueproviders.IntProvider radius -> e
    F:net.minecraft.util.valueproviders.IntProvider offset -> f
    M:com.mojang.datafixers.Products$P2 foliagePlacerParts(com.mojang.serialization.codecs.RecordCodecBuilder$Instance) -> b
    M:void createFoliage(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration,int,net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer$FoliageAttachment,int,int) -> a
    M:int foliageRadius(net.minecraft.util.RandomSource,int) -> a
    M:int offset(net.minecraft.util.RandomSource) -> a
    M:boolean shouldSkipLocationSigned(net.minecraft.util.RandomSource,int,int,int,int,boolean) -> b
    M:void placeLeavesRow(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration,net.minecraft.core.BlockPosition,int,int,boolean) -> a
    M:void tryPlaceLeaf(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer$FoliageAttachment -> dgl$a -> net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacer$a
    F:net.minecraft.core.BlockPosition pos -> a
    F:int radiusOffset -> b
    F:boolean doubleTrunk -> c
    M:net.minecraft.core.BlockPosition pos() -> a
    M:int radiusOffset() -> b
    M:boolean doubleTrunk() -> c
net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacerType -> dgm -> net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers
    F:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers BLOB_FOLIAGE_PLACER -> a
    F:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers SPRUCE_FOLIAGE_PLACER -> b
    F:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers PINE_FOLIAGE_PLACER -> c
    F:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers ACACIA_FOLIAGE_PLACER -> d
    F:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers BUSH_FOLIAGE_PLACER -> e
    F:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers FANCY_FOLIAGE_PLACER -> f
    F:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers MEGA_JUNGLE_FOLIAGE_PLACER -> g
    F:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers MEGA_PINE_FOLIAGE_PLACER -> h
    F:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers DARK_OAK_FOLIAGE_PLACER -> i
    F:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers RANDOM_SPREAD_FOLIAGE_PLACER -> j
    F:com.mojang.serialization.Codec codec -> k
    M:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers register(java.lang.String,com.mojang.serialization.Codec) -> a
    M:com.mojang.serialization.Codec codec() -> a
net.minecraft.world.level.levelgen.feature.foliageplacers.MegaJungleFoliagePlacer -> dgn -> net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerJungle
    F:com.mojang.serialization.Codec CODEC -> a
    F:int height -> b
    M:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers type() -> a
    M:void createFoliage(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration,int,net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer$FoliageAttachment,int,int,int) -> a
    M:int foliageHeight(net.minecraft.util.RandomSource,int,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:boolean shouldSkipLocation(net.minecraft.util.RandomSource,int,int,int,int,boolean) -> a
net.minecraft.world.level.levelgen.feature.foliageplacers.MegaPineFoliagePlacer -> dgo -> net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerMegaPine
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.util.valueproviders.IntProvider crownHeight -> b
    M:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers type() -> a
    M:void createFoliage(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration,int,net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer$FoliageAttachment,int,int,int) -> a
    M:int foliageHeight(net.minecraft.util.RandomSource,int,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:boolean shouldSkipLocation(net.minecraft.util.RandomSource,int,int,int,int,boolean) -> a
net.minecraft.world.level.levelgen.feature.foliageplacers.PineFoliagePlacer -> dgp -> net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerPine
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.util.valueproviders.IntProvider height -> b
    M:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers type() -> a
    M:void createFoliage(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration,int,net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer$FoliageAttachment,int,int,int) -> a
    M:int foliageRadius(net.minecraft.util.RandomSource,int) -> a
    M:int foliageHeight(net.minecraft.util.RandomSource,int,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:boolean shouldSkipLocation(net.minecraft.util.RandomSource,int,int,int,int,boolean) -> a
net.minecraft.world.level.levelgen.feature.foliageplacers.RandomSpreadFoliagePlacer -> dgq -> net.minecraft.world.level.levelgen.feature.foliageplacers.RandomSpreadFoliagePlacer
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.util.valueproviders.IntProvider foliageHeight -> b
    F:int leafPlacementAttempts -> c
    M:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers type() -> a
    M:void createFoliage(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration,int,net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer$FoliageAttachment,int,int,int) -> a
    M:int foliageHeight(net.minecraft.util.RandomSource,int,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:boolean shouldSkipLocation(net.minecraft.util.RandomSource,int,int,int,int,boolean) -> a
net.minecraft.world.level.levelgen.feature.foliageplacers.SpruceFoliagePlacer -> dgr -> net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacerSpruce
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.util.valueproviders.IntProvider trunkHeight -> b
    M:net.minecraft.world.level.levelgen.feature.foliageplacers.WorldGenFoilagePlacers type() -> a
    M:void createFoliage(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration,int,net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer$FoliageAttachment,int,int,int) -> a
    M:int foliageHeight(net.minecraft.util.RandomSource,int,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:boolean shouldSkipLocation(net.minecraft.util.RandomSource,int,int,int,int,boolean) -> a
net.minecraft.world.level.levelgen.feature.rootplacers.AboveRootPlacement -> dgu -> net.minecraft.world.level.levelgen.feature.rootplacers.AboveRootPlacement
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider aboveRootProvider -> b
    F:float aboveRootPlacementChance -> c
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider aboveRootProvider() -> a
    M:float aboveRootPlacementChance() -> b
net.minecraft.world.level.levelgen.feature.rootplacers.MangroveRootPlacement -> dgv -> net.minecraft.world.level.levelgen.feature.rootplacers.MangroveRootPlacement
    F:net.minecraft.core.HolderSet canGrowThrough -> b
    F:net.minecraft.core.HolderSet muddyRootsIn -> c
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider muddyRootsProvider -> d
    F:int maxRootWidth -> e
    F:int maxRootLength -> f
    F:float randomSkewChance -> g
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.HolderSet canGrowThrough() -> a
    M:net.minecraft.core.HolderSet muddyRootsIn() -> b
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider muddyRootsProvider() -> c
    M:int maxRootWidth() -> d
    M:int maxRootLength() -> e
    M:float randomSkewChance() -> f
net.minecraft.world.level.levelgen.feature.rootplacers.MangroveRootPlacer -> dgw -> net.minecraft.world.level.levelgen.feature.rootplacers.MangroveRootPlacer
    F:int ROOT_WIDTH_LIMIT -> a
    F:int ROOT_LENGTH_LIMIT -> b
    F:com.mojang.serialization.Codec CODEC -> c
    F:net.minecraft.world.level.levelgen.feature.rootplacers.MangroveRootPlacement mangroveRootPlacement -> h
    M:boolean placeRoots(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:boolean simulateRoots(net.minecraft.world.level.VirtualLevelReadable,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.core.BlockPosition,java.util.List,int) -> a
    M:java.util.List potentialRootPositions(net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:boolean canPlaceRoot(net.minecraft.world.level.VirtualLevelReadable,net.minecraft.core.BlockPosition) -> a
    M:void placeRoot(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:net.minecraft.world.level.levelgen.feature.rootplacers.RootPlacerType type() -> a
net.minecraft.world.level.levelgen.feature.rootplacers.RootPlacer -> dgx -> net.minecraft.world.level.levelgen.feature.rootplacers.RootPlacer
    F:com.mojang.serialization.Codec CODEC -> d
    F:net.minecraft.util.valueproviders.IntProvider trunkOffsetY -> e
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider rootProvider -> f
    F:java.util.Optional aboveRootPlacement -> g
    M:com.mojang.datafixers.Products$P3 rootPlacerParts(com.mojang.serialization.codecs.RecordCodecBuilder$Instance) -> a
    M:boolean canPlaceRoot(net.minecraft.world.level.VirtualLevelReadable,net.minecraft.core.BlockPosition) -> a
    M:void placeRoot(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:net.minecraft.world.level.block.state.IBlockData getPotentiallyWaterloggedState(net.minecraft.world.level.VirtualLevelReadable,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.core.BlockPosition getTrunkOrigin(net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.levelgen.feature.rootplacers.RootPlacerType -> dgy -> net.minecraft.world.level.levelgen.feature.rootplacers.RootPlacerType
    F:net.minecraft.world.level.levelgen.feature.rootplacers.RootPlacerType MANGROVE_ROOT_PLACER -> a
    F:com.mojang.serialization.Codec codec -> b
    M:net.minecraft.world.level.levelgen.feature.rootplacers.RootPlacerType register(java.lang.String,com.mojang.serialization.Codec) -> a
    M:com.mojang.serialization.Codec codec() -> a
net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider -> dgz -> net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider
    F:com.mojang.serialization.Codec CODEC -> a
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviderSimpl simple(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviderSimpl simple(net.minecraft.world.level.block.Block) -> a
net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProviderType -> dha -> net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviders
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviders SIMPLE_STATE_PROVIDER -> a
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviders WEIGHTED_STATE_PROVIDER -> b
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviders NOISE_THRESHOLD_PROVIDER -> c
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviders NOISE_PROVIDER -> d
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviders DUAL_NOISE_PROVIDER -> e
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviders ROTATED_BLOCK_PROVIDER -> f
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviders RANDOMIZED_INT_STATE_PROVIDER -> g
    F:com.mojang.serialization.Codec codec -> h
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviders register(java.lang.String,com.mojang.serialization.Codec) -> a
    M:com.mojang.serialization.Codec codec() -> a
net.minecraft.world.level.levelgen.feature.stateproviders.DualNoiseProvider -> dhb -> net.minecraft.world.level.levelgen.feature.stateproviders.DualNoiseProvider
    F:com.mojang.serialization.Codec CODEC -> b
    F:net.minecraft.util.InclusiveRange variety -> i
    F:net.minecraft.world.level.levelgen.synth.NormalNoise$NoiseParameters slowNoiseParameters -> j
    F:float slowScale -> k
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal slowNoise -> l
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviders type() -> a
    M:net.minecraft.world.level.block.state.IBlockData getState(net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:double getSlowNoiseValue(net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.feature.stateproviders.NoiseBasedStateProvider -> dhc -> net.minecraft.world.level.levelgen.feature.stateproviders.NoiseBasedStateProvider
    F:long seed -> c
    F:net.minecraft.world.level.levelgen.synth.NormalNoise$NoiseParameters parameters -> d
    F:float scale -> e
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal noise -> f
    M:com.mojang.datafixers.Products$P3 noiseCodec(com.mojang.serialization.codecs.RecordCodecBuilder$Instance) -> a
    M:double getNoiseValue(net.minecraft.core.BlockPosition,double) -> a
net.minecraft.world.level.levelgen.feature.stateproviders.NoiseProvider -> dhd -> net.minecraft.world.level.levelgen.feature.stateproviders.NoiseProvider
    F:com.mojang.serialization.Codec CODEC -> g
    F:java.util.List states -> h
    M:com.mojang.datafixers.Products$P4 noiseProviderCodec(com.mojang.serialization.codecs.RecordCodecBuilder$Instance) -> b
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviders type() -> a
    M:net.minecraft.world.level.block.state.IBlockData getState(net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.IBlockData getRandomState(java.util.List,net.minecraft.core.BlockPosition,double) -> a
    M:net.minecraft.world.level.block.state.IBlockData getRandomState(java.util.List,double) -> a
net.minecraft.world.level.levelgen.feature.stateproviders.NoiseThresholdProvider -> dhe -> net.minecraft.world.level.levelgen.feature.stateproviders.NoiseThresholdProvider
    F:com.mojang.serialization.Codec CODEC -> b
    F:float threshold -> g
    F:float highChance -> h
    F:net.minecraft.world.level.block.state.IBlockData defaultState -> i
    F:java.util.List lowStates -> j
    F:java.util.List highStates -> k
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviders type() -> a
    M:net.minecraft.world.level.block.state.IBlockData getState(net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.feature.stateproviders.RandomizedIntStateProvider -> dhf -> net.minecraft.world.level.levelgen.feature.stateproviders.RandomizedIntStateProvider
    F:com.mojang.serialization.Codec CODEC -> b
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider source -> c
    F:java.lang.String propertyName -> d
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger property -> e
    F:net.minecraft.util.valueproviders.IntProvider values -> f
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviders type() -> a
    M:net.minecraft.world.level.block.state.IBlockData getState(net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.block.state.properties.BlockStateInteger findProperty(net.minecraft.world.level.block.state.IBlockData,java.lang.String) -> a
net.minecraft.world.level.levelgen.feature.stateproviders.RotatedBlockProvider -> dhg -> net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviderRotatedBlock
    F:com.mojang.serialization.Codec CODEC -> b
    F:net.minecraft.world.level.block.Block block -> c
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviders type() -> a
    M:net.minecraft.world.level.block.state.IBlockData getState(net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.feature.stateproviders.RuleBasedBlockStateProvider -> dhh -> net.minecraft.world.level.levelgen.feature.stateproviders.RuleBasedBlockStateProvider
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider fallback -> b
    F:java.util.List rules -> c
    F:com.mojang.serialization.Codec CODEC -> a
    M:net.minecraft.world.level.levelgen.feature.stateproviders.RuleBasedBlockStateProvider simple(net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider) -> a
    M:net.minecraft.world.level.levelgen.feature.stateproviders.RuleBasedBlockStateProvider simple(net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.world.level.block.state.IBlockData getState(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider fallback() -> a
    M:java.util.List rules() -> b
net.minecraft.world.level.levelgen.feature.stateproviders.RuleBasedBlockStateProvider$Rule -> dhh$a -> net.minecraft.world.level.levelgen.feature.stateproviders.RuleBasedBlockStateProvider$a
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate ifTrue -> b
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider then -> c
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate ifTrue() -> a
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider then() -> b
net.minecraft.world.level.levelgen.feature.stateproviders.SimpleStateProvider -> dhi -> net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviderSimpl
    F:com.mojang.serialization.Codec CODEC -> b
    F:net.minecraft.world.level.block.state.IBlockData state -> c
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviders type() -> a
    M:net.minecraft.world.level.block.state.IBlockData getState(net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.feature.stateproviders.WeightedStateProvider -> dhj -> net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviderWeighted
    F:com.mojang.serialization.Codec CODEC -> b
    F:net.minecraft.util.random.SimpleWeightedRandomList weightedList -> c
    M:com.mojang.serialization.DataResult create(net.minecraft.util.random.SimpleWeightedRandomList) -> a
    M:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProviders type() -> a
    M:net.minecraft.world.level.block.state.IBlockData getState(net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.feature.treedecorators.AlterGroundDecorator -> dhl -> net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTreeAlterGround
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider provider -> b
    M:net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTrees type() -> a
    M:void place(net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator$Context) -> a
    M:void placeCircle(net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator$Context,net.minecraft.core.BlockPosition) -> a
    M:void placeBlockAt(net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator$Context,net.minecraft.core.BlockPosition) -> b
net.minecraft.world.level.levelgen.feature.treedecorators.AttachedToLeavesDecorator -> dhm -> net.minecraft.world.level.levelgen.feature.treedecorators.AttachedToLeavesDecorator
    F:com.mojang.serialization.Codec CODEC -> a
    F:float probability -> b
    F:int exclusionRadiusXZ -> c
    F:int exclusionRadiusY -> d
    F:net.minecraft.world.level.levelgen.feature.stateproviders.WorldGenFeatureStateProvider blockProvider -> e
    F:int requiredEmptyBlocks -> f
    F:java.util.List directions -> g
    M:void place(net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator$Context) -> a
    M:boolean hasRequiredEmptyBlocks(net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator$Context,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTrees type() -> a
net.minecraft.world.level.levelgen.feature.treedecorators.BeehiveDecorator -> dhn -> net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTreeBeehive
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.core.EnumDirection WORLDGEN_FACING -> b
    F:float probability -> d
    M:net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTrees type() -> a
    M:void place(net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator$Context) -> a
net.minecraft.world.level.levelgen.feature.treedecorators.CocoaDecorator -> dho -> net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTreeCocoa
    F:com.mojang.serialization.Codec CODEC -> a
    F:float probability -> b
    M:net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTrees type() -> a
    M:void place(net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator$Context) -> a
net.minecraft.world.level.levelgen.feature.treedecorators.LeaveVineDecorator -> dhp -> net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTreeVineLeaves
    F:com.mojang.serialization.Codec CODEC -> a
    F:float probability -> b
    M:net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTrees type() -> a
    M:void place(net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator$Context) -> a
    M:void addHangingVine(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.properties.BlockStateBoolean,net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator$Context) -> a
net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator -> dhq -> net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTree
    F:com.mojang.serialization.Codec CODEC -> h
net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator$Context -> dhq$a -> net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTree$a
    F:net.minecraft.world.level.VirtualLevelReadable level -> a
    F:java.util.function.BiConsumer decorationSetter -> b
    F:net.minecraft.util.RandomSource random -> c
    F:it.unimi.dsi.fastutil.objects.ObjectArrayList logs -> d
    F:it.unimi.dsi.fastutil.objects.ObjectArrayList leaves -> e
    F:it.unimi.dsi.fastutil.objects.ObjectArrayList roots -> f
    M:void placeVine(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.properties.BlockStateBoolean) -> a
    M:void setBlock(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isAir(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.VirtualLevelReadable level() -> a
    M:net.minecraft.util.RandomSource random() -> b
    M:it.unimi.dsi.fastutil.objects.ObjectArrayList logs() -> c
    M:it.unimi.dsi.fastutil.objects.ObjectArrayList leaves() -> d
    M:it.unimi.dsi.fastutil.objects.ObjectArrayList roots() -> e
net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecoratorType -> dhr -> net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTrees
    F:net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTrees TRUNK_VINE -> a
    F:net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTrees LEAVE_VINE -> b
    F:net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTrees COCOA -> c
    F:net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTrees BEEHIVE -> d
    F:net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTrees ALTER_GROUND -> e
    F:net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTrees ATTACHED_TO_LEAVES -> f
    F:com.mojang.serialization.Codec codec -> g
    M:net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTrees register(java.lang.String,com.mojang.serialization.Codec) -> a
    M:com.mojang.serialization.Codec codec() -> a
net.minecraft.world.level.levelgen.feature.treedecorators.TrunkVineDecorator -> dhs -> net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTreeVineTrunk
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTreeVineTrunk INSTANCE -> b
    M:net.minecraft.world.level.levelgen.feature.treedecorators.WorldGenFeatureTrees type() -> a
    M:void place(net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator$Context) -> a
net.minecraft.world.level.levelgen.feature.trunkplacers.BendingTrunkPlacer -> dhu -> net.minecraft.world.level.levelgen.feature.trunkplacers.BendingTrunkPlacer
    F:com.mojang.serialization.Codec CODEC -> a
    F:int minHeightForLeaves -> b
    F:net.minecraft.util.valueproviders.IntProvider bendLength -> h
    M:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers type() -> a
    M:java.util.List placeTrunk(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,int,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
net.minecraft.world.level.levelgen.feature.trunkplacers.DarkOakTrunkPlacer -> dhv -> net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacerDarkOak
    F:com.mojang.serialization.Codec CODEC -> a
    M:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers type() -> a
    M:java.util.List placeTrunk(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,int,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
net.minecraft.world.level.levelgen.feature.trunkplacers.FancyTrunkPlacer -> dhw -> net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacerFancy
    F:com.mojang.serialization.Codec CODEC -> a
    F:double TRUNK_HEIGHT_SCALE -> b
    F:double CLUSTER_DENSITY_MAGIC -> h
    F:double BRANCH_SLOPE -> i
    F:double BRANCH_LENGTH_MAGIC -> j
    M:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers type() -> a
    M:java.util.List placeTrunk(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,int,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:boolean makeLimb(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,boolean,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:int getSteps(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.EnumDirection$EnumAxis getLogAxis(net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:boolean trimBranches(int,int) -> a
    M:void makeBranches(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,int,net.minecraft.core.BlockPosition,java.util.List,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:float treeShape(int,int) -> b
net.minecraft.world.level.levelgen.feature.trunkplacers.FancyTrunkPlacer$FoliageCoords -> dhw$a -> net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacerFancy$a
    F:net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer$FoliageAttachment attachment -> a
    F:int branchBase -> b
    M:int getBranchBase() -> a
net.minecraft.world.level.levelgen.feature.trunkplacers.ForkingTrunkPlacer -> dhx -> net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacerForking
    F:com.mojang.serialization.Codec CODEC -> a
    M:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers type() -> a
    M:java.util.List placeTrunk(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,int,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
net.minecraft.world.level.levelgen.feature.trunkplacers.GiantTrunkPlacer -> dhy -> net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacerGiant
    F:com.mojang.serialization.Codec CODEC -> a
    M:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers type() -> a
    M:java.util.List placeTrunk(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,int,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:void placeLogIfFreeWithOffset(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration,net.minecraft.core.BlockPosition,int,int,int) -> a
net.minecraft.world.level.levelgen.feature.trunkplacers.MegaJungleTrunkPlacer -> dhz -> net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacerMegaJungle
    F:com.mojang.serialization.Codec CODEC -> b
    M:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers type() -> a
    M:java.util.List placeTrunk(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,int,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
net.minecraft.world.level.levelgen.feature.trunkplacers.StraightTrunkPlacer -> dia -> net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacerStraight
    F:com.mojang.serialization.Codec CODEC -> a
    M:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers type() -> a
    M:java.util.List placeTrunk(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,int,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacer -> dib -> net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacer
    F:com.mojang.serialization.Codec CODEC -> c
    F:int MAX_BASE_HEIGHT -> a
    F:int MAX_RAND -> b
    F:int MAX_HEIGHT -> d
    F:int baseHeight -> e
    F:int heightRandA -> f
    F:int heightRandB -> g
    M:com.mojang.datafixers.Products$P3 trunkPlacerParts(com.mojang.serialization.codecs.RecordCodecBuilder$Instance) -> a
    M:int getTreeHeight(net.minecraft.util.RandomSource) -> a
    M:boolean isDirt(net.minecraft.world.level.VirtualLevelReadable,net.minecraft.core.BlockPosition) -> c
    M:void setDirtAt(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:boolean placeLog(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> b
    M:boolean placeLog(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration,java.util.function.Function) -> a
    M:void placeLogIfFree(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:boolean validTreePos(net.minecraft.world.level.VirtualLevelReadable,net.minecraft.core.BlockPosition) -> a
    M:boolean isFree(net.minecraft.world.level.VirtualLevelReadable,net.minecraft.core.BlockPosition) -> b
net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacerType -> dic -> net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers
    F:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers STRAIGHT_TRUNK_PLACER -> a
    F:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers FORKING_TRUNK_PLACER -> b
    F:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers GIANT_TRUNK_PLACER -> c
    F:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers MEGA_JUNGLE_TRUNK_PLACER -> d
    F:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers DARK_OAK_TRUNK_PLACER -> e
    F:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers FANCY_TRUNK_PLACER -> f
    F:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers BENDING_TRUNK_PLACER -> g
    F:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers UPWARDS_BRANCHING_TRUNK_PLACER -> h
    F:com.mojang.serialization.Codec codec -> i
    M:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers register(java.lang.String,com.mojang.serialization.Codec) -> a
    M:com.mojang.serialization.Codec codec() -> a
net.minecraft.world.level.levelgen.feature.trunkplacers.UpwardsBranchingTrunkPlacer -> did -> net.minecraft.world.level.levelgen.feature.trunkplacers.UpwardsBranchingTrunkPlacer
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.util.valueproviders.IntProvider extraBranchSteps -> b
    F:float placeBranchPerLogProbability -> h
    F:net.minecraft.util.valueproviders.IntProvider extraBranchLength -> i
    F:net.minecraft.core.HolderSet canGrowThrough -> j
    M:net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacers type() -> a
    M:java.util.List placeTrunk(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,int,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration) -> a
    M:void placeBranch(net.minecraft.world.level.VirtualLevelReadable,java.util.function.BiConsumer,net.minecraft.util.RandomSource,int,net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureTreeConfiguration,java.util.List,net.minecraft.core.BlockPosition$MutableBlockPosition,int,net.minecraft.core.EnumDirection,int,int) -> a
    M:boolean validTreePos(net.minecraft.world.level.VirtualLevelReadable,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.flat.FlatLayerInfo -> dif -> net.minecraft.world.level.levelgen.flat.WorldGenFlatLayerInfo
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.block.Block block -> b
    F:int height -> c
    M:int getHeight() -> a
    M:net.minecraft.world.level.block.state.IBlockData getBlockState() -> b
net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorPreset -> dig -> net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorPreset
    F:net.minecraft.core.Holder displayItem -> c
    F:net.minecraft.world.level.levelgen.flat.GeneratorSettingsFlat settings -> d
    F:com.mojang.serialization.Codec DIRECT_CODEC -> a
    F:com.mojang.serialization.Codec CODEC -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.Holder displayItem() -> a
    M:net.minecraft.world.level.levelgen.flat.GeneratorSettingsFlat settings() -> b
net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorPresets -> dih -> net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorPresets
    F:net.minecraft.resources.ResourceKey CLASSIC_FLAT -> a
    F:net.minecraft.resources.ResourceKey TUNNELERS_DREAM -> b
    F:net.minecraft.resources.ResourceKey WATER_WORLD -> c
    F:net.minecraft.resources.ResourceKey OVERWORLD -> d
    F:net.minecraft.resources.ResourceKey SNOWY_KINGDOM -> e
    F:net.minecraft.resources.ResourceKey BOTTOMLESS_PIT -> f
    F:net.minecraft.resources.ResourceKey DESERT -> g
    F:net.minecraft.resources.ResourceKey REDSTONE_READY -> h
    F:net.minecraft.resources.ResourceKey THE_VOID -> i
    M:net.minecraft.core.Holder bootstrap(net.minecraft.core.IRegistry) -> a
    M:net.minecraft.resources.ResourceKey register(java.lang.String) -> a
net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorPresets$Bootstrap -> dih$a -> net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorPresets$a
    F:net.minecraft.core.IRegistry presets -> a
    F:net.minecraft.core.IRegistry biomes -> b
    F:net.minecraft.core.IRegistry structureSets -> c
    M:net.minecraft.core.Holder register(net.minecraft.resources.ResourceKey,net.minecraft.world.level.IMaterial,net.minecraft.resources.ResourceKey,java.util.Set,boolean,boolean,net.minecraft.world.level.levelgen.flat.FlatLayerInfo[]) -> a
    M:net.minecraft.core.Holder run() -> a
net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings -> dii -> net.minecraft.world.level.levelgen.flat.GeneratorSettingsFlat
    F:org.slf4j.Logger LOGGER -> b
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.core.IRegistry biomes -> c
    F:java.util.Optional structureOverrides -> d
    F:java.util.List layersInfo -> e
    F:net.minecraft.core.Holder biome -> f
    F:java.util.List layers -> g
    F:boolean voidGen -> h
    F:boolean decoration -> i
    F:boolean addLakes -> j
    M:com.mojang.serialization.DataResult validateHeight(net.minecraft.world.level.levelgen.flat.GeneratorSettingsFlat) -> a
    M:net.minecraft.world.level.levelgen.flat.GeneratorSettingsFlat withLayers(java.util.List,java.util.Optional) -> a
    M:void setDecoration() -> a
    M:void setAddLakes() -> b
    M:net.minecraft.world.level.biome.BiomeSettingsGeneration adjustGenerationSettings(net.minecraft.core.Holder) -> a
    M:java.util.Optional structureOverrides() -> c
    M:net.minecraft.core.Holder getBiome() -> d
    M:void setBiome(net.minecraft.core.Holder) -> b
    M:java.util.List getLayersInfo() -> e
    M:java.util.List getLayers() -> f
    M:void updateLayers() -> g
    M:net.minecraft.world.level.levelgen.flat.GeneratorSettingsFlat getDefault(net.minecraft.core.IRegistry,net.minecraft.core.IRegistry) -> a
net.minecraft.world.level.levelgen.heightproviders.BiasedToBottomHeight -> dik -> net.minecraft.world.level.levelgen.heightproviders.BiasedToBottomHeight
    F:com.mojang.serialization.Codec CODEC -> a
    F:org.slf4j.Logger LOGGER -> b
    F:net.minecraft.world.level.levelgen.VerticalAnchor minInclusive -> d
    F:net.minecraft.world.level.levelgen.VerticalAnchor maxInclusive -> e
    F:int inner -> f
    M:net.minecraft.world.level.levelgen.heightproviders.BiasedToBottomHeight of(net.minecraft.world.level.levelgen.VerticalAnchor,net.minecraft.world.level.levelgen.VerticalAnchor,int) -> a
    M:int sample(net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.WorldGenerationContext) -> a
    M:net.minecraft.world.level.levelgen.heightproviders.HeightProviderType getType() -> a
net.minecraft.world.level.levelgen.heightproviders.ConstantHeight -> dil -> net.minecraft.world.level.levelgen.heightproviders.ConstantHeight
    F:net.minecraft.world.level.levelgen.heightproviders.ConstantHeight ZERO -> a
    F:com.mojang.serialization.Codec CODEC -> b
    F:net.minecraft.world.level.levelgen.VerticalAnchor value -> d
    M:net.minecraft.world.level.levelgen.heightproviders.ConstantHeight of(net.minecraft.world.level.levelgen.VerticalAnchor) -> a
    M:net.minecraft.world.level.levelgen.VerticalAnchor getValue() -> b
    M:int sample(net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.WorldGenerationContext) -> a
    M:net.minecraft.world.level.levelgen.heightproviders.HeightProviderType getType() -> a
net.minecraft.world.level.levelgen.heightproviders.HeightProvider -> dim -> net.minecraft.world.level.levelgen.heightproviders.HeightProvider
    F:com.mojang.serialization.Codec CONSTANT_OR_DISPATCH_CODEC -> a
    F:com.mojang.serialization.Codec CODEC -> c
net.minecraft.world.level.levelgen.heightproviders.HeightProviderType -> din -> net.minecraft.world.level.levelgen.heightproviders.HeightProviderType
    F:net.minecraft.world.level.levelgen.heightproviders.HeightProviderType CONSTANT -> a
    F:net.minecraft.world.level.levelgen.heightproviders.HeightProviderType UNIFORM -> b
    F:net.minecraft.world.level.levelgen.heightproviders.HeightProviderType BIASED_TO_BOTTOM -> c
    F:net.minecraft.world.level.levelgen.heightproviders.HeightProviderType VERY_BIASED_TO_BOTTOM -> d
    F:net.minecraft.world.level.levelgen.heightproviders.HeightProviderType TRAPEZOID -> e
    F:net.minecraft.world.level.levelgen.heightproviders.HeightProviderType WEIGHTED_LIST -> f
    M:net.minecraft.world.level.levelgen.heightproviders.HeightProviderType register(java.lang.String,com.mojang.serialization.Codec) -> a
net.minecraft.world.level.levelgen.heightproviders.TrapezoidHeight -> dio -> net.minecraft.world.level.levelgen.heightproviders.TrapezoidHeight
    F:com.mojang.serialization.Codec CODEC -> a
    F:org.slf4j.Logger LOGGER -> b
    F:net.minecraft.world.level.levelgen.VerticalAnchor minInclusive -> d
    F:net.minecraft.world.level.levelgen.VerticalAnchor maxInclusive -> e
    F:int plateau -> f
    M:net.minecraft.world.level.levelgen.heightproviders.TrapezoidHeight of(net.minecraft.world.level.levelgen.VerticalAnchor,net.minecraft.world.level.levelgen.VerticalAnchor,int) -> a
    M:net.minecraft.world.level.levelgen.heightproviders.TrapezoidHeight of(net.minecraft.world.level.levelgen.VerticalAnchor,net.minecraft.world.level.levelgen.VerticalAnchor) -> a
    M:int sample(net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.WorldGenerationContext) -> a
    M:net.minecraft.world.level.levelgen.heightproviders.HeightProviderType getType() -> a
net.minecraft.world.level.levelgen.heightproviders.UniformHeight -> dip -> net.minecraft.world.level.levelgen.heightproviders.UniformHeight
    F:com.mojang.serialization.Codec CODEC -> a
    F:org.slf4j.Logger LOGGER -> b
    F:net.minecraft.world.level.levelgen.VerticalAnchor minInclusive -> d
    F:net.minecraft.world.level.levelgen.VerticalAnchor maxInclusive -> e
    F:it.unimi.dsi.fastutil.longs.LongSet warnedFor -> f
    M:net.minecraft.world.level.levelgen.heightproviders.UniformHeight of(net.minecraft.world.level.levelgen.VerticalAnchor,net.minecraft.world.level.levelgen.VerticalAnchor) -> a
    M:int sample(net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.WorldGenerationContext) -> a
    M:net.minecraft.world.level.levelgen.heightproviders.HeightProviderType getType() -> a
net.minecraft.world.level.levelgen.heightproviders.VeryBiasedToBottomHeight -> diq -> net.minecraft.world.level.levelgen.heightproviders.VeryBiasedToBottomHeight
    F:com.mojang.serialization.Codec CODEC -> a
    F:org.slf4j.Logger LOGGER -> b
    F:net.minecraft.world.level.levelgen.VerticalAnchor minInclusive -> d
    F:net.minecraft.world.level.levelgen.VerticalAnchor maxInclusive -> e
    F:int inner -> f
    M:net.minecraft.world.level.levelgen.heightproviders.VeryBiasedToBottomHeight of(net.minecraft.world.level.levelgen.VerticalAnchor,net.minecraft.world.level.levelgen.VerticalAnchor,int) -> a
    M:int sample(net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.WorldGenerationContext) -> a
    M:net.minecraft.world.level.levelgen.heightproviders.HeightProviderType getType() -> a
net.minecraft.world.level.levelgen.heightproviders.WeightedListHeight -> dir -> net.minecraft.world.level.levelgen.heightproviders.WeightedListHeight
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.util.random.SimpleWeightedRandomList distribution -> b
    M:int sample(net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.WorldGenerationContext) -> a
    M:net.minecraft.world.level.levelgen.heightproviders.HeightProviderType getType() -> a
net.minecraft.world.level.levelgen.material.MaterialRuleList -> dit -> net.minecraft.world.level.levelgen.material.MaterialRuleList
    F:java.util.List materialRuleList -> a
    M:net.minecraft.world.level.block.state.IBlockData calculate(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> calculate
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.List materialRuleList() -> a
net.minecraft.world.level.levelgen.material.WorldGenMaterialRule -> diu -> net.minecraft.world.level.levelgen.material.WorldGenMaterialRule
net.minecraft.world.level.levelgen.placement.BiomeFilter -> dix -> net.minecraft.world.level.levelgen.placement.BiomeFilter
    F:net.minecraft.world.level.levelgen.placement.BiomeFilter INSTANCE -> c
    F:com.mojang.serialization.Codec CODEC -> a
    M:net.minecraft.world.level.levelgen.placement.BiomeFilter biome() -> a
    M:boolean shouldPlace(net.minecraft.world.level.levelgen.placement.PlacementContext,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.placement.PlacementModifierType type() -> b
net.minecraft.world.level.levelgen.placement.BlockPredicateFilter -> diy -> net.minecraft.world.level.levelgen.placement.BlockPredicateFilter
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate predicate -> c
    M:net.minecraft.world.level.levelgen.placement.BlockPredicateFilter forPredicate(net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate) -> a
    M:boolean shouldPlace(net.minecraft.world.level.levelgen.placement.PlacementContext,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.placement.PlacementModifierType type() -> b
net.minecraft.world.level.levelgen.placement.CarvingMaskPlacement -> diz -> net.minecraft.world.level.levelgen.placement.CarvingMaskPlacement
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.WorldGenStage$Features step -> c
    M:net.minecraft.world.level.levelgen.placement.CarvingMaskPlacement forStep(net.minecraft.world.level.levelgen.WorldGenStage$Features) -> a
    M:net.minecraft.world.level.levelgen.placement.PlacementModifierType type() -> b
net.minecraft.world.level.levelgen.placement.CaveSurface -> dja -> net.minecraft.world.level.levelgen.placement.CaveSurface
    F:net.minecraft.world.level.levelgen.placement.CaveSurface CEILING -> a
    F:net.minecraft.world.level.levelgen.placement.CaveSurface FLOOR -> b
    F:com.mojang.serialization.Codec CODEC -> c
    F:net.minecraft.core.EnumDirection direction -> d
    F:int y -> e
    F:java.lang.String id -> f
    M:net.minecraft.core.EnumDirection getDirection() -> a
    M:int getY() -> b
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.levelgen.placement.CountOnEveryLayerPlacement -> djb -> net.minecraft.world.level.levelgen.placement.CountOnEveryLayerPlacement
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.util.valueproviders.IntProvider count -> c
    M:net.minecraft.world.level.levelgen.placement.CountOnEveryLayerPlacement of(net.minecraft.util.valueproviders.IntProvider) -> a
    M:net.minecraft.world.level.levelgen.placement.CountOnEveryLayerPlacement of(int) -> a
    M:net.minecraft.world.level.levelgen.placement.PlacementModifierType type() -> b
    M:int findOnGroundYPosition(net.minecraft.world.level.levelgen.placement.PlacementContext,int,int,int,int) -> a
    M:boolean isEmpty(net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.levelgen.placement.CountPlacement -> djc -> net.minecraft.world.level.levelgen.placement.CountPlacement
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.util.valueproviders.IntProvider count -> c
    M:net.minecraft.world.level.levelgen.placement.CountPlacement of(net.minecraft.util.valueproviders.IntProvider) -> a
    M:net.minecraft.world.level.levelgen.placement.CountPlacement of(int) -> a
    M:int count(net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.placement.PlacementModifierType type() -> b
net.minecraft.world.level.levelgen.placement.EnvironmentScanPlacement -> djd -> net.minecraft.world.level.levelgen.placement.EnvironmentScanPlacement
    F:net.minecraft.core.EnumDirection directionOfSearch -> c
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate targetCondition -> d
    F:net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate allowedSearchCondition -> e
    F:int maxSteps -> f
    F:com.mojang.serialization.Codec CODEC -> a
    M:net.minecraft.world.level.levelgen.placement.EnvironmentScanPlacement scanningFor(net.minecraft.core.EnumDirection,net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate,net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate,int) -> a
    M:net.minecraft.world.level.levelgen.placement.EnvironmentScanPlacement scanningFor(net.minecraft.core.EnumDirection,net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate,int) -> a
    M:net.minecraft.world.level.levelgen.placement.PlacementModifierType type() -> b
net.minecraft.world.level.levelgen.placement.HeightRangePlacement -> dje -> net.minecraft.world.level.levelgen.placement.HeightRangePlacement
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.heightproviders.HeightProvider height -> c
    M:net.minecraft.world.level.levelgen.placement.HeightRangePlacement of(net.minecraft.world.level.levelgen.heightproviders.HeightProvider) -> a
    M:net.minecraft.world.level.levelgen.placement.HeightRangePlacement uniform(net.minecraft.world.level.levelgen.VerticalAnchor,net.minecraft.world.level.levelgen.VerticalAnchor) -> a
    M:net.minecraft.world.level.levelgen.placement.HeightRangePlacement triangle(net.minecraft.world.level.levelgen.VerticalAnchor,net.minecraft.world.level.levelgen.VerticalAnchor) -> b
    M:net.minecraft.world.level.levelgen.placement.PlacementModifierType type() -> b
net.minecraft.world.level.levelgen.placement.HeightmapPlacement -> djf -> net.minecraft.world.level.levelgen.placement.HeightmapPlacement
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.HeightMap$Type heightmap -> c
    M:net.minecraft.world.level.levelgen.placement.HeightmapPlacement onHeightmap(net.minecraft.world.level.levelgen.HeightMap$Type) -> a
    M:net.minecraft.world.level.levelgen.placement.PlacementModifierType type() -> b
net.minecraft.world.level.levelgen.placement.InSquarePlacement -> djg -> net.minecraft.world.level.levelgen.placement.InSquarePlacement
    F:net.minecraft.world.level.levelgen.placement.InSquarePlacement INSTANCE -> c
    F:com.mojang.serialization.Codec CODEC -> a
    M:net.minecraft.world.level.levelgen.placement.InSquarePlacement spread() -> a
    M:net.minecraft.world.level.levelgen.placement.PlacementModifierType type() -> b
net.minecraft.world.level.levelgen.placement.NoiseBasedCountPlacement -> djh -> net.minecraft.world.level.levelgen.placement.NoiseBasedCountPlacement
    F:com.mojang.serialization.Codec CODEC -> a
    F:int noiseToCountRatio -> c
    F:double noiseFactor -> d
    F:double noiseOffset -> e
    M:net.minecraft.world.level.levelgen.placement.NoiseBasedCountPlacement of(int,double,double) -> a
    M:int count(net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.placement.PlacementModifierType type() -> b
net.minecraft.world.level.levelgen.placement.NoiseThresholdCountPlacement -> dji -> net.minecraft.world.level.levelgen.placement.NoiseThresholdCountPlacement
    F:com.mojang.serialization.Codec CODEC -> a
    F:double noiseLevel -> c
    F:int belowNoise -> d
    F:int aboveNoise -> e
    M:net.minecraft.world.level.levelgen.placement.NoiseThresholdCountPlacement of(double,int,int) -> a
    M:int count(net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.placement.PlacementModifierType type() -> b
net.minecraft.world.level.levelgen.placement.PlacedFeature -> djj -> net.minecraft.world.level.levelgen.placement.PlacedFeature
    F:net.minecraft.core.Holder feature -> e
    F:java.util.List placement -> f
    F:com.mojang.serialization.Codec DIRECT_CODEC -> a
    F:com.mojang.serialization.Codec CODEC -> b
    F:com.mojang.serialization.Codec LIST_CODEC -> c
    F:com.mojang.serialization.Codec LIST_OF_LISTS_CODEC -> d
    M:boolean place(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:boolean placeWithBiomeCheck(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> b
    M:boolean placeWithContext(net.minecraft.world.level.levelgen.placement.PlacementContext,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:java.util.stream.Stream getFeatures() -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.Holder feature() -> b
    M:java.util.List placement() -> c
net.minecraft.world.level.levelgen.placement.PlacedFeature$test -> djj$a -> net.minecraft.world.level.levelgen.placement.PlacedFeature$a
    F:int a -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int a() -> a
net.minecraft.world.level.levelgen.placement.PlacementContext -> djk -> net.minecraft.world.level.levelgen.placement.PlacementContext
    F:net.minecraft.world.level.GeneratorAccessSeed level -> a
    F:net.minecraft.world.level.chunk.ChunkGenerator generator -> b
    F:java.util.Optional topFeature -> c
    M:int getHeight(net.minecraft.world.level.levelgen.HeightMap$Type,int,int) -> a
    M:net.minecraft.world.level.chunk.CarvingMask getCarvingMask(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.levelgen.WorldGenStage$Features) -> a
    M:net.minecraft.world.level.block.state.IBlockData getBlockState(net.minecraft.core.BlockPosition) -> a
    M:int getMinBuildHeight() -> c
    M:net.minecraft.world.level.GeneratorAccessSeed getLevel() -> d
    M:java.util.Optional topFeature() -> e
    M:net.minecraft.world.level.chunk.ChunkGenerator generator() -> f
net.minecraft.world.level.levelgen.placement.PlacementFilter -> djl -> net.minecraft.world.level.levelgen.placement.PlacementFilter
net.minecraft.world.level.levelgen.placement.PlacementModifier -> djm -> net.minecraft.world.level.levelgen.placement.PlacementModifier
    F:com.mojang.serialization.Codec CODEC -> b
net.minecraft.world.level.levelgen.placement.PlacementModifierType -> djn -> net.minecraft.world.level.levelgen.placement.PlacementModifierType
    F:net.minecraft.world.level.levelgen.placement.PlacementModifierType BLOCK_PREDICATE_FILTER -> a
    F:net.minecraft.world.level.levelgen.placement.PlacementModifierType RARITY_FILTER -> b
    F:net.minecraft.world.level.levelgen.placement.PlacementModifierType SURFACE_RELATIVE_THRESHOLD_FILTER -> c
    F:net.minecraft.world.level.levelgen.placement.PlacementModifierType SURFACE_WATER_DEPTH_FILTER -> d
    F:net.minecraft.world.level.levelgen.placement.PlacementModifierType BIOME_FILTER -> e
    F:net.minecraft.world.level.levelgen.placement.PlacementModifierType COUNT -> f
    F:net.minecraft.world.level.levelgen.placement.PlacementModifierType NOISE_BASED_COUNT -> g
    F:net.minecraft.world.level.levelgen.placement.PlacementModifierType NOISE_THRESHOLD_COUNT -> h
    F:net.minecraft.world.level.levelgen.placement.PlacementModifierType COUNT_ON_EVERY_LAYER -> i
    F:net.minecraft.world.level.levelgen.placement.PlacementModifierType ENVIRONMENT_SCAN -> j
    F:net.minecraft.world.level.levelgen.placement.PlacementModifierType HEIGHTMAP -> k
    F:net.minecraft.world.level.levelgen.placement.PlacementModifierType HEIGHT_RANGE -> l
    F:net.minecraft.world.level.levelgen.placement.PlacementModifierType IN_SQUARE -> m
    F:net.minecraft.world.level.levelgen.placement.PlacementModifierType RANDOM_OFFSET -> n
    F:net.minecraft.world.level.levelgen.placement.PlacementModifierType CARVING_MASK_PLACEMENT -> o
    M:net.minecraft.world.level.levelgen.placement.PlacementModifierType register(java.lang.String,com.mojang.serialization.Codec) -> a
net.minecraft.world.level.levelgen.placement.RandomOffsetPlacement -> djo -> net.minecraft.world.level.levelgen.placement.RandomOffsetPlacement
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.util.valueproviders.IntProvider xzSpread -> c
    F:net.minecraft.util.valueproviders.IntProvider ySpread -> d
    M:net.minecraft.world.level.levelgen.placement.RandomOffsetPlacement of(net.minecraft.util.valueproviders.IntProvider,net.minecraft.util.valueproviders.IntProvider) -> a
    M:net.minecraft.world.level.levelgen.placement.RandomOffsetPlacement vertical(net.minecraft.util.valueproviders.IntProvider) -> a
    M:net.minecraft.world.level.levelgen.placement.RandomOffsetPlacement horizontal(net.minecraft.util.valueproviders.IntProvider) -> b
    M:net.minecraft.world.level.levelgen.placement.PlacementModifierType type() -> b
net.minecraft.world.level.levelgen.placement.RarityFilter -> djp -> net.minecraft.world.level.levelgen.placement.RarityFilter
    F:com.mojang.serialization.Codec CODEC -> a
    F:int chance -> c
    M:net.minecraft.world.level.levelgen.placement.RarityFilter onAverageOnceEvery(int) -> a
    M:boolean shouldPlace(net.minecraft.world.level.levelgen.placement.PlacementContext,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.placement.PlacementModifierType type() -> b
net.minecraft.world.level.levelgen.placement.RepeatingPlacement -> djq -> net.minecraft.world.level.levelgen.placement.RepeatingPlacement
net.minecraft.world.level.levelgen.placement.SurfaceRelativeThresholdFilter -> djr -> net.minecraft.world.level.levelgen.placement.SurfaceRelativeThresholdFilter
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.HeightMap$Type heightmap -> c
    F:int minInclusive -> d
    F:int maxInclusive -> e
    M:net.minecraft.world.level.levelgen.placement.SurfaceRelativeThresholdFilter of(net.minecraft.world.level.levelgen.HeightMap$Type,int,int) -> a
    M:boolean shouldPlace(net.minecraft.world.level.levelgen.placement.PlacementContext,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.placement.PlacementModifierType type() -> b
net.minecraft.world.level.levelgen.placement.SurfaceWaterDepthFilter -> djs -> net.minecraft.world.level.levelgen.placement.SurfaceWaterDepthFilter
    F:com.mojang.serialization.Codec CODEC -> a
    F:int maxWaterDepth -> c
    M:net.minecraft.world.level.levelgen.placement.SurfaceWaterDepthFilter forMaxDepth(int) -> a
    M:boolean shouldPlace(net.minecraft.world.level.levelgen.placement.PlacementContext,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.placement.PlacementModifierType type() -> b
net.minecraft.world.level.levelgen.presets.WorldPreset -> dju -> net.minecraft.world.level.levelgen.presets.WorldPreset
    F:com.mojang.serialization.Codec DIRECT_CODEC -> a
    F:com.mojang.serialization.Codec CODEC -> b
    F:java.util.Map dimensions -> c
    M:net.minecraft.core.IRegistry createRegistry() -> c
    M:net.minecraft.world.level.levelgen.GeneratorSettings createWorldGenSettings(long,boolean,boolean) -> a
    M:net.minecraft.world.level.levelgen.GeneratorSettings recreateWorldGenSettings(net.minecraft.world.level.levelgen.GeneratorSettings) -> a
    M:java.util.Optional overworld() -> a
    M:net.minecraft.world.level.dimension.WorldDimension overworldOrThrow() -> b
    M:com.mojang.serialization.DataResult requireOverworld(net.minecraft.world.level.levelgen.presets.WorldPreset) -> a
net.minecraft.world.level.levelgen.presets.WorldPresets -> djv -> net.minecraft.world.level.levelgen.presets.WorldPresets
    F:net.minecraft.resources.ResourceKey NORMAL -> a
    F:net.minecraft.resources.ResourceKey FLAT -> b
    F:net.minecraft.resources.ResourceKey LARGE_BIOMES -> c
    F:net.minecraft.resources.ResourceKey AMPLIFIED -> d
    F:net.minecraft.resources.ResourceKey SINGLE_BIOME_SURFACE -> e
    F:net.minecraft.resources.ResourceKey DEBUG -> f
    M:net.minecraft.core.Holder bootstrap(net.minecraft.core.IRegistry) -> a
    M:net.minecraft.resources.ResourceKey register(java.lang.String) -> a
    M:java.util.Optional fromSettings(net.minecraft.world.level.levelgen.GeneratorSettings) -> a
    M:net.minecraft.world.level.levelgen.GeneratorSettings createNormalWorldFromPreset(net.minecraft.core.IRegistryCustom,long,boolean,boolean) -> a
    M:net.minecraft.world.level.levelgen.GeneratorSettings createNormalWorldFromPreset(net.minecraft.core.IRegistryCustom,long) -> a
    M:net.minecraft.world.level.levelgen.GeneratorSettings createNormalWorldFromPreset(net.minecraft.core.IRegistryCustom) -> a
    M:net.minecraft.world.level.levelgen.GeneratorSettings demoSettings(net.minecraft.core.IRegistryCustom) -> b
    M:net.minecraft.world.level.dimension.WorldDimension getNormalOverworld(net.minecraft.core.IRegistryCustom) -> c
net.minecraft.world.level.levelgen.presets.WorldPresets$Bootstrap -> djv$a -> net.minecraft.world.level.levelgen.presets.WorldPresets$a
    F:net.minecraft.core.IRegistry presets -> a
    F:net.minecraft.core.IRegistry dimensionTypes -> b
    F:net.minecraft.core.IRegistry biomes -> c
    F:net.minecraft.core.IRegistry structureSets -> d
    F:net.minecraft.core.IRegistry noiseSettings -> e
    F:net.minecraft.core.IRegistry noises -> f
    F:net.minecraft.core.Holder overworldDimensionType -> g
    F:net.minecraft.core.Holder netherDimensionType -> h
    F:net.minecraft.core.Holder netherNoiseSettings -> i
    F:net.minecraft.world.level.dimension.WorldDimension netherStem -> j
    F:net.minecraft.core.Holder endDimensionType -> k
    F:net.minecraft.core.Holder endNoiseSettings -> l
    F:net.minecraft.world.level.dimension.WorldDimension endStem -> m
    M:net.minecraft.world.level.dimension.WorldDimension makeOverworld(net.minecraft.world.level.chunk.ChunkGenerator) -> a
    M:net.minecraft.world.level.dimension.WorldDimension makeNoiseBasedOverworld(net.minecraft.world.level.biome.WorldChunkManager,net.minecraft.core.Holder) -> a
    M:net.minecraft.world.level.levelgen.presets.WorldPreset createPresetWithCustomOverworld(net.minecraft.world.level.dimension.WorldDimension) -> a
    M:net.minecraft.core.Holder registerCustomOverworldPreset(net.minecraft.resources.ResourceKey,net.minecraft.world.level.dimension.WorldDimension) -> a
    M:net.minecraft.core.Holder run() -> a
net.minecraft.world.level.levelgen.structure.BoundingBox -> djw -> net.minecraft.world.level.levelgen.structure.StructureBoundingBox
    F:org.slf4j.Logger LOGGER -> b
    F:com.mojang.serialization.Codec CODEC -> a
    F:int minX -> c
    F:int minY -> d
    F:int minZ -> e
    F:int maxX -> f
    F:int maxY -> g
    F:int maxZ -> h
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox fromCorners(net.minecraft.core.BaseBlockPosition,net.minecraft.core.BaseBlockPosition) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox infinite() -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox orientBox(int,int,int,int,int,int,int,int,int,net.minecraft.core.EnumDirection) -> a
    M:boolean intersects(net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:boolean intersects(int,int,int,int) -> a
    M:java.util.Optional encapsulatingPositions(java.lang.Iterable) -> a
    M:java.util.Optional encapsulatingBoxes(java.lang.Iterable) -> b
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox encapsulate(net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> b
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox encapsulate(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox move(int,int,int) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox move(net.minecraft.core.BaseBlockPosition) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox moved(int,int,int) -> b
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox inflatedBy(int) -> a
    M:boolean isInside(net.minecraft.core.BaseBlockPosition) -> b
    M:net.minecraft.core.BaseBlockPosition getLength() -> b
    M:int getXSpan() -> c
    M:int getYSpan() -> d
    M:int getZSpan() -> e
    M:net.minecraft.core.BlockPosition getCenter() -> f
    M:void forAllCorners(java.util.function.Consumer) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:int minX() -> g
    M:int minY() -> h
    M:int minZ() -> i
    M:int maxX() -> j
    M:int maxY() -> k
    M:int maxZ() -> l
net.minecraft.world.level.levelgen.structure.BuiltinStructureSets -> djx -> net.minecraft.world.level.levelgen.structure.BuiltinStructureSets
    F:net.minecraft.resources.ResourceKey VILLAGES -> a
    F:net.minecraft.resources.ResourceKey DESERT_PYRAMIDS -> b
    F:net.minecraft.resources.ResourceKey IGLOOS -> c
    F:net.minecraft.resources.ResourceKey JUNGLE_TEMPLES -> d
    F:net.minecraft.resources.ResourceKey SWAMP_HUTS -> e
    F:net.minecraft.resources.ResourceKey PILLAGER_OUTPOSTS -> f
    F:net.minecraft.resources.ResourceKey OCEAN_MONUMENTS -> g
    F:net.minecraft.resources.ResourceKey WOODLAND_MANSIONS -> h
    F:net.minecraft.resources.ResourceKey BURIED_TREASURES -> i
    F:net.minecraft.resources.ResourceKey MINESHAFTS -> j
    F:net.minecraft.resources.ResourceKey RUINED_PORTALS -> k
    F:net.minecraft.resources.ResourceKey SHIPWRECKS -> l
    F:net.minecraft.resources.ResourceKey OCEAN_RUINS -> m
    F:net.minecraft.resources.ResourceKey NETHER_COMPLEXES -> n
    F:net.minecraft.resources.ResourceKey NETHER_FOSSILS -> o
    F:net.minecraft.resources.ResourceKey END_CITIES -> p
    F:net.minecraft.resources.ResourceKey ANCIENT_CITIES -> q
    F:net.minecraft.resources.ResourceKey STRONGHOLDS -> r
    M:net.minecraft.resources.ResourceKey register(java.lang.String) -> a
net.minecraft.world.level.levelgen.structure.BuiltinStructures -> djy -> net.minecraft.world.level.levelgen.structure.BuiltinStructures
    F:net.minecraft.resources.ResourceKey PILLAGER_OUTPOST -> a
    F:net.minecraft.resources.ResourceKey MINESHAFT -> b
    F:net.minecraft.resources.ResourceKey MINESHAFT_MESA -> c
    F:net.minecraft.resources.ResourceKey WOODLAND_MANSION -> d
    F:net.minecraft.resources.ResourceKey JUNGLE_TEMPLE -> e
    F:net.minecraft.resources.ResourceKey DESERT_PYRAMID -> f
    F:net.minecraft.resources.ResourceKey IGLOO -> g
    F:net.minecraft.resources.ResourceKey SHIPWRECK -> h
    F:net.minecraft.resources.ResourceKey SHIPWRECK_BEACHED -> i
    F:net.minecraft.resources.ResourceKey SWAMP_HUT -> j
    F:net.minecraft.resources.ResourceKey STRONGHOLD -> k
    F:net.minecraft.resources.ResourceKey OCEAN_MONUMENT -> l
    F:net.minecraft.resources.ResourceKey OCEAN_RUIN_COLD -> m
    F:net.minecraft.resources.ResourceKey OCEAN_RUIN_WARM -> n
    F:net.minecraft.resources.ResourceKey FORTRESS -> o
    F:net.minecraft.resources.ResourceKey NETHER_FOSSIL -> p
    F:net.minecraft.resources.ResourceKey END_CITY -> q
    F:net.minecraft.resources.ResourceKey BURIED_TREASURE -> r
    F:net.minecraft.resources.ResourceKey BASTION_REMNANT -> s
    F:net.minecraft.resources.ResourceKey VILLAGE_PLAINS -> t
    F:net.minecraft.resources.ResourceKey VILLAGE_DESERT -> u
    F:net.minecraft.resources.ResourceKey VILLAGE_SAVANNA -> v
    F:net.minecraft.resources.ResourceKey VILLAGE_SNOWY -> w
    F:net.minecraft.resources.ResourceKey VILLAGE_TAIGA -> x
    F:net.minecraft.resources.ResourceKey RUINED_PORTAL_STANDARD -> y
    F:net.minecraft.resources.ResourceKey RUINED_PORTAL_DESERT -> z
    M:net.minecraft.resources.ResourceKey createKey(java.lang.String) -> a
net.minecraft.world.level.levelgen.structure.LegacyStructureDataHandler -> djz -> net.minecraft.world.level.levelgen.structure.PersistentStructureLegacy
    F:java.util.Map CURRENT_TO_LEGACY_MAP -> a
    F:java.util.Map LEGACY_TO_CURRENT_MAP -> b
    F:java.util.Set OLD_STRUCTURE_REGISTRY_KEYS -> c
    F:boolean hasLegacyData -> d
    F:java.util.Map dataMap -> e
    F:java.util.Map indexMap -> f
    F:java.util.List legacyKeys -> g
    F:java.util.List currentKeys -> h
    M:void removeIndex(long) -> a
    M:net.minecraft.nbt.NBTTagCompound updateFromLegacy(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean hasLegacyStart(int,int,java.lang.String) -> a
    M:boolean isUnhandledStructureStart(int,int) -> a
    M:net.minecraft.nbt.NBTTagCompound updateStructureStart(net.minecraft.nbt.NBTTagCompound,net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:void populateCaches(net.minecraft.world.level.storage.WorldPersistentData) -> a
    M:net.minecraft.world.level.levelgen.structure.PersistentStructureLegacy getLegacyStructureHandler(net.minecraft.resources.ResourceKey,net.minecraft.world.level.storage.WorldPersistentData) -> a
net.minecraft.world.level.levelgen.structure.PoolElementStructurePiece -> dka -> net.minecraft.world.level.levelgen.structure.WorldGenFeaturePillagerOutpostPoolPiece
    F:org.slf4j.Logger LOGGER -> d
    F:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolStructure element -> a
    F:net.minecraft.core.BlockPosition position -> b
    F:int groundLevelDelta -> h
    F:net.minecraft.world.level.block.EnumBlockRotation rotation -> c
    F:java.util.List junctions -> i
    F:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager structureTemplateManager -> j
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
    M:void place(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.core.BlockPosition,boolean) -> a
    M:void move(int,int,int) -> a
    M:net.minecraft.world.level.block.EnumBlockRotation getRotation() -> a
    M:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolStructure getElement() -> b
    M:net.minecraft.core.BlockPosition getPosition() -> c
    M:int getGroundLevelDelta() -> d
    M:void addJunction(net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructureJigsawJunction) -> a
    M:java.util.List getJunctions() -> e
net.minecraft.world.level.levelgen.structure.PostPlacementProcessor -> dkb -> net.minecraft.world.level.levelgen.structure.PostPlacementProcessor
    F:net.minecraft.world.level.levelgen.structure.PostPlacementProcessor NONE -> a
net.minecraft.world.level.levelgen.structure.ScatteredFeaturePiece -> dkc -> net.minecraft.world.level.levelgen.structure.WorldGenScatteredPiece
    F:int width -> a
    F:int height -> b
    F:int depth -> c
    F:int heightPosition -> d
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean updateAverageGroundHeight(net.minecraft.world.level.GeneratorAccess,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,int) -> a
    M:boolean updateHeightPositionToLowestGroundHeight(net.minecraft.world.level.GeneratorAccess,int) -> a
net.minecraft.world.level.levelgen.structure.SinglePieceStructure -> dkd -> net.minecraft.world.level.levelgen.structure.SinglePieceStructure
    F:net.minecraft.world.level.levelgen.structure.SinglePieceStructure$PieceConstructor constructor -> d
    F:int width -> e
    F:int depth -> f
    M:java.util.Optional findGenerationPoint(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:void generatePieces(net.minecraft.world.level.levelgen.structure.pieces.StructurePiecesBuilder,net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
net.minecraft.world.level.levelgen.structure.SinglePieceStructure$PieceConstructor -> dkd$a -> net.minecraft.world.level.levelgen.structure.SinglePieceStructure$a
net.minecraft.world.level.levelgen.structure.Structure -> dke -> net.minecraft.world.level.levelgen.structure.Structure
    F:com.mojang.serialization.Codec DIRECT_CODEC -> a
    F:com.mojang.serialization.Codec CODEC -> b
    F:net.minecraft.world.level.levelgen.structure.Structure$StructureSettings settings -> c
    M:com.mojang.serialization.codecs.RecordCodecBuilder settingsCodec(com.mojang.serialization.codecs.RecordCodecBuilder$Instance) -> a
    M:com.mojang.serialization.Codec simpleCodec(java.util.function.Function) -> a
    M:net.minecraft.core.HolderSet biomes() -> a
    M:java.util.Map spawnOverrides() -> b
    M:net.minecraft.world.level.levelgen.WorldGenStage$Decoration step() -> c
    M:net.minecraft.world.level.levelgen.structure.TerrainAdjustment terrainAdaptation() -> d
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox adjustBoundingBox(net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureStart generate(net.minecraft.core.IRegistryCustom,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.biome.WorldChunkManager,net.minecraft.world.level.levelgen.RandomState,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,long,net.minecraft.world.level.ChunkCoordIntPair,int,net.minecraft.world.level.LevelHeightAccessor,java.util.function.Predicate) -> a
    M:java.util.Optional onTopOfChunkCenter(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext,net.minecraft.world.level.levelgen.HeightMap$Type,java.util.function.Consumer) -> a
    M:boolean isValidBiome(net.minecraft.world.level.levelgen.structure.Structure$GenerationStub,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.RandomState,java.util.function.Predicate) -> a
    M:void afterPlace(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.levelgen.structure.pieces.PiecesContainer) -> a
    M:int getLowestY(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext,int,int) -> a
    M:int getLowestY(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext,int,int,int,int) -> a
    M:net.minecraft.core.BlockPosition getLowestYIn5by5BoxOffset7Blocks(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext,net.minecraft.world.level.block.EnumBlockRotation) -> a
net.minecraft.world.level.levelgen.structure.Structure$GenerationContext -> dke$a -> net.minecraft.world.level.levelgen.structure.Structure$a
    F:net.minecraft.core.IRegistryCustom registryAccess -> a
    F:net.minecraft.world.level.chunk.ChunkGenerator chunkGenerator -> b
    F:net.minecraft.world.level.biome.WorldChunkManager biomeSource -> c
    F:net.minecraft.world.level.levelgen.RandomState randomState -> d
    F:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager structureTemplateManager -> e
    F:net.minecraft.world.level.levelgen.SeededRandom random -> f
    F:long seed -> g
    F:net.minecraft.world.level.ChunkCoordIntPair chunkPos -> h
    F:net.minecraft.world.level.LevelHeightAccessor heightAccessor -> i
    F:java.util.function.Predicate validBiome -> j
    M:net.minecraft.world.level.levelgen.SeededRandom makeRandom(long,net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.IRegistryCustom registryAccess() -> a
    M:net.minecraft.world.level.chunk.ChunkGenerator chunkGenerator() -> b
    M:net.minecraft.world.level.biome.WorldChunkManager biomeSource() -> c
    M:net.minecraft.world.level.levelgen.RandomState randomState() -> d
    M:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager structureTemplateManager() -> e
    M:net.minecraft.world.level.levelgen.SeededRandom random() -> f
    M:long seed() -> g
    M:net.minecraft.world.level.ChunkCoordIntPair chunkPos() -> h
    M:net.minecraft.world.level.LevelHeightAccessor heightAccessor() -> i
    M:java.util.function.Predicate validBiome() -> j
net.minecraft.world.level.levelgen.structure.Structure$GenerationStub -> dke$b -> net.minecraft.world.level.levelgen.structure.Structure$b
    F:net.minecraft.core.BlockPosition position -> a
    F:com.mojang.datafixers.util.Either generator -> b
    M:net.minecraft.world.level.levelgen.structure.pieces.StructurePiecesBuilder getPiecesBuilder() -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.BlockPosition position() -> b
    M:com.mojang.datafixers.util.Either generator() -> c
net.minecraft.world.level.levelgen.structure.Structure$StructureSettings -> dke$c -> net.minecraft.world.level.levelgen.structure.Structure$c
    F:net.minecraft.core.HolderSet biomes -> b
    F:java.util.Map spawnOverrides -> c
    F:net.minecraft.world.level.levelgen.WorldGenStage$Decoration step -> d
    F:net.minecraft.world.level.levelgen.structure.TerrainAdjustment terrainAdaptation -> e
    F:com.mojang.serialization.MapCodec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.HolderSet biomes() -> a
    M:java.util.Map spawnOverrides() -> b
    M:net.minecraft.world.level.levelgen.WorldGenStage$Decoration step() -> c
    M:net.minecraft.world.level.levelgen.structure.TerrainAdjustment terrainAdaptation() -> d
net.minecraft.world.level.levelgen.structure.StructureCheck -> dkf -> net.minecraft.world.level.levelgen.structure.StructureCheck
    F:org.slf4j.Logger LOGGER -> a
    F:int NO_STRUCTURE -> b
    F:net.minecraft.world.level.chunk.storage.ChunkScanAccess storageAccess -> c
    F:net.minecraft.core.IRegistryCustom registryAccess -> d
    F:net.minecraft.core.IRegistry biomes -> e
    F:net.minecraft.core.IRegistry structureConfigs -> f
    F:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager structureTemplateManager -> g
    F:net.minecraft.resources.ResourceKey dimension -> h
    F:net.minecraft.world.level.chunk.ChunkGenerator chunkGenerator -> i
    F:net.minecraft.world.level.levelgen.RandomState randomState -> j
    F:net.minecraft.world.level.LevelHeightAccessor heightAccessor -> k
    F:net.minecraft.world.level.biome.WorldChunkManager biomeSource -> l
    F:long seed -> m
    F:com.mojang.datafixers.DataFixer fixerUpper -> n
    F:it.unimi.dsi.fastutil.longs.Long2ObjectMap loadedChunks -> o
    F:java.util.Map featureChecks -> p
    M:net.minecraft.world.level.levelgen.structure.StructureCheckResult checkStart(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.levelgen.structure.Structure,boolean) -> a
    M:boolean canCreateStructure(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.levelgen.structure.Structure) -> b
    M:net.minecraft.world.level.levelgen.structure.StructureCheckResult tryLoadFromStorage(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.levelgen.structure.Structure,boolean,long) -> a
    M:it.unimi.dsi.fastutil.objects.Object2IntMap loadStructures(net.minecraft.nbt.NBTTagCompound) -> a
    M:it.unimi.dsi.fastutil.objects.Object2IntMap deduplicateEmptyMap(it.unimi.dsi.fastutil.objects.Object2IntMap) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureCheckResult checkStructureInfo(it.unimi.dsi.fastutil.objects.Object2IntMap,net.minecraft.world.level.levelgen.structure.Structure,boolean) -> a
    M:void onStructureLoad(net.minecraft.world.level.ChunkCoordIntPair,java.util.Map) -> a
    M:void storeFullResults(long,it.unimi.dsi.fastutil.objects.Object2IntMap) -> a
    M:void incrementReference(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.levelgen.structure.Structure) -> a
net.minecraft.world.level.levelgen.structure.StructureCheckResult -> dkg -> net.minecraft.world.level.levelgen.structure.StructureCheckResult
    F:net.minecraft.world.level.levelgen.structure.StructureCheckResult START_PRESENT -> a
    F:net.minecraft.world.level.levelgen.structure.StructureCheckResult START_NOT_PRESENT -> b
    F:net.minecraft.world.level.levelgen.structure.StructureCheckResult CHUNK_LOAD_NEEDED -> c
net.minecraft.world.level.levelgen.structure.StructureFeatureIndexSavedData -> dkh -> net.minecraft.world.level.levelgen.structure.PersistentIndexed
    F:java.lang.String TAG_REMAINING_INDEXES -> a
    F:java.lang.String TAG_All_INDEXES -> b
    F:it.unimi.dsi.fastutil.longs.LongSet all -> c
    F:it.unimi.dsi.fastutil.longs.LongSet remaining -> d
    M:net.minecraft.world.level.levelgen.structure.PersistentIndexed load(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.nbt.NBTTagCompound save(net.minecraft.nbt.NBTTagCompound) -> a
    M:void addIndex(long) -> a
    M:boolean hasStartIndex(long) -> b
    M:boolean hasUnhandledIndex(long) -> c
    M:void removeIndex(long) -> d
    M:it.unimi.dsi.fastutil.longs.LongSet getAll() -> a
net.minecraft.world.level.levelgen.structure.StructurePiece -> dki -> net.minecraft.world.level.levelgen.structure.StructurePiece
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.world.level.block.state.IBlockData CAVE_AIR -> e
    F:net.minecraft.world.level.levelgen.structure.StructureBoundingBox boundingBox -> f
    F:net.minecraft.core.EnumDirection orientation -> b
    F:net.minecraft.world.level.block.EnumBlockMirror mirror -> c
    F:net.minecraft.world.level.block.EnumBlockRotation rotation -> d
    F:int genDepth -> g
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType type -> h
    F:java.util.Set SHAPE_CHECK_BLOCKS -> i
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox makeBoundingBox(int,int,int,net.minecraft.core.EnumDirection,int,int,int) -> a
    M:net.minecraft.core.EnumDirection getRandomHorizontalDirection(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.nbt.NBTTagCompound createTag(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext) -> a
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox getBoundingBox() -> f
    M:int getGenDepth() -> g
    M:void setGenDepth(int) -> a
    M:boolean isCloseToChunk(net.minecraft.world.level.ChunkCoordIntPair,int) -> a
    M:net.minecraft.core.BlockPosition getLocatorPosition() -> h
    M:net.minecraft.core.BlockPosition$MutableBlockPosition getWorldPos(int,int,int) -> b
    M:int getWorldX(int,int) -> a
    M:int getWorldY(int) -> b
    M:int getWorldZ(int,int) -> b
    M:void placeBlock(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.block.state.IBlockData,int,int,int,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:boolean canBeReplaced(net.minecraft.world.level.IWorldReader,int,int,int,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:net.minecraft.world.level.block.state.IBlockData getBlock(net.minecraft.world.level.IBlockAccess,int,int,int,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:boolean isInterior(net.minecraft.world.level.IWorldReader,int,int,int,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> b
    M:void generateAirBox(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,int,int,int,int,int,int) -> a
    M:void generateBox(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,int,int,int,int,int,int,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void generateBox(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void generateBox(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,int,int,int,int,int,int,boolean,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructurePiece$StructurePieceBlockSelector) -> a
    M:void generateBox(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,boolean,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructurePiece$StructurePieceBlockSelector) -> a
    M:void generateMaybeBox(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.util.RandomSource,float,int,int,int,int,int,int,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,boolean,boolean) -> a
    M:void maybeGenerateBlock(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.util.RandomSource,float,int,int,int,net.minecraft.world.level.block.state.IBlockData) -> a
    M:void generateUpperHalfSphere(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,int,int,int,int,int,int,net.minecraft.world.level.block.state.IBlockData,boolean) -> a
    M:void fillColumnDown(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.block.state.IBlockData,int,int,int,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> b
    M:boolean isReplaceableByStructures(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean createChest(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.util.RandomSource,int,int,int,net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.world.level.block.state.IBlockData reorient(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean createChest(net.minecraft.world.level.WorldAccess,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition,net.minecraft.resources.MinecraftKey,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean createDispenser(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,net.minecraft.resources.MinecraftKey) -> a
    M:void move(int,int,int) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox createBoundingBox(java.util.stream.Stream) -> a
    M:net.minecraft.world.level.levelgen.structure.StructurePiece findCollisionPiece(java.util.List,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:net.minecraft.core.EnumDirection getOrientation() -> i
    M:void setOrientation(net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.level.block.EnumBlockRotation getRotation() -> a
    M:net.minecraft.world.level.block.EnumBlockMirror getMirror() -> j
    M:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType getType() -> k
net.minecraft.world.level.levelgen.structure.StructurePiece$BlockSelector -> dki$a -> net.minecraft.world.level.levelgen.structure.StructurePiece$StructurePieceBlockSelector
    F:net.minecraft.world.level.block.state.IBlockData next -> a
    M:net.minecraft.world.level.block.state.IBlockData getNext() -> a
net.minecraft.world.level.levelgen.structure.StructurePieceAccessor -> dkj -> net.minecraft.world.level.levelgen.structure.StructurePieceAccessor
net.minecraft.world.level.levelgen.structure.StructureSet -> dkk -> net.minecraft.world.level.levelgen.structure.StructureSet
    F:java.util.List structures -> c
    F:net.minecraft.world.level.levelgen.structure.placement.StructurePlacement placement -> d
    F:com.mojang.serialization.Codec DIRECT_CODEC -> a
    F:com.mojang.serialization.Codec CODEC -> b
    M:net.minecraft.world.level.levelgen.structure.StructureSet$StructureSelectionEntry entry(net.minecraft.core.Holder,int) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureSet$StructureSelectionEntry entry(net.minecraft.core.Holder) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.List structures() -> a
    M:net.minecraft.world.level.levelgen.structure.placement.StructurePlacement placement() -> b
net.minecraft.world.level.levelgen.structure.StructureSet$StructureSelectionEntry -> dkk$a -> net.minecraft.world.level.levelgen.structure.StructureSet$a
    F:net.minecraft.core.Holder structure -> b
    F:int weight -> c
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.Holder structure() -> a
    M:int weight() -> b
net.minecraft.world.level.levelgen.structure.StructureSpawnOverride -> dkl -> net.minecraft.world.level.levelgen.structure.StructureSpawnOverride
    F:net.minecraft.world.level.levelgen.structure.StructureSpawnOverride$BoundingBoxType boundingBox -> b
    F:net.minecraft.util.random.WeightedRandomList spawns -> c
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.structure.StructureSpawnOverride$BoundingBoxType boundingBox() -> a
    M:net.minecraft.util.random.WeightedRandomList spawns() -> b
net.minecraft.world.level.levelgen.structure.StructureSpawnOverride$BoundingBoxType -> dkl$a -> net.minecraft.world.level.levelgen.structure.StructureSpawnOverride$a
    F:net.minecraft.world.level.levelgen.structure.StructureSpawnOverride$BoundingBoxType PIECE -> a
    F:net.minecraft.world.level.levelgen.structure.StructureSpawnOverride$BoundingBoxType STRUCTURE -> b
    F:com.mojang.serialization.Codec CODEC -> c
    F:java.lang.String id -> d
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.levelgen.structure.StructureStart -> dkm -> net.minecraft.world.level.levelgen.structure.StructureStart
    F:java.lang.String INVALID_START_ID -> a
    F:net.minecraft.world.level.levelgen.structure.StructureStart INVALID_START -> b
    F:org.slf4j.Logger LOGGER -> c
    F:net.minecraft.world.level.levelgen.structure.Structure structure -> d
    F:net.minecraft.world.level.levelgen.structure.pieces.PiecesContainer pieceContainer -> e
    F:net.minecraft.world.level.ChunkCoordIntPair chunkPos -> f
    F:int references -> g
    F:net.minecraft.world.level.levelgen.structure.StructureBoundingBox cachedBoundingBox -> h
    M:net.minecraft.world.level.levelgen.structure.StructureStart loadStaticStart(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound,long) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox getBoundingBox() -> a
    M:void placeInChunk(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:net.minecraft.nbt.NBTTagCompound createTag(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:boolean isValid() -> b
    M:net.minecraft.world.level.ChunkCoordIntPair getChunkPos() -> c
    M:boolean canBeReferenced() -> d
    M:void addReference() -> e
    M:int getReferences() -> f
    M:int getMaxReferences() -> g
    M:net.minecraft.world.level.levelgen.structure.Structure getStructure() -> h
    M:java.util.List getPieces() -> i
net.minecraft.world.level.levelgen.structure.StructureType -> dkn -> net.minecraft.world.level.levelgen.structure.StructureType
    F:net.minecraft.world.level.levelgen.structure.StructureType BURIED_TREASURE -> a
    F:net.minecraft.world.level.levelgen.structure.StructureType DESERT_PYRAMID -> b
    F:net.minecraft.world.level.levelgen.structure.StructureType END_CITY -> c
    F:net.minecraft.world.level.levelgen.structure.StructureType FORTRESS -> d
    F:net.minecraft.world.level.levelgen.structure.StructureType IGLOO -> e
    F:net.minecraft.world.level.levelgen.structure.StructureType JIGSAW -> f
    F:net.minecraft.world.level.levelgen.structure.StructureType JUNGLE_TEMPLE -> g
    F:net.minecraft.world.level.levelgen.structure.StructureType MINESHAFT -> h
    F:net.minecraft.world.level.levelgen.structure.StructureType NETHER_FOSSIL -> i
    F:net.minecraft.world.level.levelgen.structure.StructureType OCEAN_MONUMENT -> j
    F:net.minecraft.world.level.levelgen.structure.StructureType OCEAN_RUIN -> k
    F:net.minecraft.world.level.levelgen.structure.StructureType RUINED_PORTAL -> l
    F:net.minecraft.world.level.levelgen.structure.StructureType SHIPWRECK -> m
    F:net.minecraft.world.level.levelgen.structure.StructureType STRONGHOLD -> n
    F:net.minecraft.world.level.levelgen.structure.StructureType SWAMP_HUT -> o
    F:net.minecraft.world.level.levelgen.structure.StructureType WOODLAND_MANSION -> p
    M:net.minecraft.world.level.levelgen.structure.StructureType register(java.lang.String,com.mojang.serialization.Codec) -> a
net.minecraft.world.level.levelgen.structure.TemplateStructurePiece -> dko -> net.minecraft.world.level.levelgen.structure.DefinedStructurePiece
    F:org.slf4j.Logger LOGGER -> h
    F:java.lang.String templateName -> a
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure template -> b
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo placeSettings -> c
    F:net.minecraft.core.BlockPosition templatePosition -> d
    M:net.minecraft.resources.MinecraftKey makeTemplateLocation() -> b
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
    M:void move(int,int,int) -> a
    M:net.minecraft.world.level.block.EnumBlockRotation getRotation() -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure template() -> c
    M:net.minecraft.core.BlockPosition templatePosition() -> d
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo placeSettings() -> e
net.minecraft.world.level.levelgen.structure.TerrainAdjustment -> dkp -> net.minecraft.world.level.levelgen.structure.TerrainAdjustment
    F:net.minecraft.world.level.levelgen.structure.TerrainAdjustment NONE -> a
    F:net.minecraft.world.level.levelgen.structure.TerrainAdjustment BURY -> b
    F:net.minecraft.world.level.levelgen.structure.TerrainAdjustment BEARD_THIN -> c
    F:net.minecraft.world.level.levelgen.structure.TerrainAdjustment BEARD_BOX -> d
    F:com.mojang.serialization.Codec CODEC -> e
    F:java.lang.String id -> f
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.levelgen.structure.pieces.PieceGenerator -> dkr -> net.minecraft.world.level.levelgen.structure.pieces.PieceGenerator
net.minecraft.world.level.levelgen.structure.pieces.PieceGenerator$Context -> dkr$a -> net.minecraft.world.level.levelgen.structure.pieces.PieceGenerator$a
    F:net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration config -> a
    F:net.minecraft.world.level.chunk.ChunkGenerator chunkGenerator -> b
    F:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager structureTemplateManager -> c
    F:net.minecraft.world.level.ChunkCoordIntPair chunkPos -> d
    F:net.minecraft.world.level.LevelHeightAccessor heightAccessor -> e
    F:net.minecraft.world.level.levelgen.SeededRandom random -> f
    F:long seed -> g
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration config() -> a
    M:net.minecraft.world.level.chunk.ChunkGenerator chunkGenerator() -> b
    M:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager structureTemplateManager() -> c
    M:net.minecraft.world.level.ChunkCoordIntPair chunkPos() -> d
    M:net.minecraft.world.level.LevelHeightAccessor heightAccessor() -> e
    M:net.minecraft.world.level.levelgen.SeededRandom random() -> f
    M:long seed() -> g
net.minecraft.world.level.levelgen.structure.pieces.PieceGeneratorSupplier -> dks -> net.minecraft.world.level.levelgen.structure.pieces.PieceGeneratorSupplier
    M:net.minecraft.world.level.levelgen.structure.pieces.PieceGeneratorSupplier simple(java.util.function.Predicate,net.minecraft.world.level.levelgen.structure.pieces.PieceGenerator) -> simple
net.minecraft.world.level.levelgen.structure.pieces.PieceGeneratorSupplier$Context -> dks$a -> net.minecraft.world.level.levelgen.structure.pieces.PieceGeneratorSupplier$a
    F:net.minecraft.world.level.chunk.ChunkGenerator chunkGenerator -> a
    F:net.minecraft.world.level.biome.WorldChunkManager biomeSource -> b
    F:net.minecraft.world.level.levelgen.RandomState randomState -> c
    F:long seed -> d
    F:net.minecraft.world.level.ChunkCoordIntPair chunkPos -> e
    F:net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration config -> f
    F:net.minecraft.world.level.LevelHeightAccessor heightAccessor -> g
    F:java.util.function.Predicate validBiome -> h
    F:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager structureTemplateManager -> i
    F:net.minecraft.core.IRegistryCustom registryAccess -> j
    M:boolean validBiomeOnTop(net.minecraft.world.level.levelgen.HeightMap$Type) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.chunk.ChunkGenerator chunkGenerator() -> a
    M:net.minecraft.world.level.biome.WorldChunkManager biomeSource() -> b
    M:net.minecraft.world.level.levelgen.RandomState randomState() -> c
    M:long seed() -> d
    M:net.minecraft.world.level.ChunkCoordIntPair chunkPos() -> e
    M:net.minecraft.world.level.levelgen.feature.configurations.WorldGenFeatureConfiguration config() -> f
    M:net.minecraft.world.level.LevelHeightAccessor heightAccessor() -> g
    M:java.util.function.Predicate validBiome() -> h
    M:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager structureTemplateManager() -> i
    M:net.minecraft.core.IRegistryCustom registryAccess() -> j
net.minecraft.world.level.levelgen.structure.pieces.PiecesContainer -> dkt -> net.minecraft.world.level.levelgen.structure.pieces.PiecesContainer
    F:java.util.List pieces -> a
    F:org.slf4j.Logger LOGGER -> b
    F:net.minecraft.resources.MinecraftKey JIGSAW_RENAME -> c
    F:java.util.Map RENAMES -> d
    M:boolean isEmpty() -> a
    M:boolean isInsidePiece(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.nbt.NBTBase save(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext) -> a
    M:net.minecraft.world.level.levelgen.structure.pieces.PiecesContainer load(net.minecraft.nbt.NBTTagList,net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox calculateBoundingBox() -> b
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.List pieces() -> c
net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext -> dku -> net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext
    F:net.minecraft.server.packs.resources.IResourceManager resourceManager -> a
    F:net.minecraft.core.IRegistryCustom registryAccess -> b
    F:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager structureTemplateManager -> c
    M:net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext fromLevel(net.minecraft.server.level.WorldServer) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.server.packs.resources.IResourceManager resourceManager() -> a
    M:net.minecraft.core.IRegistryCustom registryAccess() -> b
    M:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager structureTemplateManager() -> c
net.minecraft.world.level.levelgen.structure.pieces.StructurePieceType -> dkv -> net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType MINE_SHAFT_CORRIDOR -> a
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType MINE_SHAFT_CROSSING -> b
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType MINE_SHAFT_ROOM -> c
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType MINE_SHAFT_STAIRS -> d
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType NETHER_FORTRESS_BRIDGE_CROSSING -> e
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType NETHER_FORTRESS_BRIDGE_END_FILLER -> f
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType NETHER_FORTRESS_BRIDGE_STRAIGHT -> g
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType NETHER_FORTRESS_CASTLE_CORRIDOR_STAIRS -> h
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType NETHER_FORTRESS_CASTLE_CORRIDOR_T_BALCONY -> i
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType NETHER_FORTRESS_CASTLE_ENTRANCE -> j
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_CROSSING -> k
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_LEFT_TURN -> l
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR -> m
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_RIGHT_TURN -> n
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType NETHER_FORTRESS_CASTLE_STALK_ROOM -> o
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType NETHER_FORTRESS_MONSTER_THRONE -> p
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType NETHER_FORTRESS_ROOM_CROSSING -> q
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType NETHER_FORTRESS_STAIRS_ROOM -> r
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType NETHER_FORTRESS_START -> s
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType STRONGHOLD_CHEST_CORRIDOR -> t
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType STRONGHOLD_FILLER_CORRIDOR -> u
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType STRONGHOLD_FIVE_CROSSING -> v
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType STRONGHOLD_LEFT_TURN -> w
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType STRONGHOLD_LIBRARY -> x
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType STRONGHOLD_PORTAL_ROOM -> y
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType STRONGHOLD_PRISON_HALL -> z
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType BURIED_TREASURE_PIECE -> aa
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType SHIPWRECK_PIECE -> ab
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType NETHER_FOSSIL -> ac
    F:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType JIGSAW -> ad
    M:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType setFullContextPieceId(net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType,java.lang.String) -> a
    M:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType setPieceId(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceType$ContextlessType,java.lang.String) -> a
    M:net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType setTemplatePieceId(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceType$StructureTemplateType,java.lang.String) -> a
net.minecraft.world.level.levelgen.structure.pieces.StructurePieceType$ContextlessType -> dkv$a -> net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType$a
    M:net.minecraft.world.level.levelgen.structure.StructurePiece load(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> load
net.minecraft.world.level.levelgen.structure.pieces.StructurePieceType$StructureTemplateType -> dkv$b -> net.minecraft.world.level.levelgen.structure.pieces.WorldGenFeatureStructurePieceType$b
    M:net.minecraft.world.level.levelgen.structure.StructurePiece load(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> load
net.minecraft.world.level.levelgen.structure.pieces.StructurePiecesBuilder -> dkw -> net.minecraft.world.level.levelgen.structure.pieces.StructurePiecesBuilder
    F:java.util.List pieces -> a
    M:void addPiece(net.minecraft.world.level.levelgen.structure.StructurePiece) -> a
    M:net.minecraft.world.level.levelgen.structure.StructurePiece findCollisionPiece(net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:void offsetPiecesVertically(int) -> a
    M:int moveBelowSeaLevel(int,int,net.minecraft.util.RandomSource,int) -> a
    M:void moveInsideHeights(net.minecraft.util.RandomSource,int,int) -> a
    M:net.minecraft.world.level.levelgen.structure.pieces.PiecesContainer build() -> a
    M:void clear() -> b
    M:boolean isEmpty() -> c
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox getBoundingBox() -> d
net.minecraft.world.level.levelgen.structure.placement.ConcentricRingsStructurePlacement -> dky -> net.minecraft.world.level.levelgen.structure.placement.ConcentricRingsStructurePlacement
    F:com.mojang.serialization.Codec CODEC -> a
    F:int distance -> c
    F:int spread -> d
    F:int count -> e
    F:net.minecraft.core.HolderSet preferredBiomes -> f
    M:com.mojang.datafixers.Products$P9 codec(com.mojang.serialization.codecs.RecordCodecBuilder$Instance) -> b
    M:int distance() -> a
    M:int spread() -> b
    M:int count() -> c
    M:net.minecraft.core.HolderSet preferredBiomes() -> d
    M:boolean isPlacementChunk(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.RandomState,long,int,int) -> a
    M:net.minecraft.world.level.levelgen.structure.placement.StructurePlacementType type() -> e
net.minecraft.world.level.levelgen.structure.placement.RandomSpreadStructurePlacement -> dkz -> net.minecraft.world.level.levelgen.structure.placement.RandomSpreadStructurePlacement
    F:com.mojang.serialization.Codec CODEC -> a
    F:int spacing -> c
    F:int separation -> d
    F:net.minecraft.world.level.levelgen.structure.placement.RandomSpreadType spreadType -> e
    M:int spacing() -> a
    M:int separation() -> b
    M:net.minecraft.world.level.levelgen.structure.placement.RandomSpreadType spreadType() -> c
    M:net.minecraft.world.level.ChunkCoordIntPair getPotentialStructureChunk(long,int,int) -> a
    M:boolean isPlacementChunk(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.RandomState,long,int,int) -> a
    M:net.minecraft.world.level.levelgen.structure.placement.StructurePlacementType type() -> e
net.minecraft.world.level.levelgen.structure.placement.RandomSpreadType -> dla -> net.minecraft.world.level.levelgen.structure.placement.RandomSpreadType
    F:net.minecraft.world.level.levelgen.structure.placement.RandomSpreadType LINEAR -> a
    F:net.minecraft.world.level.levelgen.structure.placement.RandomSpreadType TRIANGULAR -> b
    F:com.mojang.serialization.Codec CODEC -> c
    F:java.lang.String id -> d
    M:java.lang.String getSerializedName() -> c
    M:int evaluate(net.minecraft.util.RandomSource,int) -> a
net.minecraft.world.level.levelgen.structure.placement.StructurePlacement -> dlb -> net.minecraft.world.level.levelgen.structure.placement.StructurePlacement
    F:com.mojang.serialization.Codec CODEC -> b
    F:int HIGHLY_ARBITRARY_RANDOM_SALT -> a
    F:net.minecraft.core.BaseBlockPosition locateOffset -> c
    F:net.minecraft.world.level.levelgen.structure.placement.StructurePlacement$FrequencyReductionMethod frequencyReductionMethod -> d
    F:float frequency -> e
    F:int salt -> f
    F:java.util.Optional exclusionZone -> g
    M:com.mojang.datafixers.Products$P5 placementCodec(com.mojang.serialization.codecs.RecordCodecBuilder$Instance) -> a
    M:net.minecraft.core.BaseBlockPosition locateOffset() -> f
    M:net.minecraft.world.level.levelgen.structure.placement.StructurePlacement$FrequencyReductionMethod frequencyReductionMethod() -> g
    M:float frequency() -> h
    M:int salt() -> i
    M:java.util.Optional exclusionZone() -> j
    M:boolean isStructureChunk(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.RandomState,long,int,int) -> b
    M:net.minecraft.core.BlockPosition getLocatePos(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:boolean probabilityReducer(long,int,int,int,float) -> a
    M:boolean legacyProbabilityReducerWithDouble(long,int,int,int,float) -> b
    M:boolean legacyArbitrarySaltProbabilityReducer(long,int,int,int,float) -> c
    M:boolean legacyPillagerOutpostReducer(long,int,int,int,float) -> d
net.minecraft.world.level.levelgen.structure.placement.StructurePlacement$ExclusionZone -> dlb$a -> net.minecraft.world.level.levelgen.structure.placement.StructurePlacement$a
    F:net.minecraft.core.Holder otherSet -> b
    F:int chunkCount -> c
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean isPlacementForbidden(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.RandomState,long,int,int) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.Holder otherSet() -> a
    M:int chunkCount() -> b
net.minecraft.world.level.levelgen.structure.placement.StructurePlacement$FrequencyReducer -> dlb$b -> net.minecraft.world.level.levelgen.structure.placement.StructurePlacement$b
net.minecraft.world.level.levelgen.structure.placement.StructurePlacement$FrequencyReductionMethod -> dlb$c -> net.minecraft.world.level.levelgen.structure.placement.StructurePlacement$c
    F:net.minecraft.world.level.levelgen.structure.placement.StructurePlacement$FrequencyReductionMethod DEFAULT -> a
    F:net.minecraft.world.level.levelgen.structure.placement.StructurePlacement$FrequencyReductionMethod LEGACY_TYPE_1 -> b
    F:net.minecraft.world.level.levelgen.structure.placement.StructurePlacement$FrequencyReductionMethod LEGACY_TYPE_2 -> c
    F:net.minecraft.world.level.levelgen.structure.placement.StructurePlacement$FrequencyReductionMethod LEGACY_TYPE_3 -> d
    F:com.mojang.serialization.Codec CODEC -> e
    F:java.lang.String name -> f
    F:net.minecraft.world.level.levelgen.structure.placement.StructurePlacement$FrequencyReducer reducer -> g
    M:boolean shouldGenerate(long,int,int,int,float) -> a
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.levelgen.structure.placement.StructurePlacementType -> dlc -> net.minecraft.world.level.levelgen.structure.placement.StructurePlacementType
    F:net.minecraft.world.level.levelgen.structure.placement.StructurePlacementType RANDOM_SPREAD -> a
    F:net.minecraft.world.level.levelgen.structure.placement.StructurePlacementType CONCENTRIC_RINGS -> b
    M:net.minecraft.world.level.levelgen.structure.placement.StructurePlacementType register(java.lang.String,com.mojang.serialization.Codec) -> a
net.minecraft.world.level.levelgen.structure.pools.EmptyPoolElement -> dle -> net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolEmpty
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolEmpty INSTANCE -> b
    M:net.minecraft.core.BaseBlockPosition getSize(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:java.util.List getShuffledJigsawBlocks(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox getBoundingBox(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:boolean place(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.util.RandomSource,boolean) -> a
    M:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePools getType() -> a
net.minecraft.world.level.levelgen.structure.pools.FeaturePoolElement -> dlf -> net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolFeature
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.core.Holder feature -> b
    F:net.minecraft.nbt.NBTTagCompound defaultJigsawNBT -> c
    M:net.minecraft.nbt.NBTTagCompound fillDefaultJigsawNBT() -> b
    M:net.minecraft.core.BaseBlockPosition getSize(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:java.util.List getShuffledJigsawBlocks(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox getBoundingBox(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:boolean place(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.util.RandomSource,boolean) -> a
    M:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePools getType() -> a
net.minecraft.world.level.levelgen.structure.pools.JigsawJunction -> dlg -> net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructureJigsawJunction
    F:int sourceX -> a
    F:int sourceGroundY -> b
    F:int sourceZ -> c
    F:int deltaY -> d
    F:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolTemplate$Matching destProjection -> e
    M:int getSourceX() -> a
    M:int getSourceGroundY() -> b
    M:int getSourceZ() -> c
    M:int getDeltaY() -> d
    M:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolTemplate$Matching getDestProjection() -> e
    M:com.mojang.serialization.Dynamic serialize(com.mojang.serialization.DynamicOps) -> a
    M:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructureJigsawJunction deserialize(com.mojang.serialization.Dynamic) -> a
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.world.level.levelgen.structure.pools.JigsawPlacement -> dlh -> net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructureJigsawPlacement
    F:org.slf4j.Logger LOGGER -> a
    M:java.util.Optional addPieces(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext,net.minecraft.core.Holder,java.util.Optional,int,net.minecraft.core.BlockPosition,boolean,java.util.Optional,int) -> a
    M:java.util.Optional getRandomNamedJigsaw(net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolStructure,net.minecraft.resources.MinecraftKey,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.world.level.levelgen.SeededRandom) -> a
    M:void addPieces(net.minecraft.world.level.levelgen.RandomState,int,boolean,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.world.level.LevelHeightAccessor,net.minecraft.util.RandomSource,net.minecraft.core.IRegistry,net.minecraft.world.level.levelgen.structure.WorldGenFeaturePillagerOutpostPoolPiece,java.util.List,net.minecraft.world.phys.shapes.VoxelShape) -> a
    M:boolean generateJigsaw(net.minecraft.server.level.WorldServer,net.minecraft.core.Holder,net.minecraft.resources.MinecraftKey,int,net.minecraft.core.BlockPosition,boolean) -> a
net.minecraft.world.level.levelgen.structure.pools.JigsawPlacement$PieceState -> dlh$a -> net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructureJigsawPlacement$a
    F:net.minecraft.world.level.levelgen.structure.WorldGenFeaturePillagerOutpostPoolPiece piece -> a
    F:org.apache.commons.lang3.mutable.MutableObject free -> b
    F:int depth -> c
net.minecraft.world.level.levelgen.structure.pools.JigsawPlacement$Placer -> dlh$b -> net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructureJigsawPlacement$b
    F:net.minecraft.core.IRegistry pools -> a
    F:int maxDepth -> b
    F:net.minecraft.world.level.chunk.ChunkGenerator chunkGenerator -> c
    F:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager structureTemplateManager -> d
    F:java.util.List pieces -> e
    F:net.minecraft.util.RandomSource random -> f
    F:java.util.Deque placing -> g
    M:void tryPlacingChildren(net.minecraft.world.level.levelgen.structure.WorldGenFeaturePillagerOutpostPoolPiece,org.apache.commons.lang3.mutable.MutableObject,int,boolean,net.minecraft.world.level.LevelHeightAccessor,net.minecraft.world.level.levelgen.RandomState) -> a
net.minecraft.world.level.levelgen.structure.pools.LegacySinglePoolElement -> dli -> net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolLegacySingle
    F:com.mojang.serialization.Codec CODEC -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo getSettings(net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,boolean) -> a
    M:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePools getType() -> a
net.minecraft.world.level.levelgen.structure.pools.ListPoolElement -> dlj -> net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolList
    F:com.mojang.serialization.Codec CODEC -> a
    F:java.util.List elements -> b
    M:net.minecraft.core.BaseBlockPosition getSize(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:java.util.List getShuffledJigsawBlocks(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox getBoundingBox(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:boolean place(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.util.RandomSource,boolean) -> a
    M:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePools getType() -> a
    M:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolStructure setProjection(net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolTemplate$Matching) -> a
    M:void setProjectionOnEachElement(net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolTemplate$Matching) -> b
net.minecraft.world.level.levelgen.structure.pools.SinglePoolElement -> dlk -> net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolSingle
    F:com.mojang.serialization.Codec TEMPLATE_CODEC -> a
    F:com.mojang.serialization.Codec CODEC -> b
    F:com.mojang.datafixers.util.Either template -> c
    F:net.minecraft.core.Holder processors -> d
    M:com.mojang.serialization.DataResult encodeTemplate(com.mojang.datafixers.util.Either,com.mojang.serialization.DynamicOps,java.lang.Object) -> a
    M:com.mojang.serialization.codecs.RecordCodecBuilder processorsCodec() -> b
    M:com.mojang.serialization.codecs.RecordCodecBuilder templateCodec() -> c
    M:net.minecraft.core.BaseBlockPosition getSize(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure getTemplate(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager) -> a
    M:java.util.List getDataMarkers(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,boolean) -> a
    M:java.util.List getShuffledJigsawBlocks(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox getBoundingBox(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:boolean place(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.util.RandomSource,boolean) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo getSettings(net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,boolean) -> a
    M:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePools getType() -> a
net.minecraft.world.level.levelgen.structure.pools.StructurePoolElement -> dll -> net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolStructure
    F:com.mojang.serialization.Codec CODEC -> e
    F:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolTemplate$Matching projection -> a
    M:com.mojang.serialization.codecs.RecordCodecBuilder projectionCodec() -> d
    M:void handleDataMarker(net.minecraft.world.level.GeneratorAccess,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolStructure setProjection(net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolTemplate$Matching) -> a
    M:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolTemplate$Matching getProjection() -> e
    M:int getGroundLevelDelta() -> f
    M:java.util.function.Function empty() -> g
    M:java.util.function.Function legacy(java.lang.String) -> a
    M:java.util.function.Function legacy(java.lang.String,net.minecraft.core.Holder) -> a
    M:java.util.function.Function single(java.lang.String) -> b
    M:java.util.function.Function single(java.lang.String,net.minecraft.core.Holder) -> b
    M:java.util.function.Function feature(net.minecraft.core.Holder) -> a
    M:java.util.function.Function list(java.util.List) -> a
net.minecraft.world.level.levelgen.structure.pools.StructurePoolElementType -> dlm -> net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePools
    F:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePools SINGLE -> a
    F:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePools LIST -> b
    F:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePools FEATURE -> c
    F:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePools EMPTY -> d
    F:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePools LEGACY -> e
    M:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePools register(java.lang.String,com.mojang.serialization.Codec) -> a
net.minecraft.world.level.levelgen.structure.pools.StructureTemplatePool -> dln -> net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolTemplate
    F:org.slf4j.Logger LOGGER -> c
    F:int SIZE_UNSET -> d
    F:com.mojang.serialization.Codec DIRECT_CODEC -> a
    F:com.mojang.serialization.Codec CODEC -> b
    F:net.minecraft.resources.MinecraftKey name -> e
    F:java.util.List rawTemplates -> f
    F:it.unimi.dsi.fastutil.objects.ObjectArrayList templates -> g
    F:net.minecraft.resources.MinecraftKey fallback -> h
    F:int maxSize -> i
    M:int getMaxSize(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager) -> a
    M:net.minecraft.resources.MinecraftKey getFallback() -> a
    M:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolStructure getRandomTemplate(net.minecraft.util.RandomSource) -> a
    M:java.util.List getShuffledTemplates(net.minecraft.util.RandomSource) -> b
    M:net.minecraft.resources.MinecraftKey getName() -> b
    M:int size() -> c
net.minecraft.world.level.levelgen.structure.pools.StructureTemplatePool$Projection -> dln$a -> net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolTemplate$Matching
    F:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolTemplate$Matching TERRAIN_MATCHING -> a
    F:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolTemplate$Matching RIGID -> b
    F:net.minecraft.util.StringRepresentable$EnumCodec CODEC -> c
    F:java.lang.String name -> d
    F:com.google.common.collect.ImmutableList processors -> e
    M:java.lang.String getName() -> a
    M:net.minecraft.world.level.levelgen.structure.pools.WorldGenFeatureDefinedStructurePoolTemplate$Matching byName(java.lang.String) -> a
    M:com.google.common.collect.ImmutableList getProcessors() -> b
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.levelgen.structure.structures.BuriedTreasurePieces -> dlp -> net.minecraft.world.level.levelgen.structure.structures.BuriedTreasurePieces
net.minecraft.world.level.levelgen.structure.structures.BuriedTreasurePieces$BuriedTreasurePiece -> dlp$a -> net.minecraft.world.level.levelgen.structure.structures.BuriedTreasurePieces$a
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
    M:boolean isLiquid(net.minecraft.world.level.block.state.IBlockData) -> b
net.minecraft.world.level.levelgen.structure.structures.BuriedTreasureStructure -> dlq -> net.minecraft.world.level.levelgen.structure.structures.BuriedTreasureStructure
    F:com.mojang.serialization.Codec CODEC -> d
    M:java.util.Optional findGenerationPoint(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:void generatePieces(net.minecraft.world.level.levelgen.structure.pieces.StructurePiecesBuilder,net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureType type() -> e
net.minecraft.world.level.levelgen.structure.structures.DesertPyramidPiece -> dlr -> net.minecraft.world.level.levelgen.structure.structures.DesertPyramidPiece
    F:int WIDTH -> h
    F:int DEPTH -> i
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.DesertPyramidStructure -> dls -> net.minecraft.world.level.levelgen.structure.structures.DesertPyramidStructure
    F:com.mojang.serialization.Codec CODEC -> d
    M:net.minecraft.world.level.levelgen.structure.StructureType type() -> e
net.minecraft.world.level.levelgen.structure.structures.EndCityPieces -> dlt -> net.minecraft.world.level.levelgen.structure.structures.EndCityPieces
    F:int MAX_GEN_DEPTH -> a
    F:net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$SectionGenerator HOUSE_TOWER_GENERATOR -> b
    F:java.util.List TOWER_BRIDGES -> c
    F:net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$SectionGenerator TOWER_GENERATOR -> d
    F:net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$SectionGenerator TOWER_BRIDGE_GENERATOR -> e
    F:java.util.List FAT_TOWER_BRIDGES -> f
    F:net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$SectionGenerator FAT_TOWER_GENERATOR -> g
    F:boolean shipCreated -> a
    M:net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$EndCityPiece addPiece(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$EndCityPiece,net.minecraft.core.BlockPosition,java.lang.String,net.minecraft.world.level.block.EnumBlockRotation,boolean) -> a
    M:void startHouseTower(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,java.util.List,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$EndCityPiece addHelper(java.util.List,net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$EndCityPiece) -> a
    M:boolean recursiveChildren(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$SectionGenerator,int,net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$EndCityPiece,net.minecraft.core.BlockPosition,java.util.List,net.minecraft.util.RandomSource) -> a
    M:void init() -> a
    M:boolean generate(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,int,net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$EndCityPiece,net.minecraft.core.BlockPosition,java.util.List,net.minecraft.util.RandomSource) -> a
    M:void init() -> a
    M:boolean generate(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,int,net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$EndCityPiece,net.minecraft.core.BlockPosition,java.util.List,net.minecraft.util.RandomSource) -> a
    M:void init() -> a
    M:boolean generate(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,int,net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$EndCityPiece,net.minecraft.core.BlockPosition,java.util.List,net.minecraft.util.RandomSource) -> a
    M:void init() -> a
    M:boolean generate(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,int,net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$EndCityPiece,net.minecraft.core.BlockPosition,java.util.List,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$EndCityPiece -> dlt$a -> net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo makeSettings(boolean,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.resources.MinecraftKey makeTemplateLocation() -> b
    M:net.minecraft.resources.MinecraftKey makeResourceLocation(java.lang.String) -> a
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void handleDataMarker(java.lang.String,net.minecraft.core.BlockPosition,net.minecraft.world.level.WorldAccess,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$SectionGenerator -> dlt$b -> net.minecraft.world.level.levelgen.structure.structures.EndCityPieces$b
net.minecraft.world.level.levelgen.structure.structures.EndCityStructure -> dlu -> net.minecraft.world.level.levelgen.structure.structures.EndCityStructure
    F:com.mojang.serialization.Codec CODEC -> d
    M:java.util.Optional findGenerationPoint(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:void generatePieces(net.minecraft.world.level.levelgen.structure.pieces.StructurePiecesBuilder,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureType type() -> e
net.minecraft.world.level.levelgen.structure.structures.IglooPieces -> dlv -> net.minecraft.world.level.levelgen.structure.structures.IglooPieces
    F:int GENERATION_HEIGHT -> a
    F:net.minecraft.resources.MinecraftKey STRUCTURE_LOCATION_IGLOO -> b
    F:net.minecraft.resources.MinecraftKey STRUCTURE_LOCATION_LADDER -> c
    F:net.minecraft.resources.MinecraftKey STRUCTURE_LOCATION_LABORATORY -> d
    F:java.util.Map PIVOTS -> e
    F:java.util.Map OFFSETS -> f
    M:void addPieces(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.levelgen.structure.structures.IglooPieces$IglooPiece -> dlv$a -> net.minecraft.world.level.levelgen.structure.structures.IglooPieces$a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo makeSettings(net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.core.BlockPosition makePosition(net.minecraft.resources.MinecraftKey,net.minecraft.core.BlockPosition,int) -> a
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void handleDataMarker(java.lang.String,net.minecraft.core.BlockPosition,net.minecraft.world.level.WorldAccess,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.IglooStructure -> dlw -> net.minecraft.world.level.levelgen.structure.structures.IglooStructure
    F:com.mojang.serialization.Codec CODEC -> d
    M:java.util.Optional findGenerationPoint(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:void generatePieces(net.minecraft.world.level.levelgen.structure.pieces.StructurePiecesBuilder,net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureType type() -> e
net.minecraft.world.level.levelgen.structure.structures.JigsawStructure -> dlx -> net.minecraft.world.level.levelgen.structure.structures.JigsawStructure
    F:int MAX_TOTAL_STRUCTURE_RANGE -> d
    F:com.mojang.serialization.Codec CODEC -> e
    F:net.minecraft.core.Holder startPool -> f
    F:java.util.Optional startJigsawName -> g
    F:int maxDepth -> h
    F:net.minecraft.world.level.levelgen.heightproviders.HeightProvider startHeight -> i
    F:boolean useExpansionHack -> j
    F:java.util.Optional projectStartToHeightmap -> k
    F:int maxDistanceFromCenter -> l
    M:java.util.function.Function verifyRange() -> f
    M:java.util.Optional findGenerationPoint(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureType type() -> e
net.minecraft.world.level.levelgen.structure.structures.JungleTemplePiece -> dly -> net.minecraft.world.level.levelgen.structure.structures.JungleTemplePiece
    F:int WIDTH -> h
    F:int DEPTH -> i
    F:boolean placedMainChest -> j
    F:boolean placedHiddenChest -> k
    F:boolean placedTrap1 -> l
    F:boolean placedTrap2 -> m
    F:net.minecraft.world.level.levelgen.structure.structures.JungleTemplePiece$MossStoneSelector STONE_SELECTOR -> n
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.JungleTemplePiece$MossStoneSelector -> dly$a -> net.minecraft.world.level.levelgen.structure.structures.JungleTemplePiece$a
    M:void next(net.minecraft.util.RandomSource,int,int,int,boolean) -> a
net.minecraft.world.level.levelgen.structure.structures.JungleTempleStructure -> dlz -> net.minecraft.world.level.levelgen.structure.structures.JungleTempleStructure
    F:com.mojang.serialization.Codec CODEC -> d
    M:net.minecraft.world.level.levelgen.structure.StructureType type() -> e
net.minecraft.world.level.levelgen.structure.structures.MineshaftPieces -> dma -> net.minecraft.world.level.levelgen.structure.structures.MineshaftPieces
    F:org.slf4j.Logger LOGGER -> b
    F:int DEFAULT_SHAFT_WIDTH -> c
    F:int DEFAULT_SHAFT_HEIGHT -> d
    F:int DEFAULT_SHAFT_LENGTH -> e
    F:int MAX_PILLAR_HEIGHT -> f
    F:int MAX_CHAIN_HEIGHT -> g
    F:int MAX_DEPTH -> h
    F:int MAGIC_START_Y -> a
    M:net.minecraft.world.level.levelgen.structure.structures.MineshaftPieces$MineShaftPiece createRandomShaftPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int,net.minecraft.world.level.levelgen.structure.structures.MineshaftStructure$Type) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.MineshaftPieces$MineShaftPiece generateAndAddPiece(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
net.minecraft.world.level.levelgen.structure.structures.MineshaftPieces$MineShaftCorridor -> dma$a -> net.minecraft.world.level.levelgen.structure.structures.MineshaftPieces$a
    F:boolean hasRails -> b
    F:boolean spiderCorridor -> c
    F:boolean hasPlacedSpider -> d
    F:int numSections -> h
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox findCorridorSize(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection) -> a
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:boolean createChest(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.util.RandomSource,int,int,int,net.minecraft.resources.MinecraftKey) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
    M:void placeDoubleLowerOrUpperSupport(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,int,int,int) -> a
    M:void fillColumnDown(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.block.state.IBlockData,int,int,int,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> b
    M:void fillPillarDownOrChainUp(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.block.state.IBlockData,int,int,int,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> c
    M:void fillColumnBetween(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition$MutableBlockPosition,int,int) -> a
    M:boolean canPlaceColumnOnTopOf(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean canHangChainBelow(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:void placeSupport(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,int,int,int,int,int,net.minecraft.util.RandomSource) -> a
    M:void maybePlaceCobWeb(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.util.RandomSource,float,int,int,int) -> a
    M:boolean hasSturdyNeighbours(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,int,int,int,int) -> a
net.minecraft.world.level.levelgen.structure.structures.MineshaftPieces$MineShaftCrossing -> dma$b -> net.minecraft.world.level.levelgen.structure.structures.MineshaftPieces$b
    F:net.minecraft.core.EnumDirection direction -> b
    F:boolean isTwoFloored -> c
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox findCrossing(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection) -> a
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
    M:void placeSupportPillar(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,int,int,int,int) -> a
net.minecraft.world.level.levelgen.structure.structures.MineshaftPieces$MineShaftPiece -> dma$c -> net.minecraft.world.level.levelgen.structure.structures.MineshaftPieces$c
    F:net.minecraft.world.level.levelgen.structure.structures.MineshaftStructure$Type type -> a
    M:boolean canBeReplaced(net.minecraft.world.level.IWorldReader,int,int,int,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean isSupportingBox(net.minecraft.world.level.IBlockAccess,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,int,int,int,int) -> a
    M:boolean isInInvalidLocation(net.minecraft.world.level.GeneratorAccess,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:void setPlanksBlock(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.block.state.IBlockData,int,int,int) -> a
net.minecraft.world.level.levelgen.structure.structures.MineshaftPieces$MineShaftRoom -> dma$d -> net.minecraft.world.level.levelgen.structure.structures.MineshaftPieces$d
    F:java.util.List childEntranceBoxes -> b
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
    M:void move(int,int,int) -> a
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.level.levelgen.structure.structures.MineshaftPieces$MineShaftStairs -> dma$e -> net.minecraft.world.level.levelgen.structure.structures.MineshaftPieces$e
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox findStairs(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection) -> a
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.MineshaftStructure -> dmb -> net.minecraft.world.level.levelgen.structure.structures.MineshaftStructure
    F:com.mojang.serialization.Codec CODEC -> d
    F:net.minecraft.world.level.levelgen.structure.structures.MineshaftStructure$Type type -> e
    M:java.util.Optional findGenerationPoint(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:int generatePiecesAndAdjust(net.minecraft.world.level.levelgen.structure.pieces.StructurePiecesBuilder,net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureType type() -> e
net.minecraft.world.level.levelgen.structure.structures.MineshaftStructure$Type -> dmb$a -> net.minecraft.world.level.levelgen.structure.structures.MineshaftStructure$a
    F:net.minecraft.world.level.levelgen.structure.structures.MineshaftStructure$Type NORMAL -> a
    F:net.minecraft.world.level.levelgen.structure.structures.MineshaftStructure$Type MESA -> b
    F:com.mojang.serialization.Codec CODEC -> c
    F:java.lang.String name -> d
    F:net.minecraft.world.level.block.state.IBlockData woodState -> e
    F:net.minecraft.world.level.block.state.IBlockData planksState -> f
    F:net.minecraft.world.level.block.state.IBlockData fenceState -> g
    M:java.lang.String getName() -> a
    M:net.minecraft.world.level.levelgen.structure.structures.MineshaftStructure$Type byId(int) -> a
    M:net.minecraft.world.level.block.state.IBlockData getWoodState() -> b
    M:net.minecraft.world.level.block.state.IBlockData getPlanksState() -> d
    M:net.minecraft.world.level.block.state.IBlockData getFenceState() -> e
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces -> dmc -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces
    F:int MAX_DEPTH -> b
    F:int LOWEST_Y_POSITION -> c
    F:int MAGIC_START_Y -> a
    M:net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$NetherBridgePiece findAndCreateBridgePieceFactory(net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$PieceWeight,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$BridgeCrossing -> dmc$a -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$a
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$BridgeCrossing createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$BridgeEndFiller -> dmc$b -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$b
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    F:int selfSeed -> d
    M:net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$BridgeEndFiller createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$BridgeStraight -> dmc$c -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$c
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$BridgeStraight createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$CastleCorridorStairsPiece -> dmc$d -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$d
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$CastleCorridorStairsPiece createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$CastleCorridorTBalconyPiece -> dmc$e -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$e
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$CastleCorridorTBalconyPiece createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$CastleEntrance -> dmc$f -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$f
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$CastleEntrance createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$CastleSmallCorridorCrossingPiece -> dmc$g -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$g
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$CastleSmallCorridorCrossingPiece createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$CastleSmallCorridorLeftTurnPiece -> dmc$h -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$h
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    F:boolean isNeedingChest -> d
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$CastleSmallCorridorLeftTurnPiece createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$CastleSmallCorridorPiece -> dmc$i -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$i
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$CastleSmallCorridorPiece createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$CastleSmallCorridorRightTurnPiece -> dmc$j -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$j
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    F:boolean isNeedingChest -> d
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$CastleSmallCorridorRightTurnPiece createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$CastleStalkRoom -> dmc$k -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$k
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$CastleStalkRoom createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$MonsterThrone -> dmc$l -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$l
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    F:boolean hasPlacedSpawner -> d
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$MonsterThrone createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,int,int,int,int,net.minecraft.core.EnumDirection) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$NetherBridgePiece -> dmc$m -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$m
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:int updatePieceWeight(java.util.List) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$NetherBridgePiece generatePiece(net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$StartPiece,java.util.List,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:net.minecraft.world.level.levelgen.structure.StructurePiece generateAndAddPiece(net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$StartPiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int,boolean) -> a
    M:net.minecraft.world.level.levelgen.structure.StructurePiece generateChildForward(net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$StartPiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,boolean) -> a
    M:net.minecraft.world.level.levelgen.structure.StructurePiece generateChildLeft(net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$StartPiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,boolean) -> b
    M:net.minecraft.world.level.levelgen.structure.StructurePiece generateChildRight(net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$StartPiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,boolean) -> c
    M:boolean isOkBox(net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$PieceWeight -> dmc$n -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$n
    F:java.lang.Class pieceClass -> a
    F:int weight -> b
    F:int placeCount -> c
    F:int maxPlaceCount -> d
    F:boolean allowInRow -> e
    M:boolean doPlace(int) -> a
    M:boolean isValid() -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$RoomCrossing -> dmc$o -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$o
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$RoomCrossing createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$StairsRoom -> dmc$p -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$p
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$StairsRoom createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,int,int,int,int,net.minecraft.core.EnumDirection) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$StartPiece -> dmc$q -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$q
    F:net.minecraft.world.level.levelgen.structure.structures.NetherFortressPieces$PieceWeight previousPiece -> a
    F:java.util.List availableBridgePieces -> b
    F:java.util.List availableCastlePieces -> c
    F:java.util.List pendingChildren -> d
net.minecraft.world.level.levelgen.structure.structures.NetherFortressStructure -> dmd -> net.minecraft.world.level.levelgen.structure.structures.NetherFortressStructure
    F:net.minecraft.util.random.WeightedRandomList FORTRESS_ENEMIES -> d
    F:com.mojang.serialization.Codec CODEC -> e
    M:java.util.Optional findGenerationPoint(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:void generatePieces(net.minecraft.world.level.levelgen.structure.pieces.StructurePiecesBuilder,net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureType type() -> e
net.minecraft.world.level.levelgen.structure.structures.NetherFossilPieces -> dme -> net.minecraft.world.level.levelgen.structure.structures.NetherFossilPieces
    M:void addPieces(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFossilPieces$NetherFossilPiece -> dme$a -> net.minecraft.world.level.levelgen.structure.structures.NetherFossilPieces$a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo makeSettings(net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void handleDataMarker(java.lang.String,net.minecraft.core.BlockPosition,net.minecraft.world.level.WorldAccess,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.NetherFossilStructure -> dmf -> net.minecraft.world.level.levelgen.structure.structures.NetherFossilStructure
    F:com.mojang.serialization.Codec CODEC -> d
    F:net.minecraft.world.level.levelgen.heightproviders.HeightProvider height -> e
    M:java.util.Optional findGenerationPoint(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureType type() -> e
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces -> dmg -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$FitDoubleXRoom -> dmg$a -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$a
    M:boolean fits(net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$RoomDefinition) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentPiece create(net.minecraft.core.EnumDirection,net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$RoomDefinition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$FitDoubleXYRoom -> dmg$b -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$b
    M:boolean fits(net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$RoomDefinition) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentPiece create(net.minecraft.core.EnumDirection,net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$RoomDefinition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$FitDoubleYRoom -> dmg$c -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$c
    M:boolean fits(net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$RoomDefinition) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentPiece create(net.minecraft.core.EnumDirection,net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$RoomDefinition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$FitDoubleYZRoom -> dmg$d -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$d
    M:boolean fits(net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$RoomDefinition) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentPiece create(net.minecraft.core.EnumDirection,net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$RoomDefinition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$FitDoubleZRoom -> dmg$e -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$e
    M:boolean fits(net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$RoomDefinition) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentPiece create(net.minecraft.core.EnumDirection,net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$RoomDefinition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$FitSimpleRoom -> dmg$f -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$f
    M:boolean fits(net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$RoomDefinition) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentPiece create(net.minecraft.core.EnumDirection,net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$RoomDefinition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$FitSimpleTopRoom -> dmg$g -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$g
    M:boolean fits(net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$RoomDefinition) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentPiece create(net.minecraft.core.EnumDirection,net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$RoomDefinition,net.minecraft.util.RandomSource) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$MonumentBuilding -> dmg$h -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$h
    F:int BIOME_RANGE_CHECK -> a
    M:java.util.List generateRoomGraph(net.minecraft.util.RandomSource) -> b
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
    M:void generateWing(boolean,int,net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:void generateEntranceArchs(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:void generateEntranceWall(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> b
    M:void generateRoofPiece(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> c
    M:void generateLowerWall(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> d
    M:void generateMiddleWall(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> e
    M:void generateUpperWall(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> f
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$MonumentRoomFitter -> dmg$i -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$i
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentCoreRoom -> dmg$j -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$j
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentDoubleXRoom -> dmg$k -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$k
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentDoubleXYRoom -> dmg$l -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$l
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentDoubleYRoom -> dmg$m -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$m
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentDoubleYZRoom -> dmg$n -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$n
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentDoubleZRoom -> dmg$o -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$o
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentEntryRoom -> dmg$p -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$p
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentPenthouse -> dmg$q -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$q
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentPiece -> dmg$r -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$r
    F:net.minecraft.world.level.block.state.IBlockData BASE_GRAY -> b
    F:net.minecraft.world.level.block.state.IBlockData BASE_LIGHT -> c
    F:net.minecraft.world.level.block.state.IBlockData BASE_BLACK -> d
    F:net.minecraft.world.level.block.state.IBlockData DOT_DECO_DATA -> h
    F:net.minecraft.world.level.block.state.IBlockData LAMP_BLOCK -> i
    F:boolean DO_FILL -> j
    F:net.minecraft.world.level.block.state.IBlockData FILL_BLOCK -> k
    F:java.util.Set FILL_KEEP -> l
    F:int GRIDROOM_WIDTH -> m
    F:int GRIDROOM_DEPTH -> n
    F:int GRIDROOM_HEIGHT -> o
    F:int GRID_WIDTH -> p
    F:int GRID_DEPTH -> q
    F:int GRID_HEIGHT -> r
    F:int GRID_FLOOR_COUNT -> s
    F:int GRID_SIZE -> t
    F:int GRIDROOM_SOURCE_INDEX -> u
    F:int GRIDROOM_TOP_CONNECT_INDEX -> v
    F:int GRIDROOM_LEFTWING_CONNECT_INDEX -> w
    F:int GRIDROOM_RIGHTWING_CONNECT_INDEX -> x
    F:int LEFTWING_INDEX -> y
    F:int RIGHTWING_INDEX -> z
    M:int getRoomIndex(int,int,int) -> c
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox makeBoundingBox(net.minecraft.core.EnumDirection,net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$RoomDefinition,int,int,int) -> a
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void generateWaterBox(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,int,int,int,int,int,int) -> b
    M:void generateDefaultFloor(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,int,int,boolean) -> a
    M:void generateBoxOnFillOnly(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,int,int,int,int,int,int,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean chunkIntersects(net.minecraft.world.level.levelgen.structure.StructureBoundingBox,int,int,int,int) -> a
    M:boolean spawnElder(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,int,int,int) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentSimpleRoom -> dmg$s -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$s
    F:int mainDesign -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentSimpleTopRoom -> dmg$t -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$t
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$OceanMonumentWingRoom -> dmg$u -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$u
    F:int mainDesign -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$RoomDefinition -> dmg$v -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$v
    F:int index -> a
    F:boolean claimed -> d
    F:boolean isSource -> e
    F:int scanIndex -> f
    M:void setConnection(net.minecraft.core.EnumDirection,net.minecraft.world.level.levelgen.structure.structures.OceanMonumentPieces$RoomDefinition) -> a
    M:void updateOpenings() -> a
    M:boolean findSource(int) -> a
    M:boolean isSpecial() -> b
    M:int countOpenings() -> c
net.minecraft.world.level.levelgen.structure.structures.OceanMonumentStructure -> dmh -> net.minecraft.world.level.levelgen.structure.structures.OceanMonumentStructure
    F:com.mojang.serialization.Codec CODEC -> d
    M:java.util.Optional findGenerationPoint(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:net.minecraft.world.level.levelgen.structure.StructurePiece createTopPiece(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.levelgen.SeededRandom) -> a
    M:void generatePieces(net.minecraft.world.level.levelgen.structure.pieces.StructurePiecesBuilder,net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:net.minecraft.world.level.levelgen.structure.pieces.PiecesContainer regeneratePiecesAfterLoad(net.minecraft.world.level.ChunkCoordIntPair,long,net.minecraft.world.level.levelgen.structure.pieces.PiecesContainer) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureType type() -> e
net.minecraft.world.level.levelgen.structure.structures.OceanRuinPieces -> dmi -> net.minecraft.world.level.levelgen.structure.structures.OceanRuinPieces
    M:net.minecraft.resources.MinecraftKey getSmallWarmRuin(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.resources.MinecraftKey getBigWarmRuin(net.minecraft.util.RandomSource) -> b
    M:void addPieces(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.structures.OceanRuinStructure) -> a
    M:void addClusterRuins(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.util.RandomSource,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.structures.OceanRuinStructure,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor) -> a
    M:java.util.List allPositions(net.minecraft.util.RandomSource,net.minecraft.core.BlockPosition) -> a
    M:void addPiece(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.structures.OceanRuinStructure,boolean,float) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanRuinPieces$OceanRuinPiece -> dmi$a -> net.minecraft.world.level.levelgen.structure.structures.OceanRuinPieces$a
    F:net.minecraft.world.level.levelgen.structure.structures.OceanRuinStructure$Type biomeType -> h
    F:float integrity -> i
    F:boolean isLarge -> j
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo makeSettings(net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void handleDataMarker(java.lang.String,net.minecraft.core.BlockPosition,net.minecraft.world.level.WorldAccess,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
    M:int getHeight(net.minecraft.core.BlockPosition,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.OceanRuinStructure -> dmj -> net.minecraft.world.level.levelgen.structure.structures.OceanRuinStructure
    F:com.mojang.serialization.Codec CODEC -> d
    F:net.minecraft.world.level.levelgen.structure.structures.OceanRuinStructure$Type biomeTemp -> e
    F:float largeProbability -> f
    F:float clusterProbability -> g
    M:java.util.Optional findGenerationPoint(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:void generatePieces(net.minecraft.world.level.levelgen.structure.pieces.StructurePiecesBuilder,net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureType type() -> e
net.minecraft.world.level.levelgen.structure.structures.OceanRuinStructure$Type -> dmj$a -> net.minecraft.world.level.levelgen.structure.structures.OceanRuinStructure$a
    F:net.minecraft.world.level.levelgen.structure.structures.OceanRuinStructure$Type WARM -> a
    F:net.minecraft.world.level.levelgen.structure.structures.OceanRuinStructure$Type COLD -> b
    F:com.mojang.serialization.Codec CODEC -> c
    F:java.lang.String name -> d
    M:java.lang.String getName() -> a
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece -> dmk -> net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece
    F:org.slf4j.Logger LOGGER -> h
    F:float PROBABILITY_OF_GOLD_GONE -> i
    F:float PROBABILITY_OF_MAGMA_INSTEAD_OF_NETHERRACK -> j
    F:float PROBABILITY_OF_MAGMA_INSTEAD_OF_LAVA -> k
    F:net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$VerticalPlacement verticalPlacement -> l
    F:net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$Properties properties -> m
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo makeSettings(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.nbt.NBTTagCompound,net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo makeSettings(net.minecraft.world.level.block.EnumBlockMirror,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$VerticalPlacement,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$Properties) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorPredicates getLavaProcessorRule(net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$VerticalPlacement,net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$Properties) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
    M:void handleDataMarker(java.lang.String,net.minecraft.core.BlockPosition,net.minecraft.world.level.WorldAccess,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:void maybeAddVines(net.minecraft.util.RandomSource,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:void maybeAddLeavesAbove(net.minecraft.util.RandomSource,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> b
    M:void addNetherrackDripColumnsBelowPortal(net.minecraft.util.RandomSource,net.minecraft.world.level.GeneratorAccess) -> a
    M:void addNetherrackDripColumn(net.minecraft.util.RandomSource,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> c
    M:void spreadNetherrack(net.minecraft.util.RandomSource,net.minecraft.world.level.GeneratorAccess) -> b
    M:boolean canBlockBeReplacedByNetherrackOrMagma(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:void placeNetherrackOrMagma(net.minecraft.util.RandomSource,net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> d
    M:int getSurfaceY(net.minecraft.world.level.GeneratorAccess,int,int,net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$VerticalPlacement) -> a
    M:net.minecraft.world.level.levelgen.HeightMap$Type getHeightMapType(net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$VerticalPlacement) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorPredicates getBlockReplaceRule(net.minecraft.world.level.block.Block,float,net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorPredicates getBlockReplaceRule(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> a
net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$Properties -> dmk$a -> net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$a
    F:com.mojang.serialization.Codec CODEC -> a
    F:boolean cold -> b
    F:float mossiness -> c
    F:boolean airPocket -> d
    F:boolean overgrown -> e
    F:boolean vines -> f
    F:boolean replaceWithBlackstone -> g
net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$VerticalPlacement -> dmk$b -> net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$b
    F:net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$VerticalPlacement ON_LAND_SURFACE -> a
    F:net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$VerticalPlacement PARTLY_BURIED -> b
    F:net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$VerticalPlacement ON_OCEAN_FLOOR -> c
    F:net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$VerticalPlacement IN_MOUNTAIN -> d
    F:net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$VerticalPlacement UNDERGROUND -> e
    F:net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$VerticalPlacement IN_NETHER -> f
    F:net.minecraft.util.StringRepresentable$EnumCodec CODEC -> g
    F:java.lang.String name -> h
    M:java.lang.String getName() -> a
    M:net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$VerticalPlacement byName(java.lang.String) -> a
    M:java.lang.String getSerializedName() -> c
net.minecraft.world.level.levelgen.structure.structures.RuinedPortalStructure -> dml -> net.minecraft.world.level.levelgen.structure.structures.RuinedPortalStructure
    F:float PROBABILITY_OF_GIANT_PORTAL -> g
    F:int MIN_Y_INDEX -> h
    F:java.util.List setups -> i
    F:com.mojang.serialization.Codec CODEC -> d
    M:java.util.Optional findGenerationPoint(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:boolean sample(net.minecraft.world.level.levelgen.SeededRandom,float) -> a
    M:boolean isCold(net.minecraft.core.BlockPosition,net.minecraft.core.Holder) -> a
    M:int findSuitableY(net.minecraft.util.RandomSource,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$VerticalPlacement,boolean,int,int,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.LevelHeightAccessor,net.minecraft.world.level.levelgen.RandomState) -> a
    M:int getRandomWithinInterval(net.minecraft.util.RandomSource,int,int) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureType type() -> e
net.minecraft.world.level.levelgen.structure.structures.RuinedPortalStructure$Setup -> dml$a -> net.minecraft.world.level.levelgen.structure.structures.RuinedPortalStructure$a
    F:net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$VerticalPlacement placement -> b
    F:float airPocketProbability -> c
    F:float mossiness -> d
    F:boolean overgrown -> e
    F:boolean vines -> f
    F:boolean canBeCold -> g
    F:boolean replaceWithBlackstone -> h
    F:float weight -> i
    F:com.mojang.serialization.Codec CODEC -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.levelgen.structure.structures.RuinedPortalPiece$VerticalPlacement placement() -> a
    M:float airPocketProbability() -> b
    M:float mossiness() -> c
    M:boolean overgrown() -> d
    M:boolean vines() -> e
    M:boolean canBeCold() -> f
    M:boolean replaceWithBlackstone() -> g
    M:float weight() -> h
net.minecraft.world.level.levelgen.structure.structures.ShipwreckPieces -> dmm -> net.minecraft.world.level.levelgen.structure.structures.ShipwreckPieces
    F:net.minecraft.core.BlockPosition PIVOT -> a
    F:java.util.Map MARKERS_TO_LOOT -> d
    M:void addPieces(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,boolean) -> a
net.minecraft.world.level.levelgen.structure.structures.ShipwreckPieces$ShipwreckPiece -> dmm$a -> net.minecraft.world.level.levelgen.structure.structures.ShipwreckPieces$a
    F:boolean isBeached -> h
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo makeSettings(net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:void handleDataMarker(java.lang.String,net.minecraft.core.BlockPosition,net.minecraft.world.level.WorldAccess,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.ShipwreckStructure -> dmn -> net.minecraft.world.level.levelgen.structure.structures.ShipwreckStructure
    F:com.mojang.serialization.Codec CODEC -> d
    F:boolean isBeached -> e
    M:java.util.Optional findGenerationPoint(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:void generatePieces(net.minecraft.world.level.levelgen.structure.pieces.StructurePiecesBuilder,net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureType type() -> e
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces -> dmo -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces
    F:int SMALL_DOOR_WIDTH -> b
    F:int SMALL_DOOR_HEIGHT -> c
    F:int MAX_DEPTH -> d
    F:int LOWEST_Y_POSITION -> e
    F:boolean CHECK_AIR -> f
    F:int MAGIC_START_Y -> a
    F:java.util.List currentPieces -> h
    F:java.lang.Class imposedPiece -> i
    F:int totalWeight -> j
    F:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$SmoothStoneSelector SMOOTH_STONE_SELECTOR -> k
    M:void resetPieces() -> a
    M:boolean updatePieceWeight() -> b
    M:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StrongholdPiece findAndCreatePieceFactory(java.lang.Class,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StrongholdPiece generatePieceFromSmallDoor(net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StartPiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:net.minecraft.world.level.levelgen.structure.StructurePiece generateAndAddPiece(net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StartPiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> b
    M:boolean doPlace(int) -> a
    M:boolean doPlace(int) -> a
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$ChestCorridor -> dmo$a -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$a
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    F:boolean hasPlacedChest -> d
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$ChestCorridor createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$FillerCorridor -> dmo$b -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$b
    F:int steps -> a
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox findPieceBox(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$FiveCrossing -> dmo$c -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$c
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    F:boolean leftLow -> d
    F:boolean leftHigh -> i
    F:boolean rightLow -> j
    F:boolean rightHigh -> k
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$FiveCrossing createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$LeftTurn -> dmo$d -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$d
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$LeftTurn createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$Library -> dmo$e -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$e
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int TALL_HEIGHT -> c
    F:int DEPTH -> d
    F:boolean isTall -> i
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$Library createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$PieceWeight -> dmo$f -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$f
    F:java.lang.Class pieceClass -> a
    F:int weight -> b
    F:int placeCount -> c
    F:int maxPlaceCount -> d
    M:boolean doPlace(int) -> a
    M:boolean isValid() -> a
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$PortalRoom -> dmo$g -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$g
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    F:boolean hasPlacedSpawner -> d
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$PortalRoom createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$PrisonHall -> dmo$h -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$h
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$PrisonHall createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$RightTurn -> dmo$i -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$i
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$RightTurn createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$RoomCrossing -> dmo$j -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$j
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    F:int type -> d
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$RoomCrossing createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$SmoothStoneSelector -> dmo$k -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$k
    M:void next(net.minecraft.util.RandomSource,int,int,int,boolean) -> a
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StairsDown -> dmo$l -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$l
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    F:boolean isSource -> d
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StairsDown createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StartPiece -> dmo$m -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$m
    F:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$PieceWeight previousPiece -> a
    F:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$PortalRoom portalRoomPiece -> b
    F:java.util.List pendingChildren -> c
    M:net.minecraft.core.BlockPosition getLocatorPosition() -> h
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$Straight -> dmo$n -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$n
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    F:boolean leftChild -> d
    F:boolean rightChild -> i
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$Straight createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StraightStairsDown -> dmo$o -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$o
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
    M:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StraightStairsDown createPiece(net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StrongholdPiece -> dmo$p -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$p
    F:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StrongholdPiece$SmallDoorType entryDoor -> h
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void generateSmallDoor(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StrongholdPiece$SmallDoorType,int,int,int) -> a
    M:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StrongholdPiece$SmallDoorType randomSmallDoor(net.minecraft.util.RandomSource) -> b
    M:net.minecraft.world.level.levelgen.structure.StructurePiece generateSmallDoorChildForward(net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StartPiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int) -> a
    M:net.minecraft.world.level.levelgen.structure.StructurePiece generateSmallDoorChildLeft(net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StartPiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int) -> b
    M:net.minecraft.world.level.levelgen.structure.StructurePiece generateSmallDoorChildRight(net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StartPiece,net.minecraft.world.level.levelgen.structure.StructurePieceAccessor,net.minecraft.util.RandomSource,int,int) -> c
    M:boolean isOkBox(net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StrongholdPiece$SmallDoorType -> dmo$p$a -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$p$a
    F:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StrongholdPiece$SmallDoorType OPENING -> a
    F:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StrongholdPiece$SmallDoorType WOOD_DOOR -> b
    F:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StrongholdPiece$SmallDoorType GRATES -> c
    F:net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$StrongholdPiece$SmallDoorType IRON_DOOR -> d
net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$Turn -> dmo$q -> net.minecraft.world.level.levelgen.structure.structures.StrongholdPieces$q
    F:int WIDTH -> a
    F:int HEIGHT -> b
    F:int DEPTH -> c
net.minecraft.world.level.levelgen.structure.structures.StrongholdStructure -> dmp -> net.minecraft.world.level.levelgen.structure.structures.StrongholdStructure
    F:com.mojang.serialization.Codec CODEC -> d
    M:java.util.Optional findGenerationPoint(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:void generatePieces(net.minecraft.world.level.levelgen.structure.pieces.StructurePiecesBuilder,net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureType type() -> e
net.minecraft.world.level.levelgen.structure.structures.SwampHutPiece -> dmq -> net.minecraft.world.level.levelgen.structure.structures.SwampHutPiece
    F:boolean spawnedWitch -> h
    F:boolean spawnedCat -> i
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void postProcess(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.core.BlockPosition) -> a
    M:void spawnCat(net.minecraft.world.level.WorldAccess,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
net.minecraft.world.level.levelgen.structure.structures.SwampHutStructure -> dmr -> net.minecraft.world.level.levelgen.structure.structures.SwampHutStructure
    F:com.mojang.serialization.Codec CODEC -> d
    M:java.util.Optional findGenerationPoint(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:void generatePieces(net.minecraft.world.level.levelgen.structure.pieces.StructurePiecesBuilder,net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureType type() -> e
net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces -> dms -> net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces
    M:void generateMansion(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,java.util.List,net.minecraft.util.RandomSource) -> a
    M:void main(java.lang.String[]) -> a
net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$FirstFloorRoomCollection -> dms$a -> net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$a
    M:java.lang.String get1x1(net.minecraft.util.RandomSource) -> a
    M:java.lang.String get1x1Secret(net.minecraft.util.RandomSource) -> b
    M:java.lang.String get1x2SideEntrance(net.minecraft.util.RandomSource,boolean) -> a
    M:java.lang.String get1x2FrontEntrance(net.minecraft.util.RandomSource,boolean) -> b
    M:java.lang.String get1x2Secret(net.minecraft.util.RandomSource) -> c
    M:java.lang.String get2x2(net.minecraft.util.RandomSource) -> d
    M:java.lang.String get2x2Secret(net.minecraft.util.RandomSource) -> e
net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$FloorRoomCollection -> dms$b -> net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$b
net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$MansionGrid -> dms$c -> net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$c
    F:int DEFAULT_SIZE -> a
    F:int CLEAR -> b
    F:int CORRIDOR -> c
    F:int ROOM -> d
    F:int START_ROOM -> e
    F:int TEST_ROOM -> f
    F:int BLOCKED -> g
    F:int ROOM_1x1 -> h
    F:int ROOM_1x2 -> i
    F:int ROOM_2x2 -> j
    F:int ROOM_ORIGIN_FLAG -> k
    F:int ROOM_DOOR_FLAG -> l
    F:int ROOM_STAIRS_FLAG -> m
    F:int ROOM_CORRIDOR_FLAG -> n
    F:int ROOM_TYPE_MASK -> o
    F:int ROOM_ID_MASK -> p
    F:net.minecraft.util.RandomSource random -> q
    F:net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$SimpleGrid baseGrid -> r
    F:net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$SimpleGrid thirdFloorGrid -> s
    F:int entranceX -> u
    F:int entranceY -> v
    M:boolean isHouse(net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$SimpleGrid,int,int) -> a
    M:boolean isRoomId(net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$SimpleGrid,int,int,int,int) -> a
    M:net.minecraft.core.EnumDirection get1x2RoomDirection(net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$SimpleGrid,int,int,int,int) -> b
    M:void recursiveCorridor(net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$SimpleGrid,int,int,net.minecraft.core.EnumDirection,int) -> a
    M:boolean cleanEdges(net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$SimpleGrid) -> a
    M:void setupThirdFloor() -> b
    M:void identifyRooms(net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$SimpleGrid,net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$SimpleGrid) -> a
    M:void print() -> a
net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$MansionPiecePlacer -> dms$d -> net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$d
    F:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager structureTemplateManager -> a
    F:net.minecraft.util.RandomSource random -> b
    F:int startX -> c
    F:int startY -> d
    M:void createMansion(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,java.util.List,net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$MansionGrid) -> a
    M:void traverseOuterWalls(java.util.List,net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$PlacementData,net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$SimpleGrid,net.minecraft.core.EnumDirection,int,int,int,int) -> a
    M:void createRoof(java.util.List,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$SimpleGrid,net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$SimpleGrid) -> a
    M:void entrance(java.util.List,net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$PlacementData) -> a
    M:void traverseWallPiece(java.util.List,net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$PlacementData) -> b
    M:void traverseTurn(java.util.List,net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$PlacementData) -> c
    M:void traverseInnerTurn(java.util.List,net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$PlacementData) -> d
    M:void addRoom1x1(java.util.List,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.core.EnumDirection,net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$FloorRoomCollection) -> a
    M:void addRoom1x2(java.util.List,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.core.EnumDirection,net.minecraft.core.EnumDirection,net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$FloorRoomCollection,boolean) -> a
    M:void addRoom2x2(java.util.List,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.core.EnumDirection,net.minecraft.core.EnumDirection,net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$FloorRoomCollection) -> a
    M:void addRoom2x2Secret(java.util.List,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$FloorRoomCollection) -> a
net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$PlacementData -> dms$e -> net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$e
    F:net.minecraft.world.level.block.EnumBlockRotation rotation -> a
    F:net.minecraft.core.BlockPosition position -> b
    F:java.lang.String wallType -> c
net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$SecondFloorRoomCollection -> dms$f -> net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$f
    M:java.lang.String get1x1(net.minecraft.util.RandomSource) -> a
    M:java.lang.String get1x1Secret(net.minecraft.util.RandomSource) -> b
    M:java.lang.String get1x2SideEntrance(net.minecraft.util.RandomSource,boolean) -> a
    M:java.lang.String get1x2FrontEntrance(net.minecraft.util.RandomSource,boolean) -> b
    M:java.lang.String get1x2Secret(net.minecraft.util.RandomSource) -> c
    M:java.lang.String get2x2(net.minecraft.util.RandomSource) -> d
    M:java.lang.String get2x2Secret(net.minecraft.util.RandomSource) -> e
net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$SimpleGrid -> dms$g -> net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$g
    F:int width -> b
    F:int height -> c
    F:int valueIfOutside -> d
    M:void set(int,int,int) -> a
    M:void set(int,int,int,int,int) -> a
    M:int get(int,int) -> a
    M:void setif(int,int,int,int) -> a
    M:boolean edgesTo(int,int,int) -> b
net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$ThirdFloorRoomCollection -> dms$h -> net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$h
net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$WoodlandMansionPiece -> dms$i -> net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionPieces$i
    M:net.minecraft.resources.MinecraftKey makeTemplateLocation() -> b
    M:net.minecraft.resources.MinecraftKey makeLocation(java.lang.String) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo makeSettings(net.minecraft.world.level.block.EnumBlockMirror,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:void addAdditionalSaveData(net.minecraft.world.level.levelgen.structure.pieces.StructurePieceSerializationContext,net.minecraft.nbt.NBTTagCompound) -> a
    M:void handleDataMarker(java.lang.String,net.minecraft.core.BlockPosition,net.minecraft.world.level.WorldAccess,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionStructure -> dmt -> net.minecraft.world.level.levelgen.structure.structures.WoodlandMansionStructure
    F:com.mojang.serialization.Codec CODEC -> d
    M:java.util.Optional findGenerationPoint(net.minecraft.world.level.levelgen.structure.Structure$GenerationContext) -> a
    M:void generatePieces(net.minecraft.world.level.levelgen.structure.pieces.StructurePiecesBuilder,net.minecraft.world.level.levelgen.structure.Structure$GenerationContext,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:void afterPlace(net.minecraft.world.level.GeneratorAccessSeed,net.minecraft.world.level.StructureManager,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.level.levelgen.structure.pieces.PiecesContainer) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureType type() -> e
net.minecraft.world.level.levelgen.structure.templatesystem.AlwaysTrueTest -> dmv -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureTestTrue
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureTestTrue INSTANCE -> b
    M:boolean test(net.minecraft.world.level.block.state.IBlockData,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTestType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.AxisAlignedLinearPosTest -> dmw -> net.minecraft.world.level.levelgen.structure.templatesystem.PosRuleTestAxisAlignedLinear
    F:com.mojang.serialization.Codec CODEC -> a
    F:float minChance -> b
    F:float maxChance -> d
    F:int minDist -> e
    F:int maxDist -> f
    F:net.minecraft.core.EnumDirection$EnumAxis axis -> g
    M:boolean test(net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.PosRuleTestType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.BlackstoneReplaceProcessor -> dmx -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorBlackstoneReplace
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorBlackstoneReplace INSTANCE -> b
    F:java.util.Map replacements -> c
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo processBlock(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.BlockAgeProcessor -> dmy -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorBlockAge
    F:com.mojang.serialization.Codec CODEC -> a
    F:float PROBABILITY_OF_REPLACING_FULL_BLOCK -> b
    F:float PROBABILITY_OF_REPLACING_STAIRS -> c
    F:float PROBABILITY_OF_REPLACING_OBSIDIAN -> d
    F:float mossiness -> f
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo processBlock(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo) -> a
    M:net.minecraft.world.level.block.state.IBlockData maybeReplaceFullStoneBlock(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.state.IBlockData maybeReplaceStairs(net.minecraft.util.RandomSource,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData maybeReplaceSlab(net.minecraft.util.RandomSource) -> b
    M:net.minecraft.world.level.block.state.IBlockData maybeReplaceWall(net.minecraft.util.RandomSource) -> c
    M:net.minecraft.world.level.block.state.IBlockData maybeReplaceObsidian(net.minecraft.util.RandomSource) -> d
    M:net.minecraft.world.level.block.state.IBlockData getRandomFacingStairs(net.minecraft.util.RandomSource,net.minecraft.world.level.block.Block) -> a
    M:net.minecraft.world.level.block.state.IBlockData getRandomBlock(net.minecraft.util.RandomSource,net.minecraft.world.level.block.state.BlockState[],net.minecraft.world.level.block.state.BlockState[]) -> a
    M:net.minecraft.world.level.block.state.IBlockData getRandomBlock(net.minecraft.util.RandomSource,net.minecraft.world.level.block.state.BlockState[]) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.BlockIgnoreProcessor -> dmz -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorBlockIgnore
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorBlockIgnore STRUCTURE_BLOCK -> b
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorBlockIgnore AIR -> c
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorBlockIgnore STRUCTURE_AND_AIR -> d
    F:com.google.common.collect.ImmutableList toIgnore -> e
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo processBlock(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.BlockMatchTest -> dna -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureTestBlock
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.block.Block block -> b
    M:boolean test(net.minecraft.world.level.block.state.IBlockData,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTestType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.BlockRotProcessor -> dnb -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorRotation
    F:com.mojang.serialization.Codec CODEC -> a
    F:java.util.Optional rottableBlocks -> b
    F:float integrity -> c
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo processBlock(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.BlockStateMatchTest -> dnc -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureTestBlockState
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.block.state.IBlockData blockState -> b
    M:boolean test(net.minecraft.world.level.block.state.IBlockData,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTestType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.GravityProcessor -> dnd -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorGravity
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.HeightMap$Type heightmap -> b
    F:int offset -> c
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo processBlock(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.JigsawReplacementProcessor -> dne -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorJigsawReplacement
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorJigsawReplacement INSTANCE -> b
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo processBlock(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.LavaSubmergedBlockProcessor -> dnf -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorLavaSubmergedBlock
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorLavaSubmergedBlock INSTANCE -> b
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo processBlock(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.LinearPosTest -> dng -> net.minecraft.world.level.levelgen.structure.templatesystem.PosRuleTestLinear
    F:com.mojang.serialization.Codec CODEC -> a
    F:float minChance -> b
    F:float maxChance -> d
    F:int minDist -> e
    F:int maxDist -> f
    M:boolean test(net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.PosRuleTestType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.NopProcessor -> dnh -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorNop
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorNop INSTANCE -> b
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo processBlock(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.PosAlwaysTrueTest -> dni -> net.minecraft.world.level.levelgen.structure.templatesystem.PosRuleTestTrue
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.structure.templatesystem.PosRuleTestTrue INSTANCE -> b
    M:boolean test(net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.PosRuleTestType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.PosRuleTest -> dnj -> net.minecraft.world.level.levelgen.structure.templatesystem.PosRuleTest
    F:com.mojang.serialization.Codec CODEC -> c
net.minecraft.world.level.levelgen.structure.templatesystem.PosRuleTestType -> dnk -> net.minecraft.world.level.levelgen.structure.templatesystem.PosRuleTestType
    F:net.minecraft.world.level.levelgen.structure.templatesystem.PosRuleTestType ALWAYS_TRUE_TEST -> a
    F:net.minecraft.world.level.levelgen.structure.templatesystem.PosRuleTestType LINEAR_POS_TEST -> b
    F:net.minecraft.world.level.levelgen.structure.templatesystem.PosRuleTestType AXIS_ALIGNED_LINEAR_POS_TEST -> c
    M:net.minecraft.world.level.levelgen.structure.templatesystem.PosRuleTestType register(java.lang.String,com.mojang.serialization.Codec) -> a
net.minecraft.world.level.levelgen.structure.templatesystem.ProcessorRule -> dnl -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorPredicates
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTest inputPredicate -> b
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTest locPredicate -> c
    F:net.minecraft.world.level.levelgen.structure.templatesystem.PosRuleTest posPredicate -> d
    F:net.minecraft.world.level.block.state.IBlockData outputState -> e
    F:net.minecraft.nbt.NBTTagCompound outputTag -> f
    M:boolean test(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.block.state.IBlockData getOutputState() -> a
    M:net.minecraft.nbt.NBTTagCompound getOutputTag() -> b
net.minecraft.world.level.levelgen.structure.templatesystem.ProtectedBlockProcessor -> dnm -> net.minecraft.world.level.levelgen.structure.templatesystem.ProtectedBlockProcessor
    F:net.minecraft.tags.TagKey cannotReplace -> a
    F:com.mojang.serialization.Codec CODEC -> b
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo processBlock(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.RandomBlockMatchTest -> dnn -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureTestRandomBlock
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.block.Block block -> b
    F:float probability -> d
    M:boolean test(net.minecraft.world.level.block.state.IBlockData,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTestType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.RandomBlockStateMatchTest -> dno -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureTestRandomBlockState
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.level.block.state.IBlockData blockState -> b
    F:float probability -> d
    M:boolean test(net.minecraft.world.level.block.state.IBlockData,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTestType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.RuleProcessor -> dnp -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessorRule
    F:com.mojang.serialization.Codec CODEC -> a
    F:com.google.common.collect.ImmutableList rules -> b
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo processBlock(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType getType() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.RuleTest -> dnq -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTest
    F:com.mojang.serialization.Codec CODEC -> c
net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType -> dnr -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTestType
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTestType ALWAYS_TRUE_TEST -> a
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTestType BLOCK_TEST -> b
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTestType BLOCKSTATE_TEST -> c
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTestType TAG_TEST -> d
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTestType RANDOM_BLOCK_TEST -> e
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTestType RANDOM_BLOCKSTATE_TEST -> f
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTestType register(java.lang.String,com.mojang.serialization.Codec) -> a
net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings -> dns -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo
    F:net.minecraft.world.level.block.EnumBlockMirror mirror -> a
    F:net.minecraft.world.level.block.EnumBlockRotation rotation -> b
    F:net.minecraft.core.BlockPosition rotationPivot -> c
    F:boolean ignoreEntities -> d
    F:net.minecraft.world.level.levelgen.structure.StructureBoundingBox boundingBox -> e
    F:boolean keepLiquids -> f
    F:net.minecraft.util.RandomSource random -> g
    F:int palette -> h
    F:java.util.List processors -> i
    F:boolean knownShape -> j
    F:boolean finalizeEntities -> k
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo copy() -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo setMirror(net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo setRotation(net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo setRotationPivot(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo setIgnoreEntities(boolean) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo setBoundingBox(net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo setRandom(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo setKeepLiquids(boolean) -> b
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo setKnownShape(boolean) -> c
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo clearProcessors() -> b
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo addProcessor(net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessor) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo popProcessor(net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessor) -> b
    M:net.minecraft.world.level.block.EnumBlockMirror getMirror() -> c
    M:net.minecraft.world.level.block.EnumBlockRotation getRotation() -> d
    M:net.minecraft.core.BlockPosition getRotationPivot() -> e
    M:net.minecraft.util.RandomSource getRandom(net.minecraft.core.BlockPosition) -> b
    M:boolean isIgnoreEntities() -> f
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox getBoundingBox() -> g
    M:boolean getKnownShape() -> h
    M:java.util.List getProcessors() -> i
    M:boolean shouldKeepLiquids() -> j
    M:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$Palette getRandomPalette(java.util.List,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo setFinalizeEntities(boolean) -> d
    M:boolean shouldFinalizeEntities() -> k
net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessor -> dnt -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureProcessor
net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorList -> dnu -> net.minecraft.world.level.levelgen.structure.templatesystem.ProcessorList
    F:java.util.List list -> a
    M:java.util.List list() -> a
net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType -> dnv -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType BLOCK_IGNORE -> a
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType BLOCK_ROT -> b
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType GRAVITY -> c
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType JIGSAW_REPLACEMENT -> d
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType RULE -> e
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType NOP -> f
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType BLOCK_AGE -> g
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType BLACKSTONE_REPLACE -> h
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType LAVA_SUBMERGED_BLOCK -> i
    F:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType PROTECTED_BLOCKS -> j
    F:com.mojang.serialization.Codec SINGLE_CODEC -> k
    F:com.mojang.serialization.Codec LIST_OBJECT_CODEC -> l
    F:com.mojang.serialization.Codec DIRECT_CODEC -> m
    F:com.mojang.serialization.Codec LIST_CODEC -> n
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureStructureProcessorType register(java.lang.String,com.mojang.serialization.Codec) -> a
net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate -> dnw -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure
    F:java.lang.String PALETTE_TAG -> a
    F:java.lang.String PALETTE_LIST_TAG -> b
    F:java.lang.String ENTITIES_TAG -> c
    F:java.lang.String BLOCKS_TAG -> d
    F:java.lang.String BLOCK_TAG_POS -> e
    F:java.lang.String BLOCK_TAG_STATE -> f
    F:java.lang.String BLOCK_TAG_NBT -> g
    F:java.lang.String ENTITY_TAG_POS -> h
    F:java.lang.String ENTITY_TAG_BLOCKPOS -> i
    F:java.lang.String ENTITY_TAG_NBT -> j
    F:java.lang.String SIZE_TAG -> k
    F:int CHUNK_SIZE -> l
    F:java.util.List palettes -> m
    F:java.util.List entityInfoList -> n
    F:net.minecraft.core.BaseBlockPosition size -> o
    F:java.lang.String author -> p
    M:net.minecraft.core.BaseBlockPosition getSize() -> a
    M:void setAuthor(java.lang.String) -> a
    M:java.lang.String getAuthor() -> b
    M:void fillFromWorld(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.BaseBlockPosition,boolean,net.minecraft.world.level.block.Block) -> a
    M:void addToLists(net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo,java.util.List,java.util.List,java.util.List) -> a
    M:java.util.List buildInfoList(java.util.List,java.util.List,java.util.List) -> a
    M:void fillEntityList(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:java.util.List filterBlocks(net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo,net.minecraft.world.level.block.Block) -> a
    M:it.unimi.dsi.fastutil.objects.ObjectArrayList filterBlocks(net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo,net.minecraft.world.level.block.Block,boolean) -> a
    M:net.minecraft.core.BlockPosition calculateConnectedPosition(net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.BlockPosition calculateRelativePosition(net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo,net.minecraft.core.BlockPosition) -> a
    M:boolean placeInWorld(net.minecraft.world.level.WorldAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo,net.minecraft.util.RandomSource,int) -> a
    M:void updateShapeAtEdge(net.minecraft.world.level.GeneratorAccess,int,net.minecraft.world.phys.shapes.VoxelShapeDiscrete,int,int,int) -> a
    M:java.util.List processBlockInfos(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo,java.util.List) -> a
    M:void placeEntities(net.minecraft.world.level.WorldAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockMirror,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.core.BlockPosition,net.minecraft.world.level.levelgen.structure.StructureBoundingBox,boolean) -> a
    M:java.util.Optional createEntityIgnoreException(net.minecraft.world.level.WorldAccess,net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.core.BaseBlockPosition getSize(net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.core.BlockPosition transform(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockMirror,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.Vec3D transform(net.minecraft.world.phys.Vec3D,net.minecraft.world.level.block.EnumBlockMirror,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.BlockPosition getZeroPositionWithTransform(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockMirror,net.minecraft.world.level.block.EnumBlockRotation) -> a
    M:net.minecraft.core.BlockPosition getZeroPositionWithTransform(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockMirror,net.minecraft.world.level.block.EnumBlockRotation,int,int) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox getBoundingBox(net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureInfo,net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox getBoundingBox(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockMirror) -> a
    M:net.minecraft.world.level.levelgen.structure.StructureBoundingBox getBoundingBox(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockRotation,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.EnumBlockMirror,net.minecraft.core.BaseBlockPosition) -> a
    M:net.minecraft.nbt.NBTTagCompound save(net.minecraft.nbt.NBTTagCompound) -> a
    M:void load(net.minecraft.nbt.NBTTagCompound) -> b
    M:void loadPalette(net.minecraft.nbt.NBTTagList,net.minecraft.nbt.NBTTagList) -> a
    M:net.minecraft.nbt.NBTTagList newIntegerList(int[]) -> a
    M:net.minecraft.nbt.NBTTagList newDoubleList(double[]) -> a
net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$Palette -> dnw$a -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$a
    F:java.util.List blocks -> a
    F:java.util.Map cache -> b
    M:java.util.List blocks() -> a
    M:java.util.List blocks(net.minecraft.world.level.block.Block) -> a
net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$SimplePalette -> dnw$b -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$b
    F:net.minecraft.world.level.block.state.IBlockData DEFAULT_BLOCK_STATE -> a
    F:net.minecraft.core.RegistryBlockID ids -> b
    F:int lastId -> c
    M:int idFor(net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.block.state.IBlockData stateFor(int) -> a
    M:java.util.Iterator iterator() -> iterator
    M:void addMapping(net.minecraft.world.level.block.state.IBlockData,int) -> a
net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo -> dnw$c -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$BlockInfo
    F:net.minecraft.core.BlockPosition pos -> a
    F:net.minecraft.world.level.block.state.IBlockData state -> b
    F:net.minecraft.nbt.NBTTagCompound nbt -> c
net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureEntityInfo -> dnw$d -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure$EntityInfo
    F:net.minecraft.world.phys.Vec3D pos -> a
    F:net.minecraft.core.BlockPosition blockPos -> b
    F:net.minecraft.nbt.NBTTagCompound nbt -> c
net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager -> dnx -> net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager
    F:org.slf4j.Logger LOGGER -> a
    F:java.lang.String STRUCTURE_DIRECTORY_NAME -> b
    F:java.lang.String TEST_STRUCTURES_DIR -> c
    F:java.lang.String STRUCTURE_FILE_EXTENSION -> d
    F:java.lang.String STRUCTURE_TEXT_FILE_EXTENSION -> e
    F:java.util.Map structureRepository -> f
    F:com.mojang.datafixers.DataFixer fixerUpper -> g
    F:net.minecraft.server.packs.resources.IResourceManager resourceManager -> h
    F:java.nio.file.Path generatedDir -> i
    F:java.util.List sources -> j
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure getOrCreate(net.minecraft.resources.MinecraftKey) -> a
    M:java.util.Optional get(net.minecraft.resources.MinecraftKey) -> b
    M:java.util.stream.Stream listTemplates() -> a
    M:java.util.Optional tryLoad(net.minecraft.resources.MinecraftKey) -> e
    M:void onResourceManagerReload(net.minecraft.server.packs.resources.IResourceManager) -> a
    M:java.util.Optional loadFromResource(net.minecraft.resources.MinecraftKey) -> f
    M:java.util.stream.Stream listResources() -> b
    M:java.util.Optional loadFromTestStructures(net.minecraft.resources.MinecraftKey) -> g
    M:java.util.stream.Stream listTestStructures() -> c
    M:java.util.Optional loadFromGenerated(net.minecraft.resources.MinecraftKey) -> h
    M:java.util.stream.Stream listGenerated() -> d
    M:java.util.stream.Stream listGeneratedInNamespace(java.nio.file.Path) -> a
    M:java.util.stream.Stream listFolderContents(java.nio.file.Path,java.lang.String,java.lang.String) -> a
    M:java.lang.String relativize(java.nio.file.Path,java.nio.file.Path) -> a
    M:java.util.Optional loadFromSnbt(net.minecraft.resources.MinecraftKey,java.nio.file.Path) -> a
    M:java.util.Optional load(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager$InputStreamOpener,java.util.function.Consumer) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure readStructure(java.io.InputStream) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructure readStructure(net.minecraft.nbt.NBTTagCompound) -> a
    M:boolean save(net.minecraft.resources.MinecraftKey) -> c
    M:java.nio.file.Path getPathToGeneratedStructure(net.minecraft.resources.MinecraftKey,java.lang.String) -> a
    M:java.nio.file.Path createPathToStructure(java.nio.file.Path,net.minecraft.resources.MinecraftKey,java.lang.String) -> a
    M:java.nio.file.Path createAndValidatePathToStructure(java.nio.file.Path,net.minecraft.resources.MinecraftKey,java.lang.String) -> b
    M:void remove(net.minecraft.resources.MinecraftKey) -> d
net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager$InputStreamOpener -> dnx$a -> net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager$a
net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager$Source -> dnx$b -> net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager$b
    F:java.util.function.Function loader -> a
    F:java.util.function.Supplier lister -> b
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.function.Function loader() -> a
    M:java.util.function.Supplier lister() -> b
net.minecraft.world.level.levelgen.structure.templatesystem.TagMatchTest -> dny -> net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureTestTag
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.tags.TagKey tag -> b
    M:boolean test(net.minecraft.world.level.block.state.IBlockData,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.levelgen.structure.templatesystem.DefinedStructureRuleTestType getType() -> a
net.minecraft.world.level.levelgen.synth.BlendedNoise -> doa -> net.minecraft.world.level.levelgen.synth.BlendedNoise
    F:com.mojang.serialization.Codec SCALE_RANGE -> e
    F:com.mojang.serialization.MapCodec DATA_CODEC -> f
    F:net.minecraft.util.KeyDispatchDataCodec CODEC -> a
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorOctaves minLimitNoise -> g
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorOctaves maxLimitNoise -> h
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorOctaves mainNoise -> i
    F:double xzMultiplier -> j
    F:double yMultiplier -> k
    F:double xzFactor -> l
    F:double yFactor -> m
    F:double smearScaleMultiplier -> n
    F:double maxValue -> o
    F:double xzScale -> p
    F:double yScale -> q
    M:net.minecraft.world.level.levelgen.synth.BlendedNoise createUnseeded(double,double,double,double,double) -> a
    M:net.minecraft.world.level.levelgen.synth.BlendedNoise withNewRandom(net.minecraft.util.RandomSource) -> a
    M:double compute(net.minecraft.world.level.levelgen.DensityFunction$FunctionContext) -> a
    M:double minValue() -> a
    M:double maxValue() -> b
    M:void parityConfigString(java.lang.StringBuilder) -> a
    M:net.minecraft.util.KeyDispatchDataCodec codec() -> c
net.minecraft.world.level.levelgen.synth.ImprovedNoise -> dob -> net.minecraft.world.level.levelgen.synth.NoiseGeneratorPerlin
    F:float SHIFT_UP_EPSILON -> d
    F:double xo -> a
    F:double yo -> b
    F:double zo -> c
    M:double noise(double,double,double) -> a
    M:double noise(double,double,double,double,double) -> a
    M:double noiseWithDerivative(double,double,double,double[]) -> a
    M:double gradDot(int,double,double,double) -> a
    M:int p(int) -> a
    M:double sampleAndLerp(int,int,int,double,double,double,double) -> a
    M:double sampleWithDerivative(int,int,int,double,double,double,double[]) -> a
    M:void parityConfigString(java.lang.StringBuilder) -> a
net.minecraft.world.level.levelgen.synth.NoiseUtils -> doc -> net.minecraft.world.level.levelgen.synth.NoiseUtils
    M:double biasTowardsExtreme(double,double) -> a
    M:void parityNoiseOctaveConfigString(java.lang.StringBuilder,double,double,double,byte[]) -> a
    M:void parityNoiseOctaveConfigString(java.lang.StringBuilder,double,double,double,int[]) -> a
net.minecraft.world.level.levelgen.synth.NormalNoise -> dod -> net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal
    F:double INPUT_FACTOR -> a
    F:double TARGET_DEVIATION -> b
    F:double valueFactor -> c
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorOctaves first -> d
    F:net.minecraft.world.level.levelgen.synth.NoiseGeneratorOctaves second -> e
    F:double maxValue -> f
    F:net.minecraft.world.level.levelgen.synth.NormalNoise$NoiseParameters parameters -> g
    M:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal createLegacyNetherBiome(net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.synth.NormalNoise$NoiseParameters) -> a
    M:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal create(net.minecraft.util.RandomSource,int,double[]) -> a
    M:net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal create(net.minecraft.util.RandomSource,net.minecraft.world.level.levelgen.synth.NormalNoise$NoiseParameters) -> b
    M:double maxValue() -> a
    M:double expectedDeviation(int) -> a
    M:double getValue(double,double,double) -> a
    M:net.minecraft.world.level.levelgen.synth.NormalNoise$NoiseParameters parameters() -> b
    M:void parityConfigString(java.lang.StringBuilder) -> a
net.minecraft.world.level.levelgen.synth.NormalNoise$NoiseParameters -> dod$a -> net.minecraft.world.level.levelgen.synth.NoiseGeneratorNormal$a
    F:int firstOctave -> c
    F:it.unimi.dsi.fastutil.doubles.DoubleList amplitudes -> d
    F:com.mojang.serialization.Codec DIRECT_CODEC -> a
    F:com.mojang.serialization.Codec CODEC -> b
    M:boolean equals(java.lang.Object) -> equals
    M:int firstOctave() -> a
    M:it.unimi.dsi.fastutil.doubles.DoubleList amplitudes() -> b
net.minecraft.world.level.levelgen.synth.PerlinNoise -> doe -> net.minecraft.world.level.levelgen.synth.NoiseGeneratorOctaves
    F:int ROUND_OFF -> a
    F:int firstOctave -> c
    F:it.unimi.dsi.fastutil.doubles.DoubleList amplitudes -> d
    F:double lowestFreqValueFactor -> e
    F:double lowestFreqInputFactor -> f
    F:double maxValue -> g
    M:net.minecraft.world.level.levelgen.synth.NoiseGeneratorOctaves createLegacyForBlendedNoise(net.minecraft.util.RandomSource,java.util.stream.IntStream) -> a
    M:net.minecraft.world.level.levelgen.synth.NoiseGeneratorOctaves createLegacyForLegacyNetherBiome(net.minecraft.util.RandomSource,int,it.unimi.dsi.fastutil.doubles.DoubleList) -> a
    M:net.minecraft.world.level.levelgen.synth.NoiseGeneratorOctaves create(net.minecraft.util.RandomSource,java.util.stream.IntStream) -> b
    M:net.minecraft.world.level.levelgen.synth.NoiseGeneratorOctaves create(net.minecraft.util.RandomSource,java.util.List) -> a
    M:net.minecraft.world.level.levelgen.synth.NoiseGeneratorOctaves create(net.minecraft.util.RandomSource,int,double,double[]) -> a
    M:net.minecraft.world.level.levelgen.synth.NoiseGeneratorOctaves create(net.minecraft.util.RandomSource,int,it.unimi.dsi.fastutil.doubles.DoubleList) -> b
    M:com.mojang.datafixers.util.Pair makeAmplitudes(it.unimi.dsi.fastutil.ints.IntSortedSet) -> a
    M:double maxValue() -> a
    M:void skipOctave(net.minecraft.util.RandomSource) -> a
    M:double getValue(double,double,double) -> a
    M:double getValue(double,double,double,double,double,boolean) -> a
    M:double maxBrokenValue(double) -> a
    M:double edgeValue(double) -> c
    M:net.minecraft.world.level.levelgen.synth.NoiseGeneratorPerlin getOctaveNoise(int) -> a
    M:double wrap(double) -> b
    M:int firstOctave() -> b
    M:it.unimi.dsi.fastutil.doubles.DoubleList amplitudes() -> c
    M:void parityConfigString(java.lang.StringBuilder) -> a
net.minecraft.world.level.levelgen.synth.PerlinSimplexNoise -> dof -> net.minecraft.world.level.levelgen.synth.NoiseGenerator3
    F:double highestFreqValueFactor -> b
    F:double highestFreqInputFactor -> c
    M:double getValue(double,double,boolean) -> a
net.minecraft.world.level.levelgen.synth.SimplexNoise -> dog -> net.minecraft.world.level.levelgen.synth.NoiseGenerator3Handler
    F:double SQRT_3 -> e
    F:double F2 -> f
    F:double G2 -> g
    F:double xo -> b
    F:double yo -> c
    F:double zo -> d
    M:int p(int) -> a
    M:double dot(int[],double,double,double) -> a
    M:double getCornerNoise3D(int,double,double,double,double) -> a
    M:double getValue(double,double) -> a
    M:double getValue(double,double,double) -> a
net.minecraft.world.level.lighting.BlockLightEngine -> doi -> net.minecraft.world.level.lighting.LightEngineBlock
    F:net.minecraft.core.BlockPosition$MutableBlockPosition pos -> g
    M:int getLightEmission(long) -> d
    M:int computeLevelFromNeighbor(long,long,int) -> b
    M:void checkNeighborsAfterUpdate(long,int,boolean) -> a
    M:int getComputedLevel(long,long,int) -> a
    M:void onBlockEmissionIncrease(net.minecraft.core.BlockPosition,int) -> a
net.minecraft.world.level.lighting.BlockLightSectionStorage -> doj -> net.minecraft.world.level.lighting.LightEngineStorageBlock
    M:int getLightValue(long) -> d
net.minecraft.world.level.lighting.BlockLightSectionStorage$BlockDataLayerStorageMap -> doj$a -> net.minecraft.world.level.lighting.LightEngineStorageBlock$a
    M:net.minecraft.world.level.lighting.BlockLightSectionStorage$BlockDataLayerStorageMap copy() -> a
    M:net.minecraft.world.level.lighting.LightEngineStorageArray copy() -> b
net.minecraft.world.level.lighting.DataLayerStorageMap -> dok -> net.minecraft.world.level.lighting.LightEngineStorageArray
    F:int CACHE_SIZE -> b
    F:boolean cacheEnabled -> e
    F:it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap map -> a
    M:void copyDataLayer(long) -> a
    M:boolean hasLayer(long) -> b
    M:net.minecraft.world.level.chunk.NibbleArray getLayer(long) -> c
    M:net.minecraft.world.level.chunk.NibbleArray removeLayer(long) -> d
    M:void setLayer(long,net.minecraft.world.level.chunk.NibbleArray) -> a
    M:void clearCache() -> c
    M:void disableCache() -> d
net.minecraft.world.level.lighting.DynamicGraphMinFixedPoint -> dol -> net.minecraft.world.level.lighting.LightEngineGraph
    F:int NO_COMPUTED_LEVEL -> a
    F:int levelCount -> b
    F:it.unimi.dsi.fastutil.longs.Long2ByteMap computedLevels -> d
    F:int firstQueuedLevel -> e
    F:boolean hasWork -> f
    M:int getKey(int,int) -> a
    M:void checkFirstQueuedLevel(int) -> a
    M:void removeFromQueue(long) -> e
    M:void removeIf(java.util.function.LongPredicate) -> a
    M:void dequeue(long,int,int,boolean) -> a
    M:void enqueue(long,int,int) -> a
    M:void checkNode(long) -> f
    M:void checkEdge(long,long,int,boolean) -> a
    M:void checkEdge(long,long,int,int,int,boolean) -> a
    M:void checkNeighbor(long,long,int,boolean) -> b
    M:boolean hasWork() -> b
    M:int runUpdates(int) -> b
    M:int getQueueSize() -> c
    M:void rehash(int) -> rehash
    M:void rehash(int) -> rehash
net.minecraft.world.level.lighting.LayerLightEngine -> dom -> net.minecraft.world.level.lighting.LightEngineLayer
    F:long SELF_SOURCE -> a
    F:net.minecraft.world.level.chunk.ILightAccess chunkSource -> b
    F:net.minecraft.world.level.EnumSkyBlock layer -> c
    F:net.minecraft.world.level.lighting.LightEngineStorage storage -> d
    F:boolean runningLightUpdates -> g
    F:net.minecraft.core.BlockPosition$MutableBlockPosition pos -> e
    F:int CACHE_SIZE -> h
    M:void checkNode(long) -> f
    M:net.minecraft.world.level.IBlockAccess getChunk(int,int) -> a
    M:void clearCache() -> d
    M:net.minecraft.world.level.block.state.IBlockData getStateAndOpacity(long,org.apache.commons.lang3.mutable.MutableInt) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.IBlockData,long,net.minecraft.core.EnumDirection) -> a
    M:int getLightBlockInto(net.minecraft.world.level.IBlockAccess,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection,int) -> a
    M:boolean isSource(long) -> a
    M:int getComputedLevel(long,long,int) -> a
    M:int getLevel(long) -> c
    M:int getLevel(net.minecraft.world.level.chunk.NibbleArray,long) -> a
    M:void setLevel(long,int) -> a
    M:int computeLevelFromNeighbor(long,long,int) -> b
    M:int runUpdates(int,boolean,boolean) -> a
    M:void queueSectionData(long,net.minecraft.world.level.chunk.NibbleArray,boolean) -> a
    M:net.minecraft.world.level.chunk.NibbleArray getDataLayerData(net.minecraft.core.SectionPosition) -> a
    M:int getLightValue(net.minecraft.core.BlockPosition) -> b
    M:java.lang.String getDebugData(long) -> b
    M:void checkBlock(net.minecraft.core.BlockPosition) -> a
    M:void onBlockEmissionIncrease(net.minecraft.core.BlockPosition,int) -> a
    M:void updateSectionStatus(net.minecraft.core.SectionPosition,boolean) -> a
    M:void enableLightSources(net.minecraft.world.level.ChunkCoordIntPair,boolean) -> a
    M:void retainData(net.minecraft.world.level.ChunkCoordIntPair,boolean) -> b
net.minecraft.world.level.lighting.LayerLightEventListener -> don -> net.minecraft.world.level.lighting.LightEngineLayerEventListener
net.minecraft.world.level.lighting.LayerLightEventListener$DummyLightLayerEventListener -> don$a -> net.minecraft.world.level.lighting.LightEngineLayerEventListener$Void
    F:net.minecraft.world.level.lighting.LightEngineLayerEventListener$Void INSTANCE -> a
    M:net.minecraft.world.level.chunk.NibbleArray getDataLayerData(net.minecraft.core.SectionPosition) -> a
    M:int getLightValue(net.minecraft.core.BlockPosition) -> b
    M:void checkBlock(net.minecraft.core.BlockPosition) -> a
    M:void onBlockEmissionIncrease(net.minecraft.core.BlockPosition,int) -> a
    M:int runUpdates(int,boolean,boolean) -> a
    M:void updateSectionStatus(net.minecraft.core.SectionPosition,boolean) -> a
    M:void enableLightSources(net.minecraft.world.level.ChunkCoordIntPair,boolean) -> a
net.minecraft.world.level.lighting.LayerLightSectionStorage -> doo -> net.minecraft.world.level.lighting.LightEngineStorage
    F:int LIGHT_AND_DATA -> a
    F:int LIGHT_ONLY -> b
    F:int EMPTY -> c
    F:net.minecraft.world.level.chunk.NibbleArray EMPTY_DATA -> d
    F:net.minecraft.world.level.EnumSkyBlock layer -> o
    F:net.minecraft.world.level.chunk.ILightAccess chunkSource -> p
    F:it.unimi.dsi.fastutil.longs.LongSet dataSectionSet -> e
    F:it.unimi.dsi.fastutil.longs.LongSet toMarkNoData -> f
    F:it.unimi.dsi.fastutil.longs.LongSet toMarkData -> g
    F:net.minecraft.world.level.lighting.LightEngineStorageArray visibleSectionData -> h
    F:net.minecraft.world.level.lighting.LightEngineStorageArray updatingSectionData -> i
    F:it.unimi.dsi.fastutil.longs.LongSet changedSections -> j
    F:it.unimi.dsi.fastutil.longs.LongSet sectionsAffectedByLightUpdates -> k
    F:it.unimi.dsi.fastutil.longs.Long2ObjectMap queuedSections -> l
    F:it.unimi.dsi.fastutil.longs.LongSet untrustedSections -> q
    F:it.unimi.dsi.fastutil.longs.LongSet columnsToRetainQueuedDataFor -> r
    F:it.unimi.dsi.fastutil.longs.LongSet toRemove -> s
    F:boolean hasToRemove -> m
    M:boolean storingLightForSection(long) -> g
    M:net.minecraft.world.level.chunk.NibbleArray getDataLayer(long,boolean) -> a
    M:net.minecraft.world.level.chunk.NibbleArray getDataLayer(net.minecraft.world.level.lighting.LightEngineStorageArray,long) -> a
    M:net.minecraft.world.level.chunk.NibbleArray getDataLayerData(long) -> h
    M:int getStoredLevel(long) -> i
    M:void setStoredLevel(long,int) -> b
    M:int getLevel(long) -> c
    M:int getLevelFromSource(long) -> b
    M:void setLevel(long,int) -> a
    M:net.minecraft.world.level.chunk.NibbleArray createDataLayer(long) -> j
    M:void clearQueuedSectionBlocks(net.minecraft.world.level.lighting.LightEngineLayer,long) -> a
    M:boolean hasInconsistencies() -> a
    M:void markNewInconsistencies(net.minecraft.world.level.lighting.LightEngineLayer,boolean,boolean) -> a
    M:void checkEdgesForSection(net.minecraft.world.level.lighting.LightEngineLayer,long) -> b
    M:void onNodeAdded(long) -> k
    M:void onNodeRemoved(long) -> l
    M:void enableLightSources(long,boolean) -> b
    M:void retainData(long,boolean) -> c
    M:void queueSectionData(long,net.minecraft.world.level.chunk.NibbleArray,boolean) -> a
    M:void updateSectionStatus(long,boolean) -> d
    M:void runAllUpdates() -> d
    M:void swapSectionMap() -> e
net.minecraft.world.level.lighting.LevelLightEngine -> dop -> net.minecraft.world.level.lighting.LightEngine
    F:int MAX_SOURCE_LEVEL -> a
    F:int LIGHT_SECTION_PADDING -> b
    F:net.minecraft.world.level.LevelHeightAccessor levelHeightAccessor -> c
    F:net.minecraft.world.level.lighting.LightEngineLayer blockEngine -> d
    F:net.minecraft.world.level.lighting.LightEngineLayer skyEngine -> e
    M:void checkBlock(net.minecraft.core.BlockPosition) -> a
    M:void onBlockEmissionIncrease(net.minecraft.core.BlockPosition,int) -> a
    M:int runUpdates(int,boolean,boolean) -> a
    M:void updateSectionStatus(net.minecraft.core.SectionPosition,boolean) -> a
    M:void enableLightSources(net.minecraft.world.level.ChunkCoordIntPair,boolean) -> a
    M:net.minecraft.world.level.lighting.LightEngineLayerEventListener getLayerListener(net.minecraft.world.level.EnumSkyBlock) -> a
    M:java.lang.String getDebugData(net.minecraft.world.level.EnumSkyBlock,net.minecraft.core.SectionPosition) -> a
    M:void queueSectionData(net.minecraft.world.level.EnumSkyBlock,net.minecraft.core.SectionPosition,net.minecraft.world.level.chunk.NibbleArray,boolean) -> a
    M:void retainData(net.minecraft.world.level.ChunkCoordIntPair,boolean) -> b
    M:int getRawBrightness(net.minecraft.core.BlockPosition,int) -> b
    M:int getLightSectionCount() -> b
    M:int getMinLightSection() -> c
    M:int getMaxLightSection() -> d
net.minecraft.world.level.lighting.LightEventListener -> doq -> net.minecraft.world.level.lighting.ILightEngine
    M:void updateSectionStatus(net.minecraft.core.BlockPosition,boolean) -> a
net.minecraft.world.level.lighting.SkyLightEngine -> dor -> net.minecraft.world.level.lighting.LightEngineSky
    M:int computeLevelFromNeighbor(long,long,int) -> b
    M:void checkNeighborsAfterUpdate(long,int,boolean) -> a
    M:int getComputedLevel(long,long,int) -> a
    M:void checkNode(long) -> f
    M:java.lang.String getDebugData(long) -> b
net.minecraft.world.level.lighting.SkyLightSectionStorage -> dos -> net.minecraft.world.level.lighting.LightEngineStorageSky
    F:it.unimi.dsi.fastutil.longs.LongSet sectionsWithSources -> o
    F:it.unimi.dsi.fastutil.longs.LongSet sectionsToAddSourcesTo -> p
    F:it.unimi.dsi.fastutil.longs.LongSet sectionsToRemoveSourcesFrom -> q
    F:it.unimi.dsi.fastutil.longs.LongSet columnsWithSkySources -> r
    F:boolean hasSourceInconsistencies -> s
    M:int getLightValue(long) -> d
    M:int getLightValue(long,boolean) -> e
    M:void onNodeAdded(long) -> k
    M:void queueRemoveSource(long) -> o
    M:void queueAddSource(long) -> p
    M:void recheckInconsistencyFlag() -> f
    M:void onNodeRemoved(long) -> l
    M:void enableLightSources(long,boolean) -> b
    M:boolean hasInconsistencies() -> a
    M:net.minecraft.world.level.chunk.NibbleArray createDataLayer(long) -> j
    M:net.minecraft.world.level.chunk.NibbleArray repeatFirstLayer(net.minecraft.world.level.chunk.NibbleArray) -> a
    M:void markNewInconsistencies(net.minecraft.world.level.lighting.LightEngineLayer,boolean,boolean) -> a
    M:boolean hasSectionsBelow(int) -> a
    M:boolean isAboveData(long) -> m
    M:boolean lightOnInSection(long) -> n
net.minecraft.world.level.lighting.SkyLightSectionStorage$SkyDataLayerStorageMap -> dos$a -> net.minecraft.world.level.lighting.LightEngineStorageSky$a
    F:int currentLowestY -> b
    F:it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap topSections -> c
    M:net.minecraft.world.level.lighting.SkyLightSectionStorage$SkyDataLayerStorageMap copy() -> a
    M:net.minecraft.world.level.lighting.LightEngineStorageArray copy() -> b
net.minecraft.world.level.lighting.SpatialLongSet -> dot -> net.minecraft.world.level.lighting.SpatialLongSet
    F:net.minecraft.world.level.lighting.SpatialLongSet$InternalMap map -> a
    M:boolean add(long) -> add
    M:boolean rem(long) -> rem
    M:int size() -> size
net.minecraft.world.level.lighting.SpatialLongSet$InternalMap -> dot$a -> net.minecraft.world.level.lighting.SpatialLongSet$a
    F:int X_BITS -> a
    F:int Z_BITS -> b
    F:int Y_BITS -> c
    F:int Y_OFFSET -> d
    F:int Z_OFFSET -> e
    F:int X_OFFSET -> g
    F:long OUTER_MASK -> h
    F:int lastPos -> i
    F:long lastOuterKey -> j
    F:int minSize -> k
    M:long getOuterKey(long) -> a
    M:int getInnerKey(long) -> b
    M:long getFullKey(long,int) -> a
    M:boolean addBit(long) -> c
    M:boolean replaceBit(int,long) -> a
    M:boolean removeBit(long) -> d
    M:boolean removeFromNullEntry(long) -> e
    M:boolean removeFromEntry(int,long) -> b
    M:long removeFirstBit() -> a
    M:void rehash(int) -> rehash
net.minecraft.world.level.material.EmptyFluid -> dov -> net.minecraft.world.level.material.FluidTypeEmpty
    M:net.minecraft.world.item.Item getBucket() -> a
    M:boolean canBeReplacedWith(net.minecraft.world.level.material.Fluid,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.FluidType,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.phys.Vec3D getFlow(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.Fluid) -> a
    M:int getTickDelay(net.minecraft.world.level.IWorldReader) -> a
    M:boolean isEmpty() -> b
    M:float getExplosionResistance() -> c
    M:float getHeight(net.minecraft.world.level.material.Fluid,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:float getOwnHeight(net.minecraft.world.level.material.Fluid) -> a
    M:net.minecraft.world.level.block.state.IBlockData createLegacyBlock(net.minecraft.world.level.material.Fluid) -> b
    M:boolean isSource(net.minecraft.world.level.material.Fluid) -> c
    M:int getAmount(net.minecraft.world.level.material.Fluid) -> d
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.material.Fluid,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
net.minecraft.world.level.material.FlowingFluid -> dow -> net.minecraft.world.level.material.FluidTypeFlowing
    F:net.minecraft.world.level.block.state.properties.BlockStateBoolean FALLING -> a
    F:net.minecraft.world.level.block.state.properties.BlockStateInteger LEVEL -> b
    F:int CACHE_SIZE -> e
    F:java.lang.ThreadLocal OCCLUSION_CACHE -> f
    F:java.util.Map shapes -> g
    M:void createFluidStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.phys.Vec3D getFlow(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.Fluid) -> a
    M:boolean affectsFlow(net.minecraft.world.level.material.Fluid) -> g
    M:boolean isSolidFace(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:void spread(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.Fluid) -> a
    M:void spreadToSides(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.Fluid,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.material.Fluid getNewLiquid(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean canPassThroughWall(net.minecraft.core.EnumDirection,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:net.minecraft.world.level.material.Fluid getFlowing(int,boolean) -> a
    M:net.minecraft.world.level.material.Fluid getSource(boolean) -> a
    M:void spreadTo(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.material.Fluid) -> a
    M:short getCacheKey(net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition) -> a
    M:int getSlopeDistance(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,int,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,it.unimi.dsi.fastutil.shorts.Short2ObjectMap,it.unimi.dsi.fastutil.shorts.Short2BooleanMap) -> a
    M:boolean isWaterHole(net.minecraft.world.level.IBlockAccess,net.minecraft.world.level.material.FluidType,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean canPassThrough(net.minecraft.world.level.IBlockAccess,net.minecraft.world.level.material.FluidType,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.Fluid) -> a
    M:boolean isSourceBlockOfThisType(net.minecraft.world.level.material.Fluid) -> h
    M:int sourceNeighborCount(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:java.util.Map getSpread(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> b
    M:boolean canHoldFluid(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.FluidType) -> a
    M:boolean canSpreadTo(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.material.Fluid,net.minecraft.world.level.material.FluidType) -> a
    M:int getSpreadDelay(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.Fluid,net.minecraft.world.level.material.Fluid) -> a
    M:void tick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.Fluid) -> a
    M:int getLegacyLevel(net.minecraft.world.level.material.Fluid) -> e
    M:boolean hasSameAbove(net.minecraft.world.level.material.Fluid,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> c
    M:float getHeight(net.minecraft.world.level.material.Fluid,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:float getOwnHeight(net.minecraft.world.level.material.Fluid) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.material.Fluid,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
    M:void rehash(int) -> rehash
net.minecraft.world.level.material.Fluid -> dox -> net.minecraft.world.level.material.FluidType
    F:net.minecraft.core.RegistryBlockID FLUID_STATE_REGISTRY -> c
    F:net.minecraft.world.level.block.state.BlockStateList stateDefinition -> d
    F:net.minecraft.world.level.material.Fluid defaultFluidState -> a
    F:net.minecraft.core.Holder$Reference builtInRegistryHolder -> b
    M:void createFluidStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:net.minecraft.world.level.block.state.BlockStateList getStateDefinition() -> g
    M:void registerDefaultState(net.minecraft.world.level.material.Fluid) -> f
    M:net.minecraft.world.level.material.Fluid defaultFluidState() -> h
    M:void animateTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.Fluid,net.minecraft.util.RandomSource) -> a
    M:void tick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.Fluid) -> a
    M:void randomTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.Fluid,net.minecraft.util.RandomSource) -> b
    M:net.minecraft.core.particles.ParticleParam getDripParticle() -> i
    M:boolean isRandomlyTicking() -> j
    M:boolean isEmpty() -> b
    M:boolean isSame(net.minecraft.world.level.material.FluidType) -> a
    M:boolean is(net.minecraft.tags.TagKey) -> a
    M:java.util.Optional getPickupSound() -> k
    M:net.minecraft.core.Holder$Reference builtInRegistryHolder() -> l
net.minecraft.world.level.material.FluidState -> doy -> net.minecraft.world.level.material.Fluid
    F:com.mojang.serialization.Codec CODEC -> a
    F:int AMOUNT_MAX -> b
    F:int AMOUNT_FULL -> g
    M:net.minecraft.world.level.material.FluidType getType() -> a
    M:boolean isSource() -> b
    M:boolean isSourceOfType(net.minecraft.world.level.material.FluidType) -> a
    M:boolean isEmpty() -> c
    M:float getHeight(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:float getOwnHeight() -> d
    M:int getAmount() -> e
    M:boolean shouldRenderBackwardUpFace(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
    M:void tick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition) -> a
    M:void animateTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> a
    M:boolean isRandomlyTicking() -> f
    M:void randomTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.util.RandomSource) -> b
    M:net.minecraft.world.phys.Vec3D getFlow(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> c
    M:net.minecraft.world.level.block.state.IBlockData createLegacyBlock() -> g
    M:net.minecraft.core.particles.ParticleParam getDripParticle() -> h
    M:boolean is(net.minecraft.tags.TagKey) -> a
    M:boolean is(net.minecraft.core.HolderSet) -> a
    M:boolean is(net.minecraft.world.level.material.FluidType) -> b
    M:float getExplosionResistance() -> i
    M:boolean canBeReplacedWith(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.FluidType,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> d
    M:net.minecraft.core.Holder holder() -> j
    M:java.util.stream.Stream getTags() -> k
net.minecraft.world.level.material.Fluids -> doz -> net.minecraft.world.level.material.FluidTypes
    F:net.minecraft.world.level.material.FluidType EMPTY -> a
    F:net.minecraft.world.level.material.FluidTypeFlowing FLOWING_WATER -> b
    F:net.minecraft.world.level.material.FluidTypeFlowing WATER -> c
    F:net.minecraft.world.level.material.FluidTypeFlowing FLOWING_LAVA -> d
    F:net.minecraft.world.level.material.FluidTypeFlowing LAVA -> e
    M:net.minecraft.world.level.material.FluidType register(java.lang.String,net.minecraft.world.level.material.FluidType) -> a
net.minecraft.world.level.material.FogType -> dpa -> net.minecraft.world.level.material.FogType
    F:net.minecraft.world.level.material.FogType LAVA -> a
    F:net.minecraft.world.level.material.FogType WATER -> b
    F:net.minecraft.world.level.material.FogType POWDER_SNOW -> c
    F:net.minecraft.world.level.material.FogType NONE -> d
net.minecraft.world.level.material.LavaFluid -> dpb -> net.minecraft.world.level.material.FluidTypeLava
    F:float MIN_LEVEL_CUTOFF -> e
    M:net.minecraft.world.level.material.FluidType getFlowing() -> d
    M:net.minecraft.world.level.material.FluidType getSource() -> e
    M:net.minecraft.world.item.Item getBucket() -> a
    M:void animateTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.Fluid,net.minecraft.util.RandomSource) -> a
    M:void randomTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.Fluid,net.minecraft.util.RandomSource) -> b
    M:boolean hasFlammableNeighbours(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> a
    M:boolean isFlammable(net.minecraft.world.level.IWorldReader,net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.core.particles.ParticleParam getDripParticle() -> i
    M:void beforeDestroyingBlock(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:int getSlopeFindDistance(net.minecraft.world.level.IWorldReader) -> b
    M:net.minecraft.world.level.block.state.IBlockData createLegacyBlock(net.minecraft.world.level.material.Fluid) -> b
    M:boolean isSame(net.minecraft.world.level.material.FluidType) -> a
    M:int getDropOff(net.minecraft.world.level.IWorldReader) -> c
    M:boolean canBeReplacedWith(net.minecraft.world.level.material.Fluid,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.FluidType,net.minecraft.core.EnumDirection) -> a
    M:int getTickDelay(net.minecraft.world.level.IWorldReader) -> a
    M:int getSpreadDelay(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.Fluid,net.minecraft.world.level.material.Fluid) -> a
    M:void fizz(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:boolean canConvertToSource() -> f
    M:void spreadTo(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.EnumDirection,net.minecraft.world.level.material.Fluid) -> a
    M:boolean isRandomlyTicking() -> j
    M:float getExplosionResistance() -> c
    M:java.util.Optional getPickupSound() -> k
net.minecraft.world.level.material.LavaFluid$Flowing -> dpb$a -> net.minecraft.world.level.material.FluidTypeLava$a
    M:void createFluidStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:int getAmount(net.minecraft.world.level.material.Fluid) -> d
    M:boolean isSource(net.minecraft.world.level.material.Fluid) -> c
net.minecraft.world.level.material.LavaFluid$Source -> dpb$b -> net.minecraft.world.level.material.FluidTypeLava$b
    M:int getAmount(net.minecraft.world.level.material.Fluid) -> d
    M:boolean isSource(net.minecraft.world.level.material.Fluid) -> c
net.minecraft.world.level.material.Material -> dpc -> net.minecraft.world.level.material.Material
    F:net.minecraft.world.level.material.Material AIR -> a
    F:net.minecraft.world.level.material.Material STRUCTURAL_AIR -> b
    F:net.minecraft.world.level.material.Material PORTAL -> c
    F:net.minecraft.world.level.material.Material CLOTH_DECORATION -> d
    F:net.minecraft.world.level.material.Material PLANT -> e
    F:net.minecraft.world.level.material.Material WATER_PLANT -> f
    F:net.minecraft.world.level.material.Material REPLACEABLE_PLANT -> g
    F:net.minecraft.world.level.material.Material REPLACEABLE_FIREPROOF_PLANT -> h
    F:net.minecraft.world.level.material.Material REPLACEABLE_WATER_PLANT -> i
    F:net.minecraft.world.level.material.Material WATER -> j
    F:net.minecraft.world.level.material.Material BUBBLE_COLUMN -> k
    F:net.minecraft.world.level.material.Material LAVA -> l
    F:net.minecraft.world.level.material.Material TOP_SNOW -> m
    F:net.minecraft.world.level.material.Material FIRE -> n
    F:net.minecraft.world.level.material.Material DECORATION -> o
    F:net.minecraft.world.level.material.Material WEB -> p
    F:net.minecraft.world.level.material.Material SCULK -> q
    F:net.minecraft.world.level.material.Material BUILDABLE_GLASS -> r
    F:net.minecraft.world.level.material.Material CLAY -> s
    F:net.minecraft.world.level.material.Material DIRT -> t
    F:net.minecraft.world.level.material.Material GRASS -> u
    F:net.minecraft.world.level.material.Material ICE_SOLID -> v
    F:net.minecraft.world.level.material.Material SAND -> w
    F:net.minecraft.world.level.material.Material SPONGE -> x
    F:net.minecraft.world.level.material.Material SHULKER_SHELL -> y
    F:net.minecraft.world.level.material.Material WOOD -> z
    F:boolean flammable -> aa
    F:boolean liquid -> ab
    F:boolean solidBlocking -> ac
    F:boolean replaceable -> ad
    F:boolean solid -> ae
    M:boolean isLiquid() -> a
    M:boolean isSolid() -> b
    M:boolean blocksMotion() -> c
    M:boolean isFlammable() -> d
    M:boolean isReplaceable() -> e
    M:boolean isSolidBlocking() -> f
    M:net.minecraft.world.level.material.EnumPistonReaction getPushReaction() -> g
    M:net.minecraft.world.level.material.MaterialMapColor getColor() -> h
net.minecraft.world.level.material.Material$Builder -> dpc$a -> net.minecraft.world.level.material.Material$a
    F:net.minecraft.world.level.material.EnumPistonReaction pushReaction -> a
    F:boolean blocksMotion -> b
    F:boolean flammable -> c
    F:boolean liquid -> d
    F:boolean replaceable -> e
    F:boolean solid -> f
    F:net.minecraft.world.level.material.MaterialMapColor color -> g
    F:boolean solidBlocking -> h
    M:net.minecraft.world.level.material.Material$Builder liquid() -> a
    M:net.minecraft.world.level.material.Material$Builder nonSolid() -> b
    M:net.minecraft.world.level.material.Material$Builder noCollider() -> c
    M:net.minecraft.world.level.material.Material$Builder notSolidBlocking() -> i
    M:net.minecraft.world.level.material.Material$Builder flammable() -> d
    M:net.minecraft.world.level.material.Material$Builder replaceable() -> e
    M:net.minecraft.world.level.material.Material$Builder destroyOnPush() -> f
    M:net.minecraft.world.level.material.Material$Builder notPushable() -> g
    M:net.minecraft.world.level.material.Material build() -> h
net.minecraft.world.level.material.MaterialColor -> dpd -> net.minecraft.world.level.material.MaterialMapColor
    F:net.minecraft.world.level.material.MaterialMapColor NONE -> a
    F:net.minecraft.world.level.material.MaterialMapColor GRASS -> b
    F:net.minecraft.world.level.material.MaterialMapColor SAND -> c
    F:net.minecraft.world.level.material.MaterialMapColor WOOL -> d
    F:net.minecraft.world.level.material.MaterialMapColor FIRE -> e
    F:net.minecraft.world.level.material.MaterialMapColor ICE -> f
    F:net.minecraft.world.level.material.MaterialMapColor METAL -> g
    F:net.minecraft.world.level.material.MaterialMapColor PLANT -> h
    F:net.minecraft.world.level.material.MaterialMapColor SNOW -> i
    F:net.minecraft.world.level.material.MaterialMapColor CLAY -> j
    F:net.minecraft.world.level.material.MaterialMapColor DIRT -> k
    F:net.minecraft.world.level.material.MaterialMapColor STONE -> l
    F:net.minecraft.world.level.material.MaterialMapColor WATER -> m
    F:net.minecraft.world.level.material.MaterialMapColor WOOD -> n
    F:net.minecraft.world.level.material.MaterialMapColor QUARTZ -> o
    F:net.minecraft.world.level.material.MaterialMapColor COLOR_ORANGE -> p
    F:net.minecraft.world.level.material.MaterialMapColor COLOR_MAGENTA -> q
    F:net.minecraft.world.level.material.MaterialMapColor COLOR_LIGHT_BLUE -> r
    F:net.minecraft.world.level.material.MaterialMapColor COLOR_YELLOW -> s
    F:net.minecraft.world.level.material.MaterialMapColor COLOR_LIGHT_GREEN -> t
    F:net.minecraft.world.level.material.MaterialMapColor COLOR_PINK -> u
    F:net.minecraft.world.level.material.MaterialMapColor COLOR_GRAY -> v
    F:net.minecraft.world.level.material.MaterialMapColor COLOR_LIGHT_GRAY -> w
    F:net.minecraft.world.level.material.MaterialMapColor COLOR_CYAN -> x
    F:net.minecraft.world.level.material.MaterialMapColor COLOR_PURPLE -> y
    F:net.minecraft.world.level.material.MaterialMapColor COLOR_BLUE -> z
    F:net.minecraft.world.level.material.MaterialMapColor CRIMSON_NYLIUM -> aa
    F:net.minecraft.world.level.material.MaterialMapColor CRIMSON_STEM -> ab
    F:net.minecraft.world.level.material.MaterialMapColor CRIMSON_HYPHAE -> ac
    F:net.minecraft.world.level.material.MaterialMapColor WARPED_NYLIUM -> ad
    F:net.minecraft.world.level.material.MaterialMapColor WARPED_STEM -> ae
    F:net.minecraft.world.level.material.MaterialMapColor WARPED_HYPHAE -> af
    F:net.minecraft.world.level.material.MaterialMapColor WARPED_WART_BLOCK -> ag
    F:net.minecraft.world.level.material.MaterialMapColor DEEPSLATE -> ah
    F:net.minecraft.world.level.material.MaterialMapColor RAW_IRON -> ai
    F:net.minecraft.world.level.material.MaterialMapColor GLOW_LICHEN -> aj
    F:int col -> ak
    F:int id -> al
    M:int calculateRGBColor(net.minecraft.world.level.material.MaterialColor$Brightness) -> a
    M:net.minecraft.world.level.material.MaterialMapColor byId(int) -> a
    M:net.minecraft.world.level.material.MaterialMapColor byIdUnsafe(int) -> c
    M:int getColorFromPackedId(int) -> b
    M:byte getPackedId(net.minecraft.world.level.material.MaterialColor$Brightness) -> b
net.minecraft.world.level.material.MaterialColor$Brightness -> dpd$a -> net.minecraft.world.level.material.MaterialMapColor$a
    F:net.minecraft.world.level.material.MaterialColor$Brightness LOW -> a
    F:net.minecraft.world.level.material.MaterialColor$Brightness NORMAL -> b
    F:net.minecraft.world.level.material.MaterialColor$Brightness HIGH -> c
    F:net.minecraft.world.level.material.MaterialColor$Brightness LOWEST -> d
    F:int id -> e
    F:int modifier -> f
    M:net.minecraft.world.level.material.MaterialColor$Brightness byId(int) -> a
    M:net.minecraft.world.level.material.MaterialColor$Brightness byIdUnsafe(int) -> b
net.minecraft.world.level.material.PushReaction -> dpe -> net.minecraft.world.level.material.EnumPistonReaction
    F:net.minecraft.world.level.material.EnumPistonReaction NORMAL -> a
    F:net.minecraft.world.level.material.EnumPistonReaction DESTROY -> b
    F:net.minecraft.world.level.material.EnumPistonReaction BLOCK -> c
    F:net.minecraft.world.level.material.EnumPistonReaction IGNORE -> d
    F:net.minecraft.world.level.material.EnumPistonReaction PUSH_ONLY -> e
net.minecraft.world.level.material.WaterFluid -> dpf -> net.minecraft.world.level.material.FluidTypeWater
    M:net.minecraft.world.level.material.FluidType getFlowing() -> d
    M:net.minecraft.world.level.material.FluidType getSource() -> e
    M:net.minecraft.world.item.Item getBucket() -> a
    M:void animateTick(net.minecraft.world.level.World,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.Fluid,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.core.particles.ParticleParam getDripParticle() -> i
    M:boolean canConvertToSource() -> f
    M:void beforeDestroyingBlock(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.state.IBlockData) -> a
    M:int getSlopeFindDistance(net.minecraft.world.level.IWorldReader) -> b
    M:net.minecraft.world.level.block.state.IBlockData createLegacyBlock(net.minecraft.world.level.material.Fluid) -> b
    M:boolean isSame(net.minecraft.world.level.material.FluidType) -> a
    M:int getDropOff(net.minecraft.world.level.IWorldReader) -> c
    M:int getTickDelay(net.minecraft.world.level.IWorldReader) -> a
    M:boolean canBeReplacedWith(net.minecraft.world.level.material.Fluid,net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition,net.minecraft.world.level.material.FluidType,net.minecraft.core.EnumDirection) -> a
    M:float getExplosionResistance() -> c
    M:java.util.Optional getPickupSound() -> k
net.minecraft.world.level.material.WaterFluid$Flowing -> dpf$a -> net.minecraft.world.level.material.FluidTypeWater$a
    M:void createFluidStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    M:int getAmount(net.minecraft.world.level.material.Fluid) -> d
    M:boolean isSource(net.minecraft.world.level.material.Fluid) -> c
net.minecraft.world.level.material.WaterFluid$Source -> dpf$b -> net.minecraft.world.level.material.FluidTypeWater$b
    M:int getAmount(net.minecraft.world.level.material.Fluid) -> d
    M:boolean isSource(net.minecraft.world.level.material.Fluid) -> c
net.minecraft.world.level.pathfinder.AmphibiousNodeEvaluator -> dpi -> net.minecraft.world.level.pathfinder.AmphibiousNodeEvaluator
    F:boolean prefersShallowSwimming -> l
    F:float oldWalkableCost -> m
    F:float oldWaterBorderCost -> n
    M:void prepare(net.minecraft.world.level.ChunkCache,net.minecraft.world.entity.EntityInsentient) -> a
    M:void done() -> b
    M:net.minecraft.world.level.pathfinder.PathPoint getStart() -> a
    M:net.minecraft.world.level.pathfinder.PathDestination getGoal(double,double,double) -> a
    M:int getNeighbors(net.minecraft.world.level.pathfinder.Node[],net.minecraft.world.level.pathfinder.PathPoint) -> a
    M:boolean isVerticalNeighborValid(net.minecraft.world.level.pathfinder.PathPoint,net.minecraft.world.level.pathfinder.PathPoint) -> b
    M:double getFloorLevel(net.minecraft.core.BlockPosition) -> a
    M:boolean isAmphibious() -> c
    M:net.minecraft.world.level.pathfinder.PathType getBlockPathType(net.minecraft.world.level.IBlockAccess,int,int,int) -> a
net.minecraft.world.level.pathfinder.BinaryHeap -> dpj -> net.minecraft.world.level.pathfinder.Path
    F:int size -> b
    M:net.minecraft.world.level.pathfinder.PathPoint insert(net.minecraft.world.level.pathfinder.PathPoint) -> a
    M:void clear() -> a
    M:net.minecraft.world.level.pathfinder.PathPoint peek() -> b
    M:net.minecraft.world.level.pathfinder.PathPoint pop() -> c
    M:void remove(net.minecraft.world.level.pathfinder.PathPoint) -> b
    M:void changeCost(net.minecraft.world.level.pathfinder.PathPoint,float) -> a
    M:int size() -> d
    M:void upHeap(int) -> a
    M:void downHeap(int) -> b
    M:boolean isEmpty() -> e
net.minecraft.world.level.pathfinder.BlockPathTypes -> dpk -> net.minecraft.world.level.pathfinder.PathType
    F:net.minecraft.world.level.pathfinder.PathType BLOCKED -> a
    F:net.minecraft.world.level.pathfinder.PathType OPEN -> b
    F:net.minecraft.world.level.pathfinder.PathType WALKABLE -> c
    F:net.minecraft.world.level.pathfinder.PathType WALKABLE_DOOR -> d
    F:net.minecraft.world.level.pathfinder.PathType TRAPDOOR -> e
    F:net.minecraft.world.level.pathfinder.PathType POWDER_SNOW -> f
    F:net.minecraft.world.level.pathfinder.PathType DANGER_POWDER_SNOW -> g
    F:net.minecraft.world.level.pathfinder.PathType FENCE -> h
    F:net.minecraft.world.level.pathfinder.PathType LAVA -> i
    F:net.minecraft.world.level.pathfinder.PathType WATER -> j
    F:net.minecraft.world.level.pathfinder.PathType WATER_BORDER -> k
    F:net.minecraft.world.level.pathfinder.PathType RAIL -> l
    F:net.minecraft.world.level.pathfinder.PathType UNPASSABLE_RAIL -> m
    F:net.minecraft.world.level.pathfinder.PathType DANGER_FIRE -> n
    F:net.minecraft.world.level.pathfinder.PathType DAMAGE_FIRE -> o
    F:net.minecraft.world.level.pathfinder.PathType DANGER_CACTUS -> p
    F:net.minecraft.world.level.pathfinder.PathType DAMAGE_CACTUS -> q
    F:net.minecraft.world.level.pathfinder.PathType DANGER_OTHER -> r
    F:net.minecraft.world.level.pathfinder.PathType DAMAGE_OTHER -> s
    F:net.minecraft.world.level.pathfinder.PathType DOOR_OPEN -> t
    F:net.minecraft.world.level.pathfinder.PathType DOOR_WOOD_CLOSED -> u
    F:net.minecraft.world.level.pathfinder.PathType DOOR_IRON_CLOSED -> v
    F:net.minecraft.world.level.pathfinder.PathType BREACH -> w
    F:net.minecraft.world.level.pathfinder.PathType LEAVES -> x
    F:net.minecraft.world.level.pathfinder.PathType STICKY_HONEY -> y
    F:net.minecraft.world.level.pathfinder.PathType COCOA -> z
    M:float getMalus() -> a
net.minecraft.world.level.pathfinder.FlyNodeEvaluator -> dpl -> net.minecraft.world.level.pathfinder.PathfinderFlying
    F:it.unimi.dsi.fastutil.longs.Long2ObjectMap pathTypeByPosCache -> l
    M:void prepare(net.minecraft.world.level.ChunkCache,net.minecraft.world.entity.EntityInsentient) -> a
    M:void done() -> b
    M:net.minecraft.world.level.pathfinder.PathPoint getStart() -> a
    M:net.minecraft.world.level.pathfinder.PathDestination getGoal(double,double,double) -> a
    M:int getNeighbors(net.minecraft.world.level.pathfinder.Node[],net.minecraft.world.level.pathfinder.PathPoint) -> a
    M:boolean hasMalus(net.minecraft.world.level.pathfinder.PathPoint) -> b
    M:boolean isOpen(net.minecraft.world.level.pathfinder.PathPoint) -> c
    M:net.minecraft.world.level.pathfinder.PathPoint getNode(int,int,int) -> a
    M:net.minecraft.world.level.pathfinder.PathType getCachedBlockPathType(int,int,int) -> b
    M:net.minecraft.world.level.pathfinder.PathType getBlockPathType(net.minecraft.world.level.IBlockAccess,int,int,int,net.minecraft.world.entity.EntityInsentient,int,int,int,boolean,boolean) -> a
    M:net.minecraft.world.level.pathfinder.PathType getBlockPathType(net.minecraft.world.level.IBlockAccess,int,int,int) -> a
net.minecraft.world.level.pathfinder.Node -> dpm -> net.minecraft.world.level.pathfinder.PathPoint
    F:int x -> a
    F:int y -> b
    F:int z -> c
    F:int hash -> m
    F:int heapIdx -> d
    F:float g -> e
    F:float h -> f
    F:float f -> g
    F:net.minecraft.world.level.pathfinder.PathPoint cameFrom -> h
    F:boolean closed -> i
    F:float walkedDistance -> j
    F:float costMalus -> k
    F:net.minecraft.world.level.pathfinder.PathType type -> l
    M:net.minecraft.world.level.pathfinder.PathPoint cloneAndMove(int,int,int) -> a
    M:int createHash(int,int,int) -> b
    M:float distanceTo(net.minecraft.world.level.pathfinder.PathPoint) -> a
    M:float distanceToXZ(net.minecraft.world.level.pathfinder.PathPoint) -> b
    M:float distanceTo(net.minecraft.core.BlockPosition) -> a
    M:float distanceToSqr(net.minecraft.world.level.pathfinder.PathPoint) -> c
    M:float distanceToSqr(net.minecraft.core.BlockPosition) -> b
    M:float distanceManhattan(net.minecraft.world.level.pathfinder.PathPoint) -> d
    M:float distanceManhattan(net.minecraft.core.BlockPosition) -> c
    M:net.minecraft.core.BlockPosition asBlockPos() -> a
    M:net.minecraft.world.phys.Vec3D asVec3() -> b
    M:boolean equals(java.lang.Object) -> equals
    M:boolean inOpenSet() -> c
    M:void writeToStream(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.world.level.pathfinder.PathPoint createFromStream(net.minecraft.network.PacketDataSerializer) -> b
net.minecraft.world.level.pathfinder.NodeEvaluator -> dpn -> net.minecraft.world.level.pathfinder.PathfinderAbstract
    F:net.minecraft.world.level.ChunkCache level -> a
    F:net.minecraft.world.entity.EntityInsentient mob -> b
    F:it.unimi.dsi.fastutil.ints.Int2ObjectMap nodes -> c
    F:int entityWidth -> d
    F:int entityHeight -> e
    F:int entityDepth -> f
    F:boolean canPassDoors -> g
    F:boolean canOpenDoors -> h
    F:boolean canFloat -> i
    M:void prepare(net.minecraft.world.level.ChunkCache,net.minecraft.world.entity.EntityInsentient) -> a
    M:void done() -> b
    M:net.minecraft.world.level.pathfinder.PathPoint getNode(net.minecraft.core.BlockPosition) -> b
    M:net.minecraft.world.level.pathfinder.PathPoint getNode(int,int,int) -> a
    M:net.minecraft.world.level.pathfinder.PathDestination getTargetFromNode(net.minecraft.world.level.pathfinder.PathPoint) -> a
    M:void setCanPassDoors(boolean) -> a
    M:void setCanOpenDoors(boolean) -> b
    M:void setCanFloat(boolean) -> c
    M:boolean canPassDoors() -> d
    M:boolean canOpenDoors() -> e
    M:boolean canFloat() -> f
net.minecraft.world.level.pathfinder.Path -> dpo -> net.minecraft.world.level.pathfinder.PathEntity
    F:java.util.List nodes -> a
    F:java.util.Set targetNodes -> d
    F:int nextNodeIndex -> e
    F:net.minecraft.core.BlockPosition target -> f
    F:float distToTarget -> g
    F:boolean reached -> h
    M:void advance() -> a
    M:boolean notStarted() -> b
    M:boolean isDone() -> c
    M:net.minecraft.world.level.pathfinder.PathPoint getEndNode() -> d
    M:net.minecraft.world.level.pathfinder.PathPoint getNode(int) -> a
    M:void truncateNodes(int) -> b
    M:void replaceNode(int,net.minecraft.world.level.pathfinder.PathPoint) -> a
    M:int getNodeCount() -> e
    M:int getNextNodeIndex() -> f
    M:void setNextNodeIndex(int) -> c
    M:net.minecraft.world.phys.Vec3D getEntityPosAtNode(net.minecraft.world.entity.Entity,int) -> a
    M:net.minecraft.core.BlockPosition getNodePos(int) -> d
    M:net.minecraft.world.phys.Vec3D getNextEntityPos(net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.core.BlockPosition getNextNodePos() -> g
    M:net.minecraft.world.level.pathfinder.PathPoint getNextNode() -> h
    M:net.minecraft.world.level.pathfinder.PathPoint getPreviousNode() -> i
    M:boolean sameAs(net.minecraft.world.level.pathfinder.PathEntity) -> a
    M:boolean canReach() -> j
    M:void setDebug(net.minecraft.world.level.pathfinder.Node[],net.minecraft.world.level.pathfinder.Node[],java.util.Set) -> a
    M:void writeToStream(net.minecraft.network.PacketDataSerializer) -> a
    M:net.minecraft.world.level.pathfinder.PathEntity createFromStream(net.minecraft.network.PacketDataSerializer) -> b
    M:net.minecraft.core.BlockPosition getTarget() -> m
    M:float getDistToTarget() -> n
net.minecraft.world.level.pathfinder.PathComputationType -> dpp -> net.minecraft.world.level.pathfinder.PathMode
    F:net.minecraft.world.level.pathfinder.PathMode LAND -> a
    F:net.minecraft.world.level.pathfinder.PathMode WATER -> b
    F:net.minecraft.world.level.pathfinder.PathMode AIR -> c
net.minecraft.world.level.pathfinder.PathFinder -> dpq -> net.minecraft.world.level.pathfinder.Pathfinder
    F:float FUDGING -> a
    F:int maxVisitedNodes -> c
    F:net.minecraft.world.level.pathfinder.PathfinderAbstract nodeEvaluator -> d
    F:boolean DEBUG -> e
    F:net.minecraft.world.level.pathfinder.Path openSet -> f
    M:net.minecraft.world.level.pathfinder.PathEntity findPath(net.minecraft.world.level.ChunkCache,net.minecraft.world.entity.EntityInsentient,java.util.Set,float,int,float) -> a
    M:net.minecraft.world.level.pathfinder.PathEntity findPath(net.minecraft.util.profiling.GameProfilerFiller,net.minecraft.world.level.pathfinder.PathPoint,java.util.Map,float,int,float) -> a
    M:float distance(net.minecraft.world.level.pathfinder.PathPoint,net.minecraft.world.level.pathfinder.PathPoint) -> a
    M:float getBestH(net.minecraft.world.level.pathfinder.PathPoint,java.util.Set) -> a
    M:net.minecraft.world.level.pathfinder.PathEntity reconstructPath(net.minecraft.world.level.pathfinder.PathPoint,net.minecraft.core.BlockPosition,boolean) -> a
net.minecraft.world.level.pathfinder.SwimNodeEvaluator -> dpr -> net.minecraft.world.level.pathfinder.PathfinderWater
    F:boolean allowBreaching -> j
    F:it.unimi.dsi.fastutil.longs.Long2ObjectMap pathTypesByPosCache -> k
    M:void prepare(net.minecraft.world.level.ChunkCache,net.minecraft.world.entity.EntityInsentient) -> a
    M:void done() -> b
    M:net.minecraft.world.level.pathfinder.PathPoint getStart() -> a
    M:net.minecraft.world.level.pathfinder.PathDestination getGoal(double,double,double) -> a
    M:int getNeighbors(net.minecraft.world.level.pathfinder.Node[],net.minecraft.world.level.pathfinder.PathPoint) -> a
    M:boolean isNodeValid(net.minecraft.world.level.pathfinder.PathPoint) -> b
    M:boolean isDiagonalNodeValid(net.minecraft.world.level.pathfinder.PathPoint,net.minecraft.world.level.pathfinder.PathPoint,net.minecraft.world.level.pathfinder.PathPoint) -> a
    M:net.minecraft.world.level.pathfinder.PathPoint getNode(int,int,int) -> a
    M:net.minecraft.world.level.pathfinder.PathType getCachedBlockType(int,int,int) -> b
    M:net.minecraft.world.level.pathfinder.PathType getBlockPathType(net.minecraft.world.level.IBlockAccess,int,int,int) -> a
    M:net.minecraft.world.level.pathfinder.PathType getBlockPathType(net.minecraft.world.level.IBlockAccess,int,int,int,net.minecraft.world.entity.EntityInsentient,int,int,int,boolean,boolean) -> a
net.minecraft.world.level.pathfinder.Target -> dps -> net.minecraft.world.level.pathfinder.PathDestination
    F:float bestHeuristic -> m
    F:net.minecraft.world.level.pathfinder.PathPoint bestNode -> n
    F:boolean reached -> o
    M:void updateBest(float,net.minecraft.world.level.pathfinder.PathPoint) -> a
    M:net.minecraft.world.level.pathfinder.PathPoint getBestNode() -> d
    M:void setReached() -> e
    M:boolean isReached() -> f
    M:net.minecraft.world.level.pathfinder.PathDestination createFromStream(net.minecraft.network.PacketDataSerializer) -> c
net.minecraft.world.level.pathfinder.WalkNodeEvaluator -> dpt -> net.minecraft.world.level.pathfinder.PathfinderNormal
    F:double SPACE_BETWEEN_WALL_POSTS -> j
    F:float oldWaterCost -> k
    F:it.unimi.dsi.fastutil.longs.Long2ObjectMap pathTypesByPosCache -> l
    F:it.unimi.dsi.fastutil.objects.Object2BooleanMap collisionCache -> m
    M:void prepare(net.minecraft.world.level.ChunkCache,net.minecraft.world.entity.EntityInsentient) -> a
    M:void done() -> b
    M:net.minecraft.world.level.pathfinder.PathPoint getStart() -> a
    M:net.minecraft.world.level.pathfinder.PathPoint getStartNode(net.minecraft.core.BlockPosition) -> c
    M:boolean hasPositiveMalus(net.minecraft.core.BlockPosition) -> d
    M:net.minecraft.world.level.pathfinder.PathDestination getGoal(double,double,double) -> a
    M:int getNeighbors(net.minecraft.world.level.pathfinder.Node[],net.minecraft.world.level.pathfinder.PathPoint) -> a
    M:boolean isNeighborValid(net.minecraft.world.level.pathfinder.PathPoint,net.minecraft.world.level.pathfinder.PathPoint) -> a
    M:boolean isDiagonalValid(net.minecraft.world.level.pathfinder.PathPoint,net.minecraft.world.level.pathfinder.PathPoint,net.minecraft.world.level.pathfinder.PathPoint,net.minecraft.world.level.pathfinder.PathPoint) -> a
    M:boolean doesBlockHavePartialCollision(net.minecraft.world.level.pathfinder.PathType) -> a
    M:boolean canReachWithoutCollision(net.minecraft.world.level.pathfinder.PathPoint) -> b
    M:double getFloorLevel(net.minecraft.core.BlockPosition) -> a
    M:double getFloorLevel(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:boolean isAmphibious() -> c
    M:net.minecraft.world.level.pathfinder.PathPoint findAcceptedNode(int,int,int,int,double,net.minecraft.core.EnumDirection,net.minecraft.world.level.pathfinder.PathType) -> a
    M:net.minecraft.world.level.pathfinder.PathPoint getNodeAndUpdateCostToMax(int,int,int,net.minecraft.world.level.pathfinder.PathType,float) -> a
    M:net.minecraft.world.level.pathfinder.PathPoint getBlockedNode(int,int,int) -> b
    M:boolean hasCollisions(net.minecraft.world.phys.AxisAlignedBB) -> a
    M:net.minecraft.world.level.pathfinder.PathType getBlockPathType(net.minecraft.world.level.IBlockAccess,int,int,int,net.minecraft.world.entity.EntityInsentient,int,int,int,boolean,boolean) -> a
    M:net.minecraft.world.level.pathfinder.PathType getBlockPathTypes(net.minecraft.world.level.IBlockAccess,int,int,int,int,int,int,boolean,boolean,java.util.EnumSet,net.minecraft.world.level.pathfinder.PathType,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.pathfinder.PathType evaluateBlockPathType(net.minecraft.world.level.IBlockAccess,boolean,boolean,net.minecraft.core.BlockPosition,net.minecraft.world.level.pathfinder.PathType) -> a
    M:net.minecraft.world.level.pathfinder.PathType getBlockPathType(net.minecraft.world.entity.EntityInsentient,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.level.pathfinder.PathType getCachedBlockType(net.minecraft.world.entity.EntityInsentient,int,int,int) -> a
    M:net.minecraft.world.level.pathfinder.PathType getBlockPathType(net.minecraft.world.level.IBlockAccess,int,int,int) -> a
    M:net.minecraft.world.level.pathfinder.PathType getBlockPathTypeStatic(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition$MutableBlockPosition) -> a
    M:net.minecraft.world.level.pathfinder.PathType checkNeighbourBlocks(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.world.level.pathfinder.PathType) -> a
    M:net.minecraft.world.level.pathfinder.PathType getBlockPathTypeRaw(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> b
    M:boolean isBurningBlock(net.minecraft.world.level.block.state.IBlockData) -> a
net.minecraft.world.level.portal.PortalForcer -> dpv -> net.minecraft.world.level.portal.PortalTravelAgent
    F:int TICKET_RADIUS -> a
    F:int SEARCH_RADIUS -> b
    F:int CREATE_RADIUS -> c
    F:int FRAME_HEIGHT -> d
    F:int FRAME_WIDTH -> e
    F:int FRAME_BOX -> f
    F:int FRAME_HEIGHT_START -> g
    F:int FRAME_HEIGHT_END -> h
    F:int FRAME_WIDTH_START -> i
    F:int FRAME_WIDTH_END -> j
    F:int FRAME_BOX_START -> k
    F:int FRAME_BOX_END -> l
    F:int NOTHING_FOUND -> m
    F:net.minecraft.server.level.WorldServer level -> n
    M:java.util.Optional findPortalAround(net.minecraft.core.BlockPosition,boolean,net.minecraft.world.level.border.WorldBorder) -> a
    M:java.util.Optional createPortal(net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:boolean canHostFrame(net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition$MutableBlockPosition,net.minecraft.core.EnumDirection,int) -> a
net.minecraft.world.level.portal.PortalInfo -> dpw -> net.minecraft.world.level.portal.ShapeDetectorShape
    F:net.minecraft.world.phys.Vec3D pos -> a
    F:net.minecraft.world.phys.Vec3D speed -> b
    F:float yRot -> c
    F:float xRot -> d
net.minecraft.world.level.portal.PortalShape -> dpx -> net.minecraft.world.level.portal.BlockPortalShape
    F:int MIN_WIDTH -> c
    F:int MAX_WIDTH -> a
    F:int MIN_HEIGHT -> d
    F:int MAX_HEIGHT -> b
    F:net.minecraft.world.level.block.state.BlockBehaviour$StatePredicate FRAME -> e
    F:net.minecraft.world.level.GeneratorAccess level -> f
    F:net.minecraft.core.EnumDirection$EnumAxis axis -> g
    F:net.minecraft.core.EnumDirection rightDir -> h
    F:int numPortalBlocks -> i
    F:net.minecraft.core.BlockPosition bottomLeft -> j
    F:int height -> k
    F:int width -> l
    M:java.util.Optional findEmptyPortalShape(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:java.util.Optional findPortalShape(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition,java.util.function.Predicate,net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:net.minecraft.core.BlockPosition calculateBottomLeft(net.minecraft.core.BlockPosition) -> a
    M:int calculateWidth() -> d
    M:int getDistanceUntilEdgeAboveFrame(net.minecraft.core.BlockPosition,net.minecraft.core.EnumDirection) -> a
    M:int calculateHeight() -> e
    M:boolean hasTopFrame(net.minecraft.core.BlockPosition$MutableBlockPosition,int) -> a
    M:int getDistanceUntilTop(net.minecraft.core.BlockPosition$MutableBlockPosition) -> a
    M:boolean isEmpty(net.minecraft.world.level.block.state.IBlockData) -> a
    M:boolean isValid() -> a
    M:void createPortalBlocks() -> b
    M:boolean isComplete() -> c
    M:net.minecraft.world.phys.Vec3D getRelativePosition(net.minecraft.BlockUtil$Rectangle,net.minecraft.core.EnumDirection$EnumAxis,net.minecraft.world.phys.Vec3D,net.minecraft.world.entity.EntitySize) -> a
    M:net.minecraft.world.level.portal.ShapeDetectorShape createPortalInfo(net.minecraft.server.level.WorldServer,net.minecraft.BlockUtil$Rectangle,net.minecraft.core.EnumDirection$EnumAxis,net.minecraft.world.phys.Vec3D,net.minecraft.world.entity.EntitySize,net.minecraft.world.phys.Vec3D,float,float) -> a
net.minecraft.world.level.redstone.CollectingNeighborUpdater -> dpz -> net.minecraft.world.level.redstone.CollectingNeighborUpdater
    F:org.slf4j.Logger LOGGER -> b
    F:net.minecraft.world.level.World level -> c
    F:int maxChainedNeighborUpdates -> d
    F:java.util.ArrayDeque stack -> e
    F:java.util.List addedThisLayer -> f
    F:int count -> g
    M:void shapeUpdate(net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,int,int) -> a
    M:void neighborChanged(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
    M:void updateNeighborsAtExceptFromFacing(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.EnumDirection) -> a
    M:void addAndRun(net.minecraft.core.BlockPosition,net.minecraft.world.level.redstone.CollectingNeighborUpdater$NeighborUpdates) -> a
    M:void runUpdates() -> a
net.minecraft.world.level.redstone.CollectingNeighborUpdater$FullNeighborUpdate -> dpz$a -> net.minecraft.world.level.redstone.CollectingNeighborUpdater$a
    F:net.minecraft.world.level.block.state.IBlockData state -> a
    F:net.minecraft.core.BlockPosition pos -> b
    F:net.minecraft.world.level.block.Block block -> c
    F:net.minecraft.core.BlockPosition neighborPos -> d
    F:boolean movedByPiston -> e
    M:boolean runNext(net.minecraft.world.level.World) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.level.block.state.IBlockData state() -> a
    M:net.minecraft.core.BlockPosition pos() -> b
    M:net.minecraft.world.level.block.Block block() -> c
    M:net.minecraft.core.BlockPosition neighborPos() -> d
    M:boolean movedByPiston() -> e
net.minecraft.world.level.redstone.CollectingNeighborUpdater$MultiNeighborUpdate -> dpz$b -> net.minecraft.world.level.redstone.CollectingNeighborUpdater$b
    F:net.minecraft.core.BlockPosition sourcePos -> a
    F:net.minecraft.world.level.block.Block sourceBlock -> b
    F:net.minecraft.core.EnumDirection skipDirection -> c
    F:int idx -> d
    M:boolean runNext(net.minecraft.world.level.World) -> a
net.minecraft.world.level.redstone.CollectingNeighborUpdater$NeighborUpdates -> dpz$c -> net.minecraft.world.level.redstone.CollectingNeighborUpdater$c
net.minecraft.world.level.redstone.CollectingNeighborUpdater$ShapeUpdate -> dpz$d -> net.minecraft.world.level.redstone.CollectingNeighborUpdater$d
    F:net.minecraft.core.EnumDirection direction -> a
    F:net.minecraft.world.level.block.state.IBlockData state -> b
    F:net.minecraft.core.BlockPosition pos -> c
    F:net.minecraft.core.BlockPosition neighborPos -> d
    F:int updateFlags -> e
    M:boolean runNext(net.minecraft.world.level.World) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.EnumDirection direction() -> a
    M:net.minecraft.world.level.block.state.IBlockData state() -> b
    M:net.minecraft.core.BlockPosition pos() -> c
    M:net.minecraft.core.BlockPosition neighborPos() -> d
    M:int updateFlags() -> e
net.minecraft.world.level.redstone.CollectingNeighborUpdater$SimpleNeighborUpdate -> dpz$e -> net.minecraft.world.level.redstone.CollectingNeighborUpdater$e
    F:net.minecraft.core.BlockPosition pos -> a
    F:net.minecraft.world.level.block.Block block -> b
    F:net.minecraft.core.BlockPosition neighborPos -> c
    M:boolean runNext(net.minecraft.world.level.World) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.core.BlockPosition pos() -> a
    M:net.minecraft.world.level.block.Block block() -> b
    M:net.minecraft.core.BlockPosition neighborPos() -> c
net.minecraft.world.level.redstone.InstantNeighborUpdater -> dqa -> net.minecraft.world.level.redstone.InstantNeighborUpdater
    F:net.minecraft.world.level.World level -> b
    M:void shapeUpdate(net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,int,int) -> a
    M:void neighborChanged(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition) -> a
    M:void neighborChanged(net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
net.minecraft.world.level.redstone.NeighborUpdater -> dqb -> net.minecraft.world.level.redstone.NeighborUpdater
    M:void updateNeighborsAtExceptFromFacing(net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.EnumDirection) -> a
    M:void executeShapeUpdate(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.EnumDirection,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.core.BlockPosition,int,int) -> a
    M:void executeUpdate(net.minecraft.world.level.World,net.minecraft.world.level.block.state.IBlockData,net.minecraft.core.BlockPosition,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPosition,boolean) -> a
net.minecraft.world.level.redstone.Redstone -> dqc -> net.minecraft.world.level.redstone.Redstone
    F:int SIGNAL_MIN -> a
    F:int SIGNAL_MAX -> b
    F:int SIGNAL_NONE -> c
net.minecraft.world.level.saveddata.SavedData -> dqe -> net.minecraft.world.level.saveddata.PersistentBase
    F:org.slf4j.Logger LOGGER -> a
    F:boolean dirty -> b
    M:void setDirty() -> b
    M:void setDirty(boolean) -> a
    M:boolean isDirty() -> c
    M:void save(java.io.File) -> a
net.minecraft.world.level.saveddata.maps.MapBanner -> dqf -> net.minecraft.world.level.saveddata.maps.MapIconBanner
    F:net.minecraft.core.BlockPosition pos -> a
    F:net.minecraft.world.item.EnumColor color -> b
    F:net.minecraft.network.chat.IChatBaseComponent name -> c
    M:net.minecraft.world.level.saveddata.maps.MapIconBanner load(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.level.saveddata.maps.MapIconBanner fromWorld(net.minecraft.world.level.IBlockAccess,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.BlockPosition getPos() -> a
    M:net.minecraft.world.item.EnumColor getColor() -> b
    M:net.minecraft.world.level.saveddata.maps.MapIcon$Type getDecoration() -> c
    M:net.minecraft.network.chat.IChatBaseComponent getName() -> d
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.nbt.NBTTagCompound save() -> e
    M:java.lang.String getId() -> f
net.minecraft.world.level.saveddata.maps.MapDecoration -> dqg -> net.minecraft.world.level.saveddata.maps.MapIcon
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type type -> a
    F:byte x -> b
    F:byte y -> c
    F:byte rot -> d
    F:net.minecraft.network.chat.IChatBaseComponent name -> e
    M:byte getImage() -> a
    M:net.minecraft.world.level.saveddata.maps.MapIcon$Type getType() -> b
    M:byte getX() -> c
    M:byte getY() -> d
    M:byte getRot() -> e
    M:boolean renderOnFrame() -> f
    M:net.minecraft.network.chat.IChatBaseComponent getName() -> g
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.world.level.saveddata.maps.MapDecoration$Type -> dqg$a -> net.minecraft.world.level.saveddata.maps.MapIcon$Type
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type PLAYER -> a
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type FRAME -> b
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type RED_MARKER -> c
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type BLUE_MARKER -> d
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type TARGET_X -> e
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type TARGET_POINT -> f
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type PLAYER_OFF_MAP -> g
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type PLAYER_OFF_LIMITS -> h
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type MANSION -> i
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type MONUMENT -> j
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type BANNER_WHITE -> k
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type BANNER_ORANGE -> l
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type BANNER_MAGENTA -> m
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type BANNER_LIGHT_BLUE -> n
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type BANNER_YELLOW -> o
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type BANNER_LIME -> p
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type BANNER_PINK -> q
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type BANNER_GRAY -> r
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type BANNER_LIGHT_GRAY -> s
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type BANNER_CYAN -> t
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type BANNER_PURPLE -> u
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type BANNER_BLUE -> v
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type BANNER_BROWN -> w
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type BANNER_GREEN -> x
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type BANNER_RED -> y
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type BANNER_BLACK -> z
    M:byte getIcon() -> a
    M:boolean isRenderedOnFrame() -> b
    M:boolean hasMapColor() -> c
    M:int getMapColor() -> d
    M:net.minecraft.world.level.saveddata.maps.MapIcon$Type byIcon(byte) -> a
    M:boolean shouldTrackCount() -> e
net.minecraft.world.level.saveddata.maps.MapFrame -> dqh -> net.minecraft.world.level.saveddata.maps.WorldMapFrame
    F:net.minecraft.core.BlockPosition pos -> a
    F:int rotation -> b
    F:int entityId -> c
    M:net.minecraft.world.level.saveddata.maps.WorldMapFrame load(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagCompound save() -> a
    M:net.minecraft.core.BlockPosition getPos() -> b
    M:int getRotation() -> c
    M:int getEntityId() -> d
    M:java.lang.String getId() -> e
    M:java.lang.String frameId(net.minecraft.core.BlockPosition) -> a
net.minecraft.world.level.saveddata.maps.MapIndex -> dqi -> net.minecraft.world.level.saveddata.maps.PersistentIdCounts
    F:java.lang.String FILE_NAME -> a
    F:it.unimi.dsi.fastutil.objects.Object2IntMap usedAuxIds -> b
    M:net.minecraft.world.level.saveddata.maps.PersistentIdCounts load(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.nbt.NBTTagCompound save(net.minecraft.nbt.NBTTagCompound) -> a
    M:int getFreeAuxValueForMap() -> a
net.minecraft.world.level.saveddata.maps.MapItemSavedData -> dqj -> net.minecraft.world.level.saveddata.maps.WorldMap
    F:org.slf4j.Logger LOGGER -> i
    F:int MAP_SIZE -> j
    F:int HALF_MAP_SIZE -> k
    F:int MAX_SCALE -> a
    F:int TRACKED_DECORATION_LIMIT -> b
    F:int x -> c
    F:int z -> d
    F:net.minecraft.resources.ResourceKey dimension -> e
    F:boolean trackingPosition -> l
    F:boolean unlimitedTracking -> m
    F:byte scale -> f
    F:boolean locked -> h
    F:java.util.List carriedBy -> n
    F:java.util.Map carriedByPlayers -> o
    F:java.util.Map bannerMarkers -> p
    F:java.util.Map decorations -> q
    F:java.util.Map frameMarkers -> r
    F:int trackedDecorationCount -> s
    M:net.minecraft.world.level.saveddata.maps.WorldMap createFresh(double,double,byte,boolean,boolean,net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.world.level.saveddata.maps.WorldMap createForClient(byte,boolean,net.minecraft.resources.ResourceKey) -> a
    M:net.minecraft.world.level.saveddata.maps.WorldMap load(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.nbt.NBTTagCompound save(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.level.saveddata.maps.WorldMap locked() -> a
    M:net.minecraft.world.level.saveddata.maps.WorldMap scaled(int) -> a
    M:void tickCarriedBy(net.minecraft.world.entity.player.EntityHuman,net.minecraft.world.item.ItemStack) -> a
    M:void removeDecoration(java.lang.String) -> a
    M:void addTargetDecoration(net.minecraft.world.item.ItemStack,net.minecraft.core.BlockPosition,java.lang.String,net.minecraft.world.level.saveddata.maps.MapIcon$Type) -> a
    M:void addDecoration(net.minecraft.world.level.saveddata.maps.MapIcon$Type,net.minecraft.world.level.GeneratorAccess,java.lang.String,double,double,double,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:net.minecraft.network.protocol.Packet getUpdatePacket(int,net.minecraft.world.entity.player.EntityHuman) -> a
    M:void setColorsDirty(int,int) -> a
    M:void setDecorationsDirty() -> g
    M:net.minecraft.world.level.saveddata.maps.WorldMap$WorldMapHumanTracker getHoldingPlayer(net.minecraft.world.entity.player.EntityHuman) -> a
    M:boolean toggleBanner(net.minecraft.world.level.GeneratorAccess,net.minecraft.core.BlockPosition) -> a
    M:void checkBanners(net.minecraft.world.level.IBlockAccess,int,int) -> a
    M:java.util.Collection getBanners() -> d
    M:void removedFromFrame(net.minecraft.core.BlockPosition,int) -> a
    M:boolean updateColor(int,int,byte) -> a
    M:void setColor(int,int,byte) -> b
    M:boolean isExplorationMap() -> e
    M:void addClientSideDecorations(java.util.List) -> a
    M:java.lang.Iterable getDecorations() -> f
    M:boolean isTrackedCountOverLimit(int) -> b
net.minecraft.world.level.saveddata.maps.MapItemSavedData$HoldingPlayer -> dqj$a -> net.minecraft.world.level.saveddata.maps.WorldMap$WorldMapHumanTracker
    F:net.minecraft.world.entity.player.EntityHuman player -> a
    F:boolean dirtyData -> d
    F:int minDirtyX -> e
    F:int minDirtyY -> f
    F:int maxDirtyX -> g
    F:int maxDirtyY -> h
    F:boolean dirtyDecorations -> i
    F:int tick -> j
    F:int step -> b
    M:net.minecraft.world.level.saveddata.maps.MapItemSavedData$MapPatch createPatch() -> a
    M:net.minecraft.network.protocol.Packet nextUpdatePacket(int) -> a
    M:void markColorsDirty(int,int) -> a
    M:void markDecorationsDirty() -> b
net.minecraft.world.level.saveddata.maps.MapItemSavedData$MapPatch -> dqj$b -> net.minecraft.world.level.saveddata.maps.WorldMap$b
    F:int startX -> a
    F:int startY -> b
    F:int width -> c
    F:int height -> d
    M:void applyToMap(net.minecraft.world.level.saveddata.maps.WorldMap) -> a
net.minecraft.world.level.storage.CommandStorage -> dqm -> net.minecraft.world.level.storage.PersistentCommandStorage
    F:java.lang.String ID_PREFIX -> a
    F:java.util.Map namespaces -> b
    F:net.minecraft.world.level.storage.WorldPersistentData storage -> c
    M:net.minecraft.world.level.storage.CommandStorage$Container newStorage(java.lang.String) -> a
    M:net.minecraft.nbt.NBTTagCompound get(net.minecraft.resources.MinecraftKey) -> a
    M:void set(net.minecraft.resources.MinecraftKey,net.minecraft.nbt.NBTTagCompound) -> a
    M:java.util.stream.Stream keys() -> a
    M:java.lang.String createId(java.lang.String) -> b
net.minecraft.world.level.storage.CommandStorage$Container -> dqm$a -> net.minecraft.world.level.storage.PersistentCommandStorage$a
    F:java.lang.String TAG_CONTENTS -> a
    F:java.util.Map storage -> b
    M:net.minecraft.world.level.storage.CommandStorage$Container load(net.minecraft.nbt.NBTTagCompound) -> b
    M:net.minecraft.nbt.NBTTagCompound save(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagCompound get(java.lang.String) -> a
    M:void put(java.lang.String,net.minecraft.nbt.NBTTagCompound) -> a
    M:java.util.stream.Stream getKeys(java.lang.String) -> b
net.minecraft.world.level.storage.DataVersion -> dqn -> net.minecraft.world.level.storage.DataVersion
    F:int version -> b
    F:java.lang.String series -> c
    F:java.lang.String MAIN_SERIES -> a
    M:boolean isSideSeries() -> a
    M:java.lang.String getSeries() -> b
    M:int getVersion() -> c
    M:boolean isCompatible(net.minecraft.world.level.storage.DataVersion) -> a
net.minecraft.world.level.storage.DerivedLevelData -> dqo -> net.minecraft.world.level.storage.SecondaryWorldData
    F:net.minecraft.world.level.storage.SaveData worldData -> a
    F:net.minecraft.world.level.storage.IWorldDataServer wrapped -> b
    M:int getXSpawn() -> a
    M:int getYSpawn() -> b
    M:int getZSpawn() -> c
    M:float getSpawnAngle() -> d
    M:long getGameTime() -> e
    M:long getDayTime() -> f
    M:java.lang.String getLevelName() -> g
    M:int getClearWeatherTime() -> h
    M:void setClearWeatherTime(int) -> a
    M:boolean isThundering() -> i
    M:int getThunderTime() -> j
    M:boolean isRaining() -> k
    M:int getRainTime() -> l
    M:net.minecraft.world.level.EnumGamemode getGameType() -> m
    M:void setXSpawn(int) -> b
    M:void setYSpawn(int) -> c
    M:void setZSpawn(int) -> d
    M:void setSpawnAngle(float) -> a
    M:void setGameTime(long) -> a
    M:void setDayTime(long) -> b
    M:void setSpawn(net.minecraft.core.BlockPosition,float) -> a
    M:void setThundering(boolean) -> a
    M:void setThunderTime(int) -> e
    M:void setRaining(boolean) -> b
    M:void setRainTime(int) -> f
    M:void setGameType(net.minecraft.world.level.EnumGamemode) -> a
    M:boolean isHardcore() -> n
    M:boolean getAllowCommands() -> o
    M:boolean isInitialized() -> p
    M:void setInitialized(boolean) -> c
    M:net.minecraft.world.level.GameRules getGameRules() -> q
    M:net.minecraft.world.level.border.WorldBorder$Settings getWorldBorder() -> r
    M:void setWorldBorder(net.minecraft.world.level.border.WorldBorder$Settings) -> a
    M:net.minecraft.world.EnumDifficulty getDifficulty() -> s
    M:boolean isDifficultyLocked() -> t
    M:net.minecraft.world.level.timers.CustomFunctionCallbackTimerQueue getScheduledEvents() -> u
    M:int getWanderingTraderSpawnDelay() -> v
    M:void setWanderingTraderSpawnDelay(int) -> g
    M:int getWanderingTraderSpawnChance() -> w
    M:void setWanderingTraderSpawnChance(int) -> h
    M:java.util.UUID getWanderingTraderId() -> x
    M:void setWanderingTraderId(java.util.UUID) -> a
    M:void fillCrashReportCategory(net.minecraft.CrashReportSystemDetails,net.minecraft.world.level.LevelHeightAccessor) -> a
net.minecraft.world.level.storage.DimensionDataStorage -> dqp -> net.minecraft.world.level.storage.WorldPersistentData
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.Map cache -> b
    F:com.mojang.datafixers.DataFixer fixerUpper -> c
    F:java.io.File dataFolder -> d
    M:java.io.File getDataFile(java.lang.String) -> a
    M:net.minecraft.world.level.saveddata.PersistentBase computeIfAbsent(java.util.function.Function,java.util.function.Supplier,java.lang.String) -> a
    M:net.minecraft.world.level.saveddata.PersistentBase get(java.util.function.Function,java.lang.String) -> a
    M:net.minecraft.world.level.saveddata.PersistentBase readSavedData(java.util.function.Function,java.lang.String) -> b
    M:void set(java.lang.String,net.minecraft.world.level.saveddata.PersistentBase) -> a
    M:net.minecraft.nbt.NBTTagCompound readTagFromDisk(java.lang.String,int) -> a
    M:boolean isGzip(java.io.PushbackInputStream) -> a
    M:void save() -> a
net.minecraft.world.level.storage.LevelData -> dqq -> net.minecraft.world.level.storage.WorldData
    M:void fillCrashReportCategory(net.minecraft.CrashReportSystemDetails,net.minecraft.world.level.LevelHeightAccessor) -> a
net.minecraft.world.level.storage.LevelResource -> dqr -> net.minecraft.world.level.storage.SavedFile
    F:net.minecraft.world.level.storage.SavedFile PLAYER_ADVANCEMENTS_DIR -> a
    F:net.minecraft.world.level.storage.SavedFile PLAYER_STATS_DIR -> b
    F:net.minecraft.world.level.storage.SavedFile PLAYER_DATA_DIR -> c
    F:net.minecraft.world.level.storage.SavedFile PLAYER_OLD_DATA_DIR -> d
    F:net.minecraft.world.level.storage.SavedFile LEVEL_DATA_FILE -> e
    F:net.minecraft.world.level.storage.SavedFile OLD_LEVEL_DATA_FILE -> f
    F:net.minecraft.world.level.storage.SavedFile ICON_FILE -> g
    F:net.minecraft.world.level.storage.SavedFile LOCK_FILE -> h
    F:net.minecraft.world.level.storage.SavedFile GENERATED_DIR -> i
    F:net.minecraft.world.level.storage.SavedFile DATAPACK_DIR -> j
    F:net.minecraft.world.level.storage.SavedFile MAP_RESOURCE_FILE -> k
    F:net.minecraft.world.level.storage.SavedFile ROOT -> l
    F:java.lang.String id -> m
    M:java.lang.String getId() -> a
net.minecraft.world.level.storage.LevelStorageException -> dqs -> net.minecraft.world.level.storage.LevelStorageException
    F:net.minecraft.network.chat.IChatBaseComponent messageComponent -> a
    M:net.minecraft.network.chat.IChatBaseComponent getMessageComponent() -> a
net.minecraft.world.level.storage.LevelStorageSource -> dqt -> net.minecraft.world.level.storage.Convertable
    F:org.slf4j.Logger LOGGER -> a
    F:java.time.format.DateTimeFormatter FORMATTER -> b
    F:com.google.common.collect.ImmutableList OLD_SETTINGS_KEYS -> c
    F:java.lang.String TAG_DATA -> d
    F:java.nio.file.Path baseDir -> e
    F:java.nio.file.Path backupDir -> f
    F:com.mojang.datafixers.DataFixer fixerUpper -> g
    M:net.minecraft.world.level.storage.Convertable createDefault(java.nio.file.Path) -> a
    M:com.mojang.datafixers.util.Pair readWorldGenSettings(com.mojang.serialization.Dynamic,com.mojang.datafixers.DataFixer,int) -> a
    M:net.minecraft.world.level.DataPackConfiguration readDataPackConfig(com.mojang.serialization.Dynamic) -> a
    M:java.lang.String getName() -> a
    M:net.minecraft.world.level.storage.LevelStorageSource$LevelCandidates findLevelCandidates() -> b
    M:java.util.concurrent.CompletableFuture loadLevelSummaries(net.minecraft.world.level.storage.LevelStorageSource$LevelCandidates) -> a
    M:int getStorageVersion() -> e
    M:java.lang.Object readLevelData(net.minecraft.world.level.storage.LevelStorageSource$LevelDirectory,java.util.function.BiFunction) -> a
    M:net.minecraft.world.level.DataPackConfiguration getDataPacks(java.nio.file.Path,com.mojang.datafixers.DataFixer) -> a
    M:java.util.function.BiFunction getLevelData(com.mojang.serialization.DynamicOps,net.minecraft.world.level.DataPackConfiguration,com.mojang.serialization.Lifecycle) -> a
    M:java.util.function.BiFunction levelSummaryReader(net.minecraft.world.level.storage.LevelStorageSource$LevelDirectory,boolean) -> a
    M:net.minecraft.nbt.NBTBase readLightweightData(java.nio.file.Path) -> b
    M:boolean isNewLevelIdAcceptable(java.lang.String) -> a
    M:boolean levelExists(java.lang.String) -> b
    M:java.nio.file.Path getBaseDir() -> c
    M:java.nio.file.Path getBackupPath() -> d
    M:net.minecraft.world.level.storage.Convertable$ConversionSession createAccess(java.lang.String) -> c
net.minecraft.world.level.storage.LevelStorageSource$LevelCandidates -> dqt$a -> net.minecraft.world.level.storage.Convertable$a
    F:java.util.List levels -> a
    M:boolean isEmpty() -> a
    M:java.util.Iterator iterator() -> iterator
    M:boolean equals(java.lang.Object) -> equals
    M:java.util.List levels() -> b
net.minecraft.world.level.storage.LevelStorageSource$LevelDirectory -> dqt$b -> net.minecraft.world.level.storage.Convertable$b
    F:java.nio.file.Path path -> a
    M:java.lang.String directoryName() -> a
    M:java.nio.file.Path dataFile() -> b
    M:java.nio.file.Path oldDataFile() -> c
    M:java.nio.file.Path corruptedDataFile(java.time.LocalDateTime) -> a
    M:java.nio.file.Path iconFile() -> d
    M:java.nio.file.Path lockFile() -> e
    M:java.nio.file.Path resourcePath(net.minecraft.world.level.storage.SavedFile) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.nio.file.Path path() -> f
net.minecraft.world.level.storage.LevelStorageSource$LevelStorageAccess -> dqt$c -> net.minecraft.world.level.storage.Convertable$ConversionSession
    F:net.minecraft.util.SessionLock lock -> b
    F:net.minecraft.world.level.storage.LevelStorageSource$LevelDirectory levelDirectory -> c
    F:java.lang.String levelId -> d
    F:java.util.Map resources -> e
    M:java.lang.String getLevelId() -> a
    M:java.nio.file.Path getLevelPath(net.minecraft.world.level.storage.SavedFile) -> a
    M:java.nio.file.Path getDimensionPath(net.minecraft.resources.ResourceKey) -> a
    M:void checkLock() -> h
    M:net.minecraft.world.level.storage.WorldNBTStorage createPlayerStorage() -> b
    M:net.minecraft.world.level.storage.WorldInfo getSummary() -> c
    M:net.minecraft.world.level.storage.SaveData getDataTag(com.mojang.serialization.DynamicOps,net.minecraft.world.level.DataPackConfiguration,com.mojang.serialization.Lifecycle) -> a
    M:net.minecraft.world.level.DataPackConfiguration getDataPacks() -> d
    M:void saveDataTag(net.minecraft.core.IRegistryCustom,net.minecraft.world.level.storage.SaveData) -> a
    M:void saveDataTag(net.minecraft.core.IRegistryCustom,net.minecraft.world.level.storage.SaveData,net.minecraft.nbt.NBTTagCompound) -> a
    M:java.util.Optional getIconFile() -> e
    M:void deleteLevel() -> f
    M:void renameLevel(java.lang.String) -> a
    M:long makeWorldBackup() -> g
    M:void close() -> close
    M:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes) -> a
    M:java.nio.file.FileVisitResult postVisitDirectory(java.nio.file.Path,java.io.IOException) -> a
    M:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes) -> a
net.minecraft.world.level.storage.LevelSummary -> dqu -> net.minecraft.world.level.storage.WorldInfo
    F:net.minecraft.world.level.WorldSettings settings -> a
    F:net.minecraft.world.level.storage.LevelVersion levelVersion -> b
    F:java.lang.String levelId -> c
    F:boolean requiresManualConversion -> d
    F:boolean locked -> e
    F:java.nio.file.Path icon -> f
    F:net.minecraft.network.chat.IChatBaseComponent info -> g
    M:java.lang.String getLevelId() -> a
    M:java.lang.String getLevelName() -> b
    M:java.nio.file.Path getIcon() -> c
    M:boolean requiresManualConversion() -> d
    M:long getLastPlayed() -> e
    M:int compareTo(net.minecraft.world.level.storage.WorldInfo) -> a
    M:net.minecraft.world.level.WorldSettings getSettings() -> f
    M:net.minecraft.world.level.EnumGamemode getGameMode() -> g
    M:boolean isHardcore() -> h
    M:boolean hasCheats() -> i
    M:net.minecraft.network.chat.IChatMutableComponent getWorldVersionName() -> j
    M:net.minecraft.world.level.storage.LevelVersion levelVersion() -> k
    M:boolean markVersionInList() -> l
    M:boolean askToOpenWorld() -> m
    M:net.minecraft.world.level.storage.LevelSummary$BackupStatus backupStatus() -> n
    M:boolean isLocked() -> o
    M:boolean isDisabled() -> p
    M:boolean isCompatible() -> q
    M:net.minecraft.network.chat.IChatBaseComponent getInfo() -> r
    M:net.minecraft.network.chat.IChatBaseComponent createInfo() -> s
net.minecraft.world.level.storage.LevelSummary$BackupStatus -> dqu$a -> net.minecraft.world.level.storage.WorldInfo$a
    F:net.minecraft.world.level.storage.LevelSummary$BackupStatus NONE -> a
    F:net.minecraft.world.level.storage.LevelSummary$BackupStatus DOWNGRADE -> b
    F:net.minecraft.world.level.storage.LevelSummary$BackupStatus UPGRADE_TO_SNAPSHOT -> c
    F:boolean shouldBackup -> d
    F:boolean severe -> e
    F:java.lang.String translationKey -> f
    M:boolean shouldBackup() -> a
    M:boolean isSevere() -> b
    M:java.lang.String getTranslationKey() -> c
net.minecraft.world.level.storage.LevelVersion -> dqv -> net.minecraft.world.level.storage.LevelVersion
    F:int levelDataVersion -> a
    F:long lastPlayed -> b
    F:java.lang.String minecraftVersionName -> c
    F:net.minecraft.world.level.storage.DataVersion minecraftVersion -> d
    F:boolean snapshot -> e
    M:net.minecraft.world.level.storage.LevelVersion parse(com.mojang.serialization.Dynamic) -> a
    M:int levelDataVersion() -> a
    M:long lastPlayed() -> b
    M:java.lang.String minecraftVersionName() -> c
    M:net.minecraft.world.level.storage.DataVersion minecraftVersion() -> d
    M:boolean snapshot() -> e
net.minecraft.world.level.storage.PlayerDataStorage -> dqw -> net.minecraft.world.level.storage.WorldNBTStorage
    F:org.slf4j.Logger LOGGER -> b
    F:java.io.File playerDir -> c
    F:com.mojang.datafixers.DataFixer fixerUpper -> a
    M:void save(net.minecraft.world.entity.player.EntityHuman) -> a
    M:net.minecraft.nbt.NBTTagCompound load(net.minecraft.world.entity.player.EntityHuman) -> b
net.minecraft.world.level.storage.PrimaryLevelData -> dqx -> net.minecraft.world.level.storage.WorldDataServer
    F:org.slf4j.Logger LOGGER -> e
    F:java.lang.String PLAYER -> a
    F:java.lang.String WORLD_GEN_SETTINGS -> b
    F:net.minecraft.world.level.WorldSettings settings -> f
    F:net.minecraft.world.level.levelgen.GeneratorSettings worldGenSettings -> g
    F:com.mojang.serialization.Lifecycle worldGenSettingsLifecycle -> h
    F:int xSpawn -> i
    F:int ySpawn -> j
    F:int zSpawn -> k
    F:float spawnAngle -> l
    F:long gameTime -> m
    F:long dayTime -> n
    F:com.mojang.datafixers.DataFixer fixerUpper -> o
    F:int playerDataVersion -> p
    F:boolean upgradedPlayerTag -> q
    F:net.minecraft.nbt.NBTTagCompound loadedPlayerTag -> r
    F:int version -> s
    F:int clearWeatherTime -> t
    F:boolean raining -> u
    F:int rainTime -> v
    F:boolean thundering -> w
    F:int thunderTime -> x
    F:boolean initialized -> y
    F:boolean difficultyLocked -> z
    M:net.minecraft.world.level.storage.WorldDataServer parse(com.mojang.serialization.Dynamic,com.mojang.datafixers.DataFixer,int,net.minecraft.nbt.NBTTagCompound,net.minecraft.world.level.WorldSettings,net.minecraft.world.level.storage.LevelVersion,net.minecraft.world.level.levelgen.GeneratorSettings,com.mojang.serialization.Lifecycle) -> a
    M:net.minecraft.nbt.NBTTagCompound createTag(net.minecraft.core.IRegistryCustom,net.minecraft.nbt.NBTTagCompound) -> a
    M:void setTagData(net.minecraft.core.IRegistryCustom,net.minecraft.nbt.NBTTagCompound,net.minecraft.nbt.NBTTagCompound) -> a
    M:int getXSpawn() -> a
    M:int getYSpawn() -> b
    M:int getZSpawn() -> c
    M:float getSpawnAngle() -> d
    M:long getGameTime() -> e
    M:long getDayTime() -> f
    M:net.minecraft.nbt.NBTTagCompound getLoadedPlayerTag() -> y
    M:void setXSpawn(int) -> b
    M:void setYSpawn(int) -> c
    M:void setZSpawn(int) -> d
    M:void setSpawnAngle(float) -> a
    M:void setGameTime(long) -> a
    M:void setDayTime(long) -> b
    M:void setSpawn(net.minecraft.core.BlockPosition,float) -> a
    M:java.lang.String getLevelName() -> g
    M:int getVersion() -> z
    M:int getClearWeatherTime() -> h
    M:void setClearWeatherTime(int) -> a
    M:boolean isThundering() -> i
    M:void setThundering(boolean) -> a
    M:int getThunderTime() -> j
    M:void setThunderTime(int) -> e
    M:boolean isRaining() -> k
    M:void setRaining(boolean) -> b
    M:int getRainTime() -> l
    M:void setRainTime(int) -> f
    M:net.minecraft.world.level.EnumGamemode getGameType() -> m
    M:void setGameType(net.minecraft.world.level.EnumGamemode) -> a
    M:boolean isHardcore() -> n
    M:boolean getAllowCommands() -> o
    M:boolean isInitialized() -> p
    M:void setInitialized(boolean) -> c
    M:net.minecraft.world.level.GameRules getGameRules() -> q
    M:net.minecraft.world.level.border.WorldBorder$Settings getWorldBorder() -> r
    M:void setWorldBorder(net.minecraft.world.level.border.WorldBorder$Settings) -> a
    M:net.minecraft.world.EnumDifficulty getDifficulty() -> s
    M:void setDifficulty(net.minecraft.world.EnumDifficulty) -> a
    M:boolean isDifficultyLocked() -> t
    M:void setDifficultyLocked(boolean) -> d
    M:net.minecraft.world.level.timers.CustomFunctionCallbackTimerQueue getScheduledEvents() -> u
    M:void fillCrashReportCategory(net.minecraft.CrashReportSystemDetails,net.minecraft.world.level.LevelHeightAccessor) -> a
    M:void setEndDragonFightData(net.minecraft.nbt.NBTTagCompound) -> a
    M:void setDataPackConfig(net.minecraft.world.level.DataPackConfiguration) -> a
    M:void setCustomBossEvents(net.minecraft.nbt.NBTTagCompound) -> b
    M:int getWanderingTraderSpawnDelay() -> v
    M:void setWanderingTraderSpawnDelay(int) -> g
    M:int getWanderingTraderSpawnChance() -> w
    M:void setWanderingTraderSpawnChance(int) -> h
    M:java.util.UUID getWanderingTraderId() -> x
    M:void setWanderingTraderId(java.util.UUID) -> a
    M:void setModdedInfo(java.lang.String,boolean) -> a
net.minecraft.world.level.storage.ServerLevelData -> dqy -> net.minecraft.world.level.storage.IWorldDataServer
    M:void fillCrashReportCategory(net.minecraft.CrashReportSystemDetails,net.minecraft.world.level.LevelHeightAccessor) -> a
net.minecraft.world.level.storage.WorldData -> dqz -> net.minecraft.world.level.storage.SaveData
    F:int ANVIL_VERSION_ID -> c
    F:int MCREGION_VERSION_ID -> d
    M:void fillCrashReportCategory(net.minecraft.CrashReportSystemDetails) -> a
    M:java.lang.String getStorageVersionName(int) -> i
net.minecraft.world.level.storage.WritableLevelData -> dra -> net.minecraft.world.level.storage.WorldDataMutable
    M:void setSpawn(net.minecraft.core.BlockPosition,float) -> a
net.minecraft.world.level.storage.loot.BuiltInLootTables -> drb -> net.minecraft.world.level.storage.loot.LootTables
    F:net.minecraft.resources.MinecraftKey EMPTY -> a
    F:net.minecraft.resources.MinecraftKey SPAWN_BONUS_CHEST -> b
    F:net.minecraft.resources.MinecraftKey END_CITY_TREASURE -> c
    F:net.minecraft.resources.MinecraftKey SIMPLE_DUNGEON -> d
    F:net.minecraft.resources.MinecraftKey VILLAGE_WEAPONSMITH -> e
    F:net.minecraft.resources.MinecraftKey VILLAGE_TOOLSMITH -> f
    F:net.minecraft.resources.MinecraftKey VILLAGE_ARMORER -> g
    F:net.minecraft.resources.MinecraftKey VILLAGE_CARTOGRAPHER -> h
    F:net.minecraft.resources.MinecraftKey VILLAGE_MASON -> i
    F:net.minecraft.resources.MinecraftKey VILLAGE_SHEPHERD -> j
    F:net.minecraft.resources.MinecraftKey VILLAGE_BUTCHER -> k
    F:net.minecraft.resources.MinecraftKey VILLAGE_FLETCHER -> l
    F:net.minecraft.resources.MinecraftKey VILLAGE_FISHER -> m
    F:net.minecraft.resources.MinecraftKey VILLAGE_TANNERY -> n
    F:net.minecraft.resources.MinecraftKey VILLAGE_TEMPLE -> o
    F:net.minecraft.resources.MinecraftKey VILLAGE_DESERT_HOUSE -> p
    F:net.minecraft.resources.MinecraftKey VILLAGE_PLAINS_HOUSE -> q
    F:net.minecraft.resources.MinecraftKey VILLAGE_TAIGA_HOUSE -> r
    F:net.minecraft.resources.MinecraftKey VILLAGE_SNOWY_HOUSE -> s
    F:net.minecraft.resources.MinecraftKey VILLAGE_SAVANNA_HOUSE -> t
    F:net.minecraft.resources.MinecraftKey ABANDONED_MINESHAFT -> u
    F:net.minecraft.resources.MinecraftKey NETHER_BRIDGE -> v
    F:net.minecraft.resources.MinecraftKey STRONGHOLD_LIBRARY -> w
    F:net.minecraft.resources.MinecraftKey STRONGHOLD_CROSSING -> x
    F:net.minecraft.resources.MinecraftKey STRONGHOLD_CORRIDOR -> y
    F:net.minecraft.resources.MinecraftKey DESERT_PYRAMID -> z
    F:net.minecraft.resources.MinecraftKey SHEEP_LIGHT_GRAY -> aa
    F:net.minecraft.resources.MinecraftKey SHEEP_CYAN -> ab
    F:net.minecraft.resources.MinecraftKey SHEEP_PURPLE -> ac
    F:net.minecraft.resources.MinecraftKey SHEEP_BLUE -> ad
    F:net.minecraft.resources.MinecraftKey SHEEP_BROWN -> ae
    F:net.minecraft.resources.MinecraftKey SHEEP_GREEN -> af
    F:net.minecraft.resources.MinecraftKey SHEEP_RED -> ag
    F:net.minecraft.resources.MinecraftKey SHEEP_BLACK -> ah
    F:net.minecraft.resources.MinecraftKey FISHING -> ai
    F:net.minecraft.resources.MinecraftKey FISHING_JUNK -> aj
    F:net.minecraft.resources.MinecraftKey FISHING_TREASURE -> ak
    F:net.minecraft.resources.MinecraftKey FISHING_FISH -> al
    F:net.minecraft.resources.MinecraftKey CAT_MORNING_GIFT -> am
    F:net.minecraft.resources.MinecraftKey ARMORER_GIFT -> an
    F:net.minecraft.resources.MinecraftKey BUTCHER_GIFT -> ao
    F:net.minecraft.resources.MinecraftKey CARTOGRAPHER_GIFT -> ap
    F:net.minecraft.resources.MinecraftKey CLERIC_GIFT -> aq
    F:net.minecraft.resources.MinecraftKey FARMER_GIFT -> ar
    F:net.minecraft.resources.MinecraftKey FISHERMAN_GIFT -> as
    F:net.minecraft.resources.MinecraftKey FLETCHER_GIFT -> at
    F:net.minecraft.resources.MinecraftKey LEATHERWORKER_GIFT -> au
    F:net.minecraft.resources.MinecraftKey LIBRARIAN_GIFT -> av
    F:net.minecraft.resources.MinecraftKey MASON_GIFT -> aw
    F:net.minecraft.resources.MinecraftKey SHEPHERD_GIFT -> ax
    F:net.minecraft.resources.MinecraftKey TOOLSMITH_GIFT -> ay
    F:net.minecraft.resources.MinecraftKey WEAPONSMITH_GIFT -> az
    M:net.minecraft.resources.MinecraftKey register(java.lang.String) -> a
    M:net.minecraft.resources.MinecraftKey register(net.minecraft.resources.MinecraftKey) -> a
    M:java.util.Set all() -> a
net.minecraft.world.level.storage.loot.Deserializers -> drc -> net.minecraft.world.level.storage.loot.LootSerialization
    M:com.google.gson.GsonBuilder createConditionSerializer() -> a
    M:com.google.gson.GsonBuilder createFunctionSerializer() -> b
    M:com.google.gson.GsonBuilder createLootTableSerializer() -> c
net.minecraft.world.level.storage.loot.GsonAdapterFactory -> drd -> net.minecraft.world.level.storage.loot.JsonRegistry
    M:net.minecraft.world.level.storage.loot.GsonAdapterFactory$Builder builder(net.minecraft.core.IRegistry,java.lang.String,java.lang.String,java.util.function.Function) -> a
net.minecraft.world.level.storage.loot.GsonAdapterFactory$Builder -> drd$a -> net.minecraft.world.level.storage.loot.JsonRegistry$a
    F:net.minecraft.core.IRegistry registry -> a
    F:java.lang.String elementName -> b
    F:java.lang.String typeKey -> c
    F:java.util.function.Function typeGetter -> d
    F:com.mojang.datafixers.util.Pair inlineType -> e
    F:net.minecraft.world.level.storage.loot.LootSerializerType defaultType -> f
    M:net.minecraft.world.level.storage.loot.GsonAdapterFactory$Builder withInlineSerializer(net.minecraft.world.level.storage.loot.LootSerializerType,net.minecraft.world.level.storage.loot.GsonAdapterFactory$InlineSerializer) -> a
    M:net.minecraft.world.level.storage.loot.GsonAdapterFactory$Builder withDefaultType(net.minecraft.world.level.storage.loot.LootSerializerType) -> a
    M:java.lang.Object build() -> a
net.minecraft.world.level.storage.loot.GsonAdapterFactory$InlineSerializer -> drd$b -> net.minecraft.world.level.storage.loot.JsonRegistry$b
net.minecraft.world.level.storage.loot.GsonAdapterFactory$JsonAdapter -> drd$c -> net.minecraft.world.level.storage.loot.JsonRegistry$c
    F:net.minecraft.core.IRegistry registry -> a
    F:java.lang.String elementName -> b
    F:java.lang.String typeKey -> c
    F:java.util.function.Function typeGetter -> d
    F:net.minecraft.world.level.storage.loot.LootSerializerType defaultType -> e
    F:com.mojang.datafixers.util.Pair inlineType -> f
    M:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
    M:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
net.minecraft.world.level.storage.loot.IntRange -> dre -> net.minecraft.world.level.storage.loot.IntRange
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider min -> a
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider max -> b
    F:net.minecraft.world.level.storage.loot.IntRange$IntLimiter limiter -> c
    F:net.minecraft.world.level.storage.loot.IntRange$IntChecker predicate -> d
    M:java.util.Set getReferencedContextParams() -> a
    M:net.minecraft.world.level.storage.loot.IntRange exact(int) -> a
    M:net.minecraft.world.level.storage.loot.IntRange range(int,int) -> a
    M:net.minecraft.world.level.storage.loot.IntRange lowerBound(int) -> b
    M:net.minecraft.world.level.storage.loot.IntRange upperBound(int) -> c
    M:int clamp(net.minecraft.world.level.storage.loot.LootTableInfo,int) -> a
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo,int) -> b
net.minecraft.world.level.storage.loot.IntRange$IntChecker -> dre$a -> net.minecraft.world.level.storage.loot.IntRange$a
net.minecraft.world.level.storage.loot.IntRange$IntLimiter -> dre$b -> net.minecraft.world.level.storage.loot.IntRange$b
net.minecraft.world.level.storage.loot.IntRange$Serializer -> dre$c -> net.minecraft.world.level.storage.loot.IntRange$c
    M:net.minecraft.world.level.storage.loot.IntRange deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    M:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.IntRange,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    M:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    M:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.world.level.storage.loot.ItemModifierManager -> drf -> net.minecraft.world.level.storage.loot.ItemModifierManager
    F:org.slf4j.Logger LOGGER -> a
    F:com.google.gson.Gson GSON -> b
    F:net.minecraft.world.level.storage.loot.LootPredicateManager predicateManager -> c
    F:net.minecraft.world.level.storage.loot.LootTableRegistry lootTables -> d
    F:java.util.Map functions -> e
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunction get(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunction get(net.minecraft.resources.MinecraftKey,net.minecraft.world.level.storage.loot.functions.LootItemFunction) -> a
    M:void apply(java.util.Map,net.minecraft.server.packs.resources.IResourceManager,net.minecraft.util.profiling.GameProfilerFiller) -> a
    M:java.util.Set getKeys() -> a
    M:void apply(java.lang.Object,net.minecraft.server.packs.resources.IResourceManager,net.minecraft.util.profiling.GameProfilerFiller) -> a
net.minecraft.world.level.storage.loot.ItemModifierManager$FunctionSequence -> drf$a -> net.minecraft.world.level.storage.loot.ItemModifierManager$a
    F:java.util.function.BiFunction compositeFunction -> b
    M:net.minecraft.world.item.ItemStack apply(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:java.lang.Object apply(java.lang.Object,java.lang.Object) -> apply
net.minecraft.world.level.storage.loot.LootContext -> drg -> net.minecraft.world.level.storage.loot.LootTableInfo
    F:net.minecraft.util.RandomSource random -> a
    F:float luck -> b
    F:net.minecraft.server.level.WorldServer level -> c
    F:java.util.function.Function lootTables -> d
    F:java.util.Set visitedTables -> e
    F:java.util.function.Function conditions -> f
    F:java.util.Set visitedConditions -> g
    F:java.util.Map params -> h
    F:java.util.Map dynamicDrops -> i
    M:boolean hasParam(net.minecraft.world.level.storage.loot.parameters.LootContextParameter) -> a
    M:java.lang.Object getParam(net.minecraft.world.level.storage.loot.parameters.LootContextParameter) -> b
    M:void addDynamicDrops(net.minecraft.resources.MinecraftKey,java.util.function.Consumer) -> a
    M:java.lang.Object getParamOrNull(net.minecraft.world.level.storage.loot.parameters.LootContextParameter) -> c
    M:boolean addVisitedTable(net.minecraft.world.level.storage.loot.LootTable) -> a
    M:void removeVisitedTable(net.minecraft.world.level.storage.loot.LootTable) -> b
    M:boolean addVisitedCondition(net.minecraft.world.level.storage.loot.predicates.LootItemCondition) -> a
    M:void removeVisitedCondition(net.minecraft.world.level.storage.loot.predicates.LootItemCondition) -> b
    M:net.minecraft.world.level.storage.loot.LootTable getLootTable(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition getCondition(net.minecraft.resources.MinecraftKey) -> b
    M:net.minecraft.util.RandomSource getRandom() -> a
    M:float getLuck() -> b
    M:net.minecraft.server.level.WorldServer getLevel() -> c
net.minecraft.world.level.storage.loot.LootContext$Builder -> drg$a -> net.minecraft.world.level.storage.loot.LootTableInfo$Builder
    F:net.minecraft.server.level.WorldServer level -> a
    F:java.util.Map params -> b
    F:java.util.Map dynamicDrops -> c
    F:net.minecraft.util.RandomSource random -> d
    F:float luck -> e
    M:net.minecraft.world.level.storage.loot.LootTableInfo$Builder withRandom(net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.storage.loot.LootTableInfo$Builder withOptionalRandomSeed(long) -> a
    M:net.minecraft.world.level.storage.loot.LootTableInfo$Builder withOptionalRandomSeed(long,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.storage.loot.LootTableInfo$Builder withLuck(float) -> a
    M:net.minecraft.world.level.storage.loot.LootTableInfo$Builder withParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParameter,java.lang.Object) -> a
    M:net.minecraft.world.level.storage.loot.LootTableInfo$Builder withOptionalParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParameter,java.lang.Object) -> b
    M:net.minecraft.world.level.storage.loot.LootTableInfo$Builder withDynamicDrop(net.minecraft.resources.MinecraftKey,net.minecraft.world.level.storage.loot.LootContext$DynamicDrop) -> a
    M:net.minecraft.server.level.WorldServer getLevel() -> a
    M:java.lang.Object getParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParameter) -> a
    M:java.lang.Object getOptionalParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParameter) -> b
    M:net.minecraft.world.level.storage.loot.LootTableInfo create(net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet) -> a
net.minecraft.world.level.storage.loot.LootContext$DynamicDrop -> drg$b -> net.minecraft.world.level.storage.loot.LootTableInfo$b
net.minecraft.world.level.storage.loot.LootContext$EntityTarget -> drg$c -> net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget
    F:net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget THIS -> a
    F:net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget KILLER -> b
    F:net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget DIRECT_KILLER -> c
    F:net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget KILLER_PLAYER -> d
    F:java.lang.String name -> e
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameter param -> f
    M:net.minecraft.world.level.storage.loot.parameters.LootContextParameter getParam() -> a
    M:net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget getByName(java.lang.String) -> a
net.minecraft.world.level.storage.loot.LootContext$EntityTarget$Serializer -> drg$c$a -> net.minecraft.world.level.storage.loot.LootTableInfo$c$a
    M:void write(com.google.gson.stream.JsonWriter,net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget) -> a
    M:net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget read(com.google.gson.stream.JsonReader) -> a
    M:java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    M:void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
net.minecraft.world.level.storage.loot.LootContextUser -> drh -> net.minecraft.world.level.storage.loot.LootItemUser
    M:java.util.Set getReferencedContextParams() -> b
    M:void validate(net.minecraft.world.level.storage.loot.LootCollector) -> a
net.minecraft.world.level.storage.loot.LootPool -> dri -> net.minecraft.world.level.storage.loot.LootSelector
    F:java.util.function.Predicate compositeCondition -> c
    F:java.util.function.BiFunction compositeFunction -> e
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider rolls -> f
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider bonusRolls -> g
    M:void addRandomItem(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootTableInfo) -> b
    M:void addRandomItems(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:void validate(net.minecraft.world.level.storage.loot.LootCollector) -> a
    M:net.minecraft.world.level.storage.loot.LootPool$Builder lootPool() -> a
net.minecraft.world.level.storage.loot.LootPool$Builder -> dri$a -> net.minecraft.world.level.storage.loot.LootSelector$a
    F:java.util.List entries -> a
    F:java.util.List conditions -> b
    F:java.util.List functions -> c
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider rolls -> d
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider bonusRolls -> e
    M:net.minecraft.world.level.storage.loot.LootPool$Builder setRolls(net.minecraft.world.level.storage.loot.providers.number.NumberProvider) -> a
    M:net.minecraft.world.level.storage.loot.LootPool$Builder unwrap() -> a
    M:net.minecraft.world.level.storage.loot.LootPool$Builder setBonusRolls(net.minecraft.world.level.storage.loot.providers.number.NumberProvider) -> b
    M:net.minecraft.world.level.storage.loot.LootPool$Builder add(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> a
    M:net.minecraft.world.level.storage.loot.LootPool$Builder when(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> a
    M:net.minecraft.world.level.storage.loot.LootPool$Builder apply(net.minecraft.world.level.storage.loot.functions.LootItemFunction$Builder) -> a
    M:net.minecraft.world.level.storage.loot.LootSelector build() -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionUser unwrap() -> c
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionUser apply(net.minecraft.world.level.storage.loot.functions.LootItemFunction$Builder) -> b
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionUser unwrap() -> d
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionUser when(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> b
net.minecraft.world.level.storage.loot.LootPool$Serializer -> dri$b -> net.minecraft.world.level.storage.loot.LootSelector$b
    M:net.minecraft.world.level.storage.loot.LootSelector deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    M:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.LootSelector,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    M:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    M:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.world.level.storage.loot.LootTable -> drj -> net.minecraft.world.level.storage.loot.LootTable
    F:org.slf4j.Logger LOGGER -> c
    F:net.minecraft.world.level.storage.loot.LootTable EMPTY -> a
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet DEFAULT_PARAM_SET -> b
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet paramSet -> d
    F:java.util.function.BiFunction compositeFunction -> g
    M:java.util.function.Consumer createStackSplitter(java.util.function.Consumer) -> a
    M:void getRandomItemsRaw(net.minecraft.world.level.storage.loot.LootTableInfo,java.util.function.Consumer) -> a
    M:void getRandomItems(net.minecraft.world.level.storage.loot.LootTableInfo,java.util.function.Consumer) -> b
    M:it.unimi.dsi.fastutil.objects.ObjectArrayList getRandomItems(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet getParamSet() -> a
    M:void validate(net.minecraft.world.level.storage.loot.LootCollector) -> a
    M:void fill(net.minecraft.world.IInventory,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:void shuffleAndSplitItems(it.unimi.dsi.fastutil.objects.ObjectArrayList,int,net.minecraft.util.RandomSource) -> a
    M:java.util.List getAvailableSlots(net.minecraft.world.IInventory,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.storage.loot.LootTable$Builder lootTable() -> b
net.minecraft.world.level.storage.loot.LootTable$Builder -> drj$a -> net.minecraft.world.level.storage.loot.LootTable$a
    F:java.util.List pools -> a
    F:java.util.List functions -> b
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet paramSet -> c
    M:net.minecraft.world.level.storage.loot.LootTable$Builder withPool(net.minecraft.world.level.storage.loot.LootPool$Builder) -> a
    M:net.minecraft.world.level.storage.loot.LootTable$Builder setParamSet(net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet) -> a
    M:net.minecraft.world.level.storage.loot.LootTable$Builder apply(net.minecraft.world.level.storage.loot.functions.LootItemFunction$Builder) -> a
    M:net.minecraft.world.level.storage.loot.LootTable$Builder unwrap() -> a
    M:net.minecraft.world.level.storage.loot.LootTable build() -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionUser unwrap() -> c
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionUser apply(net.minecraft.world.level.storage.loot.functions.LootItemFunction$Builder) -> b
net.minecraft.world.level.storage.loot.LootTable$Serializer -> drj$b -> net.minecraft.world.level.storage.loot.LootTable$b
    M:net.minecraft.world.level.storage.loot.LootTable deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    M:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.LootTable,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    M:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    M:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.world.level.storage.loot.LootTables -> drk -> net.minecraft.world.level.storage.loot.LootTableRegistry
    F:org.slf4j.Logger LOGGER -> a
    F:com.google.gson.Gson GSON -> b
    F:java.util.Map tables -> c
    F:net.minecraft.world.level.storage.loot.LootPredicateManager predicateManager -> d
    M:net.minecraft.world.level.storage.loot.LootTable get(net.minecraft.resources.MinecraftKey) -> a
    M:void apply(java.util.Map,net.minecraft.server.packs.resources.IResourceManager,net.minecraft.util.profiling.GameProfilerFiller) -> a
    M:void validate(net.minecraft.world.level.storage.loot.LootCollector,net.minecraft.resources.MinecraftKey,net.minecraft.world.level.storage.loot.LootTable) -> a
    M:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.LootTable) -> a
    M:java.util.Set getIds() -> a
    M:void apply(java.lang.Object,net.minecraft.server.packs.resources.IResourceManager,net.minecraft.util.profiling.GameProfilerFiller) -> a
net.minecraft.world.level.storage.loot.PredicateManager -> drl -> net.minecraft.world.level.storage.loot.LootPredicateManager
    F:org.slf4j.Logger LOGGER -> a
    F:com.google.gson.Gson GSON -> b
    F:java.util.Map conditions -> c
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition get(net.minecraft.resources.MinecraftKey) -> a
    M:void apply(java.util.Map,net.minecraft.server.packs.resources.IResourceManager,net.minecraft.util.profiling.GameProfilerFiller) -> a
    M:java.util.Set getKeys() -> a
    M:void apply(java.lang.Object,net.minecraft.server.packs.resources.IResourceManager,net.minecraft.util.profiling.GameProfilerFiller) -> a
net.minecraft.world.level.storage.loot.PredicateManager$CompositePredicate -> drl$a -> net.minecraft.world.level.storage.loot.LootPredicateManager$a
    F:java.util.function.Predicate composedPredicate -> b
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:void validate(net.minecraft.world.level.storage.loot.LootCollector) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.Serializer -> drm -> net.minecraft.world.level.storage.loot.LootSerializer
net.minecraft.world.level.storage.loot.SerializerType -> drn -> net.minecraft.world.level.storage.loot.LootSerializerType
    F:net.minecraft.world.level.storage.loot.LootSerializer serializer -> a
    M:net.minecraft.world.level.storage.loot.LootSerializer getSerializer() -> a
net.minecraft.world.level.storage.loot.ValidationContext -> dro -> net.minecraft.world.level.storage.loot.LootCollector
    F:com.google.common.collect.Multimap problems -> a
    F:java.util.function.Supplier context -> b
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet params -> c
    F:java.util.function.Function conditionResolver -> d
    F:java.util.Set visitedConditions -> e
    F:java.util.function.Function tableResolver -> f
    F:java.util.Set visitedTables -> g
    F:java.lang.String contextCache -> h
    M:java.lang.String getContext() -> b
    M:void reportProblem(java.lang.String) -> a
    M:net.minecraft.world.level.storage.loot.LootCollector forChild(java.lang.String) -> b
    M:net.minecraft.world.level.storage.loot.LootCollector enterTable(java.lang.String,net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.world.level.storage.loot.LootCollector enterCondition(java.lang.String,net.minecraft.resources.MinecraftKey) -> b
    M:boolean hasVisitedTable(net.minecraft.resources.MinecraftKey) -> a
    M:boolean hasVisitedCondition(net.minecraft.resources.MinecraftKey) -> b
    M:com.google.common.collect.Multimap getProblems() -> a
    M:void validateUser(net.minecraft.world.level.storage.loot.LootItemUser) -> a
    M:net.minecraft.world.level.storage.loot.LootTable resolveLootTable(net.minecraft.resources.MinecraftKey) -> c
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition resolveCondition(net.minecraft.resources.MinecraftKey) -> d
    M:net.minecraft.world.level.storage.loot.LootCollector setParams(net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet) -> a
net.minecraft.world.level.storage.loot.entries.AlternativesEntry -> drp -> net.minecraft.world.level.storage.loot.entries.LootEntryAlternatives
    M:net.minecraft.world.level.storage.loot.entries.LootEntryType getType() -> a
    M:net.minecraft.world.level.storage.loot.entries.LootEntryChildren compose(net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer[]) -> a
    M:void validate(net.minecraft.world.level.storage.loot.LootCollector) -> a
    M:net.minecraft.world.level.storage.loot.entries.AlternativesEntry$Builder alternatives(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder[]) -> a
    M:net.minecraft.world.level.storage.loot.entries.AlternativesEntry$Builder alternatives(java.util.Collection,java.util.function.Function) -> a
net.minecraft.world.level.storage.loot.entries.AlternativesEntry$Builder -> drp$a -> net.minecraft.world.level.storage.loot.entries.LootEntryAlternatives$a
    F:java.util.List entries -> a
    M:net.minecraft.world.level.storage.loot.entries.AlternativesEntry$Builder getThis() -> a
    M:net.minecraft.world.level.storage.loot.entries.AlternativesEntry$Builder otherwise(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootEntryAbstract build() -> b
net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer -> drq -> net.minecraft.world.level.storage.loot.entries.LootEntryChildren
    F:net.minecraft.world.level.storage.loot.entries.LootEntryChildren ALWAYS_FALSE -> a
    F:net.minecraft.world.level.storage.loot.entries.LootEntryChildren ALWAYS_TRUE -> b
    M:net.minecraft.world.level.storage.loot.entries.LootEntryChildren and(net.minecraft.world.level.storage.loot.entries.LootEntryChildren) -> and
    M:net.minecraft.world.level.storage.loot.entries.LootEntryChildren or(net.minecraft.world.level.storage.loot.entries.LootEntryChildren) -> or
net.minecraft.world.level.storage.loot.entries.CompositeEntryBase -> drr -> net.minecraft.world.level.storage.loot.entries.LootEntryChildrenAbstract
    F:net.minecraft.world.level.storage.loot.entries.LootEntryChildren composedChildren -> e
    M:void validate(net.minecraft.world.level.storage.loot.LootCollector) -> a
    M:boolean expand(net.minecraft.world.level.storage.loot.LootTableInfo,java.util.function.Consumer) -> expand
    M:net.minecraft.world.level.storage.loot.entries.LootEntryAbstract$Serializer createSerializer(net.minecraft.world.level.storage.loot.entries.CompositeEntryBase$CompositeEntryConstructor) -> a
    M:void serializeCustom(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootEntryChildrenAbstract,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootEntryChildrenAbstract deserializeCustom(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootEntryAbstract deserializeCustom(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serializeCustom(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootEntryAbstract,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.entries.CompositeEntryBase$CompositeEntryConstructor -> drr$a -> net.minecraft.world.level.storage.loot.entries.LootEntryChildrenAbstract$a
net.minecraft.world.level.storage.loot.entries.DynamicLoot -> drs -> net.minecraft.world.level.storage.loot.entries.LootSelectorDynamic
    F:net.minecraft.resources.MinecraftKey name -> i
    M:net.minecraft.world.level.storage.loot.entries.LootEntryType getType() -> a
    M:void createItemStack(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder dynamicEntry(net.minecraft.resources.MinecraftKey) -> a
net.minecraft.world.level.storage.loot.entries.DynamicLoot$Serializer -> drs$a -> net.minecraft.world.level.storage.loot.entries.LootSelectorDynamic$a
    M:void serializeCustom(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootSelectorDynamic,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootSelectorDynamic deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootSelectorEntry deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> b
    M:void serializeCustom(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootSelectorEntry,com.google.gson.JsonSerializationContext) -> a
    M:void serializeCustom(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootEntryAbstract,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.entries.EmptyLootItem -> drt -> net.minecraft.world.level.storage.loot.entries.LootSelectorEmpty
    M:net.minecraft.world.level.storage.loot.entries.LootEntryType getType() -> a
    M:void createItemStack(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder emptyItem() -> b
net.minecraft.world.level.storage.loot.entries.EmptyLootItem$Serializer -> drt$a -> net.minecraft.world.level.storage.loot.entries.LootSelectorEmpty$a
    M:net.minecraft.world.level.storage.loot.entries.LootSelectorEmpty deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootSelectorEntry deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> b
net.minecraft.world.level.storage.loot.entries.EntryGroup -> dru -> net.minecraft.world.level.storage.loot.entries.LootEntryGroup
    M:net.minecraft.world.level.storage.loot.entries.LootEntryType getType() -> a
    M:net.minecraft.world.level.storage.loot.entries.LootEntryChildren compose(net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer[]) -> a
    M:net.minecraft.world.level.storage.loot.entries.EntryGroup$Builder list(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder[]) -> a
net.minecraft.world.level.storage.loot.entries.EntryGroup$Builder -> dru$a -> net.minecraft.world.level.storage.loot.entries.LootEntryGroup$a
    F:java.util.List entries -> a
    M:net.minecraft.world.level.storage.loot.entries.EntryGroup$Builder getThis() -> a
    M:net.minecraft.world.level.storage.loot.entries.EntryGroup$Builder append(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> b
    M:net.minecraft.world.level.storage.loot.entries.LootEntryAbstract build() -> b
net.minecraft.world.level.storage.loot.entries.LootItem -> drv -> net.minecraft.world.level.storage.loot.entries.LootItem
    F:net.minecraft.world.item.Item item -> i
    M:net.minecraft.world.level.storage.loot.entries.LootEntryType getType() -> a
    M:void createItemStack(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder lootTableItem(net.minecraft.world.level.IMaterial) -> a
net.minecraft.world.level.storage.loot.entries.LootItem$Serializer -> drv$a -> net.minecraft.world.level.storage.loot.entries.LootItem$a
    M:void serializeCustom(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootItem,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootItem deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootSelectorEntry deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> b
    M:void serializeCustom(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootSelectorEntry,com.google.gson.JsonSerializationContext) -> a
    M:void serializeCustom(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootEntryAbstract,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.entries.LootPoolEntries -> drw -> net.minecraft.world.level.storage.loot.entries.LootEntries
    F:net.minecraft.world.level.storage.loot.entries.LootEntryType EMPTY -> a
    F:net.minecraft.world.level.storage.loot.entries.LootEntryType ITEM -> b
    F:net.minecraft.world.level.storage.loot.entries.LootEntryType REFERENCE -> c
    F:net.minecraft.world.level.storage.loot.entries.LootEntryType DYNAMIC -> d
    F:net.minecraft.world.level.storage.loot.entries.LootEntryType TAG -> e
    F:net.minecraft.world.level.storage.loot.entries.LootEntryType ALTERNATIVES -> f
    F:net.minecraft.world.level.storage.loot.entries.LootEntryType SEQUENCE -> g
    F:net.minecraft.world.level.storage.loot.entries.LootEntryType GROUP -> h
    M:net.minecraft.world.level.storage.loot.entries.LootEntryType register(java.lang.String,net.minecraft.world.level.storage.loot.LootSerializer) -> a
    M:java.lang.Object createGsonAdapter() -> a
net.minecraft.world.level.storage.loot.entries.LootPoolEntry -> drx -> net.minecraft.world.level.storage.loot.entries.LootEntry
net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer -> dry -> net.minecraft.world.level.storage.loot.entries.LootEntryAbstract
    F:java.util.function.Predicate compositeCondition -> c
    M:void validate(net.minecraft.world.level.storage.loot.LootCollector) -> a
    M:boolean canRun(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder -> dry$a -> net.minecraft.world.level.storage.loot.entries.LootEntryAbstract$a
    F:java.util.List conditions -> a
    M:net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder when(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder unwrap() -> e
    M:net.minecraft.world.level.storage.loot.entries.AlternativesEntry$Builder otherwise(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> a
    M:net.minecraft.world.level.storage.loot.entries.EntryGroup$Builder append(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> b
    M:net.minecraft.world.level.storage.loot.entries.SequentialEntry$Builder then(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> c
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionUser unwrap() -> d
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionUser when(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> b
net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Serializer -> dry$b -> net.minecraft.world.level.storage.loot.entries.LootEntryAbstract$Serializer
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootEntryAbstract,com.google.gson.JsonSerializationContext) -> b
    M:net.minecraft.world.level.storage.loot.entries.LootEntryAbstract deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.entries.LootPoolEntryType -> drz -> net.minecraft.world.level.storage.loot.entries.LootEntryType
net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer -> dsa -> net.minecraft.world.level.storage.loot.entries.LootSelectorEntry
    F:int DEFAULT_WEIGHT -> c
    F:int DEFAULT_QUALITY -> e
    F:int weight -> f
    F:int quality -> g
    F:java.util.function.BiFunction compositeFunction -> i
    F:net.minecraft.world.level.storage.loot.entries.LootEntry entry -> j
    M:void validate(net.minecraft.world.level.storage.loot.LootCollector) -> a
    M:boolean expand(net.minecraft.world.level.storage.loot.LootTableInfo,java.util.function.Consumer) -> expand
    M:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder simpleBuilder(net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$EntryConstructor) -> a
    M:void createItemStack(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder -> dsa$a -> net.minecraft.world.level.storage.loot.entries.LootSelectorEntry$a
    F:int weight -> a
    F:int quality -> b
    F:java.util.List functions -> c
    M:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder apply(net.minecraft.world.level.storage.loot.functions.LootItemFunction$Builder) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder setWeight(int) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder setQuality(int) -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionUser unwrap() -> c
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionUser apply(net.minecraft.world.level.storage.loot.functions.LootItemFunction$Builder) -> b
net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$DummyBuilder -> dsa$b -> net.minecraft.world.level.storage.loot.entries.LootSelectorEntry$b
    F:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$EntryConstructor constructor -> c
    M:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$DummyBuilder getThis() -> g
    M:net.minecraft.world.level.storage.loot.entries.LootEntryAbstract build() -> b
net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$EntryBase -> dsa$c -> net.minecraft.world.level.storage.loot.entries.LootSelectorEntry$c
    M:int getWeight(float) -> a
net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$EntryConstructor -> dsa$d -> net.minecraft.world.level.storage.loot.entries.LootSelectorEntry$d
net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Serializer -> dsa$e -> net.minecraft.world.level.storage.loot.entries.LootSelectorEntry$e
    M:void serializeCustom(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootSelectorEntry,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootSelectorEntry deserializeCustom(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootEntryAbstract deserializeCustom(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serializeCustom(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootEntryAbstract,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.entries.LootTableReference -> dsb -> net.minecraft.world.level.storage.loot.entries.LootSelectorLootTable
    F:net.minecraft.resources.MinecraftKey name -> i
    M:net.minecraft.world.level.storage.loot.entries.LootEntryType getType() -> a
    M:void createItemStack(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:void validate(net.minecraft.world.level.storage.loot.LootCollector) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder lootTableReference(net.minecraft.resources.MinecraftKey) -> a
net.minecraft.world.level.storage.loot.entries.LootTableReference$Serializer -> dsb$a -> net.minecraft.world.level.storage.loot.entries.LootSelectorLootTable$a
    M:void serializeCustom(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootSelectorLootTable,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootSelectorLootTable deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootSelectorEntry deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> b
    M:void serializeCustom(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootSelectorEntry,com.google.gson.JsonSerializationContext) -> a
    M:void serializeCustom(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootEntryAbstract,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.entries.SequentialEntry -> dsc -> net.minecraft.world.level.storage.loot.entries.LootEntrySequence
    M:net.minecraft.world.level.storage.loot.entries.LootEntryType getType() -> a
    M:net.minecraft.world.level.storage.loot.entries.LootEntryChildren compose(net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer[]) -> a
    M:net.minecraft.world.level.storage.loot.entries.SequentialEntry$Builder sequential(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder[]) -> a
net.minecraft.world.level.storage.loot.entries.SequentialEntry$Builder -> dsc$a -> net.minecraft.world.level.storage.loot.entries.LootEntrySequence$a
    F:java.util.List entries -> a
    M:net.minecraft.world.level.storage.loot.entries.SequentialEntry$Builder getThis() -> a
    M:net.minecraft.world.level.storage.loot.entries.SequentialEntry$Builder then(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> c
    M:net.minecraft.world.level.storage.loot.entries.LootEntryAbstract build() -> b
net.minecraft.world.level.storage.loot.entries.TagEntry -> dsd -> net.minecraft.world.level.storage.loot.entries.LootSelectorTag
    F:net.minecraft.tags.TagKey tag -> i
    F:boolean expand -> j
    M:net.minecraft.world.level.storage.loot.entries.LootEntryType getType() -> a
    M:void createItemStack(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:boolean expandTag(net.minecraft.world.level.storage.loot.LootTableInfo,java.util.function.Consumer) -> a
    M:boolean expand(net.minecraft.world.level.storage.loot.LootTableInfo,java.util.function.Consumer) -> expand
    M:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder tagContents(net.minecraft.tags.TagKey) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder expandTag(net.minecraft.tags.TagKey) -> b
    M:void createItemStack(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
net.minecraft.world.level.storage.loot.entries.TagEntry$Serializer -> dsd$a -> net.minecraft.world.level.storage.loot.entries.LootSelectorTag$a
    M:void serializeCustom(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootSelectorTag,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootSelectorTag deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> a
    M:net.minecraft.world.level.storage.loot.entries.LootSelectorEntry deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> b
    M:void serializeCustom(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootSelectorEntry,com.google.gson.JsonSerializationContext) -> a
    M:void serializeCustom(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootEntryAbstract,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.ApplyBonusCount -> dsf -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionApplyBonus
    F:java.util.Map FORMULAS -> a
    F:net.minecraft.world.item.enchantment.Enchantment enchantment -> b
    F:net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$Formula formula -> c
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder addBonusBinomialDistributionCount(net.minecraft.world.item.enchantment.Enchantment,float,int) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder addOreBonusCount(net.minecraft.world.item.enchantment.Enchantment) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder addUniformBonusCount(net.minecraft.world.item.enchantment.Enchantment) -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder addUniformBonusCount(net.minecraft.world.item.enchantment.Enchantment,int) -> a
net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$BinomialWithBonusCount -> dsf$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionApplyBonus$a
    F:net.minecraft.resources.MinecraftKey TYPE -> a
    F:int extraRounds -> b
    F:float probability -> c
    M:int calculateNewCount(net.minecraft.util.RandomSource,int,int) -> a
    M:void serializeParams(com.google.gson.JsonObject,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$Formula deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:net.minecraft.resources.MinecraftKey getType() -> a
net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$Formula -> dsf$b -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionApplyBonus$b
net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$FormulaDeserializer -> dsf$c -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionApplyBonus$c
net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$OreDrops -> dsf$d -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionApplyBonus$d
    F:net.minecraft.resources.MinecraftKey TYPE -> a
    M:int calculateNewCount(net.minecraft.util.RandomSource,int,int) -> a
    M:void serializeParams(com.google.gson.JsonObject,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$Formula deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:net.minecraft.resources.MinecraftKey getType() -> a
net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$Serializer -> dsf$e -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionApplyBonus$e
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionApplyBonus,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionApplyBonus deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$UniformBonusCount -> dsf$f -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionApplyBonus$f
    F:net.minecraft.resources.MinecraftKey TYPE -> a
    F:int bonusMultiplier -> b
    M:int calculateNewCount(net.minecraft.util.RandomSource,int,int) -> a
    M:void serializeParams(com.google.gson.JsonObject,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$Formula deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:net.minecraft.resources.MinecraftKey getType() -> a
net.minecraft.world.level.storage.loot.functions.ApplyExplosionDecay -> dsg -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionExplosionDecay
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder explosionDecay() -> c
net.minecraft.world.level.storage.loot.functions.ApplyExplosionDecay$Serializer -> dsg$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionExplosionDecay$a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionExplosionDecay deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
net.minecraft.world.level.storage.loot.functions.CopyBlockState -> dsh -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyState
    F:net.minecraft.world.level.block.Block block -> a
    F:java.util.Set properties -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.CopyBlockState$Builder copyState(net.minecraft.world.level.block.Block) -> a
    M:java.lang.String serialize(net.minecraft.world.level.block.state.IBlockData,net.minecraft.world.level.block.state.properties.IBlockState) -> a
net.minecraft.world.level.storage.loot.functions.CopyBlockState$Builder -> dsh$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyState$a
    F:net.minecraft.world.level.block.Block block -> a
    F:java.util.Set properties -> b
    M:net.minecraft.world.level.storage.loot.functions.CopyBlockState$Builder copy(net.minecraft.world.level.block.state.properties.IBlockState) -> a
    M:net.minecraft.world.level.storage.loot.functions.CopyBlockState$Builder getThis() -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> c
net.minecraft.world.level.storage.loot.functions.CopyBlockState$Serializer -> dsh$b -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyState$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyState,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyState deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.CopyNameFunction -> dsi -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyName
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyName$Source source -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder copyName(net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyName$Source) -> a
net.minecraft.world.level.storage.loot.functions.CopyNameFunction$NameSource -> dsi$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyName$Source
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyName$Source THIS -> a
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyName$Source KILLER -> b
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyName$Source KILLER_PLAYER -> c
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyName$Source BLOCK_ENTITY -> d
    F:java.lang.String name -> e
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameter param -> f
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyName$Source getByName(java.lang.String) -> a
net.minecraft.world.level.storage.loot.functions.CopyNameFunction$Serializer -> dsi$b -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyName$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyName,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyName deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.CopyNbtFunction -> dsj -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyNBT
    F:net.minecraft.world.level.storage.loot.providers.nbt.NbtProvider source -> a
    F:java.util.List operations -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:net.minecraft.commands.arguments.NbtPathArgument$NbtPath compileNbtPath(java.lang.String) -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$Builder copyData(net.minecraft.world.level.storage.loot.providers.nbt.NbtProvider) -> a
    M:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$Builder copyData(net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget) -> a
net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$Builder -> dsj$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyNBT$a
    F:net.minecraft.world.level.storage.loot.providers.nbt.NbtProvider source -> a
    F:java.util.List ops -> b
    M:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$Builder copy(java.lang.String,java.lang.String,net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyNBT$Action) -> a
    M:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$Builder copy(java.lang.String,java.lang.String) -> a
    M:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$Builder getThis() -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> c
net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$CopyOperation -> dsj$b -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyNBT$b
    F:java.lang.String sourcePathText -> a
    F:net.minecraft.commands.arguments.NbtPathArgument$NbtPath sourcePath -> b
    F:java.lang.String targetPathText -> c
    F:net.minecraft.commands.arguments.NbtPathArgument$NbtPath targetPath -> d
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyNBT$Action op -> e
    M:void apply(java.util.function.Supplier,net.minecraft.nbt.NBTBase) -> a
    M:com.google.gson.JsonObject toJson() -> a
    M:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$CopyOperation fromJson(com.google.gson.JsonObject) -> a
net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy -> dsj$c -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyNBT$Action
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyNBT$Action REPLACE -> a
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyNBT$Action APPEND -> b
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyNBT$Action MERGE -> c
    F:java.lang.String name -> d
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyNBT$Action getByName(java.lang.String) -> a
    M:void merge(net.minecraft.nbt.NBTBase,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.List) -> a
    M:void merge(net.minecraft.nbt.NBTBase,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.List) -> a
    M:void merge(net.minecraft.nbt.NBTBase,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.List) -> a
net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$Serializer -> dsj$d -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyNBT$d
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyNBT,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionCopyNBT deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction -> dsk -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionEnchant
    F:org.slf4j.Logger LOGGER -> a
    F:java.util.List enchantments -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.item.ItemStack enchantItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.enchantment.Enchantment,net.minecraft.util.RandomSource) -> a
    M:net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction$Builder randomEnchantment() -> c
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder randomApplicableEnchantment() -> d
net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction$Builder -> dsk$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionEnchant$a
    F:java.util.Set enchantments -> a
    M:net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction$Builder getThis() -> a
    M:net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction$Builder withEnchantment(net.minecraft.world.item.enchantment.Enchantment) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> c
net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction$Serializer -> dsk$b -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionEnchant$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionEnchant,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionEnchant deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction -> dsl -> net.minecraft.world.level.storage.loot.functions.LootEnchantLevel
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider levels -> a
    F:boolean treasure -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction$Builder enchantWithLevels(net.minecraft.world.level.storage.loot.providers.number.NumberProvider) -> a
net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction$Builder -> dsl$a -> net.minecraft.world.level.storage.loot.functions.LootEnchantLevel$a
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider levels -> a
    F:boolean treasure -> b
    M:net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction$Builder getThis() -> a
    M:net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction$Builder allowTreasure() -> e
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> c
net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction$Serializer -> dsl$b -> net.minecraft.world.level.storage.loot.functions.LootEnchantLevel$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootEnchantLevel,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootEnchantLevel deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction -> dsm -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionExplorationMap
    F:org.slf4j.Logger LOGGER -> h
    F:net.minecraft.tags.TagKey DEFAULT_DESTINATION -> a
    F:java.lang.String DEFAULT_DECORATION_NAME -> b
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type DEFAULT_DECORATION -> c
    F:byte DEFAULT_ZOOM -> d
    F:int DEFAULT_SEARCH_RADIUS -> e
    F:boolean DEFAULT_SKIP_EXISTING -> f
    F:net.minecraft.tags.TagKey destination -> i
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type mapDecoration -> j
    F:byte zoom -> k
    F:int searchRadius -> l
    F:boolean skipKnownStructures -> m
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Builder makeExplorationMap() -> c
net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Builder -> dsm$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionExplorationMap$a
    F:net.minecraft.tags.TagKey destination -> a
    F:net.minecraft.world.level.saveddata.maps.MapIcon$Type mapDecoration -> b
    F:byte zoom -> c
    F:int searchRadius -> d
    F:boolean skipKnownStructures -> e
    M:net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Builder getThis() -> a
    M:net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Builder setDestination(net.minecraft.tags.TagKey) -> a
    M:net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Builder setMapDecoration(net.minecraft.world.level.saveddata.maps.MapIcon$Type) -> a
    M:net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Builder setZoom(byte) -> a
    M:net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Builder setSearchRadius(int) -> a
    M:net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Builder setSkipKnownStructures(boolean) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> c
net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Serializer -> dsm$b -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionExplorationMap$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionExplorationMap,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionExplorationMap deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.tags.TagKey readStructure(com.google.gson.JsonObject) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.FillPlayerHead -> dsn -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionFillPlayerHead
    F:net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget entityTarget -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder fillPlayerHead(net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget) -> a
net.minecraft.world.level.storage.loot.functions.FillPlayerHead$Serializer -> dsn$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionFillPlayerHead$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionFillPlayerHead,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionFillPlayerHead deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.FunctionUserBuilder -> dso -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionUser
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionUser apply(java.lang.Iterable,java.util.function.Function) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionUser apply(java.lang.Object[],java.util.function.Function) -> a
net.minecraft.world.level.storage.loot.functions.LimitCount -> dsp -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionLimitCount
    F:net.minecraft.world.level.storage.loot.IntRange limiter -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder limitCount(net.minecraft.world.level.storage.loot.IntRange) -> a
net.minecraft.world.level.storage.loot.functions.LimitCount$Serializer -> dsp$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionLimitCount$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionLimitCount,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionLimitCount deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction -> dsq -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional
    F:java.util.function.Predicate compositePredicates -> a
    M:net.minecraft.world.item.ItemStack apply(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> b
    M:void validate(net.minecraft.world.level.storage.loot.LootCollector) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder simpleBuilder(java.util.function.Function) -> a
    M:java.lang.Object apply(java.lang.Object,java.lang.Object) -> apply
net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder -> dsq$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional$a
    F:java.util.List conditions -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder when(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder unwrap() -> f
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionUser unwrap() -> d
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionUser when(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> b
net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$DummyBuilder -> dsq$b -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional$b
    F:java.util.function.Function constructor -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$DummyBuilder getThis() -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> c
net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Serializer -> dsq$c -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional$c
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.LootItemFunction -> dsr -> net.minecraft.world.level.storage.loot.functions.LootItemFunction
    M:java.util.function.Consumer decorate(java.util.function.BiFunction,java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
net.minecraft.world.level.storage.loot.functions.LootItemFunction$Builder -> dsr$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunction$a
net.minecraft.world.level.storage.loot.functions.LootItemFunctionType -> dss -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionType
net.minecraft.world.level.storage.loot.functions.LootItemFunctions -> dst -> net.minecraft.world.level.storage.loot.functions.LootItemFunctions
    F:java.util.function.BiFunction IDENTITY -> a
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType SET_COUNT -> b
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType ENCHANT_WITH_LEVELS -> c
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType ENCHANT_RANDOMLY -> d
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType SET_ENCHANTMENTS -> e
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType SET_NBT -> f
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType FURNACE_SMELT -> g
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType LOOTING_ENCHANT -> h
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType SET_DAMAGE -> i
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType SET_ATTRIBUTES -> j
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType SET_NAME -> k
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType EXPLORATION_MAP -> l
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType SET_STEW_EFFECT -> m
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType COPY_NAME -> n
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType SET_CONTENTS -> o
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType LIMIT_COUNT -> p
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType APPLY_BONUS -> q
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType SET_LOOT_TABLE -> r
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType EXPLOSION_DECAY -> s
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType SET_LORE -> t
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType FILL_PLAYER_HEAD -> u
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType COPY_NBT -> v
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType COPY_STATE -> w
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType SET_BANNER_PATTERN -> x
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType SET_POTION -> y
    F:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType SET_INSTRUMENT -> z
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType register(java.lang.String,net.minecraft.world.level.storage.loot.LootSerializer) -> a
    M:java.lang.Object createGsonAdapter() -> a
    M:java.util.function.BiFunction compose(java.util.function.BiFunction[]) -> a
net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction -> dsu -> net.minecraft.world.level.storage.loot.functions.LootEnchantFunction
    F:int NO_LIMIT -> a
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider value -> b
    F:int limit -> c
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:boolean hasLimit() -> c
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction$Builder lootingMultiplier(net.minecraft.world.level.storage.loot.providers.number.NumberProvider) -> a
net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction$Builder -> dsu$a -> net.minecraft.world.level.storage.loot.functions.LootEnchantFunction$a
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider count -> a
    F:int limit -> b
    M:net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction$Builder getThis() -> a
    M:net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction$Builder setLimit(int) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> c
net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction$Serializer -> dsu$b -> net.minecraft.world.level.storage.loot.functions.LootEnchantFunction$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootEnchantFunction,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootEnchantFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetAttributesFunction -> dsv -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetAttribute
    F:java.util.List modifiers -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$ModifierBuilder modifier(java.lang.String,net.minecraft.world.entity.ai.attributes.AttributeBase,net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation,net.minecraft.world.level.storage.loot.providers.number.NumberProvider) -> a
    M:net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Builder setAttributes() -> c
net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Builder -> dsv$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetAttribute$a
    F:java.util.List modifiers -> a
    M:net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Builder getThis() -> a
    M:net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Builder withModifier(net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$ModifierBuilder) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> c
net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Modifier -> dsv$b -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetAttribute$b
    F:java.lang.String name -> a
    F:net.minecraft.world.entity.ai.attributes.AttributeBase attribute -> b
    F:net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation operation -> c
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider amount -> d
    F:java.util.UUID id -> e
    M:com.google.gson.JsonObject serialize(com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Modifier deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:java.lang.String operationToString(net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation) -> a
    M:net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation operationFromString(java.lang.String) -> a
net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$ModifierBuilder -> dsv$c -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetAttribute$c
    F:java.lang.String name -> a
    F:net.minecraft.world.entity.ai.attributes.AttributeBase attribute -> b
    F:net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation operation -> c
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider amount -> d
    F:java.util.UUID id -> e
    F:java.util.Set slots -> f
    M:net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$ModifierBuilder forSlot(net.minecraft.world.entity.EnumItemSlot) -> a
    M:net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$ModifierBuilder withUuid(java.util.UUID) -> a
    M:net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Modifier build() -> a
net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Serializer -> dsv$d -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetAttribute$d
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetAttribute,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetAttribute deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetBannerPatternFunction -> dsw -> net.minecraft.world.level.storage.loot.functions.SetBannerPatternFunction
    F:java.util.List patterns -> a
    F:boolean append -> b
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:net.minecraft.world.level.storage.loot.functions.SetBannerPatternFunction$Builder setBannerPattern(boolean) -> a
net.minecraft.world.level.storage.loot.functions.SetBannerPatternFunction$Builder -> dsw$a -> net.minecraft.world.level.storage.loot.functions.SetBannerPatternFunction$a
    F:com.google.common.collect.ImmutableList$Builder patterns -> a
    F:boolean append -> b
    M:net.minecraft.world.level.storage.loot.functions.SetBannerPatternFunction$Builder getThis() -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    M:net.minecraft.world.level.storage.loot.functions.SetBannerPatternFunction$Builder addPattern(net.minecraft.resources.ResourceKey,net.minecraft.world.item.EnumColor) -> a
    M:net.minecraft.world.level.storage.loot.functions.SetBannerPatternFunction$Builder addPattern(net.minecraft.core.Holder,net.minecraft.world.item.EnumColor) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> c
net.minecraft.world.level.storage.loot.functions.SetBannerPatternFunction$Serializer -> dsw$b -> net.minecraft.world.level.storage.loot.functions.SetBannerPatternFunction$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.SetBannerPatternFunction,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.SetBannerPatternFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetContainerContents -> dsx -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetContents
    F:java.util.List entries -> a
    F:net.minecraft.world.level.block.entity.TileEntityTypes type -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:void validate(net.minecraft.world.level.storage.loot.LootCollector) -> a
    M:net.minecraft.world.level.storage.loot.functions.SetContainerContents$Builder setContents(net.minecraft.world.level.block.entity.TileEntityTypes) -> a
net.minecraft.world.level.storage.loot.functions.SetContainerContents$Builder -> dsx$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetContents$a
    F:java.util.List entries -> a
    F:net.minecraft.world.level.block.entity.TileEntityTypes type -> b
    M:net.minecraft.world.level.storage.loot.functions.SetContainerContents$Builder getThis() -> a
    M:net.minecraft.world.level.storage.loot.functions.SetContainerContents$Builder withEntry(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> c
net.minecraft.world.level.storage.loot.functions.SetContainerContents$Serializer -> dsx$b -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetContents$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetContents,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetContents deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetContainerLootTable -> dsy -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetTable
    F:net.minecraft.resources.MinecraftKey name -> a
    F:long seed -> b
    F:net.minecraft.world.level.block.entity.TileEntityTypes type -> c
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:void validate(net.minecraft.world.level.storage.loot.LootCollector) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder withLootTable(net.minecraft.world.level.block.entity.TileEntityTypes,net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder withLootTable(net.minecraft.world.level.block.entity.TileEntityTypes,net.minecraft.resources.MinecraftKey,long) -> a
net.minecraft.world.level.storage.loot.functions.SetContainerLootTable$Serializer -> dsy$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetTable$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetTable,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetTable deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetEnchantmentsFunction -> dsz -> net.minecraft.world.level.storage.loot.functions.SetEnchantmentsFunction
    F:java.util.Map enchantments -> a
    F:boolean add -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:void updateEnchantment(java.util.Map,net.minecraft.world.item.enchantment.Enchantment,int) -> a
net.minecraft.world.level.storage.loot.functions.SetEnchantmentsFunction$Builder -> dsz$a -> net.minecraft.world.level.storage.loot.functions.SetEnchantmentsFunction$a
    F:java.util.Map enchantments -> a
    F:boolean add -> b
    M:net.minecraft.world.level.storage.loot.functions.SetEnchantmentsFunction$Builder getThis() -> a
    M:net.minecraft.world.level.storage.loot.functions.SetEnchantmentsFunction$Builder withEnchantment(net.minecraft.world.item.enchantment.Enchantment,net.minecraft.world.level.storage.loot.providers.number.NumberProvider) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> c
net.minecraft.world.level.storage.loot.functions.SetEnchantmentsFunction$Serializer -> dsz$b -> net.minecraft.world.level.storage.loot.functions.SetEnchantmentsFunction$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.SetEnchantmentsFunction,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.SetEnchantmentsFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetInstrumentFunction -> dta -> net.minecraft.world.level.storage.loot.functions.SetInstrumentFunction
    F:net.minecraft.tags.TagKey options -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder setInstrumentOptions(net.minecraft.tags.TagKey) -> a
net.minecraft.world.level.storage.loot.functions.SetInstrumentFunction$Serializer -> dta$a -> net.minecraft.world.level.storage.loot.functions.SetInstrumentFunction$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.SetInstrumentFunction,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.SetInstrumentFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetItemCountFunction -> dtb -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetCount
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider value -> a
    F:boolean add -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder setCount(net.minecraft.world.level.storage.loot.providers.number.NumberProvider) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder setCount(net.minecraft.world.level.storage.loot.providers.number.NumberProvider,boolean) -> a
net.minecraft.world.level.storage.loot.functions.SetItemCountFunction$Serializer -> dtb$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetCount$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetCount,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetCount deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetItemDamageFunction -> dtc -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetDamage
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider damage -> b
    F:boolean add -> c
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder setDamage(net.minecraft.world.level.storage.loot.providers.number.NumberProvider) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder setDamage(net.minecraft.world.level.storage.loot.providers.number.NumberProvider,boolean) -> a
net.minecraft.world.level.storage.loot.functions.SetItemDamageFunction$Serializer -> dtc$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetDamage$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetDamage,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetDamage deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetLoreFunction -> dtd -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetLore
    F:boolean replace -> a
    F:java.util.List lore -> b
    F:net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget resolutionContext -> c
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.nbt.NBTTagList getLoreTag(net.minecraft.world.item.ItemStack,boolean) -> a
    M:net.minecraft.world.level.storage.loot.functions.SetLoreFunction$Builder setLore() -> c
net.minecraft.world.level.storage.loot.functions.SetLoreFunction$Builder -> dtd$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetLore$a
    F:boolean replace -> a
    F:net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget resolutionContext -> b
    F:java.util.List lore -> c
    M:net.minecraft.world.level.storage.loot.functions.SetLoreFunction$Builder setReplace(boolean) -> a
    M:net.minecraft.world.level.storage.loot.functions.SetLoreFunction$Builder setResolutionContext(net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget) -> a
    M:net.minecraft.world.level.storage.loot.functions.SetLoreFunction$Builder addLine(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:net.minecraft.world.level.storage.loot.functions.SetLoreFunction$Builder getThis() -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> c
net.minecraft.world.level.storage.loot.functions.SetLoreFunction$Serializer -> dtd$b -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetLore$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetLore,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetLore deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetNameFunction -> dte -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetName
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.network.chat.IChatBaseComponent name -> b
    F:net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget resolutionContext -> c
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:java.util.function.UnaryOperator createResolver(net.minecraft.world.level.storage.loot.LootTableInfo,net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget) -> a
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder setName(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder setName(net.minecraft.network.chat.IChatBaseComponent,net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget) -> a
net.minecraft.world.level.storage.loot.functions.SetNameFunction$Serializer -> dte$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetName$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetName,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetName deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetNbtFunction -> dtf -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetTag
    F:net.minecraft.nbt.NBTTagCompound tag -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder setTag(net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.level.storage.loot.functions.SetNbtFunction$Serializer -> dtf$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetTag$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetTag,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetTag deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetPotionFunction -> dtg -> net.minecraft.world.level.storage.loot.functions.SetPotionFunction
    F:net.minecraft.world.item.alchemy.PotionRegistry potion -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder setPotion(net.minecraft.world.item.alchemy.PotionRegistry) -> a
net.minecraft.world.level.storage.loot.functions.SetPotionFunction$Serializer -> dtg$a -> net.minecraft.world.level.storage.loot.functions.SetPotionFunction$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.SetPotionFunction,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.SetPotionFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction -> dth -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetStewEffect
    F:java.util.Map effectDurationMap -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction$Builder stewEffect() -> c
net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction$Builder -> dth$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetStewEffect$a
    F:java.util.Map effectDurationMap -> a
    M:net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction$Builder getThis() -> a
    M:net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction$Builder withEffect(net.minecraft.world.effect.MobEffectList,net.minecraft.world.level.storage.loot.providers.number.NumberProvider) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> c
net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction$Serializer -> dth$b -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetStewEffect$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetStewEffect,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionSetStewEffect deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional,com.google.gson.JsonSerializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SmeltItemFunction -> dti -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSmelt
    F:org.slf4j.Logger LOGGER -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionType getType() -> a
    M:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder smelted() -> c
net.minecraft.world.level.storage.loot.functions.SmeltItemFunction$Serializer -> dti$a -> net.minecraft.world.level.storage.loot.functions.LootItemFunctionSmelt$a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionSmelt deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    M:net.minecraft.world.level.storage.loot.functions.LootItemFunctionConditional deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
net.minecraft.world.level.storage.loot.parameters.LootContextParam -> dtl -> net.minecraft.world.level.storage.loot.parameters.LootContextParameter
    F:net.minecraft.resources.MinecraftKey name -> a
    M:net.minecraft.resources.MinecraftKey getName() -> a
net.minecraft.world.level.storage.loot.parameters.LootContextParamSet -> dtm -> net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet
    F:java.util.Set required -> a
    F:java.util.Set all -> b
    M:boolean isAllowed(net.minecraft.world.level.storage.loot.parameters.LootContextParameter) -> a
    M:java.util.Set getRequired() -> a
    M:java.util.Set getAllowed() -> b
    M:void validateUser(net.minecraft.world.level.storage.loot.LootCollector,net.minecraft.world.level.storage.loot.LootItemUser) -> a
    M:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet$Builder builder() -> c
net.minecraft.world.level.storage.loot.parameters.LootContextParamSet$Builder -> dtm$a -> net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet$Builder
    F:java.util.Set required -> a
    F:java.util.Set optional -> b
    M:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet$Builder required(net.minecraft.world.level.storage.loot.parameters.LootContextParameter) -> a
    M:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet$Builder optional(net.minecraft.world.level.storage.loot.parameters.LootContextParameter) -> b
    M:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet build() -> a
net.minecraft.world.level.storage.loot.parameters.LootContextParamSets -> dtn -> net.minecraft.world.level.storage.loot.parameters.LootContextParameterSets
    F:com.google.common.collect.BiMap REGISTRY -> m
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet EMPTY -> a
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet CHEST -> b
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet COMMAND -> c
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet SELECTOR -> d
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet FISHING -> e
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet ENTITY -> f
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet GIFT -> g
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet PIGLIN_BARTER -> h
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet ADVANCEMENT_REWARD -> i
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet ADVANCEMENT_ENTITY -> j
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet ALL_PARAMS -> k
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet BLOCK -> l
    M:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet register(java.lang.String,java.util.function.Consumer) -> a
    M:net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet get(net.minecraft.resources.MinecraftKey) -> a
    M:net.minecraft.resources.MinecraftKey getKey(net.minecraft.world.level.storage.loot.parameters.LootContextParameterSet) -> a
net.minecraft.world.level.storage.loot.parameters.LootContextParams -> dto -> net.minecraft.world.level.storage.loot.parameters.LootContextParameters
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameter THIS_ENTITY -> a
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameter LAST_DAMAGE_PLAYER -> b
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameter DAMAGE_SOURCE -> c
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameter KILLER_ENTITY -> d
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameter DIRECT_KILLER_ENTITY -> e
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameter ORIGIN -> f
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameter BLOCK_STATE -> g
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameter BLOCK_ENTITY -> h
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameter TOOL -> i
    F:net.minecraft.world.level.storage.loot.parameters.LootContextParameter EXPLOSION_RADIUS -> j
    M:net.minecraft.world.level.storage.loot.parameters.LootContextParameter create(java.lang.String) -> a
net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition -> dtq -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionAlternative
    F:java.util.function.Predicate composedPredicate -> b
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:void validate(net.minecraft.world.level.storage.loot.LootCollector) -> a
    M:net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition$Builder alternative(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder[]) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition$Builder -> dtq$a -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionAlternative$a
    F:java.util.List terms -> a
    M:net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition$Builder or(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> or
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition build() -> build
net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition$Serializer -> dtq$b -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionAlternative$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemConditionAlternative,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionAlternative deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.BonusLevelTableCondition -> dtr -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionTableBonus
    F:net.minecraft.world.item.enchantment.Enchantment enchantment -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder bonusLevelFlatChance(net.minecraft.world.item.enchantment.Enchantment,float[]) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.predicates.BonusLevelTableCondition$Serializer -> dtr$a -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionTableBonus$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemConditionTableBonus,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionTableBonus deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.ConditionReference -> dts -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionReference
    F:org.slf4j.Logger LOGGER -> a
    F:net.minecraft.resources.MinecraftKey name -> b
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:void validate(net.minecraft.world.level.storage.loot.LootCollector) -> a
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder conditionReference(net.minecraft.resources.MinecraftKey) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.predicates.ConditionReference$Serializer -> dts$a -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionReference$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemConditionReference,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionReference deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.ConditionUserBuilder -> dtt -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionUser
net.minecraft.world.level.storage.loot.predicates.DamageSourceCondition -> dtu -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionDamageSourceProperties
    F:net.minecraft.advancements.critereon.CriterionConditionDamageSource predicate -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder hasDamageSource(net.minecraft.advancements.critereon.DamageSourcePredicate$Builder) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.predicates.DamageSourceCondition$Serializer -> dtu$a -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionDamageSourceProperties$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemConditionDamageSourceProperties,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionDamageSourceProperties deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition -> dtv -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionEntityScore
    F:java.util.Map scores -> a
    F:net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget entityTarget -> b
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:boolean hasScore(net.minecraft.world.level.storage.loot.LootTableInfo,net.minecraft.world.entity.Entity,net.minecraft.world.scores.Scoreboard,java.lang.String,net.minecraft.world.level.storage.loot.IntRange) -> a
    M:net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition$Builder hasScores(net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition$Builder -> dtv$a -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionEntityScore$a
    F:java.util.Map scores -> a
    F:net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget entityTarget -> b
    M:net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition$Builder withScore(java.lang.String,net.minecraft.world.level.storage.loot.IntRange) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition build() -> build
net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition$Serializer -> dtv$b -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionEntityScore$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemConditionEntityScore,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionEntityScore deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.ExplosionCondition -> dtw -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionSurvivesExplosion
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionSurvivesExplosion INSTANCE -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder survivesExplosion() -> c
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.predicates.ExplosionCondition$Serializer -> dtw$a -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionSurvivesExplosion$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemConditionSurvivesExplosion,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionSurvivesExplosion deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.InvertedLootItemCondition -> dtx -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionInverted
    F:net.minecraft.world.level.storage.loot.predicates.LootItemCondition term -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:void validate(net.minecraft.world.level.storage.loot.LootCollector) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder invert(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.predicates.InvertedLootItemCondition$Serializer -> dtx$a -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionInverted$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemConditionInverted,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionInverted deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.LocationCheck -> dty -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionLocationCheck
    F:net.minecraft.advancements.critereon.CriterionConditionLocation predicate -> a
    F:net.minecraft.core.BlockPosition offset -> b
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder checkLocation(net.minecraft.advancements.critereon.LocationPredicate$Builder) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder checkLocation(net.minecraft.advancements.critereon.LocationPredicate$Builder,net.minecraft.core.BlockPosition) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.predicates.LocationCheck$Serializer -> dty$a -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionLocationCheck$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemConditionLocationCheck,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionLocationCheck deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition -> dtz -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionBlockStateProperty
    F:net.minecraft.world.level.block.Block block -> a
    F:net.minecraft.advancements.critereon.CriterionTriggerProperties properties -> b
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition$Builder hasBlockStateProperties(net.minecraft.world.level.block.Block) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition$Builder -> dtz$a -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionBlockStateProperty$a
    F:net.minecraft.world.level.block.Block block -> a
    F:net.minecraft.advancements.critereon.CriterionTriggerProperties properties -> b
    M:net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition$Builder setProperties(net.minecraft.advancements.critereon.StatePropertiesPredicate$Builder) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition build() -> build
net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition$Serializer -> dtz$b -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionBlockStateProperty$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemConditionBlockStateProperty,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionBlockStateProperty deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.LootItemCondition -> dua -> net.minecraft.world.level.storage.loot.predicates.LootItemCondition
net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder -> dua$a -> net.minecraft.world.level.storage.loot.predicates.LootItemCondition$a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder invert() -> invert
    M:net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition$Builder or(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> or
net.minecraft.world.level.storage.loot.predicates.LootItemConditionType -> dub -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionType
net.minecraft.world.level.storage.loot.predicates.LootItemConditions -> duc -> net.minecraft.world.level.storage.loot.predicates.LootItemConditions
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType INVERTED -> a
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType ALTERNATIVE -> b
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType RANDOM_CHANCE -> c
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType RANDOM_CHANCE_WITH_LOOTING -> d
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType ENTITY_PROPERTIES -> e
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType KILLED_BY_PLAYER -> f
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType ENTITY_SCORES -> g
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType BLOCK_STATE_PROPERTY -> h
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType MATCH_TOOL -> i
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType TABLE_BONUS -> j
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType SURVIVES_EXPLOSION -> k
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType DAMAGE_SOURCE_PROPERTIES -> l
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType LOCATION_CHECK -> m
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType WEATHER_CHECK -> n
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType REFERENCE -> o
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType TIME_CHECK -> p
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType VALUE_CHECK -> q
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType register(java.lang.String,net.minecraft.world.level.storage.loot.LootSerializer) -> a
    M:java.lang.Object createGsonAdapter() -> a
    M:java.util.function.Predicate andConditions(java.util.function.Predicate[]) -> a
    M:java.util.function.Predicate orConditions(java.util.function.Predicate[]) -> b
net.minecraft.world.level.storage.loot.predicates.LootItemEntityPropertyCondition -> dud -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionEntityProperty
    F:net.minecraft.advancements.critereon.CriterionConditionEntity predicate -> a
    F:net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget entityTarget -> b
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder entityPresent(net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder hasProperties(net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget,net.minecraft.advancements.critereon.EntityPredicate$Builder) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder hasProperties(net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget,net.minecraft.advancements.critereon.CriterionConditionEntity) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.predicates.LootItemEntityPropertyCondition$Serializer -> dud$a -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionEntityProperty$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemConditionEntityProperty,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionEntityProperty deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.LootItemKilledByPlayerCondition -> due -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionKilledByPlayer
    F:net.minecraft.world.level.storage.loot.predicates.LootItemConditionKilledByPlayer INSTANCE -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder killedByPlayer() -> c
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.predicates.LootItemKilledByPlayerCondition$Serializer -> due$a -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionKilledByPlayer$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemConditionKilledByPlayer,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionKilledByPlayer deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceCondition -> duf -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionRandomChance
    F:float probability -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder randomChance(float) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceCondition$Serializer -> duf$a -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionRandomChance$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemConditionRandomChance,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionRandomChance deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceWithLootingCondition -> dug -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionRandomChanceWithLooting
    F:float percent -> a
    F:float lootingMultiplier -> b
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder randomChanceAndLootingBoost(float,float) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceWithLootingCondition$Serializer -> dug$a -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionRandomChanceWithLooting$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemConditionRandomChanceWithLooting,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionRandomChanceWithLooting deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.MatchTool -> duh -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionMatchTool
    F:net.minecraft.advancements.critereon.CriterionConditionItem predicate -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder toolMatches(net.minecraft.advancements.critereon.ItemPredicate$Builder) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.predicates.MatchTool$Serializer -> duh$a -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionMatchTool$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemConditionMatchTool,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionMatchTool deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.TimeCheck -> dui -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionTimeCheck
    F:java.lang.Long period -> a
    F:net.minecraft.world.level.storage.loot.IntRange value -> b
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.predicates.TimeCheck$Builder time(net.minecraft.world.level.storage.loot.IntRange) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.predicates.TimeCheck$Builder -> dui$a -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionTimeCheck$a
    F:java.lang.Long period -> a
    F:net.minecraft.world.level.storage.loot.IntRange value -> b
    M:net.minecraft.world.level.storage.loot.predicates.TimeCheck$Builder setPeriod(long) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionTimeCheck build() -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition build() -> build
net.minecraft.world.level.storage.loot.predicates.TimeCheck$Serializer -> dui$b -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionTimeCheck$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemConditionTimeCheck,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionTimeCheck deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.ValueCheckCondition -> duj -> net.minecraft.world.level.storage.loot.predicates.ValueCheckCondition
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider provider -> a
    F:net.minecraft.world.level.storage.loot.IntRange range -> b
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder hasValue(net.minecraft.world.level.storage.loot.providers.number.NumberProvider,net.minecraft.world.level.storage.loot.IntRange) -> a
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.predicates.ValueCheckCondition$Serializer -> duj$a -> net.minecraft.world.level.storage.loot.predicates.ValueCheckCondition$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.ValueCheckCondition,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.predicates.ValueCheckCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.WeatherCheck -> duk -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionWeatherCheck
    F:java.lang.Boolean isRaining -> a
    F:java.lang.Boolean isThundering -> b
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionType getType() -> a
    M:boolean test(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:net.minecraft.world.level.storage.loot.predicates.WeatherCheck$Builder weather() -> c
    M:boolean test(java.lang.Object) -> test
net.minecraft.world.level.storage.loot.predicates.WeatherCheck$Builder -> duk$a -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionWeatherCheck$a
    F:java.lang.Boolean isRaining -> a
    F:java.lang.Boolean isThundering -> b
    M:net.minecraft.world.level.storage.loot.predicates.WeatherCheck$Builder setRaining(java.lang.Boolean) -> a
    M:net.minecraft.world.level.storage.loot.predicates.WeatherCheck$Builder setThundering(java.lang.Boolean) -> b
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionWeatherCheck build() -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemCondition build() -> build
net.minecraft.world.level.storage.loot.predicates.WeatherCheck$Serializer -> duk$b -> net.minecraft.world.level.storage.loot.predicates.LootItemConditionWeatherCheck$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemConditionWeatherCheck,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.predicates.LootItemConditionWeatherCheck deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider -> dum -> net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider
    F:java.lang.String BLOCK_ENTITY_ID -> b
    F:net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider$Getter BLOCK_ENTITY_PROVIDER -> c
    F:net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider BLOCK_ENTITY -> a
    F:net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider$Getter getter -> d
    M:net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider$Getter forEntity(net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget) -> b
    M:net.minecraft.world.level.storage.loot.providers.nbt.LootNbtProviderType getType() -> a
    M:net.minecraft.nbt.NBTBase get(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:net.minecraft.world.level.storage.loot.providers.nbt.NbtProvider forContextEntity(net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget) -> a
    M:net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider createFromContext(java.lang.String) -> a
    M:net.minecraft.nbt.NBTBase get(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:java.lang.String getId() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:net.minecraft.nbt.NBTBase get(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:java.lang.String getId() -> a
    M:java.util.Set getReferencedContextParams() -> b
net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider$Getter -> dum$a -> net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider$a
net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider$InlineSerializer -> dum$b -> net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider$b
    M:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider deserialize(com.google.gson.JsonElement,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonElement,com.google.gson.JsonDeserializationContext) -> a
    M:com.google.gson.JsonElement serialize(java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider$Serializer -> dum$c -> net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider$c
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.providers.nbt.ContextNbtProvider deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.providers.nbt.LootNbtProviderType -> dun -> net.minecraft.world.level.storage.loot.providers.nbt.LootNbtProviderType
net.minecraft.world.level.storage.loot.providers.nbt.NbtProvider -> duo -> net.minecraft.world.level.storage.loot.providers.nbt.NbtProvider
net.minecraft.world.level.storage.loot.providers.nbt.NbtProviders -> dup -> net.minecraft.world.level.storage.loot.providers.nbt.NbtProviders
    F:net.minecraft.world.level.storage.loot.providers.nbt.LootNbtProviderType STORAGE -> a
    F:net.minecraft.world.level.storage.loot.providers.nbt.LootNbtProviderType CONTEXT -> b
    M:net.minecraft.world.level.storage.loot.providers.nbt.LootNbtProviderType register(java.lang.String,net.minecraft.world.level.storage.loot.LootSerializer) -> a
    M:java.lang.Object createGsonAdapter() -> a
net.minecraft.world.level.storage.loot.providers.nbt.StorageNbtProvider -> duq -> net.minecraft.world.level.storage.loot.providers.nbt.StorageNbtProvider
    F:net.minecraft.resources.MinecraftKey id -> a
    M:net.minecraft.world.level.storage.loot.providers.nbt.LootNbtProviderType getType() -> a
    M:net.minecraft.nbt.NBTBase get(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:java.util.Set getReferencedContextParams() -> b
net.minecraft.world.level.storage.loot.providers.nbt.StorageNbtProvider$Serializer -> duq$a -> net.minecraft.world.level.storage.loot.providers.nbt.StorageNbtProvider$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.providers.nbt.StorageNbtProvider,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.providers.nbt.StorageNbtProvider deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.providers.number.BinomialDistributionGenerator -> dus -> net.minecraft.world.level.storage.loot.providers.number.BinomialDistributionGenerator
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider n -> a
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider p -> b
    M:net.minecraft.world.level.storage.loot.providers.number.LootNumberProviderType getType() -> a
    M:int getInt(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:float getFloat(net.minecraft.world.level.storage.loot.LootTableInfo) -> b
    M:net.minecraft.world.level.storage.loot.providers.number.BinomialDistributionGenerator binomial(int,float) -> a
    M:java.util.Set getReferencedContextParams() -> b
net.minecraft.world.level.storage.loot.providers.number.BinomialDistributionGenerator$Serializer -> dus$a -> net.minecraft.world.level.storage.loot.providers.number.BinomialDistributionGenerator$a
    M:net.minecraft.world.level.storage.loot.providers.number.BinomialDistributionGenerator deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.providers.number.BinomialDistributionGenerator,com.google.gson.JsonSerializationContext) -> a
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.providers.number.ConstantValue -> dut -> net.minecraft.world.level.storage.loot.providers.number.ConstantValue
    F:float value -> a
    M:net.minecraft.world.level.storage.loot.providers.number.LootNumberProviderType getType() -> a
    M:float getFloat(net.minecraft.world.level.storage.loot.LootTableInfo) -> b
    M:net.minecraft.world.level.storage.loot.providers.number.ConstantValue exactly(float) -> a
    M:boolean equals(java.lang.Object) -> equals
net.minecraft.world.level.storage.loot.providers.number.ConstantValue$InlineSerializer -> dut$a -> net.minecraft.world.level.storage.loot.providers.number.ConstantValue$a
    M:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.providers.number.ConstantValue,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.providers.number.ConstantValue deserialize(com.google.gson.JsonElement,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonElement,com.google.gson.JsonDeserializationContext) -> a
    M:com.google.gson.JsonElement serialize(java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.providers.number.ConstantValue$Serializer -> dut$b -> net.minecraft.world.level.storage.loot.providers.number.ConstantValue$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.providers.number.ConstantValue,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.providers.number.ConstantValue deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.providers.number.LootNumberProviderType -> duu -> net.minecraft.world.level.storage.loot.providers.number.LootNumberProviderType
net.minecraft.world.level.storage.loot.providers.number.NumberProvider -> duv -> net.minecraft.world.level.storage.loot.providers.number.NumberProvider
    M:int getInt(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
net.minecraft.world.level.storage.loot.providers.number.NumberProviders -> duw -> net.minecraft.world.level.storage.loot.providers.number.NumberProviders
    F:net.minecraft.world.level.storage.loot.providers.number.LootNumberProviderType CONSTANT -> a
    F:net.minecraft.world.level.storage.loot.providers.number.LootNumberProviderType UNIFORM -> b
    F:net.minecraft.world.level.storage.loot.providers.number.LootNumberProviderType BINOMIAL -> c
    F:net.minecraft.world.level.storage.loot.providers.number.LootNumberProviderType SCORE -> d
    M:net.minecraft.world.level.storage.loot.providers.number.LootNumberProviderType register(java.lang.String,net.minecraft.world.level.storage.loot.LootSerializer) -> a
    M:java.lang.Object createGsonAdapter() -> a
net.minecraft.world.level.storage.loot.providers.number.ScoreboardValue -> dux -> net.minecraft.world.level.storage.loot.providers.number.ScoreboardValue
    F:net.minecraft.world.level.storage.loot.providers.score.ScoreboardNameProvider target -> a
    F:java.lang.String score -> b
    F:float scale -> c
    M:net.minecraft.world.level.storage.loot.providers.number.LootNumberProviderType getType() -> a
    M:java.util.Set getReferencedContextParams() -> b
    M:net.minecraft.world.level.storage.loot.providers.number.ScoreboardValue fromScoreboard(net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget,java.lang.String) -> a
    M:net.minecraft.world.level.storage.loot.providers.number.ScoreboardValue fromScoreboard(net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget,java.lang.String,float) -> a
    M:float getFloat(net.minecraft.world.level.storage.loot.LootTableInfo) -> b
net.minecraft.world.level.storage.loot.providers.number.ScoreboardValue$Serializer -> dux$a -> net.minecraft.world.level.storage.loot.providers.number.ScoreboardValue$a
    M:net.minecraft.world.level.storage.loot.providers.number.ScoreboardValue deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.providers.number.ScoreboardValue,com.google.gson.JsonSerializationContext) -> a
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.providers.number.UniformGenerator -> duy -> net.minecraft.world.level.storage.loot.providers.number.UniformGenerator
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider min -> a
    F:net.minecraft.world.level.storage.loot.providers.number.NumberProvider max -> b
    M:net.minecraft.world.level.storage.loot.providers.number.LootNumberProviderType getType() -> a
    M:net.minecraft.world.level.storage.loot.providers.number.UniformGenerator between(float,float) -> a
    M:int getInt(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:float getFloat(net.minecraft.world.level.storage.loot.LootTableInfo) -> b
    M:java.util.Set getReferencedContextParams() -> b
net.minecraft.world.level.storage.loot.providers.number.UniformGenerator$Serializer -> duy$a -> net.minecraft.world.level.storage.loot.providers.number.UniformGenerator$a
    M:net.minecraft.world.level.storage.loot.providers.number.UniformGenerator deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.providers.number.UniformGenerator,com.google.gson.JsonSerializationContext) -> a
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.providers.score.ContextScoreboardNameProvider -> dva -> net.minecraft.world.level.storage.loot.providers.score.ContextScoreboardNameProvider
    F:net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget target -> a
    M:net.minecraft.world.level.storage.loot.providers.score.ScoreboardNameProvider forTarget(net.minecraft.world.level.storage.loot.LootTableInfo$EntityTarget) -> a
    M:net.minecraft.world.level.storage.loot.providers.score.LootScoreProviderType getType() -> a
    M:java.lang.String getScoreboardName(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:java.util.Set getReferencedContextParams() -> b
net.minecraft.world.level.storage.loot.providers.score.ContextScoreboardNameProvider$InlineSerializer -> dva$a -> net.minecraft.world.level.storage.loot.providers.score.ContextScoreboardNameProvider$a
    M:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.providers.score.ContextScoreboardNameProvider,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.providers.score.ContextScoreboardNameProvider deserialize(com.google.gson.JsonElement,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonElement,com.google.gson.JsonDeserializationContext) -> a
    M:com.google.gson.JsonElement serialize(java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.providers.score.ContextScoreboardNameProvider$Serializer -> dva$b -> net.minecraft.world.level.storage.loot.providers.score.ContextScoreboardNameProvider$b
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.providers.score.ContextScoreboardNameProvider,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.providers.score.ContextScoreboardNameProvider deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.providers.score.FixedScoreboardNameProvider -> dvb -> net.minecraft.world.level.storage.loot.providers.score.FixedScoreboardNameProvider
    F:java.lang.String name -> a
    M:net.minecraft.world.level.storage.loot.providers.score.ScoreboardNameProvider forName(java.lang.String) -> a
    M:net.minecraft.world.level.storage.loot.providers.score.LootScoreProviderType getType() -> a
    M:java.lang.String getName() -> c
    M:java.lang.String getScoreboardName(net.minecraft.world.level.storage.loot.LootTableInfo) -> a
    M:java.util.Set getReferencedContextParams() -> b
net.minecraft.world.level.storage.loot.providers.score.FixedScoreboardNameProvider$Serializer -> dvb$a -> net.minecraft.world.level.storage.loot.providers.score.FixedScoreboardNameProvider$a
    M:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.providers.score.FixedScoreboardNameProvider,com.google.gson.JsonSerializationContext) -> a
    M:net.minecraft.world.level.storage.loot.providers.score.FixedScoreboardNameProvider deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    M:java.lang.Object deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    M:void serialize(com.google.gson.JsonObject,java.lang.Object,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.providers.score.LootScoreProviderType -> dvc -> net.minecraft.world.level.storage.loot.providers.score.LootScoreProviderType
net.minecraft.world.level.storage.loot.providers.score.ScoreboardNameProvider -> dvd -> net.minecraft.world.level.storage.loot.providers.score.ScoreboardNameProvider
net.minecraft.world.level.storage.loot.providers.score.ScoreboardNameProviders -> dve -> net.minecraft.world.level.storage.loot.providers.score.ScoreboardNameProviders
    F:net.minecraft.world.level.storage.loot.providers.score.LootScoreProviderType FIXED -> a
    F:net.minecraft.world.level.storage.loot.providers.score.LootScoreProviderType CONTEXT -> b
    M:net.minecraft.world.level.storage.loot.providers.score.LootScoreProviderType register(java.lang.String,net.minecraft.world.level.storage.loot.LootSerializer) -> a
    M:java.lang.Object createGsonAdapter() -> a
net.minecraft.world.level.timers.FunctionCallback -> dvh -> net.minecraft.world.level.timers.CustomFunctionCallback
    F:net.minecraft.resources.MinecraftKey functionId -> a
    M:void handle(net.minecraft.server.MinecraftServer,net.minecraft.world.level.timers.CustomFunctionCallbackTimerQueue,long) -> a
    M:void handle(java.lang.Object,net.minecraft.world.level.timers.CustomFunctionCallbackTimerQueue,long) -> handle
net.minecraft.world.level.timers.FunctionCallback$Serializer -> dvh$a -> net.minecraft.world.level.timers.CustomFunctionCallback$a
    M:void serialize(net.minecraft.nbt.NBTTagCompound,net.minecraft.world.level.timers.CustomFunctionCallback) -> a
    M:net.minecraft.world.level.timers.CustomFunctionCallback deserialize(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.level.timers.CustomFunctionCallbackTimer deserialize(net.minecraft.nbt.NBTTagCompound) -> b
    M:void serialize(net.minecraft.nbt.NBTTagCompound,net.minecraft.world.level.timers.CustomFunctionCallbackTimer) -> a
net.minecraft.world.level.timers.FunctionTagCallback -> dvi -> net.minecraft.world.level.timers.CustomFunctionCallbackTag
    F:net.minecraft.resources.MinecraftKey tagId -> a
    M:void handle(net.minecraft.server.MinecraftServer,net.minecraft.world.level.timers.CustomFunctionCallbackTimerQueue,long) -> a
    M:void handle(java.lang.Object,net.minecraft.world.level.timers.CustomFunctionCallbackTimerQueue,long) -> handle
net.minecraft.world.level.timers.FunctionTagCallback$Serializer -> dvi$a -> net.minecraft.world.level.timers.CustomFunctionCallbackTag$a
    M:void serialize(net.minecraft.nbt.NBTTagCompound,net.minecraft.world.level.timers.CustomFunctionCallbackTag) -> a
    M:net.minecraft.world.level.timers.CustomFunctionCallbackTag deserialize(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.world.level.timers.CustomFunctionCallbackTimer deserialize(net.minecraft.nbt.NBTTagCompound) -> b
    M:void serialize(net.minecraft.nbt.NBTTagCompound,net.minecraft.world.level.timers.CustomFunctionCallbackTimer) -> a
net.minecraft.world.level.timers.TimerCallback -> dvj -> net.minecraft.world.level.timers.CustomFunctionCallbackTimer
net.minecraft.world.level.timers.TimerCallback$Serializer -> dvj$a -> net.minecraft.world.level.timers.CustomFunctionCallbackTimer$a
    F:net.minecraft.resources.MinecraftKey id -> a
    F:java.lang.Class cls -> b
    M:net.minecraft.resources.MinecraftKey getId() -> a
    M:java.lang.Class getCls() -> b
net.minecraft.world.level.timers.TimerCallbacks -> dvk -> net.minecraft.world.level.timers.CustomFunctionCallbackTimers
    F:org.slf4j.Logger LOGGER -> b
    F:net.minecraft.world.level.timers.CustomFunctionCallbackTimers SERVER_CALLBACKS -> a
    F:java.util.Map idToSerializer -> c
    F:java.util.Map classToSerializer -> d
    M:net.minecraft.world.level.timers.CustomFunctionCallbackTimers register(net.minecraft.world.level.timers.TimerCallback$Serializer) -> a
    M:net.minecraft.world.level.timers.TimerCallback$Serializer getSerializer(java.lang.Class) -> a
    M:net.minecraft.nbt.NBTTagCompound serialize(net.minecraft.world.level.timers.CustomFunctionCallbackTimer) -> a
    M:net.minecraft.world.level.timers.CustomFunctionCallbackTimer deserialize(net.minecraft.nbt.NBTTagCompound) -> a
net.minecraft.world.level.timers.TimerQueue -> dvl -> net.minecraft.world.level.timers.CustomFunctionCallbackTimerQueue
    F:org.slf4j.Logger LOGGER -> a
    F:java.lang.String CALLBACK_DATA_TAG -> b
    F:java.lang.String TIMER_NAME_TAG -> c
    F:java.lang.String TIMER_TRIGGER_TIME_TAG -> d
    F:net.minecraft.world.level.timers.CustomFunctionCallbackTimers callbacksRegistry -> e
    F:java.util.Queue queue -> f
    F:com.google.common.primitives.UnsignedLong sequentialId -> g
    F:com.google.common.collect.Table events -> h
    M:java.util.Comparator createComparator() -> c
    M:void tick(java.lang.Object,long) -> a
    M:void schedule(java.lang.String,long,net.minecraft.world.level.timers.CustomFunctionCallbackTimer) -> a
    M:int remove(java.lang.String) -> a
    M:java.util.Set getEventsIds() -> a
    M:void loadEvent(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagCompound storeEvent(net.minecraft.world.level.timers.TimerQueue$Event) -> a
    M:net.minecraft.nbt.NBTTagList store() -> b
net.minecraft.world.level.timers.TimerQueue$Event -> dvl$a -> net.minecraft.world.level.timers.CustomFunctionCallbackTimerQueue$a
    F:long triggerTime -> a
    F:com.google.common.primitives.UnsignedLong sequentialId -> b
    F:java.lang.String id -> c
    F:net.minecraft.world.level.timers.CustomFunctionCallbackTimer callback -> d
net.minecraft.world.phys.AABB -> dvo -> net.minecraft.world.phys.AxisAlignedBB
    F:double EPSILON -> g
    F:double minX -> a
    F:double minY -> b
    F:double minZ -> c
    F:double maxX -> d
    F:double maxY -> e
    F:double maxZ -> f
    M:net.minecraft.world.phys.AxisAlignedBB of(net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:net.minecraft.world.phys.AxisAlignedBB unitCubeFromLowerCorner(net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.world.phys.AxisAlignedBB setMinX(double) -> a
    M:net.minecraft.world.phys.AxisAlignedBB setMinY(double) -> b
    M:net.minecraft.world.phys.AxisAlignedBB setMinZ(double) -> c
    M:net.minecraft.world.phys.AxisAlignedBB setMaxX(double) -> d
    M:net.minecraft.world.phys.AxisAlignedBB setMaxY(double) -> e
    M:net.minecraft.world.phys.AxisAlignedBB setMaxZ(double) -> f
    M:double min(net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:double max(net.minecraft.core.EnumDirection$EnumAxis) -> b
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.phys.AxisAlignedBB contract(double,double,double) -> a
    M:net.minecraft.world.phys.AxisAlignedBB expandTowards(net.minecraft.world.phys.Vec3D) -> b
    M:net.minecraft.world.phys.AxisAlignedBB expandTowards(double,double,double) -> b
    M:net.minecraft.world.phys.AxisAlignedBB inflate(double,double,double) -> c
    M:net.minecraft.world.phys.AxisAlignedBB inflate(double) -> g
    M:net.minecraft.world.phys.AxisAlignedBB intersect(net.minecraft.world.phys.AxisAlignedBB) -> a
    M:net.minecraft.world.phys.AxisAlignedBB minmax(net.minecraft.world.phys.AxisAlignedBB) -> b
    M:net.minecraft.world.phys.AxisAlignedBB move(double,double,double) -> d
    M:net.minecraft.world.phys.AxisAlignedBB move(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.AxisAlignedBB move(net.minecraft.world.phys.Vec3D) -> c
    M:boolean intersects(net.minecraft.world.phys.AxisAlignedBB) -> c
    M:boolean intersects(double,double,double,double,double,double) -> a
    M:boolean intersects(net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D) -> a
    M:boolean contains(net.minecraft.world.phys.Vec3D) -> d
    M:boolean contains(double,double,double) -> e
    M:double getSize() -> a
    M:double getXsize() -> b
    M:double getYsize() -> c
    M:double getZsize() -> d
    M:net.minecraft.world.phys.AxisAlignedBB deflate(double,double,double) -> f
    M:net.minecraft.world.phys.AxisAlignedBB deflate(double) -> h
    M:java.util.Optional clip(net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D) -> b
    M:net.minecraft.world.phys.MovingObjectPositionBlock clip(java.lang.Iterable,net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.EnumDirection getDirection(net.minecraft.world.phys.AxisAlignedBB,net.minecraft.world.phys.Vec3D,double[],net.minecraft.core.EnumDirection,double,double,double) -> a
    M:net.minecraft.core.EnumDirection clipPoint(double[],net.minecraft.core.EnumDirection,double,double,double,double,double,double,double,double,net.minecraft.core.EnumDirection,double,double,double) -> a
    M:boolean hasNaN() -> e
    M:net.minecraft.world.phys.Vec3D getCenter() -> f
    M:net.minecraft.world.phys.AxisAlignedBB ofSize(net.minecraft.world.phys.Vec3D,double,double,double) -> a
net.minecraft.world.phys.BlockHitResult -> dvp -> net.minecraft.world.phys.MovingObjectPositionBlock
    F:net.minecraft.core.EnumDirection direction -> b
    F:net.minecraft.core.BlockPosition blockPos -> c
    F:boolean miss -> d
    F:boolean inside -> e
    M:net.minecraft.world.phys.MovingObjectPositionBlock miss(net.minecraft.world.phys.Vec3D,net.minecraft.core.EnumDirection,net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.world.phys.MovingObjectPositionBlock withDirection(net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.phys.MovingObjectPositionBlock withPosition(net.minecraft.core.BlockPosition) -> a
    M:net.minecraft.core.BlockPosition getBlockPos() -> a
    M:net.minecraft.core.EnumDirection getDirection() -> b
    M:net.minecraft.world.phys.MovingObjectPosition$EnumMovingObjectType getType() -> c
    M:boolean isInside() -> d
net.minecraft.world.phys.EntityHitResult -> dvq -> net.minecraft.world.phys.MovingObjectPositionEntity
    F:net.minecraft.world.entity.Entity entity -> b
    M:net.minecraft.world.entity.Entity getEntity() -> a
    M:net.minecraft.world.phys.MovingObjectPosition$EnumMovingObjectType getType() -> c
net.minecraft.world.phys.HitResult -> dvr -> net.minecraft.world.phys.MovingObjectPosition
    F:net.minecraft.world.phys.Vec3D location -> a
    M:double distanceTo(net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.world.phys.Vec3D getLocation() -> e
net.minecraft.world.phys.HitResult$Type -> dvr$a -> net.minecraft.world.phys.MovingObjectPosition$EnumMovingObjectType
    F:net.minecraft.world.phys.MovingObjectPosition$EnumMovingObjectType MISS -> a
    F:net.minecraft.world.phys.MovingObjectPosition$EnumMovingObjectType BLOCK -> b
    F:net.minecraft.world.phys.MovingObjectPosition$EnumMovingObjectType ENTITY -> c
net.minecraft.world.phys.Vec2 -> dvs -> net.minecraft.world.phys.Vec2F
    F:net.minecraft.world.phys.Vec2F ZERO -> a
    F:net.minecraft.world.phys.Vec2F ONE -> b
    F:net.minecraft.world.phys.Vec2F UNIT_X -> c
    F:net.minecraft.world.phys.Vec2F NEG_UNIT_X -> d
    F:net.minecraft.world.phys.Vec2F UNIT_Y -> e
    F:net.minecraft.world.phys.Vec2F NEG_UNIT_Y -> f
    F:net.minecraft.world.phys.Vec2F MAX -> g
    F:net.minecraft.world.phys.Vec2F MIN -> h
    F:float x -> i
    F:float y -> j
    M:net.minecraft.world.phys.Vec2F scale(float) -> a
    M:float dot(net.minecraft.world.phys.Vec2F) -> a
    M:net.minecraft.world.phys.Vec2F add(net.minecraft.world.phys.Vec2F) -> b
    M:net.minecraft.world.phys.Vec2F add(float) -> b
    M:boolean equals(net.minecraft.world.phys.Vec2F) -> c
    M:net.minecraft.world.phys.Vec2F normalized() -> a
    M:float length() -> b
    M:float lengthSquared() -> c
    M:float distanceToSqr(net.minecraft.world.phys.Vec2F) -> d
    M:net.minecraft.world.phys.Vec2F negated() -> d
net.minecraft.world.phys.Vec3 -> dvt -> net.minecraft.world.phys.Vec3D
    F:com.mojang.serialization.Codec CODEC -> a
    F:net.minecraft.world.phys.Vec3D ZERO -> b
    F:double x -> c
    F:double y -> d
    F:double z -> e
    M:net.minecraft.world.phys.Vec3D fromRGB24(int) -> a
    M:net.minecraft.world.phys.Vec3D atCenterOf(net.minecraft.core.BaseBlockPosition) -> a
    M:net.minecraft.world.phys.Vec3D atLowerCornerOf(net.minecraft.core.BaseBlockPosition) -> b
    M:net.minecraft.world.phys.Vec3D atBottomCenterOf(net.minecraft.core.BaseBlockPosition) -> c
    M:net.minecraft.world.phys.Vec3D upFromBottomCenterOf(net.minecraft.core.BaseBlockPosition,double) -> a
    M:net.minecraft.world.phys.Vec3D vectorTo(net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.world.phys.Vec3D normalize() -> d
    M:double dot(net.minecraft.world.phys.Vec3D) -> b
    M:net.minecraft.world.phys.Vec3D cross(net.minecraft.world.phys.Vec3D) -> c
    M:net.minecraft.world.phys.Vec3D subtract(net.minecraft.world.phys.Vec3D) -> d
    M:net.minecraft.world.phys.Vec3D subtract(double,double,double) -> a
    M:net.minecraft.world.phys.Vec3D add(net.minecraft.world.phys.Vec3D) -> e
    M:net.minecraft.world.phys.Vec3D add(double,double,double) -> b
    M:boolean closerThan(net.minecraft.core.IPosition,double) -> a
    M:double distanceTo(net.minecraft.world.phys.Vec3D) -> f
    M:double distanceToSqr(net.minecraft.world.phys.Vec3D) -> g
    M:double distanceToSqr(double,double,double) -> c
    M:net.minecraft.world.phys.Vec3D scale(double) -> a
    M:net.minecraft.world.phys.Vec3D reverse() -> e
    M:net.minecraft.world.phys.Vec3D multiply(net.minecraft.world.phys.Vec3D) -> h
    M:net.minecraft.world.phys.Vec3D multiply(double,double,double) -> d
    M:double length() -> f
    M:double lengthSqr() -> g
    M:double horizontalDistance() -> h
    M:double horizontalDistanceSqr() -> i
    M:boolean equals(java.lang.Object) -> equals
    M:net.minecraft.world.phys.Vec3D lerp(net.minecraft.world.phys.Vec3D,double) -> a
    M:net.minecraft.world.phys.Vec3D xRot(float) -> a
    M:net.minecraft.world.phys.Vec3D yRot(float) -> b
    M:net.minecraft.world.phys.Vec3D zRot(float) -> c
    M:net.minecraft.world.phys.Vec3D directionFromRotation(net.minecraft.world.phys.Vec2F) -> a
    M:net.minecraft.world.phys.Vec3D directionFromRotation(float,float) -> a
    M:net.minecraft.world.phys.Vec3D align(java.util.EnumSet) -> a
    M:double get(net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:net.minecraft.world.phys.Vec3D with(net.minecraft.core.EnumDirection$EnumAxis,double) -> a
    M:net.minecraft.world.phys.Vec3D relative(net.minecraft.core.EnumDirection,double) -> a
    M:double x() -> a
    M:double y() -> b
    M:double z() -> c
net.minecraft.world.phys.shapes.ArrayVoxelShape -> dvv -> net.minecraft.world.phys.shapes.VoxelShapeArray
    F:it.unimi.dsi.fastutil.doubles.DoubleList xs -> b
    F:it.unimi.dsi.fastutil.doubles.DoubleList ys -> c
    F:it.unimi.dsi.fastutil.doubles.DoubleList zs -> d
    M:it.unimi.dsi.fastutil.doubles.DoubleList getCoords(net.minecraft.core.EnumDirection$EnumAxis) -> a
net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape -> dvw -> net.minecraft.world.phys.shapes.VoxelShapeBitSet
    F:java.util.BitSet storage -> d
    F:int xMin -> e
    F:int yMin -> f
    F:int zMin -> g
    F:int xMax -> h
    F:int yMax -> i
    F:int zMax -> j
    M:net.minecraft.world.phys.shapes.VoxelShapeBitSet withFilledBounds(int,int,int,int,int,int,int,int,int) -> a
    M:int getIndex(int,int,int) -> a
    M:boolean isFull(int,int,int) -> b
    M:void fillUpdateBounds(int,int,int,boolean) -> a
    M:void fill(int,int,int) -> c
    M:boolean isEmpty() -> a
    M:int firstFull(net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:int lastFull(net.minecraft.core.EnumDirection$EnumAxis) -> b
    M:net.minecraft.world.phys.shapes.VoxelShapeBitSet join(net.minecraft.world.phys.shapes.VoxelShapeDiscrete,net.minecraft.world.phys.shapes.VoxelShapeDiscrete,net.minecraft.world.phys.shapes.VoxelShapeMerger,net.minecraft.world.phys.shapes.VoxelShapeMerger,net.minecraft.world.phys.shapes.VoxelShapeMerger,net.minecraft.world.phys.shapes.OperatorBoolean) -> a
    M:void forAllBoxes(net.minecraft.world.phys.shapes.VoxelShapeDiscrete,net.minecraft.world.phys.shapes.DiscreteVoxelShape$IntLineConsumer,boolean) -> a
    M:boolean isZStripFull(int,int,int,int) -> a
    M:boolean isXZRectangleFull(int,int,int,int,int) -> a
    M:void clearZStrip(int,int,int,int) -> b
net.minecraft.world.phys.shapes.BooleanOp -> dvx -> net.minecraft.world.phys.shapes.OperatorBoolean
    F:net.minecraft.world.phys.shapes.OperatorBoolean FALSE -> a
    F:net.minecraft.world.phys.shapes.OperatorBoolean NOT_OR -> b
    F:net.minecraft.world.phys.shapes.OperatorBoolean ONLY_SECOND -> c
    F:net.minecraft.world.phys.shapes.OperatorBoolean NOT_FIRST -> d
    F:net.minecraft.world.phys.shapes.OperatorBoolean ONLY_FIRST -> e
    F:net.minecraft.world.phys.shapes.OperatorBoolean NOT_SECOND -> f
    F:net.minecraft.world.phys.shapes.OperatorBoolean NOT_SAME -> g
    F:net.minecraft.world.phys.shapes.OperatorBoolean NOT_AND -> h
    F:net.minecraft.world.phys.shapes.OperatorBoolean AND -> i
    F:net.minecraft.world.phys.shapes.OperatorBoolean SAME -> j
    F:net.minecraft.world.phys.shapes.OperatorBoolean SECOND -> k
    F:net.minecraft.world.phys.shapes.OperatorBoolean CAUSES -> l
    F:net.minecraft.world.phys.shapes.OperatorBoolean FIRST -> m
    F:net.minecraft.world.phys.shapes.OperatorBoolean CAUSED_BY -> n
    F:net.minecraft.world.phys.shapes.OperatorBoolean OR -> o
    F:net.minecraft.world.phys.shapes.OperatorBoolean TRUE -> p
net.minecraft.world.phys.shapes.CollisionContext -> dvy -> net.minecraft.world.phys.shapes.VoxelShapeCollision
    M:net.minecraft.world.phys.shapes.VoxelShapeCollision empty() -> a
    M:net.minecraft.world.phys.shapes.VoxelShapeCollision of(net.minecraft.world.entity.Entity) -> a
net.minecraft.world.phys.shapes.CubePointRange -> dvz -> net.minecraft.world.phys.shapes.VoxelShapeCubePoint
    F:int parts -> a
    M:int size() -> size
net.minecraft.world.phys.shapes.CubeVoxelShape -> dwa -> net.minecraft.world.phys.shapes.VoxelShapeCube
    M:it.unimi.dsi.fastutil.doubles.DoubleList getCoords(net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:int findIndex(net.minecraft.core.EnumDirection$EnumAxis,double) -> a
net.minecraft.world.phys.shapes.DiscreteCubeMerger -> dwb -> net.minecraft.world.phys.shapes.VoxelShapeCubeMerger
    F:net.minecraft.world.phys.shapes.VoxelShapeCubePoint result -> a
    F:int firstDiv -> b
    F:int secondDiv -> c
    M:boolean forMergedIndexes(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer) -> a
    M:int size() -> size
    M:it.unimi.dsi.fastutil.doubles.DoubleList getList() -> a
net.minecraft.world.phys.shapes.DiscreteVoxelShape -> dwc -> net.minecraft.world.phys.shapes.VoxelShapeDiscrete
    F:int xSize -> a
    F:int ySize -> b
    F:int zSize -> c
    M:boolean isFullWide(net.minecraft.core.EnumAxisCycle,int,int,int) -> a
    M:boolean isFullWide(int,int,int) -> d
    M:boolean isFull(net.minecraft.core.EnumAxisCycle,int,int,int) -> b
    M:boolean isEmpty() -> a
    M:int firstFull(net.minecraft.core.EnumDirection$EnumAxis,int,int) -> a
    M:int lastFull(net.minecraft.core.EnumDirection$EnumAxis,int,int) -> b
    M:int getSize(net.minecraft.core.EnumDirection$EnumAxis) -> c
    M:int getXSize() -> b
    M:int getYSize() -> c
    M:int getZSize() -> d
    M:void forAllEdges(net.minecraft.world.phys.shapes.DiscreteVoxelShape$IntLineConsumer,boolean) -> a
    M:void forAllAxisEdges(net.minecraft.world.phys.shapes.DiscreteVoxelShape$IntLineConsumer,net.minecraft.core.EnumAxisCycle,boolean) -> a
    M:void forAllBoxes(net.minecraft.world.phys.shapes.DiscreteVoxelShape$IntLineConsumer,boolean) -> b
    M:void forAllFaces(net.minecraft.world.phys.shapes.DiscreteVoxelShape$IntFaceConsumer) -> a
    M:void forAllAxisFaces(net.minecraft.world.phys.shapes.DiscreteVoxelShape$IntFaceConsumer,net.minecraft.core.EnumAxisCycle) -> a
net.minecraft.world.phys.shapes.DiscreteVoxelShape$IntFaceConsumer -> dwc$a -> net.minecraft.world.phys.shapes.VoxelShapeDiscrete$a
net.minecraft.world.phys.shapes.DiscreteVoxelShape$IntLineConsumer -> dwc$b -> net.minecraft.world.phys.shapes.VoxelShapeDiscrete$b
net.minecraft.world.phys.shapes.EntityCollisionContext -> dwd -> net.minecraft.world.phys.shapes.VoxelShapeCollisionEntity
    F:net.minecraft.world.phys.shapes.VoxelShapeCollision EMPTY -> a
    F:boolean descending -> b
    F:double entityBottom -> c
    F:net.minecraft.world.item.ItemStack heldItem -> d
    F:java.util.function.Predicate canStandOnFluid -> e
    F:net.minecraft.world.entity.Entity entity -> f
    M:boolean isHoldingItem(net.minecraft.world.item.Item) -> a
    M:boolean canStandOnFluid(net.minecraft.world.level.material.Fluid,net.minecraft.world.level.material.Fluid) -> a
    M:boolean isDescending() -> b
    M:boolean isAbove(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.core.BlockPosition,boolean) -> a
    M:net.minecraft.world.entity.Entity getEntity() -> c
    M:boolean isAbove(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.core.BlockPosition,boolean) -> a
net.minecraft.world.phys.shapes.IdenticalMerger -> dwe -> net.minecraft.world.phys.shapes.VoxelShapeMergerIdentical
    F:it.unimi.dsi.fastutil.doubles.DoubleList coords -> a
    M:boolean forMergedIndexes(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer) -> a
    M:int size() -> size
    M:it.unimi.dsi.fastutil.doubles.DoubleList getList() -> a
net.minecraft.world.phys.shapes.IndexMerger -> dwf -> net.minecraft.world.phys.shapes.VoxelShapeMerger
net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer -> dwf$a -> net.minecraft.world.phys.shapes.VoxelShapeMerger$a
net.minecraft.world.phys.shapes.IndirectMerger -> dwg -> net.minecraft.world.phys.shapes.VoxelShapeMergerList
    F:it.unimi.dsi.fastutil.doubles.DoubleList EMPTY -> a
    F:int resultLength -> e
    M:boolean forMergedIndexes(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer) -> a
    M:int size() -> size
    M:it.unimi.dsi.fastutil.doubles.DoubleList getList() -> a
net.minecraft.world.phys.shapes.NonOverlappingMerger -> dwh -> net.minecraft.world.phys.shapes.VoxelShapeMergerDisjoint
    F:it.unimi.dsi.fastutil.doubles.DoubleList lower -> a
    F:it.unimi.dsi.fastutil.doubles.DoubleList upper -> b
    F:boolean swap -> c
    M:int size() -> size
    M:boolean forMergedIndexes(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer) -> a
    M:boolean forNonSwappedIndexes(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer) -> b
    M:it.unimi.dsi.fastutil.doubles.DoubleList getList() -> a
net.minecraft.world.phys.shapes.OffsetDoubleList -> dwi -> net.minecraft.world.phys.shapes.DoubleListOffset
    F:it.unimi.dsi.fastutil.doubles.DoubleList delegate -> a
    F:double offset -> b
    M:int size() -> size
net.minecraft.world.phys.shapes.Shapes -> dwj -> net.minecraft.world.phys.shapes.VoxelShapes
    F:double EPSILON -> a
    F:double BIG_EPSILON -> b
    F:net.minecraft.world.phys.shapes.VoxelShape BLOCK -> d
    F:net.minecraft.world.phys.shapes.VoxelShape INFINITY -> c
    F:net.minecraft.world.phys.shapes.VoxelShape EMPTY -> e
    M:net.minecraft.world.phys.shapes.VoxelShape empty() -> a
    M:net.minecraft.world.phys.shapes.VoxelShape block() -> b
    M:net.minecraft.world.phys.shapes.VoxelShape box(double,double,double,double,double,double) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape create(double,double,double,double,double,double) -> b
    M:net.minecraft.world.phys.shapes.VoxelShape create(net.minecraft.world.phys.AxisAlignedBB) -> a
    M:int findBits(double,double) -> a
    M:long lcm(int,int) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape or(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape or(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape[]) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape join(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.OperatorBoolean) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape joinUnoptimized(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.OperatorBoolean) -> b
    M:boolean joinIsNotEmpty(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.OperatorBoolean) -> c
    M:boolean joinIsNotEmpty(net.minecraft.world.phys.shapes.VoxelShapeMerger,net.minecraft.world.phys.shapes.VoxelShapeMerger,net.minecraft.world.phys.shapes.VoxelShapeMerger,net.minecraft.world.phys.shapes.VoxelShapeDiscrete,net.minecraft.world.phys.shapes.VoxelShapeDiscrete,net.minecraft.world.phys.shapes.OperatorBoolean) -> a
    M:double collide(net.minecraft.core.EnumDirection$EnumAxis,net.minecraft.world.phys.AxisAlignedBB,java.lang.Iterable,double) -> a
    M:boolean blockOccudes(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getFaceShape(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.core.EnumDirection) -> a
    M:boolean mergedFaceOccludes(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.core.EnumDirection) -> b
    M:boolean faceShapeOccludes(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape) -> b
    M:net.minecraft.world.phys.shapes.VoxelShapeMerger createIndexMerger(int,it.unimi.dsi.fastutil.doubles.DoubleList,it.unimi.dsi.fastutil.doubles.DoubleList,boolean,boolean) -> a
net.minecraft.world.phys.shapes.Shapes$DoubleLineConsumer -> dwj$a -> net.minecraft.world.phys.shapes.VoxelShapes$a
net.minecraft.world.phys.shapes.SliceShape -> dwk -> net.minecraft.world.phys.shapes.VoxelShapeSlice
    F:net.minecraft.world.phys.shapes.VoxelShape delegate -> b
    F:net.minecraft.core.EnumDirection$EnumAxis axis -> c
    F:it.unimi.dsi.fastutil.doubles.DoubleList SLICE_COORDS -> d
    M:net.minecraft.world.phys.shapes.VoxelShapeDiscrete makeSlice(net.minecraft.world.phys.shapes.VoxelShapeDiscrete,net.minecraft.core.EnumDirection$EnumAxis,int) -> a
    M:it.unimi.dsi.fastutil.doubles.DoubleList getCoords(net.minecraft.core.EnumDirection$EnumAxis) -> a
net.minecraft.world.phys.shapes.SubShape -> dwl -> net.minecraft.world.phys.shapes.VoxelShapeDiscreteSlice
    F:net.minecraft.world.phys.shapes.VoxelShapeDiscrete parent -> d
    F:int startX -> e
    F:int startY -> f
    F:int startZ -> g
    F:int endX -> h
    F:int endY -> i
    F:int endZ -> j
    M:boolean isFull(int,int,int) -> b
    M:void fill(int,int,int) -> c
    M:int firstFull(net.minecraft.core.EnumDirection$EnumAxis) -> a
    M:int lastFull(net.minecraft.core.EnumDirection$EnumAxis) -> b
    M:int clampToShape(net.minecraft.core.EnumDirection$EnumAxis,int) -> a
net.minecraft.world.phys.shapes.VoxelShape -> dwm -> net.minecraft.world.phys.shapes.VoxelShape
    F:net.minecraft.world.phys.shapes.VoxelShapeDiscrete shape -> a
    M:double min(net.minecraft.core.EnumDirection$EnumAxis) -> b
    M:double max(net.minecraft.core.EnumDirection$EnumAxis) -> c
    M:net.minecraft.world.phys.AxisAlignedBB bounds() -> a
    M:double get(net.minecraft.core.EnumDirection$EnumAxis,int) -> a
    M:boolean isEmpty() -> b
    M:net.minecraft.world.phys.shapes.VoxelShape move(double,double,double) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape optimize() -> c
    M:void forAllEdges(net.minecraft.world.phys.shapes.Shapes$DoubleLineConsumer) -> a
    M:void forAllBoxes(net.minecraft.world.phys.shapes.Shapes$DoubleLineConsumer) -> b
    M:java.util.List toAabbs() -> d
    M:double min(net.minecraft.core.EnumDirection$EnumAxis,double,double) -> a
    M:double max(net.minecraft.core.EnumDirection$EnumAxis,double,double) -> b
    M:int findIndex(net.minecraft.core.EnumDirection$EnumAxis,double) -> a
    M:net.minecraft.world.phys.MovingObjectPositionBlock clip(net.minecraft.world.phys.Vec3D,net.minecraft.world.phys.Vec3D,net.minecraft.core.BlockPosition) -> a
    M:java.util.Optional closestPointTo(net.minecraft.world.phys.Vec3D) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape getFaceShape(net.minecraft.core.EnumDirection) -> a
    M:net.minecraft.world.phys.shapes.VoxelShape calculateFace(net.minecraft.core.EnumDirection) -> b
    M:double collide(net.minecraft.core.EnumDirection$EnumAxis,net.minecraft.world.phys.AxisAlignedBB,double) -> a
    M:double collideX(net.minecraft.core.EnumAxisCycle,net.minecraft.world.phys.AxisAlignedBB,double) -> a
net.minecraft.world.scores.Objective -> dwo -> net.minecraft.world.scores.ScoreboardObjective
    F:net.minecraft.world.scores.Scoreboard scoreboard -> a
    F:java.lang.String name -> b
    F:net.minecraft.world.scores.criteria.IScoreboardCriteria criteria -> c
    F:net.minecraft.network.chat.IChatBaseComponent displayName -> d
    F:net.minecraft.network.chat.IChatBaseComponent formattedDisplayName -> e
    F:net.minecraft.world.scores.criteria.IScoreboardCriteria$EnumScoreboardHealthDisplay renderType -> f
    M:net.minecraft.world.scores.Scoreboard getScoreboard() -> a
    M:java.lang.String getName() -> b
    M:net.minecraft.world.scores.criteria.IScoreboardCriteria getCriteria() -> c
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName() -> d
    M:net.minecraft.network.chat.IChatBaseComponent createFormattedDisplayName() -> g
    M:net.minecraft.network.chat.IChatBaseComponent getFormattedDisplayName() -> e
    M:void setDisplayName(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:net.minecraft.world.scores.criteria.IScoreboardCriteria$EnumScoreboardHealthDisplay getRenderType() -> f
    M:void setRenderType(net.minecraft.world.scores.criteria.IScoreboardCriteria$EnumScoreboardHealthDisplay) -> a
net.minecraft.world.scores.PlayerTeam -> dwp -> net.minecraft.world.scores.ScoreboardTeam
    F:int BIT_FRIENDLY_FIRE -> a
    F:int BIT_SEE_INVISIBLES -> b
    F:net.minecraft.world.scores.Scoreboard scoreboard -> c
    F:java.lang.String name -> d
    F:java.util.Set players -> e
    F:net.minecraft.network.chat.IChatBaseComponent displayName -> f
    F:net.minecraft.network.chat.IChatBaseComponent playerPrefix -> g
    F:net.minecraft.network.chat.IChatBaseComponent playerSuffix -> h
    F:boolean allowFriendlyFire -> i
    F:boolean seeFriendlyInvisibles -> j
    F:net.minecraft.world.scores.ScoreboardTeamBase$EnumNameTagVisibility nameTagVisibility -> k
    F:net.minecraft.world.scores.ScoreboardTeamBase$EnumNameTagVisibility deathMessageVisibility -> l
    F:net.minecraft.EnumChatFormat color -> m
    F:net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush collisionRule -> n
    F:net.minecraft.network.chat.ChatModifier displayNameStyle -> o
    M:net.minecraft.world.scores.Scoreboard getScoreboard() -> a
    M:java.lang.String getName() -> b
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName() -> c
    M:net.minecraft.network.chat.IChatMutableComponent getFormattedDisplayName() -> d
    M:void setDisplayName(net.minecraft.network.chat.IChatBaseComponent) -> a
    M:void setPlayerPrefix(net.minecraft.network.chat.IChatBaseComponent) -> b
    M:net.minecraft.network.chat.IChatBaseComponent getPlayerPrefix() -> e
    M:void setPlayerSuffix(net.minecraft.network.chat.IChatBaseComponent) -> c
    M:net.minecraft.network.chat.IChatBaseComponent getPlayerSuffix() -> f
    M:java.util.Collection getPlayers() -> g
    M:net.minecraft.network.chat.IChatMutableComponent getFormattedName(net.minecraft.network.chat.IChatBaseComponent) -> d
    M:net.minecraft.network.chat.IChatMutableComponent formatNameForTeam(net.minecraft.world.scores.ScoreboardTeamBase,net.minecraft.network.chat.IChatBaseComponent) -> a
    M:boolean isAllowFriendlyFire() -> h
    M:void setAllowFriendlyFire(boolean) -> a
    M:boolean canSeeFriendlyInvisibles() -> i
    M:void setSeeFriendlyInvisibles(boolean) -> b
    M:net.minecraft.world.scores.ScoreboardTeamBase$EnumNameTagVisibility getNameTagVisibility() -> j
    M:net.minecraft.world.scores.ScoreboardTeamBase$EnumNameTagVisibility getDeathMessageVisibility() -> k
    M:void setNameTagVisibility(net.minecraft.world.scores.ScoreboardTeamBase$EnumNameTagVisibility) -> a
    M:void setDeathMessageVisibility(net.minecraft.world.scores.ScoreboardTeamBase$EnumNameTagVisibility) -> b
    M:net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush getCollisionRule() -> l
    M:void setCollisionRule(net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush) -> a
    M:int packOptions() -> m
    M:void unpackOptions(int) -> a
    M:void setColor(net.minecraft.EnumChatFormat) -> a
    M:net.minecraft.EnumChatFormat getColor() -> n
net.minecraft.world.scores.Score -> dwq -> net.minecraft.world.scores.ScoreboardScore
    F:java.util.Comparator SCORE_COMPARATOR -> a
    F:net.minecraft.world.scores.Scoreboard scoreboard -> b
    F:net.minecraft.world.scores.ScoreboardObjective objective -> c
    F:java.lang.String owner -> d
    F:int count -> e
    F:boolean locked -> f
    F:boolean forceUpdate -> g
    M:void add(int) -> a
    M:void increment() -> a
    M:int getScore() -> b
    M:void reset() -> c
    M:void setScore(int) -> b
    M:net.minecraft.world.scores.ScoreboardObjective getObjective() -> d
    M:java.lang.String getOwner() -> e
    M:net.minecraft.world.scores.Scoreboard getScoreboard() -> f
    M:boolean isLocked() -> g
    M:void setLocked(boolean) -> a
net.minecraft.world.scores.Scoreboard -> dwr -> net.minecraft.world.scores.Scoreboard
    F:org.slf4j.Logger LOGGER -> g
    F:int DISPLAY_SLOT_LIST -> a
    F:int DISPLAY_SLOT_SIDEBAR -> b
    F:int DISPLAY_SLOT_BELOW_NAME -> c
    F:int DISPLAY_SLOT_TEAMS_SIDEBAR_START -> d
    F:int DISPLAY_SLOT_TEAMS_SIDEBAR_END -> e
    F:int DISPLAY_SLOTS -> f
    F:java.util.Map objectivesByName -> h
    F:java.util.Map objectivesByCriteria -> i
    F:java.util.Map playerScores -> j
    F:java.util.Map teamsByName -> l
    F:java.util.Map teamsByPlayer -> m
    M:boolean hasObjective(java.lang.String) -> b
    M:net.minecraft.world.scores.ScoreboardObjective getOrCreateObjective(java.lang.String) -> c
    M:net.minecraft.world.scores.ScoreboardObjective getObjective(java.lang.String) -> d
    M:net.minecraft.world.scores.ScoreboardObjective addObjective(java.lang.String,net.minecraft.world.scores.criteria.IScoreboardCriteria,net.minecraft.network.chat.IChatBaseComponent,net.minecraft.world.scores.criteria.IScoreboardCriteria$EnumScoreboardHealthDisplay) -> a
    M:void forAllObjectives(net.minecraft.world.scores.criteria.IScoreboardCriteria,java.lang.String,java.util.function.Consumer) -> a
    M:boolean hasPlayerScore(java.lang.String,net.minecraft.world.scores.ScoreboardObjective) -> b
    M:net.minecraft.world.scores.ScoreboardScore getOrCreatePlayerScore(java.lang.String,net.minecraft.world.scores.ScoreboardObjective) -> c
    M:java.util.Collection getPlayerScores(net.minecraft.world.scores.ScoreboardObjective) -> i
    M:java.util.Collection getObjectives() -> c
    M:java.util.Collection getObjectiveNames() -> d
    M:java.util.Collection getTrackedPlayers() -> e
    M:void resetPlayerScore(java.lang.String,net.minecraft.world.scores.ScoreboardObjective) -> d
    M:java.util.Map getPlayerScores(java.lang.String) -> e
    M:void removeObjective(net.minecraft.world.scores.ScoreboardObjective) -> j
    M:void setDisplayObjective(int,net.minecraft.world.scores.ScoreboardObjective) -> a
    M:net.minecraft.world.scores.ScoreboardObjective getDisplayObjective(int) -> a
    M:net.minecraft.world.scores.ScoreboardTeam getPlayerTeam(java.lang.String) -> f
    M:net.minecraft.world.scores.ScoreboardTeam addPlayerTeam(java.lang.String) -> g
    M:void removePlayerTeam(net.minecraft.world.scores.ScoreboardTeam) -> d
    M:boolean addPlayerToTeam(java.lang.String,net.minecraft.world.scores.ScoreboardTeam) -> a
    M:boolean removePlayerFromTeam(java.lang.String) -> h
    M:void removePlayerFromTeam(java.lang.String,net.minecraft.world.scores.ScoreboardTeam) -> b
    M:java.util.Collection getTeamNames() -> f
    M:java.util.Collection getPlayerTeams() -> g
    M:net.minecraft.world.scores.ScoreboardTeam getPlayersTeam(java.lang.String) -> i
    M:void onObjectiveAdded(net.minecraft.world.scores.ScoreboardObjective) -> a
    M:void onObjectiveChanged(net.minecraft.world.scores.ScoreboardObjective) -> b
    M:void onObjectiveRemoved(net.minecraft.world.scores.ScoreboardObjective) -> c
    M:void onScoreChanged(net.minecraft.world.scores.ScoreboardScore) -> a
    M:void onPlayerRemoved(java.lang.String) -> a
    M:void onPlayerScoreRemoved(java.lang.String,net.minecraft.world.scores.ScoreboardObjective) -> a
    M:void onTeamAdded(net.minecraft.world.scores.ScoreboardTeam) -> a
    M:void onTeamChanged(net.minecraft.world.scores.ScoreboardTeam) -> b
    M:void onTeamRemoved(net.minecraft.world.scores.ScoreboardTeam) -> c
    M:java.lang.String getDisplaySlotName(int) -> b
    M:int getDisplaySlotByName(java.lang.String) -> j
    M:void entityRemoved(net.minecraft.world.entity.Entity) -> a
    M:net.minecraft.nbt.NBTTagList savePlayerScores() -> i
    M:void loadPlayerScores(net.minecraft.nbt.NBTTagList) -> a
net.minecraft.world.scores.ScoreboardSaveData -> dws -> net.minecraft.world.scores.PersistentScoreboard
    F:java.lang.String FILE_ID -> a
    F:net.minecraft.world.scores.Scoreboard scoreboard -> b
    M:net.minecraft.world.scores.PersistentScoreboard load(net.minecraft.nbt.NBTTagCompound) -> b
    M:void loadTeams(net.minecraft.nbt.NBTTagList) -> a
    M:void loadTeamPlayers(net.minecraft.world.scores.ScoreboardTeam,net.minecraft.nbt.NBTTagList) -> a
    M:void loadDisplaySlots(net.minecraft.nbt.NBTTagCompound) -> c
    M:void loadObjectives(net.minecraft.nbt.NBTTagList) -> b
    M:net.minecraft.nbt.NBTTagCompound save(net.minecraft.nbt.NBTTagCompound) -> a
    M:net.minecraft.nbt.NBTTagList saveTeams() -> a
    M:void saveDisplaySlots(net.minecraft.nbt.NBTTagCompound) -> d
    M:net.minecraft.nbt.NBTTagList saveObjectives() -> d
net.minecraft.world.scores.Team -> dwt -> net.minecraft.world.scores.ScoreboardTeamBase
    M:boolean isAlliedTo(net.minecraft.world.scores.ScoreboardTeamBase) -> a
net.minecraft.world.scores.Team$CollisionRule -> dwt$a -> net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush
    F:net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush ALWAYS -> a
    F:net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush NEVER -> b
    F:net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush PUSH_OTHER_TEAMS -> c
    F:net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush PUSH_OWN_TEAM -> d
    F:java.util.Map BY_NAME -> g
    F:java.lang.String name -> e
    F:int id -> f
    M:net.minecraft.world.scores.ScoreboardTeamBase$EnumTeamPush byName(java.lang.String) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName() -> a
net.minecraft.world.scores.Team$Visibility -> dwt$b -> net.minecraft.world.scores.ScoreboardTeamBase$EnumNameTagVisibility
    F:net.minecraft.world.scores.ScoreboardTeamBase$EnumNameTagVisibility ALWAYS -> a
    F:net.minecraft.world.scores.ScoreboardTeamBase$EnumNameTagVisibility NEVER -> b
    F:net.minecraft.world.scores.ScoreboardTeamBase$EnumNameTagVisibility HIDE_FOR_OTHER_TEAMS -> c
    F:net.minecraft.world.scores.ScoreboardTeamBase$EnumNameTagVisibility HIDE_FOR_OWN_TEAM -> d
    F:java.util.Map BY_NAME -> g
    F:java.lang.String name -> e
    F:int id -> f
    M:net.minecraft.world.scores.ScoreboardTeamBase$EnumNameTagVisibility byName(java.lang.String) -> a
    M:net.minecraft.network.chat.IChatBaseComponent getDisplayName() -> b
net.minecraft.world.scores.criteria.ObjectiveCriteria -> dwu -> net.minecraft.world.scores.criteria.IScoreboardCriteria
    F:java.util.Map CUSTOM_CRITERIA -> n
    F:java.util.Map CRITERIA_CACHE -> o
    F:net.minecraft.world.scores.criteria.IScoreboardCriteria DUMMY -> a
    F:net.minecraft.world.scores.criteria.IScoreboardCriteria TRIGGER -> b
    F:net.minecraft.world.scores.criteria.IScoreboardCriteria DEATH_COUNT -> c
    F:net.minecraft.world.scores.criteria.IScoreboardCriteria KILL_COUNT_PLAYERS -> d
    F:net.minecraft.world.scores.criteria.IScoreboardCriteria KILL_COUNT_ALL -> e
    F:net.minecraft.world.scores.criteria.IScoreboardCriteria HEALTH -> f
    F:net.minecraft.world.scores.criteria.IScoreboardCriteria FOOD -> g
    F:net.minecraft.world.scores.criteria.IScoreboardCriteria AIR -> h
    F:net.minecraft.world.scores.criteria.IScoreboardCriteria ARMOR -> i
    F:net.minecraft.world.scores.criteria.IScoreboardCriteria EXPERIENCE -> j
    F:net.minecraft.world.scores.criteria.IScoreboardCriteria LEVEL -> k
    F:java.lang.String name -> p
    F:boolean readOnly -> q
    F:net.minecraft.world.scores.criteria.IScoreboardCriteria$EnumScoreboardHealthDisplay renderType -> r
    M:net.minecraft.world.scores.criteria.IScoreboardCriteria registerCustom(java.lang.String,boolean,net.minecraft.world.scores.criteria.IScoreboardCriteria$EnumScoreboardHealthDisplay) -> a
    M:net.minecraft.world.scores.criteria.IScoreboardCriteria registerCustom(java.lang.String) -> b
    M:java.util.Set getCustomCriteriaNames() -> c
    M:java.util.Optional byName(java.lang.String) -> a
    M:java.util.Optional getStat(net.minecraft.stats.StatisticWrapper,net.minecraft.resources.MinecraftKey) -> a
    M:java.lang.String getName() -> d
    M:boolean isReadOnly() -> e
    M:net.minecraft.world.scores.criteria.IScoreboardCriteria$EnumScoreboardHealthDisplay getDefaultRenderType() -> f
net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType -> dwu$a -> net.minecraft.world.scores.criteria.IScoreboardCriteria$EnumScoreboardHealthDisplay
    F:net.minecraft.world.scores.criteria.IScoreboardCriteria$EnumScoreboardHealthDisplay INTEGER -> a
    F:net.minecraft.world.scores.criteria.IScoreboardCriteria$EnumScoreboardHealthDisplay HEARTS -> b
    F:java.lang.String id -> c
    F:java.util.Map BY_ID -> d
    M:java.lang.String getId() -> a
    M:net.minecraft.world.scores.criteria.IScoreboardCriteria$EnumScoreboardHealthDisplay byId(java.lang.String) -> a
net.minecraft.world.ticks.BlackholeTickAccess -> dwx -> net.minecraft.world.ticks.TickListEmpty
    F:net.minecraft.world.ticks.TickContainerAccess CONTAINER_BLACKHOLE -> a
    F:net.minecraft.world.ticks.LevelTickAccess LEVEL_BLACKHOLE -> b
    M:net.minecraft.world.ticks.TickContainerAccess emptyContainer() -> a
    M:net.minecraft.world.ticks.LevelTickAccess emptyLevelList() -> b
    M:void schedule(net.minecraft.world.ticks.NextTickListEntry) -> a
    M:boolean hasScheduledTick(net.minecraft.core.BlockPosition,java.lang.Object) -> a
    M:int count() -> a
    M:void schedule(net.minecraft.world.ticks.NextTickListEntry) -> a
    M:boolean hasScheduledTick(net.minecraft.core.BlockPosition,java.lang.Object) -> a
    M:boolean willTickThisTick(net.minecraft.core.BlockPosition,java.lang.Object) -> b
    M:int count() -> a
net.minecraft.world.ticks.LevelChunkTicks -> dwy -> net.minecraft.world.ticks.LevelChunkTicks
    F:java.util.Queue tickQueue -> a
    F:java.util.List pendingTicks -> b
    F:java.util.Set ticksPerPosition -> c
    F:java.util.function.BiConsumer onTickAdded -> d
    M:void setOnTickAdded(java.util.function.BiConsumer) -> a
    M:net.minecraft.world.ticks.NextTickListEntry peek() -> b
    M:net.minecraft.world.ticks.NextTickListEntry poll() -> c
    M:void schedule(net.minecraft.world.ticks.NextTickListEntry) -> a
    M:void scheduleUnchecked(net.minecraft.world.ticks.NextTickListEntry) -> b
    M:boolean hasScheduledTick(net.minecraft.core.BlockPosition,java.lang.Object) -> a
    M:void removeIf(java.util.function.Predicate) -> a
    M:java.util.stream.Stream getAll() -> d
    M:int count() -> a
    M:net.minecraft.nbt.NBTTagList save(long,java.util.function.Function) -> a
    M:void unpack(long) -> a
    M:net.minecraft.world.ticks.LevelChunkTicks load(net.minecraft.nbt.NBTTagList,java.util.function.Function,net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:net.minecraft.nbt.NBTBase save(long,java.util.function.Function) -> b
net.minecraft.world.ticks.LevelTickAccess -> dwz -> net.minecraft.world.ticks.LevelTickAccess
net.minecraft.world.ticks.LevelTicks -> dxa -> net.minecraft.world.ticks.TickListServer
    F:java.util.Comparator CONTAINER_DRAIN_ORDER -> a
    F:java.util.function.LongPredicate tickCheck -> b
    F:java.util.function.Supplier profiler -> c
    F:it.unimi.dsi.fastutil.longs.Long2ObjectMap allContainers -> d
    F:it.unimi.dsi.fastutil.longs.Long2LongMap nextTickForContainer -> e
    F:java.util.Queue containersToTick -> f
    F:java.util.Queue toRunThisTick -> g
    F:java.util.List alreadyRunThisTick -> h
    F:java.util.Set toRunThisTickSet -> i
    F:java.util.function.BiConsumer chunkScheduleUpdater -> j
    M:void addContainer(net.minecraft.world.level.ChunkCoordIntPair,net.minecraft.world.ticks.LevelChunkTicks) -> a
    M:void removeContainer(net.minecraft.world.level.ChunkCoordIntPair) -> a
    M:void schedule(net.minecraft.world.ticks.NextTickListEntry) -> a
    M:void tick(long,int,java.util.function.BiConsumer) -> a
    M:void collectTicks(long,int,net.minecraft.util.profiling.GameProfilerFiller) -> a
    M:void sortContainersToTick(long) -> a
    M:void drainContainers(long,int) -> a
    M:void rescheduleLeftoverContainers() -> b
    M:void updateContainerScheduling(net.minecraft.world.ticks.NextTickListEntry) -> b
    M:void drainFromCurrentContainer(java.util.Queue,net.minecraft.world.ticks.LevelChunkTicks,long,int) -> a
    M:void scheduleForThisTick(net.minecraft.world.ticks.NextTickListEntry) -> c
    M:boolean canScheduleMoreTicks(int) -> a
    M:void runCollectedTicks(java.util.function.BiConsumer) -> a
    M:void cleanupAfterTick() -> c
    M:boolean hasScheduledTick(net.minecraft.core.BlockPosition,java.lang.Object) -> a
    M:boolean willTickThisTick(net.minecraft.core.BlockPosition,java.lang.Object) -> b
    M:void calculateTickSetIfNeeded() -> d
    M:void forContainersInArea(net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.world.ticks.LevelTicks$PosAndContainerConsumer) -> a
    M:void clearArea(net.minecraft.world.level.levelgen.structure.StructureBoundingBox) -> a
    M:void copyArea(net.minecraft.world.level.levelgen.structure.StructureBoundingBox,net.minecraft.core.BaseBlockPosition) -> a
    M:int count() -> a
net.minecraft.world.ticks.LevelTicks$PosAndContainerConsumer -> dxa$a -> net.minecraft.world.ticks.TickListServer$a
net.minecraft.world.ticks.ProtoChunkTicks -> dxb -> net.minecraft.world.ticks.ProtoChunkTickList
    F:java.util.List ticks -> a
    F:java.util.Set ticksPerPosition -> b
    M:void schedule(net.minecraft.world.ticks.NextTickListEntry) -> a
    M:void schedule(net.minecraft.world.ticks.TickListChunk) -> a
    M:boolean hasScheduledTick(net.minecraft.core.BlockPosition,java.lang.Object) -> a
    M:int count() -> a
    M:net.minecraft.nbt.NBTBase save(long,java.util.function.Function) -> b
    M:java.util.List scheduledTicks() -> b
    M:net.minecraft.world.ticks.ProtoChunkTickList load(net.minecraft.nbt.NBTTagList,java.util.function.Function,net.minecraft.world.level.ChunkCoordIntPair) -> a
net.minecraft.world.ticks.SavedTick -> dxc -> net.minecraft.world.ticks.TickListChunk
    F:java.lang.Object type -> b
    F:net.minecraft.core.BlockPosition pos -> c
    F:int delay -> d
    F:net.minecraft.world.ticks.TickListPriority priority -> e
    F:java.lang.String TAG_ID -> f
    F:java.lang.String TAG_X -> g
    F:java.lang.String TAG_Y -> h
    F:java.lang.String TAG_Z -> i
    F:java.lang.String TAG_DELAY -> j
    F:java.lang.String TAG_PRIORITY -> k
    F:it.unimi.dsi.fastutil.Hash$Strategy UNIQUE_TICK_HASH -> a
    M:void loadTickList(net.minecraft.nbt.NBTTagList,java.util.function.Function,net.minecraft.world.level.ChunkCoordIntPair,java.util.function.Consumer) -> a
    M:java.util.Optional loadTick(net.minecraft.nbt.NBTTagCompound,java.util.function.Function) -> a
    M:net.minecraft.nbt.NBTTagCompound saveTick(java.lang.String,net.minecraft.core.BlockPosition,int,net.minecraft.world.ticks.TickListPriority) -> a
    M:net.minecraft.nbt.NBTTagCompound saveTick(net.minecraft.world.ticks.NextTickListEntry,java.util.function.Function,long) -> a
    M:net.minecraft.nbt.NBTTagCompound save(java.util.function.Function) -> a
    M:net.minecraft.world.ticks.NextTickListEntry unpack(long,long) -> a
    M:net.minecraft.world.ticks.TickListChunk probe(java.lang.Object,net.minecraft.core.BlockPosition) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.Object type() -> a
    M:net.minecraft.core.BlockPosition pos() -> b
    M:int delay() -> c
    M:net.minecraft.world.ticks.TickListPriority priority() -> d
    M:int hashCode(net.minecraft.world.ticks.TickListChunk) -> a
    M:boolean equals(net.minecraft.world.ticks.TickListChunk,net.minecraft.world.ticks.TickListChunk) -> a
    M:boolean equals(java.lang.Object,java.lang.Object) -> equals
net.minecraft.world.ticks.ScheduledTick -> dxd -> net.minecraft.world.ticks.NextTickListEntry
    F:java.lang.Object type -> d
    F:net.minecraft.core.BlockPosition pos -> e
    F:long triggerTick -> f
    F:net.minecraft.world.ticks.TickListPriority priority -> g
    F:long subTickOrder -> h
    F:java.util.Comparator DRAIN_ORDER -> a
    F:java.util.Comparator INTRA_TICK_DRAIN_ORDER -> b
    F:it.unimi.dsi.fastutil.Hash$Strategy UNIQUE_TICK_HASH -> c
    M:net.minecraft.world.ticks.NextTickListEntry probe(java.lang.Object,net.minecraft.core.BlockPosition) -> a
    M:boolean equals(java.lang.Object) -> equals
    M:java.lang.Object type() -> a
    M:net.minecraft.core.BlockPosition pos() -> b
    M:long triggerTick() -> c
    M:net.minecraft.world.ticks.TickListPriority priority() -> d
    M:long subTickOrder() -> e
    M:int hashCode(net.minecraft.world.ticks.NextTickListEntry) -> a
    M:boolean equals(net.minecraft.world.ticks.NextTickListEntry,net.minecraft.world.ticks.NextTickListEntry) -> a
    M:boolean equals(java.lang.Object,java.lang.Object) -> equals
net.minecraft.world.ticks.SerializableTickContainer -> dxe -> net.minecraft.world.ticks.SerializableTickContainer
net.minecraft.world.ticks.TickAccess -> dxf -> net.minecraft.world.ticks.TickList
net.minecraft.world.ticks.TickContainerAccess -> dxg -> net.minecraft.world.ticks.TickContainerAccess
net.minecraft.world.ticks.TickPriority -> dxh -> net.minecraft.world.ticks.TickListPriority
    F:net.minecraft.world.ticks.TickListPriority EXTREMELY_HIGH -> a
    F:net.minecraft.world.ticks.TickListPriority VERY_HIGH -> b
    F:net.minecraft.world.ticks.TickListPriority HIGH -> c
    F:net.minecraft.world.ticks.TickListPriority NORMAL -> d
    F:net.minecraft.world.ticks.TickListPriority LOW -> e
    F:net.minecraft.world.ticks.TickListPriority VERY_LOW -> f
    F:net.minecraft.world.ticks.TickListPriority EXTREMELY_LOW -> g
    F:int value -> h
    M:net.minecraft.world.ticks.TickListPriority byValue(int) -> a
    M:int getValue() -> a
net.minecraft.world.ticks.WorldGenTickAccess -> dxi -> net.minecraft.world.ticks.TickListWorldGen
    F:java.util.function.Function containerGetter -> a
    M:boolean hasScheduledTick(net.minecraft.core.BlockPosition,java.lang.Object) -> a
    M:void schedule(net.minecraft.world.ticks.NextTickListEntry) -> a
    M:boolean willTickThisTick(net.minecraft.core.BlockPosition,java.lang.Object) -> b
    M:int count() -> a
